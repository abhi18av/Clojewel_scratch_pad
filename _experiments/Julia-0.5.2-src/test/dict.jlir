(:quote, (:block,
    (:line, 4, :none),
    (:(=), :p, (:call, :Pair, 1, 2)),
    (:line, 5, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :p, (:(=>), 1, 2))),
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :p, (:(=>), 1, 2))),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :start, :p), 1)),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :next, :p, 1), (:tuple, 1, 2))),
    (:line, 9, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :done, :p, 1))),
    (:line, 10, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :done, :p, 2))),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:call, :done, :p, 3)),
    (:line, 12, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :done, :p, 0))),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:call, :endof, :p), :(==), (:call, :length, :p), :(==), 2)),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :indexed_next
            )), :p, 1, (:tuple, 1, 2)), (:tuple, 1, 2))),
    (:line, 15, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :indexed_next
            )), :p, 2, (:tuple, 1, 2)), (:tuple, 2, 3))),
    (:line, 16, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:(=>), 1, 2), (:(=>), 2, 3))),
    (:line, 17, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:(=>), 2, 2), (:(=>), 2, 3))),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :<, (:(=>), 2, 3), (:(=>), 2, 3)))),
    (:line, 19, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:(=>), 2, 3), (:(=>), 4, 3))),
    (:line, 20, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:(=>), 1, 100), (:(=>), 4, 1))),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :p, 1), 1)),
    (:line, 22, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :p, 2), 2)),
    (:line, 23, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :p, 3)),
    (:line, 24, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :p, false)),
    (:line, 25, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :p, true), 1)),
    (:line, 26, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :p, 2.0), 2)),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :p, 0x01), 1)),
    (:line, 28, :none),
    (:macrocall, Symbol("@test_throws"), :InexactError, (:ref, :p, 2.3)),
    (:line, 31, :none),
    (:(=), :h, (:call, :Dict)),
    (:line, 32, :none),
    (:for, (:(=), :i, (:(:), 1, 10000)), (:block,
        (:line, 33, :none),
        (:(=), (:ref, :h, :i), (:call, :+, :i, 1))
      )),
    (:line, 35, :none),
    (:for, (:(=), :i, (:(:), 1, 10000)), (:block,
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, :i), (:call, :+, :i, 1)))
      )),
    (:line, 38, :none),
    (:for, (:(=), :i, (:(:), 1, 2, 10000)), (:block,
        (:line, 39, :none),
        (:call, :delete!, :h, :i)
      )),
    (:line, 41, :none),
    (:for, (:(=), :i, (:(:), 1, 2, 10000)), (:block,
        (:line, 42, :none),
        (:(=), (:ref, :h, :i), (:call, :+, :i, 1))
      )),
    (:line, 44, :none),
    (:for, (:(=), :i, (:(:), 1, 10000)), (:block,
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, :i), (:call, :+, :i, 1)))
      )),
    (:line, 47, :none),
    (:for, (:(=), :i, (:(:), 1, 10000)), (:block,
        (:line, 48, :none),
        (:call, :delete!, :h, :i)
      )),
    (:line, 50, :none),
    (:macrocall, Symbol("@test"), (:call, :isempty, :h)),
    (:line, 51, :none),
    (:(=), (:ref, :h, 77), 100),
    (:line, 52, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, 77), 100)),
    (:line, 53, :none),
    (:for, (:(=), :i, (:(:), 1, 10000)), (:block,
        (:line, 54, :none),
        (:(=), (:ref, :h, :i), (:call, :+, :i, 1))
      )),
    (:line, 56, :none),
    (:for, (:(=), :i, (:(:), 1, 2, 10000)), (:block,
        (:line, 57, :none),
        (:call, :delete!, :h, :i)
      )),
    (:line, 59, :none),
    (:for, (:(=), :i, (:(:), 10001, 20000)), (:block,
        (:line, 60, :none),
        (:(=), (:ref, :h, :i), (:call, :+, :i, 1))
      )),
    (:line, 62, :none),
    (:for, (:(=), :i, (:(:), 2, 2, 10000)), (:block,
        (:line, 63, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, :i), (:call, :+, :i, 1)))
      )),
    (:line, 65, :none),
    (:for, (:(=), :i, (:(:), 10000, 20000)), (:block,
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, :i), (:call, :+, :i, 1)))
      )),
    (:line, 68, :none),
    (:(=), :h, (:call, (:curly, :Dict, :Any, :Any), (:(=>), "a", 3))),
    (:line, 69, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :h, "a"), 3)),
    (:line, 70, :none),
    (:(=), (:ref, :h, "a", "b"), 4),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:ref, :h, "a", "b"), :(==), (:ref, :h, (:tuple, "a", "b")), :(==), 4)),
    (:line, 72, :none),
    (:(=), (:ref, :h, "a", "b", "c"), 4),
    (:line, 73, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:ref, :h, "a", "b", "c"), :(==), (:ref, :h, (:tuple, "a", "b", "c")), :(==), 4)),
    (:line, 76, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :h), (:curly, :Pair, :Any, :Any))),
    (:line, 77, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :keytype, :h), :Any)),
    (:line, 78, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :valtype, :h), :Any)),
    (:line, 80, :none),
    (:let, (:block,
        (:line, 81, :none),
        (:(=), :td, (:call, (:curly, :Dict, :AbstractString, :Float64))),
        (:line, 82, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :td), (:curly, :Pair, :AbstractString, :Float64))),
        (:line, 83, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :keytype, :td), :AbstractString)),
        (:line, 84, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :valtype, :td), :Float64)),
        (:line, 85, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :keytype, (:curly, :Dict, :AbstractString, :Float64)), :AbstractString)),
        (:line, 86, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :valtype, (:curly, :Dict, :AbstractString, :Float64)), :Float64))
      )),
    (:line, 89, :none),
    (:let, (:block,
        (:line, 90, :none),
        (:(=), :z, (:call, :Dict)),
        (:line, 91, :none),
        (:(=), :get_KeyError, false),
        (:line, 92, :none),
        (:try, (:block,
            (:line, 93, :none),
            (:ref, :z, "a")
          ), :_e123_, (:block,
            (:line, 95, :none),
            (:(=), :get_KeyError, (:call, :isa, :_e123_, :KeyError))
          )),
        (:line, 97, :none),
        (:macrocall, Symbol("@test"), :get_KeyError)
      )),
    (:line, 100, :none),
    (:(=), :_d, (:call, :Dict, (:(=>), "a", 0))),
    (:line, 101, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:comprehension, (:generator, :k, (:(=), :k, (:call, :filter, (:->, :x, (:block,
                    (:line, 101, :none),
                    (:call, :(==), (:call, :length, :x), 1)
                  )), (:call, :collect, (:call, :keys, :_d)))))), (:curly, :Vector, :String))),
    (:line, 103, :none),
    (:let, (:block,
        (:line, 104, :none),
        (:(=), :d, (:call, :Dict, (:tuple, (:tuple, 1, 2), (:tuple, 3, 4)))),
        (:line, 105, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, 1), 2)),
        (:line, 106, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, 3), 4)),
        (:line, 107, :none),
        (:(=), :d2, (:call, :Dict, (:(=>), 1, 2), (:(=>), 3, 4))),
        (:line, 108, :none),
        (:(=), :d3, (:call, :Dict, (:tuple, (:(=>), 1, 2), (:(=>), 3, 4)))),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:comparison, :d, :(==), :d2, :(==), :d3)),
        (:line, 110, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :d), :(==), (:call, :typeof, :d2), :(==), (:call, :typeof, :d3), :(==), (:curly, :Dict, :Int, :Int))),
        (:line, 112, :none),
        (:(=), :d, (:call, :Dict, (:tuple, (:tuple, 1, 2), (:tuple, 3, "b")))),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, 1), 2)),
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 3), "b")),
        (:line, 115, :none),
        (:(=), :d2, (:call, :Dict, (:(=>), 1, 2), (:(=>), 3, "b"))),
        (:line, 116, :none),
        (:(=), :d3, (:call, :Dict, (:tuple, (:(=>), 1, 2), (:(=>), 3, "b")))),
        (:line, 117, :none),
        (:macrocall, Symbol("@test"), (:comparison, :d, :(==), :d2, :(==), :d3)),
        (:line, 118, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :d), :(==), (:call, :typeof, :d2), :(==), (:call, :typeof, :d3), :(==), (:curly, :Dict, :Int, :Any))),
        (:line, 120, :none),
        (:(=), :d, (:call, :Dict, (:tuple, (:tuple, 1, 2), (:tuple, "a", 4)))),
        (:line, 121, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, 1), 2)),
        (:line, 122, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, "a"), 4)),
        (:line, 123, :none),
        (:(=), :d2, (:call, :Dict, (:(=>), 1, 2), (:(=>), "a", 4))),
        (:line, 124, :none),
        (:(=), :d3, (:call, :Dict, (:tuple, (:(=>), 1, 2), (:(=>), "a", 4)))),
        (:line, 125, :none),
        (:macrocall, Symbol("@test"), (:comparison, :d, :(==), :d2, :(==), :d3)),
        (:line, 126, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :d), :(==), (:call, :typeof, :d2), :(==), (:call, :typeof, :d3), :(==), (:curly, :Dict, :Any, :Int))),
        (:line, 128, :none),
        (:(=), :d, (:call, :Dict, (:tuple, (:tuple, 1, 2), (:tuple, "a", "b")))),
        (:line, 129, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d, 1), 2)),
        (:line, 130, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, "a"), "b")),
        (:line, 131, :none),
        (:(=), :d2, (:call, :Dict, (:(=>), 1, 2), (:(=>), "a", "b"))),
        (:line, 132, :none),
        (:(=), :d3, (:call, :Dict, (:tuple, (:(=>), 1, 2), (:(=>), "a", "b")))),
        (:line, 133, :none),
        (:macrocall, Symbol("@test"), (:comparison, :d, :(==), :d2, :(==), :d3)),
        (:line, 134, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :d), :(==), (:call, :typeof, :d2), :(==), (:call, :typeof, :d3), :(==), (:curly, :Dict, :Any, :Any)))
      )),
    (:line, 137, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :first, (:call, :Dict))),
    (:line, 138, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, (:call, :Dict, (:(=>), (:quote, #QuoteNode
                :f
              ), 2))), (:(=>), (:quote, #QuoteNode
            :f
          ), 2))),
    (:line, 141, :none),
    (:let, (:block,
        (:line, 142, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :d, (:curly, :Dict, :Int, :Int))),
        (:line, 143, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d, (:call, :Dict, (:(=>), 1, 1), (:(=>), 2, 2), (:(=>), 3, 3))))
      ), (:(=), :d, (:macrocall, Symbol("@inferred"), (:call, :Dict, (:generator, (:(=>), :i, :i), (:(=), :i, (:(:), 1, 3))))))),
    (:line, 145, :none),
    (:let, (:block,
        (:line, 146, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :d, (:curly, :Dict, :Real, :Real))),
        (:line, 147, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d, (:call, (:curly, :Dict, :Real, :Real), (:(=>), 2.0, 3.0), (:(=>), 1, 2))))
      ), (:(=), :d, (:call, :Dict, (:generator, (:if, (:call, :(==), :i, 1), (:(=>), 1, 2), (:(=>), 2.0, 3.0)), (:(=), :i, (:(:), 1, 2)))))),
    (:line, 151, :none),
    (:let, (:block,
        (:line, 152, :none),
        (:(=), :d, (:call, (:curly, :Dict, :String, (:curly, :Vector, :Int)))),
        (:line, 153, :none),
        (:(=), (:ref, :d, "a"), (:vect, 1, 2)),
        (:line, 154, :none),
        (:macrocall, Symbol("@test_throws"), :MethodError, (:(=), (:ref, :d, "b"), 1)),
        (:line, 155, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :repr, :d), :AbstractString))
      )),
    (:line, 159, :none),
    (:let, (:block,
        (:line, 160, :none),
        (:local, :bar),
        (:line, 161, :none),
        (:(=), (:call, :bestkey, :d, :key), (:block,
            (:line, 161, :none),
            :key
          )),
        (:line, 162, :none),
        (:(=), (:call, (:curly, :bestkey, (:<:, :K, :AbstractString), :V), (:(::), :d, (:curly, :Associative, :K, :V)), :key), (:block,
            (:line, 162, :none),
            (:call, :string, :key)
          )),
        (:line, 163, :none),
        (:(=), (:call, :bar, :x), (:block,
            (:line, 163, :none),
            (:call, :bestkey, :x, (:quote, #QuoteNode
                :y
              ))
          )),
        (:line, 164, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :bar, (:call, :Dict, (:(=>), (:quote, #QuoteNode
                    :x
                  ), (:vect, 1, 2, 5)))), (:quote, #QuoteNode
              :y
            ))),
        (:line, 165, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :bar, (:call, :Dict, (:(=>), "x", (:vect, 1, 2, 5)))), "y"))
      )),
    (:line, 169, :none),
    (:type, true, :I1438T, (:block,
        (:line, 170, :none),
        :id
      )),
    (:line, 172, :none),
    (:import, :Base, :hash),
    (:line, 173, :none),
    (:(=), (:call, :hash, (:(::), :x, :I1438T), (:(::), :h, :UInt)), (:block,
        (:line, 173, :none),
        (:call, :hash, (:., :x, (:quote, #QuoteNode
              :id
            )), :h)
      )),
    (:line, 175, :none),
    (:let, (:block,
        (:line, 176, :none),
        (:local, :seq, :xs, :s),
        (:line, 177, :none),
        (:(=), :seq, (:vect, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, -32, -35, -34, -28, 37, 38, 39, 40, -30, -31, 41, 42, 43, 44, -33, -36, 45, 46, 47, 48, -37, -38, 49, 50, 51, 52, -46, -50, 53)),
        (:line, 179, :none),
        (:(=), :xs, (:comprehension, (:generator, (:call, :I1438T, :id), (:(=), :id, (:(:), 1, 53))))),
        (:line, 180, :none),
        (:(=), :s, (:call, :Set)),
        (:line, 181, :none),
        (:for, (:(=), :id, :seq), (:block,
            (:line, 182, :none),
            (:if, (:call, :>, :id, 0), (:block,
                (:line, 183, :none),
                (:(=), :x, (:ref, :xs, :id)),
                (:line, 184, :none),
                (:call, :push!, :s, :x),
                (:line, 185, :none),
                (:macrocall, Symbol("@test"), (:call, :in, :x, :s))
              ), (:block,
                (:line, 187, :none),
                (:call, :delete!, :s, (:ref, :xs, (:call, :-, :id)))
              ))
          ))
      )),
    (:line, 192, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :Dict), (:call, :Dict))),
    (:line, 193, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :Dict, (:(=>), 1, 1)), (:call, :Dict, (:(=>), 1, 1)))),
    (:line, 194, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, :Dict, (:(=>), 1, 1)), (:call, :Dict)))),
    (:line, 195, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, :Dict, (:(=>), 1, 1)), (:call, :Dict, (:(=>), 1, 2))))),
    (:line, 196, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, :Dict, (:(=>), 1, 1)), (:call, :Dict, (:(=>), 2, 1))))),
    (:line, 199, :none),
    (:(=), :data_in, (:comprehension, (:generator, (:tuple, (:call, :rand, (:(:), 1, 1000)), (:call, :randstring, 2)), (:(=), :_, (:(:), 1, 1001))))),
    (:line, 202, :none),
    (:(=), :d1, (:call, (:curly, :Dict, :Int, :AbstractString))),
    (:line, 203, :none),
    (:for, (:(=), (:tuple, :k, :v), :data_in), (:block,
        (:line, 204, :none),
        (:(=), (:ref, :d1, :k), :v)
      )),
    (:line, 206, :none),
    (:(=), :data_in, (:call, :collect, :d1)),
    (:line, 208, :none),
    (:for, (:(=), :i, (:(:), 1, (:call, :length, :data_in))), (:block,
        (:line, 209, :none),
        (:(=), :j, (:call, :rand, (:(:), 1, (:call, :length, :data_in)))),
        (:line, 210, :none),
        (:(=), (:tuple, (:ref, :data_in, :i), (:ref, :data_in, :j)), (:tuple, (:ref, :data_in, :j), (:ref, :data_in, :i)))
      )),
    (:line, 214, :none),
    (:(=), :d2, (:call, (:curly, :Dict, :Int, :AbstractString))),
    (:line, 215, :none),
    (:for, (:(=), (:tuple, :k, :v), :data_in), (:block,
        (:line, 216, :none),
        (:(=), (:ref, :d2, :k), :v)
      )),
    (:line, 219, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :d1, :d2)),
    (:line, 220, :none),
    (:(=), :d3, (:call, :copy, :d2)),
    (:line, 221, :none),
    (:(=), :d4, (:call, :copy, :d2)),
    (:line, 223, :none),
    (:call, :delete!, :d1, (:ref, (:ref, :data_in, (:call, :rand, (:(:), 1, (:call, :length, :data_in)))), 1)),
    (:line, 224, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, :d1, :d2))),
    (:line, 226, :none),
    (:(=), (:ref, :d3, (:ref, (:ref, :data_in, (:call, :rand, (:(:), 1, (:call, :length, :data_in)))), 1)), (:call, :randstring, 3)),
    (:line, 227, :none),
    (:call, :!, (:call, :isequal, :d1, :d3)),
    (:line, 229, :none),
    (:(=), (:ref, :d4, 1001), (:call, :randstring, 3)),
    (:line, 230, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, :d1, :d4))),
    (:line, 232, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :Dict), (:call, :sizehint!, (:call, :Dict), 96))),
    (:line, 237, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, :Dict, (:(=>), 1, 2)), (:call, :Dict, (:(=>), "dog", "bone"))))),
    (:line, 238, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, (:curly, :Dict, :Int, :Int)), (:call, (:curly, :Dict, :AbstractString, :AbstractString)))),
    (:line, 242, :none),
    (:let, (:block,
        (:line, 244, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get!, :d, 8, 5), 19)),
        (:line, 245, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get!, :d, 19, 2), 2)),
        (:line, 247, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get!, (:->, (:tuple,), (:block,
                  (:line, 248, :none),
                  (:call, :f, 2)
                )), :d, 42), 4)),
        (:line, 251, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get!, (:->, (:tuple,), (:block,
                  (:line, 252, :none),
                  (:call, :f, 200)
                )), :d, 42), 4)),
        (:line, 255, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get, (:->, (:tuple,), (:block,
                  (:line, 256, :none),
                  (:call, :f, 4)
                )), :d, 13), 16)),
        (:line, 259, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d, (:call, :Dict, (:(=>), 8, 19), (:(=>), 19, 2), (:(=>), 42, 4))))
      ), (:(=), (:call, :f, :x), (:block,
          (:line, 242, :none),
          (:call, :^, :x, 2)
        )), (:(=), :d, (:call, :Dict, (:(=>), 8, 19)))),
    (:line, 263, :none),
    (:for, (:(=), :d, (:tuple, (:call, :Dict, (:(=>), "\n", "\n"), (:(=>), "1", "\n"), (:(=>), "\n", "2")), (:call, :Dict, (:generator, (:(=>), (:call, :string, :i), :i), (:(=), :i, (:(:), 1, 30)))), (:call, :Dict, (:generator, (:(=>), (:call, :reshape, (:(:), 1, (:call, :^, :i, 2)), :i, :i), (:call, :reshape, (:(:), 1, (:call, :^, :i, 2)), :i, :i)), (:(=), :i, (:(:), 1, 24)))), (:call, :Dict, (:generator, (:(=>), (:call, :String, (:typed_vcat, :Char, (:(:), 'α', (:call, :+, 'α', :i)))), (:call, :String, (:typed_vcat, :Char, (:(:), 'α', (:call, :+, 'α', :i))))), (:(=), :i, (:call, :*, (:(:), 1, 10), 10)))), (:call, :Dict, (:(=>), "key", (:call, :zeros, 0, 0))))), (:block,
        (:line, 268, :none),
        (:for, (:block,
            (:(=), :cols, (:tuple, 12, 40, 80)),
            (:(=), :rows, (:tuple, 2, 10, 24))
          ), (:block,
            (:line, 270, :none),
            (:(=), :s, (:call, :IOBuffer)),
            (:line, 271, :none),
            (:(=), :io, (:call, (:., :Base, (:quote, #QuoteNode
                    :IOContext
                  )), :s, (:kw, :limit, true), (:kw, :displaysize, (:tuple, :rows, :cols)))),
            (:line, 272, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :show
                )), :io, (:call, :MIME, "text/plain"), :d),
            (:line, 273, :none),
            (:(=), :out, (:call, :split, (:call, :takebuf_string, :s), '\n')),
            (:line, 274, :none),
            (:for, (:(=), :line, (:ref, :out, (:(:), 2, :end))), (:block,
                (:line, 275, :none),
                (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :strwidth, :line), :cols))
              )),
            (:line, 277, :none),
            (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :length, :out), :rows)),
            (:line, 279, :none),
            (:for, (:(=), :f, (:tuple, :keys, :values)), (:block,
                (:line, 280, :none),
                (:(=), :s, (:call, :IOBuffer)),
                (:line, 281, :none),
                (:(=), :io, (:call, (:., :Base, (:quote, #QuoteNode
                        :IOContext
                      )), :s, (:kw, :limit, true), (:kw, :displaysize, (:tuple, :rows, :cols)))),
                (:line, 282, :none),
                (:call, (:., :Base, (:quote, #QuoteNode
                      :show
                    )), :io, (:call, :MIME, "text/plain"), (:call, :f, :d)),
                (:line, 283, :none),
                (:(=), :out, (:call, :split, (:call, :takebuf_string, :s), '\n')),
                (:line, 284, :none),
                (:for, (:(=), :line, (:ref, :out, (:(:), 2, :end))), (:block,
                    (:line, 285, :none),
                    (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :strwidth, :line), :cols))
                  )),
                (:line, 287, :none),
                (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :length, :out), :rows))
              ))
          )),
        (:line, 291, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :show
            )), (:call, :IOBuffer), :d),
        (:line, 292, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :summary, :d)))),
        (:line, 293, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :summary, (:call, :keys, :d))))),
        (:line, 294, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :summary, (:call, :values, :d)))))
      )),
    (:line, 298, :none),
    (:let, (:block,
        (:line, 299, :none),
        (:(=), :buf, (:call, :IOBuffer)),
        (:line, 300, :none),
        (:call, :showcompact, :buf, :d),
        (:line, 304, :none),
        (:(=), :result, (:call, :String, :buf)),
        (:line, 305, :none),
        (:macrocall, Symbol("@test"), (:call, :contains, :result, "Dict")),
        (:line, 306, :none),
        (:macrocall, Symbol("@test"), (:call, :contains, :result, "(1=>2)=>(3=>45)")),
        (:line, 307, :none),
        (:macrocall, Symbol("@test"), (:call, :contains, :result, "(3=>10)=>(10=>11)"))
      ), (:(=), :d, (:call, :Dict, (:(=>), (:(=>), 1, 2), (:(=>), 3, 45)), (:(=>), (:(=>), 3, 10), (:(=>), 10, 11))))),
    (:line, 311, :none),
    (:type, true, :Alpha, (:block,
        (:line, 311, :none)
      )),
    (:line, 312, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :show
          )), (:(::), :io, :IO), (:(::), :Alpha)), (:block,
        (:line, 312, :none),
        (:call, :print, :io, "α")
      )),
    (:line, 313, :none),
    (:let, (:block,
        (:line, 316, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :show
            )), :io, (:call, :MIME, "text/plain"), (:call, :Dict, (:(=>), (:call, :Alpha), 1))),
        (:line, 317, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :contains, (:call, :String, :sbuff), "…"))),
        (:line, 318, :none),
        (:macrocall, Symbol("@test"), (:call, :endswith, (:call, :String, :sbuff), "α => 1"))
      ), (:(=), :sbuff, (:call, :IOBuffer)), (:(=), :io, (:call, (:., :Base, (:quote, #QuoteNode
              :IOContext
            )), :sbuff, (:kw, :limit, true), (:kw, :displaysize, (:tuple, 10, 20))))),
    (:line, 322, :none),
    (:let, (:block,
        (:line, 323, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d, (:call, :Dict, (:(=>), 'a', 1), (:(=>), 'b', 1), (:(=>), 'c', 1))))
      ), (:(=), :d, (:call, (:curly, :Dict, :Any, :Any), (:call, :Dict, (:generator, (:(=>), :x, 1), (:(=), :x, (:vect, 'a', 'b', 'c'))))))),
    (:line, 327, :none),
    (:let, (:block,
        (:line, 328, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d, (:call, :Dict, (:(=>), "a", "foo"), (:(=>), "b", "foo"), (:(=>), "c", "foo"))))
      ), (:(=), :d, (:call, (:curly, :Dict, :AbstractString, :AbstractString), (:call, :Dict, (:generator, (:(=>), :a, "foo"), (:(=), :a, (:vect, "a", "b", "c"))))))),
    (:line, 332, :none),
    (:(=), :d5886, (:call, :Dict)),
    (:line, 333, :none),
    (:for, (:(=), :k5886, (:(:), 1, 11)), (:block,
        (:line, 334, :none),
        (:(=), (:ref, :d5886, :k5886), 1)
      )),
    (:line, 336, :none),
    (:for, (:(=), :k5886, (:call, :keys, :d5886)), (:block,
        (:line, 338, :none),
        (:+=, (:ref, :d5886, :k5886), 1)
      )),
    (:line, 342, :none),
    (:let, (:block,
        (:line, 343, :none),
        (:(=), :a, (:call, :Dict, (:(=>), "foo", 0.0), (:(=>), "bar", 42.0))),
        (:line, 344, :none),
        (:(=), :b, (:call, :Dict, (:(=>), "フー", 17), (:(=>), "バー", 4711))),
        (:line, 345, :none),
        (:macrocall, Symbol("@test"), (:call, :is, (:call, :typeof, (:call, :merge, :a, :b)), (:curly, :Dict, :String, :Float64)))
      )),
    (:line, 349, :none),
    (:let, (:block,
        (:line, 350, :none),
        (:(=), :d, (:call, :Dict)),
        (:line, 351, :none),
        (:macrocall, Symbol("@test"), (:call, :is, (:call, :push!, :d, (:(=>), 'a', 1)), :d)),
        (:line, 352, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'a'), 1)),
        (:line, 353, :none),
        (:macrocall, Symbol("@test"), (:call, :is, (:call, :push!, :d, (:(=>), 'b', 2), (:(=>), 'c', 3)), :d)),
        (:line, 354, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'b'), 2)),
        (:line, 355, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'c'), 3)),
        (:line, 356, :none),
        (:macrocall, Symbol("@test"), (:call, :is, (:call, :push!, :d, (:(=>), 'd', 4), (:(=>), 'e', 5), (:(=>), 'f', 6)), :d)),
        (:line, 357, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'd'), 4)),
        (:line, 358, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'e'), 5)),
        (:line, 359, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 'f'), 6)),
        (:line, 360, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d), 6))
      )),
    (:line, 364, :none),
    (:type, true, (:curly, :T10647, :T), (:block,
        (:line, 364, :none),
        (:(::), :x, :T)
      )),
    (:line, 365, :none),
    (:let, (:block,
        (:line, 366, :none),
        (:(=), :a, (:call, :ObjectIdDict)),
        (:line, 367, :none),
        (:(=), (:ref, :a, 1), :a),
        (:line, 368, :none),
        (:(=), (:ref, :a, :a), 2),
        (:line, 369, :none),
        (:(=), (:ref, :a, 3), (:call, :T10647, :a)),
        (:line, 370, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, :a)),
        (:line, 371, :none),
        (:call, :show, (:call, :IOBuffer), :a),
        (:line, 372, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :show
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :IOContext
              )), (:call, :IOBuffer), (:(=>), (:quote, #QuoteNode
                :limit
              ), true)), :a),
        (:line, 373, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :show
            )), (:call, :IOBuffer), :a),
        (:line, 374, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :show
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :IOContext
              )), (:call, :IOBuffer), (:(=>), (:quote, #QuoteNode
                :limit
              ), true)), :a)
      )),
    (:line, 379, :none),
    (:let, (:block,
        (:line, 380, :none),
        (:call, :get!, (:->, (:tuple,), (:block,
              (:line, 381, :none),
              (:(=), (:ref, :d, 0), 1)
            )), :d, 0),
        (:line, 383, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d), 1))
      ), (:(=), :d, (:call, (:curly, :Dict, :Int, :Int)))),
    (:line, 387, :none),
    (:(=), :d, (:call, :Dict, (:(=>), 'a', 1), (:(=>), 'b', 1), (:(=>), 'c', 3))),
    (:line, 388, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:comprehension, (:generator, (:ref, :d, :k), (:(=), :k, (:call, :keys, :d)))), :(==), (:comprehension, (:generator, (:ref, :d, :k), (:(=), :k, (:call, :eachindex, :d)))), :(==), (:comprehension, (:generator, :v, (:(=), (:tuple, :k, :v), :d))), :(==), (:comprehension, (:generator, (:ref, :d, (:ref, :x, 1)), (:(=), (:tuple, :i, :x), (:call, :enumerate, :d)))))),
    (:line, 392, :none),
    (:(=), :d, (:call, :Dict, (:(=>), (:quote, #QuoteNode
            :a
          ), "a"))),
    (:line, 393, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:macrocall, Symbol("@inferred"), (:call, :map, :identity, :d)), :d)),
    (:line, 394, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:macrocall, Symbol("@inferred"), (:call, :map, (:->, :p, (:block,
                (:line, 394, :none),
                (:(=>), (:., :p, (:quote, #QuoteNode
                      :first
                    )), (:ref, (:., :p, (:quote, #QuoteNode
                        :second
                      )), 1))
              )), :d)), (:call, :Dict, (:(=>), (:quote, #QuoteNode
              :a
            ), 'a')))),
    (:line, 395, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :map, (:->, :p, (:block,
            (:line, 395, :none),
            (:., :p, (:quote, #QuoteNode
                :second
              ))
          )), :d)),
    (:line, 398, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Dict, 0)),
    (:line, 399, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Dict, (:vect, 1))),
    (:line, 400, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Dict, (:vect, (:tuple, 1, 2), 0))),
    (:line, 403, :none),
    (:import, :Base, :ImmutableDict),
    (:line, 404, :none),
    (:let, (:block,
        (:line, 416, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :collect, :d))),
        (:line, 417, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :collect, :d1)))),
        (:line, 418, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, :d)),
        (:line, 419, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :d1))),
        (:line, 420, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d), 0)),
        (:line, 421, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d1), 1)),
        (:line, 422, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d2), 2)),
        (:line, 423, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d3), 3)),
        (:line, 424, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :d4), 4)),
        (:line, 425, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, :k1, (:call, :keys, :d)))),
        (:line, 426, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :k1, (:call, :keys, :d1))),
        (:line, 427, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :k1, (:call, :keys, :d2))),
        (:line, 428, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :k1, (:call, :keys, :d3))),
        (:line, 429, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :k1, (:call, :keys, :d4))),
        (:line, 431, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :haskey, :d, :k1))),
        (:line, 432, :none),
        (:macrocall, Symbol("@test"), (:call, :haskey, :d1, :k1)),
        (:line, 433, :none),
        (:macrocall, Symbol("@test"), (:call, :haskey, :d2, :k1)),
        (:line, 434, :none),
        (:macrocall, Symbol("@test"), (:call, :haskey, :d3, :k1)),
        (:line, 435, :none),
        (:macrocall, Symbol("@test"), (:call, :haskey, :d4, :k1)),
        (:line, 436, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, :k2, (:call, :keys, :d1)))),
        (:line, 437, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :k2, (:call, :keys, :d2))),
        (:line, 438, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, :k1, (:call, :values, :d4)))),
        (:line, 439, :none),
        (:macrocall, Symbol("@test"), (:call, :in, :v1, (:call, :values, :d4))),
        (:line, 440, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :d1), (:vect, (:call, :Pair, :k1, :v1)))),
        (:line, 441, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :d4), (:call, :reverse, (:vect, (:call, :Pair, :k1, :v1), (:call, :Pair, :k2, :v2), (:call, :Pair, :k1, :v2), (:call, :Pair, :k2, :v1))))),
        (:line, 442, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :d1, (:call, :ImmutableDict, :d, (:(=>), :k1, :v1)))),
        (:line, 443, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, (:(=>), :k1, :v2), :d2))),
        (:line, 444, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k1, :v2), :d3)),
        (:line, 445, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k1, :v1), :d4)),
        (:line, 446, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k1, :v2), :d4)),
        (:line, 447, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, (:(=>), :k2, "value2"), :d4, :is))),
        (:line, 448, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k2, :v2), :d4, :is)),
        (:line, 449, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k2, :NaN), :dnan, :isequal)),
        (:line, 450, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k2, :NaN), :dnan, :is)),
        (:line, 451, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, (:(=>), :k2, :NaN), :dnan, :(==)))),
        (:line, 452, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, (:(=>), :k2, 1), :dnum, :is))),
        (:line, 453, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k2, 1.0), :dnum, :is)),
        (:line, 454, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, (:(=>), :k2, 1), :dnum, :<))),
        (:line, 455, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:(=>), :k2, 0), :dnum, :<)),
        (:line, 456, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :d1, "key1", (:quote, #QuoteNode
                :default
              )), :v1)),
        (:line, 457, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :d4, "key1", (:quote, #QuoteNode
                :default
              )), :v2)),
        (:line, 458, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :d4, "foo", (:quote, #QuoteNode
                :default
              )), (:quote, #QuoteNode
              :default
            ))),
        (:line, 459, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :d, :k1, (:quote, #QuoteNode
                :default
              )), (:quote, #QuoteNode
              :default
            ))),
        (:line, 460, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d1, "key1"), :v1)),
        (:line, 461, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :d4, "key1"), :v2)),
        (:line, 462, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :similar, :d3), :d)),
        (:line, 463, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :similar, :d), :d)),
        (:line, 465, :none),
        (:macrocall, Symbol("@test_throws"), :KeyError, (:ref, :d, :k1)),
        (:line, 466, :none),
        (:macrocall, Symbol("@test_throws"), :KeyError, (:ref, :d1, "key2"))
      ), (:(=), :d, (:call, (:curly, :ImmutableDict, :String, :String))), (:(=), :k1, "key1"), (:(=), :k2, "key2"), (:(=), :v1, "value1"), (:(=), :v2, "value2"), (:(=), :d1, (:call, :ImmutableDict, :d, (:(=>), :k1, :v1))), (:(=), :d2, (:call, :ImmutableDict, :d1, (:(=>), :k2, :v2))), (:(=), :d3, (:call, :ImmutableDict, :d2, (:(=>), :k1, :v2))), (:(=), :d4, (:call, :ImmutableDict, :d3, (:(=>), :k2, :v1))), (:(=), :dnan, (:call, (:curly, :ImmutableDict, :String, :Float64), :k2, :NaN)), (:(=), :dnum, (:call, :ImmutableDict, :dnan, (:(=>), :k2, 1)))),
    (:line, 470, :none),
    (:let, (:block,
        (:line, 471, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :filter, :f, :d), :(==), (:call, :filter!, :f, (:call, :copy, :d)), :(==), (:call, :invoke, :filter!, (:tuple, :Function, :Associative), :f, (:call, :copy, :d)), :(==), (:call, :Dict, (:call, :zip, (:(:), 2, 2, 1000), (:(:), 2, 2, 1000)))))
      ), (:(=), :d, (:call, :Dict, (:call, :zip, (:(:), 1, 1000), (:(:), 1, 1000)))), (:(=), :f, (:->, (:tuple, :k, :v), (:block,
            (:line, 470, :none),
            (:call, :iseven, :k)
          )))),
    (:line, 478, :none),
    (:type, false, (:<:, :MyString, :AbstractString), (:block,
        (:line, 479, :none),
        (:(::), :str, :String)
      )),
    (:line, 481, :none),
    (:import, :Base, :(==)),
    (:line, 483, :none),
    (:const, (:global, (:(=), :hashoffset, (:vect, (:call, :UInt, 190))))),
    (:line, 485, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :hash
          )), (:(::), :s, :MyString)), (:block,
        (:line, 485, :none),
        (:call, :+, (:call, :hash, (:., :s, (:quote, #QuoteNode
                :str
              ))), (:ref, :hashoffset))
      )),
    (:line, 486, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :endof
          )), (:(::), :s, :MyString)), (:block,
        (:line, 486, :none),
        (:call, :endof, (:., :s, (:quote, #QuoteNode
              :str
            )))
      )),
    (:line, 487, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :next
          )), (:(::), :s, :MyString), (:(::), :v, :Int)), (:block,
        (:line, 487, :none),
        (:call, :next, (:., :s, (:quote, #QuoteNode
              :str
            )), :v)
      )),
    (:line, 488, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :isequal
          )), (:(::), :a, :MyString), (:(::), :b, :MyString)), (:block,
        (:line, 488, :none),
        (:call, :isequal, (:., :a, (:quote, #QuoteNode
              :str
            )), (:., :b, (:quote, #QuoteNode
              :str
            )))
      )),
    (:line, 489, :none),
    (:(=), (:call, :(==), (:(::), :a, :MyString), (:(::), :b, :MyString)), (:block,
        (:line, 489, :none),
        (:call, :(==), (:., :a, (:quote, #QuoteNode
              :str
            )), (:., :b, (:quote, #QuoteNode
              :str
            )))
      )),
    (:line, 491, :none),
    (:let, (:block,
        (:line, 506, :none),
        (:(=), :d, (:call, (:curly, :Dict, :AbstractString, :Int))),
        (:line, 507, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
            (:line, 508, :none),
            (:(=), (:ref, :d, (:ref, :badKeys, :i)), :i)
          )),
        (:line, 511, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
            (:line, 512, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, (:ref, :badKeys, :i)), :i))
          )),
        (:line, 516, :none),
        (:for, (:(=), :offset, (:(:), 0, 1023)), (:block,
            (:line, 517, :none),
            (:(=), :d2, (:call, (:curly, :Dict, :MyString, :Int))),
            (:line, 518, :none),
            (:(=), (:ref, :hashoffset), :offset),
            (:line, 519, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
                (:line, 520, :none),
                (:(=), (:ref, :d2, (:call, :MyString, (:ref, :badKeys, :i))), :i)
              )),
            (:line, 523, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
                (:line, 524, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d2, (:call, :MyString, (:ref, :badKeys, :i))), :i))
              ))
          ))
      ), (:(=), :badKeys, (:vect, "FINO_emv5.0", "FINO_ema0.1", "RATE_ema1.0", "NIBPM_ema1.0", "SAO2_emv5.0", "O2FLOW_ema5.0", "preop_Neuro/Psych_", "gender_", "FIO2_ema0.1", "PEAK_ema5.0", "preop_Reproductive_denies", "O2FLOW_ema0.1", "preop_Endocrine_denies", "preop_Respiratory_", "NIBPM_ema0.1", "PROPOFOL_MCG/KG/MIN_decay5.0", "NIBPD_ema1.0", "NIBPS_ema5.0", "anesthesiaStartTime", "NIBPS_ema1.0", "RESPRATE_ema1.0", "PEAK_ema0.1", "preop_GU_denies", "preop_Cardiovascular_", "PIP_ema5.0", "preop_ENT_denies", "preop_Skin_denies", "preop_Renal_denies", "asaCode_IIIE", "N2OFLOW_emv5.0", "NIBPD_emv5.0", "NIBPM_ema5.0", "preop_Respiratory_complete", "ETCO2_ema5.0", "RESPRATE_ema0.1", "preop_Functional Status_<2", "preop_Renal_symptoms", "ECGRATE_ema5.0", "FIO2_emv5.0", "RESPRATE_emv5.0", "7wu3ty0a4fs", "BVO", "4UrCWXUsaT"))),
    (:line, 529, :none),
    (:type, false, (:<:, :MyInt, :Integer), (:block,
        (:line, 530, :none),
        (:(::), :val, :UInt)
      )),
    (:line, 533, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :hash
          )), (:(::), :v, :MyInt)), (:block,
        (:line, 533, :none),
        (:call, :+, (:., :v, (:quote, #QuoteNode
              :val
            )), (:ref, :hashoffset))
      )),
    (:line, 534, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :endof
          )), (:(::), :v, :MyInt)), (:block,
        (:line, 534, :none),
        (:call, :endof, (:., :v, (:quote, #QuoteNode
              :val
            )))
      )),
    (:line, 535, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :next
          )), (:(::), :v, :MyInt), (:(::), :i, :Int)), (:block,
        (:line, 535, :none),
        (:call, :next, (:., :v, (:quote, #QuoteNode
              :val
            )), :i)
      )),
    (:line, 536, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :isequal
          )), (:(::), :a, :MyInt), (:(::), :b, :MyInt)), (:block,
        (:line, 536, :none),
        (:call, :isequal, (:., :a, (:quote, #QuoteNode
              :val
            )), (:., :b, (:quote, #QuoteNode
              :val
            )))
      )),
    (:line, 537, :none),
    (:(=), (:call, :(==), (:(::), :a, :MyInt), (:(::), :b, :MyInt)), (:block,
        (:line, 537, :none),
        (:call, :(==), (:., :a, (:quote, #QuoteNode
              :val
            )), (:., :b, (:quote, #QuoteNode
              :val
            )))
      )),
    (:line, 539, :none),
    (:let, (:block,
        (:line, 546, :none),
        (:for, (:(=), :offset, (:(:), 0, 1023)), (:block,
            (:line, 547, :none),
            (:(=), :d2, (:call, (:curly, :Dict, :MyInt, :Int))),
            (:line, 548, :none),
            (:(=), (:ref, :hashoffset), :offset),
            (:line, 549, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
                (:line, 550, :none),
                (:(=), (:ref, :d2, (:call, :MyInt, (:ref, :badKeys, :i))), :i)
              )),
            (:line, 553, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :badKeys))), (:block,
                (:line, 554, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d2, (:call, :MyInt, (:ref, :badKeys, :i))), :i))
              ))
          ))
      ), (:(=), :badKeys, (:ref, :UInt16, 0xb800, 0xa501, 0xcdff, 0x6303, 0xe40a, 0xcf0e, 0xf3df, 0xae99, 0x9913, 0x741c, 0xd01f, 0xc822, 0x9723, 0xb7a0, 0xea25, 0x7423, 0x6029, 0x202a, 0x822b, 0x492c, 0xd02c, 0x862d, 0x8f34, 0xe529, 0xf938, 0x4f39, 0xd03a, 0x473b, 0x1e3b, 0x1d3a, 0xcc39, 0x7339, 0xcf40, 0x8740, 0x813d, 0xe640, 0xc443, 0x6344, 0x3744, 0x2c3d, 0x8c48, 0xdf49, 0x5743))),
    (:line, 560, :none),
    (:call, :Dict, (:(=>), 1, (:call, :rand, 2, 3)), (:(=>), 'c', "asdf")),
    (:line, 563, :none),
    (:let, (:block,
        (:line, 564, :none),
        (:(=), :A, (:vect, 1)),
        (:line, 565, :none),
        (:(=), :B, (:vect, 2)),
        (:line, 566, :none),
        (:(=), :C, (:vect, 3)),
        (:line, 567, :none),
        (:local, (:(=), :x, 0)),
        (:line, 568, :none),
        (:local, (:(=), :y, 0)),
        (:line, 569, :none),
        (:local, (:(=), :z, 0)),
        (:line, 570, :none),
        (:call, :finalizer, :A, (:->, :a, (:block,
              (:line, 570, :none),
              (:+=, :x, 1)
            ))),
        (:line, 571, :none),
        (:call, :finalizer, :B, (:->, :b, (:block,
              (:line, 571, :none),
              (:+=, :y, 1)
            ))),
        (:line, 572, :none),
        (:call, :finalizer, :C, (:->, :c, (:block,
              (:line, 572, :none),
              (:+=, :z, 1)
            ))),
        (:line, 573, :none),
        (:(=), :wkd, (:call, :WeakKeyDict)),
        (:line, 574, :none),
        (:(=), (:ref, :wkd, :A), 2),
        (:line, 575, :none),
        (:(=), (:ref, :wkd, :B), 3),
        (:line, 576, :none),
        (:(=), (:ref, :wkd, :C), 4),
        (:line, 577, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :wkd), 3)),
        (:line, 578, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :wkd))),
        (:line, 579, :none),
        (:(=), :res, (:call, :pop!, :wkd, :C)),
        (:line, 580, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :res, 4)),
        (:line, 581, :none),
        (:macrocall, Symbol("@test"), (:call, :∉, :C, (:call, :keys, :wkd))),
        (:line, 582, :none),
        (:macrocall, Symbol("@test"), (:call, :∉, 4, (:call, :values, :wkd))),
        (:line, 583, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :wkd), 2)),
        (:line, 584, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :wkd))),
        (:line, 585, :none),
        (:(=), :wkd, (:call, :filter!, (:->, (:tuple, :k, :v), (:block,
                (:line, 585, :none),
                (:call, :(!=), :k, :B)
              )), :wkd)),
        (:line, 586, :none),
        (:macrocall, Symbol("@test"), (:call, :∉, :B, (:call, :keys, :wkd))),
        (:line, 587, :none),
        (:macrocall, Symbol("@test"), (:call, :∉, 3, (:call, :values, :wkd))),
        (:line, 588, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :wkd), 1)),
        (:line, 589, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :wkd))),
        (:line, 591, :none),
        (:(=), :wkd, (:call, :empty!, :wkd)),
        (:line, 592, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :wkd), 0)),
        (:line, 593, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, :wkd)),
        (:line, 594, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :wkd, :WeakKeyDict))
      ))
  ))