(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Test),
    (:line, 5, :none),
    (:function, (:call, :redirected_stderr, :expected), (:block,
        (:line, 6, :none),
        (:(=), (:tuple, :rd, :wr), (:call, :redirect_stderr)),
        (:line, 7, :none),
        (:(=), :t, (:macrocall, Symbol("@async"), (:block,
              (:line, 8, :none),
              (:(=), :read, (:call, :readstring, :rd)),
              (:line, 9, :none),
              (:if, (:call, :!, (:call, :contains, :read, :expected)), (:block,
                  (:line, 10, :none),
                  (:macrocall, Symbol("@show"), :expected),
                  (:line, 11, :none),
                  (:macrocall, Symbol("@show"), :read),
                  (:line, 12, :none),
                  (:macrocall, Symbol("@test"), false)
                )),
              (:line, 14, :none),
              :nothing
            ))),
        (:line, 16, :none),
        (:return, :t)
      )),
    (:line, 19, :none),
    (:(=), :Foo_module, (:quote, #QuoteNode
        :Foo4b3a94a1a081a8cb
      )),
    (:line, 20, :none),
    (:(=), :FooBase_module, (:quote, #QuoteNode
        :FooBase4b3a94a1a081a8cb
      )),
    (:line, 21, :none),
    (:macrocall, Symbol("@eval"), (:module, true, :ConflictingBindings, (:block,
          (:line, 21, :none),
          (:line, 22, :none),
          (:export, (:$, :Foo_module), (:$, :FooBase_module)),
          (:line, 23, :none),
          (:(=), (:$, :Foo_module), 232),
          (:line, 24, :none),
          (:(=), (:$, :FooBase_module), 9134)
        ))),
    (:line, 26, :none),
    (:using, :ConflictingBindings),
    (:line, 30, :none),
    (:call, :withenv, (:->, (:tuple,), (:block,
          (:line, 32, :none),
          (:(=), :olderr, :STDERR),
          (:line, 33, :none),
          (:(=), :dir, (:call, :mktempdir)),
          (:line, 34, :none),
          (:(=), :dir2, (:call, :mktempdir)),
          (:line, 35, :none),
          (:call, :insert!, :LOAD_PATH, 1, :dir),
          (:line, 36, :none),
          (:call, :insert!, (:., :Base, (:quote, #QuoteNode
                :LOAD_CACHE_PATH
              )), 1, :dir),
          (:line, 37, :none),
          (:try, (:block,
              (:line, 38, :none),
              (:(=), :Foo_file, (:call, :joinpath, :dir, (:string, :Foo_module, ".jl"))),
              (:line, 39, :none),
              (:(=), :FooBase_file, (:call, :joinpath, :dir, (:string, :FooBase_module, ".jl"))),
              (:line, 41, :none),
              (:call, :write, :FooBase_file, (:string, "__precompile__(true)\n\nmodule ", :FooBase_module, "\nend\n")),
              (:line, 48, :none),
              (:call, :write, :Foo_file, (:string, "__precompile__(true)\n\nmodule ", :Foo_module, "\n    using ", :FooBase_module, "\n\n    # test that docs get reconnected\n    @doc \"foo function\" foo(x) = x + 1\n    include_dependency(\"foo.jl\")\n    include_dependency(\"foo.jl\")\n    module Bar\n        @doc \"bar function\" bar(x) = x + 2\n        include_dependency(\"bar.jl\")\n    end\n\n    # test for creation of some reasonably complicated type\n    immutable MyType{T} end\n    const t17809s = Any[\n          Tuple{\n              Type{Ptr{MyType{i}}},\n              Array{Ptr{MyType{MyType{:sym}()}}(0), 0},\n              Val{Complex{Int}(1, 2)},\n              Val{3},\n              Val{nothing}}\n          for i = 0:25]\n\n    # test that types and methods get reconnected correctly\n    # issue 16529 (adding a method to a type with no instances)\n    (::Task)(::UInt8, ::UInt16, ::UInt32) = 2\n\n    # issue 16471 (capturing references to a kwfunc)\n    Base.Test.@test_throws ErrorException Core.kwfunc(Base.nothing)\n    Base.nothing(::UInt8, ::UInt16, ::UInt32; x = 52) = x\n    const nothingkw = Core.kwfunc(Base.nothing)\n\n    # issue 16908 (some complicated types and external method definitions)\n    abstract CategoricalPool{T, R <: Integer, V}\n    abstract CategoricalValue{T, R <: Integer}\n    immutable NominalPool{T, R <: Integer, V} <: CategoricalPool{T, R, V}\n        index::Vector{T}\n        invindex::Dict{T, R}\n        order::Vector{R}\n        ordered::Vector{T}\n        valindex::Vector{V}\n    end\n    immutable NominalValue{T, R <: Integer} <: CategoricalValue{T, R}\n        level::R\n        pool::NominalPool{T, R, NominalValue{T, R}}\n    end\n    immutable OrdinalValue{T, R <: Integer} <: CategoricalValue{T, R}\n        level::R\n        pool::NominalPool{T, R, NominalValue{T, R}}\n    end\n    (::Union{Type{NominalValue}, Type{OrdinalValue}})() = 1\n    (::Union{Type{NominalValue{T}}, Type{OrdinalValue{T}}}){T}() = 2\n    (::Type{Vector{NominalValue{T, R}}}){T, R}() = 3\n    (::Type{Vector{NominalValue{T, T}}}){T}() = 4\n    (::Type{Vector{NominalValue{Int, Int}}})() = 5\n\n    #const some_method = @which Base.include(\"string\") // FIXME: support for serializing a direct reference to an external Method not implemented\n    const some_linfo = @code_typed Base.include(\"string\")\n\n    # more tests for method signature involving a complicated type\n    # issue 18343\n    immutable Pool18343{R, V}\n        valindex::Vector{V}\n    end\n    immutable Value18343{T, R}\n        pool::Pool18343{R, Value18343{T, R}}\n    end\n    Base.convert{S}(::Type{Nullable{S}}, ::Value18343{Nullable}) = 2\n    Base.convert(::Type{Nullable{Value18343}}, ::Value18343{Nullable}) = 2\n    Base.convert{T}(::Type{Ref}, ::Value18343{T}) = 3\n\n    infer_rational() = 1//2\n    Test.@inferred infer_rational()\nend\n")),
              (:line, 127, :none),
              (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, (:., :Core, (:quote, #QuoteNode
                      :kwfunc
                    )), (:., :Base, (:quote, #QuoteNode
                      :nothing
                    )))),
              (:line, 130, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, :__precompile__, true), :nothing)),
              (:line, 132, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :require
                  )), :Foo_module),
              (:line, 133, :none),
              (:(=), :cachefile, (:call, :joinpath, :dir, (:string, :Foo_module, ".ji"))),
              (:line, 137, :none),
              (:(=), :t, (:call, :redirected_stderr, "WARNING: replacing module Foo4b3a94a1a081a8cb.\nWARNING: Method definition ")),
              (:line, 138, :none),
              (:try, (:block,
                  (:line, 139, :none),
                  (:macrocall, Symbol("@test"), (:call, :isa, (:call, (:., :Base, (:quote, #QuoteNode
                            :_require_from_serialized
                          )), (:call, :myid), :Foo_module, :cachefile, false), (:curly, :Array, :Any, 1)))
                ), false, false, (:block,
                  (:line, 141, :none),
                  (:call, :close, :STDERR),
                  (:line, 142, :none),
                  (:call, :redirect_stderr, :olderr)
                )),
              (:line, 144, :none),
              (:call, :wait, :t),
              (:line, 146, :none),
              (:let, (:block,
                  (:line, 147, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Foo, (:quote, #QuoteNode
                            :foo
                          )), 17), 18)),
                  (:line, 148, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., (:., :Foo, (:quote, #QuoteNode
                              :Bar
                            )), (:quote, #QuoteNode
                            :bar
                          )), 17), 19)),
                  (:line, 151, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :stringmime, "text/plain", (:call, (:., (:., :Base, (:quote, #QuoteNode
                                :Docs
                              )), (:quote, #QuoteNode
                              :doc
                            )), (:., :Foo, (:quote, #QuoteNode
                              :foo
                            )))), "foo function\n")),
                  (:line, 152, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :stringmime, "text/plain", (:call, (:., (:., :Base, (:quote, #QuoteNode
                                :Docs
                              )), (:quote, #QuoteNode
                              :doc
                            )), (:., (:., :Foo, (:quote, #QuoteNode
                                :Bar
                              )), (:quote, #QuoteNode
                              :bar
                            )))), "bar function\n")),
                  (:line, 154, :none),
                  (:(=), (:tuple, :modules, :deps, :required_modules), (:call, (:., :Base, (:quote, #QuoteNode
                          :parse_cache_header
                        )), :cachefile)),
                  (:line, 155, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :modules, (:call, :Dict, (:(=>), :Foo_module, (:call, (:., :Base, (:quote, #QuoteNode
                                :module_uuid
                              )), :Foo))))),
                  (:line, 156, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, :x, (:block,
                            (:line, 156, :none),
                            (:ref, :x, 1)
                          )), (:call, :sort, :deps)), (:vect, :Foo_file, (:call, :joinpath, :dir, "bar.jl"), (:call, :joinpath, :dir, "foo.jl")))),
                  (:line, 158, :none),
                  (:(=), (:tuple, :modules, :deps1), (:call, (:., :Base, (:quote, #QuoteNode
                          :cache_dependencies
                        )), :cachefile)),
                  (:line, 159, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :modules, (:call, :Dict, (:generator, (:(=>), :s, (:call, (:., :Base, (:quote, #QuoteNode
                                  :module_uuid
                                )), (:call, :getfield, :Foo, :s))), (:(=), :s, (:vect, (:quote, #QuoteNode
                                :Base
                              ), (:quote, #QuoteNode
                                :Core
                              ), :FooBase_module, (:quote, #QuoteNode
                                :Main
                              ))))))),
                  (:line, 161, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :deps, :deps1)),
                  (:line, 163, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:call, :current_task), 0x01, 0x4000, 0x30031234), 2)),
                  (:line, 164, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :nothing, 0x01, 0x4000, 0x30031234), 52)),
                  (:line, 165, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :nothing, (:parameters, (:kw, :x, 9142)), 0x01, 0x4000, 0x30031234), 9142)),
                  (:line, 166, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:., :Foo, (:quote, #QuoteNode
                          :nothingkw
                        )), (:call, (:., :Core, (:quote, #QuoteNode
                            :kwfunc
                          )), (:., :Base, (:quote, #QuoteNode
                            :nothing
                          ))))),
                  (:line, 168, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Foo, (:quote, #QuoteNode
                            :NominalValue
                          ))), 1)),
                  (:line, 169, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Foo, (:quote, #QuoteNode
                            :OrdinalValue
                          ))), 1)),
                  (:line, 170, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:curly, (:., :Foo, (:quote, #QuoteNode
                              :NominalValue
                            )), :Int)), 2)),
                  (:line, 171, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:curly, (:., :Foo, (:quote, #QuoteNode
                              :OrdinalValue
                            )), :Int)), 2)),
                  (:line, 172, :none),
                  (:let, (:block,
                      (:line, 173, :none),
                      (:macrocall, Symbol("@test"), (:call, :isa, (:call, :T), :T))
                    ), (:(=), :T, (:curly, :Vector, (:curly, (:., :Foo, (:quote, #QuoteNode
                              :NominalValue
                            )), :Int)))),
                  (:line, 175, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:curly, :Vector, (:curly, (:., :Foo, (:quote, #QuoteNode
                                :NominalValue
                              )), :Int32, :Int64))), 3)),
                  (:line, 176, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:curly, :Vector, (:curly, (:., :Foo, (:quote, #QuoteNode
                                :NominalValue
                              )), :UInt, :UInt))), 4)),
                  (:line, 177, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:curly, :Vector, (:curly, (:., :Foo, (:quote, #QuoteNode
                                :NominalValue
                              )), :Int, :Int))), 5)),
                  (:line, 178, :none),
                  (:macrocall, Symbol("@test"), (:call, :all, (:->, :i, (:block,
                          (:line, 178, :none),
                          (:call, :(===), (:ref, (:., :Foo, (:quote, #QuoteNode
                                  :t17809s
                                )), (:call, :+, :i, 1)), (:curly, :Tuple, (:curly, :Type, (:curly, :Ptr, (:curly, (:., :Foo, (:quote, #QuoteNode
                                        :MyType
                                      )), :i))), (:curly, :Array, (:call, (:curly, :Ptr, (:curly, (:., :Foo, (:quote, #QuoteNode
                                          :MyType
                                        )), (:call, (:curly, (:., :Foo, (:quote, #QuoteNode
                                              :MyType
                                            )), (:quote, #QuoteNode
                                            :sym
                                          ))))), 0), 0), (:curly, :Val, (:call, (:curly, :Complex, :Int), 1, 2)), (:curly, :Val, 3), (:curly, :Val, :nothing)))
                        )), (:(:), 0, 25))),
                  (:line, 187, :none),
                  (:macrocall, Symbol("@eval"), (:block,
                      (:line, 188, :none),
                      (:macrocall, Symbol("@inferred"), (:call, ://, 1, 2)),
                      (:line, 189, :none),
                      (:macrocall, Symbol("@inferred"), (:call, (:., (:$, :Foo), (:quote, #QuoteNode
                              :infer_rational
                            ))))
                    )),
                  (:line, 192, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:., :Foo, (:quote, #QuoteNode
                          :some_linfo
                        )), (:macrocall, Symbol("@code_typed"), (:call, (:., :Base, (:quote, #QuoteNode
                              :include
                            )), "string")))),
                  (:line, 194, :none),
                  (:(=), :PV, (:ref, (:., (:curly, (:., :Foo, (:quote, #QuoteNode
                              :Value18343
                            )), :Nullable), (:quote, #QuoteNode
                          :types
                        )), 1)),
                  (:line, 195, :none),
                  (:(=), :VR, (:ref, (:., (:ref, (:., :PV, (:quote, #QuoteNode
                              :types
                            )), 1), (:quote, #QuoteNode
                          :parameters
                        )), 1)),
                  (:line, 196, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:ref, (:., :PV, (:quote, #QuoteNode
                            :types
                          )), 1), (:curly, :Array, :VR, 1))),
                  (:line, 197, :none),
                  (:macrocall, Symbol("@test"), (:comparison, (:call, :pointer_from_objref, (:ref, (:., :PV, (:quote, #QuoteNode
                              :types
                            )), 1)), :(===), (:call, :pointer_from_objref, (:ref, (:., (:ref, (:., (:ref, (:., (:ref, (:., :PV, (:quote, #QuoteNode
                                          :types
                                        )), 1), (:quote, #QuoteNode
                                      :parameters
                                    )), 1), (:quote, #QuoteNode
                                  :types
                                )), 1), (:quote, #QuoteNode
                              :types
                            )), 1)), :(===), (:call, :pointer_from_objref, (:curly, :Array, :VR, 1)))),
                  (:line, 200, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), :PV, (:ref, (:., (:ref, (:., (:ref, (:., :PV, (:quote, #QuoteNode
                                    :types
                                  )), 1), (:quote, #QuoteNode
                                :parameters
                              )), 1), (:quote, #QuoteNode
                            :types
                          )), 1))),
                  (:line, 201, :none),
                  (:macrocall, Symbol("@test"), (:call, :(!==), (:call, :pointer_from_objref, :PV), (:call, :pointer_from_objref, (:ref, (:., (:ref, (:., (:ref, (:., :PV, (:quote, #QuoteNode
                                      :types
                                    )), 1), (:quote, #QuoteNode
                                  :parameters
                                )), 1), (:quote, #QuoteNode
                              :types
                            )), 1))))
                ), (:(=), :Foo, (:call, :getfield, :Main, :Foo_module))),
              (:line, 204, :none),
              (:(=), :Baz_file, (:call, :joinpath, :dir, "Baz.jl")),
              (:line, 205, :none),
              (:call, :write, :Baz_file, "__precompile__(false)\nmodule Baz\nend\n"),
              (:line, 212, :none),
              (:(=), :t, (:call, :redirected_stderr, "ERROR: LoadError: Declaring __precompile__(false) is not allowed in files that are being precompiled.\n in __precompile__")),
              (:line, 213, :none),
              (:try, (:block,
                  (:line, 214, :none),
                  (:call, (:., :Base, (:quote, #QuoteNode
                        :compilecache
                      )), "Baz"),
                  (:line, 215, :none),
                  (:call, :error, "__precompile__ disabled test failed")
                ), :exc, (:block,
                  (:line, 217, :none),
                  (:call, :close, :STDERR),
                  (:line, 218, :none),
                  (:call, :redirect_stderr, :olderr),
                  (:line, 219, :none),
                  (:||, (:call, :isa, :exc, :ErrorException), (:call, :rethrow, :exc)),
                  (:line, 220, :none),
                  (:&&, (:call, :!, (:call, :isempty, (:call, :search, (:., :exc, (:quote, #QuoteNode
                              :msg
                            )), "__precompile__(false)"))), (:call, :rethrow, :exc))
                )),
              (:line, 222, :none),
              (:call, :wait, :t),
              (:line, 225, :none),
              (:(=), :FooBar1_file, (:call, :joinpath, :dir, "FooBar1.jl")),
              (:line, 226, :none),
              (:call, :write, :FooBar1_file, "__precompile__(true)\nmodule FooBar1\n    using FooBar\nend\n"),
              (:line, 233, :none),
              (:call, :sleep, 2),
              (:line, 234, :none),
              (:(=), :FooBar_file, (:call, :joinpath, :dir, "FooBar.jl")),
              (:line, 235, :none),
              (:call, :write, :FooBar_file, "__precompile__(true)\nmodule FooBar\nend\n"),
              (:line, 242, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :compilecache
                  )), "FooBar"),
              (:line, 243, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :dir, "FooBar.ji"))),
              (:line, 244, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar_file, (:call, :joinpath, :dir, "FooBar.ji")))),
              (:line, 245, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isdefined, :Main, (:quote, #QuoteNode
                      :FooBar
                    )))),
              (:line, 246, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isdefined, :Main, (:quote, #QuoteNode
                      :FooBar1
                    )))),
              (:line, 248, :none),
              (:(=), :relFooBar_file, (:call, :joinpath, :dir, "subfolder", "..", "FooBar.jl")),
              (:line, 249, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :relFooBar_file, (:call, :joinpath, :dir, "FooBar.ji")), (:call, :!, (:call, :is_windows)))),
              (:line, 250, :none),
              (:call, :mkdir, (:call, :joinpath, :dir, "subfolder")),
              (:line, 251, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :relFooBar_file, (:call, :joinpath, :dir, "FooBar.ji")))),
              (:line, 253, :none),
              (:macrocall, Symbol("@eval"), (:using, :FooBar)),
              (:line, 254, :none),
              (:(=), :fb_uuid, (:call, (:., :Base, (:quote, #QuoteNode
                      :module_uuid
                    )), (:., :Main, (:quote, #QuoteNode
                      :FooBar
                    )))),
              (:line, 255, :none),
              (:call, :sleep, 2),
              (:line, 255, :none),
              (:call, :touch, :FooBar_file),
              (:line, 256, :none),
              (:call, :insert!, (:., :Base, (:quote, #QuoteNode
                    :LOAD_CACHE_PATH
                  )), 1, :dir2),
              (:line, 257, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                      :stale_cachefile
                    )), :FooBar_file, (:call, :joinpath, :dir, "FooBar.ji"))),
              (:line, 258, :none),
              (:macrocall, Symbol("@eval"), (:using, :FooBar1)),
              (:line, 259, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isfile, (:call, :joinpath, :dir2, "FooBar.ji")))),
              (:line, 260, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isfile, (:call, :joinpath, :dir, "FooBar1.ji")))),
              (:line, 261, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :dir2, "FooBar1.ji"))),
              (:line, 262, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                      :stale_cachefile
                    )), :FooBar_file, (:call, :joinpath, :dir, "FooBar.ji"))),
              (:line, 263, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar1_file, (:call, :joinpath, :dir2, "FooBar1.ji")))),
              (:line, 264, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), :fb_uuid, (:call, (:., :Base, (:quote, #QuoteNode
                        :module_uuid
                      )), (:., :Main, (:quote, #QuoteNode
                        :FooBar
                      ))))),
              (:line, 265, :none),
              (:(=), :fb_uuid1, (:call, (:., :Base, (:quote, #QuoteNode
                      :module_uuid
                    )), (:., :Main, (:quote, #QuoteNode
                      :FooBar1
                    )))),
              (:line, 266, :none),
              (:macrocall, Symbol("@test"), (:call, :(!=), :fb_uuid, :fb_uuid1)),
              (:line, 268, :none),
              (:(=), :t, (:call, :redirected_stderr, "WARNING: replacing module FooBar.")),
              (:line, 269, :none),
              (:try, (:block,
                  (:line, 270, :none),
                  (:call, :reload, "FooBar")
                ), false, false, (:block,
                  (:line, 272, :none),
                  (:call, :close, :STDERR),
                  (:line, 273, :none),
                  (:call, :redirect_stderr, :olderr)
                )),
              (:line, 275, :none),
              (:call, :wait, :t),
              (:line, 276, :none),
              (:macrocall, Symbol("@test"), (:call, :(!=), :fb_uuid, (:call, (:., :Base, (:quote, #QuoteNode
                        :module_uuid
                      )), (:., :Main, (:quote, #QuoteNode
                        :FooBar
                      ))))),
              (:line, 277, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), :fb_uuid1, (:call, (:., :Base, (:quote, #QuoteNode
                        :module_uuid
                      )), (:., :Main, (:quote, #QuoteNode
                        :FooBar1
                      ))))),
              (:line, 278, :none),
              (:(=), :fb_uuid, (:call, (:., :Base, (:quote, #QuoteNode
                      :module_uuid
                    )), (:., :Main, (:quote, #QuoteNode
                      :FooBar
                    )))),
              (:line, 279, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :dir2, "FooBar.ji"))),
              (:line, 280, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                      :stale_cachefile
                    )), :FooBar_file, (:call, :joinpath, :dir, "FooBar.ji"))),
              (:line, 281, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar1_file, (:call, :joinpath, :dir2, "FooBar1.ji")))),
              (:line, 282, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar_file, (:call, :joinpath, :dir2, "FooBar.ji")))),
              (:line, 284, :none),
              (:(=), :t, (:call, :redirected_stderr, "WARNING: replacing module FooBar1.")),
              (:line, 285, :none),
              (:try, (:block,
                  (:line, 286, :none),
                  (:call, :reload, "FooBar1")
                ), false, false, (:block,
                  (:line, 288, :none),
                  (:call, :close, :STDERR),
                  (:line, 289, :none),
                  (:call, :redirect_stderr, :olderr)
                )),
              (:line, 291, :none),
              (:call, :wait, :t),
              (:line, 292, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), :fb_uuid, (:call, (:., :Base, (:quote, #QuoteNode
                        :module_uuid
                      )), (:., :Main, (:quote, #QuoteNode
                        :FooBar
                      ))))),
              (:line, 293, :none),
              (:macrocall, Symbol("@test"), (:call, :(!=), :fb_uuid1, (:call, (:., :Base, (:quote, #QuoteNode
                        :module_uuid
                      )), (:., :Main, (:quote, #QuoteNode
                        :FooBar1
                      ))))),
              (:line, 295, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :dir2, "FooBar.ji"))),
              (:line, 296, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :dir2, "FooBar1.ji"))),
              (:line, 297, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                      :stale_cachefile
                    )), :FooBar_file, (:call, :joinpath, :dir, "FooBar.ji"))),
              (:line, 298, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar_file, (:call, :joinpath, :dir2, "FooBar.ji")))),
              (:line, 299, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                        :stale_cachefile
                      )), :FooBar1_file, (:call, :joinpath, :dir2, "FooBar1.ji")))),
              (:line, 302, :none),
              (:call, :write, :FooBar_file, "__precompile__(true)\nmodule FooBar\nerror(\"break me\")\nend\n"),
              (:line, 309, :none),
              (:(=), :t, (:call, :redirected_stderr, "ERROR: LoadError: break me\n in error")),
              (:line, 310, :none),
              (:try, (:block,
                  (:line, 311, :none),
                  (:call, (:., :Base, (:quote, #QuoteNode
                        :require
                      )), (:quote, #QuoteNode
                      :FooBar
                    )),
                  (:line, 312, :none),
                  (:call, :error, "\"LoadError: break me\" test failed")
                ), :exc, (:block,
                  (:line, 314, :none),
                  (:call, :close, :STDERR),
                  (:line, 315, :none),
                  (:call, :redirect_stderr, :olderr),
                  (:line, 316, :none),
                  (:||, (:call, :isa, :exc, :ErrorException), (:call, :rethrow, :exc)),
                  (:line, 317, :none),
                  (:&&, (:call, :!, (:call, :isempty, (:call, :search, (:., :exc, (:quote, #QuoteNode
                              :msg
                            )), "ERROR: LoadError: break me"))), (:call, :rethrow, :exc))
                )),
              (:line, 319, :none),
              (:call, :wait, :t),
              (:line, 322, :none),
              (:(=), :FooBarT_file, (:call, :joinpath, :dir, "FooBarT.jl")),
              (:line, 323, :none),
              (:call, :write, :FooBarT_file, "__precompile__(true)\nmodule FooBarT\nend\n"),
              (:line, 329, :none),
              (:(=), :FooBarT1_file, (:call, :joinpath, :dir, "FooBarT1.jl")),
              (:line, 330, :none),
              (:call, :write, :FooBarT1_file, "__precompile__(true)\nmodule FooBarT1\n    using FooBarT\nend\n"),
              (:line, 337, :none),
              (:(=), :FooBarT2_file, (:call, :joinpath, :dir, "FooBarT2.jl")),
              (:line, 338, :none),
              (:call, :write, :FooBarT2_file, "__precompile__(true)\nmodule FooBarT2\n    using FooBarT1\nend\n"),
              (:line, 345, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :compilecache
                  )), "FooBarT2"),
              (:line, 346, :none),
              (:call, :write, :FooBarT1_file, "__precompile__(true)\nmodule FooBarT1\nend\n"),
              (:line, 352, :none),
              (:call, :rm, :FooBarT_file),
              (:line, 353, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                      :stale_cachefile
                    )), :FooBarT2_file, (:call, :joinpath, :dir2, "FooBarT2.ji"))),
              (:line, 354, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., :Base, (:quote, #QuoteNode
                        :require
                      )), (:quote, #QuoteNode
                      :FooBarT2
                    )), :nothing))
            ), false, false, (:block,
              (:line, 356, :none),
              (:if, (:call, :(!=), :STDERR, :olderr), (:block,
                  (:line, 357, :none),
                  (:call, :close, :STDERR),
                  (:line, 358, :none),
                  (:call, :redirect_stderr, :olderr)
                )),
              (:line, 360, :none),
              (:call, :splice!, (:., :Base, (:quote, #QuoteNode
                    :LOAD_CACHE_PATH
                  )), (:(:), 1, 2)),
              (:line, 361, :none),
              (:call, :splice!, :LOAD_PATH, 1),
              (:line, 362, :none),
              (:call, :rm, :dir, (:kw, :recursive, true)),
              (:line, 363, :none),
              (:call, :rm, :dir2, (:kw, :recursive, true))
            )),
          (:line, 367, :none),
          (:let, (:block,
              (:line, 370, :none),
              (:try, (:block,
                  (:line, 371, :none),
                  (:call, :write, (:call, :joinpath, :dir, (:string, :Time_module, ".jl")), (:string, "module ", :Time_module, "\n    __precompile__(true)\n    time = Base.time()\nend\n")),
                  (:line, 379, :none),
                  (:call, :eval, (:quote, (:block,
                        (:line, 380, :none),
                        (:call, :insert!, :LOAD_PATH, 1, (:$, :dir)),
                        (:line, 381, :none),
                        (:call, :insert!, (:., :Base, (:quote, #QuoteNode
                              :LOAD_CACHE_PATH
                            )), 1, (:$, :dir)),
                        (:line, 382, :none),
                        (:call, (:., :Base, (:quote, #QuoteNode
                              :compilecache
                            )), (:quote, #QuoteNode
                            :Time4b3a94a1a081a8cb
                          ))
                      ))),
                  (:line, 385, :none),
                  (:(=), :exename, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --precompiled=yes --startup-file=no")),
                  (:line, 387, :none),
                  (:(=), :testcode, (:string, "    insert!(LOAD_PATH, 1, ", (:call, :repr, :dir), ")\n    insert!(Base.LOAD_CACHE_PATH, 1, ", (:call, :repr, :dir), ")\n    using ", :Time_module, "\n    getfield(", :Time_module, ", :time)\n")),
                  (:line, 394, :none),
                  (:(=), :t1_yes, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=yes -E \$(testcode)"))),
                  (:line, 395, :none),
                  (:(=), :t2_yes, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=yes -E \$(testcode)"))),
                  (:line, 396, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :t1_yes, :t2_yes)),
                  (:line, 398, :none),
                  (:(=), :t1_no, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=no -E \$(testcode)"))),
                  (:line, 399, :none),
                  (:(=), :t2_no, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=no -E \$(testcode)"))),
                  (:line, 400, :none),
                  (:macrocall, Symbol("@test"), (:call, :(!=), :t1_no, :t2_no)),
                  (:line, 401, :none),
                  (:macrocall, Symbol("@test"), (:call, :<, (:call, :parse, :Float64, :t1_no), (:call, :parse, :Float64, :t2_no)))
                ), false, false, (:block,
                  (:line, 404, :none),
                  (:call, :splice!, (:., :Base, (:quote, #QuoteNode
                        :LOAD_CACHE_PATH
                      )), 1),
                  (:line, 405, :none),
                  (:call, :splice!, :LOAD_PATH, 1),
                  (:line, 406, :none),
                  (:call, :rm, :dir, (:kw, :recursive, true))
                ))
            ), (:(=), :dir, (:call, :mktempdir)), (:(=), :Time_module, (:quote, #QuoteNode
                :Time4b3a94a1a081a8cb
              ))),
          (:line, 411, :none),
          (:let, (:block,
              (:line, 412, :none),
              (:(=), :Test_module, (:quote, #QuoteNode
                  :Test6c92f26
                )),
              (:line, 413, :none),
              (:try, (:block,
                  (:line, 414, :none),
                  (:call, :write, (:call, :joinpath, :dir, "Iterators.jl"), "module Iterators\n     __precompile__(true)\nend\n"),
                  (:line, 421, :none),
                  (:call, :write, (:call, :joinpath, :dir, (:string, :Test_module, ".jl")), (:string, "module ", :Test_module, "\n     __precompile__(true)\n     using Iterators\nend\n")),
                  (:line, 429, :none),
                  (:(=), :testcode, (:string, "    insert!(LOAD_PATH, 1, ", (:call, :repr, :dir), ")\n    insert!(Base.LOAD_CACHE_PATH, 1, ", (:call, :repr, :dir), ")\n    using ", :Test_module, "\n")),
                  (:line, 435, :none),
                  (:(=), :exename, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --startup-file=no")),
                  (:line, 436, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \$(testcode)")), "nothing")),
                  (:line, 437, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \$(testcode)")), "nothing"))
                ), false, false, (:block,
                  (:line, 439, :none),
                  (:call, :rm, :dir, (:kw, :recursive, true))
                ))
            ), (:(=), :dir, (:call, :mktempdir))),
          (:line, 443, :none),
          (:let, (:block,
              (:line, 444, :none),
              (:call, :insert!, :LOAD_PATH, 1, (:call, :pwd)),
              (:line, 445, :none),
              (:(=), :file_name, (:call, :string, :module_name, ".jl")),
              (:line, 446, :none),
              (:call, :sleep, 2),
              (:line, 446, :none),
              (:call, :touch, :file_name),
              (:line, 447, :none),
              (:(=), :code, (:string, "module ", :module_name, "\nend\n")),
              (:line, 448, :none),
              (:call, :write, :file_name, :code),
              (:line, 449, :none),
              (:call, :reload, :module_name),
              (:line, 450, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:call, :eval, (:call, :Symbol, :module_name))), :Module)),
              (:line, 451, :none),
              (:call, :deleteat!, :LOAD_PATH, 1),
              (:line, 452, :none),
              (:call, :rm, :file_name)
            ), (:(=), :module_name, (:call, :string, "a", (:call, :randstring))))
        )), (:(=>), "JULIA_DEBUG_LOADING", :nothing))
  ))