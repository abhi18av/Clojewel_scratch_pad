(:quote, (:block,
    (:line, 3, :none),
    (:(=), :bt, (:call, :backtrace)),
    (:line, 4, :none),
    (:(=), :have_backtrace, false),
    (:line, 5, :none),
    (:for, (:(=), :l, :bt), (:block,
        (:line, 6, :none),
        (:(=), :lkup, (:ccall, (:quote, #QuoteNode
              :jl_lookup_code_address
            ), :Any, (:tuple, (:curly, :Ptr, :Void), :Cint), :l, true)),
        (:line, 7, :none),
        (:if, (:call, :(==), (:ref, (:ref, :lkup, 1), 1), (:quote, #QuoteNode
              :backtrace
            )), (:block,
            (:line, 8, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:ref, :lkup, 1), 5), false)),
            (:line, 9, :none),
            (:(=), :have_backtrace, true),
            (:line, 10, :none),
            (:break,)
          ))
      )),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), :have_backtrace),
    (:line, 17, :none),
    (:module, true, :test_inline_bt, (:block,
        (:line, 17, :none),
        (:line, 18, :none),
        (:using, :Base, :Test),
        (:line, 20, :none),
        (:function, (:call, :get_bt_frames, :functionname, :bt), (:block,
            (:line, 21, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :bt))), (:block,
                (:line, 22, :none),
                (:(=), :lkup, (:call, (:., (:., :Base, (:quote, #QuoteNode
                          :StackTraces
                        )), (:quote, #QuoteNode
                        :lookup
                      )), (:ref, :bt, :i))),
                (:line, 23, :none),
                (:&&, (:call, :(==), (:., (:ref, :lkup, :end), (:quote, #QuoteNode
                        :func
                      )), :functionname), (:return, :lkup))
              ))
          )),
        (:line, 28, :none),
        (:call, :eval, (:call, :Expr, (:quote, #QuoteNode
              :function
            ), (:call, :Expr, (:quote, #QuoteNode
                :call
              ), (:quote, #QuoteNode
                :test_inline_1
              )), (:call, :Expr, (:quote, #QuoteNode
                :block
              ), (:call, :Expr, (:quote, #QuoteNode
                  :line
                ), 42, (:call, :Symbol, "backtrace.jl")), (:call, :Expr, (:quote, #QuoteNode
                  :block
                ), (:call, :Expr, (:quote, #QuoteNode
                    :meta
                  ), (:quote, #QuoteNode
                    :push_loc
                  ), (:call, :Symbol, "backtrace.jl"), (:quote, #QuoteNode
                    :inlfunc
                  )), (:call, :Expr, (:quote, #QuoteNode
                    :line
                  ), 37), (:call, :Expr, (:quote, #QuoteNode
                    :call
                  ), (:quote, #QuoteNode
                    :throw
                  ), "foo"), (:call, :Expr, (:quote, #QuoteNode
                    :meta
                  ), (:quote, #QuoteNode
                    :pop_loc
                  )))))),
        (:line, 35, :none),
        (:try, (:block,
            (:line, 36, :none),
            (:call, :test_inline_1),
            (:line, 37, :none),
            (:call, :error, "unexpected")
          ), :err, (:block,
            (:line, 39, :none),
            (:(=), :lkup, (:call, :get_bt_frames, (:quote, #QuoteNode
                  :test_inline_1
                ), (:call, :catch_backtrace))),
            (:line, 40, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :lkup), 2)),
            (:line, 41, :none),
            (:macrocall, Symbol("@test"), (:call, :endswith, (:call, :string, (:., (:ref, :lkup, 2), (:quote, #QuoteNode
                      :file
                    ))), "backtrace.jl")),
            (:line, 42, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :lkup, 2), (:quote, #QuoteNode
                    :line
                  )), 42)),
            (:line, 43, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :lkup, 1), (:quote, #QuoteNode
                    :func
                  )), (:quote, #QuoteNode
                  :inlfunc
                ))),
            (:line, 44, :none),
            (:macrocall, Symbol("@test"), (:call, :endswith, (:call, :string, (:., (:ref, :lkup, 1), (:quote, #QuoteNode
                      :file
                    ))), "backtrace.jl")),
            (:line, 45, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :lkup, 1), (:quote, #QuoteNode
                    :line
                  )), 37))
          )),
        (:line, 49, :none),
        (:const, (:(=), :absfilepath, (:if, (:call, :is_windows), "C:\\foo\\bar\\baz.jl", "/foo/bar/baz.jl"))),
        (:line, 50, :none),
        (:call, :eval, (:call, :Expr, (:quote, #QuoteNode
              :function
            ), (:call, :Expr, (:quote, #QuoteNode
                :call
              ), (:quote, #QuoteNode
                :test_inline_2
              )), (:call, :Expr, (:quote, #QuoteNode
                :block
              ), (:call, :Expr, (:quote, #QuoteNode
                  :line
                ), 99, (:call, :Symbol, "backtrace.jl")), (:call, :Expr, (:quote, #QuoteNode
                  :block
                ), (:call, :Expr, (:quote, #QuoteNode
                    :meta
                  ), (:quote, #QuoteNode
                    :push_loc
                  ), (:call, :Symbol, :absfilepath)), (:call, :Expr, (:quote, #QuoteNode
                    :line
                  ), 111), (:call, :Expr, (:quote, #QuoteNode
                    :call
                  ), (:quote, #QuoteNode
                    :throw
                  ), "foo"), (:call, :Expr, (:quote, #QuoteNode
                    :meta
                  ), (:quote, #QuoteNode
                    :pop_loc
                  )))))),
        (:line, 57, :none),
        (:try, (:block,
            (:line, 58, :none),
            (:call, :test_inline_2),
            (:line, 59, :none),
            (:call, :error, "unexpected")
          ), :err, (:block,
            (:line, 61, :none),
            (:(=), :lkup, (:call, :get_bt_frames, (:quote, #QuoteNode
                  :test_inline_2
                ), (:call, :catch_backtrace))),
            (:line, 62, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :lkup), 2)),
            (:line, 63, :none),
            (:macrocall, Symbol("@test"), (:call, :endswith, (:call, :string, (:., (:ref, :lkup, 2), (:quote, #QuoteNode
                      :file
                    ))), "backtrace.jl")),
            (:line, 64, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :lkup, 2), (:quote, #QuoteNode
                    :line
                  )), 99)),
            (:line, 65, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, (:., (:ref, :lkup, 1), (:quote, #QuoteNode
                      :file
                    ))), :absfilepath)),
            (:line, 66, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :lkup, 1), (:quote, #QuoteNode
                    :line
                  )), 111))
          ))
      )),
    (:line, 72, :none),
    (:(=), :linenum, 72),
    (:line, 72, :none),
    (:(=), (:call, :f12977, (:parameters, (:..., :args))), (:block,
        (:line, 72, :none),
        (:tuple,)
      )),
    (:line, 73, :none),
    (:(=), :loc, (:call, :functionloc, :f12977)),
    (:line, 74, :none),
    (:macrocall, Symbol("@test"), (:call, :endswith, (:ref, :loc, 1), "backtrace.jl")),
    (:line, 75, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :loc, 2), :linenum)),
    (:line, 77, :none),
    (:macrocall, Symbol("@noinline"), (:function, (:call, :test_throw_commoning, :x), (:block,
          (:line, 78, :none),
          (:if, (:call, :(==), :x, 1), (:block,
              (:line, 78, :none),
              (:call, :throw, (:call, :AssertionError))
            )),
          (:line, 79, :none),
          (:if, (:call, :(==), :x, 2), (:block,
              (:line, 79, :none),
              (:call, :throw, (:call, :AssertionError))
            ))
        ))),
    (:line, 82, :none),
    (:let, (:block,
        (:line, 83, :none),
        (:local, :b1, :b2),
        (:line, 84, :none),
        (:try, (:block,
            (:line, 85, :none),
            (:call, :test_throw_commoning, 1)
          ), false, (:block,
            (:line, 87, :none),
            (:(=), :b1, (:call, :stacktrace, (:call, :catch_backtrace)))
          )),
        (:line, 89, :none),
        (:try, (:block,
            (:line, 90, :none),
            (:call, :test_throw_commoning, 2)
          ), false, (:block,
            (:line, 92, :none),
            (:(=), :b2, (:call, :stacktrace, (:call, :catch_backtrace)))
          )),
        (:line, 94, :none),
        (:(=), :i1, (:call, :findfirst, (:->, :frame, (:block,
                (:line, 94, :none),
                (:call, :(===), (:., :frame, (:quote, #QuoteNode
                      :func
                    )), (:quote, #QuoteNode
                    :test_throw_commoning
                  ))
              )), :b1)),
        (:line, 95, :none),
        (:(=), :i2, (:call, :findfirst, (:->, :frame, (:block,
                (:line, 95, :none),
                (:call, :(===), (:., :frame, (:quote, #QuoteNode
                      :func
                    )), (:quote, #QuoteNode
                    :test_throw_commoning
                  ))
              )), :b2)),
        (:line, 96, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :>, :i1, 0), (:call, :>, :i2, 0))),
        (:line, 97, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:., (:ref, :b1, :i1), (:quote, #QuoteNode
                :line
              )), (:., (:ref, :b2, :i2), (:quote, #QuoteNode
                :line
              ))))
      )),
    (:line, 100, :none),
    (:module, true, :BackTraceTesting, (:block,
        (:line, 100, :none),
        (:line, 102, :none),
        (:using, :Base, :Test),
        (:line, 104, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :bt2), (:block,
              (:line, 104, :none),
              (:call, :backtrace)
            ))),
        (:line, 105, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :bt1), (:block,
              (:line, 105, :none),
              (:call, :bt2)
            ))),
        (:line, 106, :none),
        (:(=), (:call, :bt), (:block,
            (:line, 106, :none),
            (:call, :bt1)
          )),
        (:line, 108, :none),
        (:(=), :lkup, (:call, :map, (:., :StackTraces, (:quote, #QuoteNode
                :lookup
              )), (:call, :bt))),
        (:line, 109, :none),
        (:(=), :hasbt, (:(=), :hasbt2, false)),
        (:line, 110, :none),
        (:for, (:(=), :sfs, :lkup), (:block,
            (:line, 111, :none),
            (:for, (:(=), :sf, :sfs), (:block,
                (:line, 112, :none),
                (:if, (:call, :(==), (:., :sf, (:quote, #QuoteNode
                        :func
                      )), (:quote, #QuoteNode
                      :bt
                    )), (:block,
                    (:line, 113, :none),
                    (:(=), :hasbt, true)
                  )),
                (:line, 115, :none),
                (:if, (:call, :(==), (:., :sf, (:quote, #QuoteNode
                        :func
                      )), (:quote, #QuoteNode
                      :bt2
                    )), (:block,
                    (:line, 116, :none),
                    (:(=), :hasbt2, true)
                  ))
              ))
          )),
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), :hasbt),
        (:line, 121, :none),
        (:macrocall, Symbol("@test_broken"), :hasbt2),
        (:line, 123, :none),
        (:function, (:call, :btmacro), (:block,
            (:line, 124, :none),
            (:(=), :ret, (:macrocall, Symbol("@timed"), (:call, :backtrace))),
            (:line, 125, :none),
            (:ref, :ret, 1)
          )),
        (:line, 127, :none),
        (:(=), :lkup, (:call, :map, (:., :StackTraces, (:quote, #QuoteNode
                :lookup
              )), (:call, :btmacro))),
        (:line, 128, :none),
        (:(=), :hasme, (:(=), :hasbtmacro, false)),
        (:line, 129, :none),
        (:for, (:(=), :sfs, :lkup), (:block,
            (:line, 130, :none),
            (:for, (:(=), :sf, :sfs), (:block,
                (:line, 131, :none),
                (:if, (:call, :(==), (:., :sf, (:quote, #QuoteNode
                        :func
                      )), (:call, :Symbol, "macro expansion")), (:block,
                    (:line, 132, :none),
                    (:(=), :hasme, true)
                  )),
                (:line, 134, :none),
                (:if, (:call, :(==), (:., :sf, (:quote, #QuoteNode
                        :func
                      )), (:quote, #QuoteNode
                      :btmacro
                    )), (:block,
                    (:line, 135, :none),
                    (:(=), :hasbtmacro, true)
                  ))
              ))
          )),
        (:line, 139, :none),
        (:macrocall, Symbol("@test"), :hasme),
        (:line, 140, :none),
        (:macrocall, Symbol("@test"), :hasbtmacro)
      ))
  ))