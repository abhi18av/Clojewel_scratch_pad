(:quote, (:block,
    (:line, 4, :none),
    (:call, :srand, 0),
    (:line, 4, :none),
    (:call, :rand),
    (:line, 4, :none),
    (:(=), :x, (:call, :rand, 384)),
    (:line, 5, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :find, (:call, :.==, :x, (:call, :rand))), (:vect,))),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :rand), (:call, :rand))),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:comparison, 0.0, :(<=), (:call, :rand), :<, 1.0)),
    (:line, 9, :none),
    (:macrocall, Symbol("@test"), (:call, :(>=), (:call, :rand, :UInt32), 0)),
    (:line, 10, :none),
    (:macrocall, Symbol("@test"), (:comparison, -10, :(<=), (:call, :rand, (:(:), -10, -5)), :(<=), -5)),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:comparison, -10, :(<=), (:call, :rand, (:(:), -10, 5)), :(<=), 5)),
    (:line, 12, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:call, :minimum, (:comprehension, (:generator, (:call, :rand, (:(:), (:call, :Int32, 1), (:call, :Int32, (:call, :^, 7, 7)))), (:(=), :i, (:(:), 1, 100000))))), 0)),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :typeof, (:call, :rand, (:(:), false, true))), :Bool)),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :typeof, (:call, :rand, :Char)), :Char)),
    (:line, 15, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :randn, 4, 5)), 20)),
    (:line, 16, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :bitrand, 4, 5)), 20)),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister)), 0.8236475079774124)),
    (:line, 19, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister, 0)), 0.8236475079774124)),
    (:line, 20, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister, 42)), 0.5331830160438613)),
    (:line, 22, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister, 5294967296)), 0.3498809918210497)),
    (:line, 25, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister, 0), 1), (:vect, 0.8236475079774124))),
    (:line, 26, :none),
    (:(=), :A, (:call, :zeros, 2, 2)),
    (:line, 27, :none),
    (:call, :rand!, (:call, :MersenneTwister, 0), :A),
    (:line, 28, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :A, (:vcat, (:row, 0.8236475079774124, 0.16456579813368521), (:row, 0.9103565379264364, 0.17732884646626457)))),
    (:line, 30, :none),
    (:(=), :A, (:call, :zeros, 2, 2)),
    (:line, 31, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :rand!, (:call, :MersenneTwister, 0), :A, 5)),
    (:line, 32, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, (:call, :MersenneTwister, 0), :Int64, 1), (:vect, 4439861565447045202))),
    (:line, 33, :none),
    (:(=), :A, (:call, :zeros, :Int64, 2, 2)),
    (:line, 34, :none),
    (:call, :rand!, (:call, :MersenneTwister, 0), :A),
    (:line, 35, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :A, (:vcat, (:row, 858542123778948672, 5715075217119798169), (:row, 8690327730555225005, 8435109092665372532)))),
    (:line, 37, :none),
    (:(=), :A, (:call, :zeros, :UInt128, 2, 2)),
    (:line, 38, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :rand!, (:call, :MersenneTwister, 0), :A, 5)),
    (:line, 41, :none),
    (:let, (:block,
        (:line, 42, :none),
        (:call, :srand, :mt),
        (:line, 43, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:call, :rand, :mt, (:(:), 0, 3, 1000)), (:(:), 0, 3, 1000))),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, (:call, :rand!, :mt, (:call, (:curly, :Array, :Int), 100), (:(:), 0, 3, 1000)), (:(:), 0, 3, 1000))),
        (:line, 45, :none),
        (:(=), :coll, (:ref, :Any, 2, (:call, :UInt128, 128), (:call, :big, 619), "string")),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:call, :rand, :mt, :coll), :coll)),
        (:line, 47, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, (:call, :rand, :mt, :coll, 2, 3), :coll)),
        (:line, 50, :none),
        (:call, :rand, (:(:), 0, 3, 1000)),
        (:line, 51, :none),
        (:call, :rand!, (:call, (:curly, :Array, :Int), 100), (:(:), 0, 3, 1000)),
        (:line, 52, :none),
        (:call, :rand, :coll),
        (:line, 53, :none),
        (:call, :rand, :coll, 2, 3)
      ), (:(=), :mt, (:call, :MersenneTwister))),
    (:line, 57, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randn, (:call, :MersenneTwister, 42)), -0.5560268761463861)),
    (:line, 58, :none),
    (:(=), :A, (:call, :zeros, 2, 2)),
    (:line, 59, :none),
    (:call, :randn!, (:call, :MersenneTwister, 42), :A),
    (:line, 60, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :A, (:vcat, (:row, -0.5560268761463861, 0.027155338009193845), (:row, -0.444383357109696, -0.29948409035891055)))),
    (:line, 63, :none),
    (:for, (:(=), :T, (:tuple, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32, :Int64, :UInt64, :Int128, :UInt128, :BigInt, :Float16, :Float32, :Float64, (:curly, :Rational, :Int))), (:block,
        (:line, 65, :none),
        (:(=), :r, (:call, :rand, (:(:), (:call, :convert, :T, 97), (:call, :convert, :T, 122)))),
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :r), :T)),
        (:line, 67, :none),
        (:macrocall, Symbol("@test"), (:comparison, 97, :(<=), :r, :(<=), 122)),
        (:line, 68, :none),
        (:(=), :r, (:ref, (:call, :rand, (:(:), (:call, :convert, :T, 97), (:call, :convert, :T, 2), (:call, :convert, :T, 122)), 2), 1)),
        (:line, 69, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :r), :T)),
        (:line, 70, :none),
        (:macrocall, Symbol("@test"), (:comparison, 97, :(<=), :r, :(<=), 122)),
        (:line, 71, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :mod, :r, 2), 1)),
        (:line, 73, :none),
        (:if, (:&&, (:<:, :T, :Integer), (:call, :!, (:call, :(===), :T, :BigInt))), (:block,
            (:line, 74, :none),
            (:(=), :x, (:call, :rand, (:(:), (:call, :typemin, :T), (:call, :typemax, :T)))),
            (:line, 75, :none),
            (:macrocall, Symbol("@test"), (:call, :isa, :x, :T)),
            (:line, 76, :none),
            (:macrocall, Symbol("@test"), (:comparison, (:call, :typemin, :T), :(<=), :x, :(<=), (:call, :typemax, :T)))
          ))
      )),
    (:line, 80, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :any, (:comprehension, (:generator, (:call, :>, (:call, :+, (:call, (:., (:., :Base, (:quote, #QuoteNode
                          :Random
                        )), (:quote, #QuoteNode
                        :maxmultiple
                      )), :i), :i), 0xff), (:(=), :i, (:(:), 0x00, 0xff))))))),
    (:line, 81, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :.==, (:comprehension, (:generator, (:call, :%, (:call, :+, (:call, (:., (:., :Base, (:quote, #QuoteNode
                          :Random
                        )), (:quote, #QuoteNode
                        :maxmultiple
                      )), :i), 1), :i), (:(=), :i, (:(:), 0x01, 0xff)))), 0))),
    (:line, 82, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :>, (:call, :+, (:call, (:., (:., :Base, (:quote, #QuoteNode
                        :Random
                      )), (:quote, #QuoteNode
                      :maxmultiple
                    )), :i), 1, :i), 0xff), (:(=), :i, (:(:), 0x00, 0xff)))))),
    (:line, 83, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:(:), 0x00, 0xff)), (:call, :+, (:call, (:., (:., :Base, (:quote, #QuoteNode
                  :Random
                )), (:quote, #QuoteNode
                :maxmultiple
              )), 0x00), 1))),
    (:line, 86, :none),
    (:if, (:call, :<, (:call, :sizeof, :Int32), (:call, :sizeof, :Int)), (:block,
        (:line, 87, :none),
        (:(=), :r, (:call, :rand, (:(:), (:call, :Int32, -1), (:call, :typemax, :Int32)))),
        (:line, 88, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :r), :Int32)),
        (:line, 89, :none),
        (:macrocall, Symbol("@test"), (:comparison, -1, :(<=), :r, :(<=), (:call, :typemax, :Int32))),
        (:line, 90, :none),
        (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :(==), (:call, :-, (:call, :*, (:call, :div, (:macrocall, Symbol("@uint128_str"), "0x00010000000000000000"), :k), :k), 1), (:., (:call, (:., (:., :Base, (:quote, #QuoteNode
                            :Random
                          )), (:quote, #QuoteNode
                          :RangeGenerator
                        )), (:call, :map, :UInt64, (:(:), 1, :k))), (:quote, #QuoteNode
                      :u
                    ))), (:(=), :k, (:call, :.+, 13, (:call, :.^, (:call, :Int64, 2), (:(:), 32, 62)))))))),
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :(==), (:call, :-, (:call, :*, (:call, :div, (:macrocall, Symbol("@uint128_str"), "0x00010000000000000000"), :k), :k), 1), (:., (:call, (:., (:., :Base, (:quote, #QuoteNode
                            :Random
                          )), (:quote, #QuoteNode
                          :RangeGenerator
                        )), (:call, :map, :Int64, (:(:), 1, :k))), (:quote, #QuoteNode
                      :u
                    ))), (:(=), :k, (:call, :.+, 13, (:call, :.^, (:call, :Int64, 2), (:(:), 32, 61)))))))),
        (:line, 93, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Random
                  )), (:quote, #QuoteNode
                  :maxmultiplemix
                )), 0x0000000100000000), 0xffffffffffffffff)),
        (:line, 94, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Random
                  )), (:quote, #QuoteNode
                  :maxmultiplemix
                )), 0x00000000ffffffff), 0x00000000fffffffe)),
        (:line, 95, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Random
                  )), (:quote, #QuoteNode
                  :maxmultiplemix
                )), 0x0000000000000000), 0xffffffffffffffff))
      )),
    (:line, 99, :none),
    (:for, (:(=), :T, (:vect, :UInt32, :UInt64, :UInt128, :Int128)), (:block,
        (:line, 100, :none),
        (:(=), :s, (:(:), (:call, :big, (:call, :-, (:call, :typemax, :T), 1000)), (:call, :+, (:call, :big, (:call, :typemax, :T)), 10000))),
        (:line, 101, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :rand, :s), (:call, :rand, :s))),
        (:line, 102, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :big, (:call, :-, (:call, :typemax, :T), 1000)), :(<=), (:call, :rand, :s), :(<=), (:call, :+, (:call, :big, (:call, :typemax, :T)), 10000))),
        (:line, 103, :none),
        (:(=), :r, (:call, :rand, :s, 1, 2)),
        (:line, 104, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :r), (:tuple, 1, 2))),
        (:line, 105, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :r), (:curly, :Matrix, :BigInt))),
        (:line, 107, :none),
        (:call, :srand, 0),
        (:line, 108, :none),
        (:(=), :r, (:call, :rand, :s)),
        (:line, 109, :none),
        (:call, :srand, 0),
        (:line, 110, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :s), :r))
      )),
    (:line, 114, :none),
    (:(=), :ziggurat_table_size, 256),
    (:line, 115, :none),
    (:(=), :nmantissa, (:call, :^, (:call, :Int64, 2), 51)),
    (:line, 116, :none),
    (:(=), :ziggurat_nor_r, (:call, :parse, :BigFloat, "3.65415288536100879635194725185604664812733315920964488827246397029393565706474")),
    (:line, 117, :none),
    (:(=), :nor_section_area, (:call, :+, (:call, :*, :ziggurat_nor_r, (:call, :exp, (:call, :/, (:call, :-, (:call, :^, :ziggurat_nor_r, 2)), 2))), (:call, :*, (:call, :erfc, (:call, :/, :ziggurat_nor_r, (:call, :sqrt, (:call, :BigFloat, 2)))), (:call, :sqrt, (:call, :/, (:call, :big, :π), 2))))),
    (:line, 118, :none),
    (:(=), :emantissa, (:call, :^, (:call, :Int64, 2), 52)),
    (:line, 119, :none),
    (:(=), :ziggurat_exp_r, (:call, :parse, :BigFloat, "7.69711747013104971404462804811408952334296818528283253278834867283241051210533")),
    (:line, 120, :none),
    (:(=), :exp_section_area, (:call, :*, (:call, :+, :ziggurat_exp_r, 1), (:call, :exp, (:call, :-, :ziggurat_exp_r)))),
    (:line, 122, :none),
    (:(=), :ki, (:call, (:curly, :Array, :UInt64), :ziggurat_table_size)),
    (:line, 123, :none),
    (:(=), :wi, (:call, (:curly, :Array, :Float64), :ziggurat_table_size)),
    (:line, 124, :none),
    (:(=), :fi, (:call, (:curly, :Array, :Float64), :ziggurat_table_size)),
    (:line, 126, :none),
    (:(=), :ke, (:call, (:curly, :Array, :UInt64), :ziggurat_table_size)),
    (:line, 127, :none),
    (:(=), :we, (:call, (:curly, :Array, :Float64), :ziggurat_table_size)),
    (:line, 128, :none),
    (:(=), :fe, (:call, (:curly, :Array, :Float64), :ziggurat_table_size)),
    (:line, 129, :none),
    (:function, (:call, :randmtzig_fill_ziggurat_tables), (:block,
        (:line, 130, :none),
        (:(=), :wib, (:call, :big, :wi)),
        (:line, 131, :none),
        (:(=), :fib, (:call, :big, :fi)),
        (:line, 132, :none),
        (:(=), :web, (:call, :big, :we)),
        (:line, 133, :none),
        (:(=), :feb, (:call, :big, :fe)),
        (:line, 135, :none),
        (:(=), :x1, :ziggurat_nor_r),
        (:line, 136, :none),
        (:(=), (:ref, :wib, 256), (:call, :/, :x1, :nmantissa)),
        (:line, 137, :none),
        (:(=), (:ref, :fib, 256), (:call, :exp, (:call, :*, -0.5, :x1, :x1))),
        (:line, 142, :none),
        (:(=), (:ref, :ki, 1), (:call, :trunc, :UInt64, (:call, :*, (:call, :/, (:call, :*, :x1, (:ref, :fib, 256)), :nor_section_area), :nmantissa))),
        (:line, 143, :none),
        (:(=), (:ref, :wib, 1), (:call, :/, (:call, :/, :nor_section_area, (:ref, :fib, 256)), :nmantissa)),
        (:line, 144, :none),
        (:(=), (:ref, :fib, 1), (:call, :one, :BigFloat)),
        (:line, 146, :none),
        (:for, (:(=), :i, (:(:), 255, -1, 2)), (:block,
            (:line, 149, :none),
            (:(=), :x, (:call, :sqrt, (:call, :*, -2.0, (:call, :log, (:call, :+, (:call, :/, :nor_section_area, :x1), (:ref, :fib, (:call, :+, :i, 1))))))),
            (:line, 150, :none),
            (:(=), (:ref, :ki, (:call, :+, :i, 1)), (:call, :trunc, :UInt64, (:call, :*, (:call, :/, :x, :x1), :nmantissa))),
            (:line, 151, :none),
            (:(=), (:ref, :wib, :i), (:call, :/, :x, :nmantissa)),
            (:line, 152, :none),
            (:(=), (:ref, :fib, :i), (:call, :exp, (:call, :*, -0.5, :x, :x))),
            (:line, 153, :none),
            (:(=), :x1, :x)
          )),
        (:line, 156, :none),
        (:(=), (:ref, :ki, 2), (:call, :UInt64, 0)),
        (:line, 159, :none),
        (:(=), :x1, :ziggurat_exp_r),
        (:line, 160, :none),
        (:(=), (:ref, :web, 256), (:call, :/, :x1, :emantissa)),
        (:line, 161, :none),
        (:(=), (:ref, :feb, 256), (:call, :exp, (:call, :-, :x1))),
        (:line, 167, :none),
        (:(=), (:ref, :ke, 1), (:call, :trunc, :UInt64, (:call, :*, (:call, :/, (:call, :*, :x1, (:ref, :feb, 256)), :exp_section_area), :emantissa))),
        (:line, 168, :none),
        (:(=), (:ref, :web, 1), (:call, :/, (:call, :/, :exp_section_area, (:ref, :feb, 256)), :emantissa)),
        (:line, 169, :none),
        (:(=), (:ref, :feb, 1), (:call, :one, :BigFloat)),
        (:line, 171, :none),
        (:for, (:(=), :i, (:(:), 255, -1, 2)), (:block,
            (:line, 174, :none),
            (:(=), :x, (:call, :-, (:call, :log, (:call, :+, (:call, :/, :exp_section_area, :x1), (:ref, :feb, (:call, :+, :i, 1)))))),
            (:line, 175, :none),
            (:(=), (:ref, :ke, (:call, :+, :i, 1)), (:call, :trunc, :UInt64, (:call, :*, (:call, :/, :x, :x1), :emantissa))),
            (:line, 176, :none),
            (:(=), (:ref, :web, :i), (:call, :/, :x, :emantissa)),
            (:line, 177, :none),
            (:(=), (:ref, :feb, :i), (:call, :exp, (:call, :-, :x))),
            (:line, 178, :none),
            (:(=), :x1, :x)
          )),
        (:line, 180, :none),
        (:(=), (:ref, :ke, 2), (:call, :zero, :UInt64)),
        (:line, 182, :none),
        (:(=), (:ref, :wi, :(:)), :wib),
        (:line, 183, :none),
        (:(=), (:ref, :fi, :(:)), :fib),
        (:line, 184, :none),
        (:(=), (:ref, :we, :(:)), :web),
        (:line, 185, :none),
        (:(=), (:ref, :fe, :(:)), :feb),
        (:line, 186, :none),
        (:return, :nothing)
      )),
    (:line, 188, :none),
    (:call, :randmtzig_fill_ziggurat_tables),
    (:line, 189, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :ki, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :ki
            ))))),
    (:line, 190, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :wi, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :wi
            ))))),
    (:line, 191, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :fi, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :fi
            ))))),
    (:line, 192, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :ke, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :ke
            ))))),
    (:line, 193, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :we, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :we
            ))))),
    (:line, 194, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :(==), :fe, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :fe
            ))))),
    (:line, 198, :none),
    (:(=), :seed, (:call, :rand, :UInt)),
    (:line, 199, :none),
    (:call, :srand, :seed),
    (:line, 200, :none),
    (:(=), :r, (:call, :map, :Int64, (:call, :rand, (:call, :map, :Int32, (:(:), 97, 122))))),
    (:line, 201, :none),
    (:call, :srand, :seed),
    (:line, 202, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :r, (:call, :rand, (:call, :map, :Int64, (:(:), 97, 122))))),
    (:line, 204, :none),
    (:call, :srand, :seed),
    (:line, 205, :none),
    (:(=), :r, (:call, :map, :UInt64, (:call, :rand, (:call, :map, :UInt32, (:(:), 97, 122))))),
    (:line, 206, :none),
    (:call, :srand, :seed),
    (:line, 207, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :r, (:call, :rand, (:call, :map, :UInt64, (:(:), 97, 122))))),
    (:line, 209, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :(==), (:call, :-, (:call, :*, (:call, :div, 0x0000000100000000, :k), :k), 1), (:., (:call, (:., (:., :Base, (:quote, #QuoteNode
                        :Random
                      )), (:quote, #QuoteNode
                      :RangeGenerator
                    )), (:call, :map, :UInt64, (:(:), 1, :k))), (:quote, #QuoteNode
                  :u
                ))), (:(=), :k, (:call, :.+, 13, (:call, :.^, (:call, :Int64, 2), (:(:), 1, 30)))))))),
    (:line, 210, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :(==), (:call, :-, (:call, :*, (:call, :div, 0x0000000100000000, :k), :k), 1), (:., (:call, (:., (:., :Base, (:quote, #QuoteNode
                        :Random
                      )), (:quote, #QuoteNode
                      :RangeGenerator
                    )), (:call, :map, :Int64, (:(:), 1, :k))), (:quote, #QuoteNode
                  :u
                ))), (:(=), :k, (:call, :.+, 13, (:call, :.^, (:call, :Int64, 2), (:(:), 1, 30)))))))),
    (:line, 212, :none),
    (:toplevel, (:import, :Base, :Random, :uuid1), (:import, :Base, :Random, :uuid4), (:import, :Base, :Random, :UUID), (:import, :Base, :Random, :uuid_version)),
    (:line, 215, :none),
    (:(=), :u1, (:call, :uuid1)),
    (:line, 216, :none),
    (:(=), :u4, (:call, :uuid4)),
    (:line, 217, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :uuid_version, :u1), 1)),
    (:line, 218, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :uuid_version, :u4), 4)),
    (:line, 219, :none),
    (:macrocall, Symbol("@test"), (:comparison, :u1, :(==), (:call, :UUID, (:call, :string, :u1)), :(==), (:call, :UUID, (:call, :GenericString, (:call, :string, :u1))))),
    (:line, 220, :none),
    (:macrocall, Symbol("@test"), (:comparison, :u4, :(==), (:call, :UUID, (:call, :string, :u4)), :(==), (:call, :UUID, (:call, :GenericString, (:call, :string, :u4))))),
    (:line, 221, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :u1, (:call, :UUID, (:call, :UInt128, :u1)))),
    (:line, 222, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :u4, (:call, :UUID, (:call, :UInt128, :u4)))),
    (:line, 223, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :uuid4, (:call, :MersenneTwister)), (:call, :uuid4, (:call, :MersenneTwister)))),
    (:line, 224, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :UUID, "550e8400e29b-41d4-a716-446655440000")),
    (:line, 225, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :UUID, "550e8400e29b-41d4-a716-44665544000098")),
    (:line, 226, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :UUID, "z50e8400-e29b-41d4-a716-446655440000")),
    (:line, 229, :none),
    (:(=), :i8257, (:(:), 1, (:call, :/, 1, 3), 100)),
    (:line, 230, :none),
    (:for, (:(=), :i, (:(:), 1, 100)), (:block,
        (:line, 231, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:call, :rand, :i8257), :i8257))
      )),
    (:line, 236, :none),
    (:let, (:block,
        (:line, 237, :none),
        (:(=), :A128, (:call, (:curly, :Array, :UInt128), 0)),
        (:line, 238, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :rand!, :mt, :A128)), 0)),
        (:line, 239, :none),
        (:for, (:(=), (:tuple, :i, :n), (:call, :enumerate, (:vect, 1, 3, 5, 6, 10, 11, 30))), (:block,
            (:line, 240, :none),
            (:call, :resize!, :A128, :n),
            (:line, 241, :none),
            (:call, :rand!, :mt, :A128),
            (:line, 242, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :A128), :n)),
            (:line, 243, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :A128, :end), (:ref, (:ref, :UInt128, (:macrocall, Symbol("@uint128_str"), "0x15de6b23025813ad129841f537a04e40"), (:macrocall, Symbol("@uint128_str"), "0xcfa4db38a2c65bc4f18c07dc91125edf"), (:macrocall, Symbol("@uint128_str"), "0x33bec08136f19b54290982449b3900d5"), (:macrocall, Symbol("@uint128_str"), "0xde41af3463e74cb830dad4add353ca20"), (:macrocall, Symbol("@uint128_str"), "0x066d8695ebf85f833427c93416193e1f"), (:macrocall, Symbol("@uint128_str"), "0x48fab49cc9fcee1c920d6dae629af446"), (:macrocall, Symbol("@uint128_str"), "0x4b54632b4619f4eca22675166784d229")), :i)))
          )),
        (:line, 252, :none),
        (:call, :srand, :mt, 0),
        (:line, 253, :none),
        (:for, (:(=), (:tuple, :i, :T), (:call, :enumerate, (:vect, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32, :Int64, :UInt64, :Int128, :Float16, :Float32))), (:block,
            (:line, 254, :none),
            (:(=), :A, (:call, (:curly, :Array, :T), 16)),
            (:line, 255, :none),
            (:(=), :B, (:call, (:curly, :Array, :T), 31)),
            (:line, 256, :none),
            (:call, :rand!, :mt, :A),
            (:line, 257, :none),
            (:call, :rand!, :mt, :B),
            (:line, 258, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :A, :end), (:ref, (:ref, :Any, 21, 0x7b, 17385, 0x3086, -1574090021, 0xadcb4460, 6797283068698303107, 0x4e91c9c4d4f5f759, (:macrocall, Symbol("@int128_str"), "-3482609696641744459568613291754091152"), (:call, :Float16, 0.03125), 0.68733835f0), :i))),
            (:line, 261, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :B, :end), (:ref, (:ref, :Any, 49, 0x65, -3725, 0x719d, 814246081, 0xdf61843a, -3010919637398300844, 0x61b367cf8810985d, (:macrocall, Symbol("@int128_str"), "-33032345278809823492812856023466859769"), (:call, :Float16, 0.95), 0.51829386f0), :i)))
          )),
        (:line, 265, :none),
        (:call, :srand, :mt, 0),
        (:line, 266, :none),
        (:(=), :AF64, (:call, (:curly, :Array, :Float64), (:call, :-, (:call, (:., (:., :Base, (:quote, #QuoteNode
                      :Random
                    )), (:quote, #QuoteNode
                    :dsfmt_get_min_array_size
                  ))), 1))),
        (:line, 267, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :rand!, :mt, :AF64), :end), 0.957735065345398)),
        (:line, 268, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :rand!, :mt, :AF64), :end), 0.6492481059865669)),
        (:line, 269, :none),
        (:call, :resize!, :AF64, (:call, :*, 2, (:call, :length, (:., :mt, (:quote, #QuoteNode
                  :vals
                ))))),
        (:line, 270, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, (:., (:., :Base, (:quote, #QuoteNode
                      :Random
                    )), (:quote, #QuoteNode
                    :rand_AbstractArray_Float64!
                  )), :mt, :AF64), :end), 0.432757268470779))
      ), (:(=), :mt, (:call, :MersenneTwister, 0))),
    (:line, 274, :none),
    (:let, (:block,
        (:line, 275, :none),
        (:(=), :a, (:call, (:curly, :Array, :Float64), 0)),
        (:line, 276, :none),
        (:call, :resize!, :a, 1000),
        (:line, 277, :none),
        (:(=), :b, (:call, (:curly, :Array, :Float64), 1000)),
        (:line, 278, :none),
        (:(=), :c8, (:call, (:curly, :Array, :UInt64), 1001)),
        (:line, 279, :none),
        (:(=), :pc8, (:call, :pointer, :c8)),
        (:line, 280, :none),
        (:if, (:call, :(==), (:call, :%, (:call, :Int, :pc8), 16), 0), (:block,
            (:line, 284, :none),
            (:+=, :pc8, 8)
          )),
        (:line, 286, :none),
        (:(=), :c, (:call, :unsafe_wrap, :Array, (:call, (:curly, :Ptr, :Float64), :pc8), 1000)),
        (:line, 288, :none),
        (:for, (:(=), :A, (:tuple, :a, :b, :c)), (:block,
            (:line, 289, :none),
            (:call, :srand, :mt, 0),
            (:line, 290, :none),
            (:call, :rand, :mt),
            (:line, 291, :none),
            (:call, :rand!, :mt, :A),
            (:line, 292, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :A, (:(:), (:call, :-, :end, 4), :end)), (:vect, 0.49508297796349776, 0.3408340446375888, 0.3211229457075784, 0.9103565379264364, 0.16456579813368521)))
          ))
      ), (:(=), :mt, (:call, :MersenneTwister))),
    (:line, 297, :none),
    (:let, (:block,
        (:line, 298, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :>>>, (:call, :reduce, :|, :a), 64), 0))
      ), (:(=), :a, (:comprehension, (:generator, (:call, :rand, (:call, :RandomDevice), :UInt128), (:(=), :i, (:(:), 1, 10)))))),
    (:line, 302, :none),
    (:for, (:(=), :rng, (:tuple, (:vect,), (:vect, (:call, :MersenneTwister)), (:vect, (:call, :RandomDevice)))), (:block,
        (:line, 303, :none),
        (:(=), :types, (:vect, (:..., (:., :Base, (:quote, #QuoteNode
                  :BitInteger_types
                ))), :Bool, :Float16, :Float32, :Float64, :Char)),
        (:line, 304, :none),
        (:(=), :ftypes, (:vect, :Float16, :Float32, :Float64)),
        (:line, 305, :none),
        (:(=), :b2, (:call, :big, 2)),
        (:line, 306, :none),
        (:(=), :u3, (:call, :UInt, 3)),
        (:line, 307, :none),
        (:for, (:(=), :f, (:vect, :rand, :randn, :randexp)), (:block,
            (:line, 308, :none),
            (:(::), (:call, :f, (:..., :rng)), :Float64),
            (:line, 309, :none),
            (:(::), (:call, :f, (:..., :rng), 5), (:curly, :Vector, :Float64)),
            (:line, 310, :none),
            (:(::), (:call, :f, (:..., :rng), 2, 3), (:curly, :Array, :Float64, 2)),
            (:line, 311, :none),
            (:(::), (:call, :f, (:..., :rng), :b2, :u3), (:curly, :Array, :Float64, 2)),
            (:line, 312, :none),
            (:(::), (:call, :f, (:..., :rng), (:tuple, 2, 3)), (:curly, :Array, :Float64, 2)),
            (:line, 313, :none),
            (:for, (:(=), :T, (:if, (:call, :(===), :f, :rand), :types, :ftypes)), (:block,
                (:line, 314, :none),
                (:(=), :a0, (:(::), (:call, :f, (:..., :rng), :T), :T)),
                (:line, 315, :none),
                (:(=), :a1, (:(::), (:call, :f, (:..., :rng), :T, 5), (:curly, :Vector, :T))),
                (:line, 316, :none),
                (:(=), :a2, (:(::), (:call, :f, (:..., :rng), :T, 2, 3), (:curly, :Array, :T, 2))),
                (:line, 317, :none),
                (:(=), :a3, (:(::), (:call, :f, (:..., :rng), :T, :b2, :u3), (:curly, :Array, :T, 2))),
                (:line, 318, :none),
                (:(=), :a4, (:(::), (:call, :f, (:..., :rng), :T, (:tuple, 2, 3)), (:curly, :Array, :T, 2))),
                (:line, 319, :none),
                (:if, (:&&, (:<:, :T, :AbstractFloat), (:call, :(===), :f, :rand)), (:block,
                    (:line, 320, :none),
                    (:for, (:(=), :a, (:vect, :a0, (:..., :a1), (:..., :a2), (:..., :a3), (:..., :a4))), (:block,
                        (:line, 321, :none),
                        (:macrocall, Symbol("@test"), (:comparison, 0.0, :(<=), :a, :<, 1.0))
                      ))
                  ))
              ))
          )),
        (:line, 326, :none),
        (:for, (:(=), :f!, (:vect, :rand!, :randn!, :randexp!)), (:block,
            (:line, 327, :none),
            (:for, (:(=), :T, (:if, (:call, :(===), :f!, :rand!), :types, :ftypes)), (:block,
                (:line, 328, :none),
                (:(=), :X, (:if, (:call, :(==), :T, :Bool), (:ref, :T, 0, 1), (:ref, :T, 0, 1, 2))),
                (:line, 329, :none),
                (:for, (:(=), :A, (:tuple, (:call, (:curly, :Array, :T), 5), (:call, (:curly, :Array, :T), 2, 3))), (:block,
                    (:line, 330, :none),
                    (:(::), (:call, :f!, (:..., :rng), :A), (:call, :typeof, :A)),
                    (:line, 331, :none),
                    (:if, (:call, :(===), :f!, :rand!), (:block,
                        (:line, 332, :none),
                        (:(::), (:call, :f!, (:..., :rng), :A, :X), (:call, :typeof, :A)),
                        (:line, 333, :none),
                        (:if, (:call, :(!==), :T, :Char), (:block,
                            (:line, 334, :none),
                            (:(::), (:call, :f!, (:..., :rng), (:call, :sparse, :A)), (:call, :typeof, (:call, :sparse, :A))),
                            (:line, 335, :none),
                            (:(::), (:call, :f!, (:..., :rng), (:call, :sparse, :A), :X), (:call, :typeof, (:call, :sparse, :A)))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 342, :none),
        (:(::), (:call, :bitrand, (:..., :rng), 5), (:curly, :BitArray, 1)),
        (:line, 343, :none),
        (:(::), (:call, :bitrand, (:..., :rng), 2, 3), (:curly, :BitArray, 2)),
        (:line, 344, :none),
        (:(::), (:call, :rand!, (:..., :rng), (:call, :BitArray, 5)), (:curly, :BitArray, 1)),
        (:line, 345, :none),
        (:(::), (:call, :rand!, (:..., :rng), (:call, :BitArray, 2, 3)), (:curly, :BitArray, 2)),
        (:line, 348, :none),
        (:for, (:(=), :r, (:vect, :randn, :randexp, :randn!, :randexp!)), (:block,
            (:line, 349, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :Int)),
            (:line, 350, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :Int32)),
            (:line, 351, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :Bool)),
            (:line, 352, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :String)),
            (:line, 353, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :AbstractFloat)),
            (:line, 355, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :BigFloat)),
            (:line, 357, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :Int64, (:tuple, 2, 3))),
            (:line, 358, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, :String, 1)),
            (:line, 360, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, (:..., :rng), :Number, (:tuple, 2, 3))),
            (:line, 361, :none),
            (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :r, (:..., :rng), :Any, 1))
          ))
      )),
    (:line, 365, :none),
    (:function, (:call, :hist, :X, :n), (:block,
        (:line, 366, :none),
        (:(=), :v, (:call, :zeros, :Int, :n)),
        (:line, 367, :none),
        (:for, (:(=), :x, :X), (:block,
            (:line, 368, :none),
            (:+=, (:ref, :v, (:call, :+, (:call, :floor, :Int, (:call, :*, :x, :n)), 1)), 1)
          )),
        (:line, 370, :none),
        :v
      )),
    (:line, 374, :none),
    (:for, (:(=), :rng, (:vect, (:call, :srand, (:call, :MersenneTwister)), (:call, :RandomDevice))), (:block,
        (:line, 375, :none),
        (:for, (:(=), :T, (:vect, :Float16, :Float32, :Float64)), (:block,
            (:line, 377, :none),
            (:(=), :counts, (:call, :hist, (:call, :rand, :rng, :T, 2000), 4)),
            (:line, 378, :none),
            (:macrocall, Symbol("@test"), (:call, :>, (:call, :minimum, :counts), 300)),
            (:line, 380, :none),
            (:(=), :counts, (:call, :hist, (:comprehension, (:generator, (:call, :rand, :rng, :T), (:(=), :i, (:(:), 1, 2000)))), 4)),
            (:line, 381, :none),
            (:macrocall, Symbol("@test"), (:call, :>, (:call, :minimum, :counts), 300))
          ))
      )),
    (:line, 386, :none),
    (:let, (:block,
        (:line, 388, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mta), (:call, :rand, :mtb))),
        (:line, 389, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mta, 10), (:call, :rand, :mtb, 10))),
        (:line, 390, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randn, :mta), (:call, :randn, :mtb))),
        (:line, 391, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randn, :mta, 10), (:call, :randn, :mtb, 10))),
        (:line, 392, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randexp, :mta), (:call, :randexp, :mtb))),
        (:line, 393, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randexp, :mta, 10), (:call, :randexp, :mtb, 10))),
        (:line, 394, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mta, (:(:), 1, 100)), (:call, :rand, :mtb, (:(:), 1, 100)))),
        (:line, 395, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mta, (:(:), 1, 10), 10), (:call, :rand, :mtb, (:(:), 1, 10), 10))),
        (:line, 396, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mta, :Bool), (:call, :rand, :mtb, :Bool))),
        (:line, 397, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :bitrand, :mta, 10), (:call, :bitrand, :mtb, 10))),
        (:line, 399, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randstring, :mta), (:call, :randstring, :mtb))),
        (:line, 400, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randstring, :mta, 10), (:call, :randstring, :mtb, 10))),
        (:line, 402, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randsubseq, :mta, (:(:), 1, 10), 0.4), (:call, :randsubseq, :mtb, (:(:), 1, 10), 0.4))),
        (:line, 403, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randsubseq!, :mta, (:ref, :Int), (:(:), 1, 10), 0.4), (:call, :randsubseq!, :mtb, (:ref, :Int), (:(:), 1, 10), 0.4))),
        (:line, 405, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :shuffle, :mta, (:call, :collect, (:(:), 1, 10))), (:call, :shuffle, :mtb, (:call, :collect, (:(:), 1, 10))))),
        (:line, 406, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :shuffle!, :mta, (:call, :collect, (:(:), 1, 10))), (:call, :shuffle!, :mtb, (:call, :collect, (:(:), 1, 10))))),
        (:line, 407, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :shuffle, :mta, (:call, :collect, (:(:), 2, 11))), (:call, :shuffle, :mtb, (:(:), 2, 11)))),
        (:line, 409, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randperm, :mta, 10), (:call, :randperm, :mtb, 10))),
        (:line, 410, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :sort!, (:call, :randperm, 10)), :(==), (:call, :sort!, (:call, :shuffle, (:(:), 1, 10))), :(==), (:call, :collect, (:(:), 1, 10)))),
        (:line, 411, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randperm, :mta, (:call, :big, 10)), (:call, :randperm, :mtb, (:call, :big, 10)))),
        (:line, 412, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randperm, 0), (:vect,))),
        (:line, 413, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :randperm, -1)),
        (:line, 415, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :randcycle, :mta, 10), (:call, :randcycle, :mtb, 10))),
        (:line, 417, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sprand, :mta, 1, 1, 0.9), (:call, :sprand, :mtb, 1, 1, 0.9))),
        (:line, 418, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sprand, :mta, 10, 10, 0.3), (:call, :sprand, :mtb, 10, 10, 0.3)))
      ), (:(=), :mta, (:call, :MersenneTwister, 42)), (:(=), :mtb, (:call, :MersenneTwister, 42))),
    (:line, 422, :none),
    (:let, (:block,
        (:line, 423, :none),
        (:(=), :step, (:call, :*, 25000, 2)),
        (:line, 424, :none),
        (:(=), :size, 4),
        (:line, 425, :none),
        (:(=), :jump25000, "35931a4947eeab70a9abbfaca4a79cfcf2610a35a586c6f4e4bdfa826d538cbfb0432c37321fcec4f6c98de3df06685087032988b0ad9a2144562aa82e06f2f6f256b5b412c524e35383a894da7b04e142c4156290585186d8fc06d3141a778220c2519a851b5a9e5947a3f745b71804631988825e21dba40392ff4c036b30d2d013b45e2be94b5e130a9c6424d2e82f48c855c81bd10757fdb5a91e23e9e312e430514ea31631d8897b4cf26eb39b37be0c92706e5637d4b34c1e4046b741e455df195cb512e8e0f8d578175a3da5e00d7ce247d9b92042b1b515d01f7f89fe661ebccb06dfb77bc0fbb99806921b472ccce58f2166ac058d9cf427ad7d74986e60a56d2fee0a8b680e466a8ea4e508a76c058b6f97b99c9aa5b10297b1a1bd6a8e80f3a79e008fa55a4a8915fbdec78b6b117ad67e195311fe79fc084c33f6db546f5b7602d010fa8b830e3f1b00cef00ee16840178fc7e9aa5f1cee625d43de8488bf6c8bd379ea6f97c55c7a9ee091477a23533d5e52e194bd9d4e17b02a64a2736feb3779fabd5777e448ffee0f2d4b38a8e7441822b882fc6df0bde8541e85c0c78a05936cff0c88a50980b7a84971fba3650991fe2cba425ac4b4289e7b06ce2cfabfcc8a553201e8c74b45e4ae74b6d054e37af95e6fd55e029b7c526b85ecfb3be8db670218ee3dda7b2a54ab1ed26eefe4cd1d2a9c589a6e94d0aa3ebe29e40e616aa0b731061c3d6e247ec610024a1a97b7adb7919308b0fb5dd5d51a58aa2f55d77b88037de7c1a74823c96cb09d22dd7f90dba14eefdcffaab34d323c829f24742f6f6b32b0724a26ae4a81130a8a275d30c21e6245fa27cf26d606a49bccba2980697c32d9efe583c4ee2140569025c4f044d744bc40cec1660d9e4d2de3a4de83bae4f0a9fdb34ef4509b2b4e6c37967a485a52d69d1573bb826bc64c966de9c792b7c2f07b645c56a29381911a98928e48516f246a55bcaa78f3c7d1c30127df5f06ba0a2d6a5e54605a20e60fab30c01a9472cb610ca0ef2418a985af00c7e47539111bf539dd554297d0374a7ff627d879600595b442c8dcffcffa3bbb07e5c7882ff0858142be4deac448698f0917fe2b7a9b686a9df1fa929f06a51aff992a6ee0b0605f8b34b87600cfa0af2475333b78625ce1520c793dc5080218247b4e41bbd7d9dab163470fe17a3d2622cdce979cc5565b0bc04eabaf656f21fa072a18ab33c656b665248ef20321407fef263b1c67316f2c6f236951990099e42d4614d8e08b27aa89d9f4548fa321d4b381d2da04fd7f17d6b9a68adfd0e4427196d25dcad869f8a155c6242f7d072baa5e7405ceb65dfaa3eb864bfe679a17df34273fde5037befe9ed5391b932cee271f59128c61ab3f0fc3f7cf8ff051fbda8382c64579efddd494c79850c56bda73bcd39c20c2820d191995b3335253c3b0ac8f5e5373f40c228886e6c526c2c249a5304578ba2a80f591c34ca1eaa84d6cc9399cf3f1207e61c4acada647e4e87ad5fba84aeeff6b6881d35bda77c74384fc5e279a0f495d509bc882c2b8bc790651a6d7a4ecba23a3f05111e1d8be37c03439fbd484668ceab69a52b7d519b169cbbcf634ee5e3bf78a5f8771f95fea03f2cb889e116a9f5de3abeacb8e42475fb5d022484b02d11f1e406332e0a773098fc4f0baa57cda2863c554f291d4eb74e63e4b3d44b0ed156bff1820003d407a3aaa9e6dfaa226ba7ef2fd0eff90a5482926f47f24f67019edccb6fd329eef30b5fb2125276aa1fe75a702b32c907ab133c72a74e77e0a5eb48fc5176b9d65b75b0038e1a9ed74ec2a3dcd2348fa54256f082abc01a301bacef7380f20ee0411c08a35dafdaae9f9fc123448da28626ffcc654e9d522bc8b8776b13a3310f7eeb4d27290ef4cbc7492fbcb5409d455748a8a1f087430cf5e6f453e2caa0c5343fcf4374cc38bead49941d8ab59b4d5181716c238aa88dbf1c4a2da3a9a9b9435d5ee1d51d27b0655a4308c1252aaf633cd8f44a351ffc8cec65de0b7e4e2556100e2ae9bc511044351109a6254b2d387b1a72c768f43fa7be6b93806e323b55c3e7925ed627dc708fde0954b299b1ca33bb7fbe33e0f9e4ce5b4f26efaf8e5b9507ada4f8658998eb7167afbd4482ee47cc60f4039d6a77c1fb126033bfc2e7c6162ff7561f22e263325c53a014a4ac9390fe6fab5d433c1e9896fe561f22fc8290f3f4560b676f3dfbfd1fe605343a0685349241b83a28d61cc0292d1f638a36d3d87bfa9f72f9df1cfe90692dfda5bd5e698362f5316984cbe73a132a801acbca76b5f5c23d98a217f2159b6cbbcdf8f52d23ea24c9471a31562a651b20e05cd0300ee500a450cfdaa4d2d83f7e7e27f8b7c793cf80f8067dadef77e49a64c373b97bac4dd472e5145072c73d0fdd68d9646c8a8ed9aec6c40bc915ae44ae27391ca0f1a4d2cb1c3d097be614e6eba807f4549d769a5872f268ccf770f2682d844490348f0b6a0d2b51aadbb5523cf708b66f9928eed12b35a39cf42d283b29f5283e1c8ba1f73457af17b14cdfdf9a85b0589acf1f9504e46b0bab8be848dac5673587035b99f56c41d3195bbba1616b149a22193cfb760d6bf2d84861653cd21be9a2d33187cb25d47fbecdd4626d1d97202f460a39b7128cadb77ddf682feca61fb6de0290df598a565a6361a91d76c0c685046489ed4cb1dcc4f1cea849c12dc4a3d38d3010567f387590532b78927e92f0b718c84e882b3df071a78a011d0fd56d4101dcb009914a16a781b240a6fb2440c72b0ffb365be9d3459d114e665a0d35d7b8bd280101d85d1211d939ba0b15ab528c4f9dd2b001172561d211671b96873010ae3c2b8317f773d735698914228764b831423ae19dd4bbb008b9f1bd1e3ebdd626e629a46a9dd70bdd4bb30e2279e83c12bbbead6479b5f9980b1a9c785395520703a9367d931b45c1566c9d314b1745cafc6d0667cc9bc94d0c53a960c829eb09b768ab6bb2133e4fea1d939f3d3f8e1237210cf3577c830f0493073dc1d189abf27402b8b31b7c172c43dbf331a0828adfe737380e763d0ab0bfaaf94ec04830f94380a83718f340c4eeb20d7eb22b94613be84a9ed332ab364efff6cb37eec35d186185cca725e7a748f6bdb427604fb1628d49a7424a5a62a2e930fe142b035503af332fe748d5e63591b9ac54071ca843d5e474a48837de8b80387f3269ab50d2fd99c08c971e015d13fa02c7c315922ce58bdacbf8ee48827851a61fca59882d7eadcce3166dfe012aa9ec849e698e776a4d384f4755b506a222636942a81bbbffa1ff47e4d81fe68120aebcfd1a7e0000fd0cffdc44e1f0cd69ea2b4936564c78af51fed1cc8e34f0b46d6330b4b50ddee09335b7b0be0bc9f7f8e48415e15d08f811653d21bc6dd152742b086caadcc6dff5e27b40da42c2f1ebf3dd2bd51c418718e499859239317fcab10892eadf1c0ebf7a4246bce4cce3617193032f3e41b977dc8650298ac39631c527460364effea0f0bfd043df72ead0406aba1bcd636d65d7b89979eb8e1"),
        (:line, 427, :none),
        (:(=), :mts, (:call, :randjump, :mta, :size, :jump25000)),
        (:line, 428, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :mts), 4)),
        (:line, 430, :none),
        (:(=), :tmp, (:call, :zeros, :Float64, (:call, :*, :size, :step))),
        (:line, 431, :none),
        (:for, (:(=), :j, (:(:), 1, :step)), (:block,
            (:line, 432, :none),
            (:for, (:(=), :k, (:(:), 1, :size)), (:block,
                (:line, 433, :none),
                (:(=), (:ref, :tmp, (:call, :+, :j, (:call, :*, (:call, :-, :k, 1), :step))), (:call, :rand, (:ref, :mts, :k), :Float64))
              ))
          )),
        (:line, 437, :none),
        (:for, (:(=), :j, (:(:), 1, (:call, :*, :size, :step))), (:block,
            (:line, 438, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :mtb, :Float64), (:ref, :tmp, :j)))
          ))
      ), (:(=), :mta, (:call, :MersenneTwister, :seed)), (:(=), :mtb, (:call, :MersenneTwister, :seed))),
    (:line, 443, :none),
    (:call, :srand, (:call, :typemax, :UInt)),
    (:line, 444, :none),
    (:call, :srand, (:call, :typemax, :UInt128)),
    (:line, 447, :none),
    (:let, (:block,
        (:line, 448, :none),
        (:(=), :r, (:call, :MersenneTwister, :seed)),
        (:line, 449, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :r, (:call, :MersenneTwister, :seed))),
        (:line, 450, :none),
        (:(=), :s, (:call, :copy, :r)),
        (:line, 451, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :(==), :s, :r), (:call, :(!==), :s, :r))),
        (:line, 452, :none),
        (:(=), (:tuple, :skip, :len), (:call, :rand, (:(:), 0, 2000), 2)),
        (:line, 453, :none),
        (:for, (:(=), :j, (:(:), 1, :skip)), (:block,
            (:line, 454, :none),
            (:call, :rand, :r),
            (:line, 455, :none),
            (:call, :rand, :s)
          )),
        (:line, 457, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :rand, :r, :len), (:call, :rand, :s, :len))),
        (:line, 458, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :s, :r))
      ), (:(=), :seed, (:call, :rand, :UInt32, 10))),
    (:line, 462, :none),
    (:macrocall, Symbol("@test_throws"), :DomainError, (:call, (:., (:., :Base, (:quote, #QuoteNode
              :dSFMT
            )), (:quote, #QuoteNode
            :DSFMT_state
          )), (:call, :zeros, :Int32, (:call, :rand, (:(:), 0, (:call, :-, (:., (:., :Base, (:quote, #QuoteNode
                      :dSFMT
                    )), (:quote, #QuoteNode
                    :JN32
                  )), 1)))))),
    (:line, 463, :none),
    (:macrocall, Symbol("@test_throws"), :DomainError, (:call, :MersenneTwister, (:call, :zeros, :UInt32, 1), (:call, (:., (:., :Base, (:quote, #QuoteNode
                :dSFMT
              )), (:quote, #QuoteNode
              :DSFMT_state
            ))), (:call, :zeros, :Float64, 10), 0)),
    (:line, 465, :none),
    (:macrocall, Symbol("@test_throws"), :DomainError, (:call, :MersenneTwister, (:call, :zeros, :UInt32, 1), (:call, (:., (:., :Base, (:quote, #QuoteNode
                :dSFMT
              )), (:quote, #QuoteNode
              :DSFMT_state
            ))), (:call, :zeros, :Float64, (:., (:., :Base, (:quote, #QuoteNode
                :Random
              )), (:quote, #QuoteNode
              :MTCacheLength
            ))), -1)),
    (:line, 469, :none),
    (:let, (:block,
        (:line, 470, :none),
        (:(=), :r, (:call, :MersenneTwister, :seed)),
        (:line, 471, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :(==), (:., :r, (:quote, #QuoteNode
                  :seed
                )), :seed), (:call, :(!==), (:., :r, (:quote, #QuoteNode
                  :seed
                )), :seed))),
        (:line, 472, :none),
        (:call, :resize!, :seed, 4),
        (:line, 473, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:., :r, (:quote, #QuoteNode
                :seed
              )), :seed))
      ), (:(=), :seed, (:call, :rand, :UInt32, 10)))
  ))