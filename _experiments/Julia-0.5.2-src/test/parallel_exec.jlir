(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Test),
    (:line, 5, :none),
    (:(=), :inline_flag, (:if, (:call, :(==), (:., (:call, (:., :Base, (:quote, #QuoteNode
                  :JLOptions
                ))), (:quote, #QuoteNode
              :can_inline
            )), 1), (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), "--inline=no"))),
    (:line, 6, :none),
    (:(=), :cov_flag, (:macrocall, Symbol("@cmd"), "")),
    (:line, 7, :none),
    (:if, (:call, :(==), (:., (:call, (:., :Base, (:quote, #QuoteNode
                :JLOptions
              ))), (:quote, #QuoteNode
            :code_coverage
          )), 1), (:block,
        (:line, 8, :none),
        (:(=), :cov_flag, (:macrocall, Symbol("@cmd"), "--code-coverage=user"))
      ), (:block,
        (:line, 9, :none),
        (:if, (:call, :(==), (:., (:call, (:., :Base, (:quote, #QuoteNode
                    :JLOptions
                  ))), (:quote, #QuoteNode
                :code_coverage
              )), 2), (:block,
            (:line, 10, :none),
            (:(=), :cov_flag, (:macrocall, Symbol("@cmd"), "--code-coverage=all"))
          ))
      )),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:call, :remote, :myid)), 1)),
    (:line, 15, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pmap, :identity, (:(:), 1, 100)), (:vect, (:..., (:(:), 1, 100))))),
    (:line, 16, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 100, (:macrocall, Symbol("@parallel"), :+, (:for, (:(=), :i, (:(:), 1, 100)), (:block,
              (:line, 17, :none),
              1
            ))))),
    (:line, 20, :none),
    (:call, :addprocs, (:parameters, (:kw, :exeflags, (:macrocall, Symbol("@cmd"), "\$cov_flag \$inline_flag --check-bounds=yes --startup-file=no --depwarn=error"))), 4),
    (:line, 23, :none),
    (:let, (:block,
        (:line, 24, :none),
        (:(=), :pool, (:call, (:., :Base, (:quote, #QuoteNode
                :default_worker_pool
              )))),
        (:line, 26, :none),
        (:(=), :count, 0),
        (:line, 27, :none),
        (:(=), :count_condition, (:call, :Condition)),
        (:line, 29, :none),
        (:function, (:call, :remote_wait, :c), (:block,
            (:line, 30, :none),
            (:macrocall, Symbol("@async"), (:block,
                (:line, 31, :none),
                (:+=, :count, 1),
                (:line, 32, :none),
                (:call, (:call, :remote, :take!), :c),
                (:line, 33, :none),
                (:-=, :count, 1),
                (:line, 34, :none),
                (:call, :notify, :count_condition)
              )),
            (:line, 36, :none),
            (:call, :yield)
          )),
        (:line, 39, :none),
        (:(=), :testchannels, (:comprehension, (:generator, (:call, :RemoteChannel), (:(=), :i, (:(:), 1, (:call, :nworkers)))))),
        (:line, 40, :none),
        (:(=), :testcount, 0),
        (:line, 41, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :pool), true)),
        (:line, 42, :none),
        (:for, (:(=), :c, :testchannels), (:block,
            (:line, 43, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 44, :none),
            (:call, :remote_wait, :c),
            (:line, 45, :none),
            (:+=, :testcount, 1)
          )),
        (:line, 47, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
        (:line, 48, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :pool), false)),
        (:line, 50, :none),
        (:for, (:(=), :c, :testchannels), (:block,
            (:line, 51, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 52, :none),
            (:call, :put!, :c, "foo"),
            (:line, 53, :none),
            (:-=, :testcount, 1),
            (:line, 54, :none),
            (:call, :wait, :count_condition),
            (:line, 55, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 56, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :pool), true))
          )),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :count, 0)),
        (:line, 61, :none),
        (:for, (:(=), :c, :testchannels), (:block,
            (:line, 62, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 63, :none),
            (:call, :remote_wait, :c),
            (:line, 64, :none),
            (:+=, :testcount, 1)
          )),
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
        (:line, 67, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :pool), false)),
        (:line, 69, :none),
        (:for, (:(=), :c, (:call, :reverse, :testchannels)), (:block,
            (:line, 70, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 71, :none),
            (:call, :put!, :c, "foo"),
            (:line, 72, :none),
            (:-=, :testcount, 1),
            (:line, 73, :none),
            (:call, :wait, :count_condition),
            (:line, 74, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :count, :testcount)),
            (:line, 75, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :pool), true))
          )),
        (:line, 78, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :count, 0))
      )),
    (:line, 82, :none),
    (:(=), :id_me, (:call, :myid)),
    (:line, 83, :none),
    (:(=), :id_other, (:ref, (:call, :filter, (:->, :x, (:block,
              (:line, 83, :none),
              (:call, :(!=), :x, :id_me)
            )), (:call, :procs)), (:call, :rand, (:(:), 1, (:call, :-, (:call, :nprocs), 1))))),
    (:line, 86, :none),
    (:function, (:call, :testf, :id), (:block,
        (:line, 87, :none),
        (:(=), :f, (:call, :Future, :id)),
        (:line, 88, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :f), false)),
        (:line, 89, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isnull, (:., :f, (:quote, #QuoteNode
                  :v
                ))), true)),
        (:line, 90, :none),
        (:call, :put!, :f, (:quote, #QuoteNode
            :OK
          )),
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :f), true)),
        (:line, 92, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isnull, (:., :f, (:quote, #QuoteNode
                  :v
                ))), false)),
        (:line, 94, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :put!, :f, (:quote, #QuoteNode
              :OK
            ))),
        (:line, 95, :none),
        (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :take!, :f)),
        (:line, 97, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :f), (:quote, #QuoteNode
              :OK
            )))
      )),
    (:line, 100, :none),
    (:call, :testf, :id_me),
    (:line, 101, :none),
    (:call, :testf, :id_other),
    (:line, 104, :none),
    (:function, (:call, :test_futures_dgc, :id), (:block,
        (:line, 105, :none),
        (:(=), :f, (:call, :remotecall, :myid, :id)),
        (:line, 106, :none),
        (:(=), :fid, (:call, (:., :Base, (:quote, #QuoteNode
                :remoteref_id
              )), :f)),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 109, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :fid), true)),
        (:line, 110, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isnull, (:., :f, (:quote, #QuoteNode
                  :v
                ))), true)),
        (:line, 111, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :f), :id)),
        (:line, 112, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isnull, (:., :f, (:quote, #QuoteNode
                  :v
                ))), false)),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 113, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :fid), false)),
        (:line, 117, :none),
        (:(=), :f, (:call, :remotecall, :myid, :id)),
        (:line, 118, :none),
        (:(=), :fid, (:call, (:., :Base, (:quote, #QuoteNode
                :remoteref_id
              )), :f)),
        (:line, 119, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 119, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :fid), true)),
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isnull, (:., :f, (:quote, #QuoteNode
                  :v
                ))), true)),
        (:line, 121, :none),
        (:call, :finalize, :f),
        (:line, 122, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :flush_gc_msgs
            ))),
        (:line, 123, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 123, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :fid), false))
      )),
    (:line, 126, :none),
    (:call, :test_futures_dgc, :id_me),
    (:line, 127, :none),
    (:call, :test_futures_dgc, :id_other),
    (:line, 130, :none),
    (:(=), :wid1, (:ref, (:call, :workers), 1)),
    (:line, 131, :none),
    (:(=), :wid2, (:ref, (:call, :workers), 2)),
    (:line, 132, :none),
    (:(=), :f, (:call, :remotecall, :myid, :wid1)),
    (:line, 133, :none),
    (:(=), :fid, (:call, (:., :Base, (:quote, #QuoteNode
            :remoteref_id
          )), :f)),
    (:line, 135, :none),
    (:(=), :fstore, (:call, :RemoteChannel, :wid2)),
    (:line, 136, :none),
    (:call, :put!, :fstore, :f),
    (:line, 138, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :f), :wid1)),
    (:line, 139, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 139, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), true)),
    (:line, 140, :none),
    (:call, :remotecall_fetch, (:->, :r, (:block,
          (:line, 140, :none),
          (:call, :fetch, (:call, :fetch, :r))
        )), :wid2, :fstore),
    (:line, 141, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 141, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), false)),
    (:line, 144, :none),
    (:(=), :f, (:call, :Future, :wid1)),
    (:line, 145, :none),
    (:(=), :fid, (:call, (:., :Base, (:quote, #QuoteNode
            :remoteref_id
          )), :f)),
    (:line, 148, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 148, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), false)),
    (:line, 150, :none),
    (:call, :isready, :f),
    (:line, 152, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 152, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), true)),
    (:line, 153, :none),
    (:call, :put!, :f, (:quote, #QuoteNode
        :OK
      )),
    (:line, 154, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 154, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), false)),
    (:line, 155, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :f), (:quote, #QuoteNode
          :OK
        ))),
    (:line, 158, :none),
    (:(=), :f, (:call, :Future, :wid1)),
    (:line, 159, :none),
    (:(=), :fid, (:call, (:., :Base, (:quote, #QuoteNode
            :remoteref_id
          )), :f)),
    (:line, 161, :none),
    (:(=), :fstore, (:call, :RemoteChannel, :wid2)),
    (:line, 162, :none),
    (:call, :put!, :fstore, :f),
    (:line, 163, :none),
    (:call, :put!, :f, (:quote, #QuoteNode
        :OK
      )),
    (:line, 165, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 165, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :fid), true)),
    (:line, 167, :none),
    (:(=), :testval, (:call, :remotecall_fetch, (:->, (:tuple, :x), (:block,
            (:line, 168, :none),
            (:try, (:block,
                (:line, 169, :none),
                (:call, :put!, (:call, :fetch, :x), (:quote, #QuoteNode
                    :OK
                  )),
                (:line, 170, :none),
                (:return, 0)
              ), :e, (:block,
                (:line, 172, :none),
                (:if, (:call, :isa, :e, :RemoteException), (:block,
                    (:line, 173, :none),
                    (:return, 1)
                  ), (:block,
                    (:line, 175, :none),
                    (:return, 2)
                  ))
              ))
          )), :wid2, :fstore)),
    (:line, 179, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :testval, 1)),
    (:line, 182, :none),
    (:function, (:call, :test_remoteref_dgc, :id), (:block,
        (:line, 183, :none),
        (:(=), :rr, (:call, :RemoteChannel, :id)),
        (:line, 184, :none),
        (:call, :put!, :rr, (:quote, #QuoteNode
            :OK
          )),
        (:line, 185, :none),
        (:(=), :rrid, (:call, (:., :Base, (:quote, #QuoteNode
                :remoteref_id
              )), :rr)),
        (:line, 188, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 188, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :rrid), true)),
        (:line, 189, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :rr), (:quote, #QuoteNode
              :OK
            ))),
        (:line, 190, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 190, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :rrid), true)),
        (:line, 191, :none),
        (:call, :finalize, :rr),
        (:line, 192, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :flush_gc_msgs
            ))),
        (:line, 193, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
                  (:line, 193, :none),
                  (:block,
                    (:call, :yield),
                    (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                            :PGRP
                          )), (:quote, #QuoteNode
                          :refs
                        )), :k)
                  )
                )), :id, :rrid), false))
      )),
    (:line, 195, :none),
    (:call, :test_remoteref_dgc, :id_me),
    (:line, 196, :none),
    (:call, :test_remoteref_dgc, :id_other),
    (:line, 199, :none),
    (:(=), :wid1, (:ref, (:call, :workers), 1)),
    (:line, 200, :none),
    (:(=), :wid2, (:ref, (:call, :workers), 2)),
    (:line, 201, :none),
    (:(=), :rr, (:call, :RemoteChannel, :wid1)),
    (:line, 202, :none),
    (:(=), :rrid, (:call, (:., :Base, (:quote, #QuoteNode
            :remoteref_id
          )), :rr)),
    (:line, 204, :none),
    (:(=), :fstore, (:call, :RemoteChannel, :wid2)),
    (:line, 205, :none),
    (:call, :put!, :fstore, :rr),
    (:line, 207, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 207, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :rrid), true)),
    (:line, 208, :none),
    (:call, :finalize, :rr),
    (:line, 208, :none),
    (:call, (:., :Base, (:quote, #QuoteNode
          :flush_gc_msgs
        ))),
    (:line, 209, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 209, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :rrid), true)),
    (:line, 210, :none),
    (:call, :remotecall_fetch, (:->, :r, (:block,
          (:line, 210, :none),
          (:block,
            (:call, :finalize, (:call, :take!, :r)),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :flush_gc_msgs
                ))),
            :nothing
          )
        )), :wid2, :fstore),
    (:line, 211, :none),
    (:call, :sleep, 0.5),
    (:line, 212, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :k, (:block,
              (:line, 212, :none),
              (:call, :haskey, (:., (:., :Base, (:quote, #QuoteNode
                      :PGRP
                    )), (:quote, #QuoteNode
                    :refs
                  )), :k)
            )), :wid1, :rrid), false)),
    (:line, 214, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, (:macrocall, Symbol("@spawnat"), :id_other, (:call, :myid))), :id_other)),
    (:line, 215, :none),
    (:macrocall, Symbol("@test"), (:macrocall, Symbol("@fetchfrom"), :id_other, (:call, :(==), (:block,
            (:line, 215, :none),
            (:call, :myid)
          ), :id_other))),
    (:line, 216, :none),
    (:macrocall, Symbol("@fetch"), (:block,
        (:line, 216, :none),
        (:call, :myid)
      )),
    (:line, 219, :none),
    (:function, (:call, :test_indexing, :rr), (:block,
        (:line, 220, :none),
        (:(=), :a, (:call, :rand, 5, 5)),
        (:line, 221, :none),
        (:call, :put!, :rr, :a),
        (:line, 222, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :rr, 2, 3), (:ref, :a, 2, 3))),
        (:line, 223, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :rr), :a))
      )),
    (:line, 226, :none),
    (:call, :test_indexing, (:call, :Future)),
    (:line, 227, :none),
    (:call, :test_indexing, (:call, :Future, :id_other)),
    (:line, 228, :none),
    (:call, :test_indexing, (:call, :RemoteChannel)),
    (:line, 229, :none),
    (:call, :test_indexing, (:call, :RemoteChannel, :id_other)),
    (:line, 231, :none),
    (:(=), :dims, (:tuple, 20, 20, 20)),
    (:line, 233, :none),
    (:if, (:call, :is_linux), (:block,
        (:line, 234, :none),
        (:(=), :S, (:call, :SharedArray, :Int64, :dims)),
        (:line, 235, :none),
        (:macrocall, Symbol("@test"), (:call, :startswith, (:., :S, (:quote, #QuoteNode
                :segname
              )), "/jl")),
        (:line, 236, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :ispath, (:call, :*, "/dev/shm", (:., :S, (:quote, #QuoteNode
                    :segname
                  )))))),
        (:line, 238, :none),
        (:(=), :S, (:call, :SharedArray, (:parameters, (:kw, :pids, (:vect, :id_other))), :Int64, :dims)),
        (:line, 239, :none),
        (:macrocall, Symbol("@test"), (:call, :startswith, (:., :S, (:quote, #QuoteNode
                :segname
              )), "/jl")),
        (:line, 240, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :ispath, (:call, :*, "/dev/shm", (:., :S, (:quote, #QuoteNode
                    :segname
                  ))))))
      )),
    (:line, 247, :none),
    (:function, (:call, :check_pids_all, (:(::), :S, :SharedArray)), (:block,
        (:line, 248, :none),
        (:(=), :pidtested, (:call, :falses, (:call, :size, :S))),
        (:line, 249, :none),
        (:for, (:(=), :p, (:call, :procs, :S)), (:block,
            (:line, 250, :none),
            (:(=), :idxes_in_p, (:call, :remotecall_fetch, (:->, (:tuple, :D), (:block,
                    (:line, 251, :none),
                    (:ref, (:call, :parentindexes, (:., :D, (:quote, #QuoteNode
                            :loc_subarr_1d
                          ))), 1)
                  )), :p, :S)),
            (:line, 253, :none),
            (:macrocall, Symbol("@test"), (:call, :all, (:call, :.==, (:ref, (:call, :sdata, :S), :idxes_in_p), :p))),
            (:line, 254, :none),
            (:(=), (:ref, :pidtested, :idxes_in_p), true)
          )),
        (:line, 256, :none),
        (:macrocall, Symbol("@test"), (:call, :all, :pidtested))
      )),
    (:line, 259, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), (:(:), 1, 100), :dims)),
    (:line, 260, :none),
    (:(=), :a, (:call, :convert, :Array, :d)),
    (:line, 262, :none),
    (:(=), :partsums, (:call, (:curly, :Array, :Int), (:call, :length, (:call, :procs, :d)))),
    (:line, 263, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 264, :none),
        (:for, (:(=), (:tuple, :i, :p), (:call, :enumerate, (:call, :procs, :d))), (:block,
            (:line, 265, :none),
            (:macrocall, Symbol("@async"), (:(=), (:ref, :partsums, :i), (:call, :remotecall_fetch, (:->, (:tuple, :D), (:block,
                      (:line, 266, :none),
                      (:call, :sum, (:., :D, (:quote, #QuoteNode
                            :loc_subarr_1d
                          )))
                    )), :p, :d)))
          ))
      )),
    (:line, 270, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, :a), (:call, :sum, :partsums))),
    (:line, 272, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 273, :none),
    (:for, (:(=), :p, (:call, :procs, :d)), (:block,
        (:line, 274, :none),
        (:(=), :idxes_in_p, (:call, :remotecall_fetch, (:->, (:tuple, :D), (:block,
                (:line, 275, :none),
                (:ref, (:call, :parentindexes, (:., :D, (:quote, #QuoteNode
                        :loc_subarr_1d
                      ))), 1)
              )), :p, :d)),
        (:line, 277, :none),
        (:(=), :idxf, (:call, :first, :idxes_in_p)),
        (:line, 278, :none),
        (:(=), :idxl, (:call, :last, :idxes_in_p)),
        (:line, 279, :none),
        (:(=), (:ref, :d, :idxf), (:call, :Float64, :idxf)),
        (:line, 280, :none),
        (:(=), :rv, (:call, :remotecall_fetch, (:->, (:tuple, :D, :idxf, :idxl), (:block,
                (:line, 281, :none),
                (:call, :assert, (:call, :(==), (:ref, :D, :idxf), (:call, :Float64, :idxf))),
                (:line, 282, :none),
                (:(=), (:ref, :D, :idxl), (:call, :Float64, :idxl)),
                (:line, 283, :none),
                (:ref, :D, :idxl)
              )), :p, :d, :idxf, :idxl)),
        (:line, 285, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :idxl), :rv))
      )),
    (:line, 288, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ones, 10, 10, 10), (:call, (:., :Base, (:quote, #QuoteNode
              :shmem_fill
            )), 1.0, (:tuple, 10, 10, 10)))),
    (:line, 289, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :zeros, :Int32, 10, 10, 10), (:call, (:., :Base, (:quote, #QuoteNode
              :shmem_fill
            )), 0, (:tuple, 10, 10, 10)))),
    (:line, 291, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 292, :none),
    (:(=), :s, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 293, :none),
    (:call, :copy!, :s, :d),
    (:line, 294, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :s, :d)),
    (:line, 295, :none),
    (:(=), :s, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 296, :none),
    (:call, :copy!, :s, (:call, :sdata, :d)),
    (:line, 297, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :s, :d)),
    (:line, 298, :none),
    (:(=), :a, (:call, :rand, :dims)),
    (:line, 299, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sdata, :a), :a)),
    (:line, 301, :none),
    (:(=), :d, (:call, :SharedArray, :Int, :dims, (:kw, :init, (:->, :D, (:block,
              (:line, 301, :none),
              (:call, :fill!, (:., :D, (:quote, #QuoteNode
                    :loc_subarr_1d
                  )), (:call, :myid))
            ))))),
    (:line, 302, :none),
    (:for, (:(=), :p, (:call, :procs, :d)), (:block,
        (:line, 303, :none),
        (:(=), :idxes_in_p, (:call, :remotecall_fetch, (:->, (:tuple, :D), (:block,
                (:line, 304, :none),
                (:ref, (:call, :parentindexes, (:., :D, (:quote, #QuoteNode
                        :loc_subarr_1d
                      ))), 1)
              )), :p, :d)),
        (:line, 306, :none),
        (:(=), :idxf, (:call, :first, :idxes_in_p)),
        (:line, 307, :none),
        (:(=), :idxl, (:call, :last, :idxes_in_p)),
        (:line, 308, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :idxf), :p)),
        (:line, 309, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :idxl), :p))
      )),
    (:line, 312, :none),
    (:(=), :d, (:macrocall, Symbol("@inferred"), (:call, :SharedArray, :Float64, (:tuple, 2, 3)))),
    (:line, 313, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:ref, :d, :(:), 2), (:curly, :Vector, :Float64))),
    (:line, 318, :none),
    (:(=), :fn, (:call, :tempname)),
    (:line, 319, :none),
    (:call, :write, :fn, (:(:), 1, 30)),
    (:line, 320, :none),
    (:(=), :sz, (:tuple, 6, 5)),
    (:line, 321, :none),
    (:(=), :Atrue, (:call, :reshape, (:(:), 1, 30), :sz)),
    (:line, 323, :none),
    (:(=), :S, (:macrocall, Symbol("@inferred"), (:call, :SharedArray, :fn, :Int, :sz))),
    (:line, 324, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :S, :Atrue)),
    (:line, 325, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:call, :length, (:call, :procs, :S)), 1)),
    (:line, 326, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 327, :none),
        (:for, (:(=), :p, (:call, :procs, :S)), (:block,
            (:line, 328, :none),
            (:macrocall, Symbol("@async"), (:call, :remotecall_wait, (:->, (:tuple, :D), (:block,
                    (:line, 329, :none),
                    (:call, :fill!, (:., :D, (:quote, #QuoteNode
                          :loc_subarr_1d
                        )), (:call, :myid))
                  )), :p, :S))
          ))
      )),
    (:line, 333, :none),
    (:call, :check_pids_all, :S),
    (:line, 335, :none),
    (:(=), :filedata, (:call, :similar, :Atrue)),
    (:line, 336, :none),
    (:call, :read!, :fn, :filedata),
    (:line, 337, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :filedata, (:call, :sdata, :S))),
    (:line, 338, :none),
    (:call, :finalize, :S),
    (:line, 341, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :SharedArray, :fn, :Int, :sz, (:kw, :mode, "w"))),
    (:line, 344, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :SharedArray, (:call, :joinpath, (:call, :tempdir), (:call, :randstring)), :Int, :sz, (:kw, :mode, "r"))),
    (:line, 347, :none),
    (:(=), :fn2, (:call, :tempname)),
    (:line, 348, :none),
    (:(=), :S, (:call, :SharedArray, :fn2, :Int, :sz, (:kw, :init, (:->, :D, (:block,
              (:line, 348, :none),
              (:(=), (:ref, :D, (:call, :localindexes, :D)), (:call, :myid))
            ))))),
    (:line, 349, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :S, :filedata)),
    (:line, 350, :none),
    (:(=), :filedata2, (:call, :similar, :Atrue)),
    (:line, 351, :none),
    (:call, :read!, :fn2, :filedata2),
    (:line, 352, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :filedata, :filedata2)),
    (:line, 353, :none),
    (:call, :finalize, :S),
    (:line, 356, :none),
    (:(=), :fn3, (:call, :tempname)),
    (:line, 357, :none),
    (:call, :write, :fn3, (:call, :ones, :UInt8, 4)),
    (:line, 358, :none),
    (:(=), :S, (:call, :SharedArray, :fn3, :UInt8, :sz, 4, (:kw, :mode, "a+"), (:kw, :init, (:->, :D, (:block,
              (:line, 358, :none),
              (:(=), (:ref, :D, (:call, :localindexes, :D)), 0x02)
            ))))),
    (:line, 359, :none),
    (:(=), :len, (:call, :+, (:call, :prod, :sz), 4)),
    (:line, 360, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :filesize, :fn3), :len)),
    (:line, 361, :none),
    (:(=), :filedata, (:call, (:curly, :Array, :UInt8), :len)),
    (:line, 362, :none),
    (:call, :read!, :fn3, :filedata),
    (:line, 363, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :.==, (:ref, :filedata, (:(:), 1, 4)), 0x01))),
    (:line, 364, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :.==, (:ref, :filedata, (:(:), 5, :end)), 0x02))),
    (:line, 365, :none),
    (:call, :finalize, :S),
    (:line, 368, :none),
    (:(=), :S, :nothing),
    (:line, 369, :none),
    (:macrocall, Symbol("@everywhere"), (:call, :gc)),
    (:line, 370, :none),
    (:macrocall, Symbol("@everywhere"), (:call, :gc)),
    (:line, 371, :none),
    (:macrocall, Symbol("@everywhere"), (:call, :gc)),
    (:line, 372, :none),
    (:call, :rm, :fn),
    (:line, 372, :none),
    (:call, :rm, :fn2),
    (:line, 372, :none),
    (:call, :rm, :fn3),
    (:line, 377, :none),
    (:(=), :S, (:macrocall, Symbol("@inferred"), (:call, (:curly, :SharedArray, :Int), (:tuple, 1, 2, 3)))),
    (:line, 378, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :S), (:tuple, 1, 2, 3))),
    (:line, 379, :none),
    (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, :S), (:curly, :SharedArray, :Int))),
    (:line, 380, :none),
    (:(=), :S, (:macrocall, Symbol("@inferred"), (:call, (:curly, :SharedArray, :Int), 2))),
    (:line, 381, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :S), (:tuple, 2))),
    (:line, 382, :none),
    (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, :S), (:curly, :SharedArray, :Int))),
    (:line, 383, :none),
    (:(=), :S, (:macrocall, Symbol("@inferred"), (:call, (:curly, :SharedArray, :Int), 1, 2))),
    (:line, 384, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :S), (:tuple, 1, 2))),
    (:line, 385, :none),
    (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, :S), (:curly, :SharedArray, :Int))),
    (:line, 386, :none),
    (:(=), :S, (:macrocall, Symbol("@inferred"), (:call, (:curly, :SharedArray, :Int), 1, 2, 3))),
    (:line, 387, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :S), (:tuple, 1, 2, 3))),
    (:line, 388, :none),
    (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, :S), (:curly, :SharedArray, :Int))),
    (:line, 392, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_fill
          )), 1.0, (:tuple, 10, 10, 10))),
    (:line, 393, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ones, 100, 10), (:call, :reshape, :d, (:tuple, 100, 10)))),
    (:line, 394, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_fill
          )), 1.0, (:tuple, 10, 10, 10))),
    (:line, 395, :none),
    (:macrocall, Symbol("@test_throws"), :DimensionMismatch, (:call, :reshape, :d, (:tuple, 50))),
    (:line, 398, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 399, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :rand!, :d)), :dims)),
    (:line, 400, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_fill
          )), 1.0, :dims)),
    (:line, 401, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :randn!, :d)), :dims)),
    (:line, 404, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 405, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :similar, :d, :Complex128)), :dims)),
    (:line, 406, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :similar, :d, :dims)), :dims)),
    (:line, 409, :none),
    (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
            :shmem_rand
          )), :dims)),
    (:line, 410, :none),
    (:(=), :s, (:call, :copy, (:call, :sdata, :d))),
    (:line, 411, :none),
    (:(=), :ds, (:call, :deepcopy, :d)),
    (:line, 412, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :ds, :d)),
    (:line, 413, :none),
    (:(=), :pids_d, (:call, :procs, :d)),
    (:line, 414, :none),
    (:call, :remotecall_fetch, :setindex!, (:ref, :pids_d, (:call, :findfirst, (:->, :id, (:block,
              (:line, 414, :none),
              (:call, :(!=), :id, (:call, :myid))
            )), :pids_d)), :d, 1.0, (:(:), 1, 10)),
    (:line, 415, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), :ds, :d)),
    (:line, 416, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), :s, :d)),
    (:line, 417, :none),
    (:call, :copy!, :d, :s),
    (:line, 418, :none),
    (:macrocall, Symbol("@everywhere"), (:(=), (:call, :setid!, :A), (:block,
          (:line, 418, :none),
          (:(=), (:ref, :A, (:call, :localindexes, :A)), (:call, :myid))
        ))),
    (:line, 419, :none),
    (:macrocall, Symbol("@sync"), (:for, (:(=), :p, (:call, :procs, :ds)), (:block,
          (:line, 420, :none),
          (:macrocall, Symbol("@async"), (:call, :remotecall_wait, :setid!, :p, :ds))
        ))),
    (:line, 422, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :d, :s)),
    (:line, 423, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), :ds, :s)),
    (:line, 424, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :ds), (:call, :first, (:call, :procs, :ds)))),
    (:line, 425, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :last, :ds), (:call, :last, (:call, :procs, :ds)))),
    (:line, 430, :none),
    (:(=), :a, (:ref, :d, (:(:), 1, 5))),
    (:line, 431, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :d, (:(:), -1, 5))),
    (:line, 432, :none),
    (:(=), :a, (:ref, :d, 1, 1, (:(:), 1, 3, :end))),
    (:line, 433, :none),
    (:(=), (:ref, :d, (:(:), 2, 4)), 7),
    (:line, 434, :none),
    (:(=), (:ref, :d, 5, (:(:), 1, 2, 4), 8), 19),
    (:line, 436, :none),
    (:(=), :AA, (:call, :rand, 4, 2)),
    (:line, 437, :none),
    (:(=), :A, (:macrocall, Symbol("@inferred"), (:call, :convert, :SharedArray, :AA))),
    (:line, 438, :none),
    (:(=), :B, (:macrocall, Symbol("@inferred"), (:call, :convert, :SharedArray, (:', :AA)))),
    (:line, 439, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :*, :B, :A), (:call, :*, (:call, :ctranspose, :AA), :AA))),
    (:line, 441, :none),
    (:(=), :d, (:call, :SharedArray, (:parameters, (:kw, :init, (:->, :D, (:block,
                (:line, 441, :none),
                (:call, :fill!, (:., :D, (:quote, #QuoteNode
                      :loc_subarr_1d
                    )), (:call, :myid))
              ))), (:kw, :pids, (:vect, :id_me, :id_other))), :Int64, (:tuple, 10, 10))),
    (:line, 442, :none),
    (:(=), :d2, (:call, :map, (:->, :x, (:block,
            (:line, 442, :none),
            1
          )), :d)),
    (:line, 443, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reduce, :+, :d2), 100)),
    (:line, 445, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reduce, :+, :d), (:call, :+, (:call, :*, 50, :id_me), (:call, :*, 50, :id_other)))),
    (:line, 446, :none),
    (:call, :map!, (:->, :x, (:block,
          (:line, 446, :none),
          1
        )), :d),
    (:line, 447, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reduce, :+, :d), 100)),
    (:line, 449, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fill!, :d, 1), (:call, :ones, 10, 10))),
    (:line, 450, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fill!, :d, 2.0), (:call, :fill, 2, 10, 10))),
    (:line, 451, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :(:)), (:call, :fill, 2, 100))),
    (:line, 452, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :(:), 1), (:call, :fill, 2, 10))),
    (:line, 453, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, 1, :(:)), (:call, :fill, 2, 10))),
    (:line, 456, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 2.0, (:call, :remotecall_fetch, (:->, :D, (:block,
              (:line, 456, :none),
              (:ref, :D, 2)
            )), :id_other, (:call, (:., :Base, (:quote, #QuoteNode
                :shmem_fill
              )), (:parameters, (:kw, :pids, (:vect, :id_me, :id_other))), 2.0, 2)))),
    (:line, 457, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 3.0, (:call, :remotecall_fetch, (:->, :D, (:block,
              (:line, 457, :none),
              (:ref, :D, 1)
            )), :id_other, (:call, (:., :Base, (:quote, #QuoteNode
                :shmem_fill
              )), (:parameters, (:kw, :pids, (:vect, :id_me, :id_other))), 3.0, 1)))),
    (:line, 460, :none),
    (:macrocall, Symbol("@everywhere"), (:type, false, :ShmemFoo, (:block,
          (:line, 460, :none)
        ))),
    (:line, 461, :none),
    (:for, (:(=), :T, (:vect, :Void, :ShmemFoo)), (:block,
        (:line, 462, :none),
        (:(=), :s, (:macrocall, Symbol("@inferred"), (:call, :SharedArray, :T, 10))),
        (:line, 463, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :T), (:call, :remotecall_fetch, (:->, :x, (:block,
                  (:line, 463, :none),
                  (:ref, :x, 3)
                )), (:ref, (:call, :workers), 1), :s)))
      )),
    (:line, 467, :none),
    (:(=), :d, (:call, :SharedArray, :Int, 10)),
    (:line, 468, :none),
    (:macrocall, Symbol("@sync"), (:macrocall, Symbol("@parallel"), (:for, (:(=), :i, (:(:), 1, 10)), (:block,
            (:line, 469, :none),
            (:(=), (:ref, :d, :i), :i)
          )))),
    (:line, 472, :none),
    (:for, (:(=), (:tuple, :x, :i), (:call, :enumerate, :d)), (:block,
        (:line, 473, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :x, :i))
      )),
    (:line, 477, :none),
    (:(=), :sd, (:call, :SharedArray, :Int, 10)),
    (:line, 478, :none),
    (:(=), :se, (:call, :SharedArray, :Int, 10)),
    (:line, 479, :none),
    (:macrocall, Symbol("@sync"), (:macrocall, Symbol("@parallel"), (:for, (:(=), :i, (:(:), 1, 10)), (:block,
            (:line, 480, :none),
            (:(=), (:ref, :sd, :i), :i),
            (:line, 481, :none),
            (:(=), (:ref, :se, :i), :i)
          )))),
    (:line, 483, :none),
    (:(=), :sc, (:call, :complex, :sd, :se)),
    (:line, 484, :none),
    (:for, (:(=), (:tuple, :x, :i), (:call, :enumerate, :sc)), (:block,
        (:line, 485, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, (:call, :complex, :x, :x)))
      )),
    (:line, 489, :none),
    (:function, (:call, :finalize_and_test, :r), (:block,
        (:line, 490, :none),
        (:call, :finalize, :r),
        (:line, 491, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :fetch, :r))
      )),
    (:line, 494, :none),
    (:for, (:(=), :id, (:vect, :id_me, :id_other)), (:block,
        (:line, 495, :none),
        (:call, :finalize_and_test, (:call, :Future, :id)),
        (:line, 496, :none),
        (:call, :finalize_and_test, (:block,
            (:(=), :r, (:call, :Future, :id)),
            (:call, :put!, :r, 1),
            :r
          )),
        (:line, 497, :none),
        (:call, :finalize_and_test, (:call, :RemoteChannel, :id)),
        (:line, 498, :none),
        (:call, :finalize_and_test, (:block,
            (:(=), :r, (:call, :RemoteChannel, :id)),
            (:call, :put!, :r, 1),
            :r
          ))
      )),
    (:line, 501, :none),
    (:(=), :d, (:call, :SharedArray, :Int, 10)),
    (:line, 502, :none),
    (:call, :finalize, :d),
    (:line, 503, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :d, 1)),
    (:line, 508, :none),
    (:(=), :ids, (:macrocall, Symbol("@parallel"), (:->, (:tuple, :a, :b), (:block,
            (:line, 508, :none),
            (:vcat, :a, :b)
          )), (:for, (:(=), :i, (:(:), 1, 7)), (:block,
            (:line, 508, :none),
            (:call, :myid)
          )))),
    (:line, 509, :none),
    (:(=), :workloads, (:typed_comprehension, :Int, (:generator, (:call, :sum, (:call, :.==, :ids, :i)), (:(=), :i, (:(:), 2, (:call, :nprocs)))))),
    (:line, 510, :none),
    (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :-, (:call, :maximum, :workloads), (:call, :minimum, :workloads)), 1)),
    (:line, 513, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:macrocall, Symbol("@parallel"), :+, (:for, (:(=), :i, (:(:), 1, 2)), (:block,
              (:line, 513, :none),
              :i
            ))), 3)),
    (:line, 516, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 517, :none),
        (:(=), :rr1, (:call, :Channel)),
        (:line, 518, :none),
        (:(=), :rr2, (:call, :Channel)),
        (:line, 519, :none),
        (:(=), :rr3, (:call, :Channel)),
        (:line, 521, :none),
        (:(=), (:call, :callback), (:block,
            (:line, 521, :none),
            (:call, :all, (:call, :map, :isready, (:vect, :rr1, :rr2, :rr3)))
          )),
        (:line, 523, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :callback))),
        (:line, 524, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :timedwait, :callback, 0.0), (:quote, #QuoteNode
              :timed_out
            ))),
        (:line, 526, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 526, :none),
            (:call, :sleep, 0.5),
            (:line, 526, :none),
            (:call, :put!, :rr1, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 527, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 527, :none),
            (:call, :sleep, 1.0),
            (:line, 527, :none),
            (:call, :put!, :rr2, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 528, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 528, :none),
            (:call, :sleep, 2.0),
            (:line, 528, :none),
            (:call, :put!, :rr3, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 530, :none),
        (:call, :tic),
        (:line, 531, :none),
        (:call, :timedwait, :callback, 1.0),
        (:line, 532, :none),
        (:(=), :et, (:call, :toq)),
        (:line, 534, :none),
        (:try, (:block,
            (:line, 535, :none),
            (:macrocall, Symbol("@test"), (:&&, (:call, :(>=), :et, 1.0), (:call, :(<=), :et, 1.5))),
            (:line, 536, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isready, :rr3)))
          ), false, (:block,
            (:line, 538, :none),
            (:call, :warn, (:string, "timedwait tests delayed. et=", :et, ", isready(rr3)=", (:call, :isready, :rr3)))
          )),
        (:line, 540, :none),
        (:macrocall, Symbol("@test"), (:call, :isready, :rr1))
      )),
    (:line, 544, :none),
    (:function, (:call, :testcpt), (:block,
        (:line, 545, :none),
        (:(=), :c, (:call, :Channel)),
        (:line, 546, :none),
        (:(=), :size, 0),
        (:line, 547, :none),
        (:(=), (:call, :inc), (:block,
            (:line, 547, :none),
            (:+=, :size, 1)
          )),
        (:line, 548, :none),
        (:(=), (:call, :dec), (:block,
            (:line, 548, :none),
            (:-=, :size, 1)
          )),
        (:line, 549, :none),
        (:macrocall, Symbol("@sync"), (:for, (:(=), :i, (:(:), 1, (:call, :^, 10, 4))), (:block,
              (:line, 550, :none),
              (:macrocall, Symbol("@async"), (:block,
                  (:call, :sleep, (:call, :rand)),
                  (:call, :put!, :c, :i),
                  (:call, :inc)
                )),
              (:line, 551, :none),
              (:macrocall, Symbol("@async"), (:block,
                  (:call, :sleep, (:call, :rand)),
                  (:call, :take!, :c),
                  (:call, :dec)
                ))
            ))),
        (:line, 553, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :size, 0))
      )),
    (:line, 555, :none),
    (:call, :testcpt),
    (:line, 559, :none),
    (:(=), :c, (:call, :Channel)),
    (:line, 560, :none),
    (:(=), :results, (:vect,)),
    (:line, 561, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 562, :none),
        (:for, (:(=), :i, (:(:), 1, 20)), (:block,
            (:line, 563, :none),
            (:macrocall, Symbol("@async"), (:for, (:(=), :i, :c), (:block,
                  (:line, 564, :none),
                  (:call, :push!, :results, :i)
                )))
          )),
        (:line, 567, :none),
        (:call, :sleep, 1.0),
        (:line, 568, :none),
        (:for, (:(=), :i, (:(:), 1, 5)), (:block,
            (:line, 569, :none),
            (:call, :put!, :c, :i)
          )),
        (:line, 571, :none),
        (:call, :close, :c)
      )),
    (:line, 573, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, :results), 15)),
    (:line, 575, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :sleep, -1)),
    (:line, 576, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :timedwait, (:->, (:tuple,), (:block,
            (:line, 576, :none),
            false
          )), 0.1, (:kw, :pollint, -0.5))),
    (:line, 579, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:ref, (:call, :workers), (:(:), 1, 2))), (:call, :sort, (:call, :unique, (:call, :pmap, (:call, :WorkerPool, (:ref, (:call, :workers), (:(:), 1, 2))), (:->, :x, (:block,
                  (:line, 579, :none),
                  (:block,
                    (:call, :sleep, 0.1),
                    (:call, :myid)
                  )
                )), (:(:), 1, 10)))))),
    (:line, 583, :none),
    (:(=), :a, (:call, :ones, (:call, :^, 10, 6))),
    (:line, 584, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :a, (:call, :remotecall_fetch, (:->, :x, (:block,
              (:line, 584, :none),
              :x
            )), :id_other, :a))),
    (:line, 587, :none),
    (:(=), :s, (:comprehension, (:generator, (:call, :randstring), (:(=), :x, (:(:), 1, (:call, :^, 10, 5)))))),
    (:line, 588, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :s, (:call, :remotecall_fetch, (:->, :x, (:block,
              (:line, 588, :none),
              :x
            )), :id_other, :s))),
    (:line, 591, :none),
    (:(=), :num_small_requests, 10000),
    (:line, 592, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fill, :id_other, :num_small_requests), (:comprehension, (:generator, (:call, :remotecall_fetch, :myid, :id_other), (:(=), :i, (:(:), 1, :num_small_requests)))))),
    (:line, 595, :none),
    (:(=), :ntasks, 10),
    (:line, 596, :none),
    (:(=), :rr_list, (:comprehension, (:generator, (:call, :Channel), (:(=), :x, (:(:), 1, :ntasks))))),
    (:line, 597, :none),
    (:(=), :a, (:call, :ones, (:call, :*, 2, (:call, :^, 10, 5)))),
    (:line, 598, :none),
    (:for, (:(=), :rr, :rr_list), (:block,
        (:line, 599, :none),
        (:macrocall, Symbol("@async"), (:let, (:block,
              (:line, 600, :none),
              (:try, (:block,
                  (:line, 601, :none),
                  (:for, (:(=), :i, (:(:), 1, 10)), (:block,
                      (:line, 602, :none),
                      (:macrocall, Symbol("@test"), (:call, :(==), :a, (:call, :remotecall_fetch, (:->, :x, (:block,
                                (:line, 602, :none),
                                :x
                              )), :id_other, :a))),
                      (:line, 603, :none),
                      (:call, :yield)
                    )),
                  (:line, 605, :none),
                  (:call, :put!, :rr, (:quote, #QuoteNode
                      :OK
                    ))
                ), false, (:block,
                  (:line, 607, :none),
                  (:call, :put!, :rr, (:quote, #QuoteNode
                      :ERROR
                    ))
                ))
            ), (:(=), :rr, :rr)))
      )),
    (:line, 612, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:generator, (:call, :fetch, :rr), (:(=), :rr, :rr_list))), (:comprehension, (:generator, (:quote, #QuoteNode
              :OK
            ), (:(=), :x, (:(:), 1, :ntasks)))))),
    (:line, 614, :none),
    (:function, (:call, :test_channel, :c), (:block,
        (:line, 615, :none),
        (:call, :put!, :c, 1),
        (:line, 616, :none),
        (:call, :put!, :c, "Hello"),
        (:line, 617, :none),
        (:call, :put!, :c, 5.0),
        (:line, 619, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :c), true)),
        (:line, 620, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :c), 1)),
        (:line, 621, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :c), 1)),
        (:line, 622, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :c), 1)),
        (:line, 623, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :c), "Hello")),
        (:line, 624, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, :c), 5.0)),
        (:line, 625, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :c), 5.0)),
        (:line, 626, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :c), false)),
        (:line, 627, :none),
        (:call, :close, :c)
      )),
    (:line, 630, :none),
    (:call, :test_channel, (:call, :Channel, 10)),
    (:line, 631, :none),
    (:call, :test_channel, (:call, :RemoteChannel, (:->, (:tuple,), (:block,
            (:line, 631, :none),
            (:call, :Channel, 10)
          )))),
    (:line, 633, :none),
    (:(=), :c, (:call, (:curly, :Channel, :Int), 1)),
    (:line, 634, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :put!, :c, "Hello")),
    (:line, 637, :none),
    (:function, (:call, :test_iteration, :in_c, :out_c), (:block,
        (:line, 638, :none),
        (:(=), :t, (:macrocall, Symbol("@schedule"), (:for, (:(=), :v, :in_c), (:block,
                (:line, 639, :none),
                (:call, :put!, :out_c, :v)
              )))),
        (:line, 642, :none),
        (:&&, (:call, :isa, :in_c, :Channel), (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isopen, :in_c), true))),
        (:line, 643, :none),
        (:call, :put!, :in_c, 1),
        (:line, 644, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :out_c), 1)),
        (:line, 645, :none),
        (:call, :put!, :in_c, "Hello"),
        (:line, 646, :none),
        (:call, :close, :in_c),
        (:line, 647, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :out_c), "Hello")),
        (:line, 648, :none),
        (:&&, (:call, :isa, :in_c, :Channel), (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isopen, :in_c), false))),
        (:line, 649, :none),
        (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :put!, :in_c, (:quote, #QuoteNode
              :foo
            ))),
        (:line, 650, :none),
        (:call, :yield),
        (:line, 651, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :istaskdone, :t), true))
      )),
    (:line, 654, :none),
    (:call, :test_iteration, (:call, :Channel, 10), (:call, :Channel, 10)),
    (:line, 656, :none),
    (:macrocall, Symbol("@test_throws"), :CompositeException, (:macrocall, Symbol("@sync"), (:macrocall, Symbol("@async"), (:call, :error, "oops")))),
    (:line, 657, :none),
    (:try, (:block,
        (:line, 658, :none),
        (:macrocall, Symbol("@sync"), (:block,
            (:line, 659, :none),
            (:for, (:(=), :i, (:(:), 1, 5)), (:block,
                (:line, 660, :none),
                (:macrocall, Symbol("@async"), (:call, :error, :i))
              ))
          )),
        (:line, 663, :none),
        (:call, :error, "unexpected")
      ), :ex, (:block,
        (:line, 665, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :ex), :CompositeException)),
        (:line, 666, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :ex), 5)),
        (:line, 667, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:ref, (:., :ex, (:quote, #QuoteNode
                    :exceptions
                  )), 1)), :CapturedException)),
        (:line, 668, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:., (:ref, (:., :ex, (:quote, #QuoteNode
                      :exceptions
                    )), 1), (:quote, #QuoteNode
                  :ex
                ))), :ErrorException)),
        (:line, 669, :none),
        (:(=), :errors, (:call, :map, (:->, :x, (:block,
                (:line, 669, :none),
                (:., (:., :x, (:quote, #QuoteNode
                      :ex
                    )), (:quote, #QuoteNode
                    :msg
                  ))
              )), (:., :ex, (:quote, #QuoteNode
                :exceptions
              )))),
        (:line, 670, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:(:), 1, 5)), (:call, :sort, (:call, :map, (:->, :x, (:block,
                    (:line, 670, :none),
                    (:call, :parse, :Int, :x)
                  )), :errors))))
      )),
    (:line, 673, :none),
    (:function, (:call, :test_remoteexception_thrown, :expr), (:block,
        (:line, 674, :none),
        (:try, (:block,
            (:line, 675, :none),
            (:call, :expr),
            (:line, 676, :none),
            (:call, :error, "unexpected")
          ), :ex, (:block,
            (:line, 678, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :ex), :RemoteException)),
            (:line, 679, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:., :ex, (:quote, #QuoteNode
                      :captured
                    ))), :CapturedException)),
            (:line, 680, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:., (:., :ex, (:quote, #QuoteNode
                        :captured
                      )), (:quote, #QuoteNode
                      :ex
                    ))), :ErrorException)),
            (:line, 681, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., (:., (:., :ex, (:quote, #QuoteNode
                        :captured
                      )), (:quote, #QuoteNode
                      :ex
                    )), (:quote, #QuoteNode
                    :msg
                  )), "foobar"))
          ))
      )),
    (:line, 685, :none),
    (:for, (:(=), :id, (:vect, :id_other, :id_me)), (:block,
        (:line, 686, :none),
        (:call, :test_remoteexception_thrown, (:->, (:tuple,), (:block,
              (:line, 687, :none),
              (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                    (:line, 688, :none),
                    (:call, :throw, (:call, :ErrorException, "foobar"))
                  )), :id)
            ))),
        (:line, 691, :none),
        (:call, :test_remoteexception_thrown, (:->, (:tuple,), (:block,
              (:line, 692, :none),
              (:call, :remotecall_wait, (:->, (:tuple,), (:block,
                    (:line, 693, :none),
                    (:call, :throw, (:call, :ErrorException, "foobar"))
                  )), :id)
            ))),
        (:line, 696, :none),
        (:call, :test_remoteexception_thrown, (:->, (:tuple,), (:block,
              (:line, 697, :none),
              (:call, :wait, (:call, :remotecall, (:->, (:tuple,), (:block,
                      (:line, 698, :none),
                      (:call, :throw, (:call, :ErrorException, "foobar"))
                    )), :id))
            )))
      )),
    (:line, 704, :none),
    (:let, (:block,
        (:line, 705, :none),
        (:try, (:block,
            (:line, 706, :none),
            (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                  (:line, 707, :none),
                  (:macrocall, Symbol("@eval"), (:module, true, :AModuleLocalToOther, (:block,
                        (:line, 707, :none),
                        (:line, 708, :none),
                        (:(=), (:call, :foo), (:block,
                            (:line, 708, :none),
                            (:call, :throw, (:call, :ErrorException, "A.error"))
                          )),
                        (:line, 709, :none),
                        (:call, :foo)
                      )))
                )), :id_other)
          ), :ex, (:block,
            (:line, 713, :none)
          )),
        (:line, 714, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., (:(::), :ex, :RemoteException), (:quote, #QuoteNode
                :pid
              )), :id_other)),
        (:line, 715, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., (:(::), (:., (:(::), (:., :ex, (:quote, #QuoteNode
                        :captured
                      )), :CapturedException), (:quote, #QuoteNode
                    :ex
                  )), :ErrorException), (:quote, #QuoteNode
                :msg
              )), "A.error")),
        (:line, 716, :none),
        (:(=), :bt, (:(::), (:., (:., :ex, (:quote, #QuoteNode
                  :captured
                )), (:quote, #QuoteNode
                :processed_bt
              )), (:curly, :Array, :Any, 1))),
        (:line, 717, :none),
        (:macrocall, Symbol("@test"), (:call, :>, (:call, :length, :bt), 1)),
        (:line, 718, :none),
        (:(=), (:tuple, :frame, :repeated), (:(::), (:ref, :bt, 1), (:curly, :Tuple, :StackFrame, :Int))),
        (:line, 719, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :frame, (:quote, #QuoteNode
                :func
              )), (:quote, #QuoteNode
              :foo
            ))),
        (:line, 720, :none),
        (:macrocall, Symbol("@test"), (:call, :isnull, (:., :frame, (:quote, #QuoteNode
                :linfo
              )))),
        (:line, 721, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :repeated, 1))
      ), :ex),
    (:line, 726, :none),
    (:function, (:call, :unmangle_exception, :e), (:block,
        (:line, 727, :none),
        (:while, (:call, :any, (:->, :x, (:block,
                (:line, 727, :none),
                (:call, :isa, :e, :x)
              )), (:vect, :CompositeException, :RemoteException, :CapturedException)), (:block,
            (:line, 728, :none),
            (:if, (:call, :isa, :e, :CompositeException), (:block,
                (:line, 729, :none),
                (:(=), :e, (:., (:ref, (:., :e, (:quote, #QuoteNode
                          :exceptions
                        )), 1), (:quote, #QuoteNode
                      :ex
                    )))
              )),
            (:line, 731, :none),
            (:if, (:call, :isa, :e, :RemoteException), (:block,
                (:line, 732, :none),
                (:(=), :e, (:., (:., :e, (:quote, #QuoteNode
                        :captured
                      )), (:quote, #QuoteNode
                      :ex
                    )))
              )),
            (:line, 734, :none),
            (:if, (:call, :isa, :e, :CapturedException), (:block,
                (:line, 735, :none),
                (:(=), :e, (:., :e, (:quote, #QuoteNode
                      :ex
                    )))
              ))
          )),
        (:line, 738, :none),
        (:return, :e)
      )),
    (:line, 742, :none),
    (:(=), :pmap_args, (:vect, (:tuple, (:quote, #QuoteNode
            :distributed
          ), (:vect, (:quote, #QuoteNode
              :default
            ), false)), (:tuple, (:quote, #QuoteNode
            :batch_size
          ), (:vect, (:quote, #QuoteNode
              :default
            ), 2)), (:tuple, (:quote, #QuoteNode
            :on_error
          ), (:vect, (:quote, #QuoteNode
              :default
            ), (:->, :e, (:block,
                (:line, 745, :none),
                (:call, :(==), (:., (:call, :unmangle_exception, :e), (:quote, #QuoteNode
                      :msg
                    )), "foobar")
              )))), (:tuple, (:quote, #QuoteNode
            :retry_on
          ), (:vect, (:quote, #QuoteNode
              :default
            ), (:->, :e, (:block,
                (:line, 746, :none),
                (:call, :(==), (:., (:call, :unmangle_exception, :e), (:quote, #QuoteNode
                      :msg
                    )), "foobar")
              )))), (:tuple, (:quote, #QuoteNode
            :retry_n
          ), (:vect, (:quote, #QuoteNode
              :default
            ), (:call, :-, (:call, :typemax, :Int), 1))), (:tuple, (:quote, #QuoteNode
            :retry_max_delay
          ), (:vect, 0, 0.001)))),
    (:line, 751, :none),
    (:(=), :kwdict, (:call, :Dict)),
    (:line, 752, :none),
    (:function, (:call, :walk_args, :i), (:block,
        (:line, 753, :none),
        (:if, (:call, :>, :i, (:call, :length, :pmap_args)), (:block,
            (:line, 754, :none),
            (:(=), :kwargs, (:vect,)),
            (:line, 755, :none),
            (:for, (:(=), (:tuple, :k, :v), :kwdict), (:block,
                (:line, 756, :none),
                (:if, (:call, :(!==), :v, (:quote, #QuoteNode
                      :default
                    )), (:block,
                    (:line, 757, :none),
                    (:call, :push!, :kwargs, (:tuple, :k, :v))
                  ))
              )),
            (:line, 761, :none),
            (:(=), :data, (:vect, (:..., (:(:), 1, 100)))),
            (:line, 763, :none),
            (:(=), :testw, (:if, (:call, :(===), (:ref, :kwdict, (:quote, #QuoteNode
                      :distributed
                    )), false), (:vect, 1), (:call, :workers))),
            (:line, 765, :none),
            (:if, (:&&, (:call, :(===), (:ref, :kwdict, (:quote, #QuoteNode
                      :on_error
                    )), (:quote, #QuoteNode
                    :default
                  )), (:call, :(===), (:ref, :kwdict, (:quote, #QuoteNode
                      :retry_n
                    )), (:quote, #QuoteNode
                    :default
                  ))), (:block,
                (:line, 766, :none),
                (:(=), :mapf, (:->, :x, (:block,
                      (:line, 766, :none),
                      (:tuple, (:call, :*, :x, 2), (:call, :myid))
                    ))),
                (:line, 767, :none),
                (:(=), :results_test, (:->, :pmap_res, (:block,
                      (:line, 767, :none),
                      (:block,
                        (:line, 768, :none),
                        (:(=), :results, (:comprehension, (:generator, (:ref, :x, 1), (:(=), :x, :pmap_res)))),
                        (:line, 769, :none),
                        (:(=), :pids, (:comprehension, (:generator, (:ref, :x, 2), (:(=), :x, :pmap_res)))),
                        (:line, 770, :none),
                        (:macrocall, Symbol("@test"), (:call, :(==), :results, (:vect, (:..., (:(:), 2, 2, 200))))),
                        (:line, 771, :none),
                        (:for, (:(=), :p, :testw), (:block,
                            (:line, 772, :none),
                            (:macrocall, Symbol("@test"), (:call, :in, :p, :pids))
                          ))
                      )
                    )))
              ), (:block,
                (:line, 775, :none),
                (:if, (:call, :(!==), (:ref, :kwdict, (:quote, #QuoteNode
                        :retry_n
                      )), (:quote, #QuoteNode
                      :default
                    )), (:block,
                    (:line, 776, :none),
                    (:(=), :mapf, (:->, :x, (:block,
                          (:line, 776, :none),
                          (:if, (:call, :iseven, (:call, :myid)), (:call, :error, "foobar"), (:tuple, (:call, :*, :x, 2), (:call, :myid)))
                        ))),
                    (:line, 777, :none),
                    (:(=), :results_test, (:->, :pmap_res, (:block,
                          (:line, 777, :none),
                          (:block,
                            (:line, 778, :none),
                            (:(=), :results, (:comprehension, (:generator, (:ref, :x, 1), (:(=), :x, :pmap_res)))),
                            (:line, 779, :none),
                            (:(=), :pids, (:comprehension, (:generator, (:ref, :x, 2), (:(=), :x, :pmap_res)))),
                            (:line, 780, :none),
                            (:macrocall, Symbol("@test"), (:call, :(==), :results, (:vect, (:..., (:(:), 2, 2, 200))))),
                            (:line, 781, :none),
                            (:for, (:(=), :p, :testw), (:block,
                                (:line, 782, :none),
                                (:if, (:call, :isodd, :p), (:block,
                                    (:line, 783, :none),
                                    (:macrocall, Symbol("@test"), (:call, :in, :p, :pids))
                                  ), (:block,
                                    (:line, 785, :none),
                                    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, :p, :pids)))
                                  ))
                              ))
                          )
                        )))
                  ), (:block,
                    (:line, 789, :none),
                    (:&&, (:call, :(!==), (:ref, :kwdict, (:quote, #QuoteNode
                            :on_error
                          )), (:quote, #QuoteNode
                          :default
                        )), (:call, :(===), (:ref, :kwdict, (:quote, #QuoteNode
                            :retry_n
                          )), (:quote, #QuoteNode
                          :default
                        ))),
                    (:line, 790, :none),
                    (:(=), :mapf, (:->, :x, (:block,
                          (:line, 790, :none),
                          (:if, (:call, :iseven, :x), (:call, :error, "foobar"), (:tuple, (:call, :*, :x, 2), (:call, :myid)))
                        ))),
                    (:line, 791, :none),
                    (:(=), :results_test, (:->, :pmap_res, (:block,
                          (:line, 791, :none),
                          (:block,
                            (:line, 792, :none),
                            (:(=), :w, :testw),
                            (:line, 793, :none),
                            (:for, (:(=), (:tuple, :idx, :x), (:call, :enumerate, :data)), (:block,
                                (:line, 794, :none),
                                (:if, (:call, :iseven, :x), (:block,
                                    (:line, 795, :none),
                                    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :pmap_res, :idx), true))
                                  ), (:block,
                                    (:line, 797, :none),
                                    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:ref, :pmap_res, :idx), 1), (:call, :*, :x, 2))),
                                    (:line, 798, :none),
                                    (:macrocall, Symbol("@test"), (:call, :in, (:ref, (:ref, :pmap_res, :idx), 2), :w))
                                  ))
                              ))
                          )
                        )))
                  ))
              )),
            (:line, 804, :none),
            (:try, (:block,
                (:line, 805, :none),
                (:call, :results_test, (:call, :pmap, (:parameters, (:..., :kwargs)), :mapf, :data))
              ), :e, (:block,
                (:line, 807, :none),
                (:call, :println, "pmap executing with args : ", :kwargs),
                (:line, 808, :none),
                (:call, :rethrow, :e)
              )),
            (:line, 811, :none),
            (:return, nothing)
          )),
        (:line, 814, :none),
        (:(=), (:ref, :kwdict, (:ref, (:ref, :pmap_args, :i), 1)), (:ref, (:ref, (:ref, :pmap_args, :i), 2), 1)),
        (:line, 815, :none),
        (:call, :walk_args, (:call, :+, :i, 1)),
        (:line, 817, :none),
        (:(=), (:ref, :kwdict, (:ref, (:ref, :pmap_args, :i), 1)), (:ref, (:ref, (:ref, :pmap_args, :i), 2), 2)),
        (:line, 818, :none),
        (:call, :walk_args, (:call, :+, :i, 1))
      )),
    (:line, 822, :none),
    (:call, :walk_args, 1),
    (:line, 825, :none),
    (:(=), :error_thrown, false),
    (:line, 826, :none),
    (:try, (:block,
        (:line, 827, :none),
        (:call, :pmap, (:->, :x, (:block,
              (:line, 827, :none),
              (:if, (:call, :(==), :x, 50), (:call, :error, "foobar"), :x)
            )), (:(:), 1, 100))
      ), :e, (:block,
        (:line, 829, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., (:call, :unmangle_exception, :e), (:quote, #QuoteNode
                :msg
              )), "foobar")),
        (:line, 830, :none),
        (:(=), :error_thrown, true)
      )),
    (:line, 832, :none),
    (:macrocall, Symbol("@test"), :error_thrown),
    (:line, 835, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:vect, (:..., (:(:), 1, 100))), (:call, :pmap, (:->, :x, (:block,
              (:line, 835, :none),
              :x
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :Generator
              )), (:->, :x, (:block,
                (:line, 835, :none),
                (:block,
                  (:call, :sleep, 0.0001),
                  :x
                )
              )), (:(:), 1, 100))))),
    (:line, 838, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:call, :asyncmap, (:->, :x, (:block,
              (:line, 838, :none),
              (:block,
                (:call, :sleep, 1.0),
                (:call, :object_id, (:call, :current_task))
              )
            )), (:(:), 1, 10)))),
    (:line, 841, :none),
    (:(=), :wp, (:call, :CachingPool, (:call, :workers))),
    (:line, 842, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:vect, (:..., (:(:), 1, 100))), (:call, :pmap, :wp, (:->, :x, (:block,
              (:line, 842, :none),
              :x
            )), (:(:), 1, 100)))),
    (:line, 844, :none),
    (:call, :clear!, :wp),
    (:line, 845, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:., :wp, (:quote, #QuoteNode
              :map_obj2ref
            ))), 0)),
    (:line, 854, :none),
    (:(=), :DoFullTest, (:call, :Bool, (:call, :parse, :Int, (:call, :get, :ENV, "JULIA_TESTFULL", "0")))),
    (:line, 856, :none),
    (:if, :DoFullTest, (:block,
        (:line, 860, :none),
        (:(=), :script, (:call, :joinpath, (:call, :dirname, (:macrocall, Symbol("@__FILE__"))), "topology.jl")),
        (:line, 861, :none),
        (:(=), :cmd, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) \$script")),
        (:line, 863, :none),
        (:(=), (:tuple, :strm, :proc), (:call, :open, (:call, :pipeline, :cmd, (:kw, :stderr, :STDERR)))),
        (:line, 864, :none),
        (:call, :wait, :proc),
        (:line, 865, :none),
        (:if, (:&&, (:call, :!, (:call, :success, :proc)), (:call, :(==), (:ccall, (:quote, #QuoteNode
                  :jl_running_on_valgrind
                ), :Cint, (:tuple,)), 0)), (:block,
            (:line, 866, :none),
            (:call, :println, (:call, :readstring, :strm)),
            (:line, 867, :none),
            (:call, :error, (:string, "Topology tests failed : ", :cmd))
          )),
        (:line, 870, :none),
        (:call, :println, "Testing exception printing on remote worker from a `remote_do` call"),
        (:line, 871, :none),
        (:call, :println, "Please ensure the remote error and backtrace is displayed on screen"),
        (:line, 873, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :remote_do
            )), (:->, (:tuple,), (:block,
              (:line, 874, :none),
              (:call, :throw, (:call, :ErrorException, "TESTING EXCEPTION ON REMOTE DO. PLEASE IGNORE"))
            )), :id_other),
        (:line, 876, :none),
        (:call, :sleep, 0.5),
        (:line, 878, :none),
        (:call, :println, "\n\nThe following 'invalid connection credentials' error messages are to be ignored."),
        (:line, 879, :none),
        (:(=), :all_w, (:call, :workers)),
        (:line, 882, :none),
        (:for, (:(=), :w, (:., (:., :Base, (:quote, #QuoteNode
                  :PGRP
                )), (:quote, #QuoteNode
                :workers
              ))), (:block,
            (:line, 883, :none),
            (:if, (:call, :isa, :w, (:., :Base, (:quote, #QuoteNode
                    :Worker
                  ))), (:block,
                (:line, 884, :none),
                (:(=), :s, (:call, :connect, (:call, :get, (:., (:., :w, (:quote, #QuoteNode
                            :config
                          )), (:quote, #QuoteNode
                          :host
                        ))), (:call, :get, (:., (:., :w, (:quote, #QuoteNode
                            :config
                          )), (:quote, #QuoteNode
                          :port
                        ))))),
                (:line, 885, :none),
                (:call, :write, :s, (:call, :randstring, 32))
              ))
          )),
        (:line, 888, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :workers), :all_w)),
        (:line, 889, :none),
        (:macrocall, Symbol("@test"), (:call, :all, (:comprehension, (:generator, (:call, :(==), :p, (:call, :remotecall_fetch, :myid, :p)), (:(=), :p, :all_w))))),
        (:line, 891, :none),
        (:if, (:call, :is_unix), (:block,
            (:line, 892, :none),
            (:function, (:call, :test_n_remove_pids, :new_pids), (:block,
                (:line, 893, :none),
                (:for, (:(=), :p, :new_pids), (:block,
                    (:line, 894, :none),
                    (:(=), :w_in_remote, (:call, :sort, (:call, :remotecall_fetch, :workers, :p))),
                    (:line, 895, :none),
                    (:try, (:block,
                        (:line, 896, :none),
                        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :intersect, :new_pids, :w_in_remote), :new_pids))
                      ), :e, (:block,
                        (:line, 898, :none),
                        (:call, :print, (:string, "p       :     ", :p, "\n")),
                        (:line, 899, :none),
                        (:call, :print, (:string, "newpids :     ", :new_pids, "\n")),
                        (:line, 900, :none),
                        (:call, :print, (:string, "w_in_remote : ", :w_in_remote, "\n")),
                        (:line, 901, :none),
                        (:call, :print, (:string, "intersect   : ", (:call, :intersect, :new_pids, :w_in_remote), "\n\n\n")),
                        (:line, 902, :none),
                        (:call, :rethrow, :e)
                      ))
                  )),
                (:line, 906, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:quote, #QuoteNode
                      :ok
                    ), (:call, :remotecall_fetch, (:->, (:tuple, :p), (:block,
                          (:line, 907, :none),
                          (:call, :rmprocs, (:parameters, (:kw, :waitfor, 5.0)), :p)
                        )), 1, :new_pids)))
              )),
            (:line, 911, :none),
            (:call, :print, "\n\nTesting SSHManager. A minimum of 4GB of RAM is recommended.\n"),
            (:line, 912, :none),
            (:call, :print, "Please ensure sshd is running locally with passwordless login enabled.\n"),
            (:line, 914, :none),
            (:(=), :sshflags, (:macrocall, Symbol("@cmd"), "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR ")),
            (:line, 916, :none),
            (:(=), :hosts, (:vect,)),
            (:line, 917, :none),
            (:(=), :localhost_aliases, (:vect, "localhost", (:call, :string, (:call, :getipaddr)), "127.0.0.1")),
            (:line, 918, :none),
            (:(=), :num_workers, (:call, :parse, :Int, (:call, :get, :ENV, "JULIA_ADDPROCS_NUM", "9"))),
            (:line, 920, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :/, :num_workers, (:call, :length, :localhost_aliases)))), (:block,
                (:line, 921, :none),
                (:call, :append!, :hosts, :localhost_aliases)
              )),
            (:line, 924, :none),
            (:call, :print, (:string, "\nTesting SSH addprocs with ", (:call, :length, :hosts), " workers...\n")),
            (:line, 925, :none),
            (:(=), :new_pids, (:call, :remotecall_fetch, (:->, (:tuple, :h, :sf), (:block,
                    (:line, 926, :none),
                    (:call, :addprocs, (:parameters, (:kw, :sshflags, :sf)), :h)
                  )), 1, :hosts, :sshflags)),
            (:line, 928, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :new_pids), (:call, :length, :hosts))),
            (:line, 929, :none),
            (:call, :test_n_remove_pids, :new_pids),
            (:line, 931, :none),
            (:call, :print, "\nMixed ssh addprocs with :auto\n"),
            (:line, 932, :none),
            (:(=), :new_pids, (:call, :sort, (:call, :remotecall_fetch, (:->, (:tuple, :h, :sf), (:block,
                      (:line, 933, :none),
                      (:call, :addprocs, (:parameters, (:kw, :sshflags, :sf)), :h)
                    )), 1, (:vect, "localhost", (:tuple, "127.0.0.1", (:quote, #QuoteNode
                        :auto
                      )), "localhost"), :sshflags))),
            (:line, 935, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :new_pids), (:call, :+, 2, (:., :Sys, (:quote, #QuoteNode
                      :CPU_CORES
                    ))))),
            (:line, 936, :none),
            (:call, :test_n_remove_pids, :new_pids),
            (:line, 938, :none),
            (:call, :print, "\nMixed ssh addprocs with numeric counts\n"),
            (:line, 939, :none),
            (:(=), :new_pids, (:call, :sort, (:call, :remotecall_fetch, (:->, (:tuple, :h, :sf), (:block,
                      (:line, 940, :none),
                      (:call, :addprocs, (:parameters, (:kw, :sshflags, :sf)), :h)
                    )), 1, (:vect, (:tuple, "localhost", 2), (:tuple, "127.0.0.1", 2), "localhost"), :sshflags))),
            (:line, 942, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :new_pids), 5)),
            (:line, 943, :none),
            (:call, :test_n_remove_pids, :new_pids),
            (:line, 945, :none),
            (:call, :print, "\nssh addprocs with tunnel\n"),
            (:line, 946, :none),
            (:(=), :new_pids, (:call, :sort, (:call, :remotecall_fetch, (:->, (:tuple, :h, :sf), (:block,
                      (:line, 947, :none),
                      (:call, :addprocs, (:parameters, (:kw, :tunnel, true), (:kw, :sshflags, :sf)), :h)
                    )), 1, (:vect, (:tuple, "localhost", :num_workers)), :sshflags))),
            (:line, 949, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :new_pids), :num_workers)),
            (:line, 950, :none),
            (:call, :test_n_remove_pids, :new_pids)
          ))
      )),
    (:line, 955, :none),
    (:let, (:block,
        (:line, 956, :none),
        (:(=), :t, (:macrocall, Symbol("@task"), (:call, :produce, 11))),
        (:line, 957, :none),
        (:macrocall, Symbol("@sync"), (:block,
            (:line, 958, :none),
            (:macrocall, Symbol("@async"), (:for, (:(=), :x, :t), (:block,
                  (:line, 958, :none),
                  (:call, :push!, :A, :x)
                ))),
            (:line, 959, :none),
            (:macrocall, Symbol("@async"), (:for, (:(=), :x, :t), (:block,
                  (:line, 959, :none),
                  (:call, :push!, :B, :x)
                )))
          )),
        (:line, 961, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :(==), :A, (:vect, 11)), (:call, :(==), :B, (:vect, 11))))
      ), (:(=), :A, (:vect,)), (:(=), :B, (:vect,))),
    (:line, 964, :none),
    (:let, (:block,
        (:line, 965, :none),
        (:call, :schedule, :t, (:call, :ErrorException, ""), (:kw, :error, true)),
        (:line, 966, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :wait, :t))
      ), (:(=), :t, (:macrocall, Symbol("@task"), 42))),
    (:line, 970, :none),
    (:let, (:block,
        (:line, 971, :none),
        (:macrocall, Symbol("@parallel"), :+, (:for, (:(=), :i, (:block,
                (:call, :push!, :A, 1),
                (:(:), 1, 2)
              )), (:block,
              (:line, 972, :none),
              :i
            ))),
        (:line, 974, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :A), 1))
      ), (:(=), :A, (:ref, :Any))),
    (:line, 978, :none),
    (:function, (:call, :f13168, :n), (:block,
        (:line, 979, :none),
        (:(=), :val, 0),
        (:line, 980, :none),
        (:for, (:(=), :i, (:(:), 1, :n)), (:block,
            (:line, 980, :none),
            (:+=, :val, (:call, :sum, (:call, :^, (:call, :rand, :n, :n), 2)))
          )),
        (:line, 981, :none),
        :val
      )),
    (:line, 983, :none),
    (:let, (:block,
        (:line, 984, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :queued
            ))),
        (:line, 985, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :schedule, :t)),
        (:line, 986, :none),
        (:call, :yield),
        (:line, 987, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :done
            ))),
        (:line, 988, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :schedule, :t)),
        (:line, 989, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :wait, :t), :Float64))
      ), (:(=), :t, (:call, :schedule, (:macrocall, Symbol("@task"), (:call, :f13168, 100))))),
    (:line, 993, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :remotecall_fetch, :identity, (:ref, (:call, :workers), 1), :C_NULL), :C_NULL)),
    (:line, 996, :none),
    (:function, (:call, :t11062), (:block,
        (:line, 997, :none),
        (:macrocall, Symbol("@async"), (:(=), :v11062, 1)),
        (:line, 998, :none),
        (:(=), :v11062, 2)
      )),
    (:line, 1001, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :t11062), 2)),
    (:line, 1004, :none),
    (:(=), :v15406, (:call, :remotecall_wait, (:->, (:tuple,), (:block,
            (:line, 1004, :none),
            1
          )), :id_other)),
    (:line, 1005, :none),
    (:call, :fetch, :v15406),
    (:line, 1006, :none),
    (:call, :remotecall_wait, (:->, :t, (:block,
          (:line, 1006, :none),
          (:call, :fetch, :t)
        )), :id_other, :v15406),
    (:line, 1010, :none),
    (:macrocall, Symbol("@everywhere"), (:(=), (:call, :f_args, (:parameters, (:kw, :kw1, 0), (:kw, :kw2, 0)), :v1, (:kw, :v2, 0)), (:block,
          (:line, 1010, :none),
          (:call, :+, :v1, :v2, :kw1, :kw2)
        ))),
    (:line, 1012, :none),
    (:function, (:call, :test_f_args, (:parameters, (:..., :kwargs)), :result, (:..., :args)), (:block,
        (:line, 1013, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, (:call, :remotecall, (:parameters, (:..., :kwargs)), (:..., :args))), :result)),
        (:line, 1014, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fetch, (:call, :remotecall_wait, (:parameters, (:..., :kwargs)), (:..., :args))), :result)),
        (:line, 1015, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:parameters, (:..., :kwargs)), (:..., :args)), :result)),
        (:line, 1018, :none),
        (:&&, (:call, :!, (:call, :isa, (:ref, :args, 2), :WorkerPool)), (:call, (:., :Base, (:quote, #QuoteNode
                :remote_do
              )), (:parameters, (:..., :kwargs)), (:..., :args)))
      )),
    (:line, 1021, :none),
    (:for, (:(=), :tid, (:vect, :id_other, :id_me, (:call, (:., :Base, (:quote, #QuoteNode
                :default_worker_pool
              ))))), (:block,
        (:line, 1022, :none),
        (:call, :test_f_args, 1, :f_args, :tid, 1),
        (:line, 1023, :none),
        (:call, :test_f_args, 3, :f_args, :tid, 1, 2),
        (:line, 1024, :none),
        (:call, :test_f_args, (:parameters, (:kw, :kw1, 4)), 5, :f_args, :tid, 1),
        (:line, 1025, :none),
        (:call, :test_f_args, (:parameters, (:kw, :kw1, 4), (:kw, :kw2, 8)), 13, :f_args, :tid, 1),
        (:line, 1026, :none),
        (:call, :test_f_args, (:parameters, (:kw, :kw1, 4), (:kw, :kw2, 8)), 15, :f_args, :tid, 1, 2)
      )),
    (:line, 1030, :none),
    (:(=), :n, (:if, :DoFullTest, 6, 5)),
    (:line, 1031, :none),
    (:for, (:(=), :i, (:(:), 1, (:call, :^, 10, :n))), (:block,
        (:line, 1032, :none),
        (:call, :fetch, (:macrocall, Symbol("@spawnat"), (:call, :myid), (:call, :myid)))
      )),
    (:line, 1036, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :x, (:block,
              (:line, 1036, :none),
              (:call, :+, (:call, (:->, :y, (:block,
                      (:line, 1036, :none),
                      (:call, :*, 2, :y)
                    )), :x), 1)
            )), (:ref, (:call, :workers), 1), 3), 7)),
    (:line, 1039, :none),
    (:type, true, :T16091, (:block,
        (:line, 1039, :none)
      )),
    (:line, 1040, :none),
    (:(=), :wid, (:ref, (:call, :workers), 1)),
    (:line, 1041, :none),
    (:macrocall, Symbol("@test"), (:try, (:block,
          (:line, 1042, :none),
          (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                (:line, 1042, :none),
                :T16091
              )), :wid),
          (:line, 1043, :none),
          false
        ), :ex, (:block,
          (:line, 1045, :none),
          (:call, :(===), (:., (:(::), (:., (:(::), :ex, :RemoteException), (:quote, #QuoteNode
                    :captured
                  )), :CapturedException), (:quote, #QuoteNode
                :ex
              )), (:call, :UndefVarError, (:quote, #QuoteNode
                :T16091
              )))
        ))),
    (:line, 1047, :none),
    (:macrocall, Symbol("@test"), (:try, (:block,
          (:line, 1048, :none),
          (:call, :remotecall_fetch, :identity, :wid, :T16091),
          (:line, 1049, :none),
          false
        ), :ex, (:block,
          (:line, 1051, :none),
          (:call, :(===), (:., (:(::), (:., (:(::), :ex, :RemoteException), (:quote, #QuoteNode
                    :captured
                  )), :CapturedException), (:quote, #QuoteNode
                :ex
              )), (:call, :UndefVarError, (:quote, #QuoteNode
                :T16091
              )))
        ))),
    (:line, 1054, :none),
    (:(=), (:call, :f16091a), (:block,
        (:line, 1054, :none),
        1
      )),
    (:line, 1055, :none),
    (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
          (:line, 1055, :none),
          (:call, :eval, (:quote, (:(=), (:call, :f16091a), (:block,
                  (:line, 1055, :none),
                  2
                ))))
        )), :wid),
    (:line, 1056, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :remotecall_fetch, :f16091a, :wid), 2)),
    (:line, 1057, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :remotecall_fetch, (:->, :myid, (:block,
              (:line, 1057, :none),
              (:call, :remotecall_fetch, :f16091a, :myid)
            )), :wid, (:call, :myid)), 1)),
    (:line, 1060, :none),
    (:(=), :f16091b, (:->, (:tuple,), (:block,
          (:line, 1060, :none),
          1
        ))),
    (:line, 1061, :none),
    (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
          (:line, 1061, :none),
          (:call, :eval, (:quote, (:(=), :f16091b, (:->, (:tuple,), (:block,
                    (:line, 1061, :none),
                    2
                  )))))
        )), :wid),
    (:line, 1062, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :remotecall_fetch, :f16091b, 2), 1)),
    (:line, 1063, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :remotecall_fetch, (:->, :myid, (:block,
              (:line, 1063, :none),
              (:call, :remotecall_fetch, :f16091b, :myid)
            )), :wid, (:call, :myid)), 2)),
    (:line, 1067, :none),
    (:(=), :rng, (:call, :RandomDevice)),
    (:line, 1068, :none),
    (:(=), :retval, (:macrocall, Symbol("@parallel"), :+, (:for, (:(=), :_, (:(:), 1, 10)), (:block,
            (:line, 1069, :none),
            (:call, :rand, :rng)
          )))),
    (:line, 1071, :none),
    (:macrocall, Symbol("@test"), (:&&, (:call, :>, :retval, 0.0), (:call, :<, :retval, 10.0))),
    (:line, 1073, :none),
    (:call, :rand, :rng),
    (:line, 1074, :none),
    (:(=), :retval, (:macrocall, Symbol("@parallel"), :+, (:for, (:(=), :_, (:(:), 1, 10)), (:block,
            (:line, 1075, :none),
            (:call, :rand, :rng)
          )))),
    (:line, 1077, :none),
    (:macrocall, Symbol("@test"), (:&&, (:call, :>, :retval, 0.0), (:call, :<, :retval, 10.0))),
    (:line, 1080, :none),
    (:(=), :wrkr1, (:ref, (:call, :workers), 1)),
    (:line, 1081, :none),
    (:(=), :wrkr2, (:ref, (:call, :workers), :end)),
    (:line, 1083, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, :p, (:block,
              (:line, 1083, :none),
              (:call, :remotecall_fetch, :myid, :p)
            )), :wrkr1, :wrkr2), :wrkr2)),
    (:line, 1086, :none),
    (:(=), :f_myid, (:->, (:tuple,), (:block,
          (:line, 1086, :none),
          (:call, :myid)
        ))),
    (:line, 1087, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :wrkr1, (:call, :remotecall_fetch, :f_myid, :wrkr1))),
    (:line, 1088, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :wrkr2, (:call, :remotecall_fetch, :f_myid, :wrkr2))),
    (:line, 1089, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :wrkr2, (:call, :remotecall_fetch, (:->, (:tuple, :f, :p), (:block,
              (:line, 1089, :none),
              (:call, :remotecall_fetch, :f, :p)
            )), :wrkr1, :f_myid, :wrkr2))),
    (:line, 1093, :none),
    (:module, true, :LocalFoo, (:block,
        (:line, 1093, :none),
        (:line, 1094, :none),
        (:global, (:(=), :foo, 1))
      )),
    (:line, 1097, :none),
    (:let, (:block,
        (:line, 1098, :none),
        (:macrocall, Symbol("@test_throws"), :RemoteException, (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                (:line, 1098, :none),
                (:., :LocalFoo, (:quote, #QuoteNode
                    :foo
                  ))
              )), 2)),
        (:line, 1100, :none),
        (:(=), :bad_thunk, (:->, (:tuple,), (:block,
              (:line, 1100, :none),
              (:call, (:., :NonexistantModule, (:quote, #QuoteNode
                    :f
                  )))
            ))),
        (:line, 1101, :none),
        (:macrocall, Symbol("@test_throws"), :RemoteException, (:call, :remotecall_fetch, :bad_thunk, 2)),
        (:line, 1104, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                  (:line, 1104, :none),
                  (:quote, #QuoteNode
                    :test
                  )
                )), 2), (:quote, #QuoteNode
              :test
            ))),
        (:line, 1105, :none),
        (:(=), :ref, (:call, :remotecall, :bad_thunk, 2)),
        (:line, 1106, :none),
        (:macrocall, Symbol("@test_throws"), :RemoteException, (:call, :fetch, :ref))
      )),
    (:line, 1110, :none),
    (:module, true, :LocalBar, (:block,
        (:line, 1110, :none),
        (:line, 1111, :none),
        (:(=), (:call, :bar), (:block,
            (:line, 1111, :none),
            (:macrocall, Symbol("@everywhere"), (:(=), (:call, :new_bar), (:block,
                  (:line, 1111, :none),
                  (:call, :myid)
                )))
          ))
      )),
    (:line, 1113, :none),
    (:call, (:., :LocalBar, (:quote, #QuoteNode
          :bar
        ))),
    (:line, 1114, :none),
    (:for, (:(=), :p, (:call, :procs)), (:block,
        (:line, 1115, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :p, (:call, :remotecall_fetch, :new_bar, :p)))
      ))
  ))