(:quote, (:block,
    (:line, 7, :none),
    (:module, true, :ReflectionTest, (:block,
        (:line, 7, :none),
        (:line, 8, :none),
        (:using, :Base, :Test),
        (:line, 10, :none),
        (:function, (:call, :test_ast_reflection, :freflect, :f, :types), (:block,
            (:line, 11, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :freflect, :f, :types))))
          )),
        (:line, 14, :none),
        (:function, (:call, :test_bin_reflection, :freflect, :f, :types), (:block,
            (:line, 15, :none),
            (:(=), :iob, (:call, :IOBuffer)),
            (:line, 16, :none),
            (:call, :freflect, :iob, :f, :types),
            (:line, 17, :none),
            (:(=), :str, (:call, :takebuf_string, :iob)),
            (:line, 18, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :str)))
          )),
        (:line, 21, :none),
        (:function, (:call, :test_code_reflection, :freflect, :f, :types, :tester), (:block,
            (:line, 22, :none),
            (:call, :tester, :freflect, :f, :types),
            (:line, 23, :none),
            (:call, :tester, :freflect, :f, (:tuple, (:..., (:., :types, (:quote, #QuoteNode
                      :parameters
                    )))))
          )),
        (:line, 26, :none),
        (:function, (:call, :test_code_reflections, :tester, :freflect), (:block,
            (:line, 27, :none),
            (:call, :test_code_reflection, :freflect, :ismatch, (:curly, :Tuple, :Regex, :AbstractString), :tester),
            (:line, 29, :none),
            (:call, :test_code_reflection, :freflect, :+, (:curly, :Tuple, :Int, :Int), :tester),
            (:line, 30, :none),
            (:call, :test_code_reflection, :freflect, :+, (:curly, :Tuple, (:curly, :Array, :Float32), (:curly, :Array, :Float32)), :tester),
            (:line, 32, :none),
            (:call, :test_code_reflection, :freflect, :Module, (:curly, :Tuple), :tester),
            (:line, 33, :none),
            (:call, :test_code_reflection, :freflect, (:curly, :Array, :Int64), (:curly, :Tuple, (:curly, :Array, :Int32)), :tester),
            (:line, 34, :none),
            (:call, :test_code_reflection, :freflect, :muladd, (:curly, :Tuple, :Float64, :Float64, :Float64), :tester)
          )),
        (:line, 37, :none),
        (:call, :test_code_reflections, :test_ast_reflection, :code_lowered),
        (:line, 38, :none),
        (:call, :test_code_reflections, :test_ast_reflection, :code_typed),
        (:line, 39, :none),
        (:call, :test_code_reflections, :test_bin_reflection, :code_llvm),
        (:line, 40, :none),
        (:call, :test_code_reflections, :test_bin_reflection, :code_native),
        (:line, 43, :none),
        (:call, :mktemp, (:->, (:tuple, :f, :io), (:block,
              (:line, 44, :none),
              (:(=), :OLDSTDOUT, :STDOUT),
              (:line, 45, :none),
              (:call, :redirect_stdout, :io),
              (:line, 46, :none),
              (:macrocall, Symbol("@test"), (:try, (:block,
                    (:line, 46, :none),
                    (:macrocall, Symbol("@code_native"), (:call, :map, (:->, :y, (:block,
                            (:line, 46, :none),
                            (:call, :abs, :y)
                          )), (:call, :rand, 3))),
                    (:line, 46, :none),
                    true
                  ), false, (:block,
                    (:line, 46, :none),
                    false
                  ))),
              (:line, 47, :none),
              (:call, :redirect_stdout, :OLDSTDOUT)
            )))
      )),
    (:line, 53, :none),
    (:module, true, :WarnType, (:block,
        (:line, 53, :none),
        (:line, 54, :none),
        (:using, :Base, :Test),
        (:line, 56, :none),
        (:function, (:call, :warntype_hastag, :f, :types, :tag), (:block,
            (:line, 57, :none),
            (:(=), :iob, (:call, :IOBuffer)),
            (:line, 58, :none),
            (:call, :code_warntype, :iob, :f, :types),
            (:line, 59, :none),
            (:(=), :str, (:call, :takebuf_string, :iob)),
            (:line, 60, :none),
            (:call, :!, (:call, :isempty, (:call, :search, :str, :tag)))
          )),
        (:line, 63, :none),
        (:(=), (:call, :pos_stable, :x), (:block,
            (:line, 63, :none),
            (:if, (:call, :>, :x, 0), :x, (:call, :zero, :x))
          )),
        (:line, 64, :none),
        (:(=), (:call, :pos_unstable, :x), (:block,
            (:line, 64, :none),
            (:if, (:call, :>, :x, 0), :x, 0)
          )),
        (:line, 66, :none),
        (:(=), :tag, (:if, (:., :Base, (:quote, #QuoteNode
                :have_color
              )), (:ref, (:., :Base, (:quote, #QuoteNode
                  :text_colors
                )), (:quote, #QuoteNode
                :red
              )), "UNION")),
        (:line, 67, :none),
        (:macrocall, Symbol("@test"), (:call, :warntype_hastag, :pos_unstable, (:curly, :Tuple, :Float64), :tag)),
        (:line, 68, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :pos_stable, (:curly, :Tuple, :Float64), :tag))),
        (:line, 70, :none),
        (:type, true, (:curly, :Stable, :T, :N), (:block,
            (:line, 71, :none),
            (:(::), :A, (:curly, :Array, :T, :N))
          )),
        (:line, 73, :none),
        (:type, true, (:curly, :Unstable, :T), (:block,
            (:line, 74, :none),
            (:(::), :A, (:curly, :Array, :T))
          )),
        (:line, 76, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :getindex
              )), (:(::), :A, :Stable), :i), (:block,
            (:line, 76, :none),
            (:ref, (:., :A, (:quote, #QuoteNode
                  :A
                )), :i)
          )),
        (:line, 77, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :getindex
              )), (:(::), :A, :Unstable), :i), (:block,
            (:line, 77, :none),
            (:ref, (:., :A, (:quote, #QuoteNode
                  :A
                )), :i)
          )),
        (:line, 79, :none),
        (:(=), :tag, (:if, (:., :Base, (:quote, #QuoteNode
                :have_color
              )), (:ref, (:., :Base, (:quote, #QuoteNode
                  :text_colors
                )), (:quote, #QuoteNode
                :red
              )), "ARRAY{FLOAT64,N}")),
        (:line, 80, :none),
        (:macrocall, Symbol("@test"), (:call, :warntype_hastag, :getindex, (:curly, :Tuple, (:curly, :Unstable, :Float64), :Int), :tag)),
        (:line, 81, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :getindex, (:curly, :Tuple, (:curly, :Stable, :Float64, 2), :Int), :tag))),
        (:line, 82, :none),
        (:macrocall, Symbol("@test"), (:call, :warntype_hastag, :getindex, (:curly, :Tuple, (:curly, :Stable, :Float64), :Int), :tag)),
        (:line, 85, :none),
        (:(=), :tag, (:if, (:., :Base, (:quote, #QuoteNode
                :have_color
              )), (:ref, (:., :Base, (:quote, #QuoteNode
                  :text_colors
                )), (:quote, #QuoteNode
                :red
              )), "ANY")),
        (:line, 86, :none),
        (:(=), :iob, (:call, :IOBuffer)),
        (:line, 87, :none),
        (:call, :show, :iob, (:call, :expand, (:quote, (:->, :x, (:block,
                  (:line, 87, :none),
                  (:call, :^, :x, 2)
                ))))),
        (:line, 88, :none),
        (:(=), :str, (:call, :takebuf_string, :iob)),
        (:line, 89, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :search, :str, :tag))),
        (:line, 91, :none),
        (:module, true, :ImportIntrinsics15819, (:block,
            (:line, 91, :none),
            (:line, 95, :none),
            (:toplevel, (:import, :Core, :Intrinsics, :sqrt_llvm), (:import, :Core, :Intrinsics, :box), (:import, :Core, :Intrinsics, :unbox)),
            (:line, 97, :none),
            (:(=), (:call, :sqrt15819, (:(::), :x, :Float64)), (:block,
                (:line, 97, :none),
                (:call, :box, :Float64, (:call, :sqrt_llvm, (:call, :unbox, :Float64, :x)))
              )),
            (:line, 99, :none),
            (:(=), (:call, :sqrt15819, (:(::), :x, :Float32)), (:block,
                (:line, 99, :none),
                (:call, :box, :Float32, (:call, (:., (:., :Core, (:quote, #QuoteNode
                          :Intrinsics
                        )), (:quote, #QuoteNode
                        :sqrt_llvm
                      )), (:call, :unbox, :Float32, :x)))
              ))
          )),
        (:line, 101, :none),
        (:(=), (:call, :foo11122, :x), (:block,
            (:line, 101, :none),
            (:macrocall, Symbol("@fastmath"), (:call, :-, :x, 1.0))
          )),
        (:line, 104, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :+, (:curly, :Tuple, :Int, :Int), :tag))),
        (:line, 105, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :-, (:curly, :Tuple, :Int, :Int), :tag))),
        (:line, 106, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :*, (:curly, :Tuple, :Int, :Int), :tag))),
        (:line, 107, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :/, (:curly, :Tuple, :Int, :Int), :tag))),
        (:line, 108, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :foo11122, (:curly, :Tuple, :Float32), :tag))),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :foo11122, (:curly, :Tuple, :Float64), :tag))),
        (:line, 110, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :foo11122, (:curly, :Tuple, :Int), :tag))),
        (:line, 111, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :sqrt, (:curly, :Tuple, :Int), :tag))),
        (:line, 112, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :sqrt, (:curly, :Tuple, :Float64), :tag))),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :^, (:curly, :Tuple, :Float64, :Int32), :tag))),
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, :^, (:curly, :Tuple, :Float32, :Int32), :tag))),
        (:line, 115, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, (:., :ImportIntrinsics15819, (:quote, #QuoteNode
                  :sqrt15819
                )), (:curly, :Tuple, :Float64), :tag))),
        (:line, 116, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :warntype_hastag, (:., :ImportIntrinsics15819, (:quote, #QuoteNode
                  :sqrt15819
                )), (:curly, :Tuple, :Float32), :tag)))
      )),
    (:line, 122, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isbits, (:curly, :Array, :Int)))),
    (:line, 123, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, :Float32)),
    (:line, 124, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, :Int)),
    (:line, 125, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isbits, :AbstractString))),
    (:line, 126, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, (:curly, :Tuple, :Int, (:curly, :Vararg, :Int, 2)))),
    (:line, 127, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isbits, (:curly, :Tuple, :Int, (:curly, :Vararg, :Int))))),
    (:line, 128, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isbits, (:curly, :Tuple, :Integer, (:curly, :Vararg, :Int, 2))))),
    (:line, 129, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, (:curly, :Tuple, :Int, (:curly, :Vararg, :Any, 0)))),
    (:line, 130, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, (:curly, :Tuple, (:curly, :Vararg, :Any, 0)))),
    (:line, 133, :none),
    (:macrocall, Symbol("@test"), (:call, :isleaftype, (:curly, :Tuple, :Int, (:curly, :Vararg, :Int, 2)))),
    (:line, 134, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isleaftype, (:curly, :Tuple, :Integer, (:curly, :Vararg, :Int, 2))))),
    (:line, 135, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isleaftype, (:curly, :Tuple, :Int, (:curly, :Vararg, :Int))))),
    (:line, 136, :none),
    (:macrocall, Symbol("@test"), (:call, :isleaftype, (:curly, :Type, (:curly, :Tuple, :Integer, (:curly, :Vararg, :Int))))),
    (:line, 137, :none),
    (:macrocall, Symbol("@test"), (:call, :isleaftype, (:curly, :Type, :Vector))),
    (:line, 140, :none),
    (:(=), (:call, :i10165, (:(::), :DataType)), (:block,
        (:line, 140, :none),
        0
      )),
    (:line, 141, :none),
    (:(=), (:call, (:curly, :i10165, :T, :n), (:(::), (:curly, :Type, (:curly, :AbstractArray, :T, :n)))), (:block,
        (:line, 141, :none),
        1
      )),
    (:line, 142, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :i10165, (:curly, :AbstractArray, :Int)), 0)),
    (:line, 143, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., (:call, :which, :i10165, (:curly, :Tuple, (:curly, :Type, (:curly, :AbstractArray, :Int)))), (:quote, #QuoteNode
            :sig
          )), (:curly, :Tuple, (:call, :typeof, :i10165), :DataType))),
    (:line, 146, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fullname, :Base), (:tuple, (:quote, #QuoteNode
            :Base
          )))),
    (:line, 147, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fullname, (:., :Base, (:quote, #QuoteNode
              :Pkg
            ))), (:tuple, (:quote, #QuoteNode
            :Base
          ), (:quote, #QuoteNode
            :Pkg
          )))),
    (:line, 149, :none),
    (:const, (:(=), :a_const, 1)),
    (:line, 150, :none),
    (:(=), :not_const, 1),
    (:line, 151, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isconst, (:quote, #QuoteNode
            :a_const
          )), true)),
    (:line, 152, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isconst, :Base, (:quote, #QuoteNode
            :pi
          )), true)),
    (:line, 153, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isconst, (:quote, #QuoteNode
            :pi
          )), true)),
    (:line, 154, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isconst, (:quote, #QuoteNode
            :not_const
          )), false)),
    (:line, 155, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isconst, (:quote, #QuoteNode
            :is_not_defined
          )), false)),
    (:line, 157, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isimmutable, 1), true)),
    (:line, 158, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isimmutable, (:vect,)), false)),
    (:line, 159, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isimmutable, "abc"), true)),
    (:line, 162, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ccall, (:quote, #QuoteNode
            :jl_get_module_of_binding
          ), :Any, (:tuple, :Any, :Any), :Base, (:quote, #QuoteNode
            :sin
          )), :Base)),
    (:line, 164, :none),
    (:module, true, :TestMod7648, (:block,
        (:line, 164, :none),
        (:line, 165, :none),
        (:using, :Base, :Test),
        (:line, 166, :none),
        (:export, :a9475, :foo9475, :c7648, :foo7648, :foo7648_nomethods, :Foo7648),
        (:line, 168, :none),
        (:const, (:(=), :c7648, 8)),
        (:line, 169, :none),
        (:(=), :d7648, 9),
        (:line, 170, :none),
        (:const, (:(=), :f7648, 10)),
        (:line, 171, :none),
        (:(=), (:call, :foo7648, :x), (:block,
            (:line, 171, :none),
            :x
          )),
        (:line, 172, :none),
        (:function, :foo7648_nomethods),
        (:line, 173, :none),
        (:type, true, :Foo7648, (:block,
            (:line, 173, :none)
          )),
        (:line, 175, :none),
        (:module, true, :TestModSub9475, (:block,
            (:line, 175, :none),
            (:line, 176, :none),
            (:using, :Base, :Test),
            (:line, 177, :none),
            (:using, :., :., :TestMod7648),
            (:line, 178, :none),
            (:export, :a9475, :foo9475),
            (:line, 179, :none),
            (:(=), :a9475, 5),
            (:line, 180, :none),
            (:(=), :b9475, 7),
            (:line, 181, :none),
            (:(=), (:call, :foo9475, :x), (:block,
                (:line, 181, :none),
                :x
              )),
            (:line, 182, :none),
            (:let, (:block,
                (:line, 183, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                          :binding_module
                        )), (:quote, #QuoteNode
                        :a9475
                      )), (:call, :current_module))),
                (:line, 184, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                          :binding_module
                        )), (:quote, #QuoteNode
                        :c7648
                      )), :TestMod7648)),
                (:line, 185, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                          :module_name
                        )), (:call, :current_module)), (:quote, #QuoteNode
                      :TestModSub9475
                    ))),
                (:line, 186, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                          :fullname
                        )), (:call, :current_module)), (:tuple, (:quote, #QuoteNode
                        :TestMod7648
                      ), (:quote, #QuoteNode
                        :TestModSub9475
                      )))),
                (:line, 187, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                          :module_parent
                        )), (:call, :current_module)), :TestMod7648))
              ))
          )),
        (:line, 191, :none),
        (:using, :., :TestModSub9475),
        (:line, 193, :none),
        (:let, (:block,
            (:line, 194, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                      :binding_module
                    )), (:quote, #QuoteNode
                    :d7648
                  )), (:call, :current_module))),
            (:line, 195, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                      :binding_module
                    )), (:quote, #QuoteNode
                    :a9475
                  )), :TestModSub9475)),
            (:line, 196, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                      :module_name
                    )), (:call, :current_module)), (:quote, #QuoteNode
                  :TestMod7648
                ))),
            (:line, 197, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                      :module_parent
                    )), (:call, :current_module)), :Main))
          ))
      )),
    (:line, 201, :none),
    (:let, (:block,
        (:line, 202, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :binding_module
                )), :TestMod7648, (:quote, #QuoteNode
                :d7648
              )), :TestMod7648)),
        (:line, 203, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :binding_module
                )), :TestMod7648, (:quote, #QuoteNode
                :a9475
              )), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )))),
        (:line, 204, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :binding_module
                )), (:., :TestMod7648, (:quote, #QuoteNode
                  :TestModSub9475
                )), (:quote, #QuoteNode
                :b9475
              )), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )))),
        (:line, 205, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Set, (:call, :names, :TestMod7648)), (:call, :Set, (:vect, (:quote, #QuoteNode
                  :TestMod7648
                ), (:quote, #QuoteNode
                  :a9475
                ), (:quote, #QuoteNode
                  :foo9475
                ), (:quote, #QuoteNode
                  :c7648
                ), (:quote, #QuoteNode
                  :foo7648
                ), (:quote, #QuoteNode
                  :foo7648_nomethods
                ), (:quote, #QuoteNode
                  :Foo7648
                ))))),
        (:line, 206, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Set, (:call, :names, :TestMod7648, true)), (:call, :Set, (:vect, (:quote, #QuoteNode
                  :TestMod7648
                ), (:quote, #QuoteNode
                  :TestModSub9475
                ), (:quote, #QuoteNode
                  :a9475
                ), (:quote, #QuoteNode
                  :foo9475
                ), (:quote, #QuoteNode
                  :c7648
                ), (:quote, #QuoteNode
                  :d7648
                ), (:quote, #QuoteNode
                  :f7648
                ), (:quote, #QuoteNode
                  :foo7648
                ), (:call, :Symbol, "#foo7648"), (:quote, #QuoteNode
                  :foo7648_nomethods
                ), (:call, :Symbol, "#foo7648_nomethods"), (:quote, #QuoteNode
                  :Foo7648
                ), (:quote, #QuoteNode
                  :eval
                ), (:call, :Symbol, "#eval"))))),
        (:line, 209, :none),
        (:macrocall, Symbol("@test"), (:call, :isconst, :TestMod7648, (:quote, #QuoteNode
              :c7648
            ))),
        (:line, 210, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isconst, :TestMod7648, (:quote, #QuoteNode
                :d7648
              ))))
      )),
    (:line, 213, :none),
    (:let, (:block,
        (:line, 214, :none),
        (:using, :TestMod7648),
        (:line, 215, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :binding_module
                )), (:quote, #QuoteNode
                :a9475
              )), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )))),
        (:line, 216, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :binding_module
                )), (:quote, #QuoteNode
                :c7648
              )), :TestMod7648)),
        (:line, 217, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_name
                )), :foo7648), (:quote, #QuoteNode
              :foo7648
            ))),
        (:line, 218, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_module
                )), :foo7648, (:tuple, :Any)), :TestMod7648)),
        (:line, 219, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_module
                )), :foo7648), :TestMod7648)),
        (:line, 220, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_module
                )), :foo7648_nomethods), :TestMod7648)),
        (:line, 221, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_module
                )), :foo9475, (:tuple, :Any)), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )))),
        (:line, 222, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :function_module
                )), :foo9475), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )))),
        (:line, 223, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :datatype_module
                )), :Foo7648), :TestMod7648)),
        (:line, 224, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :basename, (:ref, (:call, :functionloc, :foo7648, (:tuple, :Any)), 1)), "reflection.jl")),
        (:line, 225, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, (:call, :methods, (:., (:., :TestMod7648, (:quote, #QuoteNode
                      :TestModSub9475
                    )), (:quote, #QuoteNode
                    :foo7648
                  )))), (:macrocall, Symbol("@which"), (:call, :foo7648, 5)))),
        (:line, 226, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :TestMod7648, (:macrocall, Symbol("@which"), :foo7648))),
        (:line, 227, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :TestMod7648, (:quote, #QuoteNode
                :TestModSub9475
              )), (:macrocall, Symbol("@which"), :a9475)))
      )),
    (:line, 230, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :which, :is, (:curly, :Tuple, :Int, :Int))),
    (:line, 231, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :code_typed, :is, (:curly, :Tuple, :Int, :Int))),
    (:line, 232, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :code_llvm, :is, (:curly, :Tuple, :Int, :Int))),
    (:line, 233, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :code_native, :is, (:curly, :Tuple, :Int, :Int))),
    (:line, 234, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, (:., :Base, (:quote, #QuoteNode
            :return_types
          )), :is, (:curly, :Tuple, :Int, :Int))),
    (:line, 236, :none),
    (:module, true, :TestingExported, (:block,
        (:line, 236, :none),
        (:line, 237, :none),
        (:using, :Base, :Test),
        (:line, 238, :none),
        (:import, :Base, :isexported),
        (:line, 239, :none),
        (:global, :this_is_not_defined),
        (:line, 240, :none),
        (:export, :this_is_not_defined),
        (:line, 241, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :which, (:quote, #QuoteNode
              :this_is_not_defined
            ))),
        (:line, 242, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:macrocall, Symbol("@which"), :this_is_not_defined)),
        (:line, 243, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :which, (:quote, #QuoteNode
              :this_is_not_exported
            ))),
        (:line, 244, :none),
        (:macrocall, Symbol("@test"), (:call, :isexported, (:call, :current_module), (:quote, #QuoteNode
              :this_is_not_defined
            ))),
        (:line, 245, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isexported, (:call, :current_module), (:quote, #QuoteNode
                :this_is_not_exported
              )))),
        (:line, 246, :none),
        (:const, (:(=), :a_value, 1)),
        (:line, 247, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :which, (:quote, #QuoteNode
                :a_value
              )), (:call, :current_module))),
        (:line, 248, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isexported, (:call, :current_module), (:quote, #QuoteNode
                :a_value
              ))))
      )),
    (:line, 252, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:macrocall, Symbol("@which"), (:call, :vcat, (:..., 1))), :Method)),
    (:line, 255, :none),
    (:let, (:block,
        (:line, 256, :none),
        (:try, (:block,
            (:line, 257, :none),
            (:macrocall, Symbol("@which"), (:(=), (:ref, :t13464, 1, 1), (:tuple, 1.0, true))),
            (:line, 258, :none),
            (:call, :error, "unexpected")
          ), :err13464, (:block,
            (:line, 260, :none),
            (:macrocall, Symbol("@test"), (:call, :startswith, (:., :err13464, (:quote, #QuoteNode
                    :msg
                  )), "expression is not a function call, or is too complex"))
          ))
      ), (:(=), :t13464, "hey there sailor")),
    (:line, 265, :none),
    (:let, (:block,
        (:line, 266, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, :ex), "a + b")),
        (:line, 267, :none),
        (:(=), (:., :ex, (:quote, #QuoteNode
              :typ
            )), :Integer),
        (:line, 268, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, :ex), "(a + b)::Integer"))
      ), (:(=), :ex, (:quote, (:call, :+, :a, :b)))),
    (:line, 270, :none),
    (:(=), (:call, (:curly, :foo13825, :T, :N), (:(::), (:curly, :Array, :T, :N)), (:(::), :Array), (:(::), :Vector)), (:block,
        (:line, 270, :none),
        :nothing
      )),
    (:line, 271, :none),
    (:macrocall, Symbol("@test"), (:call, :startswith, (:call, :string, (:call, :first, (:call, :methods, :foo13825))), "foo13825{T,N}(::Array{T,N}, ::Array, ::Array{T<:Any,1})")),
    (:line, 274, :none),
    (:type, true, :TLayout, (:block,
        (:line, 275, :none),
        (:(::), :x, :Int8),
        (:line, 276, :none),
        (:(::), :y, :Int16),
        (:line, 277, :none),
        (:(::), :z, :Int32)
      )),
    (:line, 279, :none),
    (:(=), :tlayout, (:call, :TLayout, 5, 7, 11)),
    (:line, 280, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:call, :fieldnames, :tlayout), :(==), (:call, :fieldnames, :TLayout), :(==), (:vect, (:quote, #QuoteNode
            :x
          ), (:quote, #QuoteNode
            :y
          ), (:quote, #QuoteNode
            :z
          )))),
    (:line, 281, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:generator, (:tuple, (:call, :fieldoffset, :TLayout, :i), (:call, :fieldname, :TLayout, :i), (:call, :fieldtype, :TLayout, :i)), (:(=), :i, (:(:), 1, (:call, :nfields, :TLayout))))), (:vect, (:tuple, 0, (:quote, #QuoteNode
              :x
            ), :Int8), (:tuple, 2, (:quote, #QuoteNode
              :y
            ), :Int16), (:tuple, 4, (:quote, #QuoteNode
              :z
            ), :Int32)))),
    (:line, 283, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldtype, :TLayout, 0)),
    (:line, 284, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldname, :TLayout, 0)),
    (:line, 285, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldoffset, :TLayout, 0)),
    (:line, 286, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldtype, :TLayout, 4)),
    (:line, 287, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldname, :TLayout, 4)),
    (:line, 288, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldoffset, :TLayout, 4)),
    (:line, 290, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:call, :fieldnames, (:tuple, 1, 2, 3)), :(==), (:call, :fieldnames, (:curly, :NTuple, 3, :Int)), :(==), (:comprehension, (:generator, (:call, :fieldname, (:curly, :NTuple, 3, :Int), :i), (:(=), :i, (:(:), 1, 3)))), :(==), (:vect, 1, 2, 3))),
    (:line, 291, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldname, (:curly, :NTuple, 3, :Int), 0)),
    (:line, 292, :none),
    (:macrocall, Symbol("@test_throws"), :BoundsError, (:call, :fieldname, (:curly, :NTuple, 3, :Int), 4)),
    (:line, 294, :none),
    (:toplevel, (:import, :Base, :isstructtype), (:import, :Base, :type_alignment), (:import, :Base, :return_types)),
    (:line, 295, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isstructtype, (:curly, :Union)))),
    (:line, 296, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isstructtype, (:curly, :Union, :Int, :Float64)))),
    (:line, 297, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isstructtype, :Int))),
    (:line, 298, :none),
    (:macrocall, Symbol("@test"), (:call, :isstructtype, :TLayout)),
    (:line, 299, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :type_alignment, :UInt16), 2)),
    (:line, 300, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :type_alignment, :TLayout), 4)),
    (:line, 301, :none),
    (:let, (:block,
        (:line, 302, :none),
        (:macrocall, Symbol("@test"), (:call, :(>=), (:call, :length, :rts), 3)),
        (:line, 303, :none),
        (:macrocall, Symbol("@test"), (:call, :all, (:call, :.==, :rts, :TLayout)))
      ), (:(=), :rts, (:call, :return_types, :TLayout))),
    (:line, 307, :none),
    (:macrocall, Symbol("@noinline"), (:function, (:call, :f15447, :s, :a), (:block,
          (:line, 308, :none),
          (:if, :s, (:block,
              (:line, 309, :none),
              (:return, :a)
            ), (:block,
              (:line, 311, :none),
              (:(=), :nb, 0),
              (:line, 312, :none),
              (:return, :nb)
            ))
        ))),
    (:line, 315, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:ref, (:call, :functionloc, :f15447), 2), 0)),
    (:line, 318, :none),
    (:macrocall, Symbol("@noinline"), (:function, (:call, :f14346, :id, :mask, :limit), (:block,
          (:line, 319, :none),
          (:if, (:&&, (:call, :(<=), :id, :limit), (:ref, :mask, :id)), (:block,
              (:line, 320, :none),
              (:return, true)
            ))
        ))),
    (:line, 323, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :functionloc, :f14346), 2), (:call, :-, 323, 4))),
    (:line, 326, :none),
    (:(=), (:call, :definitely_not_in_sysimg), (:block,
        (:line, 326, :none),
        :nothing
      )),
    (:line, 327, :none),
    (:for, (:(=), (:tuple, :f, :t), (:tuple, (:tuple, :definitely_not_in_sysimg, (:curly, :Tuple)), (:tuple, (:., :Base, (:quote, #QuoteNode
                :throw_boundserror
              )), (:curly, :Tuple, (:curly, :UnitRange, :Int64), :Int64)))), (:block,
        (:line, 329, :none),
        (:(=), :t, (:call, (:., :Base, (:quote, #QuoteNode
                :tt_cons
              )), (:call, (:., :Core, (:quote, #QuoteNode
                  :Typeof
                )), :f), (:call, (:., :Base, (:quote, #QuoteNode
                  :to_tuple_type
                )), :t))),
        (:line, 330, :none),
        (:(=), :llvmf, (:ccall, (:quote, #QuoteNode
              :jl_get_llvmf
            ), (:curly, :Ptr, :Void), (:tuple, :Any, :Bool, :Bool), :t, false, true)),
        (:line, 331, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), :llvmf, :C_NULL)),
        (:line, 332, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:ccall, (:quote, #QuoteNode
                :jl_get_llvm_fptr
              ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :llvmf), :C_NULL))
      )),
    (:line, 335, :none),
    (:module, true, :MacroTest, (:block,
        (:line, 335, :none),
        (:line, 336, :none),
        (:export, Symbol("@macrotest")),
        (:line, 337, :none),
        (:macro, (:call, :macrotest, (:(::), :x, :Int), (:(::), :y, :Symbol)), (:block,
            (:line, 337, :none)
          )),
        (:line, 338, :none),
        (:macro, (:call, :macrotest, (:(::), :x, :Int), (:(::), :y, :Int)), (:block,
            (:line, 339, :none),
            :nothing
          ))
      )),
    (:line, 343, :none),
    (:let, (:block,
        (:line, 344, :none),
        (:using, :MacroTest),
        (:line, 345, :none),
        (:(=), :a, 1),
        (:line, 346, :none),
        (:(=), :m, (:call, :getfield, (:call, :current_module), (:call, :Symbol, "@macrotest"))),
        (:line, 347, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :which, :m, (:curly, :Tuple, :Int, :Symbol)), (:macrocall, Symbol("@which"), (:macrocall, Symbol("@macrotest"), 1, :a)))),
        (:line, 348, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :which, :m, (:curly, :Tuple, :Int, :Int)), (:macrocall, Symbol("@which"), (:macrocall, Symbol("@macrotest"), 1, 1)))),
        (:line, 350, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, (:call, :methods, :m, (:curly, :Tuple, :Int, :Int))), (:macrocall, Symbol("@which"), (:macrocall, (:., :MacroTest, (:quote, #QuoteNode
                    Symbol("@macrotest")
                  )), 1, 1)))),
        (:line, 351, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :functionloc, (:macrocall, Symbol("@which"), (:macrocall, Symbol("@macrotest"), 1, 1))), (:macrocall, Symbol("@functionloc"), (:macrocall, Symbol("@macrotest"), 1, 1))))
      )),
    (:line, 356, :none),
    (:function, (:call, :f15714, :array_var15714), (:block,
        (:line, 357, :none),
        (:for, (:(=), :index_var15714, (:call, :eachindex, :array_var15714)), (:block,
            (:line, 358, :none),
            (:+=, (:ref, :array_var15714, :index_var15714), 0)
          ))
      )),
    (:line, 362, :none),
    (:function, (:call, :g15714, :array_var15714), (:block,
        (:line, 363, :none),
        (:for, (:(=), :index_var15714, (:call, :eachindex, :array_var15714)), (:block,
            (:line, 364, :none),
            (:+=, (:ref, :array_var15714, :index_var15714), 0)
          )),
        (:line, 366, :none),
        (:for, (:(=), :index_var15714, (:call, :eachindex, :array_var15714)), (:block,
            (:line, 367, :none),
            (:+=, (:ref, :array_var15714, :index_var15714), 0)
          ))
      )),
    (:line, 371, :none),
    (:(=), :used_dup_var_tested15714, false),
    (:line, 372, :none),
    (:(=), :used_unique_var_tested15714, false),
    (:line, 373, :none),
    (:function, (:call, :test_typed_ast_printing, (:(::), :f, :ANY), (:(::), :types, :ANY), :must_used_vars), (:block,
        (:line, 374, :none),
        (:(=), :li, (:ref, (:call, :code_typed, :f, :types), 1)),
        (:line, 375, :none),
        (:(=), :dupnames, (:call, :Set)),
        (:line, 376, :none),
        (:(=), :slotnames, (:call, :Set)),
        (:line, 377, :none),
        (:for, (:(=), :name, (:., :li, (:quote, #QuoteNode
                :slotnames
              ))), (:block,
            (:line, 378, :none),
            (:if, (:call, :in, :name, :slotnames), (:block,
                (:line, 379, :none),
                (:call, :push!, :dupnames, :name)
              ), (:block,
                (:line, 381, :none),
                (:call, :push!, :slotnames, :name)
              ))
          )),
        (:line, 385, :none),
        (:for, (:(=), :name, :must_used_vars), (:block,
            (:line, 386, :none),
            (:macrocall, Symbol("@test"), (:call, :in, :name, :slotnames))
          )),
        (:line, 388, :none),
        (:for, (:(=), :str, (:tuple, (:call, :sprint, :code_warntype, :f, :types), (:call, :stringmime, "text/plain", :li))), (:block,
            (:line, 391, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, (:., (:., :li, (:quote, #QuoteNode
                        :def
                      )), (:quote, #QuoteNode
                      :file
                    ))), (:macrocall, Symbol("@__FILE__")))),
            (:line, 392, :none),
            (:for, (:(=), :var, :must_used_vars), (:block,
                (:line, 393, :none),
                (:macrocall, Symbol("@test"), (:call, :contains, :str, (:call, :string, :var)))
              )),
            (:line, 395, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :contains, :str, "Any"))),
            (:line, 396, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :contains, :str, "ANY"))),
            (:line, 398, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :li, (:quote, #QuoteNode
                        :slotnames
                      ))))), (:block,
                (:line, 399, :none),
                (:(=), :name, (:ref, (:., :li, (:quote, #QuoteNode
                        :slotnames
                      )), :i)),
                (:line, 400, :none),
                (:if, (:call, :in, :name, :dupnames), (:block,
                    (:line, 401, :none),
                    (:macrocall, Symbol("@test"), (:call, :contains, :str, (:string, "_", :i))),
                    (:line, 402, :none),
                    (:if, (:call, :in, :name, :must_used_vars), (:block,
                        (:line, 403, :none),
                        (:global, (:(=), :used_dup_var_tested15714, true))
                      ))
                  ), (:block,
                    (:line, 406, :none),
                    (:macrocall, Symbol("@test"), (:call, :!, (:call, :contains, :str, (:string, "_", :i)))),
                    (:line, 407, :none),
                    (:if, (:call, :in, :name, :must_used_vars), (:block,
                        (:line, 408, :none),
                        (:global, (:(=), :used_unique_var_tested15714, true))
                      ))
                  ))
              ))
          )),
        (:line, 414, :none),
        (:(=), :str, (:call, :sprint, :show, (:call, (:., :Base, (:quote, #QuoteNode
                  :uncompressed_ast
                )), :li))),
        (:line, 417, :none),
        (:for, (:(=), :i, (:(:), 2, (:call, :length, (:., :li, (:quote, #QuoteNode
                    :slotnames
                  ))))), (:block,
            (:line, 418, :none),
            (:(=), :name, (:ref, (:., :li, (:quote, #QuoteNode
                    :slotnames
                  )), :i)),
            (:line, 419, :none),
            (:if, (:call, :in, :name, :must_used_vars), (:block,
                (:line, 420, :none),
                (:macrocall, Symbol("@test"), (:call, :contains, :str, (:string, "_", :i)))
              ))
          ))
      )),
    (:line, 424, :none),
    (:call, :test_typed_ast_printing, :f15714, (:curly, :Tuple, (:curly, :Vector, :Float32)), (:vect, (:quote, #QuoteNode
          :array_var15714
        ), (:quote, #QuoteNode
          :index_var15714
        ))),
    (:line, 426, :none),
    (:call, :test_typed_ast_printing, :g15714, (:curly, :Tuple, (:curly, :Vector, :Float32)), (:vect, (:quote, #QuoteNode
          :array_var15714
        ), (:quote, #QuoteNode
          :index_var15714
        ))),
    (:line, 428, :none),
    (:macrocall, Symbol("@test"), :used_dup_var_tested15714),
    (:line, 429, :none),
    (:macrocall, Symbol("@test"), :used_unique_var_tested15714),
    (:line, 431, :none),
    (:let, (:block,
        (:line, 436, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :lrepr, "LambdaInfo template for getfield(...)")),
        (:line, 437, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :mrepr, "getfield(...)"))
      ), (:(=), :li, (:(::), (:., (:., (:., (:., (:call, :typeof, :getfield), (:quote, #QuoteNode
                    :name
                  )), (:quote, #QuoteNode
                  :mt
                )), (:quote, #QuoteNode
                :cache
              )), (:quote, #QuoteNode
              :func
            )), :LambdaInfo)), (:(=), :lrepr, (:call, :string, :li)), (:(=), :mrepr, (:call, :string, (:., :li, (:quote, #QuoteNode
              :def
            )))), (:(=), :lmime, (:call, :stringmime, "text/plain", :li))),
    (:line, 442, :none),
    (:(=), (:call, :tracefoo, :x, :y), (:block,
        (:line, 442, :none),
        (:call, :+, :x, :y)
      )),
    (:line, 443, :none),
    (:(=), :didtrace, false),
    (:line, 444, :none),
    (:(=), (:call, :tracer, (:(::), :x, (:curly, :Ptr, :Void))), (:block,
        (:line, 444, :none),
        (:block,
          (:macrocall, Symbol("@test"), (:call, :isa, (:call, :unsafe_pointer_to_objref, :x), :LambdaInfo)),
          (:global, (:(=), :didtrace, true)),
          :nothing
        )
      )),
    (:line, 445, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_register_method_tracer
      ), :Void, (:tuple, (:curly, :Ptr, :Void)), (:call, :cfunction, :tracer, :Void, (:tuple, (:curly, :Ptr, :Void)))),
    (:line, 446, :none),
    (:(=), :meth, (:call, :which, :tracefoo, (:curly, :Tuple, :Any, :Any))),
    (:line, 447, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_trace_method
      ), :Void, (:tuple, :Any), :meth),
    (:line, 448, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tracefoo, 1, 2), 3)),
    (:line, 449, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_untrace_method
      ), :Void, (:tuple, :Any), :meth),
    (:line, 450, :none),
    (:macrocall, Symbol("@test"), :didtrace),
    (:line, 451, :none),
    (:(=), :didtrace, false),
    (:line, 452, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tracefoo, 1.0, 2.0), 3.0)),
    (:line, 453, :none),
    (:macrocall, Symbol("@test"), (:call, :!, :didtrace)),
    (:line, 454, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_register_method_tracer
      ), :Void, (:tuple, (:curly, :Ptr, :Void)), :C_NULL),
    (:line, 457, :none),
    (:(=), (:call, :methtracer, (:(::), :x, (:curly, :Ptr, :Void))), (:block,
        (:line, 457, :none),
        (:block,
          (:macrocall, Symbol("@test"), (:call, :isa, (:call, :unsafe_pointer_to_objref, :x), :Method)),
          (:global, (:(=), :didtrace, true)),
          :nothing
        )
      )),
    (:line, 458, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_register_newmeth_tracer
      ), :Void, (:tuple, (:curly, :Ptr, :Void)), (:call, :cfunction, :methtracer, :Void, (:tuple, (:curly, :Ptr, :Void)))),
    (:line, 459, :none),
    (:(=), (:call, :tracefoo2, :x, :y), (:block,
        (:line, 459, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 460, :none),
    (:macrocall, Symbol("@test"), :didtrace),
    (:line, 461, :none),
    (:(=), :didtrace, false),
    (:line, 462, :none),
    (:(=), (:call, :tracefoo, (:(::), :x, :Int64), (:(::), :y, :Int64)), (:block,
        (:line, 462, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 463, :none),
    (:macrocall, Symbol("@test"), :didtrace),
    (:line, 464, :none),
    (:(=), :didtrace, false),
    (:line, 465, :none),
    (:ccall, (:quote, #QuoteNode
        :jl_register_newmeth_tracer
      ), :Void, (:tuple, (:curly, :Ptr, :Void)), :C_NULL),
    (:line, 468, :none),
    (:for, (:(=), :i, (:(:), 1, 100)), (:block,
        (:line, 468, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, :fLargeTable, (:(::), (:curly, :Val, (:$, :i))), (:(::), :Any)), (:block,
              (:line, 468, :none),
              1
            )))
      )),
    (:line, 469, :none),
    (:for, (:(=), :i, (:(:), 1, 100)), (:block,
        (:line, 469, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, :fLargeTable, (:(::), :Any), (:(::), (:curly, :Val, (:$, :i)))), (:block,
              (:line, 469, :none),
              2
            )))
      )),
    (:line, 470, :none),
    (:(=), (:call, :fLargeTable, (:..., (:(::), :Any))), (:block,
        (:line, 470, :none),
        3
      )),
    (:line, 471, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :methods, :fLargeTable, (:curly, :Tuple))), 1)),
    (:line, 472, :none),
    (:(=), (:call, :fLargeTable, (:(::), :Complex), (:(::), :Complex)), (:block,
        (:line, 472, :none),
        4
      )),
    (:line, 473, :none),
    (:(=), (:call, :fLargeTable, (:..., (:(::), (:curly, :Union, :Complex64, :Complex128)))), (:block,
        (:line, 473, :none),
        5
      )),
    (:line, 474, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :methods, :fLargeTable, (:curly, :Tuple))), 1)),
    (:line, 475, :none),
    (:(=), (:call, :fLargeTable), (:block,
        (:line, 475, :none),
        4
      )),
    (:line, 476, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :methods, :fLargeTable)), 204)),
    (:line, 477, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :methods, :fLargeTable, (:curly, :Tuple))), 1)),
    (:line, 478, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fLargeTable, (:call, :*, 1, :im), (:call, :*, 2, :im)), 4)),
    (:line, 479, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fLargeTable, (:call, :*, 1.0, :im), (:call, :*, 2.0, :im)), 5)),
    (:line, 480, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :fLargeTable, (:call, (:curly, :Val, 1)), (:call, (:curly, :Val, 1)))),
    (:line, 481, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fLargeTable, (:call, (:curly, :Val, 1)), 1), 1)),
    (:line, 482, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :fLargeTable, 1, (:call, (:curly, :Val, 1))), 2)),
    (:line, 485, :none),
    (:function, (:call, :f15280, :x), (:block,
        (:line, 485, :none)
      )),
    (:line, 486, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:ref, (:call, :functionloc, :f15280), 2), 0)),
    (:line, 489, :none),
    (:function, (:call, :module_depth, (:(::), :from, :Module), (:(::), :to, :Module)), (:block,
        (:line, 490, :none),
        (:if, (:call, :(===), :from, :to), (:block,
            (:line, 491, :none),
            (:return, 0)
          ), (:block,
            (:line, 493, :none),
            (:return, (:call, :+, 1, (:call, :module_depth, :from, (:call, :module_parent, :to))))
          ))
      )),
    (:line, 496, :none),
    (:function, (:call, :has_backslashes, (:(::), :mod, :Module)), (:block,
        (:line, 497, :none),
        (:for, (:(=), :n, (:call, :names, :mod, true, true)), (:block,
            (:line, 498, :none),
            (:||, (:call, :isdefined, :mod, :n), (:continue,)),
            (:line, 499, :none),
            (:&&, (:call, (:., :Base, (:quote, #QuoteNode
                    :isdeprecated
                  )), :mod, :n), (:continue,)),
            (:line, 500, :none),
            (:(=), :f, (:call, :getfield, :mod, :n)),
            (:line, 501, :none),
            (:if, (:&&, (:call, :isa, :f, :Module), (:call, :(<=), (:call, :module_depth, :Main, :f), (:call, :module_depth, :Main, :mod))), (:block,
                (:line, 502, :none),
                (:continue,)
              )),
            (:line, 504, :none),
            (:(=), :h, (:call, :has_backslashes, :f)),
            (:line, 505, :none),
            (:||, (:call, :isnull, :h), (:return, :h))
          )),
        (:line, 507, :none),
        (:return, (:call, (:curly, :Nullable, :Method)))
      )),
    (:line, 509, :none),
    (:function, (:call, :has_backslashes, (:(::), :f, :Function)), (:block,
        (:line, 510, :none),
        (:for, (:(=), :m, (:call, :methods, :f)), (:block,
            (:line, 511, :none),
            (:(=), :h, (:call, :has_backslashes, :m)),
            (:line, 512, :none),
            (:||, (:call, :isnull, :h), (:return, :h))
          )),
        (:line, 514, :none),
        (:return, (:call, (:curly, :Nullable, :Method)))
      )),
    (:line, 516, :none),
    (:function, (:call, :has_backslashes, (:(::), :meth, :Method)), (:block,
        (:line, 517, :none),
        (:if, (:call, :in, '\\', (:call, :string, (:., :meth, (:quote, #QuoteNode
                  :file
                )))), (:block,
            (:line, 518, :none),
            (:return, (:call, (:curly, :Nullable, :Method), :meth))
          ), (:block,
            (:line, 520, :none),
            (:return, (:call, (:curly, :Nullable, :Method)))
          ))
      )),
    (:line, 523, :none),
    (:(=), (:call, :has_backslashes, :x), (:block,
        (:line, 523, :none),
        (:call, (:curly, :Nullable, :Method))
      )),
    (:line, 524, :none),
    (:(=), :h16850, (:call, :has_backslashes, :Base)),
    (:line, 525, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 526, :none),
        (:if, (:call, :isnull, :h16850), (:block,
            (:line, 527, :none),
            (:call, :warn, "No methods found in Base with backslashes in file name, ", "skipping test for Base.url")
          ), (:block,
            (:line, 530, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, '\\', (:call, (:., :Base, (:quote, #QuoteNode
                        :url
                      )), (:call, :get, :h16850)))))
          ))
      ), (:block,
        (:line, 533, :none),
        (:macrocall, Symbol("@test"), (:call, :isnull, :h16850))
      )),
    (:line, 537, :none),
    (:let, (:block,
        (:line, 538, :none),
        (:(=), :a, (:macrocall, Symbol("@code_typed"), (:call, :+, 1, 1))),
        (:line, 539, :none),
        (:(=), :b, (:macrocall, Symbol("@code_lowered"), (:call, :+, 1, 1))),
        (:line, 540, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :a, :LambdaInfo)),
        (:line, 541, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :b, :LambdaInfo)),
        (:line, 543, :none),
        (:function, (:call, :thing, (:(::), :a, :Array), (:(::), :b, :Real)), (:block,
            (:line, 544, :none),
            (:call, :println, "thing")
          )),
        (:line, 546, :none),
        (:function, (:call, :thing, (:(::), :a, :AbstractArray), (:(::), :b, :Int)), (:block,
            (:line, 547, :none),
            (:call, :println, "blah")
          )),
        (:line, 549, :none),
        (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :thing, (:call, :rand, 10), 1)),
        (:line, 550, :none),
        (:(=), :a, (:macrocall, Symbol("@code_typed"), (:call, :thing, (:call, :rand, 10), 1))),
        (:line, 551, :none),
        (:(=), :b, (:macrocall, Symbol("@code_lowered"), (:call, :thing, (:call, :rand, 10), 1))),
        (:line, 552, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :a), 0)),
        (:line, 553, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :b), 0))
      )),
    (:line, 556, :none),
    (:type, true, :A18434, (:block,
        (:line, 557, :none)
      )),
    (:line, 558, :none),
    (:(=), (:call, (:(::), (:curly, :Type, :A18434)), (:parameters, (:kw, :y, 1)), :x), (:block,
        (:line, 558, :none),
        1
      )),
    (:line, 560, :none),
    (:global, (:(=), :counter18434, 0)),
    (:line, 561, :none),
    (:function, (:call, :get_A18434), (:block,
        (:line, 562, :none),
        (:global, :counter18434),
        (:line, 563, :none),
        (:+=, :counter18434, 1),
        (:line, 564, :none),
        (:return, :A18434)
      )),
    (:line, 566, :none),
    (:macrocall, Symbol("@which"), (:call, (:call, :get_A18434), (:parameters, (:kw, :y, 2)), 1)),
    (:line, 567, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :counter18434, 1)),
    (:line, 568, :none),
    (:macrocall, Symbol("@which"), (:call, (:call, :get_A18434), 1, (:kw, :y, 2))),
    (:line, 569, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :counter18434, 2))
  ))