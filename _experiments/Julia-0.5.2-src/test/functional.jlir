(:quote, (:block,
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, (:->, :x, (:block,
              (:line, 6, :none),
              (:ref, (:string, :x), (:(:), :end, :end))
            )), (:(:), 9, 11)), (:vect, "9", "0", "1"))),
    (:line, 8, :none),
    (:let, (:block,
        (:line, 9, :none),
        (:call, :map!, :sin, :a),
        (:line, 10, :none),
        (:macrocall, Symbol("@test"), (:call, :isequal, :a, (:call, :sin, (:vect, 1.0, 2.0))))
      ), (:(=), :a, (:vect, 1.0, 2.0))),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, (:->, :i, (:block,
              (:line, 13, :none),
              (:call, :sqrt, :i)
            )), (:(:), 1, 5)), (:comprehension, (:generator, (:call, :sqrt, :i), (:(=), :i, (:(:), 1, 5)))))),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, (:->, :i, (:block,
              (:line, 14, :none),
              (:call, :sqrt, :i)
            )), (:(:), 2, 6)), (:comprehension, (:generator, (:call, :sqrt, :i), (:(=), :i, (:(:), 2, 6)))))),
    (:line, 17, :none),
    (:let, (:block,
        (:line, 18, :none),
        (:call, :map, (:->, :x, (:block,
              (:line, 18, :none),
              (:call, :print, :io, :x)
            )), (:(:), 1, 2)),
        (:line, 19, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :takebuf_string, :io), "12"))
      ), (:(=), :io, (:call, :IOBuffer, 3))),
    (:line, 24, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :typeof, (:call, :map, (:->, :x, (:block,
                (:line, 24, :none),
                :x
              )), (:call, (:curly, :Array, (:curly, :Union)), 0))), (:curly, :Array, (:curly, :Union), 1))),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, (:tuple, :x, :y), (:block,
              (:line, 27, :none),
              (:call, :+, :x, :y)
            )), (:tuple, 1, 2, 3), (:tuple, 4, 5, 6)), (:tuple, 5, 7, 9))),
    (:line, 28, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, (:tuple, :x, :y), (:block,
              (:line, 28, :none),
              (:call, :+, :x, :y)
            )), (:tuple, 100001, 100002, 100003), (:tuple, 100004, 100005, 100006)), (:tuple, 200005, 200007, 200009))),
    (:line, 33, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, :c, (:block,
              (:line, 33, :none),
              (:call, :Char, (:call, :+, :c, 1))
            )), "abcDEF"), "bcdEFG")),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :map, :Integer, (:ref, :Any, 1, 2)), (:curly, :Vector, :Int))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :map, :Integer, (:ref, :Any)), (:curly, :Vector, :Integer))),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :x, (:block,
              (:line, 40, :none),
              (:call, :>, :x, 1)
            )), (:hcat, 0, 1, 2, 3, 2, 1, 0)), (:vect, 2, 3, 2))),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :x, (:block,
              (:line, 42, :none),
              (:call, :>, :x, 10)
            )), (:hcat, 0, 1, 2, 3, 2, 1, 0)), (:vect,))),
    (:line, 43, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :ss, (:block,
              (:line, 43, :none),
              (:call, :(==), (:call, :length, :ss), 3)
            )), (:vect, "abcd", "efg", "hij", "klmn", "opq")), (:vect, "efg", "hij", "opq"))),
    (:line, 46, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :collect, 1)), (:call, :size, 1))),
    (:line, 50, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :filter, (:->, :x, (:block,
                (:line, 50, :none),
                (:ref, :x, 1)
              )), (:call, :zip, (:vect, true, false, true, false), "abcd"))), (:vect, (:tuple, true, 'a'), (:tuple, true, 'c')))),
    (:line, 52, :none),
    (:let, (:block,
        (:line, 53, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :z), (:vect, (:tuple, 1), (:tuple, 2)))),
        (:line, 55, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :z), (:curly, :Tuple, :Int)))
      ), (:(=), :z, (:call, :zip, (:(:), 1, 2)))),
    (:line, 58, :none),
    (:let, (:block,
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :z), (:vect, (:tuple, 1, 3), (:tuple, 2, 4)))),
        (:line, 60, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :z), (:curly, :Tuple, :Int, :Int)))
      ), (:(=), :z, (:call, :zip, (:(:), 1, 2), (:(:), 3, 4)))),
    (:line, 63, :none),
    (:let, (:block,
        (:line, 64, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :z), (:vect, (:tuple, 1, 3, 5), (:tuple, 2, 4, 6)))),
        (:line, 65, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :z), (:curly, :Tuple, :Int, :Int, :Int)))
      ), (:(=), :z, (:call, :zip, (:(:), 1, 2), (:(:), 3, 4), (:(:), 5, 6)))),
    (:line, 68, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, :Filter, :isodd, (:(:), 1, 5))), :Int)),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:ref, (:call, :collect, :Float64, (:call, :Filter, :isodd, (:vect, 1, 2, 3, 4))), 1), 1.0)),
    (:line, 73, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :collect, :Any, (:vect, 1, 2)), (:curly, :Vector, :Any))),
    (:line, 76, :none),
    (:let, (:block,
        (:line, 77, :none),
        (:for, (:(=), (:tuple, :i, :x), (:call, :enumerate, (:call, :eachline, :b))), (:block,
            (:line, 78, :none),
            (:call, :push!, :a, (:tuple, :i, :x))
          )),
        (:line, 80, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, (:tuple, 1, "1\n"), (:tuple, 2, "2\n"), (:tuple, 3, "3\n"))))
      ), (:(=), :b, (:call, :IOBuffer, "1\n2\n3\n")), (:(=), :a, (:vect,))),
    (:line, 84, :none),
    (:let, (:block,
        (:line, 87, :none),
        (:for, (:(=), (:tuple, :number, :letter), (:call, :zip, (:call, :eachline, :zeb), :letters)), (:block,
            (:line, 88, :none),
            (:call, :push!, :res, (:tuple, (:call, :parse, :Int, (:call, :strip, :number)), :letter))
          )),
        (:line, 90, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :res, (:vect, (:tuple, 1, 'a'), (:tuple, 2, 'b'), (:tuple, 3, 'c'), (:tuple, 4, 'd'), (:tuple, 5, 'e'))))
      ), (:(=), :zeb, (:call, :IOBuffer, "1\n2\n3\n4\n5\n")), (:(=), :letters, (:vect, 'a', 'b', 'c', 'd', 'e')), (:(=), :res, (:vect,))),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :zip, (:call, :cycle, (:(:), 1, 3)), (:(:), 1, 7))), 7)),
    (:line, 94, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :zip, (:call, :cycle, (:(:), 1, 3)), (:(:), 1, 7), (:call, :cycle, (:(:), 1, 3)))), 7)),
    (:line, 95, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :zip, (:(:), 1, 3), (:call, (:., :Base, (:quote, #QuoteNode
                  :product
                )), (:(:), 1, 7), (:call, :cycle, (:(:), 1, 3))))), 3)),
    (:line, 96, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :zip, (:(:), 1, 3), (:call, (:., :Base, (:quote, #QuoteNode
                  :product
                )), (:(:), 1, 7), (:call, :cycle, (:(:), 1, 3))), 8)), 1)),
    (:line, 100, :none),
    (:let, (:block,
        (:line, 101, :none),
        (:(=), (:tuple, :_, :st), (:call, :next, :s, (:call, :start, :s))),
        (:line, 102, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :rest, :s, :st)), (:vect, 'e', 'l', 'l', 'o')))
      ), (:(=), :s, "hello")),
    (:line, 105, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :collect, (:call, :rest, (:call, :countfrom, 1), 5))),
    (:line, 110, :none),
    (:let, (:block,
        (:line, 111, :none),
        (:for, (:(=), :j, (:call, :countfrom, 0, 2)), (:block,
            (:line, 112, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, (:call, :*, :i, 2))),
            (:line, 113, :none),
            (:+=, :i, 1),
            (:line, 114, :none),
            (:||, (:call, :(<=), :i, 10), (:break,))
          ))
      ), (:(=), :i, 0)),
    (:line, 121, :none),
    (:let, (:block,
        (:line, 122, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :collect, :t)), 5)),
        (:line, 124, :none),
        (:for, (:(=), :j, :t), (:block,
            (:line, 125, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, (:call, :*, :i, 2))),
            (:line, 126, :none),
            (:+=, :i, 1)
          )),
        (:line, 128, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 5))
      ), (:(=), :t, (:call, :take, (:(:), 0, 2, 8), 10)), (:(=), :i, 0)),
    (:line, 131, :none),
    (:let, (:block,
        (:line, 132, :none),
        (:for, (:(=), :j, (:call, :take, (:(:), 0, 2, 100), 10)), (:block,
            (:line, 133, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, (:call, :*, :i, 2))),
            (:line, 134, :none),
            (:+=, :i, 1)
          )),
        (:line, 136, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 10))
      ), (:(=), :i, 0)),
    (:line, 139, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :take, (:(:), 1, 3), (:call, :typemax, :Int))), 3)),
    (:line, 140, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :take, (:call, :countfrom, 1), 3)), 3)),
    (:line, 141, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :take, (:(:), 1, 6), 3)), 3)),
    (:line, 146, :none),
    (:let, (:block,
        (:line, 147, :none),
        (:for, (:(=), :j, (:call, :drop, (:(:), 0, 2, 10), 2)), (:block,
            (:line, 148, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, (:call, :*, (:call, :+, :i, 2), 2))),
            (:line, 149, :none),
            (:+=, :i, 1)
          )),
        (:line, 151, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 4))
      ), (:(=), :i, 0)),
    (:line, 154, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :drop, (:(:), 1, 3), (:call, :typemax, :Int))), 0)),
    (:line, 155, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, :drop, (:call, :countfrom, 1), 3)), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 156, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :length, (:call, :drop, (:call, :countfrom, 1), 3))),
    (:line, 161, :none),
    (:let, (:block,
        (:line, 162, :none),
        (:for, (:(=), :j, (:call, :cycle, (:(:), 0, 3))), (:block,
            (:line, 163, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, (:call, :%, :i, 4))),
            (:line, 164, :none),
            (:+=, :i, 1),
            (:line, 165, :none),
            (:||, (:call, :(<=), :i, 10), (:break,))
          ))
      ), (:(=), :i, 0)),
    (:line, 172, :none),
    (:let, (:block,
        (:line, 173, :none),
        (:for, (:(=), :j, (:call, :repeated, 1, 10)), (:block,
            (:line, 174, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, 1)),
            (:line, 175, :none),
            (:+=, :i, 1)
          )),
        (:line, 177, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 10))
      ), (:(=), :i, 0)),
    (:line, 179, :none),
    (:let, (:block,
        (:line, 180, :none),
        (:for, (:(=), :j, (:call, :repeated, 1)), (:block,
            (:line, 181, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :j, 1)),
            (:line, 182, :none),
            (:+=, :i, 1),
            (:line, 183, :none),
            (:||, (:call, :(<=), :i, 10), (:break,))
          ))
      ), (:(=), :i, 0)),
    (:line, 186, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, :repeated, 0)), :Int)),
    (:line, 187, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, :repeated, 0, 5)), :Int)),
    (:line, 188, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, :repeated, 0)), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 189, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, :repeated, 0, 5)), (:call, (:., :Base, (:quote, #QuoteNode
              :HasLength
            ))))),
    (:line, 190, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, :repeated, 0)), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 191, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, :repeated, 0, 5)), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 192, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, :zip, (:call, :repeated, 0), (:call, :repeated, 0))), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 199, :none),
    (:for, (:(=), :itr, (:vect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 0)), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 1, 0)), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 0), (:(:), 1, 2)), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 0), (:(:), 1, 1), (:(:), 1, 2)), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 1), (:(:), 1, 0), (:(:), 1, 2)), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 1), (:(:), 1, 2), (:(:), 1, 0)))), (:block,
        (:line, 205, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, :itr)),
        (:line, 206, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :collect, :itr)))
      )),
    (:line, 210, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2))), (:comprehension, (:generator, (:tuple, :i), (:(=), :i, (:(:), 1, 2)))))),
    (:line, 211, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 3, 4))), (:comprehension, (:generator, (:tuple, :i, :j), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)))))),
    (:line, 212, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 3, 4), (:(:), 5, 6))), (:comprehension, (:generator, (:tuple, :i, :j, :k), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)), (:(=), :k, (:(:), 5, 6)))))),
    (:line, 215, :none),
    (:let, (:block,
        (:line, 216, :none),
        (:(=), :expected, (:vect, (:tuple, 1, 3, 5), (:tuple, 2, 3, 5), (:tuple, 1, 4, 5), (:tuple, 2, 4, 5), (:tuple, 1, 3, 6), (:tuple, 2, 3, 6), (:tuple, 1, 4, 6), (:tuple, 2, 4, 6))),
        (:line, 217, :none),
        (:(=), :actual, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 3, 4), (:(:), 5, 6))),
        (:line, 218, :none),
        (:for, (:(=), (:tuple, :exp, :act), (:call, :zip, :expected, :actual)), (:block,
            (:line, 219, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :exp, :act))
          ))
      )),
    (:line, 224, :none),
    (:let, (:block,
        (:line, 225, :none),
        (:(=), (:tuple, :a, :b), (:tuple, (:(:), 1, 3), (:vcat, (:row, 4, 6), (:row, 5, 7)))),
        (:line, 227, :none),
        (:(=), :p, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), :a, :b)),
        (:line, 228, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :p), (:tuple, 3, 2, 2))),
        (:line, 229, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :p), 12)),
        (:line, 230, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ndims, :p), 3)),
        (:line, 231, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :p), (:curly, :NTuple, 2, :Int))),
        (:line, 232, :none),
        (:(=), :cp, (:call, :collect, :p)),
        (:line, 233, :none),
        (:for, (:(=), :i, (:(:), 1, 3)), (:block,
            (:line, 234, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :cp, :i, :(:), :(:)), (:vcat, (:row, (:tuple, :i, 4), (:tuple, :i, 6)), (:row, (:tuple, :i, 5), (:tuple, :i, 7)))))
          ))
      )),
    (:line, 240, :none),
    (:let, (:block,
        (:line, 241, :none),
        (:(=), (:tuple, :a, :b, :c), (:tuple, (:(:), 1, 2), (:(:), 1.0, 10.0), (:(:), (:call, :Int32, 1), (:call, :Int32, 0)))),
        (:line, 244, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a)), 2)),
        (:line, 245, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b)), 20)),
        (:line, 246, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b, :c)), 0)),
        (:line, 249, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a)), (:tuple, 2))),
        (:line, 250, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b)), (:tuple, 2, 10))),
        (:line, 251, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b, :c)), (:tuple, 2, 10, 0))),
        (:line, 254, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a)), (:curly, :Tuple, :Int))),
        (:line, 255, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b)), (:curly, :Tuple, :Int, :Float64))),
        (:line, 256, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b, :c)), (:curly, :Tuple, :Int, :Float64, :Int32))),
        (:line, 259, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ndims, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a)), 1)),
        (:line, 260, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ndims, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b)), 2)),
        (:line, 261, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :ndims, (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :a, :b, :c)), 3))
      )),
    (:line, 265, :none),
    (:let, (:block,
        (:line, 266, :none),
        (:(=), (:tuple, :a, :b, :c), (:tuple, (:call, :randn, 4, 4), (:call, :randn, 3, 3, 3), (:call, :randn, 2, 2, 2, 2))),
        (:line, 267, :none),
        (:(=), :args, (:ref, :Any, (:tuple, :a), (:tuple, :a, :a), (:tuple, :a, :b), (:tuple, :a, :a, :a), (:tuple, :a, :b, :c))),
        (:line, 272, :none),
        (:(=), :sizes, (:ref, :Any, (:tuple, 4, 4), (:tuple, 4, 4, 4, 4), (:tuple, 4, 4, 3, 3, 3), (:tuple, 4, 4, 4, 4, 4, 4), (:tuple, 4, 4, 3, 3, 3, 2, 2, 2, 2))),
        (:line, 277, :none),
        (:for, (:(=), (:tuple, :method, :fun), (:call, :zip, (:vect, :size, :ndims, :length), (:vect, (:->, :x, (:block,
                    (:line, 277, :none),
                    :x
                  )), :length, :prod))), (:block,
            (:line, 278, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :args))), (:block,
                (:line, 279, :none),
                (:macrocall, Symbol("@test"), (:comparison, (:call, :method, (:call, (:., :Base, (:quote, #QuoteNode
                            :product
                          )), (:..., (:ref, :args, :i)))), :(==), (:call, :method, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                              :product
                            )), (:..., (:ref, :args, :i))))), :(==), (:call, :fun, (:ref, :sizes, :i))))
              ))
          ))
      )),
    (:line, 285, :none),
    (:let, (:block,
        (:line, 286, :none),
        (:(=), :iters, (:tuple, (:(:), 1, 2), (:call, :rand, 2, 2, 2), (:call, :take, (:(:), 1, 4), 2), (:call, (:., :Base, (:quote, #QuoteNode
                  :product
                )), (:(:), 1, 2), (:(:), 1, 3)), (:call, (:., :Base, (:quote, #QuoteNode
                  :product
                )), (:call, :rand, 2, 2), (:call, :rand, 1, 1, 1)))),
        (:line, 292, :none),
        (:for, (:(=), :method, (:vect, :size, :length, :ndims, :eltype)), (:block,
            (:line, 293, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :iters))), (:block,
                (:line, 294, :none),
                (:(=), :args, (:ref, :iters, :i)),
                (:line, 295, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :method, (:call, (:., :Base, (:quote, #QuoteNode
                            :product
                          )), (:..., :args))), (:call, :method, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                              :product
                            )), (:..., :args)))))),
                (:line, 296, :none),
                (:for, (:(=), :j, (:(:), 1, (:call, :length, :iters))), (:block,
                    (:line, 297, :none),
                    (:(=), :args, (:tuple, (:ref, :iters, :i), (:ref, :iters, :j))),
                    (:line, 298, :none),
                    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :method, (:call, (:., :Base, (:quote, #QuoteNode
                                :product
                              )), (:..., :args))), (:call, :method, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                                  :product
                                )), (:..., :args)))))),
                    (:line, 299, :none),
                    (:for, (:(=), :k, (:(:), 1, (:call, :length, :iters))), (:block,
                        (:line, 300, :none),
                        (:(=), :args, (:tuple, (:ref, :iters, :i), (:ref, :iters, :j), (:ref, :iters, :k))),
                        (:line, 301, :none),
                        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :method, (:call, (:., :Base, (:quote, #QuoteNode
                                    :product
                                  )), (:..., :args))), (:call, :method, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                                      :product
                                    )), (:..., :args))))))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 309, :none),
    (:let, (:block,
        (:line, 310, :none),
        (:(=), :a, (:(:), 1, 2)),
        (:line, 311, :none),
        (:(=), :b, (:call, :countfrom, 1)),
        (:line, 312, :none),
        (:(=), :ab, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), :a, :b)),
        (:line, 313, :none),
        (:(=), :ba, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), :b, :a)),
        (:line, 314, :none),
        (:(=), :abexp, (:vect, (:tuple, 1, 1), (:tuple, 2, 1), (:tuple, 1, 2), (:tuple, 2, 2), (:tuple, 1, 3), (:tuple, 2, 3))),
        (:line, 315, :none),
        (:(=), :baexp, (:vect, (:tuple, 1, 1), (:tuple, 2, 1), (:tuple, 3, 1), (:tuple, 4, 1), (:tuple, 5, 1), (:tuple, 6, 1))),
        (:line, 316, :none),
        (:for, (:(=), (:tuple, :expected, :actual), (:call, :zip, (:vect, :abexp, :baexp), (:vect, :ab, :ba))), (:block,
            (:line, 317, :none),
            (:for, (:(=), (:tuple, :i, :el), (:call, :enumerate, :actual)), (:block,
                (:line, 318, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :el, (:ref, :expected, :i))),
                (:line, 319, :none),
                (:&&, (:call, :(==), :i, (:call, :length, :expected)), (:break,))
              )),
            (:line, 321, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :length, :actual)),
            (:line, 322, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :size, :actual)),
            (:line, 323, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :ndims, :actual))
          )),
        (:line, 327, :none),
        (:for, (:(=), :itr, (:ref, :Any, (:call, :countfrom, 1), (:call, :Filter, (:->, :i, (:block,
                    (:line, 327, :none),
                    0
                  )), (:(:), 1, 10)))), (:block,
            (:line, 328, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :length, (:call, (:., :Base, (:quote, #QuoteNode
                      :product
                    )), :itr))),
            (:line, 329, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :size, (:call, (:., :Base, (:quote, #QuoteNode
                      :product
                    )), :itr))),
            (:line, 330, :none),
            (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :ndims, (:call, (:., :Base, (:quote, #QuoteNode
                      :product
                    )), :itr)))
          ))
      )),
    (:line, 335, :none),
    (:let, (:block,
        (:line, 336, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :SizeUnknown
                ))))),
        (:line, 337, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), (:(:), 1, 2), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :SizeUnknown
                ))))),
        (:line, 338, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
                  :SizeUnknown
                ))))),
        (:line, 339, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :SizeUnknown
                ))))),
        (:line, 340, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
                  :IsInfinite
                ))))),
        (:line, 341, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratorsize
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), (:call, :countfrom, 1), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :IsInfinite
                )))))
      ), (:(=), :f1, (:call, :Filter, (:->, :i, (:block,
              (:line, 335, :none),
              (:call, :>, :i, 0)
            )), (:(:), 1, 10)))),
    (:line, 343, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 344, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :countfrom, 2), (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 345, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :countfrom, 1), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 346, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasShape
            ))))),
    (:line, 347, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasShape
            ))))),
    (:line, 348, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :take, (:(:), 1, 2), 1), (:call, :take, (:(:), 1, 2), 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasShape
            ))))),
    (:line, 349, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :take, (:(:), 1, 2), 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasLength
            ))))),
    (:line, 350, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:vcat, (:row, 1, 2), (:row, 3, 4)))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasShape
            ))))),
    (:line, 353, :none),
    (:let, (:block,
        (:line, 354, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                ))))),
        (:line, 355, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), (:(:), 1, 2), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                ))))),
        (:line, 356, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                ))))),
        (:line, 357, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                ))))),
        (:line, 358, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), :f1, (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                ))))),
        (:line, 359, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :iteratoreltype
                )), (:call, (:., :Base, (:quote, #QuoteNode
                    :product
                  )), (:call, :countfrom, 1), :f1)), (:call, (:., :Base, (:quote, #QuoteNode
                  :HasEltype
                )))))
      ), (:(=), :f1, (:call, :Filter, (:->, :i, (:block,
              (:line, 353, :none),
              (:call, :>, :i, 0)
            )), (:(:), 1, 10)))),
    (:line, 361, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 362, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :countfrom, 1), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 363, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 364, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 1, 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 365, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :take, (:(:), 1, 2), 1), (:call, :take, (:(:), 1, 2), 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 366, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:call, :take, (:(:), 1, 2), 2))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 367, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:vcat, (:row, 1, 2), (:row, 3, 4)))), (:call, (:., :Base, (:quote, #QuoteNode
              :HasEltype
            ))))),
    (:line, 369, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 3, 4))), (:vcat, (:row, (:tuple, 1, 3), (:tuple, 1, 4)), (:row, (:tuple, 2, 3), (:tuple, 2, 4))))),
    (:line, 370, :none),
    (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 0), (:(:), 1, 2))))),
    (:line, 371, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:(:), 1, 10), (:(:), 4, 6))), 60)),
    (:line, 372, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratorsize
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :product
              )), (:(:), 1, 2), (:call, :countfrom, 1))), (:call, (:., :Base, (:quote, #QuoteNode
              :IsInfinite
            ))))),
    (:line, 377, :none),
    (:import, :Base, :flatten),
    (:line, 379, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :flatten, (:ref, :Any, (:(:), 1, 2), (:(:), 4, 5)))), (:ref, :Any, 1, 2, 4, 5))),
    (:line, 380, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :flatten, (:ref, :Any, (:call, :flatten, (:ref, :Any, (:(:), 1, 2), (:(:), 6, 5))), (:call, :flatten, (:ref, :Any, (:(:), 10, 7), (:(:), 10, 9)))))), (:ref, :Any, 1, 2))),
    (:line, 381, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :flatten, (:ref, :Any, (:call, :flatten, (:ref, :Any, (:(:), 1, 2), (:(:), 4, 5))), (:call, :flatten, (:ref, :Any, (:(:), 6, 7), (:(:), 8, 9)))))), (:ref, :Any, 1, 2, 4, 5, 6, 7, 8, 9))),
    (:line, 382, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :flatten, (:ref, :Any, (:call, :flatten, (:ref, :Any, (:(:), 1, 2), (:(:), 6, 5))), (:call, :flatten, (:ref, :Any, (:(:), 6, 7), (:(:), 8, 9)))))), (:ref, :Any, 1, 2, 6, 7, 8, 9))),
    (:line, 383, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, :flatten, (:ref, :Any, (:(:), 2, 1)))), (:ref, :Any))),
    (:line, 384, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, :flatten, (:ref, (:curly, :UnitRange, :Int8), (:(:), 1, 2), (:(:), 3, 4)))), :Int8)),
    (:line, 385, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :collect, (:call, :flatten, (:ref, :Any)))),
    (:line, 387, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :iteratoreltype
            )), (:call, (:., :Base, (:quote, #QuoteNode
                :Flatten
              )), (:generator, (:generator, :i, (:(=), :i, (:(:), 1, 2))), (:(=), :j, (:(:), 1, 1))))), (:call, (:., :Base, (:quote, #QuoteNode
              :EltypeUnknown
            ))))),
    (:line, 390, :none),
    (:let, (:block,
        (:line, 391, :none),
        (:(=), :a, (:vect,)),
        (:line, 392, :none),
        (:call, :foreach, (:->, (:tuple,), (:block,
              (:line, 392, :none),
              (:call, :push!, :a, 0)
            ))),
        (:line, 393, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, 0))),
        (:line, 394, :none),
        (:(=), :a, (:vect,)),
        (:line, 395, :none),
        (:call, :foreach, (:->, :x, (:block,
              (:line, 395, :none),
              (:call, :push!, :a, :x)
            )), (:vect, 1, 5, 10)),
        (:line, 396, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, 1, 5, 10))),
        (:line, 397, :none),
        (:(=), :a, (:vect,)),
        (:line, 398, :none),
        (:call, :foreach, (:->, (:tuple, (:..., :args)), (:block,
              (:line, 398, :none),
              (:call, :push!, :a, :args)
            )), (:vect, 2, 4, 6), (:vect, 10, 20, 30)),
        (:line, 399, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, (:tuple, 2, 10), (:tuple, 4, 20), (:tuple, 6, 30))))
      )),
    (:line, 404, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, (:generator, (:call, :/, :i, 2), (:(=), :i, (:(:), 1, 2)))), 1.5)),
    (:line, 405, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :*, 2, :i), (:(=), :i, (:(:), 2, 5)))), (:vect, 4, 6, 8, 10))),
    (:line, 406, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :+, :i, (:call, :*, 10, :j)), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)))), (:vcat, (:row, 31, 41), (:row, 32, 42)))),
    (:line, 407, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :+, :i, (:call, :*, 10, :j)), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)), (:(=), :k, (:(:), 1, 1)))), (:call, :reshape, (:vcat, (:row, 31, 41), (:row, 32, 42)), (:tuple, 2, 2, 1)))),
    (:line, 409, :none),
    (:let, (:block,
        (:line, 410, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :A, (:vect, 3, 5))),
        (:line, 411, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :A, (:curly, :Vector, :Float64)))
      ), (:(=), :A, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :Generator
              )), (:->, :x, (:block,
                (:line, 409, :none),
                (:call, :*, 2, :x)
              )), (:ref, :Real, 1.5, 2.5))))),
    (:line, 414, :none),
    (:let, (:block,
        (:line, 415, :none),
        (:call, :f, (:generator, (:call, :+, :i, :j), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 5))))
      ), (:(=), (:call, :f, :g), (:block,
          (:line, 414, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:., :g, (:quote, #QuoteNode
                    :iter
                  ))), (:tuple, 2, 3)))
        ))),
    (:line, 418, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :Generator
              )), :+, (:vect, 1, 2), (:vect, 10, 20))), (:vect, 11, 22))),
    (:line, 421, :none),
    (:let, (:block,
        (:line, 428, :none),
        (:for, (:(=), (:tuple, :gen, :dim), :gens_dims), (:block,
            (:line, 429, :none),
            (:macrocall, Symbol("@test"), (:comparison, (:call, :ndims, :gen), :(==), (:call, :ndims, (:call, :collect, :gen)), :(==), :dim))
          ))
      ), (:(=), :gens_dims, (:vect, (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5))), 1), (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5)), (:(=), :j, (:(:), 1, 5))), 2), (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5)), (:(=), :j, (:(:), 1, 5)), (:(=), :k, (:(:), 1, 5))), 3), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int)))), 0), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1))), 1), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1, 2))), 2), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1, 2, 3))), 3)))),
    (:line, 434, :none),
    (:let, (:block,
        (:line, 435, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Dict, (:generator, (:(=>), :v, (:tuple, :k)), (:(=), (:tuple, :k, :v), :d))), (:call, :Dict, (:(=>), 2, (:tuple, (:quote, #QuoteNode
                    :b
                  ))), (:(=>), 1, (:tuple, (:quote, #QuoteNode
                    :a
                  )))))),
        (:line, 436, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Dict, (:generator, (:(=>), (:tuple, :x, :b), (:tuple, :c, :y)), (:(=), (:tuple, :x, :c), :d), (:(=), (:tuple, :b, :y), :a))), (:call, :Dict, (:(=>), (:tuple, (:quote, #QuoteNode
                    :a
                  ), 5), (:tuple, 1, 6)), (:(=>), (:tuple, (:quote, #QuoteNode
                    :b
                  ), 5), (:tuple, 2, 6)), (:(=>), (:tuple, (:quote, #QuoteNode
                    :a
                  ), 3), (:tuple, 1, 4)), (:(=>), (:tuple, (:quote, #QuoteNode
                    :b
                  ), 3), (:tuple, 2, 4)))))
      ), (:(=), :d, (:call, :Dict, (:(=>), (:quote, #QuoteNode
              :a
            ), 1), (:(=>), (:quote, #QuoteNode
              :b
            ), 2))), (:(=), :a, (:call, :Dict, (:(=>), 3, 4), (:(=>), 5, 6)))),
    (:line, 439, :none),
    (:let, (:block,
        (:line, 440, :none),
        (:local, (:(=), :g, (:generator, (:call, :+, :i, :j), (:(=), :i, (:(:), 2, 2)), (:(=), :j, (:(:), 3, 3))))),
        (:line, 441, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :g), 5)),
        (:line, 442, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 1))
      ), (:(=), :i, 1)),
    (:line, 447, :none),
    (:let, (:block,
        (:line, 448, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :gen, (:quote, #QuoteNode
                :iter
              )), (:(:), 1, 10))),
        (:line, 449, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :gen, (:quote, #QuoteNode
                  :f
                )), (:call, :first, (:(:), 1, 10))), (:ref, (:call, :next, :gen, (:call, :start, :gen)), 1))),
        (:line, 450, :none),
        (:for, (:(=), (:tuple, :a, :b), (:call, :zip, (:(:), 1, 10), :gen)), (:block,
            (:line, 451, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :a, :b))
          ))
      ), (:(=), :gen, (:generator, :x, (:(=), :x, (:(:), 1, 10))))),
    (:line, 455, :none),
    (:let, (:block,
        (:line, 456, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :.*, (:call, :collect, (:(:), 1, 10)), (:', (:call, :collect, (:(:), 1, 10)))))),
        (:line, 457, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :gen), 1)),
        (:line, 458, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :collect, :gen), (:(:), 1, 10)), (:call, :collect, (:(:), 1, 10))))
      ), (:(=), :gen, (:generator, (:call, :*, :x, :y), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10))))),
    (:line, 461, :none),
    (:let, (:block,
        (:line, 462, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :gen), 3)),
        (:line, 463, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, (:(:), 3, 3, 30))))
      ), (:(=), :gen, (:call, (:., :Base, (:quote, #QuoteNode
              :Generator
            )), :+, (:(:), 1, 10), (:(:), 1, 10), (:(:), 1, 10)))),
    (:line, 466, :none),
    (:let, (:block,
        (:line, 467, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, :gen2))),
        (:line, 468, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, (:(:), 2, 2, 10))))
      ), (:(=), :gen, (:generator, :x, (:filter, (:call, :(==), (:call, :%, :x, 2), 0), (:(=), :x, (:(:), 1, 10))))), (:(=), :gen2, (:call, :Filter, (:->, :x, (:block,
              (:line, 466, :none),
              (:call, :(==), (:call, :%, :x, 2), 0)
            )), (:generator, :x, (:(=), :x, (:(:), 1, 10)))))),
    (:line, 471, :none),
    (:let, (:block,
        (:line, 473, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, :gen2)))
      ), (:(=), :gen, (:generator, (:tuple, :x, :y), (:filter, (:&&, (:call, :(==), (:call, :%, :x, 2), 0), (:call, :(==), (:call, :%, :y, 2), 0)), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10))))), (:(=), :gen2, (:call, :Filter, (:->, :x, (:block,
              (:line, 472, :none),
              (:&&, (:call, :(==), (:call, :%, (:ref, :x, 1), 2), 0), (:call, :(==), (:call, :%, (:ref, :x, 2), 2), 0))
            )), (:generator, (:tuple, :x, :y), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10)))))),
    (:line, 478, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:generator, (:tuple, :i, :j), (:(=), :j, (:(:), 1, :i))), (:(=), :i, (:(:), 1, 3))))), (:vect, (:tuple, 1, 1), (:tuple, 2, 1), (:tuple, 2, 2), (:tuple, 3, 1), (:tuple, 3, 2), (:tuple, 3, 3)))),
    (:line, 480, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:generator, (:tuple, :i, :j), (:filter, (:call, :>, :j, 1), (:(=), :j, (:(:), 1, :i)))), (:(=), :i, (:(:), 1, 3))))), (:vect, (:tuple, 2, 2), (:tuple, 3, 2), (:tuple, 3, 3)))),
    (:line, 483, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:flatten, (:generator, (:flatten, (:generator, (:generator, (:tuple, :q, :d, :n, :p), (:filter, (:comparison, :p, :<, :n, :<, :d, :<, :q), (:(=), :p, (:call, :-, (:call, :-, (:call, :-, 100, :q), :d), :n)))), (:(=), :n, (:(:), 0, 5, (:call, :-, (:call, :-, 100, :q), :d))))), (:(=), :d, (:(:), 0, 10, (:call, :-, 100, :q))))), (:(=), :q, (:(:), 0, 25, 100))))), (:vect, (:tuple, 50, 30, 15, 5), (:tuple, 50, 30, 20, 0), (:tuple, 50, 40, 10, 0), (:tuple, 75, 20, 5, 0)))),
    (:line, 490, :none),
    (:let, (:block,
        (:line, 491, :none),
        (:macrocall, Symbol("@test"), (:call, :all, (:->, :i, (:block,
                (:line, 491, :none),
                (:call, :(==), (:ref, (:ref, :v, :i), 1), :i)
              )), :v))
      ), (:(=), :v, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :partition
              )), (:vect, 1, 2, 3, 4, 5), 1)))),
    (:line, 494, :none),
    (:let, (:block,
        (:line, 495, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, 1), (:vect, 1, 2))),
        (:line, 496, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, 2), (:vect, 3, 4))),
        (:line, 497, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, 3), (:vect, 5)))
      ), (:(=), :v, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :partition
              )), (:vect, 1, 2, 3, 4, 5), 2)))),
    (:line, 500, :none),
    (:let, (:block,
        (:line, 501, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, 1), (:vect, (:tuple, 1, 1), (:tuple, 2, 2), (:tuple, 3, 3)))),
        (:line, 502, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, 2), (:vect, (:tuple, 4, 4), (:tuple, 5, 5))))
      ), (:(=), :v, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :partition
              )), (:call, :enumerate, (:vect, 1, 2, 3, 4, 5)), 3)))),
    (:line, 505, :none),
    (:for, (:(=), :n, (:vect, 5, 6)), (:block,
        (:line, 506, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                      :partition
                    )), (:vect, 1, 2, 3, 4, 5), :n)), 1), (:vect, 1, 2, 3, 4, 5))),
        (:line, 507, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                      :partition
                    )), (:call, :enumerate, (:vect, 1, 2, 3, 4, 5)), :n)), 1), (:vect, (:tuple, 1, 1), (:tuple, 2, 2), (:tuple, 3, 3), (:tuple, 4, 4), (:tuple, 5, 5))))
      )),
    (:line, 512, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :join, (:call, :map, (:->, :x, (:block,
                (:line, 512, :none),
                (:call, :string, (:..., :x))
              )), (:call, (:., :Base, (:quote, #QuoteNode
                  :partition
                )), "Hello World!", 5)), "|"), "Hello| Worl|d!")),
    (:line, 515, :none),
    (:let, (:block,
        (:line, 516, :none),
        (:(=), :tf, (:->, :n, (:block,
              (:line, 516, :none),
              (:call, :join, (:call, :map, (:->, :x, (:block,
                      (:line, 516, :none),
                      (:call, :string, (:..., :x))
                    )), (:call, (:., :Base, (:quote, #QuoteNode
                        :partition
                      )), :s, :n)), "|")
            ))),
        (:line, 517, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 10), :s)),
        (:line, 518, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 9), "Monkey 🙈🙊|🙊")),
        (:line, 519, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 8), "Monkey 🙈|🙊🙊")),
        (:line, 520, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 7), "Monkey |🙈🙊🙊")),
        (:line, 521, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 6), "Monkey| 🙈🙊🙊")),
        (:line, 522, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 5), "Monke|y 🙈🙊🙊")),
        (:line, 523, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 4), "Monk|ey 🙈|🙊🙊")),
        (:line, 524, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 3), "Mon|key| 🙈🙊|🙊")),
        (:line, 525, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 2), "Mo|nk|ey| 🙈|🙊🙊")),
        (:line, 526, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tf, 1), "M|o|n|k|e|y| |🙈|🙊|🙊"))
      ), (:(=), :s, "Monkey 🙈🙊🙊"))
  ))