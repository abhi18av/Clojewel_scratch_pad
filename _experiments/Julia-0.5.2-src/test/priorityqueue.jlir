(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Collections),
    (:line, 6, :none),
    (:function, (:call, :test_issorted!, (:(::), :pq, :PriorityQueue), :priorities), (:block,
        (:line, 7, :none),
        (:(=), :last, (:call, :dequeue!, :pq)),
        (:line, 8, :none),
        (:while, (:call, :!, (:call, :isempty, :pq)), (:block,
            (:line, 9, :none),
            (:(=), :value, (:call, :dequeue!, :pq)),
            (:line, 10, :none),
            (:macrocall, Symbol("@test"), (:call, :(<=), (:ref, :priorities, :last), (:ref, :priorities, :value))),
            (:line, 11, :none),
            (:(=), :value, :last)
          ))
      )),
    (:line, 15, :none),
    (:function, (:call, :test_isrequested!, (:(::), :pq, :PriorityQueue), :keys), (:block,
        (:line, 16, :none),
        (:(=), :i, 0),
        (:line, 17, :none),
        (:while, (:call, :!, (:call, :isempty, :pq)), (:block,
            (:line, 18, :none),
            (:(=), :krqst, (:ref, :keys, (:+=, :i, 1))),
            (:line, 19, :none),
            (:(=), :krcvd, (:call, :dequeue!, :pq, :krqst)),
            (:line, 20, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :krcvd, :krqst))
          ))
      )),
    (:line, 24, :none),
    (:(=), :pmax, 1000),
    (:line, 25, :none),
    (:(=), :n, 10000),
    (:line, 26, :none),
    (:(=), :r, (:call, :rand, (:(:), 1, :pmax), :n)),
    (:line, 27, :none),
    (:(=), :priorities, (:call, :Dict, (:call, :zip, (:(:), 1, :n), :r))),
    (:line, 30, :none),
    (:(=), :pq, (:call, :PriorityQueue, :priorities)),
    (:line, 31, :none),
    (:call, :test_issorted!, :pq, :priorities),
    (:line, 33, :none),
    (:(=), :pq, (:call, :PriorityQueue, :priorities)),
    (:line, 34, :none),
    (:call, :test_isrequested!, :pq, (:(:), 1, :n)),
    (:line, 37, :none),
    (:(=), (:tuple, :ks, :vs), (:tuple, (:(:), 1, :n), (:call, :rand, (:(:), 1, :pmax), :n))),
    (:line, 38, :none),
    (:(=), :pq, (:call, :PriorityQueue, :ks, :vs)),
    (:line, 39, :none),
    (:(=), :priorities, (:call, :Dict, (:call, :zip, :ks, :vs))),
    (:line, 40, :none),
    (:call, :test_issorted!, :pq, :priorities),
    (:line, 41, :none),
    (:(=), :pq, (:call, :PriorityQueue, :ks, :vs)),
    (:line, 42, :none),
    (:(=), :lowpri, (:call, :findmin, :vs)),
    (:line, 43, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :peek, :pq), 2), (:ref, :pq, (:ref, :ks, (:ref, :lowpri, 2))))),
    (:line, 46, :none),
    (:(=), (:tuple, :ks, :vs), (:tuple, (:(:), 1, (:call, :+, :n, 1)), (:call, :rand, (:(:), 1, :pmax), :n))),
    (:line, 47, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :PriorityQueue, :ks, :vs)),
    (:line, 50, :none),
    (:(=), (:tuple, :ks, :vs), (:tuple, (:(:), 1, :n), (:call, :rand, (:(:), 1, :pmax), :n))),
    (:line, 51, :none),
    (:(=), :pq, (:call, :PriorityQueue, :ks, :vs)),
    (:line, 52, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :enqueue!, :pq, 1, 10)),
    (:line, 55, :none),
    (:(=), :pq, (:call, :PriorityQueue)),
    (:line, 56, :none),
    (:for, (:(=), (:tuple, :k, :v), :priorities), (:block,
        (:line, 57, :none),
        (:call, :enqueue!, :pq, :k, :v)
      )),
    (:line, 59, :none),
    (:call, :test_issorted!, :pq, :priorities),
    (:line, 63, :none),
    (:(=), :pq, (:call, :PriorityQueue)),
    (:line, 64, :none),
    (:for, (:(=), (:tuple, :k, :v), :priorities), (:block,
        (:line, 65, :none),
        (:(=), (:ref, :pq, :k), :v)
      )),
    (:line, 67, :none),
    (:call, :test_issorted!, :pq, :priorities),
    (:line, 71, :none),
    (:(=), :pq, (:call, :PriorityQueue)),
    (:line, 72, :none),
    (:for, (:(=), (:tuple, :k, :v), :priorities), (:block,
        (:line, 73, :none),
        (:(=), (:ref, :pq, :k), :v)
      )),
    (:line, 76, :none),
    (:for, (:(=), :_, (:(:), 1, :n)), (:block,
        (:line, 77, :none),
        (:(=), :k, (:call, :rand, (:(:), 1, :n))),
        (:line, 78, :none),
        (:(=), :v, (:call, :rand, (:(:), 1, :pmax))),
        (:line, 79, :none),
        (:(=), (:ref, :pq, :k), :v),
        (:line, 80, :none),
        (:(=), (:ref, :priorities, :k), :v)
      )),
    (:line, 83, :none),
    (:call, :test_issorted!, :pq, :priorities),
    (:line, 86, :none),
    (:(=), :pq, (:call, :PriorityQueue, :priorities)),
    (:line, 87, :none),
    (:try, (:block,
        (:line, 88, :none),
        (:call, :dequeue!, :pq, 0),
        (:line, 89, :none),
        (:call, :error, "should have resulted in KeyError")
      ), :ex, (:block,
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :ex, :KeyError))
      )),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 10, (:call, :dequeue!, :pq, 10))),
    (:line, 94, :none),
    (:while, (:call, :!, (:call, :isempty, :pq)), (:block,
        (:line, 95, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), 10, (:call, :dequeue!, :pq)))
      )),
    (:line, 99, :none),
    (:(=), :xs, (:call, :heapify!, (:comprehension, (:generator, :v, (:(=), :v, (:call, :values, :priorities)))))),
    (:line, 100, :none),
    (:macrocall, Symbol("@test"), (:call, :issorted, (:comprehension, (:generator, (:call, :heappop!, :xs), (:(=), :_, (:call, :length, :priorities)))))),
    (:line, 102, :none),
    (:(=), :xs, (:call, :heapify, (:(:), 10, -1, 1))),
    (:line, 103, :none),
    (:macrocall, Symbol("@test"), (:call, :issorted, (:comprehension, (:generator, (:call, :heappop!, :xs), (:(=), :_, (:(:), 1, 10)))))),
    (:line, 105, :none),
    (:(=), :xs, (:call, (:curly, :Array, :Int, 1), 0)),
    (:line, 106, :none),
    (:for, (:(=), :priority, (:call, :values, :priorities)), (:block,
        (:line, 107, :none),
        (:call, :heappush!, :xs, :priority)
      )),
    (:line, 109, :none),
    (:macrocall, Symbol("@test"), (:call, :issorted, (:comprehension, (:generator, (:call, :heappop!, :xs), (:(=), :_, (:call, :length, :priorities))))))
  ))