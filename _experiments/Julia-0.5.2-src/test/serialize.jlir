(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Test),
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Serializer, (:quote, #QuoteNode
              :sertag
            )), :Symbol), 2)),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Serializer, (:quote, #QuoteNode
              :sertag
            )), (:tuple,)), 44)),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Serializer, (:quote, #QuoteNode
              :sertag
            )), false), 120)),
    (:line, 10, :none),
    (:function, (:call, :create_serialization_stream, (:(::), :f, :Function)), (:block,
        (:line, 11, :none),
        (:(=), :s, (:call, :IOBuffer)),
        (:line, 12, :none),
        (:call, :f, :s),
        (:line, 13, :none),
        (:call, :close, :s)
      )),
    (:line, 17, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 18, :none),
          (:call, (:., :Serializer, (:quote, #QuoteNode
                :writetag
              )), :s, (:call, (:., :Serializer, (:quote, #QuoteNode
                  :sertag
                )), :Bool)),
          (:line, 19, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :takebuf_array, :s), :end), (:call, :UInt8, (:call, (:., :Serializer, (:quote, #QuoteNode
                      :sertag
                    )), :Bool))))
        ))),
    (:line, 22, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 23, :none),
          (:call, (:., :Serializer, (:quote, #QuoteNode
                :write_as_tag
              )), :s, (:call, (:., :Serializer, (:quote, #QuoteNode
                  :sertag
                )), :Bool)),
          (:line, 24, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :takebuf_array, :s), :end), (:call, :UInt8, (:call, (:., :Serializer, (:quote, #QuoteNode
                      :sertag
                    )), :Bool))))
        ))),
    (:line, 27, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 28, :none),
          (:call, (:., :Serializer, (:quote, #QuoteNode
                :write_as_tag
              )), :s, (:call, (:., :Serializer, (:quote, #QuoteNode
                  :sertag
                )), :Symbol)),
          (:line, 29, :none),
          (:(=), :data, (:call, :takebuf_array, :s)),
          (:line, 30, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :data, (:call, :-, :end, 1)), 0x00)),
          (:line, 31, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :data, :end), (:call, :UInt8, (:call, (:., :Serializer, (:quote, #QuoteNode
                      :sertag
                    )), :Symbol))))
        ))),
    (:line, 35, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 36, :none),
          (:call, :serialize, :s, true),
          (:line, 37, :none),
          (:call, :serialize, :s, (:tuple,)),
          (:line, 38, :none),
          (:call, :serialize, :s, :nothing),
          (:line, 39, :none),
          (:call, :seek, :s, 0),
          (:line, 40, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), true)),
          (:line, 41, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), (:tuple,))),
          (:line, 42, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :nothing))
        ))),
    (:line, 46, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 47, :none),
          (:call, :serialize, :s, :C_NULL),
          (:line, 48, :none),
          (:call, :seekstart, :s),
          (:line, 49, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :C_NULL))
        ))),
    (:line, 53, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 54, :none),
          (:call, :serialize, :s, 0x01),
          (:line, 55, :none),
          (:call, :serialize, :s, 32),
          (:line, 56, :none),
          (:call, :serialize, :s, 33),
          (:line, 57, :none),
          (:call, :seek, :s, 0),
          (:line, 58, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), 0x01)),
          (:line, 59, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), 32)),
          (:line, 60, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), 33))
        ))),
    (:line, 64, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 65, :none),
          (:(=), :tpl, (:tuple, 0x01, 'a')),
          (:line, 66, :none),
          (:call, :serialize, :s, :tpl),
          (:line, 68, :none),
          (:(=), :len, 257),
          (:line, 69, :none),
          (:(=), :lt, (:call, :ntuple, (:->, :i, (:block,
                  (:line, 69, :none),
                  0x01
                )), :len)),
          (:line, 70, :none),
          (:call, :serialize, :s, :lt),
          (:line, 72, :none),
          (:call, :serialize, :s, (:curly, :Tuple)),
          (:line, 74, :none),
          (:call, :seek, :s, 0),
          (:line, 75, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :tpl)),
          (:line, 76, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :lt)),
          (:line, 77, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), (:curly, :Tuple)))
        ))),
    (:line, 81, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 82, :none),
          (:(=), (:call, :gensym, :len), (:block,
              (:line, 82, :none),
              (:call, :Symbol, (:call, :repeat, "A", :len))
            )),
          (:line, 84, :none),
          (:(=), :smbl, (:call, :gensym, 1)),
          (:line, 85, :none),
          (:call, :serialize, :s, :smbl),
          (:line, 87, :none),
          (:(=), :smbl2, (:call, :gensym, 10)),
          (:line, 88, :none),
          (:call, :serialize, :s, :smbl2),
          (:line, 90, :none),
          (:(=), :smbl3, (:call, :gensym, 257)),
          (:line, 91, :none),
          (:call, :serialize, :s, :smbl3),
          (:line, 93, :none),
          (:call, :seek, :s, 0),
          (:line, 94, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :smbl)),
          (:line, 95, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :smbl2)),
          (:line, 96, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :smbl3))
        ))),
    (:line, 100, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 101, :none),
          (:(=), :mod, (:macrocall, Symbol("@b_str"), "SomeModule")),
          (:line, 102, :none),
          (:(=), :modstring, (:call, :String, :mod)),
          (:line, 103, :none),
          (:call, :eval, (:call, :parse, (:string, "module ", :modstring, "; end"))),
          (:line, 104, :none),
          (:(=), :modtype, (:call, :eval, (:call, :parse, (:string, :modstring)))),
          (:line, 105, :none),
          (:call, :serialize, :s, :modtype),
          (:line, 106, :none),
          (:call, :seek, :s, 0),
          (:line, 107, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :modtype))
        ))),
    (:line, 111, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 112, :none),
          (:(=), :typ1, :UInt8),
          (:line, 113, :none),
          (:call, :serialize, :s, :typ1),
          (:line, 114, :none),
          (:(=), :typ2, :Bool),
          (:line, 115, :none),
          (:call, :serialize, :s, :typ2),
          (:line, 117, :none),
          (:call, :seek, :s, 0),
          (:line, 118, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :typ1)),
          (:line, 119, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :typ2))
        ))),
    (:line, 122, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 123, :none),
          (:(=), :usertype, "SerializeSomeType"),
          (:line, 124, :none),
          (:call, :eval, (:call, :parse, (:string, "abstract ", :usertype))),
          (:line, 125, :none),
          (:(=), :utype, (:call, :eval, (:call, :parse, (:string, :usertype)))),
          (:line, 126, :none),
          (:call, :serialize, :s, :utype),
          (:line, 127, :none),
          (:call, :seek, :s, 0),
          (:line, 128, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utype))
        ))),
    (:line, 131, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 132, :none),
          (:(=), :usertype, "SerializeSomeType1"),
          (:line, 133, :none),
          (:call, :eval, (:call, :parse, (:string, "type ", :usertype, "; end"))),
          (:line, 134, :none),
          (:(=), :utype, (:call, :eval, (:call, :parse, (:string, :usertype)))),
          (:line, 135, :none),
          (:call, :serialize, :s, :utype),
          (:line, 136, :none),
          (:call, :seek, :s, 0),
          (:line, 137, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utype))
        ))),
    (:line, 140, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 141, :none),
          (:(=), :usertype, "SerializeSomeType2"),
          (:line, 142, :none),
          (:call, :eval, (:call, :parse, (:string, "abstract ", :usertype, "{T}"))),
          (:line, 143, :none),
          (:(=), :utype, (:call, :eval, (:call, :parse, (:string, :usertype)))),
          (:line, 144, :none),
          (:call, :serialize, :s, :utype),
          (:line, 145, :none),
          (:call, :seek, :s, 0),
          (:line, 146, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utype))
        ))),
    (:line, 149, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 150, :none),
          (:(=), :usertype, "SerializeSomeType3"),
          (:line, 151, :none),
          (:call, :eval, (:call, :parse, (:string, "immutable ", :usertype, "{T}; a::T; end"))),
          (:line, 152, :none),
          (:(=), :utype, (:call, :eval, (:call, :parse, (:string, :usertype)))),
          (:line, 153, :none),
          (:call, :serialize, :s, :utype),
          (:line, 154, :none),
          (:call, :seek, :s, 0),
          (:line, 155, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utype))
        ))),
    (:line, 158, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 159, :none),
          (:(=), :usertype, "SerializeSomeType4"),
          (:line, 160, :none),
          (:call, :eval, (:call, :parse, (:string, "immutable ", :usertype, "{T}; a::T; b::T; end"))),
          (:line, 161, :none),
          (:(=), :utval, (:call, :eval, (:call, :parse, (:string, :usertype, "(1,2)")))),
          (:line, 162, :none),
          (:call, :serialize, :s, :utval),
          (:line, 163, :none),
          (:call, :seek, :s, 0),
          (:line, 164, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utval))
        ))),
    (:line, 167, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 168, :none),
          (:(=), :usertype, "SerializeSomeType5"),
          (:line, 169, :none),
          (:call, :eval, (:call, :parse, (:string, "immutable ", :usertype, "{T}; a::T; b::T; c::T; end"))),
          (:line, 170, :none),
          (:(=), :utval, (:call, :eval, (:call, :parse, (:string, :usertype, "(1,2,3)")))),
          (:line, 171, :none),
          (:call, :serialize, :s, :utval),
          (:line, 172, :none),
          (:call, :seek, :s, 0),
          (:line, 173, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utval))
        ))),
    (:line, 176, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 177, :none),
          (:(=), :usertype, "SerializeSomeType6"),
          (:line, 178, :none),
          (:call, :eval, (:call, :parse, (:string, "immutable ", :usertype, "{T}; a::T; b::T; c::T; d::T; end"))),
          (:line, 179, :none),
          (:(=), :utval, (:call, :eval, (:call, :parse, (:string, :usertype, "(1,2,3,4)")))),
          (:line, 180, :none),
          (:call, :serialize, :s, :utval),
          (:line, 181, :none),
          (:call, :seek, :s, 0),
          (:line, 182, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :utval))
        ))),
    (:line, 186, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 187, :none),
          (:(=), :expr, (:call, :parse, "a = 1")),
          (:line, 188, :none),
          (:call, :serialize, :s, :expr),
          (:line, 190, :none),
          (:(=), :expr2, (:call, :parse, (:call, :repeat, "a = 1;", 300))),
          (:line, 191, :none),
          (:call, :serialize, :s, :expr2),
          (:line, 193, :none),
          (:call, :seek, :s, 0),
          (:line, 194, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :expr)),
          (:line, 195, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :expr2))
        ))),
    (:line, 199, :none),
    (:type, true, :TA1, (:block,
        (:line, 200, :none),
        (:(::), :v, :UInt8)
      )),
    (:line, 202, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 203, :none),
          (:(=), :arr1, (:call, :fill, 0x01, 10)),
          (:line, 204, :none),
          (:call, :serialize, :s, :arr1),
          (:line, 205, :none),
          (:(=), :arr2, (:call, :fill, 0x01, 3, 3)),
          (:line, 206, :none),
          (:call, :serialize, :s, :arr2),
          (:line, 207, :none),
          (:(=), :arr3, (:call, :fill, 0x0001, 50)),
          (:line, 208, :none),
          (:call, :serialize, :s, :arr3),
          (:line, 209, :none),
          (:(=), :arr4, (:call, :reshape, (:vect, true, false, false, false, true, false, false, false, true), 3, 3)),
          (:line, 210, :none),
          (:call, :serialize, :s, :arr4),
          (:line, 212, :none),
          (:(=), :arr5, (:call, (:curly, :Array, :TA1), 3)),
          (:line, 213, :none),
          (:(=), (:ref, :arr5, 2), (:call, :TA1, 0x01)),
          (:line, 214, :none),
          (:call, :serialize, :s, :arr5),
          (:line, 216, :none),
          (:call, :seek, :s, 0),
          (:line, 217, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :arr1)),
          (:line, 218, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :arr2)),
          (:line, 219, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :arr3)),
          (:line, 220, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :arr4)),
          (:line, 222, :none),
          (:(=), :result, (:call, :deserialize, :s)),
          (:line, 223, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, :isdefined, :result, 1))),
          (:line, 224, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, :isdefined, :result, 3))),
          (:line, 225, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :result, 2), (:quote, #QuoteNode
                  :v
                )), (:., (:ref, :arr5, 2), (:quote, #QuoteNode
                  :v
                ))))
        ))),
    (:line, 229, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 230, :none),
          (:(=), :slc1, (:call, :view, (:call, :ones, :UInt8, 4), (:(:), 2, 3))),
          (:line, 231, :none),
          (:call, :serialize, :s, :slc1),
          (:line, 232, :none),
          (:(=), :slc2, (:call, :view, (:call, :.+, (:call, :ones, :UInt8, 4, 4), (:vect, 0x00, 0x01, 0x02, 0x03)), 1, (:(:), 2, 4))),
          (:line, 233, :none),
          (:call, :serialize, :s, :slc2),
          (:line, 235, :none),
          (:call, :seek, :s, 0),
          (:line, 236, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :slc1)),
          (:line, 237, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :s), :slc2))
        ))),
    (:line, 241, :none),
    (:module, true, :ArrayWrappers, (:block,
        (:line, 241, :none),
        (:line, 243, :none),
        (:type, false, (:<:, (:curly, :ArrayWrapper, :T, :N, (:<:, :A, :AbstractArray)), (:curly, :AbstractArray, :T, :N)), (:block,
            (:line, 244, :none),
            (:(::), :data, :A)
          )),
        (:line, 246, :none),
        (:(=), (:call, (:curly, :ArrayWrapper, :T, :N), (:(::), :data, (:curly, :AbstractArray, :T, :N))), (:block,
            (:line, 246, :none),
            (:call, (:curly, :ArrayWrapper, :T, :N, (:call, :typeof, :data)), :data)
          )),
        (:line, 247, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :size
              )), (:(::), :A, :ArrayWrapper)), (:block,
            (:line, 247, :none),
            (:call, :size, (:., :A, (:quote, #QuoteNode
                  :data
                )))
          )),
        (:line, 248, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :size
              )), (:(::), :A, :ArrayWrapper), :d), (:block,
            (:line, 248, :none),
            (:call, :size, (:., :A, (:quote, #QuoteNode
                  :data
                )), :d)
          )),
        (:line, 249, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :getindex
              )), (:(::), :A, :ArrayWrapper), (:..., (:(::), :i, :Real))), (:block,
            (:line, 249, :none),
            (:call, :getindex, (:., :A, (:quote, #QuoteNode
                  :data
                )), (:..., :i))
          ))
      )),
    (:line, 253, :none),
    (:let, (:block,
        (:line, 254, :none),
        (:for, (:(=), :B, (:tuple, (:call, :view, :A, :(:), (:(:), 2, 4)), (:call, :view, :A, 2, (:(:), 1, 3)))), (:block,
            (:line, 255, :none),
            (:(=), :C, (:call, (:., :ArrayWrappers, (:quote, #QuoteNode
                    :ArrayWrapper
                  )), :B)),
            (:line, 256, :none),
            (:(=), :io, (:call, :IOBuffer)),
            (:line, 257, :none),
            (:call, :serialize, :io, :C),
            (:line, 258, :none),
            (:call, :seek, :io, 0),
            (:line, 259, :none),
            (:(=), :Cd, (:call, :deserialize, :io)),
            (:line, 260, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, :Cd), (:call, :size, :C))),
            (:line, 261, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :Cd, :B))
          ))
      ), (:(=), :A, (:call, :rand, 3, 4))),
    (:line, 266, :none),
    (:(=), (:call, :serialize_test_function), (:block,
        (:line, 266, :none),
        1
      )),
    (:line, 267, :none),
    (:(=), :serialize_test_function2, (:->, (:tuple,), (:block,
          (:line, 267, :none),
          1
        ))),
    (:line, 268, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 269, :none),
          (:call, :serialize, :s, :sin),
          (:line, 270, :none),
          (:call, :serialize, :s, :typeof),
          (:line, 271, :none),
          (:call, :serialize, :s, :serialize_test_function),
          (:line, 272, :none),
          (:call, :serialize, :s, :serialize_test_function2),
          (:line, 274, :none),
          (:call, :seek, :s, 0),
          (:line, 275, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :sin)),
          (:line, 276, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :typeof)),
          (:line, 277, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:call, :deserialize, :s)), 1)),
          (:line, 278, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:call, :deserialize, :s)), 1))
        ))),
    (:line, 282, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 283, :none),
          (:local, (:(=), (:call, :g), (:block,
                (:line, 283, :none),
                (:quote, #QuoteNode
                  :magic_token_anon_fun_test
                )
              ))),
          (:line, 284, :none),
          (:call, :serialize, :s, :g),
          (:line, 285, :none),
          (:call, :serialize, :s, :g),
          (:line, 287, :none),
          (:call, :seekstart, :s),
          (:line, 288, :none),
          (:local, (:(=), :g2, (:call, :deserialize, :s))),
          (:line, 289, :none),
          (:macrocall, Symbol("@test"), (:call, :(!==), :g2, :g)),
          (:line, 290, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :g2), (:quote, #QuoteNode
                :magic_token_anon_fun_test
              ))),
          (:line, 291, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :g2), (:quote, #QuoteNode
                :magic_token_anon_fun_test
              ))),
          (:line, 292, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :s), :g2))
        ))),
    (:line, 297, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 298, :none),
          (:(=), :f, (:->, (:tuple,), (:block,
                (:line, 298, :none),
                (:block,
                  (:line, 298, :none),
                  (:call, :task_local_storage, (:quote, #QuoteNode
                      :v
                    ), 2),
                  (:line, 298, :none),
                  (:return, (:call, :+, 1, 1))
                )
              ))),
          (:line, 299, :none),
          (:(=), :t, (:call, :Task, :f)),
          (:line, 300, :none),
          (:call, :wait, (:call, :schedule, :t)),
          (:line, 301, :none),
          (:call, :serialize, :s, :t),
          (:line, 302, :none),
          (:call, :seek, :s, 0),
          (:line, 303, :none),
          (:(=), :r, (:call, :deserialize, :s)),
          (:line, 304, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:., :r, (:quote, #QuoteNode
                    :storage
                  )), (:quote, #QuoteNode
                  :v
                )), 2)),
          (:line, 305, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:., :r, (:quote, #QuoteNode
                  :state
                )), (:quote, #QuoteNode
                :done
              ))),
          (:line, 306, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:., :r, (:quote, #QuoteNode
                  :exception
                )), :nothing))
        ))),
    (:line, 309, :none),
    (:type, false, (:<:, :MyErrorTypeTest, :Exception), (:block,
        (:line, 309, :none)
      )),
    (:line, 310, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 311, :none),
          (:(=), :t, (:call, :Task, (:->, (:tuple,), (:block,
                  (:line, 311, :none),
                  (:call, :throw, (:call, :MyErrorTypeTest))
                )))),
          (:line, 312, :none),
          (:macrocall, Symbol("@test_throws"), :MyErrorTypeTest, (:call, :wait, (:call, :schedule, :t))),
          (:line, 313, :none),
          (:call, :serialize, :s, :t),
          (:line, 314, :none),
          (:call, :seek, :s, 0),
          (:line, 315, :none),
          (:(=), :r, (:call, :deserialize, :s)),
          (:line, 316, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:., :r, (:quote, #QuoteNode
                  :state
                )), (:quote, #QuoteNode
                :failed
              ))),
          (:line, 317, :none),
          (:macrocall, Symbol("@test"), (:call, :isa, (:., :t, (:quote, #QuoteNode
                  :exception
                )), :MyErrorTypeTest))
        ))),
    (:line, 321, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 322, :none),
          (:call, :serialize, :s, (:call, (:curly, :Nullable, :Any))),
          (:line, 323, :none),
          (:call, :seekstart, :s),
          (:line, 324, :none),
          (:(=), :n, (:call, :deserialize, :s)),
          (:line, 325, :none),
          (:macrocall, Symbol("@test"), (:call, :isa, :n, :Nullable)),
          (:line, 326, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, :isdefined, :n, (:quote, #QuoteNode
                  :value
                ))))
        ))),
    (:line, 330, :none),
    (:module, true, :CycleFoo, (:block,
        (:line, 330, :none),
        (:line, 331, :none),
        (:(=), (:call, :echo, :x), (:block,
            (:line, 331, :none),
            :x
          ))
      )),
    (:line, 333, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 334, :none),
          (:(=), (:call, :echo, :x), (:block,
              (:line, 334, :none),
              :x
            )),
          (:line, 335, :none),
          (:(=), :afunc, (:->, :x, (:block,
                (:line, 335, :none),
                :x
              ))),
          (:line, 336, :none),
          (:(=), :A, (:ref, :Any, 1, 2, 3, :abs, :abs, :afunc, :afunc, :echo, :echo, (:., :CycleFoo, (:quote, #QuoteNode
                  :echo
                )), (:., :CycleFoo, (:quote, #QuoteNode
                  :echo
                )), 4, 5)),
          (:line, 337, :none),
          (:(=), (:ref, :A, 3), :A),
          (:line, 338, :none),
          (:call, :serialize, :s, :A),
          (:line, 339, :none),
          (:call, :seekstart, :s),
          (:line, 340, :none),
          (:(=), :b, (:call, :deserialize, :s)),
          (:line, 341, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 3), :b)),
          (:line, 342, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :b, 1), 1)),
          (:line, 343, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 4), :abs)),
          (:line, 344, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 5), (:ref, :b, 4))),
          (:line, 345, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:ref, :b, 5), -1), 1)),
          (:line, 347, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 6), (:ref, :b, 7))),
          (:line, 348, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:ref, :b, 6), "Hello"), "Hello")),
          (:line, 350, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 8), (:ref, :b, 9))),
          (:line, 351, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:ref, :b, 8), "World"), "World")),
          (:line, 353, :none),
          (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :b, 10), (:ref, :b, 11))),
          (:line, 354, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:ref, :b, 10), "foobar"), "foobar")),
          (:line, 356, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :b, :end), 5)),
          (:line, 357, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :b), (:call, :length, :A))),
          (:line, 358, :none),
          (:macrocall, Symbol("@test"), (:call, :isa, :b, (:curly, :Vector, :Any)))
        ))),
    (:line, 362, :none),
    (:call, :create_serialization_stream, (:->, (:tuple, :s), (:block,
          (:line, 363, :none),
          (:(=), :r1, (:macrocall, Symbol("@r_str"), "a?b.*")),
          (:line, 364, :none),
          (:call, :serialize, :s, :r1),
          (:line, 365, :none),
          (:call, :seekstart, :s),
          (:line, 366, :none),
          (:(=), :r2, (:call, :deserialize, :s)),
          (:line, 367, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), :r1, :r2))
        ))),
    (:line, 371, :none),
    (:module, true, :Test13452, (:block,
        (:line, 371, :none),
        (:line, 372, :none),
        (:using, :Base, :Test),
        (:line, 374, :none),
        (:module, true, :Shell, (:block,
            (:line, 374, :none),
            (:line, 375, :none),
            (:export, :foo),
            (:line, 376, :none),
            (:(=), (:call, :foo, :x), (:block,
                (:line, 376, :none),
                (:call, :error, "Instances must implement foo")
              ))
          )),
        (:line, 379, :none),
        (:module, true, :Instance1, (:block,
            (:line, 379, :none),
            (:line, 380, :none),
            (:using, :., :., :Shell),
            (:line, 381, :none),
            (:(=), (:call, (:., :Shell, (:quote, #QuoteNode
                    :foo
                  )), (:(::), :x, :Int)), (:block,
                (:line, 381, :none),
                "This is an Int"
              ))
          )),
        (:line, 384, :none),
        (:toplevel, (:using, :., :Shell), (:using, :., :Instance1)),
        (:line, 385, :none),
        (:(=), :io, (:call, :IOBuffer)),
        (:line, 386, :none),
        (:call, :serialize, :io, :foo),
        (:line, 387, :none),
        (:(=), :str, (:call, :takebuf_string, :io)),
        (:line, 388, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :search, :str, "Instance1"))),
        (:line, 389, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :search, :str, "Shell"))))
      )),
    (:line, 394, :none),
    (:type, true, (:curly, :B15163, :T), (:block,
        (:line, 395, :none),
        (:(::), :x, (:curly, :Array, :T))
      )),
    (:line, 397, :none),
    (:let, (:block,
        (:line, 398, :none),
        (:call, :serialize, :b, (:call, :B15163, (:vect, 1))),
        (:line, 399, :none),
        (:call, :seekstart, :b),
        (:line, 400, :none),
        (:(=), :c, (:call, :deserialize, :b)),
        (:line, 401, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :isa, :c, :B15163), (:call, :(==), (:., :c, (:quote, #QuoteNode
                  :x
                )), (:vect, 1))))
      ), (:(=), :b, (:call, :IOBuffer))),
    (:line, 405, :none),
    (:let, (:block,
        (:line, 406, :none),
        (:(=), :vt, (:ref, :Tuple, (:tuple, 1))),
        (:line, 407, :none),
        (:call, :serialize, :b, :vt),
        (:line, 408, :none),
        (:call, :seekstart, :b),
        (:line, 409, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :b), :vt))
      ), (:(=), :b, (:call, :IOBuffer))),
    (:line, 413, :none),
    (:let, (:block,
        (:line, 414, :none),
        (:(=), :a, (:vect, 'T', 'e', 's', 't')),
        (:line, 415, :none),
        (:(=), :f, (:call, :IOBuffer)),
        (:line, 416, :none),
        (:call, :serialize, :f, :a),
        (:line, 417, :none),
        (:call, :seek, :f, 0),
        (:line, 418, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :f), :a)),
        (:line, 419, :none),
        (:(=), :f, (:call, :IOBuffer)),
        (:line, 420, :none),
        (:call, :serialize, :f, :a),
        (:line, 421, :none),
        (:call, :seek, :f, 0),
        (:line, 422, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :deserialize, :f), :a)),
        (:line, 425, :none),
        (:call, :seek, :f, 0),
        (:line, 426, :none),
        (:call, :serialize, :f, (:quote, #QuoteNode
            :β
          )),
        (:line, 427, :none),
        (:call, :seek, :f, 0),
        (:line, 428, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :f), (:quote, #QuoteNode
              :β
            )))
      ))
  ))