(:quote, (:block,
    (:line, 3, :none),
    (:function, (:call, :simd_loop_example_from_manual, :x, :y, :z), (:block,
        (:line, 4, :none),
        (:(=), :s, (:call, :zero, (:call, :eltype, :z))),
        (:line, 5, :none),
        (:(=), :n, (:call, :min, (:call, :length, :x), (:call, :length, :y), (:call, :length, :z))),
        (:line, 6, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 7, :none),
              (:macrocall, Symbol("@inbounds"), (:block,
                  (:line, 8, :none),
                  (:(=), (:ref, :z, :i), (:call, :-, (:ref, :x, :i), (:ref, :y, :i))),
                  (:line, 9, :none),
                  (:+=, :s, (:call, :*, (:ref, :z, :i), (:ref, :z, :i)))
                ))
            ))),
        (:line, 12, :none),
        :s
      )),
    (:line, 15, :none),
    (:function, (:call, :simd_loop_with_multiple_reductions, :x, :y, :z), (:block,
        (:line, 17, :none),
        (:(=), (:tuple, :s, :t), (:tuple, (:call, :one, (:call, :eltype, :x)), (:call, :one, (:call, :eltype, :y)))),
        (:line, 18, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :i, (:(:), 1, (:call, :length, :z))), (:block,
              (:line, 19, :none),
              (:macrocall, Symbol("@inbounds"), (:block,
                  (:line, 20, :none),
                  (:+=, :s, (:ref, :x, :i)),
                  (:line, 21, :none),
                  (:+=, :t, (:call, :*, 2, (:ref, :y, :i))),
                  (:line, 22, :none),
                  (:+=, :s, (:ref, :z, :i))
                ))
            ))),
        (:line, 25, :none),
        (:tuple, :s, :t)
      )),
    (:line, 28, :none),
    (:for, (:(=), :T, (:vect, :Int32, :Int64, :Float32, :Float64)), (:block,
        (:line, 30, :none),
        (:for, (:(=), :n, (:vect, 0, 1, 2, 3, 4, 255, 256, 257)), (:block,
            (:line, 32, :none),
            (:(=), :a, (:call, :convert, (:curly, :Array, :T), (:comprehension, (:generator, (:call, :+, (:call, :*, 2, :j), 1), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 33, :none),
            (:(=), :b, (:call, :convert, (:curly, :Array, :T), (:comprehension, (:generator, (:call, :+, (:call, :*, 3, :j), 2), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 34, :none),
            (:(=), :c, (:call, :convert, (:curly, :Array, :T), (:comprehension, (:generator, (:call, :+, (:call, :*, 5, :j), 3), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 35, :none),
            (:(=), :s, (:call, :simd_loop_example_from_manual, :a, :b, :c)),
            (:line, 37, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :a, (:comprehension, (:generator, (:call, :+, (:call, :*, 2, :j), 1), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 38, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :b, (:comprehension, (:generator, (:call, :+, (:call, :*, 3, :j), 2), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 39, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :c, (:comprehension, (:generator, (:call, :-, (:call, :-, :j), 1), (:(=), :j, (:(:), 1, :n)))))),
            (:line, 40, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :s, (:call, :sum, (:call, :.*, :c, :c)))),
            (:line, 41, :none),
            (:(=), (:tuple, :s, :t), (:call, :simd_loop_with_multiple_reductions, :a, :b, :c)),
            (:line, 42, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :s, (:call, :+, (:call, :sum, :a), (:call, :sum, :c), 1))),
            (:line, 43, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :t, (:call, :+, (:call, :*, 2, (:call, :sum, :b)), 1)))
          ))
      )),
    (:line, 48, :none),
    (:let, (:block,
        (:line, 50, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :j, (:(:), 1, 0)), (:block,
              (:line, 50, :none)
            ))),
        (:line, 51, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :j, 4)),
        (:line, 52, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :j, (:(:), 1, 3)), (:block,
              (:line, 52, :none)
            ))),
        (:line, 53, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :j, 3)),
        (:line, 56, :none),
        (:global, (:(=), :simd_glob, 4)),
        (:line, 57, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :simd_glob, (:(:), 1, 0)), (:block,
              (:line, 57, :none)
            ))),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :simd_glob, 4)),
        (:line, 59, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :simd_glob, (:(:), 1, 3)), (:block,
              (:line, 59, :none)
            ))),
        (:line, 60, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :simd_glob, 3)),
        (:line, 63, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :simd_loop_local, (:(:), 1, 0)), (:block,
              (:line, 63, :none)
            ))),
        (:line, 64, :none),
        (:(=), :simd_loop_local_present, true),
        (:line, 65, :none),
        (:try, (:block,
            (:line, 66, :none),
            (:+=, :simd_loop_local, 1)
          ), false, (:block,
            (:line, 68, :none),
            (:(=), :simd_loop_local_present, false)
          )),
        (:line, 70, :none),
        (:macrocall, Symbol("@test"), (:call, :!, :simd_loop_local_present))
      ), (:(=), :j, 4)),
    (:line, 73, :none),
    (:import, :Base, :SimdLoop, :SimdError),
    (:line, 77, :none),
    (:macrocall, Symbol("@test_throws"), :SimdError, (:call, :eval, (:quote, (:block,
            (:line, 78, :none),
            (:macrocall, Symbol("@simd"), (:for, (:(=), :x, (:(:), 1, 10)), (:block,
                  (:line, 79, :none),
                  (:&&, (:call, :(==), :x, 1), (:break,))
                )))
          )))),
    (:line, 83, :none),
    (:macrocall, Symbol("@test_throws"), :SimdError, (:call, :eval, (:quote, (:block,
            (:line, 84, :none),
            (:macrocall, Symbol("@simd"), (:for, (:(=), :x, (:(:), 1, 10)), (:block,
                  (:line, 85, :none),
                  (:&&, (:call, :<, :x, 5), (:continue,))
                )))
          )))),
    (:line, 89, :none),
    (:macrocall, Symbol("@test_throws"), :SimdError, (:call, :eval, (:quote, (:block,
            (:line, 90, :none),
            (:macrocall, Symbol("@simd"), (:for, (:(=), :x, (:(:), 1, 10)), (:block,
                  (:line, 91, :none),
                  (:||, (:call, :(==), :x, 1), (:macrocall, Symbol("@goto"), :exit_loop))
                ))),
            (:line, 93, :none),
            (:macrocall, Symbol("@label"), :exit_loop)
          )))),
    (:line, 97, :none),
    (:function, (:call, :simd_cartesian_range!, :indexes, :crng), (:block,
        (:line, 98, :none),
        (:macrocall, Symbol("@simd"), (:for, (:(=), :I, :crng), (:block,
              (:line, 99, :none),
              (:call, :push!, :indexes, :I)
            ))),
        (:line, 101, :none),
        :indexes
      )),
    (:line, 104, :none),
    (:(=), :crng, (:call, :CartesianRange, (:call, (:curly, :CartesianIndex, 4), 2, 0, 1, 3), (:call, (:curly, :CartesianIndex, 4), 4, 1, 1, 5))),
    (:line, 106, :none),
    (:(=), :indexes, (:call, :simd_cartesian_range!, (:call, (:curly, :Array, (:call, :eltype, :crng)), 0), :crng)),
    (:line, 107, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :indexes, (:call, :vec, (:call, :collect, :crng)))),
    (:line, 109, :none),
    (:(=), :crng, (:call, :CartesianRange, (:call, (:curly, :CartesianIndex, 2), -1, 1), (:call, (:curly, :CartesianIndex, 2), 1, 3))),
    (:line, 111, :none),
    (:(=), :indexes, (:call, :simd_cartesian_range!, (:call, (:curly, :Array, (:call, :eltype, :crng)), 0), :crng)),
    (:line, 112, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :indexes, (:call, :vec, (:call, :collect, :crng)))),
    (:line, 114, :none),
    (:(=), :crng, (:call, :CartesianRange, (:call, (:curly, :CartesianIndex, 2), -1, 1), (:call, (:curly, :CartesianIndex, 2), -1, 3))),
    (:line, 116, :none),
    (:(=), :indexes, (:call, :simd_cartesian_range!, (:call, (:curly, :Array, (:call, :eltype, :crng)), 0), :crng)),
    (:line, 117, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :indexes, (:call, :vec, (:call, :collect, :crng)))),
    (:line, 119, :none),
    (:(=), :crng, (:call, :CartesianRange, (:call, (:curly, :CartesianIndex, 1), 2), (:call, (:curly, :CartesianIndex, 1), 4))),
    (:line, 121, :none),
    (:(=), :indexes, (:call, :simd_cartesian_range!, (:call, (:curly, :Array, (:call, :eltype, :crng)), 0), :crng)),
    (:line, 122, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :indexes, (:call, :collect, :crng))),
    (:line, 124, :none),
    (:(=), :crng, (:call, :CartesianRange, (:call, (:curly, :CartesianIndex, 0)), (:call, (:curly, :CartesianIndex, 0)))),
    (:line, 126, :none),
    (:(=), :indexes, (:call, :simd_cartesian_range!, (:call, (:curly, :Array, (:call, :eltype, :crng)), 0), :crng)),
    (:line, 127, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :indexes, (:call, :vec, (:call, :collect, :crng)))),
    (:line, 131, :none),
    (:function, (:call, :simd_sum_over_array, :a), (:block,
        (:line, 132, :none),
        (:(=), :s, (:call, :zero, (:call, :eltype, :a))),
        (:line, 133, :none),
        (:macrocall, Symbol("@inbounds"), (:macrocall, Symbol("@simd"), (:for, (:(=), :x, :a), (:block,
                (:line, 134, :none),
                (:+=, :s, :x)
              )))),
        (:line, 136, :none),
        :s
      )),
    (:line, 138, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 2001000, (:call, :simd_sum_over_array, (:call, :collect, (:(:), 1, 2000))))),
    (:line, 139, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), 2001000, (:call, :simd_sum_over_array, (:typed_comprehension, :Float32, (:generator, (:call, :+, :i, (:call, :*, :j, 500)), (:(=), :i, (:(:), 1, 500)), (:(=), :j, (:(:), 0, 3)))))))
  ))