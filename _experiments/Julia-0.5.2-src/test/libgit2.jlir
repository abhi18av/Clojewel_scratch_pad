(:quote, (:block,
    (:line, 5, :none),
    (:||, (:call, :isdefined, (:quote, #QuoteNode
          :TestHelpers
        )), (:call, :include, (:call, :joinpath, (:call, :dirname, (:macrocall, Symbol("@__FILE__"))), "TestHelpers.jl"))),
    (:line, 6, :none),
    (:using, :TestHelpers),
    (:line, 8, :none),
    (:const, (:(=), :LIBGIT2_MIN_VER, (:macrocall, Symbol("@v_str"), "0.23.0"))),
    (:line, 15, :none),
    (:(=), :v, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :version
          )))),
    (:line, 16, :none),
    (:macrocall, Symbol("@test"), (:&&, (:call, :(==), (:., :v, (:quote, #QuoteNode
              :major
            )), (:., :LIBGIT2_MIN_VER, (:quote, #QuoteNode
              :major
            ))), (:call, :(>=), (:., :v, (:quote, #QuoteNode
              :minor
            )), (:., :LIBGIT2_MIN_VER, (:quote, #QuoteNode
              :minor
            ))))),
    (:line, 20, :none),
    (:(=), :f, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :features
          )))),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:call, :findfirst, :f, (:., (:., :LibGit2, (:quote, #QuoteNode
                :Consts
              )), (:quote, #QuoteNode
              :FEATURE_SSH
            ))), 0)),
    (:line, 22, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:call, :findfirst, :f, (:., (:., :LibGit2, (:quote, #QuoteNode
                :Consts
              )), (:quote, #QuoteNode
              :FEATURE_HTTPS
            ))), 0)),
    (:line, 26, :none),
    (:(=), :z, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :Oid
          )))),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
            :iszero
          )), :z)),
    (:line, 28, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :z, (:call, :zero, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            ))))),
    (:line, 29, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :z, (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), :z))),
    (:line, 30, :none),
    (:(=), :rs, (:call, :string, :z)),
    (:line, 31, :none),
    (:(=), :rr, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :raw
          )), :z)),
    (:line, 32, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :z, (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), :rr))),
    (:line, 33, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :z, (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), :rs))),
    (:line, 34, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :z, (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), (:call, :pointer, :rr)))),
    (:line, 35, :none),
    (:for, (:(=), :i, (:(:), 11, (:call, :length, :rr))), (:block,
        (:line, 35, :none),
        (:(=), (:ref, :rr, :i), 0)
      )),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), :rr), (:call, (:., :LibGit2, (:quote, #QuoteNode
              :Oid
            )), (:ref, :rs, (:(:), 1, 20))))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :Oid
          )), (:call, (:curly, :Ptr, :UInt8), :C_NULL))),
    (:line, 41, :none),
    (:(=), :p1, "XXX"),
    (:line, 42, :none),
    (:(=), :p2, "YYY"),
    (:line, 43, :none),
    (:(=), :sa1, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :StrArrayStruct
          )), :p1)),
    (:line, 44, :none),
    (:try, (:block,
        (:line, 45, :none),
        (:(=), :arr, (:call, :convert, (:curly, :Vector, :AbstractString), :sa1)),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :arr, 1), :p1))
      ), false, false, (:block,
        (:line, 48, :none),
        (:call, :finalize, :sa1)
      )),
    (:line, 51, :none),
    (:(=), :sa2, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :StrArrayStruct
          )), :p1, :p2)),
    (:line, 52, :none),
    (:try, (:block,
        (:line, 53, :none),
        (:(=), :arr1, (:call, :convert, (:curly, :Vector, :AbstractString), :sa2)),
        (:line, 54, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :arr1, 1), :p1)),
        (:line, 55, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :arr1, 2), :p2)),
        (:line, 56, :none),
        (:(=), :sa3, (:call, :copy, :sa2)),
        (:line, 57, :none),
        (:(=), :arr2, (:call, :convert, (:curly, :Vector, :AbstractString), :sa3)),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :arr1, 1), (:ref, :arr2, 1))),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :arr1, 2), (:ref, :arr2, 2))),
        (:line, 60, :none),
        (:call, :finalize, :sa3)
      ), false, false, (:block,
        (:line, 62, :none),
        (:call, :finalize, :sa2)
      )),
    (:line, 67, :none),
    (:(=), :sig, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :Signature
          )), "AAA", "AAA@BBB.COM", (:call, :round, (:call, :time), 0), 0)),
    (:line, 68, :none),
    (:(=), :git_sig, (:call, :convert, (:., :LibGit2, (:quote, #QuoteNode
            :GitSignature
          )), :sig)),
    (:line, 69, :none),
    (:(=), :sig2, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :Signature
          )), :git_sig)),
    (:line, 70, :none),
    (:call, :finalize, :git_sig),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig, (:quote, #QuoteNode
            :name
          )), (:., :sig2, (:quote, #QuoteNode
            :name
          )))),
    (:line, 72, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig, (:quote, #QuoteNode
            :email
          )), (:., :sig2, (:quote, #QuoteNode
            :email
          )))),
    (:line, 73, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig, (:quote, #QuoteNode
            :time
          )), (:., :sig2, (:quote, #QuoteNode
            :time
          )))),
    (:line, 74, :none),
    (:(=), :sig3, (:call, (:., :LibGit2, (:quote, #QuoteNode
            :Signature
          )), "AAA", "AAA@BBB.COM")),
    (:line, 75, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig3, (:quote, #QuoteNode
            :name
          )), (:., :sig, (:quote, #QuoteNode
            :name
          )))),
    (:line, 76, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig3, (:quote, #QuoteNode
            :email
          )), (:., :sig, (:quote, #QuoteNode
            :email
          )))),
    (:line, 81, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "https://user:pass@server.com:80/org/project.git")),
    (:line, 82, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :scheme
          )), "https")),
    (:line, 83, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), "user")),
    (:line, 84, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :password
          )), "pass")),
    (:line, 85, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :host
          )), "server.com")),
    (:line, 86, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :port
          )), "80")),
    (:line, 87, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :path
          )), "/org/project.git")),
    (:line, 90, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "ssh://user:pass@server:22/project.git")),
    (:line, 91, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :scheme
          )), "ssh")),
    (:line, 92, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), "user")),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :password
          )), "pass")),
    (:line, 94, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :host
          )), "server")),
    (:line, 95, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :port
          )), "22")),
    (:line, 96, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :path
          )), "/project.git")),
    (:line, 99, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "user@server:project.git")),
    (:line, 100, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :scheme
          )), :nothing)),
    (:line, 101, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), "user")),
    (:line, 102, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :password
          )), :nothing)),
    (:line, 103, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :host
          )), "server")),
    (:line, 104, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :port
          )), :nothing)),
    (:line, 105, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :path
          )), "project.git")),
    (:line, 108, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "https://github.com/JuliaLang/Example.jl.git")),
    (:line, 109, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :scheme
          )), "https")),
    (:line, 110, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), :nothing)),
    (:line, 111, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :password
          )), :nothing)),
    (:line, 112, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :host
          )), "github.com")),
    (:line, 113, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :port
          )), :nothing)),
    (:line, 114, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :path
          )), "/JuliaLang/Example.jl.git")),
    (:line, 117, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "git@github.com:JuliaLang/Example.jl.git")),
    (:line, 118, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :scheme
          )), :nothing)),
    (:line, 119, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), "git")),
    (:line, 120, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :password
          )), :nothing)),
    (:line, 121, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :host
          )), "github.com")),
    (:line, 122, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :port
          )), :nothing)),
    (:line, 123, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :path
          )), "JuliaLang/Example.jl.git")),
    (:line, 126, :none),
    (:(=), :m, (:call, :match, (:., :LibGit2, (:quote, #QuoteNode
            :URL_REGEX
          )), "user-name@hostname.com")),
    (:line, 127, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :m, (:quote, #QuoteNode
            :user
          )), "user-name")),
    (:line, 130, :none),
    (:call, :mktempdir, (:->, (:tuple, :dir), (:block,
          (:line, 132, :none),
          (:(=), :repo_url, "https://github.com/JuliaLang/Example.jl"),
          (:line, 133, :none),
          (:(=), :cache_repo, (:call, :joinpath, :dir, "Example")),
          (:line, 134, :none),
          (:(=), :test_repo, (:call, :joinpath, :dir, "Example.Test")),
          (:line, 135, :none),
          (:(=), :test_sig, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :Signature
                )), "TEST", "TEST@TEST.COM", (:call, :round, (:call, :time), 0), 0)),
          (:line, 136, :none),
          (:(=), :test_file, "testfile"),
          (:line, 137, :none),
          (:(=), :config_file, "testconfig"),
          (:line, 138, :none),
          (:(=), :commit_msg1, (:call, :randstring, 10)),
          (:line, 139, :none),
          (:(=), :commit_msg2, (:call, :randstring, 10)),
          (:line, 140, :none),
          (:(=), :commit_oid1, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :Oid
                )))),
          (:line, 141, :none),
          (:(=), :commit_oid2, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :Oid
                )))),
          (:line, 142, :none),
          (:(=), :commit_oid3, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :Oid
                )))),
          (:line, 143, :none),
          (:(=), :master_branch, "master"),
          (:line, 144, :none),
          (:(=), :test_branch, "test_branch"),
          (:line, 145, :none),
          (:(=), :tag1, "tag1"),
          (:line, 146, :none),
          (:(=), :tag2, "tag2"),
          (:line, 149, :none),
          (:(=), :cfg, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitConfig
                )), (:call, :joinpath, :dir, :config_file), (:., (:., :LibGit2, (:quote, #QuoteNode
                    :Consts
                  )), (:quote, #QuoteNode
                  :CONFIG_LEVEL_APP
                )))),
          (:line, 150, :none),
          (:try, (:block,
              (:line, 151, :none),
              (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Error
                    )), (:quote, #QuoteNode
                    :GitError
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :get
                    )), :AbstractString, :cfg, "tmp.str")),
              (:line, 152, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isempty, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :get
                        )), :cfg, "tmp.str", "")), true)),
              (:line, 154, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "tmp.str", "AAAA"),
              (:line, 155, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "tmp.int32", (:call, :Int32, 1)),
              (:line, 156, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "tmp.int64", (:call, :Int64, 1)),
              (:line, 157, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "tmp.bool", true),
              (:line, 159, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :get
                      )), :cfg, "tmp.str", ""), "AAAA")),
              (:line, 160, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :get
                      )), :cfg, "tmp.int32", (:call, :Int32, 0)), (:call, :Int32, 1))),
              (:line, 161, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :get
                      )), :cfg, "tmp.int64", (:call, :Int64, 0)), (:call, :Int64, 1))),
              (:line, 162, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :get
                      )), :cfg, "tmp.bool", false), true))
            ), false, false, (:block,
              (:line, 164, :none),
              (:call, :finalize, :cfg)
            )),
          (:line, 170, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :init
                )), :cache_repo)),
          (:line, 171, :none),
          (:try, (:block,
              (:line, 172, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, :cache_repo)),
              (:line, 173, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, (:call, :joinpath, :cache_repo, ".git"))),
              (:line, 176, :none),
              (:(=), :branch, "upstream"),
              (:line, 177, :none),
              (:call, :|>, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitRemote
                    )), :repo, :branch, :repo_url), :finalize),
              (:line, 179, :none),
              (:(=), :config, (:call, :joinpath, :cache_repo, ".git", "config")),
              (:line, 180, :none),
              (:(=), :lines, (:call, :split, (:call, :open, :readstring, :config, "r"), "\n")),
              (:line, 181, :none),
              (:macrocall, Symbol("@test"), (:call, :any, (:call, :map, (:->, :x, (:block,
                        (:line, 181, :none),
                        (:call, :(==), :x, "[remote \"upstream\"]")
                      )), :lines))),
              (:line, 183, :none),
              (:(=), :remote, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :get
                    )), (:., :LibGit2, (:quote, #QuoteNode
                      :GitRemote
                    )), :repo, :branch)),
              (:line, 184, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :url
                      )), :remote), :repo_url)),
              (:line, 185, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isattached
                    )), :repo)),
              (:line, 186, :none),
              (:call, :finalize, :remote)
            ), false, false, (:block,
              (:line, 188, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 193, :none),
          (:(=), :path, (:call, :joinpath, :dir, "Example.Bare")),
          (:line, 194, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :init
                )), :path, true)),
          (:line, 195, :none),
          (:try, (:block,
              (:line, 196, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, :path)),
              (:line, 197, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :path, (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Consts
                        )), (:quote, #QuoteNode
                        :HEAD_FILE
                      ))))),
              (:line, 198, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isattached
                    )), :repo))
            ), false, false, (:block,
              (:line, 200, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 203, :none),
          (:(=), :path, (:call, :joinpath, "garbagefakery", "Example.Bare")),
          (:line, 204, :none),
          (:try, (:block,
              (:line, 205, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :GitRepo
                  )), :path),
              (:line, 206, :none),
              (:call, :error, "unexpected")
            ), :e, (:block,
              (:line, 208, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :e), (:., :LibGit2, (:quote, #QuoteNode
                      :GitError
                    )))),
              (:line, 209, :none),
              (:macrocall, Symbol("@test"), (:call, :startswith, (:call, :sprint, :show, :e), "GitError(Code:ENOTFOUND, Class:OS, Failed to resolve path"))
            )),
          (:line, 217, :none),
          (:(=), :repo_path, (:call, :joinpath, :dir, "Example.Bare1")),
          (:line, 218, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :clone
                )), :cache_repo, :repo_path, (:kw, :isbare, true))),
          (:line, 219, :none),
          (:try, (:block,
              (:line, 220, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, :repo_path)),
              (:line, 221, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :repo_path, (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Consts
                        )), (:quote, #QuoteNode
                        :HEAD_FILE
                      ))))),
              (:line, 222, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isattached
                    )), :repo)),
              (:line, 223, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :remotes
                      )), :repo), (:vect, "origin")))
            ), false, false, (:block,
              (:line, 225, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 229, :none),
          (:(=), :repo_path, (:call, :joinpath, :dir, "Example.Bare2")),
          (:line, 230, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :clone
                )), :cache_repo, :repo_path, (:kw, :isbare, true), (:kw, :remote_cb, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :mirror_cb
                    )))))),
          (:line, 231, :none),
          (:try, (:block,
              (:line, 232, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, :repo_path)),
              (:line, 233, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :repo_path, (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Consts
                        )), (:quote, #QuoteNode
                        :HEAD_FILE
                      ))))),
              (:line, 234, :none),
              (:(=), :rmt, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :get
                    )), (:., :LibGit2, (:quote, #QuoteNode
                      :GitRemote
                    )), :repo, "origin")),
              (:line, 235, :none),
              (:try, (:block,
                  (:line, 236, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, (:., :LibGit2, (:quote, #QuoteNode
                              :fetch_refspecs
                            )), :rmt), 1), "+refs/*:refs/*")),
                  (:line, 237, :none),
                  (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :isattached
                        )), :repo)),
                  (:line, 238, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :remotes
                          )), :repo), (:vect, "origin")))
                ), false, false, (:block,
                  (:line, 240, :none),
                  (:call, :finalize, :rmt)
                ))
            ), false, false, (:block,
              (:line, 243, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 247, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :clone
                )), :cache_repo, :test_repo, (:kw, :remote_cb, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :mirror_cb
                    )))))),
          (:line, 248, :none),
          (:try, (:block,
              (:line, 249, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, :test_repo)),
              (:line, 250, :none),
              (:macrocall, Symbol("@test"), (:call, :isdir, (:call, :joinpath, :test_repo, ".git"))),
              (:line, 251, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isattached
                    )), :repo))
            ), false, false, (:block,
              (:line, 253, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 261, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 262, :none),
          (:(=), :repo_file, (:call, :open, (:call, :joinpath, :cache_repo, :test_file), "a")),
          (:line, 263, :none),
          (:try, (:block,
              (:line, 265, :none),
              (:call, :println, :repo_file, :commit_msg1),
              (:line, 266, :none),
              (:call, :flush, :repo_file),
              (:line, 267, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, :test_file),
              (:line, 268, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :iszero
                    )), :commit_oid1)),
              (:line, 269, :none),
              (:(=), :commit_oid1, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :commit
                    )), (:parameters, (:kw, :author, :test_sig), (:kw, :committer, :test_sig)), :repo, :commit_msg1)),
              (:line, 270, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :iszero
                      )), :commit_oid1))),
              (:line, 272, :none),
              (:call, :println, :repo_file, (:call, :randstring, 10)),
              (:line, 273, :none),
              (:call, :flush, :repo_file),
              (:line, 274, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, :test_file),
              (:line, 275, :none),
              (:(=), :commit_oid3, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :commit
                    )), (:parameters, (:kw, :author, :test_sig), (:kw, :committer, :test_sig)), :repo, (:call, :randstring, 10))),
              (:line, 277, :none),
              (:call, :println, :repo_file, :commit_msg2),
              (:line, 278, :none),
              (:call, :flush, :repo_file),
              (:line, 279, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, :test_file),
              (:line, 280, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :iszero
                    )), :commit_oid2)),
              (:line, 281, :none),
              (:(=), :commit_oid2, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :commit
                    )), (:parameters, (:kw, :author, :test_sig), (:kw, :committer, :test_sig)), :repo, :commit_msg2)),
              (:line, 282, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :iszero
                      )), :commit_oid2))),
              (:line, 283, :none),
              (:(=), :auths, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :authors
                    )), :repo)),
              (:line, 284, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :auths), 3)),
              (:line, 285, :none),
              (:for, (:(=), :auth, :auths), (:block,
                  (:line, 286, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :name
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :name
                        )))),
                  (:line, 287, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :time
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :time
                        )))),
                  (:line, 288, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :email
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :email
                        ))))
                )),
              (:line, 292, :none),
              (:(=), :cmt, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :get
                    )), (:., :LibGit2, (:quote, #QuoteNode
                      :GitCommit
                    )), :repo, :commit_oid1)),
              (:line, 293, :none),
              (:try, (:block,
                  (:line, 294, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :commit_oid1, (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :Oid
                          )), :cmt))),
                  (:line, 295, :none),
                  (:(=), :auth, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :author
                        )), :cmt)),
                  (:line, 296, :none),
                  (:macrocall, Symbol("@test"), (:call, :isa, :auth, (:., :LibGit2, (:quote, #QuoteNode
                          :Signature
                        )))),
                  (:line, 297, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :name
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :name
                        )))),
                  (:line, 298, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :time
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :time
                        )))),
                  (:line, 299, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :auth, (:quote, #QuoteNode
                          :email
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :email
                        )))),
                  (:line, 300, :none),
                  (:(=), :cmtr, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :committer
                        )), :cmt)),
                  (:line, 301, :none),
                  (:macrocall, Symbol("@test"), (:call, :isa, :cmtr, (:., :LibGit2, (:quote, #QuoteNode
                          :Signature
                        )))),
                  (:line, 302, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :cmtr, (:quote, #QuoteNode
                          :name
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :name
                        )))),
                  (:line, 303, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :cmtr, (:quote, #QuoteNode
                          :time
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :time
                        )))),
                  (:line, 304, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :cmtr, (:quote, #QuoteNode
                          :email
                        )), (:., :test_sig, (:quote, #QuoteNode
                          :email
                        )))),
                  (:line, 305, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :message
                          )), :cmt), :commit_msg1))
                ), false, false, (:block,
                  (:line, 307, :none),
                  (:call, :finalize, :cmt)
                ))
            ), false, false, (:block,
              (:line, 310, :none),
              (:call, :finalize, :repo),
              (:line, 311, :none),
              (:call, :close, :repo_file)
            )),
          (:line, 316, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 317, :none),
          (:try, (:block,
              (:line, 318, :none),
              (:(=), :brnch, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :branch
                    )), :repo)),
              (:line, 319, :none),
              (:(=), :brref, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :head
                    )), :repo)),
              (:line, 320, :none),
              (:try, (:block,
                  (:line, 321, :none),
                  (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :isbranch
                        )), :brref)),
                  (:line, 322, :none),
                  (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :isremote
                          )), :brref))),
                  (:line, 323, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :name
                          )), :brref), "refs/heads/master")),
                  (:line, 324, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :shortname
                          )), :brref), :master_branch)),
                  (:line, 325, :none),
                  (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :ishead
                        )), :brref)),
                  (:line, 326, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :upstream
                          )), :brref), :nothing)),
                  (:line, 327, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :repo, (:quote, #QuoteNode
                          :ptr
                        )), (:., (:call, (:., :LibGit2, (:quote, #QuoteNode
                              :owner
                            )), :brref), (:quote, #QuoteNode
                          :ptr
                        )))),
                  (:line, 328, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), :brnch, :master_branch)),
                  (:line, 329, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :headname
                          )), :repo), :master_branch)),
                  (:line, 330, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :branch!
                      )), :repo, :test_branch, (:call, :string, :commit_oid1), (:kw, :set_head, false)),
                  (:line, 332, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :lookup_branch
                          )), :repo, :test_branch, true), :nothing)),
                  (:line, 333, :none),
                  (:(=), :tbref, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :lookup_branch
                        )), :repo, :test_branch, false)),
                  (:line, 334, :none),
                  (:try, (:block,
                      (:line, 335, :none),
                      (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                                :shortname
                              )), :tbref), :test_branch)),
                      (:line, 336, :none),
                      (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., :LibGit2, (:quote, #QuoteNode
                                :upstream
                              )), :tbref), :nothing))
                    ), false, false, (:block,
                      (:line, 338, :none),
                      (:call, :finalize, :tbref)
                    ))
                ), false, false, (:block,
                  (:line, 341, :none),
                  (:call, :finalize, :brref)
                )),
              (:line, 344, :none),
              (:(=), :branches, (:call, :map, (:->, :b, (:block,
                      (:line, 344, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :shortname
                          )), (:ref, :b, 1))
                    )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :GitBranchIter
                      )), :repo))),
              (:line, 345, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :master_branch, :branches)),
              (:line, 346, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :test_branch, :branches))
            ), false, false, (:block,
              (:line, 348, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 353, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 354, :none),
          (:try, (:block,
              (:line, 355, :none),
              (:try, (:block,
                  (:line, 356, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :Signature
                      )), :repo)
                ), :ex, (:block,
                  (:line, 360, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isa, :ex, (:., (:., :LibGit2, (:quote, #QuoteNode
                              :Error
                            )), (:quote, #QuoteNode
                            :GitError
                          ))), true)),
                  (:line, 362, :none),
                  (:(=), :cfg, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :GitConfig
                        )), :repo)),
                  (:line, 363, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :set!
                      )), :cfg, "user.name", "AAAA"),
                  (:line, 364, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :set!
                      )), :cfg, "user.email", "BBBB@BBBB.COM"),
                  (:line, 365, :none),
                  (:(=), :sig, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :Signature
                        )), :repo)),
                  (:line, 366, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig, (:quote, #QuoteNode
                          :name
                        )), "AAAA")),
                  (:line, 367, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:., :sig, (:quote, #QuoteNode
                          :email
                        )), "BBBB@BBBB.COM"))
                ))
            ), false, false, (:block,
              (:line, 370, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 376, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 377, :none),
          (:try, (:block,
              (:line, 378, :none),
              (:(=), :tags, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_list
                    )), :repo)),
              (:line, 379, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :tags), 0)),
              (:line, 381, :none),
              (:(=), :tag_oid1, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_create
                    )), :repo, :tag1, :commit_oid1, (:kw, :sig, :test_sig))),
              (:line, 382, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :iszero
                      )), :tag_oid1))),
              (:line, 383, :none),
              (:(=), :tags, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_list
                    )), :repo)),
              (:line, 384, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :tags), 1)),
              (:line, 385, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :tag1, :tags)),
              (:line, 386, :none),
              (:(=), :tag1ref, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitReference
                    )), :repo, (:string, "refs/tags/", :tag1))),
              (:line, 387, :none),
              (:macrocall, Symbol("@test"), (:call, :isempty, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :fullname
                      )), :tag1ref))),
              (:line, 388, :none),
              (:(=), :tag1tag, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :peel
                    )), (:., :LibGit2, (:quote, #QuoteNode
                      :GitTag
                    )), :tag1ref)),
              (:line, 389, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :name
                      )), :tag1tag), :tag1)),
              (:line, 390, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :target
                      )), :tag1tag), :commit_oid1)),
              (:line, 392, :none),
              (:(=), :tag_oid2, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_create
                    )), :repo, :tag2, :commit_oid2)),
              (:line, 393, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :iszero
                      )), :tag_oid2))),
              (:line, 394, :none),
              (:(=), :tags, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_list
                    )), :repo)),
              (:line, 395, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :tags), 2)),
              (:line, 396, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :tag2, :tags)),
              (:line, 398, :none),
              (:(=), :refs, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :ref_list
                    )), :repo)),
              (:line, 399, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), :refs, (:vect, "refs/heads/master", "refs/heads/test_branch", "refs/tags/tag1", "refs/tags/tag2"))),
              (:line, 401, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :tag_delete
                  )), :repo, :tag1),
              (:line, 402, :none),
              (:(=), :tags, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_list
                    )), :repo)),
              (:line, 403, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :tags), 1)),
              (:line, 404, :none),
              (:macrocall, Symbol("@test"), (:call, :∈, :tag2, :tags)),
              (:line, 405, :none),
              (:macrocall, Symbol("@test"), (:call, :∉, :tag1, :tags))
            ), false, false, (:block,
              (:line, 407, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 412, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 413, :none),
          (:try, (:block,
              (:line, 414, :none),
              (:(=), :status, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitStatus
                    )), :repo)),
              (:line, 415, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :status), 0)),
              (:line, 416, :none),
              (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :status, 1)),
              (:line, 417, :none),
              (:(=), :repo_file, (:call, :open, (:call, :joinpath, :cache_repo, "statusfile"), "a")),
              (:line, 420, :none),
              (:call, :println, :repo_file, :commit_msg1),
              (:line, 421, :none),
              (:call, :flush, :repo_file),
              (:line, 422, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, :test_file),
              (:line, 423, :none),
              (:(=), :status, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitStatus
                    )), :repo)),
              (:line, 424, :none),
              (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :length, :status), 0)),
              (:line, 425, :none),
              (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :status, 0)),
              (:line, 426, :none),
              (:macrocall, Symbol("@test_throws"), :BoundsError, (:ref, :status, (:call, :+, (:call, :length, :status), 1))),
              (:line, 428, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:., (:ref, :status, 1), (:quote, #QuoteNode
                      :status
                    )), (:., (:., :LibGit2, (:quote, #QuoteNode
                        :Consts
                      )), (:quote, #QuoteNode
                      :STATUS_WT_NEW
                    ))))
            ), false, false, (:block,
              (:line, 430, :none),
              (:call, :finalize, :repo),
              (:line, 431, :none),
              (:call, :close, :repo_file)
            )),
          (:line, 436, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 437, :none),
          (:try, (:block,
              (:line, 439, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :fetch
                      )), :repo), 0)),
              (:line, 440, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isfile, (:call, :joinpath, :test_repo, :test_file)))),
              (:line, 443, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :merge!
                    )), :repo, (:kw, :fastforward, true))),
              (:line, 446, :none),
              (:(=), :head_oid, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :head_oid
                    )), :repo)),
              (:line, 447, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :reset!
                  )), :repo, :head_oid, (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Consts
                    )), (:quote, #QuoteNode
                    :RESET_HARD
                  ))),
              (:line, 448, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :test_repo, :test_file))),
              (:line, 451, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :checkout!
                  )), :repo, (:call, :string, :commit_oid3)),
              (:line, 452, :none),
              (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Error
                    )), (:quote, #QuoteNode
                    :GitError
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :merge!
                    )), :repo, (:kw, :fastforward, true))),
              (:line, 455, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :branch!
                  )), :repo, :test_branch),
              (:line, 456, :none),
              (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Error
                    )), (:quote, #QuoteNode
                    :GitError
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :merge!
                    )), :repo, (:kw, :fastforward, true))),
              (:line, 459, :none),
              (:(=), :cfg, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitConfig
                    )), :repo)),
              (:line, 460, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "user.name", "AAAA"),
              (:line, 461, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :set!
                  )), :cfg, "user.email", "BBBB@BBBB.COM"),
              (:line, 464, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :rebase!
                  )), :repo, :master_branch),
              (:line, 467, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :branch!
                  )), :repo, :master_branch)
            ), false, false, (:block,
              (:line, 470, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 476, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :joinpath, :test_repo, :test_file)), (:call, :readstring, (:call, :joinpath, :cache_repo, :test_file)))),
          (:line, 480, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 481, :none),
          (:try, (:block,
              (:line, 483, :none),
              (:(=), :tags, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :tag_list
                    )), :repo)),
              (:line, 484, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :tags), 1)),
              (:line, 485, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :tag2, :tags)),
              (:line, 488, :none),
              (:(=), :branches, (:call, :map, (:->, :b, (:block,
                      (:line, 488, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :shortname
                          )), (:ref, :b, 1))
                    )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :GitBranchIter
                      )), :repo))),
              (:line, 489, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :master_branch, :branches)),
              (:line, 490, :none),
              (:macrocall, Symbol("@test"), (:call, :in, :test_branch, :branches)),
              (:line, 493, :none),
              (:(=), :tag2ref, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitReference
                    )), :repo, (:string, "refs/tags/", :tag2))),
              (:line, 494, :none),
              (:try, (:block,
                  (:line, 495, :none),
                  (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Error
                        )), (:quote, #QuoteNode
                        :GitError
                      )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :upstream
                        )), :tag2ref))
                ), false, false, (:block,
                  (:line, 497, :none),
                  (:call, :finalize, :tag2ref)
                ))
            ), false, false, (:block,
              (:line, 501, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 506, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 507, :none),
          (:(=), :cache, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :cache_repo)),
          (:line, 508, :none),
          (:try, (:block,
              (:line, 509, :none),
              (:(=), :oids, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :with
                    )), (:->, (:tuple, :walker), (:block,
                      (:line, 510, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :map
                          )), (:->, (:tuple, :oid, :repo), (:block,
                            (:line, 510, :none),
                            (:tuple, :oid, :repo)
                          )), :walker, (:kw, :oid, :commit_oid1), (:kw, :by, (:., (:., :LibGit2, (:quote, #QuoteNode
                                :Consts
                              )), (:quote, #QuoteNode
                              :SORT_TIME
                            ))))
                    )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :GitRevWalker
                      )), :repo))),
              (:line, 512, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :oids), 1)),
              (:line, 514, :none),
              (:(=), :test_oids, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :with
                    )), (:->, (:tuple, :walker), (:block,
                      (:line, 515, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :map
                          )), (:->, (:tuple, :oid, :repo), (:block,
                            (:line, 515, :none),
                            (:call, :string, :oid)
                          )), :walker, (:kw, :by, (:., (:., :LibGit2, (:quote, #QuoteNode
                                :Consts
                              )), (:quote, #QuoteNode
                              :SORT_TIME
                            ))))
                    )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :GitRevWalker
                      )), :repo))),
              (:line, 517, :none),
              (:(=), :cache_oids, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :with
                    )), (:->, (:tuple, :walker), (:block,
                      (:line, 518, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :map
                          )), (:->, (:tuple, :oid, :repo), (:block,
                            (:line, 518, :none),
                            (:call, :string, :oid)
                          )), :walker, (:kw, :by, (:., (:., :LibGit2, (:quote, #QuoteNode
                                :Consts
                              )), (:quote, #QuoteNode
                              :SORT_TIME
                            ))))
                    )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :GitRevWalker
                      )), :cache))),
              (:line, 520, :none),
              (:for, (:(=), :i, (:call, :eachindex, :oids)), (:block,
                  (:line, 521, :none),
                  (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :cache_oids, :i), (:ref, :test_oids, :i)))
                ))
            ), false, false, (:block,
              (:line, 524, :none),
              (:call, :finalize, :repo),
              (:line, 525, :none),
              (:call, :finalize, :cache)
            )),
          (:line, 531, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 532, :none),
          (:try, (:block,
              (:line, 534, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :with
                  )), (:->, (:tuple, :idx), (:block,
                    (:line, 535, :none),
                    (:(=), :i, (:call, :find, :test_file, :idx)),
                    (:line, 536, :none),
                    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isnull, :i))),
                    (:line, 537, :none),
                    (:macrocall, Symbol("@test"), (:call, :(!==), (:ref, :idx, (:call, :get, :i)), :nothing))
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitIndex
                    )), :repo)),
              (:line, 541, :none),
              (:(=), :st, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, "XYZ")),
              (:line, 542, :none),
              (:macrocall, Symbol("@test"), (:call, :isnull, :st)),
              (:line, 545, :none),
              (:(=), :st, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, :test_file)),
              (:line, 546, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isnull, :st))),
              (:line, 547, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isset
                    )), (:call, :get, :st), (:., (:., :LibGit2, (:quote, #QuoteNode
                        :Consts
                      )), (:quote, #QuoteNode
                      :STATUS_CURRENT
                    )))),
              (:line, 550, :none),
              (:call, :open, (:->, (:tuple, :io), (:block,
                    (:line, 551, :none),
                    (:call, :write, :io, 0x41)
                  )), (:call, :joinpath, :test_repo, :test_file), "a"),
              (:line, 555, :none),
              (:(=), :st_mod, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, :test_file)),
              (:line, 556, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :isset
                      )), (:call, :get, :st_mod), (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Consts
                        )), (:quote, #QuoteNode
                        :STATUS_INDEX_MODIFIED
                      ))))),
              (:line, 557, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isset
                    )), (:call, :get, :st_mod), (:., (:., :LibGit2, (:quote, #QuoteNode
                        :Consts
                      )), (:quote, #QuoteNode
                      :STATUS_WT_MODIFIED
                    )))),
              (:line, 560, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, :test_file),
              (:line, 563, :none),
              (:(=), :st_stg, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, :test_file)),
              (:line, 564, :none),
              (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :isset
                    )), (:call, :get, :st_stg), (:., (:., :LibGit2, (:quote, #QuoteNode
                        :Consts
                      )), (:quote, #QuoteNode
                      :STATUS_INDEX_MODIFIED
                    )))),
              (:line, 565, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :isset
                      )), (:call, :get, :st_stg), (:., (:., :LibGit2, (:quote, #QuoteNode
                          :Consts
                        )), (:quote, #QuoteNode
                        :STATUS_WT_MODIFIED
                      ))))),
              (:line, 568, :none),
              (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Error
                    )), (:quote, #QuoteNode
                    :GitError
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :reset!
                    )), :repo, "XYZ", :test_file)),
              (:line, 571, :none),
              (:(=), :st_new, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, :test_file)),
              (:line, 572, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get, :st_new), (:call, :get, :st_stg))),
              (:line, 575, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :reset!
                  )), :repo, (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Consts
                    )), (:quote, #QuoteNode
                    :HEAD_FILE
                  )), :test_file),
              (:line, 576, :none),
              (:(=), :st_uns, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :status
                    )), :repo, :test_file)),
              (:line, 577, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get, :st_uns), (:call, :get, :st_mod))),
              (:line, 580, :none),
              (:macrocall, Symbol("@test_throws"), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Error
                    )), (:quote, #QuoteNode
                    :GitError
                  )), (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :reset!
                    )), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :Oid
                      ))), (:., (:., :LibGit2, (:quote, #QuoteNode
                        :Consts
                      )), (:quote, #QuoteNode
                      :RESET_HARD
                    )))),
              (:line, 582, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :reset!
                  )), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :head_oid
                    )), :repo), (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Consts
                    )), (:quote, #QuoteNode
                    :RESET_HARD
                  ))),
              (:line, 583, :none),
              (:call, :open, (:->, (:tuple, :io), (:block,
                    (:line, 584, :none),
                    (:macrocall, Symbol("@test"), (:call, :(!=), (:ref, (:call, :read, :io), :end), 0x41))
                  )), (:call, :joinpath, :test_repo, :test_file), "r")
            ), false, false, (:block,
              (:line, 587, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 592, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 593, :none),
          (:try, (:block,
              (:line, 594, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :branch!
                  )), :repo, "branch/a"),
              (:line, 596, :none),
              (:(=), :oldhead, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :head_oid
                    )), :repo)),
              (:line, 597, :none),
              (:call, :open, (:->, (:tuple, :f), (:block,
                    (:line, 598, :none),
                    (:call, :write, :f, "111\n")
                  )), (:call, :joinpath, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :path
                      )), :repo), "file1"), "w"),
              (:line, 600, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, "file1"),
              (:line, 601, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :commit
                  )), :repo, "add file1"),
              (:line, 603, :none),
              (:call, :open, (:->, (:tuple, :f), (:block,
                    (:line, 604, :none),
                    (:call, :write, :f, "222\n")
                  )), (:call, :joinpath, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :path
                      )), :repo), "file2"), "w"),
              (:line, 606, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, "file2"),
              (:line, 607, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :commit
                  )), :repo, "add file2"),
              (:line, 609, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :branch!
                  )), :repo, "branch/b"),
              (:line, 612, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :reset!
                  )), :repo, :oldhead, (:., (:., :LibGit2, (:quote, #QuoteNode
                      :Consts
                    )), (:quote, #QuoteNode
                    :RESET_SOFT
                  ))),
              (:line, 613, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :commit
                  )), :repo, "squash file1 and file2"),
              (:line, 616, :none),
              (:call, :open, (:->, (:tuple, :f), (:block,
                    (:line, 617, :none),
                    (:call, :write, :f, "333\n")
                  )), (:call, :joinpath, (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :path
                      )), :repo), "file3"), "w"),
              (:line, 619, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, "file3"),
              (:line, 620, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :commit
                  )), :repo, "add file3"),
              (:line, 622, :none),
              (:(=), :newhead, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :head_oid
                    )), :repo)),
              (:line, 625, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :branch!
                  )), :repo, "branch/a"),
              (:line, 626, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :rebase!
                  )), :repo, "branch/b"),
              (:line, 629, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :head_oid
                      )), :repo), :newhead))
            ), false, false, (:block,
              (:line, 631, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 636, :none),
          (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :GitRepo
                )), :test_repo)),
          (:line, 637, :none),
          (:try, (:block,
              (:line, 638, :none),
              (:call, :cp, (:call, :joinpath, :test_repo, :test_file), (:call, :joinpath, :test_repo, "CCC")),
              (:line, 639, :none),
              (:call, :cp, (:call, :joinpath, :test_repo, :test_file), (:call, :joinpath, :test_repo, "AAA")),
              (:line, 640, :none),
              (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :add!
                  )), :repo, "AAA"),
              (:line, 641, :none),
              (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :transact
                    )), (:->, (:tuple, :trepo), (:block,
                      (:line, 642, :none),
                      (:call, :mv, (:call, :joinpath, :test_repo, :test_file), (:call, :joinpath, :test_repo, "BBB")),
                      (:line, 643, :none),
                      (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :add!
                          )), :trepo, "BBB"),
                      (:line, 644, :none),
                      (:(=), :oid, (:call, (:., :LibGit2, (:quote, #QuoteNode
                              :commit
                            )), (:parameters, (:kw, :author, :test_sig), (:kw, :committer, :test_sig)), :trepo, "test commit")),
                      (:line, 645, :none),
                      (:call, :error, "Force recovery")
                    )), :repo)),
              (:line, 647, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :test_repo, "AAA"))),
              (:line, 648, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :test_repo, "CCC"))),
              (:line, 649, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isfile, (:call, :joinpath, :test_repo, "BBB")))),
              (:line, 650, :none),
              (:macrocall, Symbol("@test"), (:call, :isfile, (:call, :joinpath, :test_repo, :test_file)))
            ), false, false, (:block,
              (:line, 652, :none),
              (:call, :finalize, :repo)
            )),
          (:line, 657, :none),
          (:if, (:call, :is_unix), (:block,
              (:line, 659, :none),
              (:(=), :repo, (:call, (:., :LibGit2, (:quote, #QuoteNode
                      :GitRepo
                    )), :test_repo)),
              (:line, 660, :none),
              (:try, (:block,
                  (:line, 661, :none),
                  (:call, :cp, (:call, :joinpath, :test_repo, :test_file), (:call, :joinpath, :test_repo, "proptest")),
                  (:line, 662, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :add!
                      )), :repo, "proptest"),
                  (:line, 663, :none),
                  (:(=), :id1, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :commit
                        )), :repo, "test property change 1")),
                  (:line, 665, :none),
                  (:call, :chmod, (:call, :joinpath, :test_repo, "proptest"), 0x01e4),
                  (:line, 666, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :add!
                      )), :repo, "proptest"),
                  (:line, 667, :none),
                  (:(=), :id2, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :commit
                        )), :repo, "test property change 2")),
                  (:line, 668, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :checkout!
                      )), :repo, (:call, :string, :id1)),
                  (:line, 669, :none),
                  (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :isdirty
                          )), :repo))),
                  (:line, 671, :none),
                  (:call, :mv, (:call, :joinpath, :test_repo, "proptest"), (:call, :joinpath, :test_repo, "proptest2")),
                  (:line, 672, :none),
                  (:call, :symlink, (:call, :joinpath, :test_repo, "proptest2"), (:call, :joinpath, :test_repo, "proptest")),
                  (:line, 673, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :add!
                      )), :repo, "proptest", "proptest2"),
                  (:line, 674, :none),
                  (:(=), :id3, (:call, (:., :LibGit2, (:quote, #QuoteNode
                          :commit
                        )), :repo, "test symlink change")),
                  (:line, 675, :none),
                  (:call, (:., :LibGit2, (:quote, #QuoteNode
                        :checkout!
                      )), :repo, (:call, :string, :id1)),
                  (:line, 676, :none),
                  (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                            :isdirty
                          )), :repo)))
                ), false, false, (:block,
                  (:line, 678, :none),
                  (:call, :finalize, :repo)
                ))
            )),
          (:line, 684, :none),
          (:(=), :creds_user, "USER"),
          (:line, 685, :none),
          (:(=), :creds_pass, "PASS"),
          (:line, 686, :none),
          (:(=), :creds, (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :UserPasswordCredentials
                )), :creds_user, :creds_pass)),
          (:line, 687, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :checkused!
                  )), :creds))),
          (:line, 688, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :checkused!
                  )), :creds))),
          (:line, 689, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, (:., :LibGit2, (:quote, #QuoteNode
                    :checkused!
                  )), :creds))),
          (:line, 690, :none),
          (:macrocall, Symbol("@test"), (:call, (:., :LibGit2, (:quote, #QuoteNode
                  :checkused!
                )), :creds)),
          (:line, 691, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:., :creds, (:quote, #QuoteNode
                  :user
                )), :creds_user)),
          (:line, 692, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:., :creds, (:quote, #QuoteNode
                  :pass
                )), :creds_pass))
        )))
  ))