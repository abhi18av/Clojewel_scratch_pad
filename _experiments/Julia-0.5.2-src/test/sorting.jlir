(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Order, :Forward),
    (:line, 5, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:vect, 2, 3, 1)), (:vect, 1, 2, 3))),
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:vect, 2, 3, 1), (:kw, :rev, true)), (:vect, 3, 2, 1))),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:vcat, (:(:), 'z', -1, 'a'))), (:vcat, (:(:), 'a', 'z')))),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:vcat, (:(:), 'a', 'z')), (:kw, :rev, true)), (:vcat, (:(:), 'z', -1, 'a')))),
    (:line, 9, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sortperm, (:vect, 2, 3, 1)), (:vect, 3, 1, 2))),
    (:line, 10, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sortperm!, (:vect, 1, 2, 3), (:vect, 2, 3, 1)), (:vect, 3, 1, 2))),
    (:line, 11, :none),
    (:let, (:block,
        (:line, 12, :none),
        (:(=), :r, (:call, :sortperm!, :s, (:vect, 2, 3, 1))),
        (:line, 13, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :r, (:vect, 3, 1, 2))),
        (:line, 14, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), :r, :s))
      ), (:(=), :s, (:call, :view, (:vect, 1, 2, 3, 4), (:(:), 1, 3)))),
    (:line, 16, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :sortperm!, (:call, :view, (:vect, 1, 2, 3, 4), (:(:), 1, 4)), (:vect, 2, 3, 1))),
    (:line, 17, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :issorted, (:vect, 2, 3, 1)))),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :issorted, (:vect, 1, 2, 3))),
    (:line, 19, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reverse, (:vect, 2, 3, 1)), (:vect, 1, 3, 2))),
    (:line, 20, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, (:vect, 3, 6, 30, 1, 9), 3), 6)),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, (:vect, 3, 6, 30, 1, 9), (:(:), 3, 4)), (:vect, 6, 9))),
    (:line, 22, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm, (:vect, 3, 6, 30, 1, 9), (:(:), 3, 4)), (:vect, 2, 5))),
    (:line, 23, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm!, (:call, :collect, (:(:), 1, 5)), (:vect, 3, 6, 30, 1, 9), (:(:), 3, 4)), (:vect, 2, 5))),
    (:line, 24, :none),
    (:let, (:block,
        (:line, 25, :none),
        (:for, (:(=), :r, (:ref, :Any, (:(:), 2, 4), (:(:), 1, 2), (:(:), 10, 10), (:(:), 4, 2), (:(:), 2, 1), (:(:), 4, -1, 2), (:(:), 2, -1, 1), (:(:), 10, -1, 10), (:(:), 4, 1, 3), (:(:), 1, 2, 8), (:(:), 10, -3, 1))), (:block,
            (:line, 26, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, :a, :r), (:vcat, :r))),
            (:line, 27, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm, :a, :r), (:vcat, :r))),
            (:line, 28, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, :a, :r, (:kw, :rev, true)), (:call, :.-, 11, (:vcat, :r)))),
            (:line, 29, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm, :a, :r, (:kw, :rev, true)), (:call, :.-, 11, (:vcat, :r))))
          ))
      ), (:(=), :a, (:vcat, (:(:), 1, 10)))),
    (:line, 32, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, (:call, :randperm, 6)), 21)),
    (:line, 34, :none),
    (:(=), :numTypes, (:vect, :Int8, :Int16, :Int32, :Int64, :Int128, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128, :Float16, :Float32, :Float64, :BigInt, :BigFloat)),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vcat, (:(:), 1, 10)), 1, (:kw, :by, (:->, :x, (:block,
                (:line, 38, :none),
                (:call, :(>=), :x, 5)
              )))), (:(:), 1, 4))),
    (:line, 39, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vcat, (:(:), 1, 10)), 10, (:kw, :by, (:->, :x, (:block,
                (:line, 39, :none),
                (:call, :(>=), :x, 5)
              )))), (:(:), 5, 10))),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vcat, (:(:), 1, 5), (:(:), 1, 5), (:(:), 1, 5)), 1, 6, 10, :Forward), (:(:), 6, 6))),
    (:line, 41, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:call, :ones, 15), 1, 6, 10, :Forward), (:(:), 6, 10))),
    (:line, 43, :none),
    (:for, (:block,
        (:(=), :R, :numTypes),
        (:(=), :T, :numTypes)
      ), (:block,
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:ref, :R, 1, 1, 2, 2, 3, 3), (:call, :T, 0)), (:(:), 1, 0))),
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:ref, :R, 1, 1, 2, 2, 3, 3), (:call, :T, 1)), (:(:), 1, 2))),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:ref, :R, 1, 1, 2, 2, 3, 3), (:call, :T, 2)), (:(:), 3, 4))),
        (:line, 47, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:ref, :R, 1, 1, 2, 2, 3, 3), (:call, :T, 4)), (:(:), 7, 6))),
        (:line, 48, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:ref, :R, 1, 1, 2, 2, 3, 3), 2.5), (:(:), 5, 4))),
        (:line, 50, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 3), (:call, :T, 0)), (:(:), 1, 0))),
        (:line, 51, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 3), (:call, :T, 1)), (:(:), 1, 1))),
        (:line, 52, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 3), (:call, :T, 2)), (:(:), 2, 2))),
        (:line, 53, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 3), (:call, :T, 4)), (:(:), 4, 3))),
        (:line, 55, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:typed_vcat, :R, (:(:), 1, 10)), (:call, :T, 1), (:kw, :by, (:->, :x, (:block,
                    (:line, 55, :none),
                    (:call, :(>=), :x, 5)
                  )))), (:(:), 1, 4))),
        (:line, 56, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:typed_vcat, :R, (:(:), 1, 10)), (:call, :T, 10), (:kw, :by, (:->, :x, (:block,
                    (:line, 56, :none),
                    (:call, :(>=), :x, 5)
                  )))), (:(:), 5, 10))),
        (:line, 57, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:typed_vcat, :R, (:(:), 1, 5), (:(:), 1, 5), (:(:), 1, 5)), (:call, :T, 1), 6, 10, :Forward), (:(:), 6, 6))),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:call, :ones, :R, 15), (:call, :T, 1), 6, 10, :Forward), (:(:), 6, 10)))
      )),
    (:line, 61, :none),
    (:for, (:(=), (:tuple, :rg, :I), (:vect, (:tuple, (:(:), 49, 57), (:(:), 47, 59)), (:tuple, (:(:), 1, 2, 17), (:(:), -1, 19)), (:tuple, (:(:), -3, 0.5, 2), (:(:), -5, 0.5, 4)))), (:block,
        (:line, 62, :none),
        (:(=), :rg_r, (:call, :reverse, :rg)),
        (:line, 63, :none),
        (:(=), (:tuple, :rgv, :rgv_r), (:tuple, (:vcat, :rg), (:vcat, :rg_r))),
        (:line, 64, :none),
        (:for, (:(=), :i, :I), (:block,
            (:line, 65, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg, :i), (:call, :searchsorted, :rgv, :i))),
            (:line, 66, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg_r, :i, (:kw, :rev, true)), (:call, :searchsorted, :rgv_r, :i, (:kw, :rev, true))))
          ))
      )),
    (:line, 70, :none),
    (:(=), :rg, (:(:), 0.0, 0.01, 1.0)),
    (:line, 71, :none),
    (:for, (:(=), :i, (:(:), 2, 101)), (:block,
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg, (:ref, :rg, :i)), (:(:), :i, :i))),
        (:line, 73, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg, (:call, :prevfloat, (:ref, :rg, :i))), (:(:), :i, (:call, :-, :i, 1)))),
        (:line, 74, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg, (:call, :nextfloat, (:ref, :rg, :i))), (:(:), (:call, :+, :i, 1), :i)))
      )),
    (:line, 77, :none),
    (:(=), :rg_r, (:call, :reverse, :rg)),
    (:line, 78, :none),
    (:for, (:(=), :i, (:(:), 1, 100)), (:block,
        (:line, 79, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg_r, (:ref, :rg_r, :i), (:kw, :rev, true)), (:(:), :i, :i))),
        (:line, 80, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg_r, (:call, :prevfloat, (:ref, :rg_r, :i)), (:kw, :rev, true)), (:(:), (:call, :+, :i, 1), :i))),
        (:line, 81, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, :rg_r, (:call, :nextfloat, (:ref, :rg_r, :i)), (:kw, :rev, true)), (:(:), :i, (:call, :-, :i, 1))))
      )),
    (:line, 84, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 10), 1, (:kw, :by, (:->, :x, (:block,
                (:line, 84, :none),
                (:call, :(>=), :x, 5)
              )))), (:call, :searchsorted, (:vcat, (:(:), 1, 10)), 1, (:kw, :by, (:->, :x, (:block,
                (:line, 84, :none),
                (:call, :(>=), :x, 5)
              )))))),
    (:line, 85, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:(:), 1, 10), 10, (:kw, :by, (:->, :x, (:block,
                (:line, 85, :none),
                (:call, :(>=), :x, 5)
              )))), (:call, :searchsorted, (:vcat, (:(:), 1, 10)), 10, (:kw, :by, (:->, :x, (:block,
                (:line, 85, :none),
                (:call, :(>=), :x, 5)
              )))))),
    (:line, 87, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vect,), 0), (:(:), 1, 0))),
    (:line, 88, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vect, 1, 2, 3), 0), (:(:), 1, 0))),
    (:line, 89, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsorted, (:vect, 1, 2, 3), 4), (:(:), 4, 3))),
    (:line, 92, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedfirst, (:(:), 500, 1.0, 600), -1.0e20), 1)),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedfirst, (:(:), 500, 1.0, 600), 1.0e20), 102)),
    (:line, 94, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedlast, (:(:), 500, 1.0, 600), -1.0e20), 0)),
    (:line, 95, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedlast, (:(:), 500, 1.0, 600), 1.0e20), 101)),
    (:line, 98, :none),
    (:type, false, (:<:, (:curly, :ConstantRange, :T), (:curly, :Range, :T)), (:block,
        (:line, 99, :none),
        (:(::), :val, :T),
        (:line, 100, :none),
        (:(::), :len, :Int)
      )),
    (:line, 103, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :length
          )), (:(::), :r, :ConstantRange)), (:block,
        (:line, 103, :none),
        (:., :r, (:quote, #QuoteNode
            :len
          ))
      )),
    (:line, 104, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :getindex
          )), (:(::), :r, :ConstantRange), (:(::), :i, :Int)), (:block,
        (:line, 104, :none),
        (:block,
          (:||, (:comparison, 1, :(<=), :i, :(<=), (:., :r, (:quote, #QuoteNode
                  :len
                ))), (:call, :throw, (:call, :BoundsError, :r, :i))),
          (:., :r, (:quote, #QuoteNode
              :val
            ))
        )
      )),
    (:line, 105, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :step
          )), (:(::), :r, :ConstantRange)), (:block,
        (:line, 105, :none),
        0
      )),
    (:line, 107, :none),
    (:(=), :r, (:call, :ConstantRange, 1, 5)),
    (:line, 109, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedfirst, :r, 1.0, :Forward), 1)),
    (:line, 110, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedfirst, :r, 1, :Forward), 1)),
    (:line, 111, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedfirst, :r, (:call, :UInt, 1), :Forward), 1)),
    (:line, 113, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedlast, :r, 1.0, :Forward), 5)),
    (:line, 114, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedlast, :r, 1, :Forward), 5)),
    (:line, 115, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :searchsortedlast, :r, (:call, :UInt, 1), :Forward), 5)),
    (:line, 117, :none),
    (:(=), :a, (:call, :rand, (:(:), 1, 10000), 1000)),
    (:line, 119, :none),
    (:for, (:(=), :alg, (:vect, :InsertionSort, :MergeSort)), (:block,
        (:line, 120, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg))),
        (:line, 121, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b)),
        (:line, 123, :none),
        (:(=), :ix, (:call, :sortperm, :a, (:kw, :alg, :alg))),
        (:line, 124, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 125, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b)),
        (:line, 126, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 128, :none),
        (:call, :sortperm!, (:call, :view, :ix, (:(:), 1, 100)), (:call, :view, :a, (:(:), 1, 100)), (:kw, :alg, :alg)),
        (:line, 129, :none),
        (:(=), :b, (:ref, (:ref, :a, :ix), (:(:), 1, 100))),
        (:line, 130, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b)),
        (:line, 132, :none),
        (:call, :sortperm!, :ix, :a, (:kw, :alg, :alg)),
        (:line, 133, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 134, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b)),
        (:line, 135, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 137, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :rev, true))),
        (:line, 138, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :rev, true))),
        (:line, 139, :none),
        (:(=), :ix, (:call, :sortperm, :a, (:kw, :alg, :alg), (:kw, :rev, true))),
        (:line, 140, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 141, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :rev, true))),
        (:line, 142, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 144, :none),
        (:call, :sortperm!, (:call, :view, :ix, (:(:), 1, 100)), (:call, :view, :a, (:(:), 1, 100)), (:kw, :alg, :alg), (:kw, :rev, true)),
        (:line, 145, :none),
        (:(=), :b, (:ref, (:ref, :a, :ix), (:(:), 1, 100))),
        (:line, 146, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :rev, true))),
        (:line, 148, :none),
        (:call, :sortperm!, :ix, :a, (:kw, :alg, :alg), (:kw, :rev, true)),
        (:line, 149, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 150, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :rev, true))),
        (:line, 151, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 153, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                  (:line, 153, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 154, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :by, (:->, :x, (:block,
                  (:line, 154, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 155, :none),
        (:(=), :ix, (:call, :sortperm, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                  (:line, 155, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 156, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 157, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :by, (:->, :x, (:block,
                  (:line, 157, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 158, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 160, :none),
        (:call, :sortperm!, (:call, :view, :ix, (:(:), 1, 100)), (:call, :view, :a, (:(:), 1, 100)), (:kw, :by, (:->, :x, (:block,
                (:line, 160, :none),
                (:call, :/, 1, :x)
              )))),
        (:line, 161, :none),
        (:(=), :b, (:ref, (:ref, :a, :ix), (:(:), 1, 100))),
        (:line, 162, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :by, (:->, :x, (:block,
                  (:line, 162, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 164, :none),
        (:call, :sortperm!, :ix, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                (:line, 164, :none),
                (:call, :/, 1, :x)
              )))),
        (:line, 165, :none),
        (:(=), :b, (:ref, :a, :ix)),
        (:line, 166, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :by, (:->, :x, (:block,
                  (:line, 166, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 167, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :ix), :b)),
        (:line, 169, :none),
        (:(=), :c, (:call, :copy, :a)),
        (:line, 170, :none),
        (:call, :permute!, :c, :ix),
        (:line, 171, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :c, :b)),
        (:line, 173, :none),
        (:call, :ipermute!, :c, :ix),
        (:line, 174, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :c, :a)),
        (:line, 176, :none),
        (:(=), :c, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :lt, :>))),
        (:line, 177, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :b, :c)),
        (:line, 179, :none),
        (:(=), :c, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                  (:line, 179, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 180, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :b, :c))
      )),
    (:line, 184, :none),
    (:for, (:(=), :alg, (:vect, :QuickSort, (:call, :PartialQuickSort, (:call, :length, :a)))), (:block,
        (:line, 185, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg))),
        (:line, 186, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b)),
        (:line, 187, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :rev, true))),
        (:line, 188, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :rev, true))),
        (:line, 189, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                  (:line, 189, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 190, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, :b, (:kw, :by, (:->, :x, (:block,
                  (:line, 190, :none),
                  (:call, :/, 1, :x)
                )))))
      )),
    (:line, 194, :none),
    (:let, (:block,
        (:line, 195, :none),
        (:(=), :k, (:., :alg, (:quote, #QuoteNode
              :k
            ))),
        (:line, 196, :none),
        (:(=), :b, (:call, :sort, :a, (:kw, :alg, :alg))),
        (:line, 197, :none),
        (:(=), :c, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :by, (:->, :x, (:block,
                  (:line, 197, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 198, :none),
        (:(=), :d, (:call, :sort, :a, (:kw, :alg, :alg), (:kw, :rev, true))),
        (:line, 199, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, (:ref, :b, (:(:), 1, :k)))),
        (:line, 200, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, (:ref, :c, (:(:), 1, :k)), (:kw, :by, (:->, :x, (:block,
                  (:line, 200, :none),
                  (:call, :/, 1, :x)
                ))))),
        (:line, 201, :none),
        (:macrocall, Symbol("@test"), (:call, :issorted, (:ref, :d, (:(:), 1, :k)), (:kw, :rev, true))),
        (:line, 202, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :issorted, :b))),
        (:line, 203, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :issorted, :c, (:kw, :by, (:->, :x, (:block,
                    (:line, 203, :none),
                    (:call, :/, 1, :x)
                  )))))),
        (:line, 204, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :issorted, :d, (:kw, :rev, true))))
      ), (:(=), :alg, (:call, :PartialQuickSort, (:call, :div, (:call, :length, :a), 10)))),
    (:line, 207, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, (:vect, 3, 6, 30, 1, 9), 2, (:kw, :rev, true)), 9)),
    (:line, 208, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :select, (:vect, 3, 6, 30, 1, 9), 2, (:kw, :by, (:->, :x, (:block,
                (:line, 208, :none),
                (:call, :/, 1, :x)
              )))), 9)),
    (:line, 209, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm, (:vect, 3, 6, 30, 1, 9), 2, (:kw, :rev, true)), 5)),
    (:line, 210, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :selectperm, (:vect, 3, 6, 30, 1, 9), 2, (:kw, :by, (:->, :x, (:block,
                (:line, 210, :none),
                (:call, :/, 1, :x)
              )))), 5)),
    (:line, 214, :none),
    (:(=), (:call, :randnans, :n), (:block,
        (:line, 214, :none),
        (:call, :reinterpret, :Float64, (:comprehension, (:generator, (:call, :|, (:call, :rand, :UInt64), 0x7ff8000000000000), (:(=), :i, (:(:), 1, :n)))))
      )),
    (:line, 216, :none),
    (:function, (:call, :randn_with_nans, :n, :p), (:block,
        (:line, 217, :none),
        (:(=), :v, (:call, :randn, :n)),
        (:line, 218, :none),
        (:(=), :x, (:call, :find, (:call, :.<, (:call, :rand, :n), :p))),
        (:line, 219, :none),
        (:(=), (:ref, :v, :x), (:call, :randnans, (:call, :length, :x))),
        (:line, 220, :none),
        (:return, :v)
      )),
    (:line, 223, :none),
    (:call, :srand, 0xdeadbeef),
    (:line, 225, :none),
    (:for, (:(=), :n, (:vcat, (:(:), 0, 10), 100, 101, 1000, 1001)), (:block,
        (:line, 226, :none),
        (:(=), :r, (:(:), -5, 5)),
        (:line, 227, :none),
        (:(=), :v, (:call, :rand, :r, :n)),
        (:line, 228, :none),
        (:(=), :h, (:comprehension, (:generator, (:call, :sum, (:call, :.==, :v, :x)), (:(=), :x, :r)))),
        (:line, 230, :none),
        (:for, (:(=), :rev, (:vect, false, true)), (:block,
            (:line, 232, :none),
            (:(=), :pi, (:call, :sortperm, :v, (:kw, :alg, :InsertionSort), (:kw, :rev, :rev))),
            (:line, 233, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :pi, (:call, :sortperm, (:call, :float, :v), (:kw, :alg, :InsertionSort), (:kw, :rev, :rev)))),
            (:line, 234, :none),
            (:macrocall, Symbol("@test"), (:call, :isperm, :pi)),
            (:line, 235, :none),
            (:(=), :si, (:ref, :v, :pi)),
            (:line, 236, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:generator, (:call, :sum, (:call, :.==, :si, :x)), (:(=), :x, :r))), :h)),
            (:line, 237, :none),
            (:macrocall, Symbol("@test"), (:call, :issorted, :si, (:kw, :rev, :rev))),
            (:line, 238, :none),
            (:macrocall, Symbol("@test"), (:call, :all, :issorted, (:comprehension, (:generator, (:ref, :pi, (:call, :.==, :si, :x)), (:(=), :x, :r))))),
            (:line, 239, :none),
            (:(=), :c, (:call, :copy, :v)),
            (:line, 240, :none),
            (:call, :permute!, :c, :pi),
            (:line, 241, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :c, :si)),
            (:line, 242, :none),
            (:call, :ipermute!, :c, :pi),
            (:line, 243, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :c, :v)),
            (:line, 246, :none),
            (:for, (:(=), :alg, (:vect, :MergeSort)), (:block,
                (:line, 247, :none),
                (:(=), :p, (:call, :sortperm, :v, (:kw, :alg, :alg), (:kw, :rev, :rev))),
                (:line, 248, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :p, (:call, :sortperm, (:call, :float, :v), (:kw, :alg, :alg), (:kw, :rev, :rev)))),
                (:line, 249, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :p, :pi)),
                (:line, 250, :none),
                (:(=), :s, (:call, :copy, :v)),
                (:line, 251, :none),
                (:call, :permute!, :s, :p),
                (:line, 252, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :s, :si)),
                (:line, 253, :none),
                (:call, :ipermute!, :s, :p),
                (:line, 254, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :s, :v))
              )),
            (:line, 258, :none),
            (:for, (:(=), :alg, (:vect, :QuickSort, (:call, :PartialQuickSort, :n))), (:block,
                (:line, 259, :none),
                (:(=), :p, (:call, :sortperm, :v, (:kw, :alg, :alg), (:kw, :rev, :rev))),
                (:line, 260, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :p, (:call, :sortperm, (:call, :float, :v), (:kw, :alg, :alg), (:kw, :rev, :rev)))),
                (:line, 261, :none),
                (:macrocall, Symbol("@test"), (:call, :isperm, :p)),
                (:line, 262, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :v, :p), :si)),
                (:line, 263, :none),
                (:(=), :s, (:call, :copy, :v)),
                (:line, 264, :none),
                (:call, :permute!, :s, :p),
                (:line, 265, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :s, :si)),
                (:line, 266, :none),
                (:call, :ipermute!, :s, :p),
                (:line, 267, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), :s, :v))
              ))
          )),
        (:line, 271, :none),
        (:(=), :v, (:call, :randn_with_nans, :n, 0.1)),
        (:line, 273, :none),
        (:for, (:block,
            (:(=), :alg, (:vect, :InsertionSort, :QuickSort, :MergeSort)),
            (:(=), :rev, (:vect, false, true))
          ), (:block,
            (:line, 276, :none),
            (:(=), :s, (:call, :sort, :v, (:kw, :alg, :alg), (:kw, :rev, :rev))),
            (:line, 277, :none),
            (:macrocall, Symbol("@test"), (:call, :issorted, :s, (:kw, :rev, :rev))),
            (:line, 278, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reinterpret, :UInt64, (:ref, :v, (:call, :isnan, :v))), (:call, :reinterpret, :UInt64, (:ref, :s, (:call, :isnan, :s))))),
            (:line, 281, :none),
            (:(=), :p, (:call, :sortperm, :v, (:kw, :alg, :alg), (:kw, :rev, :rev))),
            (:line, 282, :none),
            (:macrocall, Symbol("@test"), (:call, :isperm, :p)),
            (:line, 283, :none),
            (:(=), :vp, (:ref, :v, :p)),
            (:line, 284, :none),
            (:macrocall, Symbol("@test"), (:call, :isequal, :vp, :s)),
            (:line, 285, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reinterpret, :UInt64, :vp), (:call, :reinterpret, :UInt64, :s)))
          ))
      )),
    (:line, 289, :none),
    (:(=), :inds, (:vect, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 60, 60, 60, 61, 61, 61, 62, 62, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 200, 200, 200)),
    (:line, 327, :none),
    (:(=), :sp, (:call, :sortperm, :inds)),
    (:line, 328, :none),
    (:macrocall, Symbol("@test"), (:call, :all, :issorted, (:comprehension, (:generator, (:ref, :sp, (:call, :.==, :inds, :x)), (:(=), :x, (:(:), 1, 200)))))),
    (:line, 329, :none),
    (:for, (:(=), :alg, (:vect, :InsertionSort, :MergeSort)), (:block,
        (:line, 330, :none),
        (:(=), :sp, (:call, :sortperm, :inds, (:kw, :alg, :alg))),
        (:line, 331, :none),
        (:macrocall, Symbol("@test"), (:call, :all, :issorted, (:comprehension, (:generator, (:ref, :sp, (:call, :.==, :inds, :x)), (:(=), :x, (:(:), 1, 200))))))
      )),
    (:line, 335, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sortperm, (:vect, 0.0, 1.0, 1.0), (:kw, :rev, true)), (:vect, 2, 3, 1))),
    (:line, 336, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sortperm, (:vect, -0.0, 1.0, 1.0), (:kw, :rev, true)), (:vect, 2, 3, 1))),
    (:line, 337, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sortperm, (:vect, -1.0, 1.0, 1.0), (:kw, :rev, true)), (:vect, 2, 3, 1))),
    (:line, 340, :none),
    (:type, true, :Twain, (:block,
        (:line, 341, :none),
        (:(::), :a, :Int),
        (:line, 342, :none),
        (:(::), :b, :Int)
      )),
    (:line, 344, :none),
    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
            :isless
          )), (:(::), :x, :Twain), (:(::), :y, :Twain)), (:block,
        (:line, 344, :none),
        (:call, :<, (:., :x, (:quote, #QuoteNode
              :a
            )), (:., :y, (:quote, #QuoteNode
              :a
            )))
      )),
    (:line, 345, :none),
    (:let, (:block,
        (:line, 346, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:tuple, (:call, :min, :x, :y), (:call, :max, :x, :y)), :(==), (:tuple, :x, :y), :(==), (:call, :minmax, :x, :y)))
      ), (:(=), :x, (:call, :Twain, 2, 3)), (:(=), :y, (:call, :Twain, 2, 4))),
    (:line, 350, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :return_types
            )), :sort, (:tuple, (:curly, :Vector, :Int))), (:vect, (:curly, :Vector, :Int))))
  ))