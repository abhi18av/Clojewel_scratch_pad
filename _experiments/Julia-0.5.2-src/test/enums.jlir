(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :TestEnums, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:using, :Base, :Test),
        (:line, 7, :none),
        (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :convert, :Enum, 1.0)),
        (:line, 9, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Foo)))),
        (:line, 11, :none),
        (:macrocall, Symbol("@enum"), :Fruit, :apple, :orange, :kiwi),
        (:line, 12, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :Fruit), :DataType)),
        (:line, 13, :none),
        (:macrocall, Symbol("@test"), (:call, :isbits, :Fruit)),
        (:line, 14, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :apple), :<:, :Fruit, :<:, :Enum)),
        (:line, 15, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :apple), 0)),
        (:line, 16, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :orange), 1)),
        (:line, 17, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :kiwi), 2)),
        (:line, 18, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 0), :apple)),
        (:line, 19, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 1), :orange)),
        (:line, 20, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 2), :kiwi)),
        (:line, 21, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Fruit, 3)),
        (:line, 22, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Fruit, -1)),
        (:line, 23, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 0x00), :apple)),
        (:line, 24, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, (:call, :big, 0)), :apple)),
        (:line, 25, :none),
        (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :Fruit, 0.0)),
        (:line, 26, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typemin, :Fruit), :apple)),
        (:line, 27, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typemax, :Fruit), :kiwi)),
        (:line, 28, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 0), :apple)),
        (:line, 29, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 1), :orange)),
        (:line, 30, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 2), :kiwi)),
        (:line, 31, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :convert, :Fruit, 3)),
        (:line, 32, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :convert, :Fruit, -1)),
        (:line, 33, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt8, :apple), 0x00)),
        (:line, 34, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt16, :orange), 0x0001)),
        (:line, 35, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt128, :kiwi), (:macrocall, Symbol("@uint128_str"), "0x00000000000000000000000000000002"))),
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, (:call, :convert, :BigInt, :apple)), :BigInt)),
        (:line, 37, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :BigInt, :apple), 0)),
        (:line, 38, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Bool, :apple), false)),
        (:line, 39, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Bool, :orange), true)),
        (:line, 40, :none),
        (:macrocall, Symbol("@test_throws"), :InexactError, (:call, :convert, :Bool, :kiwi)),
        (:line, 41, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :instances, :Fruit), (:tuple, :apple, :orange, :kiwi))),
        (:line, 43, :none),
        (:(=), (:call, :f, (:(::), :x, :Fruit)), (:block,
            (:line, 43, :none),
            "hey, I'm a Fruit"
          )),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f, :apple), "hey, I'm a Fruit")),
        (:line, 46, :none),
        (:(=), :d, (:call, :Dict, (:(=>), :apple, "apple"), (:(=>), :orange, "orange"), (:(=>), :kiwi, "kiwi"))),
        (:line, 47, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :apple), "apple")),
        (:line, 48, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :orange), "orange")),
        (:line, 49, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :kiwi), "kiwi")),
        (:line, 50, :none),
        (:(=), :vals, (:vect, :apple, :orange, :kiwi)),
        (:line, 51, :none),
        (:for, (:(=), (:tuple, :i, :enum), (:call, :enumerate, (:call, :instances, :Fruit))), (:block,
            (:line, 52, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :enum, (:ref, :vals, :i)))
          )),
        (:line, 55, :none),
        (:macrocall, Symbol("@enum"), :QualityofFrenchFood, :ReallyGood),
        (:line, 56, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :instances, :QualityofFrenchFood)), 1)),
        (:line, 57, :none),
        (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :ReallyGood), :<:, :QualityofFrenchFood, :<:, :Enum)),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :ReallyGood), 0)),
        (:line, 60, :none),
        (:macrocall, Symbol("@enum"), :Binary, (:(=), :_zero, 0), (:(=), :_one, 1), (:(=), :_two, 10), (:(=), :_three, 11)),
        (:line, 61, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_zero), 0)),
        (:line, 62, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_one), 1)),
        (:line, 63, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_two), 10)),
        (:line, 64, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_three), 11)),
        (:line, 65, :none),
        (:macrocall, Symbol("@enum"), :Negative, (:(=), :_neg1, -1), (:(=), :_neg2, -2)),
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg1), -1)),
        (:line, 67, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg2), -2)),
        (:line, 68, :none),
        (:macrocall, Symbol("@test_throws"), :InexactError, (:call, :convert, :UInt8, :_neg1)),
        (:line, 69, :none),
        (:macrocall, Symbol("@enum"), :Negative2, (:(=), :_neg5, -5), :_neg4, :_neg3),
        (:line, 70, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg5), -5)),
        (:line, 71, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg4), -4)),
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg3), -3)),
        (:line, 74, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test1, (:(=), :_zerofp, 0.0))))),
        (:line, 75, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test11, (:(=), :_zerofp2, 0.5))))),
        (:line, 76, :none),
        (:macrocall, Symbol("@enum"), :Test111, (:(=), :_zerobi, (:call, :BigInt, 1))),
        (:line, 77, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Integer, :_zerobi), 1)),
        (:line, 80, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test2, :?)))),
        (:line, 81, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test22, (:(=), 1, 2))))),
        (:line, 139, :none),
        (:macrocall, Symbol("@enum"), :Test11, (:kw, :_zero_Test11, 2), :_one_Test11, (:kw, :_two_Test11, 5), :_three_Test11),
        (:line, 144, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_zero_Test11), 2)),
        (:line, 145, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_one_Test11), 3)),
        (:line, 146, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_two_Test11), 5)),
        (:line, 147, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_three_Test11), 6)),
        (:line, 150, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@enum"), :EnumOvf, (:(=), :x, (:call, :typemax, :Int32)), :y))),
        (:line, 153, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test14, :_zero_Test14, :_one_Test14, (:kw, :_two_Test14, 0))))),
        (:line, 155, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :repr, :apple), (:string, "apple::", (:call, :string, :Fruit), " = 0"))),
        (:line, 156, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, :apple), "apple")),
        (:line, 158, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reprmime, "text/plain", :Fruit), (:string, "Enum ", (:call, :string, :Fruit), ":\napple = 0\norange = 1\nkiwi = 2"))),
        (:line, 159, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reprmime, "text/plain", :orange), "orange::TestEnums.Fruit = 1")),
        (:line, 161, :none),
        (:macrocall, Symbol("@enum"), :LogLevel, :DEBUG, :INFO, :WARN, :ERROR, :CRITICAL),
        (:line, 162, :none),
        (:macrocall, Symbol("@test"), (:call, :<, :DEBUG, :CRITICAL)),
        (:line, 165, :none),
        (:let, (:block,
            (:line, 166, :none),
            (:call, :serialize, :b, :apple),
            (:line, 167, :none),
            (:call, :seekstart, :b),
            (:line, 168, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :b), :apple))
          ), (:(=), :b, (:call, :IOBuffer)))
      ))
  ))