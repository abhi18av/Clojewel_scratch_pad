(:quote, (:block,
    (:line, 3, :none),
    (:(=), :types, (:ref, :Any, :Bool, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32, :Int64, :UInt64, :Float32, :Float64, (:curly, :Rational, :Int8), (:curly, :Rational, :UInt8), (:curly, :Rational, :Int16), (:curly, :Rational, :UInt16), (:curly, :Rational, :Int32), (:curly, :Rational, :UInt32), (:curly, :Rational, :Int64), (:curly, :Rational, :UInt64))),
    (:line, 9, :none),
    (:(=), :vals, (:call, :vcat, (:call, :typemin, :Int64), (:call, :+, (:call, :-, (:call, :Int64, (:call, :maxintfloat, :Float64))), (:typed_vcat, :Int64, (:(:), -4, 1))), (:call, :typemin, :Int32), (:call, :+, (:call, :-, (:call, :Integer, (:call, :maxintfloat, :Float32))), (:(:), -4, 1)), (:(:), -2, 2), (:call, :+, (:call, :Integer, (:call, :maxintfloat, :Float32)), (:(:), -1, 4)), (:call, :typemax, :Int32), (:call, :+, (:call, :Int64, (:call, :maxintfloat, :Float64)), (:typed_vcat, :Int64, (:(:), -1, 4))), (:call, :typemax, :Int64))),
    (:line, 21, :none),
    (:function, (:call, :coerce, (:(::), :T, :Type), :x), (:block,
        (:line, 22, :none),
        (:if, (:<:, :T, :Rational), (:block,
            (:line, 23, :none),
            (:call, :convert, :T, (:call, :coerce, (:call, :typeof, (:call, :num, (:call, :zero, :T))), :x))
          ), (:block,
            (:line, 24, :none),
            (:if, (:call, :!, (:<:, :T, :Integer)), (:block,
                (:line, 25, :none),
                (:call, :convert, :T, :x)
              ), (:block,
                (:line, 27, :none),
                (:call, :%, :x, :T)
              ))
          ))
      )),
    (:line, 31, :none),
    (:for, (:block,
        (:(=), :T, (:ref, :types, (:(:), 2, :end))),
        (:(=), :x, :vals)
      ), (:block,
        (:line, 32, :none),
        (:(=), :a, (:call, :coerce, :T, :x)),
        (:line, 33, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, :a, (:call, :zero, :UInt)), (:call, :invoke, :hash, (:curly, :Tuple, :Real, :UInt), :a, (:call, :zero, :UInt))))
      )),
    (:line, 36, :none),
    (:for, (:block,
        (:(=), :T, :types),
        (:(=), :S, :types),
        (:(=), :x, :vals)
      ), (:block,
        (:line, 37, :none),
        (:(=), :a, (:call, :coerce, :T, :x)),
        (:line, 38, :none),
        (:(=), :b, (:call, :coerce, :S, :x)),
        (:line, 41, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isequal, :a, :b), (:call, :(==), (:call, :hash, :a), (:call, :hash, :b))))
      )),
    (:line, 51, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, :nextfloat, (:call, :^, 2.0, 63))), (:call, :hash, (:call, :UInt64, (:call, :nextfloat, (:call, :^, 2.0, 63)))))),
    (:line, 52, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, :prevfloat, (:call, :^, 2.0, 64))), (:call, :hash, (:call, :UInt64, (:call, :prevfloat, (:call, :^, 2.0, 64)))))),
    (:line, 55, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, ://, 1, 6), (:call, :zero, :UInt)), (:call, :invoke, :hash, (:curly, :Tuple, :Real, :UInt), (:call, ://, 1, 6), (:call, :zero, :UInt)))),
    (:line, 56, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, ://, 1, 6)), (:call, :hash, (:call, ://, (:call, :big, 1), (:call, :big, 6))))),
    (:line, 57, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, ://, 1, 6)), (:call, :hash, (:call, ://, 0x01, 0x06)))),
    (:line, 60, :none),
    (:(=), :vals, (:ref, :Any, (:vect, 1, 2, 3, 4), (:vcat, (:row, 1, 3), (:row, 2, 4)), (:ref, :Any, 1, 2, 3, 4), (:vect, 1, 3, 2, 4), (:vect, 1, 0), (:vect, true, false), (:call, :BitArray, (:vect, true, false)), (:call, :Set, (:vect, 1, 2, 3, 4)), (:call, :Set, (:vcat, (:(:), 1, 10))), (:call, :Set, (:vect, 7, 9, 4, 10, 2, 3, 5, 8, 6, 1)), (:call, :Dict, (:(=>), 42, 101), (:(=>), 77, 93)), (:call, (:curly, :Dict, :Any, :Any), (:(=>), 42, 101), (:(=>), 77, 93)), (:tuple, 1, 2, 3, 4), (:tuple, 1.0, 2.0, 3.0, 4.0), (:tuple, 1, 3, 2, 4), (:tuple, "a", "b"), (:tuple, (:call, :SubString, "a", 1, 1), (:call, :SubString, "b", 1, 1)), (:call, :Dict, (:generator, (:(=>), :x, :x), (:(=), :x, (:(:), 1, 10)))), (:call, :Dict, (:(=>), 7, 7), (:(=>), 9, 9), (:(=>), 4, 4), (:(=>), 10, 10), (:(=>), 2, 2), (:(=>), 3, 3), (:(=>), 8, 8), (:(=>), 5, 5), (:(=>), 6, 6), (:(=>), 1, 1)), (:vect,), (:vect, 1), (:vect, 2), (:vect, 1, 1), (:vect, 1, 2), (:vect, 1, 3), (:vect, 2, 2), (:vect, 1, 2, 2), (:vect, 1, 3, 3), (:call, :zeros, 2, 2), (:call, :spzeros, 2, 2), (:call, :eye, 2, 2), (:call, :speye, 2, 2), (:call, :sparse, (:call, :ones, 2, 2)), (:call, :ones, 2, 2), (:call, :sparse, (:vcat, (:row, 0, 0), (:row, 1, 0))), (:vcat, (:row, 0, 0), (:row, 1, 0)), (:vcat, (:row, -0.0, 0), (:row, -0.0, 0.0)), (:call, :SparseMatrixCSC, 2, 2, (:vect, 1, 3, 3), (:vect, 1, 2), (:vect, -0.0, -0.0)))),
    (:line, 78, :none),
    (:for, (:block,
        (:(=), :a, :vals),
        (:(=), :b, :vals)
      ), (:block,
        (:line, 79, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isequal, :a, :b), (:call, :(==), (:call, :hash, :a), (:call, :hash, :b))))
      )),
    (:line, 82, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:call, :SubString, "--hello--", 3, 7)), (:call, :hash, "hello"))),
    (:line, 83, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:quote, (:., :X, (:quote, #QuoteNode
                :x
              )))), (:call, :hash, (:quote, (:., :X, (:quote, #QuoteNode
                :x
              )))))),
    (:line, 84, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, (:quote, (:., :X, (:quote, #QuoteNode
                :x
              )))), (:call, :hash, (:quote, (:., :X, (:quote, #QuoteNode
                :y
              )))))),
    (:line, 86, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, (:vect, 1, 2)), (:call, :hash, (:call, :view, (:vect, 1, 2, 3, 4), (:(:), 1, 2))))),
    (:line, 89, :none),
    (:(=), :x, (:call, :sprand, 10, 10, 0.5)),
    (:line, 90, :none),
    (:(=), (:ref, :x, 1), 1),
    (:line, 91, :none),
    (:(=), (:ref, (:., :x, (:quote, #QuoteNode
            :nzval
          )), 1), 0),
    (:line, 92, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, :x), (:call, :hash, (:call, :full, :x)))),
    (:line, 94, :none),
    (:let, (:block,
        (:line, 95, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :(==), (:call, :hash, :a), (:call, :hash, :b)), (:call, :(==), :a, :b)))
      ), (:(=), :a, (:call, :QuoteNode, 1)), (:(=), :b, (:call, :QuoteNode, 1.0))),
    (:line, 98, :none),
    (:let, (:block,
        (:line, 101, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :(==), :a, :b), (:call, :(==), (:call, :hash, :a), (:call, :hash, :b)))),
        (:line, 102, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :(!=), :a, :c), (:call, :(!=), (:call, :hash, :a), (:call, :hash, :c)))),
        (:line, 103, :none),
        (:macrocall, Symbol("@test"), (:&&, (:call, :(!=), :b, :c), (:call, :(!=), (:call, :hash, :b), (:call, :hash, :c))))
      ), (:(=), :a, (:call, :Expr, (:quote, #QuoteNode
            :block
          ), (:call, :TypedSlot, 1, :Any))), (:(=), :b, (:call, :Expr, (:quote, #QuoteNode
            :block
          ), (:call, :TypedSlot, 1, :Any))), (:(=), :c, (:call, :Expr, (:quote, #QuoteNode
            :block
          ), (:call, :TypedSlot, 3, :Any)))),
    (:line, 106, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, (:call, :Dict), (:call, :hash, (:call, :Set))), (:call, :hash, (:call, :Set), (:call, :hash, (:call, :Dict))))),
    (:line, 109, :none),
    (:for, (:block,
        (:(=), :prec, (:vect, 3, 11, 15, 16, 31, 32, 33, 63, 64, 65, 254, 255, 256, 257, 258, 1023, 1024, 1025)),
        (:(=), :v, (:ref, :Any, -0.0, 0, 1, -1, (:call, ://, 1, 10), (:call, ://, 2, 10), (:call, ://, 3, 10), (:call, ://, 1, 2), :pi))
      ), (:block,
        (:line, 111, :none),
        (:call, :setprecision, (:->, (:tuple,), (:block,
              (:line, 112, :none),
              (:(=), :x, (:call, :convert, :BigFloat, :v)),
              (:line, 113, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :precision, :x), :prec)),
              (:line, 114, :none),
              (:(=), (:tuple, :num, :pow, :den), (:call, (:., :Base, (:quote, #QuoteNode
                      :decompose
                    )), :x)),
              (:line, 115, :none),
              (:(=), :y, (:call, :/, (:call, :*, :num, (:call, :^, (:call, :big, 2.0), :pow)), :den)),
              (:line, 116, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :precision, :y), :prec)),
              (:line, 117, :none),
              (:macrocall, Symbol("@test"), (:call, :isequal, :x, :y))
            )), :prec)
      ))
  ))