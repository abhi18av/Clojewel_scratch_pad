(:quote, (:block,
    (:line, 3, :none),
    (:call, :include, "choosetests.jl"),
    (:line, 4, :none),
    (:(=), (:tuple, :tests, :net_on), (:call, :choosetests, :ARGS)),
    (:line, 5, :none),
    (:(=), :tests, (:call, :unique, :tests)),
    (:line, 7, :none),
    (:const, (:(=), :max_worker_rss, (:if, (:call, :haskey, :ENV, "JULIA_TEST_MAXRSS_MB"), (:block,
            (:line, 8, :none),
            (:call, :*, (:call, :parse, :Int, (:ref, :ENV, "JULIA_TEST_MAXRSS_MB")), (:call, :^, 2, 20))
          ), (:block,
            (:line, 10, :none),
            (:call, :typemax, :Csize_t)
          )))),
    (:line, 13, :none),
    (:const, (:(=), :node1_tests, (:ref, :String))),
    (:line, 14, :none),
    (:function, (:call, :move_to_node1, :t), (:block,
        (:line, 15, :none),
        (:if, (:call, :in, :t, :tests), (:block,
            (:line, 16, :none),
            (:call, :splice!, :tests, (:call, :findfirst, :tests, :t)),
            (:line, 17, :none),
            (:call, :push!, :node1_tests, :t)
          ))
      )),
    (:line, 21, :none),
    (:call, :move_to_node1, "compile"),
    (:line, 24, :none),
    (:&&, (:call, :(!=), :max_worker_rss, (:call, :typemax, :Csize_t)), (:call, :move_to_node1, "parallel")),
    (:line, 26, :none),
    (:call, :cd, (:->, (:tuple,), (:block,
          (:line, 27, :none),
          (:(=), :n, 1),
          (:line, 28, :none),
          (:if, :net_on, (:block,
              (:line, 29, :none),
              (:(=), :n, (:call, :min, 8, (:., :Sys, (:quote, #QuoteNode
                      :CPU_CORES
                    )), (:call, :length, :tests))),
              (:line, 30, :none),
              (:&&, (:call, :>, :n, 1), (:call, :addprocs, (:parameters, (:kw, :exeflags, (:macrocall, Symbol("@cmd"), "--check-bounds=yes --startup-file=no --depwarn=error"))), :n)),
              (:line, 31, :none),
              (:call, (:., :BLAS, (:quote, #QuoteNode
                    :set_num_threads
                  )), 1)
            )),
          (:line, 34, :none),
          (:macrocall, Symbol("@everywhere"), (:call, :include, "testdefs.jl")),
          (:line, 36, :none),
          (:(=), :results, (:vect,)),
          (:line, 37, :none),
          (:macrocall, Symbol("@sync"), (:block,
              (:line, 38, :none),
              (:for, (:(=), :p, (:call, :workers)), (:block,
                  (:line, 39, :none),
                  (:macrocall, Symbol("@async"), (:block,
                      (:line, 40, :none),
                      (:while, (:call, :>, (:call, :length, :tests), 0), (:block,
                          (:line, 41, :none),
                          (:(=), :test, (:call, :shift!, :tests)),
                          (:line, 42, :none),
                          (:local, :resp),
                          (:line, 43, :none),
                          (:try, (:block,
                              (:line, 44, :none),
                              (:(=), :resp, (:call, :remotecall_fetch, (:->, :t, (:block,
                                      (:line, 44, :none),
                                      (:call, :runtests, :t)
                                    )), :p, :test))
                            ), :e, (:block,
                              (:line, 46, :none),
                              (:(=), :resp, :e)
                            )),
                          (:line, 48, :none),
                          (:call, :push!, :results, (:tuple, :test, :resp)),
                          (:line, 50, :none),
                          (:if, (:||, (:&&, (:call, :isa, :resp, :Integer), (:call, :>, :resp, :max_worker_rss)), (:call, :isa, :resp, :Exception)), (:block,
                              (:line, 51, :none),
                              (:if, (:call, :>, :n, 1), (:block,
                                  (:line, 52, :none),
                                  (:call, :rmprocs, :p, (:kw, :waitfor, 0.5)),
                                  (:line, 53, :none),
                                  (:(=), :p, (:ref, (:call, :addprocs, (:parameters, (:kw, :exeflags, (:macrocall, Symbol("@cmd"), "--check-bounds=yes --startup-file=no --depwarn=error"))), 1), 1)),
                                  (:line, 54, :none),
                                  (:call, :remotecall_fetch, (:->, (:tuple,), (:block,
                                        (:line, 54, :none),
                                        (:call, :include, "testdefs.jl")
                                      )), :p)
                                ), (:block,
                                  (:line, 57, :none),
                                  (:if, (:call, :isa, :resp, :Exception), (:call, :rethrow, :resp), (:call, :error, (:string, "Halting tests. Memory limit reached : ", :resp, " > ", :max_worker_rss)))
                                ))
                            ))
                        ))
                    ))
                ))
            )),
          (:line, 65, :none),
          (:(=), :errors, (:call, :filter, (:->, :x, (:block,
                  (:line, 65, :none),
                  (:call, :isa, (:ref, :x, 2), :Exception)
                )), :results)),
          (:line, 66, :none),
          (:if, (:call, :>, (:call, :length, :errors), 0), (:block,
              (:line, 67, :none),
              (:for, (:(=), :err, :errors), (:block,
                  (:line, 68, :none),
                  (:call, :println, (:string, "Exception running test ", (:ref, :err, 1), " :")),
                  (:line, 69, :none),
                  (:call, :showerror, :STDERR, (:ref, :err, 2)),
                  (:line, 70, :none),
                  (:call, :println)
                )),
              (:line, 72, :none),
              (:call, :error, "Some tests exited with errors.")
            )),
          (:line, 76, :none),
          (:&&, (:call, :>, :n, 1), (:call, :rmprocs, (:call, :workers), (:kw, :waitfor, 5.0))),
          (:line, 78, :none),
          (:for, (:(=), :t, :node1_tests), (:block,
              (:line, 79, :none),
              (:&&, (:call, :>, :n, 1), (:call, :print, "\tFrom worker 1:\t")),
              (:line, 80, :none),
              (:call, :runtests, :t)
            )),
          (:line, 83, :none),
          (:call, :println, "    \e[32;1mSUCCESS\e[0m")
        )), (:call, :dirname, (:macrocall, Symbol("@__FILE__"))))
  ))