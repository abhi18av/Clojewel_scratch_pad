(:quote, (:block,
    (:line, 3, :none),
    (:(=), :catcmd, (:macrocall, Symbol("@cmd"), "cat")),
    (:line, 4, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 5, :none),
        (:try, (:block,
            (:line, 6, :none),
            (:call, :success, (:macrocall, Symbol("@cmd"), "busybox")),
            (:line, 7, :none),
            (:(=), :catcmd, (:macrocall, Symbol("@cmd"), "busybox cat"))
          ), false, (:block,))
      )),
    (:line, 11, :none),
    (:let, (:block,
        (:line, 13, :none),
        (:let, (:block,
            (:line, 14, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:., :Base, (:quote, #QuoteNode
                    :VERSION_STRING
                  )), (:call, :chomp, :v)))
          ), (:(=), :v, (:ref, (:call, :split, (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename -v")), "julia version "), :end))),
        (:line, 16, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename -v")), (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename --version")))),
        (:line, 19, :none),
        (:let, (:block,
            (:line, 20, :none),
            (:macrocall, Symbol("@test"), (:call, :startswith, (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename -h")), :header)),
            (:line, 21, :none),
            (:macrocall, Symbol("@test"), (:call, :startswith, (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename --help")), :header))
          ), (:(=), :header, "julia [switches] -- [programfile] [args...]")),
        (:line, 28, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -H \$JULIA_HOME"))),
        (:line, 29, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --home=\$JULIA_HOME"))),
        (:line, 32, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e \"exit(0)\""))),
        (:line, 33, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e \"exit(1)\"")))),
        (:line, 34, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --eval=\"exit(0)\""))),
        (:line, 35, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --eval=\"exit(1)\"")))),
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e")))),
        (:line, 37, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --eval")))),
        (:line, 39, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -i -e \"exit(0)\""))),
        (:line, 40, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -i -e \"exit(1)\"")))),
        (:line, 43, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename -E \"1+1\"")), "2\n")),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$exename --print=\"1+1\"")), "2\n")),
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -E")))),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --print")))),
        (:line, 49, :none),
        (:let, (:block,
            (:line, 50, :none),
            (:try, (:block,
                (:line, 51, :none),
                (:call, :write, :testfile, "testvar = :test\n"),
                (:line, 52, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -i --load=\$testfile -e \"println(testvar)\"")), '\n'), :end), "test")),
                (:line, 53, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -i -e \"println(testvar)\" -L \$testfile")), '\n'), :end), "test"))
              ), false, false, (:block,
                (:line, 55, :none),
                (:call, :rm, :testfile)
              ))
          ), (:(=), :testfile, (:call, :tempname))),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -L")))),
        (:line, 60, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --load")))),
        (:line, 64, :none),
        (:if, (:call, :(!=), (:call, (:., :Libdl, (:quote, #QuoteNode
                  :dlopen_e
                )), (:ref, (:call, :splitext, (:call, :unsafe_string, (:., (:call, (:., :Base, (:quote, #QuoteNode
                            :JLOptions
                          ))), (:quote, #QuoteNode
                        :image_file
                      )))), 1)), :C_NULL), (:block,
            (:line, 65, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -C invalidtarget --precompiled=yes")))),
            (:line, 66, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --cpu-target=invalidtarget --precompiled=yes"))))
          ), (:block,
            (:line, 68, :none),
            (:call, :warn, "--cpu-target test not runnable")
          )),
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -q -p 2 -e \"println(nworkers())\"")), "2")),
        (:line, 73, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -p 0")))),
        (:line, 74, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --procs=1.0")))),
        (:line, 79, :none),
        (:let, (:block,
            (:line, 80, :none),
            (:call, :touch, :fname),
            (:line, 81, :none),
            (:(=), :fname, (:call, :realpath, :fname)),
            (:line, 82, :none),
            (:try, (:block,
                (:line, 83, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --machinefile \$fname -e \"println(unsafe_string(Base.JLOptions().machinefile))\"")), :fname))
              ), false, false, (:block,
                (:line, 85, :none),
                (:call, :rm, :fname)
              ))
          ), (:(=), :fname, (:call, :tempname))),
        (:line, 90, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"isinteractive()\"")), "false")),
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"isinteractive()\" -i")), "true")),
        (:line, 94, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --color=yes -E \"Base.have_color\"")), "true")),
        (:line, 95, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --color=no -E \"Base.have_color\"")), "false")),
        (:line, 96, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --color=false")))),
        (:line, 99, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().historyfile)\" --history-file=yes")), "true")),
        (:line, 100, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().historyfile)\" --history-file=no")), "false")),
        (:line, 101, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --history-file=false")))),
        (:line, 104, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().code_coverage)\"")), "false")),
        (:line, 105, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage=none")), "false")),
        (:line, 107, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage")), "true")),
        (:line, 108, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().code_coverage)\" --code-coverage=user")), "true")),
        (:line, 111, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().malloc_log)\"")), "false")),
        (:line, 112, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation=none")), "false")),
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation")), "true")),
        (:line, 115, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().malloc_log)\" --track-allocation=user")), "true")),
        (:line, 118, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().opt_level\"")), "2")),
        (:line, 119, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().opt_level\" -O")), "3")),
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().opt_level\" --optimize")), "3")),
        (:line, 121, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().opt_level\" -O0")), "0")),
        (:line, 124, :none),
        (:let, (:block,
            (:line, 127, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Int(Base.JLOptions().check_bounds)\""))), :JL_OPTIONS_CHECK_BOUNDS_DEFAULT)),
            (:line, 128, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Int(Base.JLOptions().check_bounds)\" --check-bounds=yes"))), :JL_OPTIONS_CHECK_BOUNDS_ON)),
            (:line, 129, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Int(Base.JLOptions().check_bounds)\" --check-bounds=no"))), :JL_OPTIONS_CHECK_BOUNDS_OFF))
          ), (:(=), :JL_OPTIONS_CHECK_BOUNDS_DEFAULT, 0), (:(=), :JL_OPTIONS_CHECK_BOUNDS_ON, 1), (:(=), :JL_OPTIONS_CHECK_BOUNDS_OFF, 2)),
        (:line, 132, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -E \"exit(0)\" --check-bounds=false")))),
        (:line, 135, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --depwarn=no -E \"Base.syntax_deprecation_warnings(true)\"")), "false")),
        (:line, 136, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --depwarn=yes -E \"Base.syntax_deprecation_warnings(false)\"")), "true")),
        (:line, 137, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --depwarn=false")))),
        (:line, 139, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e \"foo (x::Int) = x * x\" --depwarn=error")))),
        (:line, 141, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e \"\n        foo() = :foo; bar() = :bar\n        @deprecate foo() bar()\n        foo()\n    \" --depwarn=error")))),
        (:line, 148, :none),
        (:let, (:block,
            (:line, 159, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -E \"\$code\" --depwarn=error")))),
            (:line, 161, :none),
            (:let, (:block,
                (:line, 165, :none),
                (:call, :close, (:., :out, (:quote, #QuoteNode
                      :in
                    ))),
                (:line, 166, :none),
                (:call, :wait, :proc),
                (:line, 167, :none),
                (:macrocall, Symbol("@test"), (:call, :success, :proc)),
                (:line, 168, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :wait, :output), "WARNING: Foo.Deprecated is deprecated.\n  likely near no file:5"))
              ), (:(=), :out, (:call, :Pipe)), (:(=), :proc, (:call, :spawn, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$exename -E \"\$code\" --depwarn=yes"), (:kw, :stderr, :out)))), (:(=), :output, (:macrocall, Symbol("@async"), (:call, :readchomp, :out)))),
            (:line, 171, :none),
            (:let, (:block,
                (:line, 173, :none),
                (:(=), :output, (:macrocall, Symbol("@async"), (:call, :readstring, :out))),
                (:line, 175, :none),
                (:call, :wait, :proc),
                (:line, 176, :none),
                (:call, :close, (:., :out, (:quote, #QuoteNode
                      :in
                    ))),
                (:line, 177, :none),
                (:macrocall, Symbol("@test"), (:call, :success, :proc)),
                (:line, 178, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :wait, :output), ""))
              ), (:(=), :out, (:call, :Pipe)), (:(=), :proc, (:call, :spawn, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$exename -E \"\$code\" --depwarn=no"), (:kw, :stderr, :out)))))
          ), (:(=), :code, "module Foo\n    import Base: @deprecate_binding\n\n    const NotDeprecated = true\n    @deprecate_binding Deprecated NotDeprecated\nend\n\nFoo.Deprecated\n")),
        (:line, 183, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().can_inline)\"")), "true")),
        (:line, 184, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --inline=yes -E \"Bool(Base.JLOptions().can_inline)\"")), "true")),
        (:line, 185, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --inline=no -E \"Bool(Base.JLOptions().can_inline)\"")), "false")),
        (:line, 187, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --inline=false")))),
        (:line, 190, :none),
        (:let, (:block,
            (:line, 193, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Int(Base.JLOptions().fast_math)\""))), :JL_OPTIONS_FAST_MATH_DEFAULT)),
            (:line, 194, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --math-mode=user -E \"Int(Base.JLOptions().fast_math)\""))), :JL_OPTIONS_FAST_MATH_DEFAULT)),
            (:line, 195, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --math-mode=ieee -E \"Int(Base.JLOptions().fast_math)\""))), :JL_OPTIONS_FAST_MATH_OFF)),
            (:line, 196, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --math-mode=fast -E \"Int(Base.JLOptions().fast_math)\""))), :JL_OPTIONS_FAST_MATH_ON))
          ), (:(=), :JL_OPTIONS_FAST_MATH_DEFAULT, 0), (:(=), :JL_OPTIONS_FAST_MATH_ON, 1), (:(=), :JL_OPTIONS_FAST_MATH_OFF, 2)),
        (:line, 200, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --worker=true")))),
        (:line, 202, :none),
        (:(=), (:call, :escape, :str), (:block,
            (:line, 202, :none),
            (:call, :replace, :str, "\\", "\\\\")
          )),
        (:line, 205, :none),
        (:let, (:block,
            (:line, 206, :none),
            (:try, (:block,
                (:line, 208, :none),
                (:call, :write, :testfile, "    println(ARGS)\n"),
                (:line, 211, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename \$testfile foo -bar --baz")), "String[\"foo\",\"-bar\",\"--baz\"]")),
                (:line, 212, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename \$testfile -- foo -bar --baz")), "String[\"foo\",\"-bar\",\"--baz\"]")),
                (:line, 213, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -L \$testfile -e 'exit(0)' -- foo -bar --baz")), "String[\"foo\",\"-bar\",\"--baz\"]")),
                (:line, 214, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -L \$testfile \$testfile")), '\n'), (:vect, (:string, "String[\"", (:call, :escape, :testfile), "\"]"), "String[]"))),
                (:line, 215, :none),
                (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --foo \$testfile")))),
                (:line, 216, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -L \$testfile -e 'exit(0)' -- foo -bar -- baz")), "String[\"foo\",\"-bar\",\"--\",\"baz\"]"))
              ), false, false, (:block,
                (:line, 218, :none),
                (:call, :rm, :testfile)
              ))
          ), (:(=), :testfile, (:call, :tempname))),
        (:line, 223, :none),
        (:let, (:block,
            (:line, 224, :none),
            (:try, (:block,
                (:line, 225, :none),
                (:call, :write, :a, (:string, "    println(@__FILE__)\n    println(PROGRAM_FILE)\n    println(length(ARGS))\n    include(\"", (:call, :escape, :b), "\")\n")),
                (:line, 231, :none),
                (:call, :write, :b, "    println(@__FILE__)\n    println(PROGRAM_FILE)\n    println(length(ARGS))\n"),
                (:line, 236, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename \$a")), '\n'), (:vect, (:string, :a), (:string, :a), "0", (:string, :b), (:string, :a), "0"))),
                (:line, 237, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -L \$b -e 'exit(0)'")), '\n'), (:vect, (:string, (:call, :realpath, :b)), "", "0"))),
                (:line, 238, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :split, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -L \$b \$a")), '\n'), (:vect, (:string, (:call, :realpath, :b)), "", "1", (:string, :a), (:string, :a), "0", (:string, :b), (:string, :a), "0")))
              ), false, false, (:block,
                (:line, 240, :none),
                (:call, :rm, :a),
                (:line, 241, :none),
                (:call, :rm, :b)
              ))
          ), (:(=), :a, (:call, :tempname)), (:(=), :b, (:call, :tempname))),
        (:line, 246, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -e 'println(ARGS);' ''")), "String[\"\"]")),
        (:line, 249, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no --compile=yes -ioo")), (:kw, :stderr, :catcmd))), "ERROR: unknown option `-o`")),
        (:line, 250, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -p")), (:kw, :stderr, :catcmd))), "ERROR: option `-p/--procs` is missing an argument")),
        (:line, 251, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no --inline")), (:kw, :stderr, :catcmd))), "ERROR: option `--inline` is missing an argument")),
        (:line, 252, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e \"@show ARGS\" -now -- julia RUN.jl")), (:kw, :stderr, :catcmd))), "ERROR: unknown option `-n`")),
        (:line, 255, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Bool(Base.JLOptions().use_compilecache)\"")), "true")),
        (:line, 256, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=yes -E \"Bool(Base.JLOptions().use_compilecache)\"")), "true")),
        (:line, 257, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=no -E \"Bool(Base.JLOptions().use_compilecache)\"")), "false")),
        (:line, 258, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --compilecache=foo -e \"exit(0)\"")))),
        (:line, 263, :none),
        (:if, (:&&, (:call, :!, (:call, :is_windows)), (:call, :>, (:call, :VersionNumber, (:., :Base, (:quote, #QuoteNode
                    :libllvm_version
                  ))), (:macrocall, Symbol("@v_str"), "3.3"))), (:block,
            (:line, 264, :none),
            (:(=), :testdir, (:call, :mktempdir)),
            (:line, 265, :none),
            (:call, :cd, (:->, (:tuple,), (:block,
                  (:line, 266, :none),
                  (:call, :rm, :testdir),
                  (:line, 267, :none),
                  (:macrocall, Symbol("@test"), (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename -e \"exit(0)\"")))
                )), :testdir)
          ))
      ), (:(=), :exename, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --precompiled=yes --startup-file=no"))),
    (:line, 272, :none),
    (:let, (:block,
        (:line, 274, :none),
        (:let, (:block,
            (:line, 277, :none),
            (:call, :mktempdir, (:->, (:tuple, :tmpdir), (:block,
                  (:line, 278, :none),
                  (:call, :withenv, (:->, (:tuple,), (:block,
                        (:line, 279, :none),
                        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().startupfile\" --startup-file=yes"))), :JL_OPTIONS_STARTUPFILE_ON))
                      )), (:(=>), "HOME", :tmpdir))
                ))),
            (:line, 282, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :parse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename -E \"Base.JLOptions().startupfile\" --startup-file=no"))), :JL_OPTIONS_STARTUPFILE_OFF))
          ), (:(=), :JL_OPTIONS_STARTUPFILE_ON, 1), (:(=), :JL_OPTIONS_STARTUPFILE_OFF, 2)),
        (:line, 284, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=false"))))
      ), (:(=), :exename, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --precompiled=yes"))),
    (:line, 288, :none),
    (:call, :run, (:call, :pipeline, :DevNull, (:macrocall, Symbol("@cmd"), "\$(joinpath(JULIA_HOME, Base.julia_exename())) --lisp"), :DevNull)),
    (:line, 291, :none),
    (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :run, (:call, :pipeline, :DevNull, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$(joinpath(JULIA_HOME, Base.julia_exename())) -Cnative --lisp"), (:kw, :stderr, :DevNull)), :DevNull))),
    (:line, 294, :none),
    (:let, (:block,
        (:line, 295, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --precompiled=yes -E \"Bool(Base.JLOptions().use_precompiled)\"")), "true")),
        (:line, 296, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:macrocall, Symbol("@cmd"), "\$exename --precompiled=no -E \"Bool(Base.JLOptions().use_precompiled)\"")), "false"))
      ), (:(=), :exename, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --startup-file=no"))),
    (:line, 300, :none),
    (:for, (:(=), :precomp, (:tuple, "yes", "no")), (:block,
        (:line, 301, :none),
        (:(=), :bt, (:call, :readstring, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$(Base.julia_cmd()) --startup-file=no --precompiled=\$precomp\n        -E 'include(\"____nonexistent_file\")'")), (:kw, :stderr, :catcmd)))),
        (:line, 303, :none),
        (:macrocall, Symbol("@test"), (:call, :contains, :bt, "in include_from_node1")),
        (:line, 304, :none),
        (:if, (:&&, (:call, :is_windows), (:&&, (:call, :(==), (:., :Sys, (:quote, #QuoteNode
                    :WORD_SIZE
                  )), 32), (:call, :(==), :precomp, "yes"))), (:block,
            (:line, 306, :none),
            (:macrocall, Symbol("@test_broken"), (:call, :contains, :bt, (:string, "in include_from_node1(::String) at ", (:call, :joinpath, ".", "loading.jl"))))
          ), (:block,
            (:line, 308, :none),
            (:macrocall, Symbol("@test"), (:call, :contains, :bt, (:string, "in include_from_node1(::String) at ", (:call, :joinpath, ".", "loading.jl"))))
          )),
        (:line, 310, :none),
        (:(=), :lno, (:call, :match, (:macrocall, Symbol("@r_str"), "at \\.[\\/\\\\]loading\\.jl:(\\d+)"), :bt)),
        (:line, 311, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:., :lno, (:quote, #QuoteNode
                  :captures
                ))), 1)),
        (:line, 312, :none),
        (:macrocall, Symbol("@test"), (:call, :>, (:call, :parse, :Int, (:ref, (:., :lno, (:quote, #QuoteNode
                    :captures
                  )), 1)), 0))
      ))
  ))