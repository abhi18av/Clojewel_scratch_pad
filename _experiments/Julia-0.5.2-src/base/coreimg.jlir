(:quote, (:block,
    (:line, 3, :none),
    (:call, (:., (:., :Main, (:quote, #QuoteNode
            :Core
          )), (:quote, #QuoteNode
          :eval
        )), (:., :Main, (:quote, #QuoteNode
          :Core
        )), (:quote, (:module, false, :Inference, (:block,
            (:line, 3, :none),
            (:line, 4, :none),
            (:using, :Core, :Intrinsics),
            (:line, 5, :none),
            (:toplevel, (:import, :Core, :print), (:import, :Core, :println), (:import, :Core, :show), (:import, :Core, :write), (:import, :Core, :unsafe_write), (:import, :Core, :STDOUT), (:import, :Core, :STDERR)),
            (:line, 7, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_set_istopmod
              ), :Void, (:tuple, :Bool), false),
            (:line, 9, :none),
            (:(=), (:call, :eval, :x), (:block,
                (:line, 9, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :eval
                    )), :Inference, :x)
              )),
            (:line, 10, :none),
            (:(=), (:call, :eval, :m, :x), (:block,
                (:line, 10, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :eval
                    )), :m, :x)
              )),
            (:line, 12, :none),
            (:(=), :include, (:., :Core, (:quote, #QuoteNode
                  :include
                ))),
            (:line, 15, :none),
            (:call, :include, "essentials.jl"),
            (:line, 16, :none),
            (:call, :include, "generator.jl"),
            (:line, 17, :none),
            (:call, :include, "reflection.jl"),
            (:line, 18, :none),
            (:call, :include, "options.jl"),
            (:line, 21, :none),
            (:typealias, :Cint, :Int32),
            (:line, 22, :none),
            (:typealias, :Csize_t, :UInt),
            (:line, 23, :none),
            (:call, :include, "promotion.jl"),
            (:line, 24, :none),
            (:call, :include, "tuple.jl"),
            (:line, 25, :none),
            (:call, :include, "range.jl"),
            (:line, 26, :none),
            (:call, :include, "expr.jl"),
            (:line, 27, :none),
            (:call, :include, "error.jl"),
            (:line, 30, :none),
            (:call, :include, "bool.jl"),
            (:line, 31, :none),
            (:call, :include, "number.jl"),
            (:line, 32, :none),
            (:call, :include, "int.jl"),
            (:line, 33, :none),
            (:call, :include, "operators.jl"),
            (:line, 34, :none),
            (:call, :include, "pointer.jl"),
            (:line, 35, :none),
            (:const, (:(=), :checked_add, :+)),
            (:line, 36, :none),
            (:const, (:(=), :checked_sub, :-)),
            (:line, 37, :none),
            (:if, (:call, :!, (:call, :isdefined, :Main, (:quote, #QuoteNode
                    :Base
                  ))), (:block,
                (:line, 39, :none),
                (:(=), (:call, (:curly, (:(::), (:curly, :Type, :T)), :T), :arg), (:block,
                    (:line, 39, :none),
                    (:(::), (:call, :convert, :T, :arg), :T)
                  ))
              )),
            (:line, 43, :none),
            (:(=), (:call, :Symbol, (:(::), :s, :String)), (:block,
                (:line, 43, :none),
                (:call, :Symbol, (:., :s, (:quote, #QuoteNode
                      :data
                    )))
              )),
            (:line, 44, :none),
            (:(=), (:call, :Symbol, (:(::), :a, (:curly, :Array, :UInt8, 1))), (:block,
                (:line, 44, :none),
                (:ccall, (:quote, #QuoteNode
                    :jl_symbol_n
                  ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int32), :a, (:call, :length, :a))
              )),
            (:line, 48, :none),
            (:call, :include, "abstractarray.jl"),
            (:line, 49, :none),
            (:call, :include, "array.jl"),
            (:line, 52, :none),
            (:call, :include, "hashing.jl"),
            (:line, 53, :none),
            (:call, :include, "nofloat_hashing.jl"),
            (:line, 56, :none),
            (:macro, (:call, :simd, :forloop), (:block,
                (:line, 57, :none),
                (:call, :esc, :forloop)
              )),
            (:line, 59, :none),
            (:call, :include, "reduce.jl"),
            (:line, 62, :none),
            (:call, :include, "intset.jl"),
            (:line, 63, :none),
            (:call, :include, "dict.jl"),
            (:line, 64, :none),
            (:call, :include, "iterator.jl"),
            (:line, 67, :none),
            (:call, :include, "docs/core.jl"),
            (:line, 70, :none),
            (:call, :include, "inference.jl"),
            (:line, 71, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_set_typeinf_func
              ), :Void, (:tuple, :Any), :typeinf_ext)
          ))))
  ))