(:quote, (:block,
    (:line, 3, :none),
    (:import, :., :Serializer, :reset_state),
    (:line, 23, :none),
    (:abstract, :AbstractMsg),
    (:line, 25, :none),
    (:let, (:block,
        (:line, 26, :none),
        (:global, :next_ref_id),
        (:line, 27, :none),
        (:(=), (:call, :next_ref_id), (:block,
            (:line, 27, :none),
            (:block,
              (:(=), :id, :REF_ID),
              (:+=, :REF_ID, 1),
              :id
            )
          ))
      ), (:(=), (:(::), :REF_ID, :Int), 1)),
    (:line, 30, :none),
    (:type, false, :RRID, (:block,
        (:line, 31, :none),
        (:(::), :whence, :Int),
        (:line, 32, :none),
        (:(::), :id, :Int),
        (:line, 34, :none),
        (:(=), (:call, :RRID), (:block,
            (:line, 34, :none),
            (:call, :RRID, (:call, :myid), (:call, :next_ref_id))
          )),
        (:line, 35, :none),
        (:(=), (:call, :RRID, :whence, :id), (:block,
            (:line, 35, :none),
            (:call, :new, :whence, :id)
          ))
      )),
    (:line, 37, :none),
    (:(=), (:call, :hash, (:(::), :r, :RRID), (:(::), :h, :UInt)), (:block,
        (:line, 37, :none),
        (:call, :hash, (:., :r, (:quote, #QuoteNode
              :whence
            )), (:call, :hash, (:., :r, (:quote, #QuoteNode
                :id
              )), :h))
      )),
    (:line, 38, :none),
    (:(=), (:call, :(==), (:(::), :r, :RRID), (:(::), :s, :RRID)), (:block,
        (:line, 38, :none),
        (:&&, (:call, :(==), (:., :r, (:quote, #QuoteNode
                :whence
              )), (:., :s, (:quote, #QuoteNode
                :whence
              ))), (:call, :(==), (:., :r, (:quote, #QuoteNode
                :id
              )), (:., :s, (:quote, #QuoteNode
                :id
              ))))
      )),
    (:line, 49, :none),
    (:type, false, :MsgHeader, (:block,
        (:line, 50, :none),
        (:(::), :response_oid, :RRID),
        (:line, 51, :none),
        (:(::), :notify_oid, :RRID),
        (:line, 52, :none),
        (:(=), (:call, :MsgHeader, (:kw, :respond_oid, (:call, :RRID, 0, 0)), (:kw, :notify_oid, (:call, :RRID, 0, 0))), (:block,
            (:line, 52, :none),
            (:call, :new, :respond_oid, :notify_oid)
          ))
      )),
    (:line, 58, :none),
    (:(=), (:call, :null_id, :id), (:block,
        (:line, 58, :none),
        (:call, :(==), :id, (:call, :RRID, 0, 0))
      )),
    (:line, 60, :none),
    (:type, false, (:<:, (:curly, :CallMsg, :Mode), :AbstractMsg), (:block,
        (:line, 61, :none),
        (:(::), :f, :Function),
        (:line, 62, :none),
        (:(::), :args, :Tuple),
        (:line, 63, :none),
        (:(::), :kwargs, :Array)
      )),
    (:line, 65, :none),
    (:type, false, (:<:, :CallWaitMsg, :AbstractMsg), (:block,
        (:line, 66, :none),
        (:(::), :f, :Function),
        (:line, 67, :none),
        (:(::), :args, :Tuple),
        (:line, 68, :none),
        (:(::), :kwargs, :Array)
      )),
    (:line, 70, :none),
    (:type, false, (:<:, :RemoteDoMsg, :AbstractMsg), (:block,
        (:line, 71, :none),
        (:(::), :f, :Function),
        (:line, 72, :none),
        (:(::), :args, :Tuple),
        (:line, 73, :none),
        (:(::), :kwargs, :Array)
      )),
    (:line, 75, :none),
    (:type, false, (:<:, :ResultMsg, :AbstractMsg), (:block,
        (:line, 76, :none),
        (:(::), :value, :Any)
      )),
    (:line, 81, :none),
    (:type, false, (:<:, :IdentifySocketMsg, :AbstractMsg), (:block,
        (:line, 82, :none),
        (:(::), :from_pid, :Int)
      )),
    (:line, 85, :none),
    (:type, false, (:<:, :IdentifySocketAckMsg, :AbstractMsg), (:block,
        (:line, 86, :none)
      )),
    (:line, 88, :none),
    (:type, false, (:<:, :JoinPGRPMsg, :AbstractMsg), (:block,
        (:line, 89, :none),
        (:(::), :self_pid, :Int),
        (:line, 90, :none),
        (:(::), :other_workers, :Array),
        (:line, 91, :none),
        (:(::), :topology, :Symbol),
        (:line, 92, :none),
        :worker_pool
      )),
    (:line, 94, :none),
    (:type, false, (:<:, :JoinCompleteMsg, :AbstractMsg), (:block,
        (:line, 95, :none),
        (:(::), :cpu_cores, :Int),
        (:line, 96, :none),
        (:(::), :ospid, :Int)
      )),
    (:line, 104, :none),
    (:const, (:(=), :msgtypes, (:call, :filter!, (:->, :x, (:block,
              (:line, 104, :none),
              (:call, :(!=), :x, :CallMsg)
            )), (:call, :subtypes, :AbstractMsg)))),
    (:line, 105, :none),
    (:call, :push!, :msgtypes, (:curly, :CallMsg, (:quote, #QuoteNode
          :call
        )), (:curly, :CallMsg, (:quote, #QuoteNode
          :call_fetch
        ))),
    (:line, 107, :none),
    (:for, (:(=), (:tuple, :idx, :tname), (:call, :enumerate, :msgtypes)), (:block,
        (:line, 108, :none),
        (:(=), :nflds, (:call, :length, (:call, :fieldnames, :tname))),
        (:line, 109, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 110, :none),
            (:function, (:call, :serialize, (:(::), :s, :AbstractSerializer), (:(::), :o, (:$, :tname))), (:block,
                (:line, 111, :none),
                (:call, :write, (:., :s, (:quote, #QuoteNode
                      :io
                    )), (:call, :UInt8, (:$, :idx))),
                (:line, 112, :none),
                (:for, (:(=), :fld, (:call, :fieldnames, (:$, :tname))), (:block,
                    (:line, 113, :none),
                    (:call, :serialize, :s, (:call, :getfield, :o, :fld))
                  ))
              )),
            (:line, 117, :none),
            (:function, (:call, :deserialize_msg, (:(::), :s, :AbstractSerializer), (:(::), (:curly, :Type, (:$, :tname)))), (:block,
                (:line, 118, :none),
                (:(=), :data, (:call, (:curly, :Array, :Any, 1), (:$, :nflds))),
                (:line, 119, :none),
                (:for, (:(=), :i, (:(:), 1, (:$, :nflds))), (:block,
                    (:line, 120, :none),
                    (:(=), (:ref, :data, :i), (:call, :deserialize, :s))
                  )),
                (:line, 122, :none),
                (:return, (:call, (:$, :tname), (:..., :data)))
              ))
          ))
      )),
    (:line, 127, :none),
    (:function, (:call, :deserialize_msg, :s), (:block,
        (:line, 128, :none),
        (:(=), :idx, (:call, :read, (:., :s, (:quote, #QuoteNode
                :io
              )), :UInt8)),
        (:line, 129, :none),
        (:(=), :t, (:ref, :msgtypes, :idx)),
        (:line, 130, :none),
        (:return, (:call, :deserialize_msg, :s, :t))
      )),
    (:line, 133, :none),
    (:function, (:call, :send_msg_unknown, (:(::), :s, :IO), :header, :msg), (:block,
        (:line, 134, :none),
        (:call, :error, "attempt to send to unknown socket")
      )),
    (:line, 137, :none),
    (:function, (:call, :send_msg, (:(::), :s, :IO), :header, :msg), (:block,
        (:line, 138, :none),
        (:(=), :id, (:call, :worker_id_from_socket, :s)),
        (:line, 139, :none),
        (:if, (:call, :>, :id, -1), (:block,
            (:line, 140, :none),
            (:return, (:call, :send_msg, (:call, :worker_from_id, :id), :header, :msg))
          )),
        (:line, 142, :none),
        (:call, :send_msg_unknown, :s, :header, :msg)
      )),
    (:line, 145, :none),
    (:function, (:call, :send_msg_now, (:(::), :s, :IO), :header, (:(::), :msg, :AbstractMsg)), (:block,
        (:line, 146, :none),
        (:(=), :id, (:call, :worker_id_from_socket, :s)),
        (:line, 147, :none),
        (:if, (:call, :>, :id, -1), (:block,
            (:line, 148, :none),
            (:return, (:call, :send_msg_now, (:call, :worker_from_id, :id), :header, :msg))
          )),
        (:line, 150, :none),
        (:call, :send_msg_unknown, :s, :header, :msg)
      )),
    (:line, 153, :none),
    (:abstract, :ClusterManager),
    (:line, 155, :none),
    (:type, true, :WorkerConfig, (:block,
        (:line, 157, :none),
        (:(::), :io, (:curly, :Nullable, :IO)),
        (:line, 158, :none),
        (:(::), :host, (:curly, :Nullable, :AbstractString)),
        (:line, 159, :none),
        (:(::), :port, (:curly, :Nullable, :Integer)),
        (:line, 162, :none),
        (:(::), :count, (:curly, :Nullable, (:curly, :Union, :Int, :Symbol))),
        (:line, 163, :none),
        (:(::), :exename, (:curly, :Nullable, :AbstractString)),
        (:line, 164, :none),
        (:(::), :exeflags, (:curly, :Nullable, :Cmd)),
        (:line, 168, :none),
        (:(::), :userdata, (:curly, :Nullable, :Any)),
        (:line, 171, :none),
        (:(::), :tunnel, (:curly, :Nullable, :Bool)),
        (:line, 172, :none),
        (:(::), :bind_addr, (:curly, :Nullable, :AbstractString)),
        (:line, 173, :none),
        (:(::), :sshflags, (:curly, :Nullable, :Cmd)),
        (:line, 174, :none),
        (:(::), :max_parallel, (:curly, :Nullable, :Integer)),
        (:line, 177, :none),
        (:(::), :connect_at, (:curly, :Nullable, :Any)),
        (:line, 179, :none),
        (:(::), :process, (:curly, :Nullable, :Process)),
        (:line, 180, :none),
        (:(::), :ospid, (:curly, :Nullable, :Integer)),
        (:line, 183, :none),
        (:(::), :environ, (:curly, :Nullable, :Dict)),
        (:line, 186, :none),
        (:(::), :ident, (:curly, :Nullable, :Any)),
        (:line, 188, :none),
        (:(::), :connect_idents, (:curly, :Nullable, :Array)),
        (:line, 190, :none),
        (:function, (:call, :WorkerConfig), (:block,
            (:line, 191, :none),
            (:(=), :wc, (:call, :new)),
            (:line, 192, :none),
            (:for, (:(=), :n, (:(:), 1, (:call, :length, (:., :WorkerConfig, (:quote, #QuoteNode
                        :types
                      ))))), (:block,
                (:line, 193, :none),
                (:(=), :T, (:call, :eltype, (:call, :fieldtype, :WorkerConfig, :n))),
                (:line, 194, :none),
                (:call, :setfield!, :wc, :n, (:call, (:curly, :Nullable, :T)))
              )),
            (:line, 196, :none),
            :wc
          ))
      )),
    (:line, 200, :none),
    (:macrocall, Symbol("@enum"), :WorkerState, :W_CREATED, :W_CONNECTED, :W_TERMINATING, :W_TERMINATED),
    (:line, 201, :none),
    (:type, true, :Worker, (:block,
        (:line, 202, :none),
        (:(::), :id, :Int),
        (:line, 203, :none),
        (:(::), :del_msgs, (:curly, :Array, :Any, 1)),
        (:line, 204, :none),
        (:(::), :add_msgs, (:curly, :Array, :Any, 1)),
        (:line, 205, :none),
        (:(::), :gcflag, :Bool),
        (:line, 206, :none),
        (:(::), :state, :WorkerState),
        (:line, 207, :none),
        (:(::), :c_state, :Condition),
        (:line, 208, :none),
        (:(::), :ct_time, :Float64),
        (:line, 210, :none),
        (:(::), :r_stream, :IO),
        (:line, 211, :none),
        (:(::), :w_stream, :IO),
        (:line, 212, :none),
        (:(::), :w_serializer, :ClusterSerializer),
        (:line, 214, :none),
        (:(::), :manager, :ClusterManager),
        (:line, 215, :none),
        (:(::), :config, :WorkerConfig),
        (:line, 216, :none),
        (:(::), :version, (:curly, :Nullable, :VersionNumber)),
        (:line, 218, :none),
        (:function, (:call, :Worker, (:parameters, (:kw, :version, (:call, (:curly, :Nullable, :VersionNumber))), (:kw, :config, (:call, :WorkerConfig))), (:(::), :id, :Int), (:(::), :r_stream, :IO), (:(::), :w_stream, :IO), (:(::), :manager, :ClusterManager)), (:block,
            (:line, 220, :none),
            (:(=), :w, (:call, :Worker, :id)),
            (:line, 221, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :r_stream
                )), :r_stream),
            (:line, 222, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :w_stream
                )), (:call, :buffer_writes, :w_stream)),
            (:line, 223, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :w_serializer
                )), (:call, :ClusterSerializer, (:., :w, (:quote, #QuoteNode
                    :w_stream
                  )))),
            (:line, 224, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :manager
                )), :manager),
            (:line, 225, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :config
                )), :config),
            (:line, 226, :none),
            (:(=), (:., :w, (:quote, #QuoteNode
                  :version
                )), :version),
            (:line, 227, :none),
            (:call, :set_worker_state, :w, :W_CONNECTED),
            (:line, 228, :none),
            (:call, :register_worker_streams, :w),
            (:line, 229, :none),
            :w
          )),
        (:line, 232, :none),
        (:function, (:call, :Worker, (:(::), :id, :Int)), (:block,
            (:line, 233, :none),
            (:macrocall, Symbol("@assert"), (:call, :>, :id, 0)),
            (:line, 234, :none),
            (:if, (:call, :haskey, :map_pid_wrkr, :id), (:block,
                (:line, 235, :none),
                (:return, (:ref, :map_pid_wrkr, :id))
              )),
            (:line, 237, :none),
            (:(=), :w, (:call, :new, :id, (:vect,), (:vect,), false, :W_CREATED, (:call, :Condition), (:call, :time))),
            (:line, 238, :none),
            (:call, :register_worker, :w),
            (:line, 239, :none),
            :w
          )),
        (:line, 242, :none),
        (:(=), (:call, :Worker), (:block,
            (:line, 242, :none),
            (:call, :Worker, (:call, :get_next_pid))
          ))
      )),
    (:line, 245, :none),
    (:function, (:call, :set_worker_state, :w, :state), (:block,
        (:line, 246, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :state
            )), :state),
        (:line, 247, :none),
        (:call, :notify, (:parameters, (:kw, :all, true)), (:., :w, (:quote, #QuoteNode
              :c_state
            )))
      )),
    (:line, 250, :none),
    (:function, (:call, :send_msg_now, (:(::), :w, :Worker), :header, :msg), (:block,
        (:line, 251, :none),
        (:call, :send_msg_, :w, :header, :msg, true)
      )),
    (:line, 254, :none),
    (:function, (:call, :send_msg, (:(::), :w, :Worker), :header, :msg), (:block,
        (:line, 255, :none),
        (:call, :send_msg_, :w, :header, :msg, false)
      )),
    (:line, 258, :none),
    (:function, (:call, :flush_gc_msgs, (:(::), :w, :Worker)), (:block,
        (:line, 259, :none),
        (:if, (:call, :!, (:call, :isdefined, :w, (:quote, #QuoteNode
                :w_stream
              ))), (:block,
            (:line, 260, :none),
            (:return, nothing)
          )),
        (:line, 262, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :gcflag
            )), false),
        (:line, 263, :none),
        (:(=), :new_array, (:ref, :Any)),
        (:line, 264, :none),
        (:(=), :msgs, (:., :w, (:quote, #QuoteNode
              :add_msgs
            ))),
        (:line, 265, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :add_msgs
            )), :new_array),
        (:line, 266, :none),
        (:if, (:call, :!, (:call, :isempty, :msgs)), (:block,
            (:line, 267, :none),
            (:call, :remote_do, :add_clients, :w, :msgs)
          )),
        (:line, 271, :none),
        (:(=), :new_array, (:ref, :Any)),
        (:line, 272, :none),
        (:(=), :msgs, (:., :w, (:quote, #QuoteNode
              :del_msgs
            ))),
        (:line, 273, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :del_msgs
            )), :new_array),
        (:line, 274, :none),
        (:if, (:call, :!, (:call, :isempty, :msgs)), (:block,
            (:line, 276, :none),
            (:call, :remote_do, :del_clients, :w, :msgs)
          ))
      )),
    (:line, 280, :none),
    (:function, (:call, :check_worker_state, (:(::), :w, :Worker)), (:block,
        (:line, 281, :none),
        (:if, (:call, :(==), (:., :w, (:quote, #QuoteNode
                :state
              )), :W_CREATED), (:block,
            (:line, 282, :none),
            (:if, (:call, :(==), (:., :PGRP, (:quote, #QuoteNode
                    :topology
                  )), (:quote, #QuoteNode
                  :all_to_all
                )), (:block,
                (:line, 285, :none),
                (:(=), :timeout, (:call, :-, (:call, :worker_timeout), (:call, :-, (:call, :time), (:., :w, (:quote, #QuoteNode
                          :ct_time
                        ))))),
                (:line, 286, :none),
                (:&&, (:call, :(<=), :timeout, 0), (:call, :error, (:string, "peer ", (:., :w, (:quote, #QuoteNode
                          :id
                        )), " has not connected to ", (:call, :myid)))),
                (:line, 288, :none),
                (:macrocall, Symbol("@schedule"), (:block,
                    (:call, :sleep, :timeout),
                    (:call, :notify, (:parameters, (:kw, :all, true)), (:., :w, (:quote, #QuoteNode
                          :c_state
                        )))
                  )),
                (:line, 289, :none),
                (:call, :wait, (:., :w, (:quote, #QuoteNode
                      :c_state
                    ))),
                (:line, 290, :none),
                (:&&, (:call, :(==), (:., :w, (:quote, #QuoteNode
                        :state
                      )), :W_CREATED), (:call, :error, (:string, "peer ", (:., :w, (:quote, #QuoteNode
                          :id
                        )), " didn't connect to ", (:call, :myid), " within ", :timeout, " seconds")))
              ), (:block,
                (:line, 292, :none),
                (:call, :error, (:call, :*, (:string, "peer ", (:., :w, (:quote, #QuoteNode
                          :id
                        )), " is not connected to ", (:call, :myid), ". Topology : "), (:call, :string, (:., :PGRP, (:quote, #QuoteNode
                          :topology
                        )))))
              ))
          ))
      )),
    (:line, 301, :none),
    (:const, (:(=), :MSG_BOUNDARY, (:ref, :UInt8, 0x79, 0x8e, 0x8e, 0xf5, 0x6e, 0x9b, 0x2e, 0x97, 0xd5, 0x7d))),
    (:line, 304, :none),
    (:function, (:call, :serialize_hdr_raw, :io, :hdr), (:block,
        (:line, 305, :none),
        (:call, :write, :io, (:., (:., :hdr, (:quote, #QuoteNode
                :response_oid
              )), (:quote, #QuoteNode
              :whence
            )), (:., (:., :hdr, (:quote, #QuoteNode
                :response_oid
              )), (:quote, #QuoteNode
              :id
            )), (:., (:., :hdr, (:quote, #QuoteNode
                :notify_oid
              )), (:quote, #QuoteNode
              :whence
            )), (:., (:., :hdr, (:quote, #QuoteNode
                :notify_oid
              )), (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 308, :none),
    (:function, (:call, :deserialize_hdr_raw, :io), (:block,
        (:line, 309, :none),
        (:(=), :data, (:call, (:curly, :Array, :Int, 1), 4)),
        (:line, 310, :none),
        (:call, :read!, :io, :data),
        (:line, 311, :none),
        (:return, (:call, :MsgHeader, (:call, :RRID, (:ref, :data, 1), (:ref, :data, 2)), (:call, :RRID, (:ref, :data, 3), (:ref, :data, 4))))
      )),
    (:line, 314, :none),
    (:function, (:call, :send_msg_, (:(::), :w, :Worker), :header, :msg, (:(::), :now, :Bool)), (:block,
        (:line, 315, :none),
        (:call, :check_worker_state, :w),
        (:line, 316, :none),
        (:(=), :io, (:., :w, (:quote, #QuoteNode
              :w_stream
            ))),
        (:line, 317, :none),
        (:call, :lock, (:., :io, (:quote, #QuoteNode
              :lock
            ))),
        (:line, 318, :none),
        (:try, (:block,
            (:line, 319, :none),
            (:call, :reset_state, (:., :w, (:quote, #QuoteNode
                  :w_serializer
                ))),
            (:line, 320, :none),
            (:call, :serialize_hdr_raw, :io, :header),
            (:line, 321, :none),
            (:call, :serialize, (:., :w, (:quote, #QuoteNode
                  :w_serializer
                )), :msg),
            (:line, 322, :none),
            (:call, :write, :io, :MSG_BOUNDARY),
            (:line, 324, :none),
            (:if, (:&&, (:call, :!, :now), (:., :w, (:quote, #QuoteNode
                    :gcflag
                  ))), (:block,
                (:line, 325, :none),
                (:call, :flush_gc_msgs, :w)
              ), (:block,
                (:line, 327, :none),
                (:call, :flush, :io)
              ))
          ), false, false, (:block,
            (:line, 330, :none),
            (:call, :unlock, (:., :io, (:quote, #QuoteNode
                  :lock
                )))
          ))
      )),
    (:line, 334, :none),
    (:function, (:call, :flush_gc_msgs), (:block,
        (:line, 335, :none),
        (:try, (:block,
            (:line, 336, :none),
            (:for, (:(=), :w, (:., (:(::), :PGRP, :ProcessGroup), (:quote, #QuoteNode
                    :workers
                  ))), (:block,
                (:line, 337, :none),
                (:if, (:&&, (:call, :isa, :w, :Worker), (:&&, (:., :w, (:quote, #QuoteNode
                          :gcflag
                        )), (:call, :(==), (:., :w, (:quote, #QuoteNode
                            :state
                          )), :W_CONNECTED))), (:block,
                    (:line, 338, :none),
                    (:call, :flush_gc_msgs, :w)
                  ))
              ))
          ), :e, (:block,
            (:line, 342, :none),
            (:(=), :bt, (:call, :catch_backtrace)),
            (:line, 343, :none),
            (:macrocall, Symbol("@schedule"), (:call, :showerror, :STDERR, :e, :bt))
          ))
      )),
    (:line, 347, :none),
    (:function, (:call, :send_connection_hdr, (:(::), :w, :Worker), (:kw, :cookie, true)), (:block,
        (:line, 351, :none),
        (:if, :cookie, (:block,
            (:line, 352, :none),
            (:call, :write, (:., :w, (:quote, #QuoteNode
                  :w_stream
                )), (:., :LPROC, (:quote, #QuoteNode
                  :cookie
                )))
          )),
        (:line, 354, :none),
        (:call, :write, (:., :w, (:quote, #QuoteNode
              :w_stream
            )), (:ref, (:call, :rpad, :VERSION_STRING, :HDR_VERSION_LEN), (:(:), 1, :HDR_VERSION_LEN)))
      )),
    (:line, 359, :none),
    (:type, true, :LocalProcess, (:block,
        (:line, 360, :none),
        (:(::), :id, :Int),
        (:line, 361, :none),
        (:(::), :bind_addr, :AbstractString),
        (:line, 362, :none),
        (:(::), :bind_port, :UInt16),
        (:line, 363, :none),
        (:(::), :cookie, :AbstractString),
        (:line, 364, :none),
        (:(=), (:call, :LocalProcess), (:block,
            (:line, 364, :none),
            (:call, :new, 1)
          ))
      )),
    (:line, 367, :none),
    (:const, (:(=), :LPROC, (:call, :LocalProcess))),
    (:line, 369, :none),
    (:const, (:(=), :HDR_VERSION_LEN, 16)),
    (:line, 370, :none),
    (:const, (:(=), :HDR_COOKIE_LEN, 16)),
    (:line, 372, :none),
    "    Base.cluster_cookie() -> cookie\n\nReturns the cluster cookie.\n",
    (:line, 377, :none),
    (:(=), (:call, :cluster_cookie), (:block,
        (:line, 377, :none),
        (:., :LPROC, (:quote, #QuoteNode
            :cookie
          ))
      )),
    (:line, 379, :none),
    "    Base.cluster_cookie(cookie) -> cookie\n\nSets the passed cookie as the cluster cookie, then returns it.\n",
    (:line, 384, :none),
    (:function, (:call, :cluster_cookie, :cookie), (:block,
        (:line, 386, :none),
        (:call, :assert, (:call, :isascii, :cookie)),
        (:line, 387, :none),
        (:call, :assert, (:call, :(<=), (:call, :length, :cookie), :HDR_COOKIE_LEN)),
        (:line, 389, :none),
        (:(=), :cookie, (:call, :rpad, :cookie, :HDR_COOKIE_LEN)),
        (:line, 391, :none),
        (:(=), (:., :LPROC, (:quote, #QuoteNode
              :cookie
            )), :cookie),
        (:line, 392, :none),
        :cookie
      )),
    (:line, 395, :none),
    (:const, (:(=), :map_pid_wrkr, (:call, (:curly, :Dict, :Int, (:curly, :Union, :Worker, :LocalProcess))))),
    (:line, 396, :none),
    (:const, (:(=), :map_sock_wrkr, (:call, :ObjectIdDict))),
    (:line, 397, :none),
    (:const, (:(=), :map_del_wrkr, (:call, (:curly, :Set, :Int)))),
    (:line, 399, :none),
    (:let, (:block,
        (:line, 400, :none),
        (:global, :get_next_pid),
        (:line, 401, :none),
        (:function, (:call, :get_next_pid), (:block,
            (:line, 402, :none),
            (:(=), :retval, :next_pid),
            (:line, 403, :none),
            (:+=, :next_pid, 1),
            (:line, 404, :none),
            :retval
          ))
      ), (:(=), :next_pid, 2)),
    (:line, 408, :none),
    (:type, true, :ProcessGroup, (:block,
        (:line, 409, :none),
        (:(::), :name, :AbstractString),
        (:line, 410, :none),
        (:(::), :workers, (:curly, :Array, :Any, 1)),
        (:line, 411, :none),
        (:(::), :refs, :Dict),
        (:line, 412, :none),
        (:(::), :topology, :Symbol),
        (:line, 414, :none),
        (:(=), (:call, :ProcessGroup, (:(::), :w, (:curly, :Array, :Any, 1))), (:block,
            (:line, 414, :none),
            (:call, :new, "pg-default", :w, (:call, :Dict), (:quote, #QuoteNode
                :all_to_all
              ))
          ))
      )),
    (:line, 416, :none),
    (:const, (:(=), :PGRP, (:call, :ProcessGroup, (:vect,)))),
    (:line, 418, :none),
    (:function, (:call, :topology, :t), (:block,
        (:line, 419, :none),
        (:call, :assert, (:call, :in, :t, (:vect, (:quote, #QuoteNode
                :all_to_all
              ), (:quote, #QuoteNode
                :master_slave
              ), (:quote, #QuoteNode
                :custom
              )))),
        (:line, 420, :none),
        (:if, (:||, (:call, :(==), (:., :PGRP, (:quote, #QuoteNode
                  :topology
                )), :t), (:||, (:&&, (:call, :(==), (:call, :myid), 1), (:call, :(==), (:call, :nprocs), 1)), (:call, :>, (:call, :myid), 1))), (:block,
            (:line, 421, :none),
            (:(=), (:., :PGRP, (:quote, #QuoteNode
                  :topology
                )), :t)
          ), (:block,
            (:line, 423, :none),
            (:call, :error, (:string, "Workers with Topology ", (:., :PGRP, (:quote, #QuoteNode
                    :topology
                  )), " already exist. Requested Topology ", :t, " cannot be set."))
          )),
        (:line, 425, :none),
        :t
      )),
    (:line, 428, :none),
    (:(=), (:call, :get_bind_addr, (:(::), :pid, :Integer)), (:block,
        (:line, 428, :none),
        (:call, :get_bind_addr, (:call, :worker_from_id, :pid))
      )),
    (:line, 429, :none),
    (:(=), (:call, :get_bind_addr, (:(::), :w, :LocalProcess)), (:block,
        (:line, 429, :none),
        (:., :LPROC, (:quote, #QuoteNode
            :bind_addr
          ))
      )),
    (:line, 430, :none),
    (:function, (:call, :get_bind_addr, (:(::), :w, :Worker)), (:block,
        (:line, 431, :none),
        (:if, (:call, :isnull, (:., (:., :w, (:quote, #QuoteNode
                  :config
                )), (:quote, #QuoteNode
                :bind_addr
              ))), (:block,
            (:line, 432, :none),
            (:if, (:call, :(!=), (:., :w, (:quote, #QuoteNode
                    :id
                  )), (:call, :myid)), (:block,
                (:line, 433, :none),
                (:(=), (:., (:., :w, (:quote, #QuoteNode
                        :config
                      )), (:quote, #QuoteNode
                      :bind_addr
                    )), (:call, :remotecall_fetch, :get_bind_addr, (:., :w, (:quote, #QuoteNode
                        :id
                      )), (:., :w, (:quote, #QuoteNode
                        :id
                      ))))
              ))
          )),
        (:line, 436, :none),
        (:call, :get, (:., (:., :w, (:quote, #QuoteNode
                :config
              )), (:quote, #QuoteNode
              :bind_addr
            )))
      )),
    (:line, 439, :none),
    "    myid()\n\nGet the id of the current process.\n",
    (:line, 444, :none),
    (:(=), (:call, :myid), (:block,
        (:line, 444, :none),
        (:., :LPROC, (:quote, #QuoteNode
            :id
          ))
      )),
    (:line, 446, :none),
    "    nprocs()\n\nGet the number of available processes.\n",
    (:line, 451, :none),
    (:(=), (:call, :nprocs), (:block,
        (:line, 451, :none),
        (:call, :length, (:., :PGRP, (:quote, #QuoteNode
              :workers
            )))
      )),
    (:line, 453, :none),
    "    nworkers()\n\nGet the number of available worker processes. This is one less than `nprocs()`. Equal to\n`nprocs()` if `nprocs() == 1`.\n",
    (:line, 459, :none),
    (:function, (:call, :nworkers), (:block,
        (:line, 460, :none),
        (:(=), :n, (:call, :nprocs)),
        (:line, 461, :none),
        (:if, (:call, :(==), :n, 1), 1, (:call, :-, :n, 1))
      )),
    (:line, 464, :none),
    "    procs()\n\nReturns a list of all process identifiers.\n",
    (:line, 469, :none),
    (:(=), (:call, :procs), (:block,
        (:line, 469, :none),
        (:typed_comprehension, :Int, (:generator, (:., :x, (:quote, #QuoteNode
                :id
              )), (:(=), :x, (:., :PGRP, (:quote, #QuoteNode
                  :workers
                )))))
      )),
    (:line, 471, :none),
    "    procs(pid::Integer)\n\nReturns a list of all process identifiers on the same physical node.\nSpecifically all workers bound to the same ip-address as `pid` are returned.\n",
    (:line, 477, :none),
    (:function, (:call, :procs, (:(::), :pid, :Integer)), (:block,
        (:line, 478, :none),
        (:if, (:call, :(==), (:call, :myid), 1), (:block,
            (:line, 479, :none),
            (:if, (:||, (:call, :(==), :pid, 1), (:call, :isa, (:., (:ref, :map_pid_wrkr, :pid), (:quote, #QuoteNode
                      :manager
                    )), :LocalManager)), (:block,
                (:line, 480, :none),
                (:typed_comprehension, :Int, (:generator, (:., :x, (:quote, #QuoteNode
                        :id
                      )), (:(=), :x, (:call, :filter, (:->, :w, (:block,
                            (:line, 480, :none),
                            (:||, (:call, :(==), (:., :w, (:quote, #QuoteNode
                                    :id
                                  )), 1), (:call, :isa, (:., :w, (:quote, #QuoteNode
                                    :manager
                                  )), :LocalManager))
                          )), (:., :PGRP, (:quote, #QuoteNode
                            :workers
                          ))))))
              ), (:block,
                (:line, 482, :none),
                (:(=), :ipatpid, (:call, :get_bind_addr, :pid)),
                (:line, 483, :none),
                (:typed_comprehension, :Int, (:generator, (:., :x, (:quote, #QuoteNode
                        :id
                      )), (:(=), :x, (:call, :filter, (:->, :w, (:block,
                            (:line, 483, :none),
                            (:call, :(==), (:call, :get_bind_addr, :w), :ipatpid)
                          )), (:., :PGRP, (:quote, #QuoteNode
                            :workers
                          ))))))
              ))
          ), (:block,
            (:line, 486, :none),
            (:call, :remotecall_fetch, :procs, 1, :pid)
          ))
      )),
    (:line, 490, :none),
    "    workers()\n\nReturns a list of all worker process identifiers.\n",
    (:line, 495, :none),
    (:function, (:call, :workers), (:block,
        (:line, 496, :none),
        (:(=), :allp, (:call, :procs)),
        (:line, 497, :none),
        (:if, (:call, :(==), (:call, :nprocs), 1), (:block,
            (:line, 498, :none),
            :allp
          ), (:block,
            (:line, 500, :none),
            (:call, :filter, (:->, :x, (:block,
                  (:line, 500, :none),
                  (:call, :(!=), :x, 1)
                )), :allp)
          ))
      )),
    (:line, 504, :none),
    "    rmprocs(pids...; waitfor=0.0)\n\nRemoves the specified workers. Note that only\nprocess 1 can add or remove workers - if another\nworker tries to call `rmprocs`, an error will be\nthrown. The optional argument `waitfor` determines\nhow long the first process will wait for the workers\nto shut down.\n",
    (:line, 514, :none),
    (:function, (:call, :rmprocs, (:parameters, (:kw, :waitfor, 0.0)), (:..., :pids)), (:block,
        (:line, 516, :none),
        (:if, (:call, :(!=), (:call, :myid), 1), (:block,
            (:line, 517, :none),
            (:call, :error, "only process 1 can add and remove processes")
          )),
        (:line, 520, :none),
        (:call, :lock, :worker_lock),
        (:line, 521, :none),
        (:try, (:block,
            (:line, 522, :none),
            (:(=), :rmprocset, (:vect,)),
            (:line, 523, :none),
            (:for, (:(=), :i, (:call, :vcat, (:..., :pids))), (:block,
                (:line, 524, :none),
                (:if, (:call, :(==), :i, 1), (:block,
                    (:line, 525, :none),
                    (:call, :warn, "rmprocs: process 1 not removed")
                  ), (:block,
                    (:line, 527, :none),
                    (:if, (:call, :haskey, :map_pid_wrkr, :i), (:block,
                        (:line, 528, :none),
                        (:(=), :w, (:ref, :map_pid_wrkr, :i)),
                        (:line, 529, :none),
                        (:call, :set_worker_state, :w, :W_TERMINATING),
                        (:line, 530, :none),
                        (:call, :kill, (:., :w, (:quote, #QuoteNode
                              :manager
                            )), :i, (:., :w, (:quote, #QuoteNode
                              :config
                            ))),
                        (:line, 531, :none),
                        (:call, :push!, :rmprocset, :w)
                      ))
                  ))
              )),
            (:line, 536, :none),
            (:(=), :start, (:call, :time)),
            (:line, 537, :none),
            (:while, (:call, :<, (:call, :-, (:call, :time), :start), :waitfor), (:block,
                (:line, 538, :none),
                (:if, (:call, :all, (:->, :w, (:block,
                        (:line, 538, :none),
                        (:call, :(==), (:., :w, (:quote, #QuoteNode
                              :state
                            )), :W_TERMINATED)
                      )), :rmprocset), (:block,
                    (:line, 539, :none),
                    (:break,)
                  ), (:block,
                    (:line, 541, :none),
                    (:call, :sleep, 0.1)
                  ))
              )),
            (:line, 545, :none),
            (:if, (:&&, (:call, :>, :waitfor, 0), (:call, :any, (:->, :w, (:block,
                      (:line, 545, :none),
                      (:call, :(!=), (:., :w, (:quote, #QuoteNode
                            :state
                          )), :W_TERMINATED)
                    )), :rmprocset)), (:quote, #QuoteNode
                :timed_out
              ), (:quote, #QuoteNode
                :ok
              ))
          ), false, false, (:block,
            (:line, 547, :none),
            (:call, :unlock, :worker_lock)
          ))
      )),
    (:line, 551, :none),
    "    ProcessExitedException()\n\nAfter a client Julia process has exited, further attempts to reference the dead child will\nthrow this exception.\n",
    (:line, 557, :none),
    (:call, :ProcessExitedException),
    (:line, 558, :none),
    (:type, true, (:<:, :ProcessExitedException, :Exception), (:block,
        (:line, 558, :none)
      )),
    (:line, 560, :none),
    (:(=), (:call, :worker_from_id, :i), (:block,
        (:line, 560, :none),
        (:call, :worker_from_id, :PGRP, :i)
      )),
    (:line, 561, :none),
    (:function, (:call, :worker_from_id, (:(::), :pg, :ProcessGroup), :i), (:block,
        (:line, 562, :none),
        (:if, (:call, :in, :i, :map_del_wrkr), (:block,
            (:line, 563, :none),
            (:call, :throw, (:call, :ProcessExitedException))
          )),
        (:line, 565, :none),
        (:if, (:call, :!, (:call, :haskey, :map_pid_wrkr, :i)), (:block,
            (:line, 566, :none),
            (:if, (:call, :(==), (:call, :myid), 1), (:block,
                (:line, 567, :none),
                (:call, :error, (:string, "no process with id ", :i, " exists"))
              )),
            (:line, 569, :none),
            (:(=), :w, (:call, :Worker, :i)),
            (:line, 570, :none),
            (:(=), (:ref, :map_pid_wrkr, :i), :w)
          ), (:block,
            (:line, 572, :none),
            (:(=), :w, (:ref, :map_pid_wrkr, :i))
          )),
        (:line, 574, :none),
        :w
      )),
    (:line, 577, :none),
    "    Base.worker_id_from_socket(s) -> pid\n\nA low-level API which given a `IO` connection or a `Worker`,\nreturns the `pid` of the worker it is connected to.\nThis is useful when writing custom `serialize` methods for a type,\nwhich optimizes the data written out depending on the receiving process id.\n",
    (:line, 585, :none),
    (:function, (:call, :worker_id_from_socket, :s), (:block,
        (:line, 586, :none),
        (:(=), :w, (:call, :get, :map_sock_wrkr, :s, :nothing)),
        (:line, 587, :none),
        (:if, (:call, :isa, :w, :Worker), (:block,
            (:line, 588, :none),
            (:if, (:||, (:call, :is, :s, (:., :w, (:quote, #QuoteNode
                      :r_stream
                    ))), (:call, :is, :s, (:., :w, (:quote, #QuoteNode
                      :w_stream
                    )))), (:block,
                (:line, 589, :none),
                (:return, (:., :w, (:quote, #QuoteNode
                      :id
                    )))
              ))
          )),
        (:line, 592, :none),
        (:if, (:&&, (:call, :isa, :s, :IOStream), (:call, :(==), (:call, :fd, :s), -1)), (:block,
            (:line, 594, :none),
            (:return, (:call, :myid))
          )),
        (:line, 596, :none),
        (:return, -1)
      )),
    (:line, 599, :none),
    (:(=), (:call, :register_worker, :w), (:block,
        (:line, 599, :none),
        (:call, :register_worker, :PGRP, :w)
      )),
    (:line, 600, :none),
    (:function, (:call, :register_worker, :pg, :w), (:block,
        (:line, 601, :none),
        (:call, :push!, (:., :pg, (:quote, #QuoteNode
              :workers
            )), :w),
        (:line, 602, :none),
        (:(=), (:ref, :map_pid_wrkr, (:., :w, (:quote, #QuoteNode
                :id
              ))), :w)
      )),
    (:line, 605, :none),
    (:function, (:call, :register_worker_streams, :w), (:block,
        (:line, 606, :none),
        (:(=), (:ref, :map_sock_wrkr, (:., :w, (:quote, #QuoteNode
                :r_stream
              ))), :w),
        (:line, 607, :none),
        (:(=), (:ref, :map_sock_wrkr, (:., :w, (:quote, #QuoteNode
                :w_stream
              ))), :w)
      )),
    (:line, 610, :none),
    (:(=), (:call, :deregister_worker, :pid), (:block,
        (:line, 610, :none),
        (:call, :deregister_worker, :PGRP, :pid)
      )),
    (:line, 611, :none),
    (:function, (:call, :deregister_worker, :pg, :pid), (:block,
        (:line, 612, :none),
        (:(=), (:., :pg, (:quote, #QuoteNode
              :workers
            )), (:call, :filter, (:->, :x, (:block,
                (:line, 612, :none),
                (:call, :!, (:call, :(==), (:., :x, (:quote, #QuoteNode
                        :id
                      )), :pid))
              )), (:., :pg, (:quote, #QuoteNode
                :workers
              )))),
        (:line, 613, :none),
        (:(=), :w, (:call, :pop!, :map_pid_wrkr, :pid, :nothing)),
        (:line, 614, :none),
        (:if, (:call, :isa, :w, :Worker), (:block,
            (:line, 615, :none),
            (:if, (:call, :isdefined, :w, (:quote, #QuoteNode
                  :r_stream
                )), (:block,
                (:line, 616, :none),
                (:call, :pop!, :map_sock_wrkr, (:., :w, (:quote, #QuoteNode
                      :r_stream
                    )), :nothing),
                (:line, 617, :none),
                (:if, (:call, :(!=), (:., :w, (:quote, #QuoteNode
                        :r_stream
                      )), (:., :w, (:quote, #QuoteNode
                        :w_stream
                      ))), (:block,
                    (:line, 618, :none),
                    (:call, :pop!, :map_sock_wrkr, (:., :w, (:quote, #QuoteNode
                          :w_stream
                        )), :nothing)
                  ))
              )),
            (:line, 622, :none),
            (:if, (:call, :(==), (:call, :myid), 1), (:block,
                (:line, 624, :none),
                (:call, :manage, (:., :w, (:quote, #QuoteNode
                      :manager
                    )), (:., :w, (:quote, #QuoteNode
                      :id
                    )), (:., :w, (:quote, #QuoteNode
                      :config
                    )), (:quote, #QuoteNode
                    :deregister
                  )),
                (:line, 625, :none),
                (:if, (:call, :(!=), (:., :PGRP, (:quote, #QuoteNode
                        :topology
                      )), (:quote, #QuoteNode
                      :all_to_all
                    )), (:block,
                    (:line, 626, :none),
                    (:for, (:(=), :rpid, (:call, :workers)), (:block,
                        (:line, 627, :none),
                        (:try, (:block,
                            (:line, 628, :none),
                            (:call, :remote_do, :deregister_worker, :rpid, :pid)
                          ), false, (:block,))
                      ))
                  ))
              ))
          )),
        (:line, 635, :none),
        (:call, :push!, :map_del_wrkr, :pid),
        (:line, 638, :none),
        (:(=), :ids, (:vect,)),
        (:line, 639, :none),
        (:(=), :tonotify, (:vect,)),
        (:line, 640, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 641, :none),
              (:for, (:(=), (:tuple, :id, :rv), (:., :pg, (:quote, #QuoteNode
                      :refs
                    ))), (:block,
                  (:line, 642, :none),
                  (:if, (:call, :in, :pid, (:., :rv, (:quote, #QuoteNode
                          :clientset
                        ))), (:block,
                      (:line, 643, :none),
                      (:call, :push!, :ids, :id)
                    )),
                  (:line, 645, :none),
                  (:if, (:call, :(==), (:., :rv, (:quote, #QuoteNode
                          :waitingfor
                        )), :pid), (:block,
                      (:line, 646, :none),
                      (:call, :push!, :tonotify, (:tuple, :id, :rv))
                    ))
                )),
              (:line, 649, :none),
              (:for, (:(=), :id, :ids), (:block,
                  (:line, 650, :none),
                  (:call, :del_client, :pg, :id, :pid)
                )),
              (:line, 654, :none),
              (:for, (:(=), (:tuple, :id, :rv), :tonotify), (:block,
                  (:line, 655, :none),
                  (:call, :notify_error, (:., :rv, (:quote, #QuoteNode
                        :c
                      )), (:call, :ProcessExitedException)),
                  (:line, 656, :none),
                  (:call, :delete!, (:., :pg, (:quote, #QuoteNode
                        :refs
                      )), :id)
                ))
            )), :client_refs)
      )),
    (:line, 663, :none),
    "    client_refs\n\nTracks whether a particular AbstractRemoteRef\n(identified by its RRID) exists on this worker.\n\nThe client_refs lock is also used to synchronize access to `.refs` and associated clientset state\n",
    (:line, 671, :none),
    (:const, (:(=), :client_refs, (:call, (:curly, :WeakKeyDict, :Any, :Void)))),
    (:line, 673, :none),
    (:abstract, :AbstractRemoteRef),
    (:line, 675, :none),
    (:type, true, (:<:, :Future, :AbstractRemoteRef), (:block,
        (:line, 676, :none),
        (:(::), :where, :Int),
        (:line, 677, :none),
        (:(::), :whence, :Int),
        (:line, 678, :none),
        (:(::), :id, :Int),
        (:line, 679, :none),
        (:(::), :v, (:curly, :Nullable, :Any)),
        (:line, 681, :none),
        (:(=), (:call, :Future, (:(::), :w, :Int), (:(::), :rrid, :RRID)), (:block,
            (:line, 681, :none),
            (:call, :Future, :w, :rrid, (:call, (:curly, :Nullable, :Any)))
          )),
        (:line, 682, :none),
        (:(=), (:call, :Future, (:(::), :w, :Int), (:(::), :rrid, :RRID), :v), (:block,
            (:line, 682, :none),
            (:block,
              (:(=), :r, (:call, :new, :w, (:., :rrid, (:quote, #QuoteNode
                      :whence
                    )), (:., :rrid, (:quote, #QuoteNode
                      :id
                    )), :v)),
              (:return, (:call, :test_existing_ref, :r))
            )
          ))
      )),
    (:line, 685, :none),
    (:type, true, (:<:, (:curly, :RemoteChannel, (:<:, :T, :AbstractChannel)), :AbstractRemoteRef), (:block,
        (:line, 686, :none),
        (:(::), :where, :Int),
        (:line, 687, :none),
        (:(::), :whence, :Int),
        (:line, 688, :none),
        (:(::), :id, :Int),
        (:line, 690, :none),
        (:(=), (:call, :RemoteChannel, (:(::), :w, :Int), (:(::), :rrid, :RRID)), (:block,
            (:line, 690, :none),
            (:block,
              (:(=), :r, (:call, :new, :w, (:., :rrid, (:quote, #QuoteNode
                      :whence
                    )), (:., :rrid, (:quote, #QuoteNode
                      :id
                    )))),
              (:return, (:call, :test_existing_ref, :r))
            )
          ))
      )),
    (:line, 693, :none),
    (:function, (:call, :test_existing_ref, (:(::), :r, :AbstractRemoteRef)), (:block,
        (:line, 694, :none),
        (:(=), :found, (:call, :getkey, :client_refs, :r, :nothing)),
        (:line, 695, :none),
        (:if, (:call, :(!==), :found, :nothing), (:block,
            (:line, 696, :none),
            (:macrocall, Symbol("@assert"), (:call, :>, (:., :r, (:quote, #QuoteNode
                    :where
                  )), 0)),
            (:line, 697, :none),
            (:if, (:&&, (:call, :isa, :r, :Future), (:&&, (:call, :isnull, (:., :found, (:quote, #QuoteNode
                        :v
                      ))), (:call, :!, (:call, :isnull, (:., :r, (:quote, #QuoteNode
                          :v
                        )))))), (:block,
                (:line, 699, :none),
                (:call, :send_del_client, :r),
                (:line, 700, :none),
                (:(=), (:., :found, (:quote, #QuoteNode
                      :v
                    )), (:., :r, (:quote, #QuoteNode
                      :v
                    )))
              )),
            (:line, 702, :none),
            (:return, (:(::), :found, (:call, :typeof, :r)))
          )),
        (:line, 705, :none),
        (:(=), (:ref, :client_refs, :r), :nothing),
        (:line, 706, :none),
        (:call, :finalizer, :r, :finalize_ref),
        (:line, 707, :none),
        (:return, :r)
      )),
    (:line, 710, :none),
    (:function, (:call, :finalize_ref, (:(::), :r, :AbstractRemoteRef)), (:block,
        (:line, 711, :none),
        (:if, (:call, :>, (:., :r, (:quote, #QuoteNode
                :where
              )), 0), (:block,
            (:line, 712, :none),
            (:&&, (:call, :islocked, :client_refs), (:return, (:call, :finalizer, :r, :finalize_ref))),
            (:line, 713, :none),
            (:call, :delete!, :client_refs, :r),
            (:line, 714, :none),
            (:if, (:call, :isa, :r, :RemoteChannel), (:block,
                (:line, 715, :none),
                (:call, :send_del_client, :r)
              ), (:block,
                (:line, 718, :none),
                (:&&, (:call, :isnull, (:., :r, (:quote, #QuoteNode
                        :v
                      ))), (:call, :send_del_client, :r)),
                (:line, 719, :none),
                (:(=), (:., :r, (:quote, #QuoteNode
                      :v
                    )), (:call, (:curly, :Nullable, :Any)))
              )),
            (:line, 721, :none),
            (:(=), (:., :r, (:quote, #QuoteNode
                  :where
                )), 0)
          )),
        (:line, 723, :none),
        :nothing
      )),
    (:line, 726, :none),
    (:(=), (:call, :Future, (:(::), :w, :LocalProcess)), (:block,
        (:line, 726, :none),
        (:call, :Future, (:., :w, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 727, :none),
    (:(=), (:call, :Future, (:(::), :w, :Worker)), (:block,
        (:line, 727, :none),
        (:call, :Future, (:., :w, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 729, :none),
    "    Future(pid::Integer=myid())\n\nCreate a `Future` on process `pid`.\nThe default `pid` is the current process.\n",
    (:line, 735, :none),
    (:(=), (:call, :Future, (:kw, (:(::), :pid, :Integer), (:call, :myid))), (:block,
        (:line, 735, :none),
        (:call, :Future, :pid, (:call, :RRID))
      )),
    (:line, 737, :none),
    "    RemoteChannel(pid::Integer=myid())\n\nMake a reference to a `Channel{Any}(1)` on process `pid`.\nThe default `pid` is the current process.\n",
    (:line, 743, :none),
    (:(=), (:call, :RemoteChannel, (:kw, (:(::), :pid, :Integer), (:call, :myid))), (:block,
        (:line, 743, :none),
        (:call, (:curly, :RemoteChannel, (:curly, :Channel, :Any)), :pid, (:call, :RRID))
      )),
    (:line, 745, :none),
    "    RemoteChannel(f::Function, pid::Integer=myid())\n\nCreate references to remote channels of a specific size and type. `f()` is a function that\nwhen executed on `pid` must return an implementation of an `AbstractChannel`.\n\nFor example, `RemoteChannel(()->Channel{Int}(10), pid)`, will return a reference to a\nchannel of type `Int` and size 10 on `pid`.\n\nThe default `pid` is the current process.\n",
    (:line, 756, :none),
    (:function, (:call, :RemoteChannel, (:(::), :f, :Function), (:kw, (:(::), :pid, :Integer), (:call, :myid))), (:block,
        (:line, 757, :none),
        (:call, :remotecall_fetch, (:->, (:tuple, :f, :rrid), (:block,
              (:line, 758, :none),
              (:(=), :rv, (:call, :lookup_ref, :rrid, :f)),
              (:line, 759, :none),
              (:call, (:curly, :RemoteChannel, (:call, :typeof, (:., :rv, (:quote, #QuoteNode
                        :c
                      )))), (:call, :myid), :rrid)
            )), :pid, :f, (:call, :RRID))
      )),
    (:line, 763, :none),
    (:(=), (:call, :hash, (:(::), :r, :AbstractRemoteRef), (:(::), :h, :UInt)), (:block,
        (:line, 763, :none),
        (:call, :hash, (:., :r, (:quote, #QuoteNode
              :whence
            )), (:call, :hash, (:., :r, (:quote, #QuoteNode
                :id
              )), :h))
      )),
    (:line, 764, :none),
    (:(=), (:call, :(==), (:(::), :r, :AbstractRemoteRef), (:(::), :s, :AbstractRemoteRef)), (:block,
        (:line, 764, :none),
        (:&&, (:call, :(==), (:., :r, (:quote, #QuoteNode
                :whence
              )), (:., :s, (:quote, #QuoteNode
                :whence
              ))), (:call, :(==), (:., :r, (:quote, #QuoteNode
                :id
              )), (:., :s, (:quote, #QuoteNode
                :id
              ))))
      )),
    (:line, 766, :none),
    "    Base.remoteref_id(r::AbstractRemoteRef) -> RRID\n\n`Future`s and `RemoteChannel`s are identified by fields:\n\n`where` - refers to the node where the underlying object/storage\nreferred to by the reference actually exists.\n\n`whence` - refers to the node the remote reference was created from.\n Note that this is different from the node where the underlying object\n referred to actually exists. For example calling `RemoteChannel(2)`\n from the master process would result in a `where` value of 2 and\n a `whence` value of 1.\n\n `id` is unique across all references created from the worker specified by `whence`.\n\n Taken together,  `whence` and `id` uniquely identify a reference across all workers.\n\n `Base.remoteref_id` is a low-level API which returns a `Base.RRID`\n object that wraps `whence` and `id` values of a remote reference.\n",
    (:line, 787, :none),
    (:(=), (:call, :remoteref_id, (:(::), :r, :AbstractRemoteRef)), (:block,
        (:line, 787, :none),
        (:call, :RRID, (:., :r, (:quote, #QuoteNode
              :whence
            )), (:., :r, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 789, :none),
    "    Base.channel_from_id(id) -> c\n\nA low-level API which returns the backing `AbstractChannel` for an `id` returned by\n[`remoteref_id`](:func:`Base.remoteref_id`).\nThe call is valid only on the node where the backing channel exists.\n",
    (:line, 796, :none),
    (:function, (:call, :channel_from_id, :id), (:block,
        (:line, 797, :none),
        (:(=), :rv, (:call, :lock, (:->, (:tuple,), (:block,
                (:line, 798, :none),
                (:return, (:call, :get, (:., :PGRP, (:quote, #QuoteNode
                        :refs
                      )), :id, false))
              )), :client_refs)),
        (:line, 800, :none),
        (:if, (:call, :(===), :rv, false), (:block,
            (:line, 801, :none),
            (:call, :throw, (:call, :ErrorException, "Local instance of remote reference not found"))
          )),
        (:line, 803, :none),
        (:return, (:., :rv, (:quote, #QuoteNode
              :c
            )))
      )),
    (:line, 806, :none),
    (:(=), (:call, :lookup_ref, (:(::), :rrid, :RRID), (:kw, :f, :def_rv_channel)), (:block,
        (:line, 806, :none),
        (:call, :lookup_ref, :PGRP, :rrid, :f)
      )),
    (:line, 807, :none),
    (:function, (:call, :lookup_ref, :pg, :rrid, :f), (:block,
        (:line, 808, :none),
        (:return, (:(::), (:call, :lock, (:->, (:tuple,), (:block,
                  (:line, 809, :none),
                  (:(=), :rv, (:call, :get, (:., :pg, (:quote, #QuoteNode
                          :refs
                        )), :rrid, false)),
                  (:line, 810, :none),
                  (:if, (:call, :(===), :rv, false), (:block,
                      (:line, 812, :none),
                      (:(=), :rv, (:call, :RemoteValue, (:call, :f))),
                      (:line, 813, :none),
                      (:(=), (:ref, (:., :pg, (:quote, #QuoteNode
                              :refs
                            )), :rrid), :rv),
                      (:line, 814, :none),
                      (:call, :push!, (:., :rv, (:quote, #QuoteNode
                            :clientset
                          )), (:., :rrid, (:quote, #QuoteNode
                            :whence
                          )))
                    )),
                  (:line, 816, :none),
                  (:return, :rv)
                )), :client_refs), :RemoteValue))
      )),
    (:line, 820, :none),
    "    isready(rr::Future)\n\nDetermine whether a `Future` has a value stored to it.\n\nIf the argument `Future` is owned by a different node, this call will block to wait for the answer.\nIt is recommended to wait for `rr` in a separate task instead\nor to use a local `Channel` as a proxy:\n\n    c = Channel(1)\n    @async put!(c, remotecall_fetch(long_computation, p))\n    isready(c)  # will not block\n",
    (:line, 833, :none),
    (:function, (:call, :isready, (:(::), :rr, :Future)), (:block,
        (:line, 834, :none),
        (:&&, (:call, :!, (:call, :isnull, (:., :rr, (:quote, #QuoteNode
                  :v
                )))), (:return, true)),
        (:line, 836, :none),
        (:(=), :rid, (:call, :remoteref_id, :rr)),
        (:line, 837, :none),
        (:return, (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                  :where
                )), (:call, :myid)), (:block,
              (:line, 838, :none),
              (:call, :isready, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
                    :c
                  )))
            ), (:block,
              (:line, 840, :none),
              (:call, :remotecall_fetch, (:->, :rid, (:block,
                    (:line, 840, :none),
                    (:call, :isready, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
                          :c
                        )))
                  )), (:., :rr, (:quote, #QuoteNode
                    :where
                  )), :rid)
            )))
      )),
    (:line, 844, :none),
    "    isready(rr::RemoteChannel, args...)\n\nDetermine whether a `RemoteChannel` has a value stored to it.\nNote that this function can cause race conditions, since by the\ntime you receive its result it may no longer be true. However,\nit can be safely used on a `Future` since they are assigned only once.\n",
    (:line, 852, :none),
    (:function, (:call, :isready, (:(::), :rr, :RemoteChannel), (:..., :args)), (:block,
        (:line, 853, :none),
        (:(=), :rid, (:call, :remoteref_id, :rr)),
        (:line, 854, :none),
        (:return, (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                  :where
                )), (:call, :myid)), (:block,
              (:line, 855, :none),
              (:call, :isready, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
                    :c
                  )), (:..., :args))
            ), (:block,
              (:line, 857, :none),
              (:call, :remotecall_fetch, (:->, :rid, (:block,
                    (:line, 857, :none),
                    (:call, :isready, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
                          :c
                        )), (:..., :args))
                  )), (:., :rr, (:quote, #QuoteNode
                    :where
                  )), :rid)
            )))
      )),
    (:line, 861, :none),
    (:(=), (:call, :del_client, (:(::), :rr, :AbstractRemoteRef)), (:block,
        (:line, 861, :none),
        (:call, :del_client, (:call, :remoteref_id, :rr), (:call, :myid))
      )),
    (:line, 863, :none),
    (:(=), (:call, :del_client, :id, :client), (:block,
        (:line, 863, :none),
        (:call, :del_client, :PGRP, :id, :client)
      )),
    (:line, 864, :none),
    (:function, (:call, :del_client, :pg, :id, :client), (:block,
        (:line, 865, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 866, :none),
              (:(=), :rv, (:call, :get, (:., :pg, (:quote, #QuoteNode
                      :refs
                    )), :id, false)),
              (:line, 867, :none),
              (:if, (:call, :(!==), :rv, false), (:block,
                  (:line, 868, :none),
                  (:call, :delete!, (:., :rv, (:quote, #QuoteNode
                        :clientset
                      )), :client),
                  (:line, 869, :none),
                  (:if, (:call, :isempty, (:., :rv, (:quote, #QuoteNode
                          :clientset
                        ))), (:block,
                      (:line, 870, :none),
                      (:call, :delete!, (:., :pg, (:quote, #QuoteNode
                            :refs
                          )), :id)
                    ))
                ))
            )), :client_refs),
        (:line, 875, :none),
        :nothing
      )),
    (:line, 878, :none),
    (:function, (:call, :del_clients, (:(::), :pairs, :Vector)), (:block,
        (:line, 879, :none),
        (:for, (:(=), :p, :pairs), (:block,
            (:line, 880, :none),
            (:call, :del_client, (:ref, :p, 1), (:ref, :p, 2))
          ))
      )),
    (:line, 884, :none),
    (:(=), :any_gc_flag, (:call, :Condition)),
    (:line, 885, :none),
    (:function, (:call, :start_gc_msgs_task), (:block,
        (:line, 886, :none),
        (:macrocall, Symbol("@schedule"), (:while, true, (:block,
              (:line, 887, :none),
              (:call, :wait, :any_gc_flag),
              (:line, 888, :none),
              (:call, :flush_gc_msgs)
            )))
      )),
    (:line, 892, :none),
    (:function, (:call, :send_del_client, :rr), (:block,
        (:line, 893, :none),
        (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                :where
              )), (:call, :myid)), (:block,
            (:line, 894, :none),
            (:call, :del_client, :rr)
          ), (:block,
            (:line, 895, :none),
            (:if, (:call, :in, (:., :rr, (:quote, #QuoteNode
                    :where
                  )), (:call, :procs)), (:block,
                (:line, 896, :none),
                (:(=), :w, (:call, :worker_from_id, (:., :rr, (:quote, #QuoteNode
                        :where
                      )))),
                (:line, 897, :none),
                (:call, :push!, (:., :w, (:quote, #QuoteNode
                      :del_msgs
                    )), (:tuple, (:call, :remoteref_id, :rr), (:call, :myid))),
                (:line, 898, :none),
                (:(=), (:., :w, (:quote, #QuoteNode
                      :gcflag
                    )), true),
                (:line, 899, :none),
                (:call, :notify, :any_gc_flag)
              ))
          ))
      )),
    (:line, 903, :none),
    (:function, (:call, :add_client, :id, :client), (:block,
        (:line, 904, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 905, :none),
              (:(=), :rv, (:call, :lookup_ref, :id)),
              (:line, 906, :none),
              (:call, :push!, (:., :rv, (:quote, #QuoteNode
                    :clientset
                  )), :client)
            )), :client_refs),
        (:line, 908, :none),
        :nothing
      )),
    (:line, 911, :none),
    (:function, (:call, :add_clients, (:(::), :pairs, :Vector)), (:block,
        (:line, 912, :none),
        (:for, (:(=), :p, :pairs), (:block,
            (:line, 913, :none),
            (:call, :add_client, (:ref, :p, 1), (:..., (:ref, :p, 2)))
          ))
      )),
    (:line, 917, :none),
    (:function, (:call, :send_add_client, (:(::), :rr, :AbstractRemoteRef), :i), (:block,
        (:line, 918, :none),
        (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                :where
              )), (:call, :myid)), (:block,
            (:line, 919, :none),
            (:call, :add_client, (:call, :remoteref_id, :rr), :i)
          ), (:block,
            (:line, 920, :none),
            (:if, (:&&, (:call, :(!=), :i, (:., :rr, (:quote, #QuoteNode
                      :where
                    ))), (:call, :in, (:., :rr, (:quote, #QuoteNode
                      :where
                    )), (:call, :procs))), (:block,
                (:line, 924, :none),
                (:(=), :w, (:call, :worker_from_id, (:., :rr, (:quote, #QuoteNode
                        :where
                      )))),
                (:line, 925, :none),
                (:call, :push!, (:., :w, (:quote, #QuoteNode
                      :add_msgs
                    )), (:tuple, (:call, :remoteref_id, :rr), :i)),
                (:line, 926, :none),
                (:(=), (:., :w, (:quote, #QuoteNode
                      :gcflag
                    )), true),
                (:line, 927, :none),
                (:call, :notify, :any_gc_flag)
              ))
          ))
      )),
    (:line, 931, :none),
    (:(=), (:call, (:curly, :channel_type, :T), (:(::), :rr, (:curly, :RemoteChannel, :T))), (:block,
        (:line, 931, :none),
        :T
      )),
    (:line, 933, :none),
    (:(=), (:call, :serialize, (:(::), :s, :AbstractSerializer), (:(::), :f, :Future)), (:block,
        (:line, 933, :none),
        (:call, :serialize, :s, :f, (:call, :isnull, (:., :f, (:quote, #QuoteNode
                :v
              ))))
      )),
    (:line, 934, :none),
    (:(=), (:call, :serialize, (:(::), :s, :AbstractSerializer), (:(::), :rr, :RemoteChannel)), (:block,
        (:line, 934, :none),
        (:call, :serialize, :s, :rr, true)
      )),
    (:line, 935, :none),
    (:function, (:call, :serialize, (:(::), :s, :AbstractSerializer), (:(::), :rr, :AbstractRemoteRef), :addclient), (:block,
        (:line, 936, :none),
        (:if, :addclient, (:block,
            (:line, 937, :none),
            (:(=), :p, (:call, :worker_id_from_socket, (:., :s, (:quote, #QuoteNode
                    :io
                  )))),
            (:line, 938, :none),
            (:&&, (:call, :(!==), :p, (:., :rr, (:quote, #QuoteNode
                    :where
                  ))), (:call, :send_add_client, :rr, :p))
          )),
        (:line, 940, :none),
        (:call, :invoke, :serialize, (:curly, :Tuple, :AbstractSerializer, :Any), :s, :rr)
      )),
    (:line, 943, :none),
    (:function, (:call, (:curly, :deserialize, (:<:, :T, :Future)), (:(::), :s, :AbstractSerializer), (:(::), :t, (:curly, :Type, :T))), (:block,
        (:line, 944, :none),
        (:(=), :f, (:call, :deserialize_rr, :s, :t)),
        (:line, 945, :none),
        (:call, :Future, (:., :f, (:quote, #QuoteNode
              :where
            )), (:call, :RRID, (:., :f, (:quote, #QuoteNode
                :whence
              )), (:., :f, (:quote, #QuoteNode
                :id
              ))), (:., :f, (:quote, #QuoteNode
              :v
            )))
      )),
    (:line, 948, :none),
    (:function, (:call, (:curly, :deserialize, (:<:, :T, :RemoteChannel)), (:(::), :s, :AbstractSerializer), (:(::), :t, (:curly, :Type, :T))), (:block,
        (:line, 949, :none),
        (:(=), :rr, (:call, :deserialize_rr, :s, :t)),
        (:line, 951, :none),
        (:call, (:curly, :RemoteChannel, (:call, :channel_type, :rr)), (:., :rr, (:quote, #QuoteNode
              :where
            )), (:call, :RRID, (:., :rr, (:quote, #QuoteNode
                :whence
              )), (:., :rr, (:quote, #QuoteNode
                :id
              ))))
      )),
    (:line, 954, :none),
    (:function, (:call, :deserialize_rr, :s, :t), (:block,
        (:line, 955, :none),
        (:(=), :rr, (:call, :invoke, :deserialize, (:curly, :Tuple, :AbstractSerializer, :DataType), :s, :t)),
        (:line, 956, :none),
        (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                :where
              )), (:call, :myid)), (:block,
            (:line, 959, :none),
            (:call, :add_client, (:call, :remoteref_id, :rr), (:call, :myid))
          )),
        (:line, 961, :none),
        :rr
      )),
    (:line, 965, :none),
    (:(=), (:call, :def_rv_channel), (:block,
        (:line, 965, :none),
        (:call, :Channel, 1)
      )),
    (:line, 966, :none),
    (:type, true, :RemoteValue, (:block,
        (:line, 967, :none),
        (:(::), :c, :AbstractChannel),
        (:line, 968, :none),
        (:(::), :clientset, :IntSet),
        (:line, 972, :none),
        (:(::), :waitingfor, :Int),
        (:line, 974, :none),
        (:(=), (:call, :RemoteValue, :c), (:block,
            (:line, 974, :none),
            (:call, :new, :c, (:call, :IntSet), 0)
          ))
      )),
    (:line, 977, :none),
    (:(=), (:call, :wait, (:(::), :rv, :RemoteValue)), (:block,
        (:line, 977, :none),
        (:call, :wait, (:., :rv, (:quote, #QuoteNode
              :c
            )))
      )),
    (:line, 980, :none),
    (:type, true, (:<:, :RemoteException, :Exception), (:block,
        (:line, 981, :none),
        (:(::), :pid, :Int),
        (:line, 982, :none),
        (:(::), :captured, :CapturedException)
      )),
    (:line, 985, :none),
    "    RemoteException(captured)\n\nExceptions  on remote computations are captured and rethrown locally.  A `RemoteException`\nwraps the pid of the worker and a captured exception. A `CapturedException` captures the\nremote exception and a serializable form of the call stack when the exception was raised.\n",
    (:line, 992, :none),
    (:(=), (:call, :RemoteException, :captured), (:block,
        (:line, 992, :none),
        (:call, :RemoteException, (:call, :myid), :captured)
      )),
    (:line, 993, :none),
    (:function, (:call, :showerror, (:(::), :io, :IO), (:(::), :re, :RemoteException)), (:block,
        (:line, 994, :none),
        (:&&, (:call, :(!=), (:., :re, (:quote, #QuoteNode
                :pid
              )), (:call, :myid)), (:call, :print, :io, "On worker ", (:., :re, (:quote, #QuoteNode
                :pid
              )), ":\n")),
        (:line, 995, :none),
        (:call, :showerror, :io, (:., :re, (:quote, #QuoteNode
              :captured
            )))
      )),
    (:line, 998, :none),
    (:function, (:call, :run_work_thunk, :thunk, :print_error), (:block,
        (:line, 999, :none),
        (:local, :result),
        (:line, 1000, :none),
        (:try, (:block,
            (:line, 1001, :none),
            (:(=), :result, (:call, :thunk))
          ), :err, (:block,
            (:line, 1003, :none),
            (:(=), :ce, (:call, :CapturedException, :err, (:call, :catch_backtrace))),
            (:line, 1004, :none),
            (:(=), :result, (:call, :RemoteException, :ce)),
            (:line, 1005, :none),
            (:&&, :print_error, (:call, :showerror, :STDERR, :ce))
          )),
        (:line, 1007, :none),
        (:return, :result)
      )),
    (:line, 1009, :none),
    (:function, (:call, :run_work_thunk, (:(::), :rv, :RemoteValue), :thunk), (:block,
        (:line, 1010, :none),
        (:call, :put!, :rv, (:call, :run_work_thunk, :thunk, false)),
        (:line, 1011, :none),
        :nothing
      )),
    (:line, 1014, :none),
    (:function, (:call, :schedule_call, :rid, :thunk), (:block,
        (:line, 1015, :none),
        (:return, (:call, :lock, (:->, (:tuple,), (:block,
                (:line, 1016, :none),
                (:(=), :rv, (:call, :RemoteValue, (:call, :def_rv_channel))),
                (:line, 1017, :none),
                (:(=), (:ref, (:., (:(::), :PGRP, :ProcessGroup), (:quote, #QuoteNode
                        :refs
                      )), :rid), :rv),
                (:line, 1018, :none),
                (:call, :push!, (:., :rv, (:quote, #QuoteNode
                      :clientset
                    )), (:., :rid, (:quote, #QuoteNode
                      :whence
                    ))),
                (:line, 1019, :none),
                (:macrocall, Symbol("@schedule"), (:call, :run_work_thunk, :rv, :thunk)),
                (:line, 1020, :none),
                (:return, :rv)
              )), :client_refs))
      )),
    (:line, 1026, :none),
    (:function, (:call, :local_remotecall_thunk, :f, :args, :kwargs), (:block,
        (:line, 1027, :none),
        (:if, (:&&, (:call, :isempty, :args), (:call, :isempty, :kwargs)), (:block,
            (:line, 1028, :none),
            (:return, :f)
          )),
        (:line, 1030, :none),
        (:return, (:->, (:tuple,), (:block,
              (:line, 1030, :none),
              (:call, :f, (:parameters, (:..., :kwargs)), (:..., :args))
            )))
      )),
    (:line, 1033, :none),
    (:function, (:call, :remotecall, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :LocalProcess), (:..., :args)), (:block,
        (:line, 1034, :none),
        (:(=), :rr, (:call, :Future, :w)),
        (:line, 1035, :none),
        (:call, :schedule_call, (:call, :remoteref_id, :rr), (:call, :local_remotecall_thunk, :f, :args, :kwargs)),
        (:line, 1036, :none),
        (:return, :rr)
      )),
    (:line, 1039, :none),
    (:function, (:call, :remotecall, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :Worker), (:..., :args)), (:block,
        (:line, 1040, :none),
        (:(=), :rr, (:call, :Future, :w)),
        (:line, 1041, :none),
        (:call, :send_msg, :w, (:call, :MsgHeader, (:call, :remoteref_id, :rr)), (:call, (:curly, :CallMsg, (:quote, #QuoteNode
                :call
              )), :f, :args, :kwargs)),
        (:line, 1042, :none),
        (:return, :rr)
      )),
    (:line, 1045, :none),
    "    remotecall(f, id::Integer, args...; kwargs...) -> Future\n\nCall a function `f` asynchronously on the given arguments on the specified process.\nReturns a `Future`.\nKeyword arguments, if any, are passed through to `f`.\n",
    (:line, 1052, :none),
    (:(=), (:call, :remotecall, (:parameters, (:..., :kwargs)), :f, (:(::), :id, :Integer), (:..., :args)), (:block,
        (:line, 1052, :none),
        (:call, :remotecall, (:parameters, (:..., :kwargs)), :f, (:call, :worker_from_id, :id), (:..., :args))
      )),
    (:line, 1054, :none),
    (:function, (:call, :remotecall_fetch, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :LocalProcess), (:..., :args)), (:block,
        (:line, 1055, :none),
        (:(=), :v, (:call, :run_work_thunk, (:call, :local_remotecall_thunk, :f, :args, :kwargs), false)),
        (:line, 1056, :none),
        (:return, (:if, (:call, :isa, :v, :RemoteException), (:call, :throw, :v), :v))
      )),
    (:line, 1059, :none),
    (:function, (:call, :remotecall_fetch, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :Worker), (:..., :args)), (:block,
        (:line, 1062, :none),
        (:(=), :oid, (:call, :RRID)),
        (:line, 1063, :none),
        (:(=), :rv, (:call, :lookup_ref, :oid)),
        (:line, 1064, :none),
        (:(=), (:., :rv, (:quote, #QuoteNode
              :waitingfor
            )), (:., :w, (:quote, #QuoteNode
              :id
            ))),
        (:line, 1065, :none),
        (:call, :send_msg, :w, (:call, :MsgHeader, (:call, :RRID, 0, 0), :oid), (:call, (:curly, :CallMsg, (:quote, #QuoteNode
                :call_fetch
              )), :f, :args, :kwargs)),
        (:line, 1066, :none),
        (:(=), :v, (:call, :take!, :rv)),
        (:line, 1067, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 1068, :none),
              (:call, :delete!, (:., :PGRP, (:quote, #QuoteNode
                    :refs
                  )), :oid)
            )), :client_refs),
        (:line, 1070, :none),
        (:return, (:if, (:call, :isa, :v, :RemoteException), (:call, :throw, :v), :v))
      )),
    (:line, 1073, :none),
    "    remotecall_fetch(f, id::Integer, args...; kwargs...)\n\nPerform `fetch(remotecall(...))` in one message.\nKeyword arguments, if any, are passed through to `f`.\nAny remote exceptions are captured in a `RemoteException` and thrown.\n",
    (:line, 1080, :none),
    (:(=), (:call, :remotecall_fetch, (:parameters, (:..., :kwargs)), :f, (:(::), :id, :Integer), (:..., :args)), (:block,
        (:line, 1080, :none),
        (:call, :remotecall_fetch, (:parameters, (:..., :kwargs)), :f, (:call, :worker_from_id, :id), (:..., :args))
      )),
    (:line, 1083, :none),
    (:(=), (:call, :remotecall_wait, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :LocalProcess), (:..., :args)), (:block,
        (:line, 1083, :none),
        (:call, :wait, (:call, :remotecall, (:parameters, (:..., :kwargs)), :f, :w, (:..., :args)))
      )),
    (:line, 1085, :none),
    (:function, (:call, :remotecall_wait, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :Worker), (:..., :args)), (:block,
        (:line, 1086, :none),
        (:(=), :prid, (:call, :RRID)),
        (:line, 1087, :none),
        (:(=), :rv, (:call, :lookup_ref, :prid)),
        (:line, 1088, :none),
        (:(=), (:., :rv, (:quote, #QuoteNode
              :waitingfor
            )), (:., :w, (:quote, #QuoteNode
              :id
            ))),
        (:line, 1089, :none),
        (:(=), :rr, (:call, :Future, :w)),
        (:line, 1090, :none),
        (:call, :send_msg, :w, (:call, :MsgHeader, (:call, :remoteref_id, :rr), :prid), (:call, :CallWaitMsg, :f, :args, :kwargs)),
        (:line, 1091, :none),
        (:(=), :v, (:call, :fetch, (:., :rv, (:quote, #QuoteNode
                :c
              )))),
        (:line, 1092, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 1093, :none),
              (:call, :delete!, (:., :PGRP, (:quote, #QuoteNode
                    :refs
                  )), :prid)
            )), :client_refs),
        (:line, 1095, :none),
        (:&&, (:call, :isa, :v, :RemoteException), (:call, :throw, :v)),
        (:line, 1096, :none),
        (:return, :rr)
      )),
    (:line, 1099, :none),
    "    remotecall_wait(f, id::Integer, args...; kwargs...)\n\nPerform a faster `wait(remotecall(...))` in one message on the `Worker` specified by worker id `id`.\nKeyword arguments, if any, are passed through to `f`.\n",
    (:line, 1105, :none),
    (:(=), (:call, :remotecall_wait, (:parameters, (:..., :kwargs)), :f, (:(::), :id, :Integer), (:..., :args)), (:block,
        (:line, 1105, :none),
        (:call, :remotecall_wait, (:parameters, (:..., :kwargs)), :f, (:call, :worker_from_id, :id), (:..., :args))
      )),
    (:line, 1108, :none),
    (:function, (:call, :remote_do, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :LocalProcess), (:..., :args)), (:block,
        (:line, 1112, :none),
        (:(=), :thk, (:call, :local_remotecall_thunk, :f, :args, :kwargs)),
        (:line, 1113, :none),
        (:call, :schedule, (:call, :Task, :thk)),
        (:line, 1114, :none),
        :nothing
      )),
    (:line, 1117, :none),
    (:function, (:call, :remote_do, (:parameters, (:..., :kwargs)), :f, (:(::), :w, :Worker), (:..., :args)), (:block,
        (:line, 1118, :none),
        (:call, :send_msg, :w, (:call, :MsgHeader), (:call, :RemoteDoMsg, :f, :args, :kwargs)),
        (:line, 1119, :none),
        :nothing
      )),
    (:line, 1122, :none),
    (:(=), (:call, :remote_do, (:parameters, (:..., :kwargs)), :f, (:(::), :id, :Integer), (:..., :args)), (:block,
        (:line, 1122, :none),
        (:call, :remote_do, (:parameters, (:..., :kwargs)), :f, (:call, :worker_from_id, :id), (:..., :args))
      )),
    (:line, 1125, :none),
    (:function, (:call, :call_on_owner, :f, (:(::), :rr, :AbstractRemoteRef), (:..., :args)), (:block,
        (:line, 1126, :none),
        (:(=), :rid, (:call, :remoteref_id, :rr)),
        (:line, 1127, :none),
        (:if, (:call, :(==), (:., :rr, (:quote, #QuoteNode
                :where
              )), (:call, :myid)), (:block,
            (:line, 1128, :none),
            (:call, :f, :rid, (:..., :args))
          ), (:block,
            (:line, 1130, :none),
            (:call, :remotecall_fetch, :f, (:., :rr, (:quote, #QuoteNode
                  :where
                )), :rid, (:..., :args))
          ))
      )),
    (:line, 1134, :none),
    (:function, (:call, :wait_ref, :rid, :callee, (:..., :args)), (:block,
        (:line, 1135, :none),
        (:(=), :v, (:call, :fetch_ref, :rid, (:..., :args))),
        (:line, 1136, :none),
        (:if, (:call, :isa, :v, :RemoteException), (:block,
            (:line, 1137, :none),
            (:if, (:call, :(==), (:call, :myid), :callee), (:block,
                (:line, 1138, :none),
                (:call, :throw, :v)
              ), (:block,
                (:line, 1140, :none),
                (:return, :v)
              ))
          )),
        (:line, 1143, :none),
        :nothing
      )),
    (:line, 1145, :none),
    (:(=), (:call, :wait, (:(::), :r, :Future)), (:block,
        (:line, 1145, :none),
        (:block,
          (:&&, (:call, :!, (:call, :isnull, (:., :r, (:quote, #QuoteNode
                    :v
                  )))), (:return, :r)),
          (:call, :call_on_owner, :wait_ref, :r, (:call, :myid)),
          :r
        )
      )),
    (:line, 1146, :none),
    (:(=), (:call, :wait, (:(::), :r, :RemoteChannel), (:..., :args)), (:block,
        (:line, 1146, :none),
        (:block,
          (:call, :call_on_owner, :wait_ref, :r, (:call, :myid), (:..., :args)),
          :r
        )
      )),
    (:line, 1148, :none),
    (:function, (:call, :fetch_future, :rid, :callee), (:block,
        (:line, 1149, :none),
        (:(=), :rv, (:call, :lookup_ref, :rid)),
        (:line, 1150, :none),
        (:(=), :v, (:call, :fetch, (:., :rv, (:quote, #QuoteNode
                :c
              )))),
        (:line, 1151, :none),
        (:call, :del_client, :rid, :callee),
        (:line, 1152, :none),
        :v
      )),
    (:line, 1154, :none),
    (:function, (:call, :fetch, (:(::), :r, :Future)), (:block,
        (:line, 1155, :none),
        (:&&, (:call, :!, (:call, :isnull, (:., :r, (:quote, #QuoteNode
                  :v
                )))), (:return, (:call, :get, (:., :r, (:quote, #QuoteNode
                  :v
                ))))),
        (:line, 1156, :none),
        (:(=), :v, (:call, :call_on_owner, :fetch_future, :r, (:call, :myid))),
        (:line, 1157, :none),
        (:(=), (:., :r, (:quote, #QuoteNode
              :v
            )), :v),
        (:line, 1158, :none),
        :v
      )),
    (:line, 1161, :none),
    (:(=), (:call, :fetch_ref, :rid, (:..., :args)), (:block,
        (:line, 1161, :none),
        (:call, :fetch, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
              :c
            )), (:..., :args))
      )),
    (:line, 1162, :none),
    (:(=), (:call, :fetch, (:(::), :r, :RemoteChannel), (:..., :args)), (:block,
        (:line, 1162, :none),
        (:call, :call_on_owner, :fetch_ref, :r, (:..., :args))
      )),
    (:line, 1164, :none),
    "    fetch(x)\n\nWaits and fetches a value from `x` depending on the type of `x`. Does not remove the item fetched:\n\n* `Future`: Wait for and get the value of a Future. The fetched value is cached locally.\n  Further calls to `fetch` on the same reference return the cached value. If the remote value\n  is an exception, throws a `RemoteException` which captures the remote exception and backtrace.\n* `RemoteChannel`: Wait for and get the value of a remote reference. Exceptions raised are\n  same as for a `Future` .\n* `Channel` : Wait for and get the first available item from the channel.\n",
    (:line, 1176, :none),
    (:(=), (:call, :fetch, (:(::), :x, :ANY)), (:block,
        (:line, 1176, :none),
        :x
      )),
    (:line, 1178, :none),
    (:(=), (:call, :isready, (:(::), :rv, :RemoteValue), (:..., :args)), (:block,
        (:line, 1178, :none),
        (:call, :isready, (:., :rv, (:quote, #QuoteNode
              :c
            )), (:..., :args))
      )),
    (:line, 1180, :none),
    "    put!(rr::Future, v)\n\nStore a value to a `Future` `rr`. `Future`s are write-once remote references.\nA `put!` on an already set `Future` throws an `Exception`.\nAll asynchronous remote calls return `Future`s and set the\nvalue to the return value of the call upon completion.\n",
    (:line, 1188, :none),
    (:function, (:call, :put!, (:(::), :rr, :Future), :v), (:block,
        (:line, 1189, :none),
        (:&&, (:call, :!, (:call, :isnull, (:., :rr, (:quote, #QuoteNode
                  :v
                )))), (:call, :error, "Future can be set only once")),
        (:line, 1190, :none),
        (:call, :call_on_owner, :put_future, :rr, :v, (:call, :myid)),
        (:line, 1191, :none),
        (:(=), (:., :rr, (:quote, #QuoteNode
              :v
            )), :v),
        (:line, 1192, :none),
        :rr
      )),
    (:line, 1194, :none),
    (:function, (:call, :put_future, :rid, :v, :callee), (:block,
        (:line, 1195, :none),
        (:(=), :rv, (:call, :lookup_ref, :rid)),
        (:line, 1196, :none),
        (:&&, (:call, :isready, :rv), (:call, :error, "Future can be set only once")),
        (:line, 1197, :none),
        (:call, :put!, :rv, :v),
        (:line, 1199, :none),
        (:call, :del_client, :rid, :callee),
        (:line, 1200, :none),
        :nothing
      )),
    (:line, 1204, :none),
    (:(=), (:call, :put!, (:(::), :rv, :RemoteValue), (:..., :args)), (:block,
        (:line, 1204, :none),
        (:call, :put!, (:., :rv, (:quote, #QuoteNode
              :c
            )), (:..., :args))
      )),
    (:line, 1205, :none),
    (:(=), (:call, :put_ref, :rid, (:..., :args)), (:block,
        (:line, 1205, :none),
        (:block,
          (:call, :put!, (:call, :lookup_ref, :rid), (:..., :args)),
          :nothing
        )
      )),
    (:line, 1207, :none),
    "    put!(rr::RemoteChannel, args...)\n\nStore a set of values to the `RemoteChannel`.\nIf the channel is full, blocks until space is available.\nReturns its first argument.\n",
    (:line, 1214, :none),
    (:(=), (:call, :put!, (:(::), :rr, :RemoteChannel), (:..., :args)), (:block,
        (:line, 1214, :none),
        (:block,
          (:call, :call_on_owner, :put_ref, :rr, (:..., :args)),
          :rr
        )
      )),
    (:line, 1218, :none),
    (:(=), (:call, :take!, (:(::), :rv, :RemoteValue), (:..., :args)), (:block,
        (:line, 1218, :none),
        (:call, :take!, (:., :rv, (:quote, #QuoteNode
              :c
            )), (:..., :args))
      )),
    (:line, 1219, :none),
    (:function, (:call, :take_ref, :rid, :callee, (:..., :args)), (:block,
        (:line, 1220, :none),
        (:(=), :v, (:call, :take!, (:call, :lookup_ref, :rid), (:..., :args))),
        (:line, 1221, :none),
        (:&&, (:call, :isa, :v, :RemoteException), (:&&, (:call, :(==), (:call, :myid), :callee), (:call, :throw, :v))),
        (:line, 1222, :none),
        :v
      )),
    (:line, 1225, :none),
    "    take!(rr::RemoteChannel, args...)\n\nFetch value(s) from a remote channel, removing the value(s) in the processs.\n",
    (:line, 1230, :none),
    (:(=), (:call, :take!, (:(::), :rr, :RemoteChannel), (:..., :args)), (:block,
        (:line, 1230, :none),
        (:call, :call_on_owner, :take_ref, :rr, (:call, :myid), (:..., :args))
      )),
    (:line, 1234, :none),
    (:(=), (:call, :close_ref, :rid), (:block,
        (:line, 1234, :none),
        (:block,
          (:call, :close, (:., (:call, :lookup_ref, :rid), (:quote, #QuoteNode
                :c
              ))),
          :nothing
        )
      )),
    (:line, 1235, :none),
    (:(=), (:call, :close, (:(::), :rr, :RemoteChannel)), (:block,
        (:line, 1235, :none),
        (:call, :call_on_owner, :close_ref, :rr)
      )),
    (:line, 1238, :none),
    (:function, (:call, :deliver_result, (:(::), :sock, :IO), :msg, :oid, :value), (:block,
        (:line, 1240, :none),
        (:if, (:||, (:call, :is, :msg, (:quote, #QuoteNode
                :call_fetch
              )), (:call, :isa, :value, :RemoteException)), (:block,
            (:line, 1241, :none),
            (:(=), :val, :value)
          ), (:block,
            (:line, 1243, :none),
            (:(=), :val, (:quote, #QuoteNode
                :OK
              ))
          )),
        (:line, 1245, :none),
        (:try, (:block,
            (:line, 1246, :none),
            (:call, :send_msg_now, :sock, (:call, :MsgHeader, :oid), (:call, :ResultMsg, :val))
          ), :e, (:block,
            (:line, 1250, :none),
            (:call, :print, :STDERR, "fatal error on ", (:call, :myid), ": "),
            (:line, 1251, :none),
            (:call, :display_error, :e, (:call, :catch_backtrace)),
            (:line, 1252, :none),
            (:(=), :wid, (:call, :worker_id_from_socket, :sock)),
            (:line, 1253, :none),
            (:call, :close, :sock),
            (:line, 1254, :none),
            (:if, (:call, :(==), (:call, :myid), 1), (:block,
                (:line, 1255, :none),
                (:call, :rmprocs, :wid)
              ), (:block,
                (:line, 1256, :none),
                (:if, (:call, :(==), :wid, 1), (:block,
                    (:line, 1257, :none),
                    (:call, :exit, 1)
                  ), (:block,
                    (:line, 1259, :none),
                    (:call, :remote_do, :rmprocs, 1, :wid)
                  ))
              ))
          ))
      )),
    (:line, 1265, :none),
    (:function, (:call, :process_messages, (:(::), :r_stream, :TCPSocket), (:(::), :w_stream, :TCPSocket), (:kw, (:(::), :incoming, :Bool), true)), (:block,
        (:line, 1266, :none),
        (:macrocall, Symbol("@schedule"), (:call, :process_tcp_streams, :r_stream, :w_stream, :incoming))
      )),
    (:line, 1269, :none),
    (:function, (:call, :process_tcp_streams, (:(::), :r_stream, :TCPSocket), (:(::), :w_stream, :TCPSocket), (:(::), :incoming, :Bool)), (:block,
        (:line, 1270, :none),
        (:call, :disable_nagle, :r_stream),
        (:line, 1271, :none),
        (:call, :wait_connected, :r_stream),
        (:line, 1272, :none),
        (:if, (:call, :(!=), :r_stream, :w_stream), (:block,
            (:line, 1273, :none),
            (:call, :disable_nagle, :w_stream),
            (:line, 1274, :none),
            (:call, :wait_connected, :w_stream)
          )),
        (:line, 1276, :none),
        (:call, :message_handler_loop, :r_stream, :w_stream, :incoming)
      )),
    (:line, 1279, :none),
    "    Base.process_messages(r_stream::IO, w_stream::IO, incoming::Bool=true)\n\nCalled by cluster managers using custom transports. It should be called when the custom\ntransport implementation receives the first message from a remote worker. The custom\ntransport must manage a logical connection to the remote worker and provide two\n`IO` objects, one for incoming messages and the other for messages addressed to the\nremote worker.\nIf `incoming` is `true`, the remote peer initiated the connection.\nWhichever of the pair initiates the connection sends the cluster cookie and its\nJulia version number to perform the authentication handshake.\n",
    (:line, 1291, :none),
    (:function, (:call, :process_messages, (:(::), :r_stream, :IO), (:(::), :w_stream, :IO), (:kw, (:(::), :incoming, :Bool), true)), (:block,
        (:line, 1292, :none),
        (:macrocall, Symbol("@schedule"), (:call, :message_handler_loop, :r_stream, :w_stream, :incoming))
      )),
    (:line, 1295, :none),
    (:function, (:call, :message_handler_loop, (:(::), :r_stream, :IO), (:(::), :w_stream, :IO), (:(::), :incoming, :Bool)), (:block,
        (:line, 1296, :none),
        (:(=), :wpid, 0),
        (:line, 1297, :none),
        (:(=), :boundary, (:call, :similar, :MSG_BOUNDARY)),
        (:line, 1298, :none),
        (:try, (:block,
            (:line, 1299, :none),
            (:(=), :version, (:call, :process_hdr, :r_stream, :incoming)),
            (:line, 1300, :none),
            (:(=), :serializer, (:call, :ClusterSerializer, :r_stream)),
            (:line, 1303, :none),
            (:(=), :header, (:call, :deserialize_hdr_raw, :r_stream)),
            (:line, 1304, :none),
            (:(=), :msg, (:call, :deserialize_msg, :serializer)),
            (:line, 1305, :none),
            (:call, :handle_msg, :msg, :header, :r_stream, :w_stream, :version),
            (:line, 1306, :none),
            (:(=), :wpid, (:call, :worker_id_from_socket, :r_stream)),
            (:line, 1307, :none),
            (:macrocall, Symbol("@assert"), (:call, :>, :wpid, 0)),
            (:line, 1309, :none),
            (:call, :readbytes!, :r_stream, :boundary, (:call, :length, :MSG_BOUNDARY)),
            (:line, 1311, :none),
            (:while, true, (:block,
                (:line, 1312, :none),
                (:call, :reset_state, :serializer),
                (:line, 1313, :none),
                (:(=), :header, (:call, :deserialize_hdr_raw, :r_stream)),
                (:line, 1316, :none),
                (:try, (:block,
                    (:line, 1317, :none),
                    (:(=), :msg, (:call, :deserialize_msg, :serializer))
                  ), :e, (:block,
                    (:line, 1320, :none),
                    (:(=), :boundary_idx, 1),
                    (:line, 1321, :none),
                    (:while, true, (:block,
                        (:line, 1324, :none),
                        (:(=), :byte, (:call, :read, :r_stream, :UInt8)),
                        (:line, 1325, :none),
                        (:if, (:call, :(==), :byte, (:ref, :MSG_BOUNDARY, :boundary_idx)), (:block,
                            (:line, 1326, :none),
                            (:+=, :boundary_idx, 1),
                            (:line, 1327, :none),
                            (:if, (:call, :>, :boundary_idx, (:call, :length, :MSG_BOUNDARY)), (:block,
                                (:line, 1328, :none),
                                (:break,)
                              ))
                          ), (:block,
                            (:line, 1331, :none),
                            (:(=), :boundary_idx, 1)
                          ))
                      )),
                    (:line, 1334, :none),
                    (:(=), :remote_err, (:call, :RemoteException, (:call, :myid), (:call, :CapturedException, :e, (:call, :catch_backtrace)))),
                    (:line, 1336, :none),
                    (:if, (:call, :!, (:call, :null_id, (:., :header, (:quote, #QuoteNode
                              :response_oid
                            )))), (:block,
                        (:line, 1337, :none),
                        (:(=), :ref, (:call, :lookup_ref, (:., :header, (:quote, #QuoteNode
                                :response_oid
                              )))),
                        (:line, 1338, :none),
                        (:call, :put!, :ref, :remote_err)
                      )),
                    (:line, 1340, :none),
                    (:if, (:call, :!, (:call, :null_id, (:., :header, (:quote, #QuoteNode
                              :notify_oid
                            )))), (:block,
                        (:line, 1341, :none),
                        (:call, :deliver_result, :w_stream, (:quote, #QuoteNode
                            :call_fetch
                          ), (:., :header, (:quote, #QuoteNode
                              :notify_oid
                            )), :remote_err)
                      )),
                    (:line, 1343, :none),
                    (:continue,)
                  )),
                (:line, 1345, :none),
                (:call, :readbytes!, :r_stream, :boundary, (:call, :length, :MSG_BOUNDARY)),
                (:line, 1348, :none),
                (:call, :handle_msg, :msg, :header, :r_stream, :w_stream, :version)
              ))
          ), :e, (:block,
            (:line, 1352, :none),
            (:(=), :wpid, (:call, :worker_id_from_socket, :r_stream)),
            (:line, 1353, :none),
            (:if, (:call, :<, :wpid, 1), (:block,
                (:line, 1354, :none),
                (:call, :println, :STDERR, :e, (:call, :CapturedException, :e, (:call, :catch_backtrace))),
                (:line, 1355, :none),
                (:call, :println, :STDERR, (:string, "Process(", (:call, :myid), ") - Unknown remote, closing connection."))
              ), (:block,
                (:line, 1357, :none),
                (:(=), :werr, (:call, :worker_from_id, :wpid)),
                (:line, 1358, :none),
                (:(=), :oldstate, (:., :werr, (:quote, #QuoteNode
                      :state
                    ))),
                (:line, 1359, :none),
                (:call, :set_worker_state, :werr, :W_TERMINATED),
                (:line, 1362, :none),
                (:if, (:call, :(==), :wpid, 1), (:block,
                    (:line, 1363, :none),
                    (:if, (:call, :isopen, :w_stream), (:block,
                        (:line, 1364, :none),
                        (:call, :print, :STDERR, "fatal error on ", (:call, :myid), ": "),
                        (:line, 1365, :none),
                        (:call, :display_error, :e, (:call, :catch_backtrace))
                      )),
                    (:line, 1367, :none),
                    (:call, :exit, 1)
                  )),
                (:line, 1373, :none),
                (:call, :deregister_worker, :wpid)
              )),
            (:line, 1376, :none),
            (:&&, (:call, :isopen, :r_stream), (:call, :close, :r_stream)),
            (:line, 1377, :none),
            (:&&, (:call, :isopen, :w_stream), (:call, :close, :w_stream)),
            (:line, 1379, :none),
            (:if, (:&&, (:call, :(==), (:call, :myid), 1), (:call, :>, :wpid, 1)), (:block,
                (:line, 1380, :none),
                (:if, (:call, :(!=), :oldstate, :W_TERMINATING), (:block,
                    (:line, 1381, :none),
                    (:call, :println, :STDERR, (:string, "Worker ", :wpid, " terminated.")),
                    (:line, 1382, :none),
                    (:call, :rethrow, :e)
                  ))
              )),
            (:line, 1386, :none),
            (:return, :nothing)
          ))
      )),
    (:line, 1390, :none),
    (:function, (:call, :process_hdr, :s, :validate_cookie), (:block,
        (:line, 1391, :none),
        (:if, :validate_cookie, (:block,
            (:line, 1392, :none),
            (:(=), :cookie, (:call, :read, :s, :HDR_COOKIE_LEN)),
            (:line, 1393, :none),
            (:if, (:call, :<, (:call, :length, :cookie), :HDR_COOKIE_LEN), (:block,
                (:line, 1394, :none),
                (:call, :error, "Cookie read failed. Connection closed by peer.")
              )),
            (:line, 1397, :none),
            (:(=), :self_cookie, (:call, :cluster_cookie)),
            (:line, 1398, :none),
            (:for, (:(=), :i, (:(:), 1, :HDR_COOKIE_LEN)), (:block,
                (:line, 1399, :none),
                (:if, (:call, :(!=), (:call, :UInt8, (:ref, :self_cookie, :i)), (:ref, :cookie, :i)), (:block,
                    (:line, 1400, :none),
                    (:call, :error, (:string, "Process(", (:call, :myid), ") - Invalid connection credentials sent by remote."))
                  ))
              ))
          )),
        (:line, 1408, :none),
        (:(=), :version, (:call, :read, :s, :HDR_VERSION_LEN)),
        (:line, 1409, :none),
        (:if, (:call, :<, (:call, :length, :version), :HDR_VERSION_LEN), (:block,
            (:line, 1410, :none),
            (:call, :error, "Version read failed. Connection closed by peer.")
          )),
        (:line, 1413, :none),
        (:return, (:call, :VersionNumber, (:call, :strip, (:call, :String, :version))))
      )),
    (:line, 1416, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, (:curly, :CallMsg, (:quote, #QuoteNode
              :call
            ))), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1417, :none),
        (:call, :schedule_call, (:., :header, (:quote, #QuoteNode
              :response_oid
            )), (:->, (:tuple,), (:block,
              (:line, 1417, :none),
              (:call, (:., :msg, (:quote, #QuoteNode
                    :f
                  )), (:parameters, (:..., (:., :msg, (:quote, #QuoteNode
                        :kwargs
                      )))), (:..., (:., :msg, (:quote, #QuoteNode
                      :args
                    ))))
            )))
      )),
    (:line, 1419, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, (:curly, :CallMsg, (:quote, #QuoteNode
              :call_fetch
            ))), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1420, :none),
        (:macrocall, Symbol("@schedule"), (:block,
            (:line, 1421, :none),
            (:(=), :v, (:call, :run_work_thunk, (:->, (:tuple,), (:block,
                    (:line, 1421, :none),
                    (:call, (:., :msg, (:quote, #QuoteNode
                          :f
                        )), (:parameters, (:..., (:., :msg, (:quote, #QuoteNode
                              :kwargs
                            )))), (:..., (:., :msg, (:quote, #QuoteNode
                            :args
                          ))))
                  )), false)),
            (:line, 1422, :none),
            (:call, :deliver_result, :w_stream, (:quote, #QuoteNode
                :call_fetch
              ), (:., :header, (:quote, #QuoteNode
                  :notify_oid
                )), :v)
          ))
      )),
    (:line, 1426, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :CallWaitMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1427, :none),
        (:macrocall, Symbol("@schedule"), (:block,
            (:line, 1428, :none),
            (:(=), :rv, (:call, :schedule_call, (:., :header, (:quote, #QuoteNode
                    :response_oid
                  )), (:->, (:tuple,), (:block,
                    (:line, 1428, :none),
                    (:call, (:., :msg, (:quote, #QuoteNode
                          :f
                        )), (:parameters, (:..., (:., :msg, (:quote, #QuoteNode
                              :kwargs
                            )))), (:..., (:., :msg, (:quote, #QuoteNode
                            :args
                          ))))
                  )))),
            (:line, 1429, :none),
            (:call, :deliver_result, :w_stream, (:quote, #QuoteNode
                :call_wait
              ), (:., :header, (:quote, #QuoteNode
                  :notify_oid
                )), (:call, :fetch, (:., :rv, (:quote, #QuoteNode
                    :c
                  ))))
          ))
      )),
    (:line, 1433, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :RemoteDoMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1434, :none),
        (:macrocall, Symbol("@schedule"), (:call, :run_work_thunk, (:->, (:tuple,), (:block,
                (:line, 1434, :none),
                (:call, (:., :msg, (:quote, #QuoteNode
                      :f
                    )), (:parameters, (:..., (:., :msg, (:quote, #QuoteNode
                          :kwargs
                        )))), (:..., (:., :msg, (:quote, #QuoteNode
                        :args
                      ))))
              )), true))
      )),
    (:line, 1437, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :ResultMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1438, :none),
        (:call, :put!, (:call, :lookup_ref, (:., :header, (:quote, #QuoteNode
                :response_oid
              ))), (:., :msg, (:quote, #QuoteNode
              :value
            )))
      )),
    (:line, 1441, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :IdentifySocketMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1443, :none),
        (:(=), :w, (:call, :Worker, (:parameters, (:kw, :version, :version)), (:., :msg, (:quote, #QuoteNode
                :from_pid
              )), :r_stream, :w_stream, :cluster_manager)),
        (:line, 1444, :none),
        (:call, :send_connection_hdr, :w, false),
        (:line, 1445, :none),
        (:call, :send_msg_now, :w, (:call, :MsgHeader), (:call, :IdentifySocketAckMsg))
      )),
    (:line, 1448, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :IdentifySocketAckMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1449, :none),
        (:(=), :w, (:ref, :map_sock_wrkr, :r_stream)),
        (:line, 1450, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :version
            )), :version)
      )),
    (:line, 1453, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :JoinPGRPMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1454, :none),
        (:(=), (:., :LPROC, (:quote, #QuoteNode
              :id
            )), (:., :msg, (:quote, #QuoteNode
              :self_pid
            ))),
        (:line, 1455, :none),
        (:(=), :controller, (:call, :Worker, (:parameters, (:kw, :version, :version)), 1, :r_stream, :w_stream, :cluster_manager)),
        (:line, 1456, :none),
        (:call, :register_worker, :LPROC),
        (:line, 1457, :none),
        (:call, :topology, (:., :msg, (:quote, #QuoteNode
              :topology
            ))),
        (:line, 1459, :none),
        (:(=), :wait_tasks, (:ref, :Task)),
        (:line, 1460, :none),
        (:for, (:(=), (:tuple, :connect_at, :rpid), (:., :msg, (:quote, #QuoteNode
                :other_workers
              ))), (:block,
            (:line, 1461, :none),
            (:(=), :wconfig, (:call, :WorkerConfig)),
            (:line, 1462, :none),
            (:(=), (:., :wconfig, (:quote, #QuoteNode
                  :connect_at
                )), :connect_at),
            (:line, 1464, :none),
            (:let, (:block,
                (:line, 1465, :none),
                (:(=), :t, (:macrocall, Symbol("@async"), (:call, :connect_to_peer, :cluster_manager, :rpid, :wconfig))),
                (:line, 1466, :none),
                (:call, :push!, :wait_tasks, :t)
              ), (:(=), :rpid, :rpid), (:(=), :wconfig, :wconfig))
          )),
        (:line, 1470, :none),
        (:for, (:(=), :wt, :wait_tasks), (:block,
            (:line, 1470, :none),
            (:call, :wait, :wt)
          )),
        (:line, 1472, :none),
        (:call, :set_default_worker_pool, (:., :msg, (:quote, #QuoteNode
              :worker_pool
            ))),
        (:line, 1473, :none),
        (:call, :send_connection_hdr, :controller, false),
        (:line, 1474, :none),
        (:call, :send_msg_now, :controller, (:call, :MsgHeader, (:call, :RRID, 0, 0), (:., :header, (:quote, #QuoteNode
                :notify_oid
              ))), (:call, :JoinCompleteMsg, (:., :Sys, (:quote, #QuoteNode
                :CPU_CORES
              )), (:call, :getpid)))
      )),
    (:line, 1477, :none),
    (:function, (:call, :connect_to_peer, (:(::), :manager, :ClusterManager), (:(::), :rpid, :Int), (:(::), :wconfig, :WorkerConfig)), (:block,
        (:line, 1478, :none),
        (:try, (:block,
            (:line, 1479, :none),
            (:(=), (:tuple, :r_s, :w_s), (:call, :connect, :manager, :rpid, :wconfig)),
            (:line, 1480, :none),
            (:(=), :w, (:call, :Worker, (:parameters, (:kw, :config, :wconfig)), :rpid, :r_s, :w_s, :manager)),
            (:line, 1481, :none),
            (:call, :process_messages, (:., :w, (:quote, #QuoteNode
                  :r_stream
                )), (:., :w, (:quote, #QuoteNode
                  :w_stream
                )), false),
            (:line, 1482, :none),
            (:call, :send_connection_hdr, :w, true),
            (:line, 1483, :none),
            (:call, :send_msg_now, :w, (:call, :MsgHeader), (:call, :IdentifySocketMsg, (:call, :myid)))
          ), :e, (:block,
            (:line, 1485, :none),
            (:call, :display_error, :e, (:call, :catch_backtrace)),
            (:line, 1486, :none),
            (:call, :println, :STDERR, (:string, "Error [", :e, "] on ", (:call, :myid), " while connecting to peer ", :rpid, ". Exiting.")),
            (:line, 1487, :none),
            (:call, :exit, 1)
          ))
      )),
    (:line, 1491, :none),
    (:function, (:call, :handle_msg, (:(::), :msg, :JoinCompleteMsg), :header, :r_stream, :w_stream, :version), (:block,
        (:line, 1492, :none),
        (:(=), :w, (:ref, :map_sock_wrkr, :r_stream)),
        (:line, 1493, :none),
        (:(=), :environ, (:call, :get, (:., (:., :w, (:quote, #QuoteNode
                  :config
                )), (:quote, #QuoteNode
                :environ
              )), (:call, :Dict))),
        (:line, 1494, :none),
        (:(=), (:ref, :environ, (:quote, #QuoteNode
              :cpu_cores
            )), (:., :msg, (:quote, #QuoteNode
              :cpu_cores
            ))),
        (:line, 1495, :none),
        (:(=), (:., (:., :w, (:quote, #QuoteNode
                :config
              )), (:quote, #QuoteNode
              :environ
            )), :environ),
        (:line, 1496, :none),
        (:(=), (:., (:., :w, (:quote, #QuoteNode
                :config
              )), (:quote, #QuoteNode
              :ospid
            )), (:., :msg, (:quote, #QuoteNode
              :ospid
            ))),
        (:line, 1497, :none),
        (:(=), (:., :w, (:quote, #QuoteNode
              :version
            )), :version),
        (:line, 1499, :none),
        (:(=), :ntfy_channel, (:call, :lookup_ref, (:., :header, (:quote, #QuoteNode
                :notify_oid
              )))),
        (:line, 1500, :none),
        (:call, :put!, :ntfy_channel, (:., :w, (:quote, #QuoteNode
              :id
            ))),
        (:line, 1502, :none),
        (:call, :push!, (:call, :default_worker_pool), :w)
      )),
    (:line, 1505, :none),
    (:function, (:call, :disable_threaded_libs), (:block,
        (:line, 1506, :none),
        (:call, (:., :BLAS, (:quote, #QuoteNode
              :set_num_threads
            )), 1)
      )),
    (:line, 1509, :none),
    (:(=), (:call, :worker_timeout), (:block,
        (:line, 1509, :none),
        (:call, :parse, :Float64, (:call, :get, :ENV, "JULIA_WORKER_TIMEOUT", "60.0"))
      )),
    (:line, 1517, :none),
    (:(=), (:call, :start_worker, (:(::), :cookie, :AbstractString)), (:block,
        (:line, 1517, :none),
        (:call, :start_worker, :STDOUT, :cookie)
      )),
    (:line, 1518, :none),
    (:function, (:call, :start_worker, (:(::), :out, :IO), (:(::), :cookie, :AbstractString)), (:block,
        (:line, 1527, :none),
        (:call, :init_worker, :cookie),
        (:line, 1528, :none),
        (:(=), :interface, (:call, :IPv4, (:., :LPROC, (:quote, #QuoteNode
                :bind_addr
              )))),
        (:line, 1529, :none),
        (:if, (:call, :(==), (:., :LPROC, (:quote, #QuoteNode
                :bind_port
              )), 0), (:block,
            (:line, 1530, :none),
            (:(=), (:tuple, :actual_port, :sock), (:call, :listenany, :interface, (:call, :UInt16, 9009))),
            (:line, 1531, :none),
            (:(=), (:., :LPROC, (:quote, #QuoteNode
                  :bind_port
                )), :actual_port)
          ), (:block,
            (:line, 1533, :none),
            (:(=), :sock, (:call, :listen, :interface, (:., :LPROC, (:quote, #QuoteNode
                    :bind_port
                  ))))
          )),
        (:line, 1535, :none),
        (:macrocall, Symbol("@schedule"), (:while, (:call, :isopen, :sock), (:block,
              (:line, 1536, :none),
              (:(=), :client, (:call, :accept, :sock)),
              (:line, 1537, :none),
              (:call, :process_messages, :client, :client, true)
            ))),
        (:line, 1539, :none),
        (:call, :print, :out, "julia_worker:"),
        (:line, 1540, :none),
        (:call, :print, :out, (:string, (:call, :dec, (:., :LPROC, (:quote, #QuoteNode
                  :bind_port
                ))), "#")),
        (:line, 1541, :none),
        (:call, :print, :out, (:., :LPROC, (:quote, #QuoteNode
              :bind_addr
            ))),
        (:line, 1542, :none),
        (:call, :print, :out, '\n'),
        (:line, 1543, :none),
        (:call, :flush, :out),
        (:line, 1547, :none),
        (:call, :disable_nagle, :sock),
        (:line, 1549, :none),
        (:if, (:call, :(!=), (:ccall, (:quote, #QuoteNode
                :jl_running_on_valgrind
              ), :Cint, (:tuple,)), 0), (:block,
            (:line, 1550, :none),
            (:call, :println, :out, (:string, "PID = ", (:call, :getpid)))
          )),
        (:line, 1553, :none),
        (:try, (:block,
            (:line, 1557, :none),
            (:call, :check_master_connect),
            (:line, 1558, :none),
            (:while, true, (:block,
                (:line, 1558, :none),
                (:call, :wait)
              ))
          ), :err, (:block,
            (:line, 1560, :none),
            (:call, :print, :STDERR, (:string, "unhandled exception on ", (:call, :myid), ": ", :err, "\nexiting.\n"))
          )),
        (:line, 1563, :none),
        (:call, :close, :sock),
        (:line, 1564, :none),
        (:call, :exit, 0)
      )),
    (:line, 1568, :none),
    (:function, (:call, :redirect_worker_output, :ident, :stream), (:block,
        (:line, 1569, :none),
        (:macrocall, Symbol("@schedule"), (:while, (:call, :!, (:call, :eof, :stream)), (:block,
              (:line, 1570, :none),
              (:(=), :line, (:call, :readline, :stream)),
              (:line, 1571, :none),
              (:if, (:call, :startswith, :line, "\tFrom worker "), (:block,
                  (:line, 1574, :none),
                  (:call, :print, :line)
                ), (:block,
                  (:line, 1576, :none),
                  (:call, :print, (:string, "\tFrom worker ", :ident, ":\t", :line))
                ))
            )))
      )),
    (:line, 1586, :none),
    (:function, (:call, :read_worker_host_port, (:(::), :io, :IO)), (:block,
        (:line, 1587, :none),
        (:while, true, (:block,
            (:line, 1588, :none),
            (:(=), :conninfo, (:call, :readline, :io)),
            (:line, 1589, :none),
            (:(=), (:tuple, :bind_addr, :port), (:call, :parse_connection_info, :conninfo)),
            (:line, 1590, :none),
            (:if, (:call, :(!=), :bind_addr, ""), (:block,
                (:line, 1591, :none),
                (:return, (:tuple, :bind_addr, :port))
              ))
          ))
      )),
    (:line, 1596, :none),
    (:function, (:call, :parse_connection_info, :str), (:block,
        (:line, 1597, :none),
        (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^julia_worker:(\\d+)#(.*)"), :str)),
        (:line, 1598, :none),
        (:if, (:call, :(!==), :m, :nothing), (:block,
            (:line, 1599, :none),
            (:tuple, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 2), (:call, :parse, :Int16, (:ref, (:., :m, (:quote, #QuoteNode
                      :captures
                    )), 1)))
          ), (:block,
            (:line, 1601, :none),
            (:tuple, "", (:call, :Int16, -1))
          ))
      )),
    (:line, 1605, :none),
    "    init_worker(cookie::AbstractString, manager::ClusterManager=DefaultClusterManager())\n\nCalled by cluster managers implementing custom transports. It initializes a newly launched\nprocess as a worker. Command line argument `--worker` has the effect of initializing a\nprocess as a worker using TCP/IP sockets for transport.\n`cookie` is a [`cluster_cookie`](:func:`cluster_cookie`).\n",
    (:line, 1613, :none),
    (:function, (:call, :init_worker, (:(::), :cookie, :AbstractString), (:kw, (:(::), :manager, :ClusterManager), (:call, :DefaultClusterManager))), (:block,
        (:line, 1616, :none),
        (:global, :cluster_manager),
        (:line, 1617, :none),
        (:(=), :cluster_manager, :manager),
        (:line, 1618, :none),
        (:call, :disable_threaded_libs),
        (:line, 1621, :none),
        (:call, :assert, (:call, :(<=), (:call, :nprocs), 1)),
        (:line, 1622, :none),
        (:call, :assert, (:call, :isempty, (:., :PGRP, (:quote, #QuoteNode
                :refs
              )))),
        (:line, 1623, :none),
        (:call, :assert, (:call, :isempty, :client_refs)),
        (:line, 1626, :none),
        (:call, :empty!, (:., :PGRP, (:quote, #QuoteNode
              :workers
            ))),
        (:line, 1627, :none),
        (:call, :empty!, :map_pid_wrkr),
        (:line, 1629, :none),
        (:call, :cluster_cookie, :cookie),
        (:line, 1630, :none),
        :nothing
      )),
    (:line, 1641, :none),
    (:const, (:(=), :worker_lock, (:call, :ReentrantLock))),
    (:line, 1643, :none),
    "    addprocs(manager::ClusterManager; kwargs...) -> List of process identifiers\n\nLaunches worker processes via the specified cluster manager.\n\nFor example Beowulf clusters are  supported via a custom cluster manager implemented in\nthe package `ClusterManagers.jl`.\n\nThe number of seconds a newly launched worker waits for connection establishment from the\nmaster can be specified via variable `JULIA_WORKER_TIMEOUT` in the worker process's\nenvironment. Relevant only when using TCP/IP as transport.\n",
    (:line, 1655, :none),
    (:function, (:call, :addprocs, (:parameters, (:..., :kwargs)), (:(::), :manager, :ClusterManager)), (:block,
        (:line, 1656, :none),
        (:call, :lock, :worker_lock),
        (:line, 1657, :none),
        (:try, (:block,
            (:line, 1658, :none),
            (:call, :addprocs_locked, (:parameters, (:..., :kwargs)), (:(::), :manager, :ClusterManager))
          ), false, false, (:block,
            (:line, 1660, :none),
            (:call, :unlock, :worker_lock)
          ))
      )),
    (:line, 1664, :none),
    (:function, (:call, :addprocs_locked, (:parameters, (:..., :kwargs)), (:(::), :manager, :ClusterManager)), (:block,
        (:line, 1665, :none),
        (:(=), :params, (:call, :merge, (:call, :default_addprocs_params), (:call, :AnyDict, :kwargs))),
        (:line, 1666, :none),
        (:call, :topology, (:call, :Symbol, (:ref, :params, (:quote, #QuoteNode
                :topology
              )))),
        (:line, 1671, :none),
        (:call, :disable_threaded_libs),
        (:line, 1675, :none),
        (:(=), :launched_q, (:ref, :Int)),
        (:line, 1680, :none),
        (:(=), :launched, (:ref, :WorkerConfig)),
        (:line, 1681, :none),
        (:(=), :launch_ntfy, (:call, :Condition)),
        (:line, 1686, :none),
        (:(=), :t_launch, (:macrocall, Symbol("@schedule"), (:call, :launch, :manager, :params, :launched, :launch_ntfy))),
        (:line, 1688, :none),
        (:macrocall, Symbol("@sync"), (:block,
            (:line, 1689, :none),
            (:while, true, (:block,
                (:line, 1690, :none),
                (:if, (:call, :isempty, :launched), (:block,
                    (:line, 1691, :none),
                    (:&&, (:call, :istaskdone, :t_launch), (:break,)),
                    (:line, 1692, :none),
                    (:macrocall, Symbol("@schedule"), (:block,
                        (:call, :sleep, 1),
                        (:call, :notify, :launch_ntfy)
                      )),
                    (:line, 1693, :none),
                    (:call, :wait, :launch_ntfy)
                  )),
                (:line, 1696, :none),
                (:if, (:call, :!, (:call, :isempty, :launched)), (:block,
                    (:line, 1697, :none),
                    (:(=), :wconfig, (:call, :shift!, :launched)),
                    (:line, 1698, :none),
                    (:let, (:block,
                        (:line, 1699, :none),
                        (:macrocall, Symbol("@async"), (:call, :setup_launched_worker, :manager, :wconfig, :launched_q))
                      ), (:(=), :wconfig, :wconfig))
                  ))
              ))
          )),
        (:line, 1705, :none),
        (:call, :wait, :t_launch),
        (:line, 1711, :none),
        (:(=), :all_w, (:call, :workers)),
        (:line, 1712, :none),
        (:for, (:(=), :pid, :all_w), (:block,
            (:line, 1713, :none),
            (:call, :remote_do, :set_valid_processes, :pid, :all_w)
          )),
        (:line, 1716, :none),
        (:call, :sort!, :launched_q)
      )),
    (:line, 1719, :none),
    (:function, (:call, :set_valid_processes, (:(::), :plist, (:curly, :Array, :Int))), (:block,
        (:line, 1720, :none),
        (:for, (:(=), :pid, (:call, :setdiff, :plist, (:call, :workers))), (:block,
            (:line, 1721, :none),
            (:&&, (:call, :(!=), (:call, :myid), :pid), (:call, :Worker, :pid))
          ))
      )),
    (:line, 1725, :none),
    (:(=), (:call, :default_addprocs_params), (:block,
        (:line, 1725, :none),
        (:call, :AnyDict, (:(=>), (:quote, #QuoteNode
              :topology
            ), (:quote, #QuoteNode
              :all_to_all
            )), (:(=>), (:quote, #QuoteNode
              :dir
            ), (:call, :pwd)), (:(=>), (:quote, #QuoteNode
              :exename
            ), (:call, :joinpath, :JULIA_HOME, (:call, :julia_exename))), (:(=>), (:quote, #QuoteNode
              :exeflags
            ), (:macrocall, Symbol("@cmd"), "")))
      )),
    (:line, 1732, :none),
    (:function, (:call, :setup_launched_worker, :manager, :wconfig, :launched_q), (:block,
        (:line, 1733, :none),
        (:(=), :pid, (:call, :create_worker, :manager, :wconfig)),
        (:line, 1734, :none),
        (:call, :push!, :launched_q, :pid),
        (:line, 1739, :none),
        (:(=), :cnt, (:call, :get, (:., :wconfig, (:quote, #QuoteNode
                :count
              )), 1)),
        (:line, 1740, :none),
        (:if, (:call, :(===), :cnt, (:quote, #QuoteNode
              :auto
            )), (:block,
            (:line, 1741, :none),
            (:(=), :cnt, (:ref, (:call, :get, (:., :wconfig, (:quote, #QuoteNode
                      :environ
                    ))), (:quote, #QuoteNode
                  :cpu_cores
                )))
          )),
        (:line, 1743, :none),
        (:(=), :cnt, (:call, :-, :cnt, 1)),
        (:line, 1745, :none),
        (:if, (:call, :>, :cnt, 0), (:block,
            (:line, 1746, :none),
            (:call, :launch_n_additional_processes, :manager, :pid, :wconfig, :cnt, :launched_q)
          ))
      )),
    (:line, 1751, :none),
    (:function, (:call, :launch_n_additional_processes, :manager, :frompid, :fromconfig, :cnt, :launched_q), (:block,
        (:line, 1752, :none),
        (:macrocall, Symbol("@sync"), (:block,
            (:line, 1753, :none),
            (:(=), :exename, (:call, :get, (:., :fromconfig, (:quote, #QuoteNode
                    :exename
                  )))),
            (:line, 1754, :none),
            (:(=), :exeflags, (:call, :get, (:., :fromconfig, (:quote, #QuoteNode
                    :exeflags
                  )), (:macrocall, Symbol("@cmd"), ""))),
            (:line, 1755, :none),
            (:(=), :cmd, (:macrocall, Symbol("@cmd"), "\$exename \$exeflags")),
            (:line, 1757, :none),
            (:(=), :new_addresses, (:call, :remotecall_fetch, :launch_additional, :frompid, :cnt, :cmd)),
            (:line, 1758, :none),
            (:for, (:(=), :address, :new_addresses), (:block,
                (:line, 1759, :none),
                (:(=), (:tuple, :bind_addr, :port), :address),
                (:line, 1761, :none),
                (:(=), :wconfig, (:call, :WorkerConfig)),
                (:line, 1762, :none),
                (:for, (:(=), :x, (:vect, (:quote, #QuoteNode
                        :host
                      ), (:quote, #QuoteNode
                        :tunnel
                      ), (:quote, #QuoteNode
                        :sshflags
                      ), (:quote, #QuoteNode
                        :exeflags
                      ), (:quote, #QuoteNode
                        :exename
                      ))), (:block,
                    (:line, 1763, :none),
                    (:call, :setfield!, :wconfig, :x, (:call, :getfield, :fromconfig, :x))
                  )),
                (:line, 1765, :none),
                (:(=), (:., :wconfig, (:quote, #QuoteNode
                      :bind_addr
                    )), :bind_addr),
                (:line, 1766, :none),
                (:(=), (:., :wconfig, (:quote, #QuoteNode
                      :port
                    )), :port),
                (:line, 1768, :none),
                (:let, (:block,
                    (:line, 1769, :none),
                    (:macrocall, Symbol("@async"), (:block,
                        (:line, 1770, :none),
                        (:(=), :pid, (:call, :create_worker, :manager, :wconfig)),
                        (:line, 1771, :none),
                        (:call, :remote_do, :redirect_output_from_additional_worker, :frompid, :pid, :port),
                        (:line, 1772, :none),
                        (:call, :push!, :launched_q, :pid)
                      ))
                  ), (:(=), :wconfig, :wconfig))
              ))
          ))
      )),
    (:line, 1779, :none),
    (:function, (:call, :create_worker, :manager, :wconfig), (:block,
        (:line, 1781, :none),
        (:call, :assert, (:call, :(==), (:., :LPROC, (:quote, #QuoteNode
                :id
              )), 1)),
        (:line, 1784, :none),
        (:(=), :w, (:call, :Worker)),
        (:line, 1786, :none),
        (:(=), (:tuple, :r_s, :w_s), (:call, :connect, :manager, (:., :w, (:quote, #QuoteNode
                :id
              )), :wconfig)),
        (:line, 1787, :none),
        (:(=), :w, (:call, :Worker, (:parameters, (:kw, :config, :wconfig)), (:., :w, (:quote, #QuoteNode
                :id
              )), :r_s, :w_s, :manager)),
        (:line, 1789, :none),
        (:call, :finalizer, :w, (:->, :w, (:block,
              (:line, 1789, :none),
              (:if, (:call, :(==), (:call, :myid), 1), (:block,
                  (:line, 1789, :none),
                  (:call, :manage, (:., :w, (:quote, #QuoteNode
                        :manager
                      )), (:., :w, (:quote, #QuoteNode
                        :id
                      )), (:., :w, (:quote, #QuoteNode
                        :config
                      )), (:quote, #QuoteNode
                      :finalize
                    ))
                ))
            ))),
        (:line, 1792, :none),
        (:(=), :ntfy_oid, (:call, :RRID)),
        (:line, 1793, :none),
        (:(=), :rr_ntfy_join, (:call, :lookup_ref, :ntfy_oid)),
        (:line, 1794, :none),
        (:(=), (:., :rr_ntfy_join, (:quote, #QuoteNode
              :waitingfor
            )), (:call, :myid)),
        (:line, 1798, :none),
        (:call, :process_messages, (:., :w, (:quote, #QuoteNode
              :r_stream
            )), (:., :w, (:quote, #QuoteNode
              :w_stream
            )), false),
        (:line, 1814, :none),
        (:(=), :join_list, (:vect,)),
        (:line, 1815, :none),
        (:if, (:call, :(==), (:., :PGRP, (:quote, #QuoteNode
                :topology
              )), (:quote, #QuoteNode
              :all_to_all
            )), (:block,
            (:line, 1819, :none),
            (:for, (:(=), :jw, (:., :PGRP, (:quote, #QuoteNode
                    :workers
                  ))), (:block,
                (:line, 1820, :none),
                (:if, (:&&, (:call, :(!=), (:., :jw, (:quote, #QuoteNode
                          :id
                        )), 1), (:call, :<, (:., :jw, (:quote, #QuoteNode
                          :id
                        )), (:., :w, (:quote, #QuoteNode
                          :id
                        )))), (:block,
                    (:line, 1821, :none),
                    (:&&, (:call, :(==), (:., :jw, (:quote, #QuoteNode
                            :state
                          )), :W_CREATED), (:call, :wait, (:., :jw, (:quote, #QuoteNode
                            :c_state
                          )))),
                    (:line, 1822, :none),
                    (:call, :push!, :join_list, :jw)
                  ))
              ))
          ), (:block,
            (:line, 1826, :none),
            (:if, (:call, :(==), (:., :PGRP, (:quote, #QuoteNode
                    :topology
                  )), (:quote, #QuoteNode
                  :custom
                )), (:block,
                (:line, 1828, :none),
                (:(=), (:call, :filterfunc, :x), (:block,
                    (:line, 1828, :none),
                    (:&&, (:call, :(!=), (:., :x, (:quote, #QuoteNode
                            :id
                          )), 1), (:&&, (:call, :isdefined, :x, (:quote, #QuoteNode
                            :config
                          )), (:call, :in, (:call, :get, (:., (:., :x, (:quote, #QuoteNode
                                  :config
                                )), (:quote, #QuoteNode
                                :ident
                              ))), (:call, :get, (:., :wconfig, (:quote, #QuoteNode
                                :connect_idents
                              )), (:vect,)))))
                  )),
                (:line, 1830, :none),
                (:(=), :wlist, (:call, :filter, :filterfunc, (:., :PGRP, (:quote, #QuoteNode
                        :workers
                      )))),
                (:line, 1831, :none),
                (:while, (:call, :<, (:call, :length, :wlist), (:call, :length, (:call, :get, (:., :wconfig, (:quote, #QuoteNode
                            :connect_idents
                          )), (:vect,)))), (:block,
                    (:line, 1832, :none),
                    (:call, :sleep, 1.0),
                    (:line, 1833, :none),
                    (:(=), :wlist, (:call, :filter, :filterfunc, (:., :PGRP, (:quote, #QuoteNode
                            :workers
                          ))))
                  )),
                (:line, 1836, :none),
                (:for, (:(=), :wl, :wlist), (:block,
                    (:line, 1837, :none),
                    (:&&, (:call, :(==), (:., :wl, (:quote, #QuoteNode
                            :state
                          )), :W_CREATED), (:call, :wait, (:., :wl, (:quote, #QuoteNode
                            :c_state
                          )))),
                    (:line, 1838, :none),
                    (:call, :push!, :join_list, :wl)
                  ))
              ))
          )),
        (:line, 1842, :none),
        (:(=), :all_locs, (:call, :map, (:->, :x, (:block,
                (:line, 1842, :none),
                (:if, (:call, :isa, :x, :Worker), (:tuple, (:call, :get, (:., (:., :x, (:quote, #QuoteNode
                            :config
                          )), (:quote, #QuoteNode
                          :connect_at
                        )), (:tuple,)), (:., :x, (:quote, #QuoteNode
                        :id
                      ))), (:tuple, (:tuple,), (:., :x, (:quote, #QuoteNode
                        :id
                      )), true))
              )), :join_list)),
        (:line, 1843, :none),
        (:call, :send_connection_hdr, :w, true),
        (:line, 1844, :none),
        (:call, :send_msg_now, :w, (:call, :MsgHeader, (:call, :RRID, 0, 0), :ntfy_oid), (:call, :JoinPGRPMsg, (:., :w, (:quote, #QuoteNode
                :id
              )), :all_locs, (:., :PGRP, (:quote, #QuoteNode
                :topology
              )), (:call, :default_worker_pool))),
        (:line, 1846, :none),
        (:macrocall, Symbol("@schedule"), (:call, :manage, (:., :w, (:quote, #QuoteNode
                :manager
              )), (:., :w, (:quote, #QuoteNode
                :id
              )), (:., :w, (:quote, #QuoteNode
                :config
              )), (:quote, #QuoteNode
              :register
            ))),
        (:line, 1847, :none),
        (:call, :wait, :rr_ntfy_join),
        (:line, 1848, :none),
        (:call, :lock, (:->, (:tuple,), (:block,
              (:line, 1849, :none),
              (:call, :delete!, (:., :PGRP, (:quote, #QuoteNode
                    :refs
                  )), :ntfy_oid)
            )), :client_refs),
        (:line, 1852, :none),
        (:return, (:., :w, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 1859, :none),
    (:(=), :additional_io_objs, (:call, :Dict)),
    (:line, 1860, :none),
    (:function, (:call, :launch_additional, (:(::), :np, :Integer), (:(::), :cmd, :Cmd)), (:block,
        (:line, 1861, :none),
        (:(=), :io_objs, (:call, (:curly, :Vector, :Any), :np)),
        (:line, 1862, :none),
        (:(=), :addresses, (:call, (:curly, :Vector, :Any), :np)),
        (:line, 1864, :none),
        (:for, (:(=), :i, (:(:), 1, :np)), (:block,
            (:line, 1865, :none),
            (:(=), (:tuple, :io, :pobj), (:call, :open, (:call, :pipeline, (:call, :detach, :cmd), (:kw, :stderr, :STDERR)), "r")),
            (:line, 1866, :none),
            (:(=), (:ref, :io_objs, :i), :io)
          )),
        (:line, 1869, :none),
        (:for, (:(=), (:tuple, :i, :io), (:call, :enumerate, :io_objs)), (:block,
            (:line, 1870, :none),
            (:(=), (:tuple, :host, :port), (:call, :read_worker_host_port, :io)),
            (:line, 1871, :none),
            (:(=), (:ref, :addresses, :i), (:tuple, :host, :port)),
            (:line, 1872, :none),
            (:(=), (:ref, :additional_io_objs, :port), :io)
          )),
        (:line, 1875, :none),
        (:return, :addresses)
      )),
    (:line, 1878, :none),
    (:function, (:call, :redirect_output_from_additional_worker, :pid, :port), (:block,
        (:line, 1879, :none),
        (:(=), :io, (:ref, :additional_io_objs, :port)),
        (:line, 1880, :none),
        (:call, :redirect_worker_output, (:string, :pid), :io),
        (:line, 1881, :none),
        (:call, :delete!, :additional_io_objs, :port),
        (:line, 1882, :none),
        :nothing
      )),
    (:line, 1887, :none),
    (:let, (:block,
        (:line, 1888, :none),
        (:global, :chooseproc),
        (:line, 1889, :none),
        (:function, (:call, :chooseproc, (:(::), :thunk, :Function)), (:block,
            (:line, 1890, :none),
            (:(=), :p, -1),
            (:line, 1891, :none),
            (:if, (:call, :(==), :p, -1), (:block,
                (:line, 1892, :none),
                (:(=), :p, (:ref, (:call, :workers), (:call, :+, (:call, :%, :nextidx, (:call, :nworkers)), 1))),
                (:line, 1893, :none),
                (:+=, :nextidx, 1)
              )),
            (:line, 1895, :none),
            :p
          ))
      ), (:(=), :nextidx, 0)),
    (:line, 1899, :none),
    (:(=), (:call, :spawnat, :p, :thunk), (:block,
        (:line, 1899, :none),
        (:call, :sync_add, (:call, :remotecall, :thunk, :p))
      )),
    (:line, 1901, :none),
    (:(=), (:call, :spawn_somewhere, :thunk), (:block,
        (:line, 1901, :none),
        (:call, :spawnat, (:call, :chooseproc, :thunk), :thunk)
      )),
    (:line, 1903, :none),
    (:macro, (:call, :spawn, :expr), (:block,
        (:line, 1904, :none),
        (:(=), :expr, (:call, :localize_vars, (:call, :esc, (:quote, (:->, (:tuple,), (:block,
                    (:line, 1904, :none),
                    (:$, :expr)
                  )))), false)),
        (:line, 1905, :none),
        (:quote, (:call, :spawn_somewhere, (:$, :expr)))
      )),
    (:line, 1908, :none),
    (:macro, (:call, :spawnat, :p, :expr), (:block,
        (:line, 1909, :none),
        (:(=), :expr, (:call, :localize_vars, (:call, :esc, (:quote, (:->, (:tuple,), (:block,
                    (:line, 1909, :none),
                    (:$, :expr)
                  )))), false)),
        (:line, 1910, :none),
        (:quote, (:call, :spawnat, (:$, (:call, :esc, :p)), (:$, :expr)))
      )),
    (:line, 1913, :none),
    "    @fetch\n\nEquivalent to `fetch(@spawn expr)`.\n",
    (:line, 1918, :none),
    (:macro, (:call, :fetch, :expr), (:block,
        (:line, 1919, :none),
        (:(=), :expr, (:call, :localize_vars, (:call, :esc, (:quote, (:->, (:tuple,), (:block,
                    (:line, 1919, :none),
                    (:$, :expr)
                  )))), false)),
        (:line, 1920, :none),
        (:quote, (:block,
            (:line, 1921, :none),
            (:(=), :thunk, (:$, :expr)),
            (:line, 1922, :none),
            (:call, :remotecall_fetch, :thunk, (:call, :chooseproc, :thunk))
          ))
      )),
    (:line, 1926, :none),
    "    @fetchfrom\n\nEquivalent to `fetch(@spawnat p expr)`.\n",
    (:line, 1931, :none),
    (:macro, (:call, :fetchfrom, :p, :expr), (:block,
        (:line, 1932, :none),
        (:(=), :expr, (:call, :localize_vars, (:call, :esc, (:quote, (:->, (:tuple,), (:block,
                    (:line, 1932, :none),
                    (:$, :expr)
                  )))), false)),
        (:line, 1933, :none),
        (:quote, (:call, :remotecall_fetch, (:$, :expr), (:$, (:call, :esc, :p))))
      )),
    (:line, 1936, :none),
    "    @everywhere expr\n\nExecute an expression under Main everywhere. Equivalent to calling\n`eval(Main, expr)` on all processes. Errors on any of the processes are collected into a\n`CompositeException` and thrown. For example :\n\n    @everywhere bar=1\n\nwill define `Main.bar` on all processes.\n\nUnlike `@spawn` and `@spawnat`, `@everywhere` does not capture any local variables. Prefixing\n`@everywhere` with `@eval` allows us to broadcast local variables using interpolation :\n\n    foo = 1\n    @eval @everywhere bar=\$foo\n\nThe expression is evaluated under `Main` irrespective of where `@everywhere` is called from.\nFor example :\n\n    module FooBar\n        foo() = @everywhere bar()=myid()\n    end\n    FooBar.foo()\n\nwill result in `Main.bar` being defined on all processes and not `FooBar.bar`.\n",
    (:line, 1963, :none),
    (:macro, (:call, :everywhere, :ex), (:block,
        (:line, 1964, :none),
        (:quote, (:block,
            (:line, 1965, :none),
            (:call, :sync_begin),
            (:line, 1966, :none),
            (:for, (:(=), :pid, (:call, :workers)), (:block,
                (:line, 1967, :none),
                (:call, :async_run_thunk, (:->, (:tuple,), (:block,
                      (:line, 1967, :none),
                      (:call, :remotecall_fetch, :eval_ew_expr, :pid, (:$, (:call, :Expr, (:quote, #QuoteNode
                              :quote
                            ), :ex)))
                    ))),
                (:line, 1968, :none),
                (:call, :yield)
              )),
            (:line, 1973, :none),
            (:if, (:call, :>, (:call, :nprocs), 1), (:block,
                (:line, 1974, :none),
                (:call, :async_run_thunk, (:->, (:tuple,), (:block,
                      (:line, 1974, :none),
                      (:call, :eval_ew_expr, (:$, (:call, :Expr, (:quote, #QuoteNode
                              :quote
                            ), :ex)))
                    )))
              )),
            (:line, 1977, :none),
            (:call, :sync_end)
          ))
      )),
    (:line, 1981, :none),
    (:(=), (:call, :eval_ew_expr, :ex), (:block,
        (:line, 1981, :none),
        (:block,
          (:call, :eval, :Main, :ex),
          :nothing
        )
      )),
    (:line, 1984, :none),
    (:function, (:call, :splitrange, (:(::), :N, :Int), (:(::), :np, :Int)), (:block,
        (:line, 1985, :none),
        (:(=), :each, (:call, :div, :N, :np)),
        (:line, 1986, :none),
        (:(=), :extras, (:call, :rem, :N, :np)),
        (:line, 1987, :none),
        (:(=), :nchunks, (:if, (:call, :>, :each, 0), :np, :extras)),
        (:line, 1988, :none),
        (:(=), :chunks, (:call, (:curly, :Array, (:curly, :UnitRange, :Int)), :nchunks)),
        (:line, 1989, :none),
        (:(=), :lo, 1),
        (:line, 1990, :none),
        (:for, (:(=), :i, (:(:), 1, :nchunks)), (:block,
            (:line, 1991, :none),
            (:(=), :hi, (:call, :-, (:call, :+, :lo, :each), 1)),
            (:line, 1992, :none),
            (:if, (:call, :>, :extras, 0), (:block,
                (:line, 1993, :none),
                (:+=, :hi, 1),
                (:line, 1994, :none),
                (:-=, :extras, 1)
              )),
            (:line, 1996, :none),
            (:(=), (:ref, :chunks, :i), (:(:), :lo, :hi)),
            (:line, 1997, :none),
            (:(=), :lo, (:call, :+, :hi, 1))
          )),
        (:line, 1999, :none),
        (:return, :chunks)
      )),
    (:line, 2002, :none),
    (:function, (:call, :preduce, :reducer, :f, :R), (:block,
        (:line, 2003, :none),
        (:(=), :N, (:call, :length, :R)),
        (:line, 2004, :none),
        (:(=), :chunks, (:call, :splitrange, :N, (:call, :nworkers))),
        (:line, 2005, :none),
        (:(=), :all_w, (:ref, (:call, :workers), (:(:), 1, (:call, :length, :chunks)))),
        (:line, 2007, :none),
        (:(=), :w_exec, (:ref, :Task)),
        (:line, 2008, :none),
        (:for, (:(=), (:tuple, :idx, :pid), (:call, :enumerate, :all_w)), (:block,
            (:line, 2009, :none),
            (:(=), :t, (:call, :Task, (:->, (:tuple,), (:block,
                    (:line, 2009, :none),
                    (:call, :remotecall_fetch, :f, :pid, :reducer, :R, (:call, :first, (:ref, :chunks, :idx)), (:call, :last, (:ref, :chunks, :idx)))
                  )))),
            (:line, 2010, :none),
            (:call, :schedule, :t),
            (:line, 2011, :none),
            (:call, :push!, :w_exec, :t)
          )),
        (:line, 2013, :none),
        (:call, :reduce, :reducer, (:comprehension, (:generator, (:call, :wait, :t), (:(=), :t, :w_exec))))
      )),
    (:line, 2016, :none),
    (:function, (:call, :pfor, :f, :R), (:block,
        (:line, 2017, :none),
        (:comprehension, (:generator, (:macrocall, Symbol("@spawn"), (:call, :f, :R, (:call, :first, :c), (:call, :last, :c))), (:(=), :c, (:call, :splitrange, (:call, :length, :R), (:call, :nworkers)))))
      )),
    (:line, 2020, :none),
    (:function, (:call, :make_preduce_body, :var, :body), (:block,
        (:line, 2021, :none),
        (:quote, (:block,
            (:line, 2022, :none),
            (:function, (:tuple, :reducer, :R, (:(::), :lo, :Int), (:(::), :hi, :Int)), (:block,
                (:line, 2023, :none),
                (:(=), (:$, (:call, :esc, :var)), (:ref, :R, :lo)),
                (:line, 2024, :none),
                (:(=), :ac, (:$, (:call, :esc, :body))),
                (:line, 2025, :none),
                (:if, (:call, :(!=), :lo, :hi), (:block,
                    (:line, 2026, :none),
                    (:for, (:(=), (:$, (:call, :esc, :var)), (:ref, :R, (:(:), (:call, :+, :lo, 1), :hi))), (:block,
                        (:line, 2027, :none),
                        (:(=), :ac, (:call, :reducer, :ac, (:$, (:call, :esc, :body))))
                      ))
                  )),
                (:line, 2030, :none),
                :ac
              ))
          ))
      )),
    (:line, 2035, :none),
    (:function, (:call, :make_pfor_body, :var, :body), (:block,
        (:line, 2036, :none),
        (:quote, (:block,
            (:line, 2037, :none),
            (:function, (:tuple, :R, (:(::), :lo, :Int), (:(::), :hi, :Int)), (:block,
                (:line, 2038, :none),
                (:for, (:(=), (:$, (:call, :esc, :var)), (:ref, :R, (:(:), :lo, :hi))), (:block,
                    (:line, 2039, :none),
                    (:$, (:call, :esc, :body))
                  ))
              ))
          ))
      )),
    (:line, 2045, :none),
    "    @parallel\n\nA parallel for loop of the form :\n\n    @parallel [reducer] for var = range\n        body\n    end\n\nThe specified range is partitioned and locally executed across all workers. In case an\noptional reducer function is specified, `@parallel` performs local reductions on each worker\nwith a final reduction on the calling process.\n\nNote that without a reducer function, `@parallel` executes asynchronously, i.e. it spawns\nindependent tasks on all available workers and returns immediately without waiting for\ncompletion. To wait for completion, prefix the call with `@sync`, like :\n\n    @sync @parallel for var = range\n        body\n    end\n",
    (:line, 2066, :none),
    (:macro, (:call, :parallel, (:..., :args)), (:block,
        (:line, 2067, :none),
        (:(=), :na, (:call, :length, :args)),
        (:line, 2068, :none),
        (:if, (:call, :(==), :na, 1), (:block,
            (:line, 2069, :none),
            (:(=), :loop, (:ref, :args, 1))
          ), (:block,
            (:line, 2070, :none),
            (:if, (:call, :(==), :na, 2), (:block,
                (:line, 2071, :none),
                (:(=), :reducer, (:ref, :args, 1)),
                (:line, 2072, :none),
                (:(=), :loop, (:ref, :args, 2))
              ), (:block,
                (:line, 2074, :none),
                (:call, :throw, (:call, :ArgumentError, "wrong number of arguments to @parallel"))
              ))
          )),
        (:line, 2076, :none),
        (:if, (:||, (:call, :!, (:call, :isa, :loop, :Expr)), (:call, :!, (:call, :is, (:., :loop, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :for
                )))), (:block,
            (:line, 2077, :none),
            (:call, :error, "malformed @parallel loop")
          )),
        (:line, 2079, :none),
        (:(=), :var, (:ref, (:., (:ref, (:., :loop, (:quote, #QuoteNode
                    :args
                  )), 1), (:quote, #QuoteNode
                :args
              )), 1)),
        (:line, 2080, :none),
        (:(=), :r, (:ref, (:., (:ref, (:., :loop, (:quote, #QuoteNode
                    :args
                  )), 1), (:quote, #QuoteNode
                :args
              )), 2)),
        (:line, 2081, :none),
        (:(=), :body, (:ref, (:., :loop, (:quote, #QuoteNode
                :args
              )), 2)),
        (:line, 2082, :none),
        (:if, (:call, :(==), :na, 1), (:block,
            (:line, 2083, :none),
            (:(=), :thecall, (:quote, (:call, :pfor, (:$, (:call, :make_pfor_body, :var, :body)), (:$, (:call, :esc, :r)))))
          ), (:block,
            (:line, 2085, :none),
            (:(=), :thecall, (:quote, (:call, :preduce, (:$, (:call, :esc, :reducer)), (:$, (:call, :make_preduce_body, :var, :body)), (:$, (:call, :esc, :r)))))
          )),
        (:line, 2087, :none),
        (:call, :localize_vars, :thecall)
      )),
    (:line, 2091, :none),
    (:function, (:call, :check_master_connect), (:block,
        (:line, 2092, :none),
        (:(=), :timeout, (:call, :worker_timeout)),
        (:line, 2095, :none),
        (:if, (:call, :(!=), (:ccall, (:quote, #QuoteNode
                :jl_running_on_valgrind
              ), :Cint, (:tuple,)), 0), (:block,
            (:line, 2096, :none),
            (:return, nothing)
          )),
        (:line, 2098, :none),
        (:macrocall, Symbol("@schedule"), (:block,
            (:line, 2099, :none),
            (:(=), :start, (:call, :time)),
            (:line, 2100, :none),
            (:while, (:&&, (:call, :!, (:call, :haskey, :map_pid_wrkr, 1)), (:call, :<, (:call, :-, (:call, :time), :start), :timeout)), (:block,
                (:line, 2101, :none),
                (:call, :sleep, 1.0)
              )),
            (:line, 2104, :none),
            (:if, (:call, :!, (:call, :haskey, :map_pid_wrkr, 1)), (:block,
                (:line, 2105, :none),
                (:call, :print, :STDERR, (:string, "Master process (id 1) could not connect within ", :timeout, " seconds.\nexiting.\n")),
                (:line, 2106, :none),
                (:call, :exit, 1)
              ))
          ))
      )),
    (:line, 2111, :none),
    "    timedwait(testcb::Function, secs::Float64; pollint::Float64=0.1)\n\nWaits till `testcb` returns `true` or for `secs` seconds, whichever is earlier.\n`testcb` is polled every `pollint` seconds.\n",
    (:line, 2117, :none),
    (:function, (:call, :timedwait, (:parameters, (:kw, (:(::), :pollint, :Float64), 0.1)), (:(::), :testcb, :Function), (:(::), :secs, :Float64)), (:block,
        (:line, 2118, :none),
        (:||, (:call, :>, :pollint, 0), (:call, :throw, (:call, :ArgumentError, (:string, "cannot set pollint to ", :pollint, " seconds")))),
        (:line, 2119, :none),
        (:(=), :start, (:call, :time)),
        (:line, 2120, :none),
        (:(=), :done, (:call, :Channel, 1)),
        (:line, 2121, :none),
        (:(=), (:call, :timercb, :aw), (:block,
            (:line, 2121, :none),
            (:block,
              (:line, 2122, :none),
              (:try, (:block,
                  (:line, 2123, :none),
                  (:if, (:call, :testcb), (:block,
                      (:line, 2124, :none),
                      (:call, :put!, :done, (:quote, #QuoteNode
                          :ok
                        ))
                    ), (:block,
                      (:line, 2125, :none),
                      (:if, (:call, :>, (:call, :-, (:call, :time), :start), :secs), (:block,
                          (:line, 2126, :none),
                          (:call, :put!, :done, (:quote, #QuoteNode
                              :timed_out
                            ))
                        ))
                    ))
                ), :e, (:block,
                  (:line, 2129, :none),
                  (:call, :put!, :done, (:quote, #QuoteNode
                      :error
                    ))
                ), (:block,
                  (:line, 2131, :none),
                  (:&&, (:call, :isready, :done), (:call, :close, :aw))
                ))
            )
          )),
        (:line, 2135, :none),
        (:if, (:call, :!, (:call, :testcb)), (:block,
            (:line, 2136, :none),
            (:(=), :t, (:call, :Timer, :timercb, :pollint, :pollint)),
            (:line, 2137, :none),
            (:(=), :ret, (:call, :fetch, :done)),
            (:line, 2138, :none),
            (:call, :close, :t)
          ), (:block,
            (:line, 2140, :none),
            (:(=), :ret, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 2142, :none),
        :ret
      )),
    (:line, 2145, :none),
    (:function, (:call, :interrupt, (:(::), :pid, :Integer)), (:block,
        (:line, 2146, :none),
        (:call, :assert, (:call, :(==), (:call, :myid), 1)),
        (:line, 2147, :none),
        (:(=), :w, (:ref, :map_pid_wrkr, :pid)),
        (:line, 2148, :none),
        (:if, (:call, :isa, :w, :Worker), (:block,
            (:line, 2149, :none),
            (:call, :manage, (:., :w, (:quote, #QuoteNode
                  :manager
                )), (:., :w, (:quote, #QuoteNode
                  :id
                )), (:., :w, (:quote, #QuoteNode
                  :config
                )), (:quote, #QuoteNode
                :interrupt
              ))
          ))
      )),
    (:line, 2153, :none),
    "    interrupt(pids::Integer...)\n\nInterrupt the current executing task on the specified workers. This is equivalent to\npressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.\n",
    (:line, 2159, :none),
    (:(=), (:call, :interrupt, (:..., (:(::), :pids, :Integer))), (:block,
        (:line, 2159, :none),
        (:call, :interrupt, (:vect, (:..., :pids)))
      )),
    (:line, 2161, :none),
    "    interrupt(pids::AbstractVector=workers())\n\nInterrupt the current executing task on the specified workers. This is equivalent to\npressing Ctrl-C on the local machine. If no arguments are given, all workers are interrupted.\n",
    (:line, 2167, :none),
    (:function, (:call, :interrupt, (:kw, (:(::), :pids, :AbstractVector), (:call, :workers))), (:block,
        (:line, 2168, :none),
        (:call, :assert, (:call, :(==), (:call, :myid), 1)),
        (:line, 2169, :none),
        (:macrocall, Symbol("@sync"), (:block,
            (:line, 2170, :none),
            (:for, (:(=), :pid, :pids), (:block,
                (:line, 2171, :none),
                (:macrocall, Symbol("@async"), (:call, :interrupt, :pid))
              ))
          ))
      )),
    (:line, 2177, :none),
    (:function, (:call, :disable_nagle, :sock), (:block,
        (:line, 2179, :none),
        (:ccall, (:quote, #QuoteNode
            :uv_tcp_nodelay
          ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
              :handle
            )), 1),
        (:line, 2180, :none),
        (:macrocall, Symbol("@static"), (:if, (:call, :is_linux), (:block,
              (:line, 2182, :none),
              (:if, (:call, :<, (:ccall, (:quote, #QuoteNode
                      :jl_tcp_quickack
                    ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
                        :handle
                      )), 1), 0), (:block,
                  (:line, 2183, :none),
                  (:call, :warn_once, "Parallel networking unoptimized ( Error enabling TCP_QUICKACK : ", (:call, (:., :Libc, (:quote, #QuoteNode
                          :strerror
                        )), (:call, (:., :Libc, (:quote, #QuoteNode
                            :errno
                          )))), " )")
                ))
            )))
      )),
    (:line, 2188, :none),
    (:function, (:call, :check_same_host, :pids), (:block,
        (:line, 2189, :none),
        (:if, (:call, :(!=), (:call, :myid), 1), (:block,
            (:line, 2190, :none),
            (:return, (:call, :remotecall_fetch, :check_same_host, 1, :pids))
          ), (:block,
            (:line, 2195, :none),
            (:if, (:call, :all, (:->, :p, (:block,
                    (:line, 2195, :none),
                    (:||, (:call, :(==), :p, 1), (:call, :isa, (:., (:ref, :map_pid_wrkr, :p), (:quote, #QuoteNode
                            :manager
                          )), :LocalManager))
                  )), :pids), (:block,
                (:line, 2196, :none),
                (:return, true)
              ), (:block,
                (:line, 2198, :none),
                (:(=), :first_bind_addr, (:call, :get, (:., (:., (:ref, :map_pid_wrkr, (:ref, :pids, 1)), (:quote, #QuoteNode
                          :config
                        )), (:quote, #QuoteNode
                        :bind_addr
                      )))),
                (:line, 2199, :none),
                (:return, (:call, :all, (:->, :p, (:block,
                        (:line, 2199, :none),
                        (:&&, (:call, :(!=), :p, 1), (:call, :(==), (:call, :get, (:., (:., (:ref, :map_pid_wrkr, :p), (:quote, #QuoteNode
                                    :config
                                  )), (:quote, #QuoteNode
                                  :bind_addr
                                ))), :first_bind_addr))
                      )), (:ref, :pids, (:(:), 2, :end))))
              ))
          ))
      )),
    (:line, 2204, :none),
    (:function, (:call, :terminate_all_workers), (:block,
        (:line, 2205, :none),
        (:if, (:call, :(!=), (:call, :myid), 1), (:block,
            (:line, 2206, :none),
            (:return, nothing)
          )),
        (:line, 2209, :none),
        (:if, (:call, :>, (:call, :nprocs), 1), (:block,
            (:line, 2210, :none),
            (:(=), :ret, (:call, :rmprocs, (:parameters, (:kw, :waitfor, 0.5)), (:call, :workers))),
            (:line, 2211, :none),
            (:if, (:call, :(!==), :ret, (:quote, #QuoteNode
                  :ok
                )), (:block,
                (:line, 2212, :none),
                (:call, :warn, "Forcibly interrupting busy workers"),
                (:line, 2214, :none),
                (:call, :interrupt, (:call, :workers)),
                (:line, 2215, :none),
                (:(=), :ret, (:call, :rmprocs, (:parameters, (:kw, :waitfor, 0.5)), (:call, :workers))),
                (:line, 2216, :none),
                (:if, (:call, :(!==), :ret, (:quote, #QuoteNode
                      :ok
                    )), (:block,
                    (:line, 2217, :none),
                    (:call, :warn, "Unable to terminate all workers")
                  ))
              ))
          ))
      )),
    (:line, 2223, :none),
    (:(=), (:call, :getindex, (:(::), :r, :RemoteChannel)), (:block,
        (:line, 2223, :none),
        (:call, :fetch, :r)
      )),
    (:line, 2224, :none),
    (:(=), (:call, :getindex, (:(::), :r, :Future)), (:block,
        (:line, 2224, :none),
        (:call, :fetch, :r)
      )),
    (:line, 2226, :none),
    (:(=), (:call, :getindex, (:(::), :r, :Future), (:..., :args)), (:block,
        (:line, 2226, :none),
        (:call, :getindex, (:call, :fetch, :r), (:..., :args))
      )),
    (:line, 2227, :none),
    (:function, (:call, :getindex, (:(::), :r, :RemoteChannel), (:..., :args)), (:block,
        (:line, 2228, :none),
        (:if, (:call, :(==), (:., :r, (:quote, #QuoteNode
                :where
              )), (:call, :myid)), (:block,
            (:line, 2229, :none),
            (:return, (:call, :getindex, (:call, :fetch, :r), (:..., :args)))
          )),
        (:line, 2231, :none),
        (:return, (:call, :remotecall_fetch, :getindex, (:., :r, (:quote, #QuoteNode
                :where
              )), :r, (:..., :args)))
      ))
  ))