(:quote, (:block,
    (:line, 3, :none),
    (:type, true, (:<:, :IntSet, (:curly, :AbstractSet, :Int)), (:block,
        (:line, 4, :none),
        (:(::), :bits, (:curly, :Array, :UInt32, 1)),
        (:line, 5, :none),
        (:(::), :limit, :Int),
        (:line, 6, :none),
        (:(::), :fill1s, :Bool),
        (:line, 8, :none),
        (:(=), (:call, :IntSet), (:block,
            (:line, 8, :none),
            (:call, :new, (:call, :zeros, :UInt32, (:call, :>>>, 256, 5)), 256, false)
          ))
      )),
    (:line, 10, :none),
    (:(=), (:call, :IntSet, :itr), (:block,
        (:line, 10, :none),
        (:block,
          (:(=), :s, (:call, :IntSet)),
          (:for, (:(=), :a, :itr), (:block,
              (:line, 10, :none),
              (:call, :push!, :s, :a)
            )),
          :s
        )
      )),
    (:line, 12, :none),
    (:(=), (:call, :eltype, (:(::), (:curly, :Type, :IntSet))), (:block,
        (:line, 12, :none),
        :Int64
      )),
    (:line, 13, :none),
    (:(=), (:call, :similar, (:(::), :s, :IntSet)), (:block,
        (:line, 13, :none),
        (:call, :IntSet)
      )),
    (:line, 15, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :s, :IntSet)), (:block,
        (:line, 16, :none),
        (:call, :print, :io, "IntSet(["),
        (:line, 17, :none),
        (:(=), :first, true),
        (:line, 18, :none),
        (:for, (:(=), :n, :s), (:block,
            (:line, 19, :none),
            (:if, (:call, :>, :n, (:., :s, (:quote, #QuoteNode
                    :limit
                  ))), (:block,
                (:line, 20, :none),
                (:break,)
              )),
            (:line, 22, :none),
            (:if, (:call, :!, :first), (:block,
                (:line, 23, :none),
                (:call, :print, :io, ", ")
              )),
            (:line, 25, :none),
            (:call, :print, :io, :n),
            (:line, 26, :none),
            (:(=), :first, false)
          )),
        (:line, 28, :none),
        (:if, (:., :s, (:quote, #QuoteNode
              :fill1s
            )), (:block,
            (:line, 29, :none),
            (:call, :print, :io, ", ..., ", (:call, :-, (:call, :typemax, :Int), 1))
          )),
        (:line, 31, :none),
        (:call, :print, :io, "])")
      )),
    (:line, 34, :none),
    (:(=), (:call, :copy, (:(::), :s, :IntSet)), (:block,
        (:line, 34, :none),
        (:call, :union!, (:call, :IntSet), :s)
      )),
    (:line, 36, :none),
    (:function, (:call, :sizehint!, (:(::), :s, :IntSet), (:(::), :top, :Integer)), (:block,
        (:line, 37, :none),
        (:if, (:call, :(>=), :top, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 38, :none),
            (:(=), :lim, (:call, :>>>, (:call, :&, (:call, :+, :top, 31), -32), 5)),
            (:line, 39, :none),
            (:(=), :olsz, (:call, :length, (:., :s, (:quote, #QuoteNode
                    :bits
                  )))),
            (:line, 40, :none),
            (:if, (:call, :<, :olsz, :lim), (:block,
                (:line, 41, :none),
                (:call, :resize!, (:., :s, (:quote, #QuoteNode
                      :bits
                    )), :lim),
                (:line, 42, :none),
                (:(=), :fill, (:if, (:., :s, (:quote, #QuoteNode
                        :fill1s
                      )), (:call, :UInt32, -1), (:call, :UInt32, 0))),
                (:line, 43, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :olsz, 1), :lim)), (:block,
                    (:line, 43, :none),
                    (:(=), (:ref, (:., :s, (:quote, #QuoteNode
                            :bits
                          )), :i), :fill)
                  ))
              )),
            (:line, 45, :none),
            (:(=), (:., :s, (:quote, #QuoteNode
                  :limit
                )), :top)
          )),
        (:line, 47, :none),
        :s
      )),
    (:line, 50, :none),
    (:function, (:call, :push!, (:(::), :s, :IntSet), (:(::), :n, :Integer)), (:block,
        (:line, 51, :none),
        (:if, (:call, :(>=), :n, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 52, :none),
            (:if, (:., :s, (:quote, #QuoteNode
                  :fill1s
                )), (:block,
                (:line, 53, :none),
                (:return, :s)
              ), (:block,
                (:line, 55, :none),
                (:(=), :lim, (:call, :Int, (:call, :+, :n, (:call, :div, :n, 2)))),
                (:line, 56, :none),
                (:call, :sizehint!, :s, :lim)
              ))
          ), (:block,
            (:line, 58, :none),
            (:if, (:call, :(<=), :n, 0), (:block,
                (:line, 59, :none),
                (:if, (:call, :<, :n, 0), (:block,
                    (:line, 60, :none),
                    (:call, :throw, (:call, :ArgumentError, "IntSet elements cannot be negative"))
                  ), (:block,
                    (:line, 62, :none),
                    (:call, :depwarn, "storing zero in IntSets is deprecated", (:quote, #QuoteNode
                        :push!
                      ))
                  ))
              ))
          )),
        (:line, 65, :none),
        (:|=, (:ref, (:., :s, (:quote, #QuoteNode
                :bits
              )), (:call, :+, (:call, :>>, :n, 5), 1)), (:call, :<<, (:call, :UInt32, 1), (:call, :&, :n, 31))),
        (:line, 66, :none),
        (:return, :s)
      )),
    (:line, 69, :none),
    (:function, (:call, :union!, (:(::), :s, :IntSet), :ns), (:block,
        (:line, 70, :none),
        (:for, (:(=), :n, :ns), (:block,
            (:line, 71, :none),
            (:call, :push!, :s, :n)
          )),
        (:line, 73, :none),
        (:return, :s)
      )),
    (:line, 76, :none),
    (:function, (:call, :pop!, (:(::), :s, :IntSet), (:(::), :n, :Integer), :deflt), (:block,
        (:line, 77, :none),
        (:if, (:call, :(>=), :n, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 78, :none),
            (:if, (:., :s, (:quote, #QuoteNode
                  :fill1s
                )), (:block,
                (:line, 79, :none),
                (:(=), :lim, (:call, :Int, (:call, :+, :n, (:call, :div, :n, 2)))),
                (:line, 80, :none),
                (:call, :sizehint!, :s, :lim)
              ), (:block,
                (:line, 82, :none),
                (:return, :deflt)
              ))
          )),
        (:line, 85, :none),
        (:if, (:call, :(<=), :n, 0), (:block,
            (:line, 86, :none),
            (:if, (:call, :<, :n, 0), (:block,
                (:line, 87, :none),
                (:return, :deflt)
              ), (:block,
                (:line, 89, :none),
                (:call, :depwarn, "stored zeros in IntSet is deprecated", (:quote, #QuoteNode
                    :pop!
                  ))
              ))
          )),
        (:line, 92, :none),
        (:(=), :mask, (:call, :<<, (:call, :UInt32, 1), (:call, :&, :n, 31))),
        (:line, 93, :none),
        (:(=), :idx, (:call, :+, (:call, :>>, :n, 5), 1)),
        (:line, 94, :none),
        (:(=), :b, (:ref, (:., :s, (:quote, #QuoteNode
                :bits
              )), :idx)),
        (:line, 95, :none),
        (:if, (:call, :(==), (:call, :&, :b, :mask), 0), (:block,
            (:line, 95, :none),
            (:return, :deflt)
          )),
        (:line, 96, :none),
        (:(=), (:ref, (:., :s, (:quote, #QuoteNode
                :bits
              )), :idx), (:call, :&, :b, (:call, :~, :mask))),
        (:line, 97, :none),
        (:return, :n)
      )),
    (:line, 100, :none),
    (:function, (:call, :pop!, (:(::), :s, :IntSet), (:(::), :n, :Integer)), (:block,
        (:line, 101, :none),
        (:if, (:call, :(==), (:call, :pop!, :s, :n, (:call, :+, :n, 1)), (:call, :+, :n, 1)), (:block,
            (:line, 102, :none),
            (:call, :throw, (:call, :KeyError, :n))
          )),
        (:line, 104, :none),
        (:return, :n)
      )),
    (:line, 108, :none),
    (:(=), (:call, :pop!, (:(::), :s, :IntSet)), (:block,
        (:line, 108, :none),
        (:call, :pop!, :s, (:call, :last, :s))
      )),
    (:line, 110, :none),
    (:function, (:call, :delete!, (:(::), :s, :IntSet), (:(::), :n, :Integer)), (:block,
        (:line, 111, :none),
        (:call, :pop!, :s, :n, :n),
        (:line, 112, :none),
        (:return, :s)
      )),
    (:line, 115, :none),
    (:function, (:call, :setdiff!, (:(::), :s, :IntSet), :ns), (:block,
        (:line, 116, :none),
        (:for, (:(=), :n, :ns), (:block,
            (:line, 117, :none),
            (:call, :delete!, :s, :n)
          )),
        (:line, 119, :none),
        (:return, :s)
      )),
    (:line, 122, :none),
    (:(=), (:call, :setdiff, (:(::), :a, :IntSet), (:(::), :b, :IntSet)), (:block,
        (:line, 122, :none),
        (:call, :setdiff!, (:call, :copy, :a), :b)
      )),
    (:line, 123, :none),
    (:(=), (:call, :symdiff, (:(::), :s1, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 123, :none),
        (:if, (:call, :(>=), (:., :s1, (:quote, #QuoteNode
                :limit
              )), (:., :s2, (:quote, #QuoteNode
                :limit
              ))), (:call, :symdiff!, (:call, :copy, :s1), :s2), (:call, :symdiff!, (:call, :copy, :s2), :s1))
      )),
    (:line, 126, :none),
    (:function, (:call, :empty!, (:(::), :s, :IntSet)), (:block,
        (:line, 127, :none),
        (:call, :fill!, (:., :s, (:quote, #QuoteNode
              :bits
            )), 0),
        (:line, 128, :none),
        (:return, :s)
      )),
    (:line, 131, :none),
    "    symdiff!(s, n)\n\nThe set `s` is destructively modified to toggle the inclusion of integer `n`.\n",
    (:line, 136, :none),
    (:function, (:call, :symdiff!, (:(::), :s, :IntSet), (:(::), :n, :Integer)), (:block,
        (:line, 137, :none),
        (:if, (:call, :(>=), :n, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 138, :none),
            (:(=), :lim, (:call, :Int, (:call, :+, :n, (:call, :div, :n, 2)))),
            (:line, 139, :none),
            (:call, :sizehint!, :s, :lim)
          ), (:block,
            (:line, 140, :none),
            (:if, (:call, :<, :n, 0), (:block,
                (:line, 141, :none),
                (:call, :throw, (:call, :ArgumentError, "IntSet elements cannot be negative"))
              ))
          )),
        (:line, 143, :none),
        (:$=, (:ref, (:., :s, (:quote, #QuoteNode
                :bits
              )), (:call, :+, (:call, :>>, :n, 5), 1)), (:call, :<<, (:call, :UInt32, 1), (:call, :&, :n, 31))),
        (:line, 144, :none),
        (:return, :s)
      )),
    (:line, 147, :none),
    "    symdiff!(s, itr)\n\nFor each element in `itr`, destructively toggle its inclusion in set `s`.\n",
    (:line, 152, :none),
    (:function, (:call, :symdiff!, (:(::), :s, :IntSet), :ns), (:block,
        (:line, 153, :none),
        (:for, (:(=), :n, :ns), (:block,
            (:line, 154, :none),
            (:call, :symdiff!, :s, :n)
          )),
        (:line, 156, :none),
        (:return, :s)
      )),
    (:line, 159, :none),
    (:function, (:call, :copy!, (:(::), :to, :IntSet), (:(::), :from, :IntSet)), (:block,
        (:line, 160, :none),
        (:if, (:call, :is, :to, :from), (:block,
            (:line, 161, :none),
            (:return, :to)
          ), (:block,
            (:line, 163, :none),
            (:call, :empty!, :to),
            (:line, 164, :none),
            (:return, (:call, :union!, :to, :from))
          ))
      )),
    (:line, 168, :none),
    (:(=), (:call, :in, :n, (:(::), :s, :IntSet)), (:block,
        (:line, 168, :none),
        (:if, (:call, :<, :n, 0), false, (:if, (:call, :>, :n, (:call, :typemax, :Int)), (:., :s, (:quote, #QuoteNode
                :fill1s
              )), (:call, :in, (:call, :convert, :Int, :n), :s)))
      )),
    (:line, 169, :none),
    (:function, (:call, :in, (:(::), :n, :Int), (:(::), :s, :IntSet)), (:block,
        (:line, 170, :none),
        (:if, (:call, :(>=), :n, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 173, :none),
            (:return, (:&&, (:., :s, (:quote, #QuoteNode
                    :fill1s
                  )), (:&&, (:call, :(>=), :n, 0), (:call, :<, :n, (:call, :typemax, :Int)))))
          ), (:block,
            (:line, 174, :none),
            (:if, (:call, :(<=), :n, 0), (:block,
                (:line, 175, :none),
                (:if, (:call, :<, :n, 0), (:block,
                    (:line, 176, :none),
                    (:return, false)
                  ), (:block,
                    (:line, 178, :none),
                    (:call, :depwarn, "stored zeros in IntSet is deprecated", (:quote, #QuoteNode
                        :in
                      ))
                  ))
              ))
          )),
        (:line, 181, :none),
        (:call, :(!=), (:call, :&, (:ref, (:., :s, (:quote, #QuoteNode
                  :bits
                )), (:call, :+, (:call, :>>, :n, 5), 1)), (:call, :<<, (:call, :UInt32, 1), (:call, :&, :n, 31))), 0)
      )),
    (:line, 184, :none),
    (:(=), (:call, :start, (:(::), :s, :IntSet)), (:block,
        (:line, 184, :none),
        (:call, :Int64, 0)
      )),
    (:line, 185, :none),
    (:(=), (:call, :done, (:(::), :s, :IntSet), :i), (:block,
        (:line, 185, :none),
        (:||, (:&&, (:call, :!, (:., :s, (:quote, #QuoteNode
                  :fill1s
                ))), (:call, :(>=), (:ref, (:call, :next, :s, :i), 1), (:., :s, (:quote, #QuoteNode
                  :limit
                )))), (:call, :(==), :i, (:call, :typemax, :Int)))
      )),
    (:line, 186, :none),
    (:function, (:call, :next, (:(::), :s, :IntSet), :i), (:block,
        (:line, 187, :none),
        (:if, (:call, :(>=), :i, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 188, :none),
            (:(=), :n, (:call, :Int64, :i))
          ), (:block,
            (:line, 190, :none),
            (:(=), :n, (:call, :Int64, (:ccall, (:quote, #QuoteNode
                    :bitvector_next
                  ), :UInt64, (:tuple, (:curly, :Ptr, :UInt32), :UInt64, :UInt64), (:., :s, (:quote, #QuoteNode
                      :bits
                    )), :i, (:., :s, (:quote, #QuoteNode
                      :limit
                    )))))
          )),
        (:line, 192, :none),
        (:tuple, :n, (:call, :+, :n, 1))
      )),
    (:line, 195, :none),
    (:(=), (:call, :isempty, (:(::), :s, :IntSet)), (:block,
        (:line, 195, :none),
        (:&&, (:call, :!, (:., :s, (:quote, #QuoteNode
                :fill1s
              ))), (:call, :(==), (:ccall, (:quote, #QuoteNode
                :bitvector_any1
              ), :UInt32, (:tuple, (:curly, :Ptr, :UInt32), :UInt64, :UInt64), (:., :s, (:quote, #QuoteNode
                  :bits
                )), 0, (:., :s, (:quote, #QuoteNode
                  :limit
                ))), 0))
      )),
    (:line, 198, :none),
    (:function, (:call, :first, (:(::), :s, :IntSet)), (:block,
        (:line, 199, :none),
        (:(=), :n, (:ref, (:call, :next, :s, 0), 1)),
        (:line, 200, :none),
        (:if, (:call, :(>=), :n, (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 201, :none),
            (:call, :throw, (:call, :ArgumentError, "set must be non-empty"))
          )),
        (:line, 203, :none),
        (:return, :n)
      )),
    (:line, 206, :none),
    (:(=), (:call, :shift!, (:(::), :s, :IntSet)), (:block,
        (:line, 206, :none),
        (:call, :pop!, :s, (:call, :first, :s))
      )),
    (:line, 208, :none),
    (:function, (:call, :last, (:(::), :s, :IntSet)), (:block,
        (:line, 209, :none),
        (:if, (:call, :!, (:., :s, (:quote, #QuoteNode
                :fill1s
              ))), (:block,
            (:line, 210, :none),
            (:for, (:(=), :i, (:(:), (:call, :length, (:., :s, (:quote, #QuoteNode
                        :bits
                      ))), -1, 1)), (:block,
                (:line, 211, :none),
                (:(=), :w, (:ref, (:., :s, (:quote, #QuoteNode
                        :bits
                      )), :i)),
                (:line, 212, :none),
                (:if, (:call, :(!=), :w, 0), (:block,
                    (:line, 213, :none),
                    (:return, (:call, :+, (:call, :<<, (:call, :-, :i, 1), 5), (:call, :-, 31, (:call, :leading_zeros, :w))))
                  ))
              ))
          )),
        (:line, 217, :none),
        (:call, :throw, (:call, :ArgumentError, "set has no last element"))
      )),
    (:line, 220, :none),
    (:(=), (:call, :length, (:(::), :s, :IntSet)), (:block,
        (:line, 220, :none),
        (:call, :+, (:call, :Int, (:ccall, (:quote, #QuoteNode
                :bitvector_count
              ), :UInt64, (:tuple, (:curly, :Ptr, :UInt32), :UInt64, :UInt64), (:., :s, (:quote, #QuoteNode
                  :bits
                )), 0, (:., :s, (:quote, #QuoteNode
                  :limit
                )))), (:if, (:., :s, (:quote, #QuoteNode
                :fill1s
              )), (:call, :-, (:call, :typemax, :Int), (:., :s, (:quote, #QuoteNode
                  :limit
                ))), 0))
      )),
    (:line, 225, :none),
    (:function, (:call, :union!, (:(::), :s, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 226, :none),
        (:if, (:call, :>, (:., :s2, (:quote, #QuoteNode
                :limit
              )), (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 227, :none),
            (:call, :sizehint!, :s, (:., :s2, (:quote, #QuoteNode
                  :limit
                )))
          )),
        (:line, 229, :none),
        (:(=), :lim, (:call, :length, (:., :s2, (:quote, #QuoteNode
                :bits
              )))),
        (:line, 230, :none),
        (:for, (:(=), :n, (:(:), 1, :lim)), (:block,
            (:line, 231, :none),
            (:|=, (:ref, (:., :s, (:quote, #QuoteNode
                    :bits
                  )), :n), (:ref, (:., :s2, (:quote, #QuoteNode
                    :bits
                  )), :n))
          )),
        (:line, 233, :none),
        (:if, (:., :s2, (:quote, #QuoteNode
              :fill1s
            )), (:block,
            (:line, 234, :none),
            (:for, (:(=), :n, (:(:), (:call, :+, :lim, 1), (:call, :length, (:., :s, (:quote, #QuoteNode
                        :bits
                      ))))), (:block,
                (:line, 235, :none),
                (:(=), (:ref, (:., :s, (:quote, #QuoteNode
                        :bits
                      )), :n), (:call, :UInt32, -1))
              ))
          )),
        (:line, 238, :none),
        (:|=, (:., :s, (:quote, #QuoteNode
              :fill1s
            )), (:., :s2, (:quote, #QuoteNode
              :fill1s
            ))),
        (:line, 239, :none),
        :s
      )),
    (:line, 242, :none),
    (:(=), (:call, :union, (:(::), :s1, :IntSet)), (:block,
        (:line, 242, :none),
        (:call, :copy, :s1)
      )),
    (:line, 243, :none),
    (:(=), (:call, :union, (:(::), :s1, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 243, :none),
        (:if, (:call, :(>=), (:., :s1, (:quote, #QuoteNode
                :limit
              )), (:., :s2, (:quote, #QuoteNode
                :limit
              ))), (:call, :union!, (:call, :copy, :s1), :s2), (:call, :union!, (:call, :copy, :s2), :s1))
      )),
    (:line, 244, :none),
    (:(=), (:call, :union, (:(::), :s1, :IntSet), (:..., (:(::), :ss, :IntSet))), (:block,
        (:line, 244, :none),
        (:call, :union, :s1, (:call, :union, (:..., :ss)))
      )),
    (:line, 246, :none),
    (:function, (:call, :intersect!, (:(::), :s, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 247, :none),
        (:if, (:call, :>, (:., :s2, (:quote, #QuoteNode
                :limit
              )), (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 248, :none),
            (:call, :sizehint!, :s, (:., :s2, (:quote, #QuoteNode
                  :limit
                )))
          )),
        (:line, 250, :none),
        (:(=), :lim, (:call, :length, (:., :s2, (:quote, #QuoteNode
                :bits
              )))),
        (:line, 251, :none),
        (:for, (:(=), :n, (:(:), 1, :lim)), (:block,
            (:line, 252, :none),
            (:&=, (:ref, (:., :s, (:quote, #QuoteNode
                    :bits
                  )), :n), (:ref, (:., :s2, (:quote, #QuoteNode
                    :bits
                  )), :n))
          )),
        (:line, 254, :none),
        (:if, (:call, :!, (:., :s2, (:quote, #QuoteNode
                :fill1s
              ))), (:block,
            (:line, 255, :none),
            (:for, (:(=), :n, (:(:), (:call, :+, :lim, 1), (:call, :length, (:., :s, (:quote, #QuoteNode
                        :bits
                      ))))), (:block,
                (:line, 256, :none),
                (:(=), (:ref, (:., :s, (:quote, #QuoteNode
                        :bits
                      )), :n), (:call, :UInt32, 0))
              ))
          )),
        (:line, 259, :none),
        (:&=, (:., :s, (:quote, #QuoteNode
              :fill1s
            )), (:., :s2, (:quote, #QuoteNode
              :fill1s
            ))),
        (:line, 260, :none),
        :s
      )),
    (:line, 263, :none),
    (:(=), (:call, :intersect, (:(::), :s1, :IntSet)), (:block,
        (:line, 263, :none),
        (:call, :copy, :s1)
      )),
    (:line, 264, :none),
    (:(=), (:call, :intersect, (:(::), :s1, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 264, :none),
        (:if, (:call, :(>=), (:., :s1, (:quote, #QuoteNode
                :limit
              )), (:., :s2, (:quote, #QuoteNode
                :limit
              ))), (:call, :intersect!, (:call, :copy, :s1), :s2), (:call, :intersect!, (:call, :copy, :s2), :s1))
      )),
    (:line, 266, :none),
    (:(=), (:call, :intersect, (:(::), :s1, :IntSet), (:..., (:(::), :ss, :IntSet))), (:block,
        (:line, 266, :none),
        (:call, :intersect, :s1, (:call, :intersect, (:..., :ss)))
      )),
    (:line, 268, :none),
    "    symdiff!(s1, s2)\n\nConstruct the symmetric difference of sets `s1` and `s2`, storing the result in `s1`.\n",
    (:line, 273, :none),
    (:function, (:call, :symdiff!, (:(::), :s, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 274, :none),
        (:if, (:call, :>, (:., :s2, (:quote, #QuoteNode
                :limit
              )), (:., :s, (:quote, #QuoteNode
                :limit
              ))), (:block,
            (:line, 275, :none),
            (:call, :sizehint!, :s, (:., :s2, (:quote, #QuoteNode
                  :limit
                )))
          )),
        (:line, 277, :none),
        (:(=), :lim, (:call, :length, (:., :s2, (:quote, #QuoteNode
                :bits
              )))),
        (:line, 278, :none),
        (:for, (:(=), :n, (:(:), 1, :lim)), (:block,
            (:line, 279, :none),
            (:$=, (:ref, (:., :s, (:quote, #QuoteNode
                    :bits
                  )), :n), (:ref, (:., :s2, (:quote, #QuoteNode
                    :bits
                  )), :n))
          )),
        (:line, 281, :none),
        (:if, (:., :s2, (:quote, #QuoteNode
              :fill1s
            )), (:block,
            (:line, 282, :none),
            (:for, (:(=), :n, (:(:), (:call, :+, :lim, 1), (:call, :length, (:., :s, (:quote, #QuoteNode
                        :bits
                      ))))), (:block,
                (:line, 283, :none),
                (:(=), (:ref, (:., :s, (:quote, #QuoteNode
                        :bits
                      )), :n), (:call, :~, (:ref, (:., :s, (:quote, #QuoteNode
                          :bits
                        )), :n)))
              ))
          )),
        (:line, 286, :none),
        (:$=, (:., :s, (:quote, #QuoteNode
              :fill1s
            )), (:., :s2, (:quote, #QuoteNode
              :fill1s
            ))),
        (:line, 287, :none),
        :s
      )),
    (:line, 290, :none),
    (:function, (:call, :(==), (:(::), :s1, :IntSet), (:(::), :s2, :IntSet)), (:block,
        (:line, 291, :none),
        (:if, (:call, :(!=), (:., :s1, (:quote, #QuoteNode
                :fill1s
              )), (:., :s2, (:quote, #QuoteNode
                :fill1s
              ))), (:block,
            (:line, 292, :none),
            (:return, false)
          )),
        (:line, 294, :none),
        (:(=), :lim1, (:call, :length, (:., :s1, (:quote, #QuoteNode
                :bits
              )))),
        (:line, 295, :none),
        (:(=), :lim2, (:call, :length, (:., :s2, (:quote, #QuoteNode
                :bits
              )))),
        (:line, 296, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :min, :lim1, :lim2))), (:block,
            (:line, 297, :none),
            (:if, (:call, :(!=), (:ref, (:., :s1, (:quote, #QuoteNode
                      :bits
                    )), :i), (:ref, (:., :s2, (:quote, #QuoteNode
                      :bits
                    )), :i)), (:block,
                (:line, 298, :none),
                (:return, false)
              ))
          )),
        (:line, 301, :none),
        (:(=), :filln, (:if, (:., :s1, (:quote, #QuoteNode
                :fill1s
              )), (:call, :reinterpret, :UInt32, (:call, :Int32, -1)), (:call, :UInt32, 0))),
        (:line, 302, :none),
        (:if, (:call, :>, :lim1, :lim2), (:block,
            (:line, 303, :none),
            (:for, (:(=), :i, (:(:), :lim2, :lim1)), (:block,
                (:line, 304, :none),
                (:if, (:call, :(!=), (:ref, (:., :s1, (:quote, #QuoteNode
                          :bits
                        )), :i), :filln), (:block,
                    (:line, 305, :none),
                    (:return, false)
                  ))
              ))
          ), (:block,
            (:line, 309, :none),
            (:for, (:(=), :i, (:(:), (:call, :+, :lim1, 1), :lim2)), (:block,
                (:line, 310, :none),
                (:if, (:call, :(!=), (:ref, (:., :s2, (:quote, #QuoteNode
                          :bits
                        )), :i), :filln), (:block,
                    (:line, 311, :none),
                    (:return, false)
                  ))
              ))
          )),
        (:line, 315, :none),
        (:return, true)
      )),
    (:line, 318, :none),
    (:const, (:(=), :hashis_seed, (:if, (:call, :(===), :UInt, :UInt64), 0x88989f1fc7dea67d, 0xc7dea67d))),
    (:line, 319, :none),
    (:function, (:call, :hash, (:(::), :s, :IntSet), (:(::), :h, :UInt)), (:block,
        (:line, 320, :none),
        (:+=, :h, :hashis_seed),
        (:line, 321, :none),
        (:+=, :h, (:call, :hash, (:., :s, (:quote, #QuoteNode
                :fill1s
              )))),
        (:line, 322, :none),
        (:(=), :filln, (:if, (:., :s, (:quote, #QuoteNode
                :fill1s
              )), (:call, :~, (:call, :zero, (:call, :eltype, (:., :s, (:quote, #QuoteNode
                      :bits
                    ))))), (:call, :zero, (:call, :eltype, (:., :s, (:quote, #QuoteNode
                    :bits
                  )))))),
        (:line, 323, :none),
        (:for, (:(=), :x, (:., :s, (:quote, #QuoteNode
                :bits
              ))), (:block,
            (:line, 324, :none),
            (:if, (:call, :(!=), :x, :filln), (:block,
                (:line, 325, :none),
                (:(=), :h, (:call, :hash, :x, :h))
              ))
          )),
        (:line, 328, :none),
        (:return, :h)
      )),
    (:line, 331, :none),
    (:(=), (:call, :issubset, (:(::), :a, :IntSet), (:(::), :b, :IntSet)), (:block,
        (:line, 331, :none),
        (:call, :isequal, :a, (:call, :intersect, :a, :b))
      )),
    (:line, 332, :none),
    (:(=), (:call, :<, (:(::), :a, :IntSet), (:(::), :b, :IntSet)), (:block,
        (:line, 332, :none),
        (:&&, (:call, :(<=), :a, :b), (:call, :!, (:call, :isequal, :a, :b)))
      )),
    (:line, 333, :none),
    (:(=), (:call, :(<=), (:(::), :a, :IntSet), (:(::), :b, :IntSet)), (:block,
        (:line, 333, :none),
        (:call, :issubset, :a, :b)
      ))
  ))