(:quote, (:block,
    (:line, 3, :none),
    "    is_unix([os])\n\nPredicate for testing if the OS provides a Unix-like interface.\nSee documentation in [Handling Operating System Variation](:ref:`Handling Operating System Variation <man-handling-operating-system-variation>`).\n",
    (:line, 9, :none),
    (:function, (:call, :is_unix, (:(::), :os, :Symbol)), (:block,
        (:line, 10, :none),
        (:if, (:call, :is_windows, :os), (:block,
            (:line, 11, :none),
            (:return, false)
          ), (:block,
            (:line, 12, :none),
            (:if, (:||, (:call, :is_linux, :os), (:call, :is_bsd, :os)), (:block,
                (:line, 13, :none),
                (:return, true)
              ), (:block,
                (:line, 15, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "unknown operating system \"", :os, "\"")))
              ))
          ))
      )),
    (:line, 19, :none),
    "    is_linux([os])\n\nPredicate for testing if the OS is a derivative of Linux.\nSee documentation in [Handling Operating System Variation](:ref:`Handling Operating System Variation <man-handling-operating-system-variation>`).\n",
    (:line, 25, :none),
    (:(=), (:call, :is_linux, (:(::), :os, :Symbol)), (:block,
        (:line, 25, :none),
        (:call, :(==), :os, (:quote, #QuoteNode
            :Linux
          ))
      )),
    (:line, 27, :none),
    "    is_bsd([os])\n\nPredicate for testing if the OS is a derivative of BSD.\nSee documentation in [Handling Operating System Variation](:ref:`Handling Operating System Variation <man-handling-operating-system-variation>`).\n",
    (:line, 33, :none),
    (:(=), (:call, :is_bsd, (:(::), :os, :Symbol)), (:block,
        (:line, 33, :none),
        (:||, (:call, :(==), :os, (:quote, #QuoteNode
              :FreeBSD
            )), (:||, (:call, :(==), :os, (:quote, #QuoteNode
                :OpenBSD
              )), (:||, (:call, :(==), :os, (:quote, #QuoteNode
                  :NetBSD
                )), (:||, (:call, :(==), :os, (:quote, #QuoteNode
                    :Darwin
                  )), (:call, :(==), :os, (:quote, #QuoteNode
                    :Apple
                  ))))))
      )),
    (:line, 35, :none),
    "    is_windows([os])\n\nPredicate for testing if the OS is a derivative of Microsoft Windows NT.\nSee documentation in [Handling Operating System Variation](:ref:`Handling Operating System Variation <man-handling-operating-system-variation>`).\n",
    (:line, 41, :none),
    (:(=), (:call, :is_windows, (:(::), :os, :Symbol)), (:block,
        (:line, 41, :none),
        (:||, (:call, :(==), :os, (:quote, #QuoteNode
              :Windows
            )), (:call, :(==), :os, (:quote, #QuoteNode
              :NT
            )))
      )),
    (:line, 43, :none),
    "    is_apple([os])\n\nPredicate for testing if the OS is a derivative of Apple Macintosh OS X or Darwin.\nSee documentation in [Handling Operating System Variation](:ref:`Handling Operating System Variation <man-handling-operating-system-variation>`).\n",
    (:line, 49, :none),
    (:(=), (:call, :is_apple, (:(::), :os, :Symbol)), (:block,
        (:line, 49, :none),
        (:||, (:call, :(==), :os, (:quote, #QuoteNode
              :Apple
            )), (:call, :(==), :os, (:quote, #QuoteNode
              :Darwin
            )))
      )),
    (:line, 51, :none),
    "    @static\n\nPartially evaluates an expression at parse time.\n\nFor example, `@static is_windows() ? foo : bar` will evaluate `is_windows()` and insert either `foo` or `bar` into the expression.\nThis is useful in cases where a construct would be invalid on other platforms,\nsuch as a `ccall` to a non-existent function.\n",
    (:line, 60, :none),
    (:macro, (:call, :static, :ex), (:block,
        (:line, 61, :none),
        (:if, (:call, :isa, :ex, :Expr), (:block,
            (:line, 62, :none),
            (:if, (:call, :(===), (:., :ex, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :if
                )), (:block,
                (:line, 63, :none),
                (:(=), :cond, (:call, :eval, (:call, :current_module), (:ref, (:., :ex, (:quote, #QuoteNode
                          :args
                        )), 1))),
                (:line, 64, :none),
                (:if, :cond, (:block,
                    (:line, 65, :none),
                    (:return, (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                              :args
                            )), 2)))
                  ), (:block,
                    (:line, 66, :none),
                    (:if, (:call, :(==), (:call, :length, (:., :ex, (:quote, #QuoteNode
                              :args
                            ))), 3), (:block,
                        (:line, 67, :none),
                        (:return, (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                                  :args
                                )), 3)))
                      ), (:block,
                        (:line, 69, :none),
                        (:return, :nothing)
                      ))
                  ))
              ))
          )),
        (:line, 73, :none),
        (:call, :throw, (:call, :ArgumentError, "invalid @static macro"))
      )),
    (:line, 76, :none),
    (:let, (:block,
        (:line, 80, :none),
        (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
                :is_unix
              ), (:quote, #QuoteNode
                :is_linux
              ), (:quote, #QuoteNode
                :is_bsd
              ), (:quote, #QuoteNode
                :is_apple
              ), (:quote, #QuoteNode
                :is_windows
              ))), (:block,
            (:line, 81, :none),
            (:macrocall, Symbol("@eval"), (:(=), (:call, (:$, :f)), (:block,
                  (:line, 81, :none),
                  (:$, (:call, (:call, :getfield, (:call, :current_module), :f), :KERNEL))
                )))
          ))
      ), (:(=), :KERNEL, (:ccall, (:quote, #QuoteNode
            :jl_get_UNAME
          ), :Any, (:tuple,))))
  ))