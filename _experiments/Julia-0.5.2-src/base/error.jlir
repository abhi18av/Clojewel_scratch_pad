(:quote, (:block,
    (:line, 21, :none),
    (:(=), (:call, :error, (:(::), :s, :AbstractString)), (:block,
        (:line, 21, :none),
        (:call, :throw, (:call, :ErrorException, :s))
      )),
    (:line, 22, :none),
    (:(=), (:call, :error, (:..., :s)), (:block,
        (:line, 22, :none),
        (:call, :throw, (:call, :ErrorException, (:call, (:., (:., :Main, (:quote, #QuoteNode
                    :Base
                  )), (:quote, #QuoteNode
                  :string
                )), (:..., :s))))
      )),
    (:line, 24, :none),
    (:(=), (:call, :rethrow), (:block,
        (:line, 24, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_rethrow
          ), :Bottom, (:tuple,))
      )),
    (:line, 25, :none),
    (:(=), (:call, :rethrow, :e), (:block,
        (:line, 25, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_rethrow_other
          ), :Bottom, (:tuple, :Any), :e)
      )),
    (:line, 26, :none),
    (:(=), (:call, :backtrace), (:block,
        (:line, 26, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_backtrace_from_here
          ), (:curly, :Array, (:curly, :Ptr, :Void), 1), (:tuple, :Int32), false)
      )),
    (:line, 27, :none),
    (:(=), (:call, :catch_backtrace), (:block,
        (:line, 27, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_get_backtrace
          ), (:curly, :Array, (:curly, :Ptr, :Void), 1), (:tuple,))
      )),
    (:line, 30, :none),
    (:(=), (:call, :kwerr, :kw, (:..., :args)), (:block,
        (:line, 30, :none),
        (:call, :throw, (:call, :MethodError, (:., (:., (:., (:call, :typeof, (:ref, :args, 1)), (:quote, #QuoteNode
                    :name
                  )), (:quote, #QuoteNode
                  :mt
                )), (:quote, #QuoteNode
                :kwsorter
              )), (:tuple, :kw, (:..., :args))))
      )),
    (:line, 34, :none),
    (:(=), (:call, :systemerror, (:parameters, (:kw, :extrainfo, :nothing)), :p, (:(::), :b, :Bool)), (:block,
        (:line, 34, :none),
        (:if, :b, (:call, :throw, (:call, (:., (:., :Main, (:quote, #QuoteNode
                    :Base
                  )), (:quote, #QuoteNode
                  :SystemError
                )), (:call, :string, :p), (:call, (:., :Libc, (:quote, #QuoteNode
                    :errno
                  ))), :extrainfo)), :nothing)
      )),
    (:line, 38, :none),
    (:(=), (:call, :assert, :x), (:block,
        (:line, 38, :none),
        (:if, :x, :nothing, (:call, :throw, (:call, (:., (:., :Main, (:quote, #QuoteNode
                    :Base
                  )), (:quote, #QuoteNode
                  :AssertionError
                )))))
      )),
    (:line, 39, :none),
    (:macro, (:call, :assert, :ex, (:..., :msgs)), (:block,
        (:line, 40, :none),
        (:(=), :msg, (:if, (:call, :isempty, :msgs), :ex, (:ref, :msgs, 1))),
        (:line, 41, :none),
        (:if, (:&&, (:call, :!, (:call, :isempty, :msgs)), (:||, (:call, :isa, :msg, :Expr), (:call, :isa, :msg, :Symbol))), (:block,
            (:line, 43, :none),
            (:(=), :msg, (:quote, (:call, (:., (:., :Main, (:quote, #QuoteNode
                        :Base
                      )), (:quote, #QuoteNode
                      :string
                    )), (:$, (:call, :esc, :msg)))))
          ), (:block,
            (:line, 44, :none),
            (:if, (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                    :Base
                  )), (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                      :Base
                    )), (:quote, #QuoteNode
                    :string
                  ))), (:block,
                (:line, 45, :none),
                (:(=), :msg, (:call, (:., (:., :Main, (:quote, #QuoteNode
                          :Base
                        )), (:quote, #QuoteNode
                        :string
                      )), :msg))
              ), (:block,
                (:line, 48, :none),
                (:(=), :msg, (:quote, (:call, (:., (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :string
                        )), (:$, (:call, :Expr, (:quote, #QuoteNode
                            :quote
                          ), :msg)))))
              ))
          )),
        (:line, 50, :none),
        (:quote, (:if, (:$, (:call, :esc, :ex)), (:$, :nothing), (:call, :throw, (:call, (:., (:., :Main, (:quote, #QuoteNode
                      :Base
                    )), (:quote, #QuoteNode
                    :AssertionError
                  )), (:$, :msg)))))
      )),
    (:line, 54, :none),
    (:const, (:(=), :DEFAULT_RETRY_N, 1)),
    (:line, 55, :none),
    (:const, (:(=), :DEFAULT_RETRY_ON, (:->, :e, (:block,
            (:line, 55, :none),
            true
          )))),
    (:line, 56, :none),
    (:const, (:(=), :DEFAULT_RETRY_MAX_DELAY, 10.0)),
    (:line, 58, :none),
    "    retry(f, [retry_on]; n=1, max_delay=10.0) -> Function\n\nReturns a lambda that retries function `f` up to `n` times in the\nevent of an exception. If `retry_on` is a `Type` then retry only\nfor exceptions of that type. If `retry_on` is a function\n`test_error(::Exception) -> Bool` then retry only if it is true.\n\nThe first retry happens after a gap of 50 milliseconds or `max_delay`,\nwhichever is lower. Subsequently, the delays between retries are\nexponentially increased with a random factor up to `max_delay`.\n\n**Examples**\n```julia\nretry(http_get, e -> e.status == \"503\")(url)\nretry(read, UVError)(io)\n```\n",
    (:line, 76, :none),
    (:function, (:call, :retry, (:parameters, (:kw, :n, :DEFAULT_RETRY_N), (:kw, :max_delay, :DEFAULT_RETRY_MAX_DELAY)), (:(::), :f, :Function), (:kw, (:(::), :retry_on, :Function), :DEFAULT_RETRY_ON)), (:block,
        (:line, 77, :none),
        (:->, (:tuple, (:..., :args)), (:block,
            (:line, 77, :none),
            (:block,
              (:line, 78, :none),
              (:(=), :delay, (:call, :min, 0.05, :max_delay)),
              (:line, 79, :none),
              (:for, (:(=), :i, (:(:), 1, (:call, :+, :n, 1))), (:block,
                  (:line, 80, :none),
                  (:try, (:block,
                      (:line, 81, :none),
                      (:return, (:call, :f, (:..., :args)))
                    ), :e, (:block,
                      (:line, 83, :none),
                      (:if, (:||, (:call, :>, :i, :n), (:call, :(!==), (:try, (:block,
                                (:line, 83, :none),
                                (:call, :retry_on, :e)
                              ), false, (:block,)), true)), (:block,
                          (:line, 84, :none),
                          (:call, :rethrow, :e)
                        ))
                    )),
                  (:line, 87, :none),
                  (:(=), :delay, (:call, :min, :max_delay, :delay)),
                  (:line, 88, :none),
                  (:call, :sleep, (:call, :*, :delay, (:call, :+, 0.8, (:call, :*, (:call, :rand), 0.2)))),
                  (:line, 89, :none),
                  (:(=), :delay, (:call, :*, :delay, 5))
                ))
            )
          ))
      )),
    (:line, 94, :none),
    (:(=), (:call, :retry, (:parameters, (:..., :kw)), (:(::), :f, :Function), (:(::), :t, :Type)), (:block,
        (:line, 94, :none),
        (:call, :retry, (:parameters, (:..., :kw)), :f, (:->, :e, (:block,
              (:line, 94, :none),
              (:call, :isa, :e, :t)
            )))
      ))
  ))