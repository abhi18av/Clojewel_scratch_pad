(:quote, (:block,
    (:line, 5, :none),
    (:abstract, (:<:, (:curly, :Range, :T), (:curly, :AbstractArray, :T, 1))),
    (:line, 9, :none),
    (:abstract, (:<:, (:curly, :OrdinalRange, :T, :S), (:curly, :Range, :T))),
    (:line, 10, :none),
    (:abstract, (:<:, (:curly, :AbstractUnitRange, :T), (:curly, :OrdinalRange, :T, :Int))),
    (:line, 12, :none),
    (:type, false, (:<:, (:curly, :StepRange, :T, :S), (:curly, :OrdinalRange, :T, :S)), (:block,
        (:line, 13, :none),
        (:(::), :start, :T),
        (:line, 14, :none),
        (:(::), :step, :S),
        (:line, 15, :none),
        (:(::), :stop, :T),
        (:line, 17, :none),
        (:function, (:call, :StepRange, (:(::), :start, :T), (:(::), :step, :S), (:(::), :stop, :T)), (:block,
            (:line, 18, :none),
            (:call, :new, :start, :step, (:call, :steprange_last, :start, :step, :stop))
          ))
      )),
    (:line, 23, :none),
    (:function, (:call, (:curly, :steprange_last, :T), (:(::), :start, :T), :step, :stop), (:block,
        (:line, 24, :none),
        (:if, (:||, (:call, :isa, :start, :AbstractFloat), (:call, :isa, :step, :AbstractFloat)), (:block,
            (:line, 25, :none),
            (:call, :throw, (:call, :ArgumentError, "StepRange should not be used with floating point"))
          )),
        (:line, 27, :none),
        (:(=), :z, (:call, :zero, :step)),
        (:line, 28, :none),
        (:&&, (:call, :(==), :step, :z), (:call, :throw, (:call, :ArgumentError, "step cannot be zero"))),
        (:line, 30, :none),
        (:if, (:call, :(==), :stop, :start), (:block,
            (:line, 31, :none),
            (:(=), :last, :stop)
          ), (:block,
            (:line, 33, :none),
            (:if, (:call, :(!=), (:call, :>, :step, :z), (:call, :>, :stop, :start)), (:block,
                (:line, 34, :none),
                (:(=), :last, (:call, :steprange_last_empty, :start, :step, :stop))
              ), (:block,
                (:line, 36, :none),
                (:(=), :diff, (:call, :-, :stop, :start)),
                (:line, 37, :none),
                (:if, (:&&, (:<:, :T, :Signed), (:call, :(!=), (:call, :>, :diff, (:call, :zero, :diff)), (:call, :>, :stop, :start))), (:block,
                    (:line, 39, :none),
                    (:if, (:call, :>, :diff, (:call, :zero, :diff)), (:block,
                        (:line, 40, :none),
                        (:(=), :remain, (:call, :-, (:call, :convert, :T, (:call, :%, (:call, :unsigned, (:call, :-, :diff)), :step))))
                      ), (:block,
                        (:line, 42, :none),
                        (:(=), :remain, (:call, :convert, :T, (:call, :%, (:call, :unsigned, :diff), :step)))
                      ))
                  ), (:block,
                    (:line, 45, :none),
                    (:(=), :remain, (:call, :steprem, :start, :stop, :step))
                  )),
                (:line, 47, :none),
                (:(=), :last, (:call, :-, :stop, :remain))
              ))
          )),
        (:line, 50, :none),
        :last
      )),
    (:line, 53, :none),
    (:function, (:call, (:curly, :steprange_last_empty, (:<:, :T, :Integer)), (:(::), :start, :T), :step, :stop), (:block,
        (:line, 58, :none),
        (:if, (:call, :>, :step, (:call, :zero, :step)), (:block,
            (:line, 59, :none),
            (:(=), :last, (:call, :-, :start, (:call, :one, (:call, :-, :stop, :start))))
          ), (:block,
            (:line, 61, :none),
            (:(=), :last, (:call, :+, :start, (:call, :one, (:call, :-, :stop, :start))))
          )),
        (:line, 63, :none),
        :last
      )),
    (:line, 66, :none),
    (:(=), (:call, :steprange_last_empty, :start, :step, :stop), (:block,
        (:line, 66, :none),
        (:call, :-, :start, :step)
      )),
    (:line, 68, :none),
    (:(=), (:call, :steprem, :start, :stop, :step), (:block,
        (:line, 68, :none),
        (:call, :%, (:call, :-, :stop, :start), :step)
      )),
    (:line, 70, :none),
    (:(=), (:call, (:curly, :StepRange, :T, :S), (:(::), :start, :T), (:(::), :step, :S), (:(::), :stop, :T)), (:block,
        (:line, 70, :none),
        (:call, (:curly, :StepRange, :T, :S), :start, :step, :stop)
      )),
    (:line, 72, :none),
    (:type, false, (:<:, (:curly, :UnitRange, (:<:, :T, :Real)), (:curly, :AbstractUnitRange, :T)), (:block,
        (:line, 73, :none),
        (:(::), :start, :T),
        (:line, 74, :none),
        (:(::), :stop, :T),
        (:line, 75, :none),
        (:(=), (:call, :UnitRange, :start, :stop), (:block,
            (:line, 75, :none),
            (:call, :new, :start, (:call, :unitrange_last, :start, :stop))
          ))
      )),
    (:line, 77, :none),
    (:(=), (:call, (:curly, :UnitRange, (:<:, :T, :Real)), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 77, :none),
        (:call, (:curly, :UnitRange, :T), :start, :stop)
      )),
    (:line, 79, :none),
    (:(=), (:call, :unitrange_last, (:(::), :Bool), (:(::), :stop, :Bool)), (:block,
        (:line, 79, :none),
        :stop
      )),
    (:line, 80, :none),
    (:(=), (:call, (:curly, :unitrange_last, (:<:, :T, :Integer)), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 80, :none),
        (:call, :ifelse, (:call, :(>=), :stop, :start), :stop, (:call, :convert, :T, (:call, :-, :start, (:call, :one, (:call, :-, :stop, :start)))))
      )),
    (:line, 82, :none),
    (:(=), (:call, (:curly, :unitrange_last, :T), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 82, :none),
        (:call, :ifelse, (:call, :(>=), :stop, :start), (:call, :convert, :T, (:call, :+, :start, (:call, :floor, (:call, :-, :stop, :start)))), (:call, :convert, :T, (:call, :-, :start, (:call, :one, (:call, :-, :stop, :start)))))
      )),
    (:line, 86, :none),
    "    Base.OneTo(n)\n\nDefine an `AbstractUnitRange` that behaves like `1:n`, with the added\ndistinction that the lower limit is guaranteed (by the type system) to\nbe 1.\n",
    (:line, 93, :none),
    (:type, false, (:<:, (:curly, :OneTo, (:<:, :T, :Integer)), (:curly, :AbstractUnitRange, :T)), (:block,
        (:line, 94, :none),
        (:(::), :stop, :T),
        (:line, 95, :none),
        (:(=), (:call, :OneTo, :stop), (:block,
            (:line, 95, :none),
            (:call, :new, (:call, :max, (:call, :zero, :T), :stop))
          ))
      )),
    (:line, 97, :none),
    (:(=), (:call, (:curly, :OneTo, (:<:, :T, :Integer)), (:(::), :stop, :T)), (:block,
        (:line, 97, :none),
        (:call, (:curly, :OneTo, :T), :stop)
      )),
    (:line, 99, :none),
    (:(=), (:call, :colon, (:(::), :a, :Real), (:(::), :b, :Real)), (:block,
        (:line, 99, :none),
        (:call, :colon, (:..., (:call, :promote, :a, :b)))
      )),
    (:line, 101, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :Real)), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 101, :none),
        (:call, (:curly, :UnitRange, :T), :start, :stop)
      )),
    (:line, 103, :none),
    (:(=), (:call, :range, (:(::), :a, :Real), (:(::), :len, :Integer)), (:block,
        (:line, 103, :none),
        (:call, (:curly, :UnitRange, (:call, :typeof, :a)), :a, (:call, :oftype, :a, (:call, :-, (:call, :+, :a, :len), 1)))
      )),
    (:line, 105, :none),
    (:(=), (:call, (:curly, :colon, :T), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 105, :none),
        (:call, :StepRange, :start, (:call, :one, (:call, :-, :stop, :start)), :stop)
      )),
    (:line, 107, :none),
    (:(=), (:call, (:curly, :range, :T), (:(::), :a, :T), (:(::), :len, :Integer)), (:block,
        (:line, 107, :none),
        (:call, (:curly, :StepRange, :T, (:call, :typeof, (:call, :-, :a, :a))), :a, (:call, :one, (:call, :-, :a, :a)), (:call, :+, :a, (:call, :oftype, (:call, :-, :a, :a), (:call, :-, :len, 1))))
      )),
    (:line, 112, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :A, :Real), (:<:, :C, :Real)), (:(::), :a, :A), :b, (:(::), :c, :C)), (:block,
        (:line, 112, :none),
        (:call, :colon, (:call, :convert, (:call, :promote_type, :A, :C), :a), :b, (:call, :convert, (:call, :promote_type, :A, :C), :c))
      )),
    (:line, 114, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :Real)), (:(::), :start, :T), :step, (:(::), :stop, :T)), (:block,
        (:line, 114, :none),
        (:call, :StepRange, :start, :step, :stop)
      )),
    (:line, 115, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :Real)), (:(::), :start, :T), (:(::), :step, :T), (:(::), :stop, :T)), (:block,
        (:line, 115, :none),
        (:call, :StepRange, :start, :step, :stop)
      )),
    (:line, 116, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :Real)), (:(::), :start, :T), (:(::), :step, :Real), (:(::), :stop, :T)), (:block,
        (:line, 116, :none),
        (:call, :StepRange, (:..., (:call, :promote, :start, :step, :stop)))
      )),
    (:line, 118, :none),
    (:(=), (:call, (:curly, :colon, :T), (:(::), :start, :T), :step, (:(::), :stop, :T)), (:block,
        (:line, 118, :none),
        (:call, :StepRange, :start, :step, :stop)
      )),
    (:line, 120, :none),
    (:(=), (:call, (:curly, :range, :T, :S), (:(::), :a, :T), (:(::), :step, :S), (:(::), :len, :Integer)), (:block,
        (:line, 120, :none),
        (:call, (:curly, :StepRange, :T, :S), :a, :step, (:call, :convert, :T, (:call, :+, :a, (:call, :*, :step, (:call, :-, :len, 1)))))
      )),
    (:line, 124, :none),
    (:type, false, (:<:, (:curly, :FloatRange, (:<:, :T, :AbstractFloat)), (:curly, :Range, :T)), (:block,
        (:line, 125, :none),
        (:(::), :start, :T),
        (:line, 126, :none),
        (:(::), :step, :T),
        (:line, 127, :none),
        (:(::), :len, :T),
        (:line, 128, :none),
        (:(::), :divisor, :T)
      )),
    (:line, 130, :none),
    (:(=), (:call, :FloatRange, (:(::), :a, :AbstractFloat), (:(::), :s, :AbstractFloat), (:(::), :l, :Real), (:(::), :d, :AbstractFloat)), (:block,
        (:line, 130, :none),
        (:call, (:curly, :FloatRange, (:call, :promote_type, (:call, :typeof, :a), (:call, :typeof, :s), (:call, :typeof, :d))), :a, :s, :l, :d)
      )),
    (:line, 134, :none),
    (:function, (:call, :rat, :x), (:block,
        (:line, 135, :none),
        (:(=), :y, :x),
        (:line, 136, :none),
        (:(=), :a, (:(=), :d, 1)),
        (:line, 137, :none),
        (:(=), :b, (:(=), :c, 0)),
        (:line, 138, :none),
        (:(=), :m, (:call, :maxintfloat, :Float32)),
        (:line, 139, :none),
        (:while, (:call, :(<=), (:call, :abs, :y), :m), (:block,
            (:line, 140, :none),
            (:(=), :f, (:call, :trunc, :Int, :y)),
            (:line, 141, :none),
            (:-=, :y, :f),
            (:line, 142, :none),
            (:(=), (:tuple, :a, :c), (:tuple, (:call, :+, (:call, :*, :f, :a), :c), :a)),
            (:line, 143, :none),
            (:(=), (:tuple, :b, :d), (:tuple, (:call, :+, (:call, :*, :f, :b), :d), :b)),
            (:line, 144, :none),
            (:||, (:call, :(<=), (:call, :max, (:call, :abs, :a), (:call, :abs, :b)), (:call, :convert, :Int, :m)), (:return, (:tuple, :c, :d))),
            (:line, 145, :none),
            (:&&, (:call, :(==), (:call, :/, (:call, :oftype, :x, :a), (:call, :oftype, :x, :b)), :x), (:break,)),
            (:line, 146, :none),
            (:(=), :y, (:call, :inv, :y))
          )),
        (:line, 148, :none),
        (:return, (:tuple, :a, :b))
      )),
    (:line, 151, :none),
    (:function, (:call, (:curly, :colon, (:<:, :T, :AbstractFloat)), (:(::), :start, :T), (:(::), :step, :T), (:(::), :stop, :T)), (:block,
        (:line, 152, :none),
        (:&&, (:call, :(==), :step, 0), (:call, :throw, (:call, :ArgumentError, "range step cannot be zero"))),
        (:line, 153, :none),
        (:&&, (:call, :(==), :start, :stop), (:return, (:call, (:curly, :FloatRange, :T), :start, :step, 1, 1))),
        (:line, 154, :none),
        (:&&, (:call, :(!=), (:call, :<, 0, :step), (:call, :<, :start, :stop)), (:return, (:call, (:curly, :FloatRange, :T), :start, :step, 0, 1))),
        (:line, 157, :none),
        (:(=), :r, (:call, :/, (:call, :-, :stop, :start), :step)),
        (:line, 158, :none),
        (:(=), :n, (:call, :round, :r)),
        (:line, 159, :none),
        (:(=), :lo, (:call, :prevfloat, (:call, :/, (:call, :-, (:call, :prevfloat, :stop), (:call, :nextfloat, :start)), :n))),
        (:line, 160, :none),
        (:(=), :hi, (:call, :nextfloat, (:call, :/, (:call, :-, (:call, :nextfloat, :stop), (:call, :prevfloat, :start)), :n))),
        (:line, 161, :none),
        (:if, (:comparison, :lo, :(<=), :step, :(<=), :hi), (:block,
            (:line, 162, :none),
            (:(=), (:tuple, :a0, :b), (:call, :rat, :start)),
            (:line, 163, :none),
            (:(=), :a, (:call, :convert, :T, :a0)),
            (:line, 164, :none),
            (:if, (:call, :(==), (:call, :/, :a, (:call, :convert, :T, :b)), :start), (:block,
                (:line, 165, :none),
                (:(=), (:tuple, :c0, :d), (:call, :rat, :step)),
                (:line, 166, :none),
                (:(=), :c, (:call, :convert, :T, :c0)),
                (:line, 167, :none),
                (:if, (:call, :(==), (:call, :/, :c, (:call, :convert, :T, :d)), :step), (:block,
                    (:line, 168, :none),
                    (:(=), :e, (:call, :lcm, :b, :d)),
                    (:line, 169, :none),
                    (:*=, :a, (:call, :div, :e, :b)),
                    (:line, 170, :none),
                    (:*=, :c, (:call, :div, :e, :d)),
                    (:line, 171, :none),
                    (:(=), :eT, (:call, :convert, :T, :e)),
                    (:line, 172, :none),
                    (:if, (:&&, (:call, :(==), (:call, :/, :a, :eT), :start), (:call, :(==), (:call, :/, (:call, :+, :a, (:call, :*, :n, :c)), :eT), :stop)), (:block,
                        (:line, 173, :none),
                        (:return, (:call, (:curly, :FloatRange, :T), :a, :c, (:call, :+, :n, 1), :eT))
                      ))
                  ))
              ))
          )),
        (:line, 178, :none),
        (:if, (:call, :<, :r, 0), (:block,
            (:line, 179, :none),
            (:(=), :len, 0)
          ), (:block,
            (:line, 180, :none),
            (:if, (:call, :(==), :r, 0), (:block,
                (:line, 181, :none),
                (:(=), :len, 1)
              ), (:block,
                (:line, 183, :none),
                (:(=), :len, (:call, :+, (:call, :round, :Int, :r), 1)),
                (:line, 184, :none),
                (:(=), :stop′, (:call, :+, :start, (:call, :*, (:call, :-, :len, 1), :step))),
                (:line, 186, :none),
                (:-=, :len, (:call, :+, (:comparison, :start, :<, :stop, :<, :stop′), (:comparison, :start, :>, :stop, :>, :stop′)))
              ))
          )),
        (:line, 188, :none),
        (:call, (:curly, :FloatRange, :T), :start, :step, :len, (:call, :one, :step))
      )),
    (:line, 191, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :AbstractFloat)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 191, :none),
        (:call, :colon, :a, (:call, :one, :a), :b)
      )),
    (:line, 193, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :Real)), (:(::), :a, :T), (:(::), :b, :AbstractFloat), (:(::), :c, :T)), (:block,
        (:line, 193, :none),
        (:call, :colon, (:..., (:call, :promote, :a, :b, :c)))
      )),
    (:line, 194, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :AbstractFloat)), (:(::), :a, :T), (:(::), :b, :AbstractFloat), (:(::), :c, :T)), (:block,
        (:line, 194, :none),
        (:call, :colon, (:..., (:call, :promote, :a, :b, :c)))
      )),
    (:line, 195, :none),
    (:(=), (:call, (:curly, :colon, (:<:, :T, :AbstractFloat)), (:(::), :a, :T), (:(::), :b, :Real), (:(::), :c, :T)), (:block,
        (:line, 195, :none),
        (:call, :colon, (:..., (:call, :promote, :a, :b, :c)))
      )),
    (:line, 197, :none),
    (:(=), (:call, :range, (:(::), :a, :AbstractFloat), (:(::), :len, :Integer)), (:block,
        (:line, 197, :none),
        (:call, :FloatRange, :a, (:call, :one, :a), :len, (:call, :one, :a))
      )),
    (:line, 198, :none),
    (:(=), (:call, :range, (:(::), :a, :AbstractFloat), (:(::), :st, :AbstractFloat), (:(::), :len, :Integer)), (:block,
        (:line, 198, :none),
        (:call, :FloatRange, :a, :st, :len, (:call, :one, :a))
      )),
    (:line, 199, :none),
    (:(=), (:call, :range, (:(::), :a, :Real), (:(::), :st, :AbstractFloat), (:(::), :len, :Integer)), (:block,
        (:line, 199, :none),
        (:call, :FloatRange, (:call, :float, :a), :st, :len, (:call, :one, :st))
      )),
    (:line, 200, :none),
    (:(=), (:call, :range, (:(::), :a, :AbstractFloat), (:(::), :st, :Real), (:(::), :len, :Integer)), (:block,
        (:line, 200, :none),
        (:call, :FloatRange, :a, (:call, :float, :st), :len, (:call, :one, :a))
      )),
    (:line, 204, :none),
    (:type, false, (:<:, (:curly, :LinSpace, (:<:, :T, :AbstractFloat)), (:curly, :Range, :T)), (:block,
        (:line, 205, :none),
        (:(::), :start, :T),
        (:line, 206, :none),
        (:(::), :stop, :T),
        (:line, 207, :none),
        (:(::), :len, :T),
        (:line, 208, :none),
        (:(::), :divisor, :T)
      )),
    (:line, 211, :none),
    (:function, (:call, (:curly, :linspace, (:<:, :T, :AbstractFloat)), (:(::), :start, :T), (:(::), :stop, :T), (:(::), :len, :T)), (:block,
        (:line, 212, :none),
        (:||, (:call, :(==), :len, (:call, :round, :len)), (:call, :throw, (:call, :InexactError))),
        (:line, 213, :none),
        (:||, (:call, :(<=), 0, :len), (:call, :error, (:string, "linspace(", :start, ", ", :stop, ", ", :len, "): negative length"))),
        (:line, 214, :none),
        (:if, (:call, :(==), :len, 0), (:block,
            (:line, 215, :none),
            (:(=), :n, (:call, :convert, :T, 2)),
            (:line, 216, :none),
            (:if, (:||, (:call, :isinf, (:call, :*, :n, :start)), (:call, :isinf, (:call, :*, :n, :stop))), (:block,
                (:line, 217, :none),
                (:/=, :start, :n),
                (:line, 217, :none),
                (:/=, :stop, :n),
                (:line, 217, :none),
                (:(=), :n, (:call, :one, :T))
              )),
            (:line, 219, :none),
            (:return, (:call, :LinSpace, (:call, :-, :start), (:call, :-, :stop), (:call, :-, (:call, :one, :T)), :n))
          )),
        (:line, 221, :none),
        (:if, (:call, :(==), :len, 1), (:block,
            (:line, 222, :none),
            (:||, (:call, :(==), :start, :stop), (:call, :error, (:string, "linspace(", :start, ", ", :stop, ", ", :len, "): endpoints differ"))),
            (:line, 223, :none),
            (:return, (:call, :LinSpace, (:call, :-, :start), (:call, :-, :start), (:call, :zero, :T), (:call, :one, :T)))
          )),
        (:line, 225, :none),
        (:(=), :n, (:call, :convert, :T, (:call, :-, :len, 1))),
        (:line, 226, :none),
        (:||, (:call, :(==), (:call, :-, :len, :n), 1), (:call, :error, (:string, "linspace(", :start, ", ", :stop, ", ", :len, "): too long for ", :T))),
        (:line, 227, :none),
        (:(=), (:tuple, :a0, :b), (:call, :rat, :start)),
        (:line, 228, :none),
        (:(=), :a, (:call, :convert, :T, :a0)),
        (:line, 229, :none),
        (:if, (:call, :(==), (:call, :/, :a, (:call, :convert, :T, :b)), :start), (:block,
            (:line, 230, :none),
            (:(=), (:tuple, :c0, :d), (:call, :rat, :stop)),
            (:line, 231, :none),
            (:(=), :c, (:call, :convert, :T, :c0)),
            (:line, 232, :none),
            (:if, (:call, :(==), (:call, :/, :c, (:call, :convert, :T, :d)), :stop), (:block,
                (:line, 233, :none),
                (:(=), :e, (:call, :lcm, :b, :d)),
                (:line, 234, :none),
                (:*=, :a, (:call, :div, :e, :b)),
                (:line, 235, :none),
                (:*=, :c, (:call, :div, :e, :d)),
                (:line, 236, :none),
                (:(=), :s, (:call, :convert, :T, (:call, :*, :n, :e))),
                (:line, 237, :none),
                (:if, (:||, (:call, :isinf, (:call, :*, :a, :n)), (:call, :isinf, (:call, :*, :c, :n))), (:block,
                    (:line, 238, :none),
                    (:(=), (:tuple, :s, :p), (:call, :frexp, :s)),
                    (:line, 239, :none),
                    (:(=), :p2, (:call, :^, (:call, :oftype, :s, 2), :p)),
                    (:line, 240, :none),
                    (:/=, :a, :p2),
                    (:line, 240, :none),
                    (:/=, :c, :p2)
                  )),
                (:line, 242, :none),
                (:if, (:&&, (:call, :(==), (:call, :/, (:call, :*, :a, :n), :s), :start), (:call, :(==), (:call, :/, (:call, :*, :c, :n), :s), :stop)), (:block,
                    (:line, 243, :none),
                    (:return, (:call, :LinSpace, :a, :c, :len, :s))
                  ))
              ))
          )),
        (:line, 247, :none),
        (:(=), (:tuple, :a, :c, :s), (:tuple, :start, :stop, :n)),
        (:line, 248, :none),
        (:if, (:||, (:call, :isinf, (:call, :*, :a, :n)), (:call, :isinf, (:call, :*, :c, :n))), (:block,
            (:line, 249, :none),
            (:(=), (:tuple, :s, :p), (:call, :frexp, :s)),
            (:line, 250, :none),
            (:(=), :p2, (:call, :^, (:call, :oftype, :s, 2), :p)),
            (:line, 251, :none),
            (:/=, :a, :p2),
            (:line, 251, :none),
            (:/=, :c, :p2)
          )),
        (:line, 253, :none),
        (:if, (:&&, (:call, :(==), (:call, :/, (:call, :*, :a, :n), :s), :start), (:call, :(==), (:call, :/, (:call, :*, :c, :n), :s), :stop)), (:block,
            (:line, 254, :none),
            (:return, (:call, :LinSpace, :a, :c, :len, :s))
          )),
        (:line, 256, :none),
        (:return, (:call, :LinSpace, :start, :stop, :len, :n))
      )),
    (:line, 258, :none),
    (:function, (:call, (:curly, :linspace, (:<:, :T, :AbstractFloat)), (:(::), :start, :T), (:(::), :stop, :T), (:(::), :len, :Real)), (:block,
        (:line, 259, :none),
        (:(=), :T_len, (:call, :convert, :T, :len)),
        (:line, 260, :none),
        (:||, (:call, :(==), :T_len, :len), (:call, :throw, (:call, :InexactError))),
        (:line, 261, :none),
        (:call, :linspace, :start, :stop, :T_len)
      )),
    (:line, 263, :none),
    (:(=), (:call, :linspace, (:(::), :start, :Real), (:(::), :stop, :Real), (:kw, (:(::), :len, :Real), 50)), (:block,
        (:line, 263, :none),
        (:call, :linspace, (:..., (:call, :promote, (:call, :AbstractFloat, :start), (:call, :AbstractFloat, :stop))), :len)
      )),
    (:line, 266, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :r, :LinSpace)), (:block,
        (:line, 267, :none),
        (:call, :print, :io, "linspace("),
        (:line, 268, :none),
        (:call, :show, :io, (:call, :first, :r)),
        (:line, 269, :none),
        (:call, :print, :io, ','),
        (:line, 270, :none),
        (:call, :show, :io, (:call, :last, :r)),
        (:line, 271, :none),
        (:call, :print, :io, ','),
        (:line, 272, :none),
        (:call, :show, :io, (:call, :length, :r)),
        (:line, 273, :none),
        (:call, :print, :io, ')')
      )),
    (:line, 276, :none),
    "`print_range(io, r)` prints out a nice looking range r in terms of its elements\nas if it were `collect(r)`, dependent on the size of the\nterminal, and taking into account whether compact numbers should be shown.\nIt figures out the width in characters of each element, and if they\nend up too wide, it shows the first and last elements separated by a\nhorizontal elipsis. Typical output will look like `1.0,2.0,3.0,…,4.0,5.0,6.0`.\n\n`print_range(io, r, pre, sep, post, hdots)` uses optional\nparameters `pre` and `post` characters for each printed row,\n`sep` separator string between printed elements,\n`hdots` string for the horizontal ellipsis.\n",
    (:line, 289, :none),
    (:function, (:call, :print_range, (:(::), :io, :IO), (:(::), :r, :Range), (:kw, (:(::), :pre, :AbstractString), " "), (:kw, (:(::), :sep, :AbstractString), ","), (:kw, (:(::), :post, :AbstractString), ""), (:kw, (:(::), :hdots, :AbstractString), ",…,")), (:block,
        (:line, 296, :none),
        (:(=), :limit, (:call, :get, :io, (:quote, #QuoteNode
              :limit
            ), false)),
        (:line, 297, :none),
        (:(=), :sz, (:call, :displaysize, :io)),
        (:line, 298, :none),
        (:if, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                :compact
              ))), (:block,
            (:line, 299, :none),
            (:(=), :io, (:call, :IOContext, :io, (:kw, :compact, true)))
          )),
        (:line, 301, :none),
        (:(=), (:tuple, :screenheight, :screenwidth), (:tuple, (:call, :-, (:ref, :sz, 1), 4), (:ref, :sz, 2))),
        (:line, 302, :none),
        (:-=, :screenwidth, (:call, :+, (:call, :length, :pre), (:call, :length, :post))),
        (:line, 303, :none),
        (:(=), :postsp, ""),
        (:line, 304, :none),
        (:(=), :sepsize, (:call, :length, :sep)),
        (:line, 305, :none),
        (:(=), :m, 1),
        (:line, 306, :none),
        (:(=), :n, (:call, :length, :r)),
        (:line, 310, :none),
        (:(=), :maxpossiblecols, (:call, :div, :screenwidth, (:call, :+, 1, :sepsize))),
        (:line, 311, :none),
        (:(=), :colsr, (:if, (:call, :(<=), :n, :maxpossiblecols), (:(:), 1, :n), (:vcat, (:(:), 1, (:call, :+, (:call, :div, :maxpossiblecols, 2), 1)), (:(:), (:call, :-, :n, (:call, :div, :maxpossiblecols, 2)), :n)))),
        (:line, 312, :none),
        (:(=), :rowmatrix, (:', (:ref, :r, :colsr))),
        (:line, 313, :none),
        (:(=), :A, (:call, :alignment, :io, :rowmatrix, (:(:), 1, :m), (:(:), 1, (:call, :length, :rowmatrix)), :screenwidth, :screenwidth, :sepsize)),
        (:line, 314, :none),
        (:if, (:call, :(<=), :n, (:call, :length, :A)), (:block,
            (:line, 315, :none),
            (:call, :print, :io, :pre),
            (:line, 316, :none),
            (:call, :print_matrix_row, :io, :rowmatrix, :A, 1, (:(:), 1, :n), :sep),
            (:line, 317, :none),
            (:call, :print, :io, :post)
          ), (:block,
            (:line, 321, :none),
            (:(=), :c, (:call, :+, (:call, :div, (:call, :+, (:call, :-, :screenwidth, (:call, :length, :hdots)), 1), 2), 1)),
            (:line, 322, :none),
            (:(=), :alignR, (:call, :reverse, (:call, :alignment, :io, :rowmatrix, (:(:), 1, :m), (:(:), (:call, :length, :rowmatrix), -1, 1), :c, :c, :sepsize))),
            (:line, 323, :none),
            (:(=), :c, (:call, :-, (:call, :-, (:call, :-, :screenwidth, (:call, :sum, (:call, :map, :sum, :alignR))), (:call, :*, (:call, :-, (:call, :length, :alignR), 1), :sepsize)), (:call, :length, :hdots))),
            (:line, 324, :none),
            (:(=), :alignL, (:call, :alignment, :io, :rowmatrix, (:(:), 1, :m), (:(:), 1, (:call, :length, :rowmatrix)), :c, :c, :sepsize)),
            (:line, 325, :none),
            (:call, :print, :io, :pre),
            (:line, 326, :none),
            (:call, :print_matrix_row, :io, :rowmatrix, :alignL, 1, (:(:), 1, (:call, :length, :alignL)), :sep),
            (:line, 327, :none),
            (:call, :print, :io, :hdots),
            (:line, 328, :none),
            (:call, :print_matrix_row, :io, :rowmatrix, :alignR, 1, (:(:), (:call, :+, (:call, :-, (:call, :length, :rowmatrix), (:call, :length, :alignR)), 1), (:call, :length, :rowmatrix)), :sep),
            (:line, 329, :none),
            (:call, :print, :io, :post)
          ))
      )),
    (:line, 333, :none),
    (:(=), (:call, :logspace, (:(::), :start, :Real), (:(::), :stop, :Real), (:kw, (:(::), :n, :Integer), 50)), (:block,
        (:line, 333, :none),
        (:call, :.^, 10, (:call, :linspace, :start, :stop, :n))
      )),
    (:line, 337, :none),
    (:(=), (:call, :size, (:(::), :r, :Range)), (:block,
        (:line, 337, :none),
        (:tuple, (:call, :length, :r))
      )),
    (:line, 339, :none),
    (:(=), (:call, :isempty, (:(::), :r, :StepRange)), (:block,
        (:line, 339, :none),
        (:call, :&, (:call, :(!=), (:., :r, (:quote, #QuoteNode
                :start
              )), (:., :r, (:quote, #QuoteNode
                :stop
              ))), (:call, :(!=), (:call, :>, (:., :r, (:quote, #QuoteNode
                  :step
                )), (:call, :zero, (:., :r, (:quote, #QuoteNode
                    :step
                  )))), (:call, :>, (:., :r, (:quote, #QuoteNode
                  :stop
                )), (:., :r, (:quote, #QuoteNode
                  :start
                )))))
      )),
    (:line, 341, :none),
    (:(=), (:call, :isempty, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 341, :none),
        (:call, :>, (:call, :first, :r), (:call, :last, :r))
      )),
    (:line, 342, :none),
    (:(=), (:call, :isempty, (:(::), :r, :FloatRange)), (:block,
        (:line, 342, :none),
        (:call, :(==), (:call, :length, :r), 0)
      )),
    (:line, 343, :none),
    (:(=), (:call, :isempty, (:(::), :r, :LinSpace)), (:block,
        (:line, 343, :none),
        (:call, :(==), (:call, :length, :r), 0)
      )),
    (:line, 345, :none),
    "    step(r)\n\nGet the step size of a [`Range`](:obj:`Range`) object.\n```jldoctest\njulia> step(1:10)\n1\n\njulia> step(1:2:10)\n2\n\njulia> step(2.5:0.3:10.9)\n0.3\n\njulia> step(linspace(2.5,10.9,85))\n0.1\n```\n",
    (:line, 363, :none),
    (:(=), (:call, :step, (:(::), :r, :StepRange)), (:block,
        (:line, 363, :none),
        (:., :r, (:quote, #QuoteNode
            :step
          ))
      )),
    (:line, 364, :none),
    (:(=), (:call, :step, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 364, :none),
        1
      )),
    (:line, 365, :none),
    (:(=), (:call, :step, (:(::), :r, :FloatRange)), (:block,
        (:line, 365, :none),
        (:call, :/, (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 366, :none),
    (:(=), (:call, (:curly, :step, :T), (:(::), :r, (:curly, :LinSpace, :T))), (:block,
        (:line, 366, :none),
        (:call, :ifelse, (:call, :(<=), (:., :r, (:quote, #QuoteNode
                :len
              )), 0), (:call, :convert, :T, :NaN), (:call, :/, (:call, :-, (:., :r, (:quote, #QuoteNode
                  :stop
                )), (:., :r, (:quote, #QuoteNode
                  :start
                ))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 368, :none),
    (:(=), (:call, :unsafe_length, (:(::), :r, :Range)), (:block,
        (:line, 368, :none),
        (:call, :length, :r)
      )),
    (:line, 370, :none),
    (:function, (:call, :unsafe_length, (:(::), :r, :StepRange)), (:block,
        (:line, 371, :none),
        (:(=), :n, (:call, :Integer, (:call, :div, (:call, :-, (:call, :+, (:., :r, (:quote, #QuoteNode
                      :stop
                    )), (:., :r, (:quote, #QuoteNode
                      :step
                    ))), (:., :r, (:quote, #QuoteNode
                    :start
                  ))), (:., :r, (:quote, #QuoteNode
                  :step
                ))))),
        (:line, 372, :none),
        (:if, (:call, :isempty, :r), (:call, :zero, :n), :n)
      )),
    (:line, 374, :none),
    (:(=), (:call, :length, (:(::), :r, :StepRange)), (:block,
        (:line, 374, :none),
        (:call, :unsafe_length, :r)
      )),
    (:line, 375, :none),
    (:(=), (:call, :unsafe_length, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 375, :none),
        (:call, :Integer, (:call, :+, (:call, :-, (:call, :last, :r), (:call, :first, :r)), 1))
      )),
    (:line, 376, :none),
    (:(=), (:call, :unsafe_length, (:(::), :r, :OneTo)), (:block,
        (:line, 376, :none),
        (:., :r, (:quote, #QuoteNode
            :stop
          ))
      )),
    (:line, 377, :none),
    (:(=), (:call, :length, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 377, :none),
        (:call, :unsafe_length, :r)
      )),
    (:line, 378, :none),
    (:(=), (:call, :length, (:(::), :r, :OneTo)), (:block,
        (:line, 378, :none),
        (:call, :unsafe_length, :r)
      )),
    (:line, 379, :none),
    (:(=), (:call, :length, (:(::), :r, :FloatRange)), (:block,
        (:line, 379, :none),
        (:call, :Integer, (:., :r, (:quote, #QuoteNode
              :len
            )))
      )),
    (:line, 380, :none),
    (:(=), (:call, :length, (:(::), :r, :LinSpace)), (:block,
        (:line, 380, :none),
        (:call, :Integer, (:call, :+, (:., :r, (:quote, #QuoteNode
                :len
              )), (:call, :signbit, (:call, :-, (:., :r, (:quote, #QuoteNode
                    :len
                  )), 1))))
      )),
    (:line, 382, :none),
    (:function, (:call, (:curly, :length, (:<:, :T, (:curly, :Union, :Int, :UInt, :Int64, :UInt64))), (:(::), :r, (:curly, :StepRange, :T))), (:block,
        (:line, 383, :none),
        (:&&, (:call, :isempty, :r), (:return, (:call, :zero, :T))),
        (:line, 384, :none),
        (:if, (:call, :>, (:., :r, (:quote, #QuoteNode
                :step
              )), 1), (:block,
            (:line, 385, :none),
            (:return, (:call, :checked_add, (:call, :convert, :T, (:call, :div, (:call, :unsigned, (:call, :-, (:., :r, (:quote, #QuoteNode
                            :stop
                          )), (:., :r, (:quote, #QuoteNode
                            :start
                          )))), (:., :r, (:quote, #QuoteNode
                        :step
                      )))), (:call, :one, :T)))
          ), (:block,
            (:line, 386, :none),
            (:if, (:call, :<, (:., :r, (:quote, #QuoteNode
                    :step
                  )), -1), (:block,
                (:line, 387, :none),
                (:return, (:call, :checked_add, (:call, :convert, :T, (:call, :div, (:call, :unsigned, (:call, :-, (:., :r, (:quote, #QuoteNode
                                :start
                              )), (:., :r, (:quote, #QuoteNode
                                :stop
                              )))), (:call, :-, (:., :r, (:quote, #QuoteNode
                              :step
                            ))))), (:call, :one, :T)))
              ), (:block,
                (:line, 389, :none),
                (:call, :checked_add, (:call, :div, (:call, :checked_sub, (:., :r, (:quote, #QuoteNode
                          :stop
                        )), (:., :r, (:quote, #QuoteNode
                          :start
                        ))), (:., :r, (:quote, #QuoteNode
                        :step
                      ))), (:call, :one, :T))
              ))
          ))
      )),
    (:line, 393, :none),
    (:(=), (:call, (:curly, :length, (:<:, :T, (:curly, :Union, :Int, :Int64))), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 393, :none),
        (:call, :checked_add, (:call, :checked_sub, (:call, :last, :r), (:call, :first, :r)), (:call, :one, :T))
      )),
    (:line, 395, :none),
    (:(=), (:call, (:curly, :length, (:<:, :T, (:curly, :Union, :Int, :Int64))), (:(::), :r, (:curly, :OneTo, :T))), (:block,
        (:line, 395, :none),
        (:call, :T, (:., :r, (:quote, #QuoteNode
              :stop
            )))
      )),
    (:line, 397, :none),
    (:(=), (:call, (:curly, :length, (:<:, :T, (:curly, :Union, :UInt, :UInt64))), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 397, :none),
        (:if, (:call, :<, (:., :r, (:quote, #QuoteNode
                :stop
              )), (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :zero, :T), (:call, :checked_add, (:call, :-, (:call, :last, :r), (:call, :first, :r)), (:call, :one, :T)))
      )),
    (:line, 401, :none),
    (:let, (:block,
        (:line, 404, :none),
        (:global, :length),
        (:line, 406, :none),
        (:function, (:call, (:curly, :length, (:<:, :T, :smallint)), (:(::), :r, (:curly, :StepRange, :T))), (:block,
            (:line, 407, :none),
            (:&&, (:call, :isempty, :r), (:return, (:call, :Int, 0))),
            (:line, 408, :none),
            (:call, :div, (:call, :-, (:call, :+, (:call, :Int, (:., :r, (:quote, #QuoteNode
                        :stop
                      ))), (:call, :Int, (:., :r, (:quote, #QuoteNode
                        :step
                      )))), (:call, :Int, (:., :r, (:quote, #QuoteNode
                      :start
                    )))), (:call, :Int, (:., :r, (:quote, #QuoteNode
                    :step
                  ))))
          )),
        (:line, 411, :none),
        (:(=), (:call, (:curly, :length, (:<:, :T, :smallint)), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
            (:line, 411, :none),
            (:call, :+, (:call, :-, (:call, :Int, (:call, :last, :r)), (:call, :Int, (:call, :first, :r))), 1)
          )),
        (:line, 412, :none),
        (:(=), (:call, (:curly, :length, (:<:, :T, :smallint)), (:(::), :r, (:curly, :OneTo, :T))), (:block,
            (:line, 412, :none),
            (:call, :Int, (:., :r, (:quote, #QuoteNode
                  :stop
                )))
          ))
      ), (:(=), :smallint, (:if, (:call, :(===), :Int, :Int64), (:curly, :Union, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32), (:curly, :Union, :Int8, :UInt8, :Int16, :UInt16)))),
    (:line, 415, :none),
    (:(=), (:call, (:curly, :first, :T), (:(::), :r, (:curly, :OrdinalRange, :T))), (:block,
        (:line, 415, :none),
        (:call, :convert, :T, (:., :r, (:quote, #QuoteNode
              :start
            )))
      )),
    (:line, 416, :none),
    (:(=), (:call, (:curly, :first, :T), (:(::), :r, (:curly, :OneTo, :T))), (:block,
        (:line, 416, :none),
        (:call, :one, :T)
      )),
    (:line, 417, :none),
    (:(=), (:call, (:curly, :first, :T), (:(::), :r, (:curly, :FloatRange, :T))), (:block,
        (:line, 417, :none),
        (:call, :convert, :T, (:call, :/, (:., :r, (:quote, #QuoteNode
                :start
              )), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 418, :none),
    (:(=), (:call, (:curly, :first, :T), (:(::), :r, (:curly, :LinSpace, :T))), (:block,
        (:line, 418, :none),
        (:call, :convert, :T, (:call, :/, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                    :len
                  )), 1), (:., :r, (:quote, #QuoteNode
                  :start
                ))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 420, :none),
    (:(=), (:call, (:curly, :last, :T), (:(::), :r, (:curly, :OrdinalRange, :T))), (:block,
        (:line, 420, :none),
        (:call, :convert, :T, (:., :r, (:quote, #QuoteNode
              :stop
            )))
      )),
    (:line, 421, :none),
    (:(=), (:call, (:curly, :last, :T), (:(::), :r, (:curly, :FloatRange, :T))), (:block,
        (:line, 421, :none),
        (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                      :len
                    )), 1), (:., :r, (:quote, #QuoteNode
                    :step
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 422, :none),
    (:(=), (:call, (:curly, :last, :T), (:(::), :r, (:curly, :LinSpace, :T))), (:block,
        (:line, 422, :none),
        (:call, :convert, :T, (:call, :/, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                    :len
                  )), 1), (:., :r, (:quote, #QuoteNode
                  :stop
                ))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 424, :none),
    (:(=), (:call, :minimum, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 424, :none),
        (:if, (:call, :isempty, :r), (:call, :throw, (:call, :ArgumentError, "range must be non-empty")), (:call, :first, :r))
      )),
    (:line, 425, :none),
    (:(=), (:call, :maximum, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 425, :none),
        (:if, (:call, :isempty, :r), (:call, :throw, (:call, :ArgumentError, "range must be non-empty")), (:call, :last, :r))
      )),
    (:line, 426, :none),
    (:(=), (:call, :minimum, (:(::), :r, :Range)), (:block,
        (:line, 426, :none),
        (:if, (:call, :isempty, :r), (:call, :throw, (:call, :ArgumentError, "range must be non-empty")), (:call, :min, (:call, :first, :r), (:call, :last, :r)))
      )),
    (:line, 427, :none),
    (:(=), (:call, :maximum, (:(::), :r, :Range)), (:block,
        (:line, 427, :none),
        (:if, (:call, :isempty, :r), (:call, :throw, (:call, :ArgumentError, "range must be non-empty")), (:call, :max, (:call, :first, :r), (:call, :last, :r)))
      )),
    (:line, 429, :none),
    (:(=), (:call, :ctranspose, (:(::), :r, :Range)), (:block,
        (:line, 429, :none),
        (:comprehension, (:generator, :x, (:(=), :_, (:(:), 1, 1)), (:(=), :x, :r)))
      )),
    (:line, 430, :none),
    (:(=), (:call, :transpose, (:(::), :r, :Range)), (:block,
        (:line, 430, :none),
        (:', :r)
      )),
    (:line, 433, :none),
    (:(=), (:call, :copy, (:(::), :r, :Range)), (:block,
        (:line, 433, :none),
        :r
      )),
    (:line, 438, :none),
    (:(=), (:call, :start, (:(::), :r, :FloatRange)), (:block,
        (:line, 438, :none),
        0
      )),
    (:line, 439, :none),
    (:(=), (:call, :done, (:(::), :r, :FloatRange), (:(::), :i, :Int)), (:block,
        (:line, 439, :none),
        (:call, :(<=), (:call, :length, :r), :i)
      )),
    (:line, 440, :none),
    (:(=), (:call, (:curly, :next, :T), (:(::), :r, (:curly, :FloatRange, :T)), (:(::), :i, :Int)), (:block,
        (:line, 440, :none),
        (:tuple, (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                    :start
                  )), (:call, :*, :i, (:., :r, (:quote, #QuoteNode
                      :step
                    )))), (:., :r, (:quote, #QuoteNode
                  :divisor
                )))), (:call, :+, :i, 1))
      )),
    (:line, 443, :none),
    (:(=), (:call, :start, (:(::), :r, :LinSpace)), (:block,
        (:line, 443, :none),
        1
      )),
    (:line, 444, :none),
    (:(=), (:call, :done, (:(::), :r, :LinSpace), (:(::), :i, :Int)), (:block,
        (:line, 444, :none),
        (:call, :<, (:call, :length, :r), :i)
      )),
    (:line, 445, :none),
    (:(=), (:call, (:curly, :next, :T), (:(::), :r, (:curly, :LinSpace, :T)), (:(::), :i, :Int)), (:block,
        (:line, 445, :none),
        (:tuple, (:call, :convert, :T, (:call, :/, (:call, :+, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                        :len
                      )), :i), (:., :r, (:quote, #QuoteNode
                      :start
                    ))), (:call, :*, (:call, :-, :i, 1), (:., :r, (:quote, #QuoteNode
                      :stop
                    )))), (:., :r, (:quote, #QuoteNode
                  :divisor
                )))), (:call, :+, :i, 1))
      )),
    (:line, 448, :none),
    (:(=), (:call, :start, (:(::), :r, :StepRange)), (:block,
        (:line, 448, :none),
        (:call, :oftype, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :start
            )))
      )),
    (:line, 449, :none),
    (:(=), (:call, (:curly, :next, :T), (:(::), :r, (:curly, :StepRange, :T)), :i), (:block,
        (:line, 449, :none),
        (:tuple, (:call, :convert, :T, :i), (:call, :+, :i, (:., :r, (:quote, #QuoteNode
                :step
              ))))
      )),
    (:line, 450, :none),
    (:(=), (:call, (:curly, :done, :T, :S), (:(::), :r, (:curly, :StepRange, :T, :S)), :i), (:block,
        (:line, 450, :none),
        (:call, :|, (:call, :|, (:call, :isempty, :r), (:call, :<, :i, (:call, :min, (:., :r, (:quote, #QuoteNode
                    :start
                  )), (:., :r, (:quote, #QuoteNode
                    :stop
                  ))))), (:call, :>, :i, (:call, :max, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:., :r, (:quote, #QuoteNode
                  :stop
                )))))
      )),
    (:line, 451, :none),
    (:(=), (:call, (:curly, :done, :T, :S), (:(::), :r, (:curly, :StepRange, :T, :S)), (:(::), :i, :Integer)), (:block,
        (:line, 451, :none),
        (:call, :|, (:call, :isempty, :r), (:call, :(==), :i, (:call, :+, (:call, :oftype, :i, (:., :r, (:quote, #QuoteNode
                    :stop
                  ))), (:., :r, (:quote, #QuoteNode
                  :step
                )))))
      )),
    (:line, 454, :none),
    (:(=), (:call, (:curly, :start, :T), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
        (:line, 454, :none),
        (:call, :oftype, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :one, :T)), (:., :r, (:quote, #QuoteNode
              :start
            )))
      )),
    (:line, 455, :none),
    (:(=), (:call, (:curly, :next, :T), (:(::), :r, (:curly, :AbstractUnitRange, :T)), :i), (:block,
        (:line, 455, :none),
        (:tuple, (:call, :convert, :T, :i), (:call, :+, :i, (:call, :one, :T)))
      )),
    (:line, 456, :none),
    (:(=), (:call, (:curly, :done, :T), (:(::), :r, (:curly, :AbstractUnitRange, :T)), :i), (:block,
        (:line, 456, :none),
        (:call, :(==), :i, (:call, :+, (:call, :oftype, :i, (:., :r, (:quote, #QuoteNode
                  :stop
                ))), (:call, :one, :T)))
      )),
    (:line, 458, :none),
    (:(=), (:call, (:curly, :start, :T), (:(::), :r, (:curly, :OneTo, :T))), (:block,
        (:line, 458, :none),
        (:call, :one, :T)
      )),
    (:line, 461, :none),
    (:let, (:block,
        (:line, 464, :none),
        (:global, :start),
        (:line, 465, :none),
        (:global, :next),
        (:line, 466, :none),
        (:(=), (:call, (:curly, :start, (:<:, :T, :smallint)), (:(::), :r, (:curly, :StepRange, :T))), (:block,
            (:line, 466, :none),
            (:call, :convert, :Int, (:., :r, (:quote, #QuoteNode
                  :start
                )))
          )),
        (:line, 467, :none),
        (:(=), (:call, (:curly, :next, (:<:, :T, :smallint)), (:(::), :r, (:curly, :StepRange, :T)), :i), (:block,
            (:line, 467, :none),
            (:tuple, (:call, :%, :i, :T), (:call, :+, :i, (:., :r, (:quote, #QuoteNode
                    :step
                  ))))
          )),
        (:line, 468, :none),
        (:(=), (:call, (:curly, :start, (:<:, :T, :smallint)), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
            (:line, 468, :none),
            (:call, :convert, :Int, (:., :r, (:quote, #QuoteNode
                  :start
                )))
          )),
        (:line, 469, :none),
        (:(=), (:call, (:curly, :next, (:<:, :T, :smallint)), (:(::), :r, (:curly, :AbstractUnitRange, :T)), :i), (:block,
            (:line, 469, :none),
            (:tuple, (:call, :%, :i, :T), (:call, :+, :i, 1))
          )),
        (:line, 470, :none),
        (:(=), (:call, (:curly, :start, (:<:, :T, :smallint)), (:(::), :r, (:curly, :OneTo, :T))), (:block,
            (:line, 470, :none),
            1
          ))
      ), (:(=), :smallint, (:if, (:call, :(===), :Int, :Int64), (:curly, :Union, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32), (:curly, :Union, :Int8, :UInt8, :Int16, :UInt16)))),
    (:line, 475, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :v, (:curly, :UnitRange, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 476, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 477, :none),
        (:(=), :ret, (:call, :convert, :T, (:call, :-, (:call, :+, (:call, :first, :v), :i), 1))),
        (:line, 478, :none),
        (:macrocall, Symbol("@boundscheck"), (:||, (:call, :&, (:call, :&, (:call, :>, :i, 0), (:call, :(<=), :ret, (:., :v, (:quote, #QuoteNode
                      :stop
                    )))), (:call, :(>=), :ret, (:., :v, (:quote, #QuoteNode
                    :start
                  )))), (:call, :throw_boundserror, :v, :i))),
        (:line, 479, :none),
        :ret
      )),
    (:line, 482, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :v, (:curly, :OneTo, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 483, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 484, :none),
        (:macrocall, Symbol("@boundscheck"), (:||, (:call, :&, (:call, :>, :i, 0), (:call, :(<=), :i, (:., :v, (:quote, #QuoteNode
                    :stop
                  )))), (:call, :throw_boundserror, :v, :i))),
        (:line, 485, :none),
        (:call, :convert, :T, :i)
      )),
    (:line, 488, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :v, (:curly, :Range, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 489, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 490, :none),
        (:(=), :ret, (:call, :convert, :T, (:call, :+, (:call, :first, :v), (:call, :*, (:call, :-, :i, 1), (:call, :step, :v))))),
        (:line, 491, :none),
        (:(=), :ok, (:call, :ifelse, (:call, :>, (:call, :step, :v), (:call, :zero, (:call, :step, :v))), (:call, :&, (:call, :(<=), :ret, (:., :v, (:quote, #QuoteNode
                    :stop
                  ))), (:call, :(>=), :ret, (:., :v, (:quote, #QuoteNode
                    :start
                  )))), (:call, :&, (:call, :(<=), :ret, (:., :v, (:quote, #QuoteNode
                    :start
                  ))), (:call, :(>=), :ret, (:., :v, (:quote, #QuoteNode
                    :stop
                  )))))),
        (:line, 494, :none),
        (:macrocall, Symbol("@boundscheck"), (:||, (:call, :&, (:call, :>, :i, 0), :ok), (:call, :throw_boundserror, :v, :i))),
        (:line, 495, :none),
        :ret
      )),
    (:line, 498, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :r, (:curly, :FloatRange, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 499, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 500, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :i)),
        (:line, 501, :none),
        (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:call, :*, (:call, :-, :i, 1), (:., :r, (:quote, #QuoteNode
                    :step
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 504, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :r, (:curly, :LinSpace, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 505, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 506, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :i)),
        (:line, 507, :none),
        (:call, :convert, :T, (:call, :/, (:call, :+, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                      :len
                    )), :i), (:., :r, (:quote, #QuoteNode
                    :start
                  ))), (:call, :*, (:call, :-, :i, 1), (:., :r, (:quote, #QuoteNode
                    :stop
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 510, :none),
    (:(=), (:call, :getindex, (:(::), :r, :Range), (:(::), :Colon)), (:block,
        (:line, 510, :none),
        (:call, :copy, :r)
      )),
    (:line, 512, :none),
    (:function, (:call, (:curly, :getindex, (:<:, :T, :Integer)), (:(::), :r, :AbstractUnitRange), (:(::), :s, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 513, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 514, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 515, :none),
        (:(=), :f, (:call, :first, :r)),
        (:line, 516, :none),
        (:(=), :st, (:call, :oftype, :f, (:call, :-, (:call, :+, :f, (:call, :first, :s)), 1))),
        (:line, 517, :none),
        (:call, :range, :st, (:call, :length, :s))
      )),
    (:line, 520, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :r, (:curly, :OneTo, :T)), (:(::), :s, :OneTo)), (:block,
        (:line, 521, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 522, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 523, :none),
        (:call, :OneTo, (:call, :T, (:., :s, (:quote, #QuoteNode
                :stop
              ))))
      )),
    (:line, 526, :none),
    (:function, (:call, (:curly, :getindex, (:<:, :T, :Integer)), (:(::), :r, :AbstractUnitRange), (:(::), :s, (:curly, :StepRange, :T))), (:block,
        (:line, 527, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 528, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 529, :none),
        (:(=), :st, (:call, :oftype, (:call, :first, :r), (:call, :-, (:call, :+, (:call, :first, :r), (:., :s, (:quote, #QuoteNode
                    :start
                  ))), 1))),
        (:line, 530, :none),
        (:call, :range, :st, (:call, :step, :s), (:call, :length, :s))
      )),
    (:line, 533, :none),
    (:function, (:call, (:curly, :getindex, (:<:, :T, :Integer)), (:(::), :r, :StepRange), (:(::), :s, (:curly, :Range, :T))), (:block,
        (:line, 534, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 535, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 536, :none),
        (:(=), :st, (:call, :oftype, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :+, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:call, :*, (:call, :-, (:call, :first, :s), 1), (:call, :step, :r))))),
        (:line, 537, :none),
        (:call, :range, :st, (:call, :*, (:call, :step, :r), (:call, :step, :s)), (:call, :length, :s))
      )),
    (:line, 540, :none),
    (:function, (:call, :getindex, (:(::), :r, :FloatRange), (:(::), :s, :OrdinalRange)), (:block,
        (:line, 541, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 542, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 543, :none),
        (:call, :FloatRange, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:call, :-, (:call, :first, :s), 1), (:., :r, (:quote, #QuoteNode
                  :step
                )))), (:call, :*, (:call, :step, :s), (:., :r, (:quote, #QuoteNode
                :step
              ))), (:call, :length, :s), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 546, :none),
    (:function, (:call, (:curly, :getindex, :T), (:(::), :r, (:curly, :LinSpace, :T)), (:(::), :s, :OrdinalRange)), (:block,
        (:line, 547, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 548, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 549, :none),
        (:(=), (:(::), :sl, :T), (:call, :length, :s)),
        (:line, 550, :none),
        (:(=), :ifirst, (:call, :first, :s)),
        (:line, 551, :none),
        (:(=), :ilast, (:call, :last, :s)),
        (:line, 552, :none),
        (:(=), (:(::), :vfirst, :T), (:call, :/, (:call, :+, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                      :len
                    )), :ifirst), (:., :r, (:quote, #QuoteNode
                    :start
                  ))), (:call, :*, (:call, :-, :ifirst, 1), (:., :r, (:quote, #QuoteNode
                    :stop
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              )))),
        (:line, 553, :none),
        (:(=), (:(::), :vlast, :T), (:call, :/, (:call, :+, (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                      :len
                    )), :ilast), (:., :r, (:quote, #QuoteNode
                    :start
                  ))), (:call, :*, (:call, :-, :ilast, 1), (:., :r, (:quote, #QuoteNode
                    :stop
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              )))),
        (:line, 554, :none),
        (:return, (:call, :linspace, :vfirst, :vlast, :sl))
      )),
    (:line, 557, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :r, :Range)), (:block,
        (:line, 557, :none),
        (:call, :print, :io, (:call, :repr, (:call, :first, :r)), ':', (:call, :repr, (:call, :step, :r)), ':', (:call, :repr, (:call, :last, :r)))
      )),
    (:line, 558, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :r, :UnitRange)), (:block,
        (:line, 558, :none),
        (:call, :print, :io, (:call, :repr, (:call, :first, :r)), ':', (:call, :repr, (:call, :last, :r)))
      )),
    (:line, 559, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :r, :OneTo)), (:block,
        (:line, 559, :none),
        (:call, :print, :io, "Base.OneTo(", (:., :r, (:quote, #QuoteNode
              :stop
            )), ")")
      )),
    (:line, 561, :none),
    (:(=), (:call, (:curly, :(==), (:<:, :T, :Range)), (:(::), :r, :T), (:(::), :s, :T)), (:block,
        (:line, 561, :none),
        (:call, :&, (:call, :&, (:call, :(==), (:call, :first, :r), (:call, :first, :s)), (:call, :(==), (:call, :step, :r), (:call, :step, :s))), (:call, :(==), (:call, :last, :r), (:call, :last, :s)))
      )),
    (:line, 562, :none),
    (:(=), (:call, :(==), (:(::), :r, :OrdinalRange), (:(::), :s, :OrdinalRange)), (:block,
        (:line, 562, :none),
        (:call, :&, (:call, :&, (:call, :(==), (:call, :first, :r), (:call, :first, :s)), (:call, :(==), (:call, :step, :r), (:call, :step, :s))), (:call, :(==), (:call, :last, :r), (:call, :last, :s)))
      )),
    (:line, 563, :none),
    (:(=), (:call, (:curly, :(==), (:<:, :T, :LinSpace)), (:(::), :r, :T), (:(::), :s, :T)), (:block,
        (:line, 563, :none),
        (:call, :&, (:call, :&, (:call, :(==), (:call, :first, :r), (:call, :first, :s)), (:call, :(==), (:call, :length, :r), (:call, :length, :s))), (:call, :(==), (:call, :last, :r), (:call, :last, :s)))
      )),
    (:line, 565, :none),
    (:function, (:call, :(==), (:(::), :r, :Range), (:(::), :s, :Range)), (:block,
        (:line, 566, :none),
        (:(=), :lr, (:call, :length, :r)),
        (:line, 567, :none),
        (:if, (:call, :(!=), :lr, (:call, :length, :s)), (:block,
            (:line, 568, :none),
            (:return, false)
          )),
        (:line, 570, :none),
        (:(=), (:tuple, :u, :v), (:tuple, (:call, :start, :r), (:call, :start, :s))),
        (:line, 571, :none),
        (:while, (:call, :!, (:call, :done, :r, :u)), (:block,
            (:line, 572, :none),
            (:(=), (:tuple, :x, :u), (:call, :next, :r, :u)),
            (:line, 573, :none),
            (:(=), (:tuple, :y, :v), (:call, :next, :s, :v)),
            (:line, 574, :none),
            (:if, (:call, :(!=), :x, :y), (:block,
                (:line, 575, :none),
                (:return, false)
              ))
          )),
        (:line, 578, :none),
        (:return, true)
      )),
    (:line, 581, :none),
    (:(=), (:call, :intersect, (:(::), :r, :OneTo), (:(::), :s, :OneTo)), (:block,
        (:line, 581, :none),
        (:call, :OneTo, (:call, :min, (:., :r, (:quote, #QuoteNode
                :stop
              )), (:., :s, (:quote, #QuoteNode
                :stop
              ))))
      )),
    (:line, 583, :none),
    (:(=), (:call, (:curly, :intersect, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :AbstractUnitRange, :T1)), (:(::), :s, (:curly, :AbstractUnitRange, :T2))), (:block,
        (:line, 583, :none),
        (:(:), (:call, :max, (:call, :first, :r), (:call, :first, :s)), (:call, :min, (:call, :last, :r), (:call, :last, :s)))
      )),
    (:line, 585, :none),
    (:(=), (:call, (:curly, :intersect, (:<:, :T, :Integer)), (:(::), :i, :Integer), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 585, :none),
        (:if, (:call, :<, :i, (:call, :first, :r)), (:(:), (:call, :first, :r), :i), (:if, (:call, :>, :i, (:call, :last, :r)), (:(:), :i, (:call, :last, :r)), (:(:), :i, :i)))
      )),
    (:line, 589, :none),
    (:(=), (:call, (:curly, :intersect, (:<:, :T, :Integer)), (:(::), :r, (:curly, :AbstractUnitRange, :T)), (:(::), :i, :Integer)), (:block,
        (:line, 589, :none),
        (:call, :intersect, :i, :r)
      )),
    (:line, 591, :none),
    (:function, (:call, (:curly, :intersect, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :AbstractUnitRange, :T1)), (:(::), :s, (:curly, :StepRange, :T2))), (:block,
        (:line, 592, :none),
        (:if, (:call, :isempty, :s), (:block,
            (:line, 593, :none),
            (:call, :range, (:call, :first, :r), 0)
          ), (:block,
            (:line, 594, :none),
            (:if, (:call, :(==), (:call, :step, :s), 0), (:block,
                (:line, 595, :none),
                (:call, :intersect, (:call, :first, :s), :r)
              ), (:block,
                (:line, 596, :none),
                (:if, (:call, :<, (:call, :step, :s), 0), (:block,
                    (:line, 597, :none),
                    (:call, :intersect, :r, (:call, :reverse, :s))
                  ), (:block,
                    (:line, 599, :none),
                    (:(=), :sta, (:call, :first, :s)),
                    (:line, 600, :none),
                    (:(=), :ste, (:call, :step, :s)),
                    (:line, 601, :none),
                    (:(=), :sto, (:call, :last, :s)),
                    (:line, 602, :none),
                    (:(=), :lo, (:call, :first, :r)),
                    (:line, 603, :none),
                    (:(=), :hi, (:call, :last, :r)),
                    (:line, 604, :none),
                    (:(=), :i0, (:call, :max, :sta, (:call, :+, :lo, (:call, :mod, (:call, :-, :sta, :lo), :ste)))),
                    (:line, 605, :none),
                    (:(=), :i1, (:call, :min, :sto, (:call, :-, :hi, (:call, :mod, (:call, :-, :hi, :sta), :ste)))),
                    (:line, 606, :none),
                    (:(:), :i0, :ste, :i1)
                  ))
              ))
          ))
      )),
    (:line, 610, :none),
    (:function, (:call, (:curly, :intersect, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :StepRange, :T1)), (:(::), :s, (:curly, :AbstractUnitRange, :T2))), (:block,
        (:line, 611, :none),
        (:if, (:call, :<, (:call, :step, :r), 0), (:block,
            (:line, 612, :none),
            (:call, :reverse, (:call, :intersect, :s, (:call, :reverse, :r)))
          ), (:block,
            (:line, 614, :none),
            (:call, :intersect, :s, :r)
          ))
      )),
    (:line, 618, :none),
    (:function, (:call, :intersect, (:(::), :r, :StepRange), (:(::), :s, :StepRange)), (:block,
        (:line, 619, :none),
        (:if, (:||, (:call, :isempty, :r), (:call, :isempty, :s)), (:block,
            (:line, 620, :none),
            (:return, (:call, :range, (:call, :first, :r), (:call, :step, :r), 0))
          ), (:block,
            (:line, 621, :none),
            (:if, (:call, :<, (:call, :step, :s), 0), (:block,
                (:line, 622, :none),
                (:return, (:call, :intersect, :r, (:call, :reverse, :s)))
              ), (:block,
                (:line, 623, :none),
                (:if, (:call, :<, (:call, :step, :r), 0), (:block,
                    (:line, 624, :none),
                    (:return, (:call, :reverse, (:call, :intersect, (:call, :reverse, :r), :s)))
                  ))
              ))
          )),
        (:line, 627, :none),
        (:(=), :start1, (:call, :first, :r)),
        (:line, 628, :none),
        (:(=), :step1, (:call, :step, :r)),
        (:line, 629, :none),
        (:(=), :stop1, (:call, :last, :r)),
        (:line, 630, :none),
        (:(=), :start2, (:call, :first, :s)),
        (:line, 631, :none),
        (:(=), :step2, (:call, :step, :s)),
        (:line, 632, :none),
        (:(=), :stop2, (:call, :last, :s)),
        (:line, 633, :none),
        (:(=), :a, (:call, :lcm, :step1, :step2)),
        (:line, 646, :none),
        (:(=), (:tuple, :g, :x, :y), (:call, :gcdx, :step1, :step2)),
        (:line, 648, :none),
        (:if, (:call, :(!=), (:call, :rem, (:call, :-, :start1, :start2), :g), 0), (:block,
            (:line, 650, :none),
            (:return, (:call, :range, :start1, :a, 0))
          )),
        (:line, 653, :none),
        (:(=), :z, (:call, :div, (:call, :-, :start1, :start2), :g)),
        (:line, 654, :none),
        (:(=), :b, (:call, :-, :start1, (:call, :*, :x, :z, :step1))),
        (:line, 658, :none),
        (:(=), :m, (:call, :max, (:call, :+, :start1, (:call, :mod, (:call, :-, :b, :start1), :a)), (:call, :+, :start2, (:call, :mod, (:call, :-, :b, :start2), :a)))),
        (:line, 659, :none),
        (:(=), :n, (:call, :min, (:call, :-, :stop1, (:call, :mod, (:call, :-, :stop1, :b), :a)), (:call, :-, :stop2, (:call, :mod, (:call, :-, :stop2, :b), :a)))),
        (:line, 660, :none),
        (:(:), :m, :a, :n)
      )),
    (:line, 663, :none),
    (:function, (:call, :intersect, (:(::), :r1, :Range), (:(::), :r2, :Range), (:(::), :r3, :Range), (:..., (:(::), :r, :Range))), (:block,
        (:line, 664, :none),
        (:(=), :i, (:call, :intersect, (:call, :intersect, :r1, :r2), :r3)),
        (:line, 665, :none),
        (:for, (:(=), :t, :r), (:block,
            (:line, 666, :none),
            (:(=), :i, (:call, :intersect, :i, :t))
          )),
        (:line, 668, :none),
        :i
      )),
    (:line, 672, :none),
    (:function, (:call, (:curly, :_findin, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :Range, :T1)), (:(::), :span, (:curly, :AbstractUnitRange, :T2))), (:block,
        (:line, 673, :none),
        (:local, :ifirst),
        (:line, 674, :none),
        (:local, :ilast),
        (:line, 675, :none),
        (:(=), :fspan, (:call, :first, :span)),
        (:line, 676, :none),
        (:(=), :lspan, (:call, :last, :span)),
        (:line, 677, :none),
        (:(=), :fr, (:call, :first, :r)),
        (:line, 678, :none),
        (:(=), :lr, (:call, :last, :r)),
        (:line, 679, :none),
        (:(=), :sr, (:call, :step, :r)),
        (:line, 680, :none),
        (:if, (:call, :>, :sr, 0), (:block,
            (:line, 681, :none),
            (:(=), :ifirst, (:if, (:call, :(>=), :fr, :fspan), 1, (:call, :+, (:call, :ceil, :Integer, (:call, :/, (:call, :-, :fspan, :fr), :sr)), 1))),
            (:line, 682, :none),
            (:(=), :ilast, (:if, (:call, :(<=), :lr, :lspan), (:call, :length, :r), (:call, :-, (:call, :length, :r), (:call, :ceil, :Integer, (:call, :/, (:call, :-, :lr, :lspan), :sr)))))
          ), (:block,
            (:line, 683, :none),
            (:if, (:call, :<, :sr, 0), (:block,
                (:line, 684, :none),
                (:(=), :ifirst, (:if, (:call, :(<=), :fr, :lspan), 1, (:call, :+, (:call, :ceil, :Integer, (:call, :/, (:call, :-, :lspan, :fr), :sr)), 1))),
                (:line, 685, :none),
                (:(=), :ilast, (:if, (:call, :(>=), :lr, :fspan), (:call, :length, :r), (:call, :-, (:call, :length, :r), (:call, :ceil, :Integer, (:call, :/, (:call, :-, :lr, :fspan), :sr)))))
              ), (:block,
                (:line, 687, :none),
                (:(=), :ifirst, (:if, (:call, :(>=), :fr, :fspan), 1, (:call, :+, (:call, :length, :r), 1))),
                (:line, 688, :none),
                (:(=), :ilast, (:if, (:call, :(<=), :fr, :lspan), (:call, :length, :r), 0))
              ))
          )),
        (:line, 690, :none),
        (:tuple, :ifirst, :ilast)
      )),
    (:line, 693, :none),
    (:function, (:call, (:curly, :findin, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :AbstractUnitRange, :T1)), (:(::), :span, (:curly, :AbstractUnitRange, :T2))), (:block,
        (:line, 694, :none),
        (:(=), (:tuple, :ifirst, :ilast), (:call, :_findin, :r, :span)),
        (:line, 695, :none),
        (:(:), :ifirst, :ilast)
      )),
    (:line, 698, :none),
    (:function, (:call, (:curly, :findin, (:<:, :T1, :Integer), (:<:, :T2, :Integer)), (:(::), :r, (:curly, :Range, :T1)), (:(::), :span, (:curly, :AbstractUnitRange, :T2))), (:block,
        (:line, 699, :none),
        (:(=), (:tuple, :ifirst, :ilast), (:call, :_findin, :r, :span)),
        (:line, 700, :none),
        (:(:), :ifirst, 1, :ilast)
      )),
    (:line, 705, :none),
    (:(=), (:call, :-, (:(::), :r, :OrdinalRange)), (:block,
        (:line, 705, :none),
        (:call, :range, (:call, :-, (:call, :first, :r)), (:call, :-, (:call, :step, :r)), (:call, :length, :r))
      )),
    (:line, 706, :none),
    (:(=), (:call, :-, (:(::), :r, :FloatRange)), (:block,
        (:line, 706, :none),
        (:call, :FloatRange, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 707, :none),
    (:(=), (:call, :-, (:(::), :r, :LinSpace)), (:block,
        (:line, 707, :none),
        (:call, :LinSpace, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :stop
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 709, :none),
    (:(=), (:call, :.+, (:(::), :x, :Real), (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 709, :none),
        (:call, :range, (:call, :+, :x, (:call, :first, :r)), (:call, :length, :r))
      )),
    (:line, 710, :none),
    (:(=), (:call, :.+, (:(::), :x, :Real), (:(::), :r, :Range)), (:block,
        (:line, 710, :none),
        (:(:), (:call, :+, :x, (:call, :first, :r)), (:call, :step, :r), (:call, :+, :x, (:call, :last, :r)))
      )),
    (:line, 712, :none),
    (:(=), (:call, :.+, (:(::), :x, :Real), (:(::), :r, :FloatRange)), (:block,
        (:line, 712, :none),
        (:call, :FloatRange, (:call, :+, (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x), (:., :r, (:quote, #QuoteNode
                :start
              ))), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 713, :none),
    (:function, (:call, (:curly, :.+, :T), (:(::), :x, :Real), (:(::), :r, (:curly, :LinSpace, :T))), (:block,
        (:line, 714, :none),
        (:(=), :x2, (:call, :/, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                  :divisor
                ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                  :len
                )), 1))),
        (:line, 715, :none),
        (:call, :LinSpace, (:call, :+, :x2, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :+, :x2, (:., :r, (:quote, #QuoteNode
                :stop
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 717, :none),
    (:(=), (:call, :.+, (:(::), :r, :Range), (:(::), :x, :Real)), (:block,
        (:line, 717, :none),
        (:call, :+, :x, :r)
      )),
    (:line, 720, :none),
    (:(=), (:call, :.-, (:(::), :x, :Real), (:(::), :r, :Range)), (:block,
        (:line, 720, :none),
        (:(:), (:call, :-, :x, (:call, :first, :r)), (:call, :-, (:call, :step, :r)), (:call, :-, :x, (:call, :last, :r)))
      )),
    (:line, 721, :none),
    (:(=), (:call, :.-, (:(::), :x, :Real), (:(::), :r, :FloatRange)), (:block,
        (:line, 721, :none),
        (:call, :FloatRange, (:call, :-, (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x), (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 722, :none),
    (:function, (:call, :.-, (:(::), :x, :Real), (:(::), :r, :LinSpace)), (:block,
        (:line, 723, :none),
        (:(=), :x2, (:call, :/, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                  :divisor
                ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                  :len
                )), 1))),
        (:line, 724, :none),
        (:call, :LinSpace, (:call, :-, :x2, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, :x2, (:., :r, (:quote, #QuoteNode
                :stop
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 726, :none),
    (:(=), (:call, :.-, (:(::), :r, :AbstractUnitRange), (:(::), :x, :Real)), (:block,
        (:line, 726, :none),
        (:call, :range, (:call, :-, (:call, :first, :r), :x), (:call, :length, :r))
      )),
    (:line, 727, :none),
    (:(=), (:call, :.-, (:(::), :r, :StepRange), (:(::), :x, :Real)), (:block,
        (:line, 727, :none),
        (:call, :range, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              )), :x), (:., :r, (:quote, #QuoteNode
              :step
            )), (:call, :length, :r))
      )),
    (:line, 728, :none),
    (:(=), (:call, :.-, (:(::), :r, :FloatRange), (:(::), :x, :Real)), (:block,
        (:line, 728, :none),
        (:call, :FloatRange, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x)), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 729, :none),
    (:function, (:call, :.-, (:(::), :r, :LinSpace), (:(::), :x, :Real)), (:block,
        (:line, 730, :none),
        (:(=), :x2, (:call, :/, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                  :divisor
                ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                  :len
                )), 1))),
        (:line, 731, :none),
        (:call, :LinSpace, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              )), :x2), (:call, :-, (:., :r, (:quote, #QuoteNode
                :stop
              )), :x2), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 734, :none),
    (:(=), (:call, :.*, (:(::), :x, :Real), (:(::), :r, :OrdinalRange)), (:block,
        (:line, 734, :none),
        (:call, :range, (:call, :*, :x, (:call, :first, :r)), (:call, :*, :x, (:call, :step, :r)), (:call, :length, :r))
      )),
    (:line, 735, :none),
    (:(=), (:call, :.*, (:(::), :x, :Real), (:(::), :r, :FloatRange)), (:block,
        (:line, 735, :none),
        (:call, :FloatRange, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 736, :none),
    (:(=), (:call, :.*, (:(::), :x, :Real), (:(::), :r, :LinSpace)), (:block,
        (:line, 736, :none),
        (:call, :LinSpace, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :stop
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 737, :none),
    (:(=), (:call, :.*, (:(::), :r, :Range), (:(::), :x, :Real)), (:block,
        (:line, 737, :none),
        (:call, :.*, :x, :r)
      )),
    (:line, 738, :none),
    (:(=), (:call, :.*, (:(::), :r, :FloatRange), (:(::), :x, :Real)), (:block,
        (:line, 738, :none),
        (:call, :.*, :x, :r)
      )),
    (:line, 739, :none),
    (:(=), (:call, :.*, (:(::), :r, :LinSpace), (:(::), :x, :Real)), (:block,
        (:line, 739, :none),
        (:call, :.*, :x, :r)
      )),
    (:line, 741, :none),
    (:(=), (:call, :./, (:(::), :r, :OrdinalRange), (:(::), :x, :Real)), (:block,
        (:line, 741, :none),
        (:call, :range, (:call, :/, (:call, :first, :r), :x), (:call, :/, (:call, :step, :r), :x), (:call, :length, :r))
      )),
    (:line, 742, :none),
    (:(=), (:call, :./, (:(::), :r, :FloatRange), (:(::), :x, :Real)), (:block,
        (:line, 742, :none),
        (:call, :FloatRange, (:call, :/, (:., :r, (:quote, #QuoteNode
                :start
              )), :x), (:call, :/, (:., :r, (:quote, #QuoteNode
                :step
              )), :x), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 743, :none),
    (:(=), (:call, :./, (:(::), :r, :LinSpace), (:(::), :x, :Real)), (:block,
        (:line, 743, :none),
        (:call, :LinSpace, (:call, :/, (:., :r, (:quote, #QuoteNode
                :start
              )), :x), (:call, :/, (:., :r, (:quote, #QuoteNode
                :stop
              )), :x), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 745, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1, :T2), (:(::), (:curly, :Type, (:curly, :UnitRange, :T1))), (:(::), (:curly, :Type, (:curly, :UnitRange, :T2)))), (:block,
        (:line, 745, :none),
        (:curly, :UnitRange, (:call, :promote_type, :T1, :T2))
      )),
    (:line, 747, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :UnitRange, :T))), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
        (:line, 747, :none),
        :r
      )),
    (:line, 748, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :UnitRange, :T))), (:(::), :r, :UnitRange)), (:block,
        (:line, 748, :none),
        (:call, (:curly, :UnitRange, :T), (:., :r, (:quote, #QuoteNode
              :start
            )), (:., :r, (:quote, #QuoteNode
              :stop
            )))
      )),
    (:line, 750, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1, :T2), (:(::), (:curly, :Type, (:curly, :OneTo, :T1))), (:(::), (:curly, :Type, (:curly, :OneTo, :T2)))), (:block,
        (:line, 750, :none),
        (:curly, :OneTo, (:call, :promote_type, :T1, :T2))
      )),
    (:line, 752, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :OneTo, :T))), (:(::), :r, (:curly, :OneTo, :T))), (:block,
        (:line, 752, :none),
        :r
      )),
    (:line, 753, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :OneTo, :T))), (:(::), :r, :OneTo)), (:block,
        (:line, 753, :none),
        (:call, (:curly, :OneTo, :T), (:., :r, (:quote, #QuoteNode
              :stop
            )))
      )),
    (:line, 755, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1, (:<:, :UR, :AbstractUnitRange)), (:(::), (:curly, :Type, (:curly, :UnitRange, :T1))), (:(::), (:curly, :Type, :UR))), (:block,
        (:line, 755, :none),
        (:curly, :UnitRange, (:call, :promote_type, :T1, (:call, :eltype, :UR)))
      )),
    (:line, 757, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :UnitRange, :T))), (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 757, :none),
        (:call, (:curly, :UnitRange, :T), (:call, :first, :r), (:call, :last, :r))
      )),
    (:line, 758, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :UnitRange)), (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 758, :none),
        (:call, :UnitRange, (:call, :first, :r), (:call, :last, :r))
      )),
    (:line, 760, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1a, :T1b, :T2a, :T2b), (:(::), (:curly, :Type, (:curly, :StepRange, :T1a, :T1b))), (:(::), (:curly, :Type, (:curly, :StepRange, :T2a, :T2b)))), (:block,
        (:line, 760, :none),
        (:curly, :StepRange, (:call, :promote_type, :T1a, :T2a), (:call, :promote_type, :T1b, :T2b))
      )),
    (:line, 762, :none),
    (:(=), (:call, (:curly, :convert, :T1, :T2), (:(::), (:curly, :Type, (:curly, :StepRange, :T1, :T2))), (:(::), :r, (:curly, :StepRange, :T1, :T2))), (:block,
        (:line, 762, :none),
        :r
      )),
    (:line, 764, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1a, :T1b, (:<:, :UR, :AbstractUnitRange)), (:(::), (:curly, :Type, (:curly, :StepRange, :T1a, :T1b))), (:(::), (:curly, :Type, :UR))), (:block,
        (:line, 764, :none),
        (:curly, :StepRange, (:call, :promote_type, :T1a, (:call, :eltype, :UR)), (:call, :promote_type, :T1b, (:call, :eltype, :UR)))
      )),
    (:line, 766, :none),
    (:(=), (:call, (:curly, :convert, :T1, :T2), (:(::), (:curly, :Type, (:curly, :StepRange, :T1, :T2))), (:(::), :r, :Range)), (:block,
        (:line, 766, :none),
        (:call, (:curly, :StepRange, :T1, :T2), (:call, :convert, :T1, (:call, :first, :r)), (:call, :convert, :T2, (:call, :step, :r)), (:call, :convert, :T1, (:call, :last, :r)))
      )),
    (:line, 768, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, :StepRange)), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 768, :none),
        (:call, (:curly, :StepRange, :T, :T), (:call, :first, :r), (:call, :step, :r), (:call, :last, :r))
      )),
    (:line, 771, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1, :T2), (:(::), (:curly, :Type, (:curly, :FloatRange, :T1))), (:(::), (:curly, :Type, (:curly, :FloatRange, :T2)))), (:block,
        (:line, 771, :none),
        (:curly, :FloatRange, (:call, :promote_type, :T1, :T2))
      )),
    (:line, 773, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :FloatRange, :T))), (:(::), :r, (:curly, :FloatRange, :T))), (:block,
        (:line, 773, :none),
        :r
      )),
    (:line, 774, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :FloatRange, :T))), (:(::), :r, :FloatRange)), (:block,
        (:line, 774, :none),
        (:call, (:curly, :FloatRange, :T), (:., :r, (:quote, #QuoteNode
              :start
            )), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 777, :none),
    (:(=), (:call, (:curly, :promote_rule, :F, (:<:, :OR, :OrdinalRange)), (:(::), (:curly, :Type, (:curly, :FloatRange, :F))), (:(::), (:curly, :Type, :OR))), (:block,
        (:line, 777, :none),
        (:curly, :FloatRange, (:call, :promote_type, :F, (:call, :eltype, :OR)))
      )),
    (:line, 779, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :FloatRange, :T))), (:(::), :r, :OrdinalRange)), (:block,
        (:line, 779, :none),
        (:call, (:curly, :FloatRange, :T), (:call, :first, :r), (:call, :step, :r), (:call, :length, :r), (:call, :one, :T))
      )),
    (:line, 781, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, :FloatRange)), (:(::), :r, (:curly, :OrdinalRange, :T))), (:block,
        (:line, 781, :none),
        (:call, (:curly, :FloatRange, (:call, :typeof, (:call, :float, (:call, :first, :r)))), (:call, :first, :r), (:call, :step, :r), (:call, :length, :r), (:call, :one, :T))
      )),
    (:line, 784, :none),
    (:(=), (:call, (:curly, :promote_rule, :T1, :T2), (:(::), (:curly, :Type, (:curly, :LinSpace, :T1))), (:(::), (:curly, :Type, (:curly, :LinSpace, :T2)))), (:block,
        (:line, 784, :none),
        (:curly, :LinSpace, (:call, :promote_type, :T1, :T2))
      )),
    (:line, 786, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :LinSpace, :T))), (:(::), :r, (:curly, :LinSpace, :T))), (:block,
        (:line, 786, :none),
        :r
      )),
    (:line, 787, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :LinSpace, :T))), (:(::), :r, :LinSpace)), (:block,
        (:line, 787, :none),
        (:call, (:curly, :LinSpace, :T), (:., :r, (:quote, #QuoteNode
              :start
            )), (:., :r, (:quote, #QuoteNode
              :stop
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 790, :none),
    (:(=), (:call, (:curly, :promote_rule, :F, (:<:, :OR, :OrdinalRange)), (:(::), (:curly, :Type, (:curly, :LinSpace, :F))), (:(::), (:curly, :Type, :OR))), (:block,
        (:line, 790, :none),
        (:curly, :LinSpace, (:call, :promote_type, :F, (:call, :eltype, :OR)))
      )),
    (:line, 792, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :LinSpace, :T))), (:(::), :r, :OrdinalRange)), (:block,
        (:line, 792, :none),
        (:call, :linspace, (:call, :convert, :T, (:call, :first, :r)), (:call, :convert, :T, (:call, :last, :r)), (:call, :convert, :T, (:call, :length, :r)))
      )),
    (:line, 794, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, :LinSpace)), (:(::), :r, (:curly, :OrdinalRange, :T))), (:block,
        (:line, 794, :none),
        (:call, :convert, (:curly, :LinSpace, (:call, :typeof, (:call, :float, (:call, :first, :r)))), :r)
      )),
    (:line, 798, :none),
    (:(=), (:call, (:curly, :promote_rule, :F, (:<:, :OR, :FloatRange)), (:(::), (:curly, :Type, (:curly, :LinSpace, :F))), (:(::), (:curly, :Type, :OR))), (:block,
        (:line, 798, :none),
        (:curly, :LinSpace, (:call, :promote_type, :F, (:call, :eltype, :OR)))
      )),
    (:line, 800, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :LinSpace, :T))), (:(::), :r, :FloatRange)), (:block,
        (:line, 800, :none),
        (:call, :linspace, (:call, :convert, :T, (:call, :first, :r)), (:call, :convert, :T, (:call, :last, :r)), (:call, :convert, :T, (:call, :length, :r)))
      )),
    (:line, 802, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, :LinSpace)), (:(::), :r, (:curly, :FloatRange, :T))), (:block,
        (:line, 802, :none),
        (:call, :convert, (:curly, :LinSpace, :T), :r)
      )),
    (:line, 810, :none),
    (:(=), (:call, :.+, (:(::), :x, :Number), (:(::), :r, :Range)), (:block,
        (:line, 810, :none),
        (:comprehension, (:generator, (:call, :+, :x, :y), (:(=), :y, :r)))
      )),
    (:line, 811, :none),
    (:(=), (:call, :.+, (:(::), :r, :Range), (:(::), :y, :Number)), (:block,
        (:line, 811, :none),
        (:comprehension, (:generator, (:call, :+, :x, :y), (:(=), :x, :r)))
      )),
    (:line, 813, :none),
    (:(=), (:call, :.-, (:(::), :x, :Number), (:(::), :r, :Range)), (:block,
        (:line, 813, :none),
        (:comprehension, (:generator, (:call, :-, :x, :y), (:(=), :y, :r)))
      )),
    (:line, 814, :none),
    (:(=), (:call, :.-, (:(::), :r, :Range), (:(::), :y, :Number)), (:block,
        (:line, 814, :none),
        (:comprehension, (:generator, (:call, :-, :x, :y), (:(=), :x, :r)))
      )),
    (:line, 816, :none),
    (:(=), (:call, :.*, (:(::), :x, :Number), (:(::), :r, :Range)), (:block,
        (:line, 816, :none),
        (:comprehension, (:generator, (:call, :*, :x, :y), (:(=), :y, :r)))
      )),
    (:line, 817, :none),
    (:(=), (:call, :.*, (:(::), :r, :Range), (:(::), :y, :Number)), (:block,
        (:line, 817, :none),
        (:comprehension, (:generator, (:call, :*, :x, :y), (:(=), :x, :r)))
      )),
    (:line, 819, :none),
    (:(=), (:call, :./, (:(::), :x, :Number), (:(::), :r, :Range)), (:block,
        (:line, 819, :none),
        (:comprehension, (:generator, (:call, :/, :x, :y), (:(=), :y, :r)))
      )),
    (:line, 820, :none),
    (:(=), (:call, :./, (:(::), :r, :Range), (:(::), :y, :Number)), (:block,
        (:line, 820, :none),
        (:comprehension, (:generator, (:call, :/, :x, :y), (:(=), :x, :r)))
      )),
    (:line, 822, :none),
    (:(=), (:call, :.^, (:(::), :x, :Number), (:(::), :r, :Range)), (:block,
        (:line, 822, :none),
        (:comprehension, (:generator, (:call, :^, :x, :y), (:(=), :y, :r)))
      )),
    (:line, 823, :none),
    (:(=), (:call, :.^, (:(::), :r, :Range), (:(::), :y, :Number)), (:block,
        (:line, 823, :none),
        (:comprehension, (:generator, (:call, :^, :x, :y), (:(=), :x, :r)))
      )),
    (:line, 827, :none),
    (:function, (:call, (:curly, :vcat, :T), (:..., (:(::), :rs, (:curly, :Range, :T)))), (:block,
        (:line, 828, :none),
        (:(=), (:(::), :n, :Int), 0),
        (:line, 829, :none),
        (:for, (:(=), :ra, :rs), (:block,
            (:line, 830, :none),
            (:+=, :n, (:call, :length, :ra))
          )),
        (:line, 832, :none),
        (:(=), :a, (:call, (:curly, :Array, :T), :n)),
        (:line, 833, :none),
        (:(=), :i, 1),
        (:line, 834, :none),
        (:for, (:block,
            (:(=), :ra, :rs),
            (:(=), :x, :ra)
          ), (:block,
            (:line, 835, :none),
            (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :a, :i), :x)),
            (:line, 836, :none),
            (:+=, :i, 1)
          )),
        (:line, 838, :none),
        (:return, :a)
      )),
    (:line, 841, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Array, :T, 1))), (:(::), :r, (:curly, :Range, :T))), (:block,
        (:line, 841, :none),
        (:call, :vcat, :r)
      )),
    (:line, 842, :none),
    (:(=), (:call, :collect, (:(::), :r, :Range)), (:block,
        (:line, 842, :none),
        (:call, :vcat, :r)
      )),
    (:line, 844, :none),
    (:(=), (:call, :reverse, (:(::), :r, :OrdinalRange)), (:block,
        (:line, 844, :none),
        (:call, :colon, (:call, :last, :r), (:call, :-, (:call, :step, :r)), (:call, :first, :r))
      )),
    (:line, 845, :none),
    (:(=), (:call, :reverse, (:(::), :r, :FloatRange)), (:block,
        (:line, 845, :none),
        (:call, :FloatRange, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                    :len
                  )), 1), (:., :r, (:quote, #QuoteNode
                  :step
                )))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 846, :none),
    (:(=), (:call, :reverse, (:(::), :r, :LinSpace)), (:block,
        (:line, 846, :none),
        (:call, :LinSpace, (:., :r, (:quote, #QuoteNode
              :stop
            )), (:., :r, (:quote, #QuoteNode
              :start
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 850, :none),
    (:(=), (:call, :issorted, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 850, :none),
        true
      )),
    (:line, 851, :none),
    (:(=), (:call, :issorted, (:(::), :r, :Range)), (:block,
        (:line, 851, :none),
        (:call, :(>=), (:call, :step, :r), (:call, :zero, (:call, :step, :r)))
      )),
    (:line, 853, :none),
    (:(=), (:call, :sort, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 853, :none),
        :r
      )),
    (:line, 854, :none),
    (:(=), (:call, :sort!, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 854, :none),
        :r
      )),
    (:line, 856, :none),
    (:(=), (:call, :sort, (:(::), :r, :Range)), (:block,
        (:line, 856, :none),
        (:if, (:call, :issorted, :r), :r, (:call, :reverse, :r))
      )),
    (:line, 858, :none),
    (:(=), (:call, :sortperm, (:(::), :r, :AbstractUnitRange)), (:block,
        (:line, 858, :none),
        (:(:), 1, (:call, :length, :r))
      )),
    (:line, 859, :none),
    (:(=), (:call, :sortperm, (:(::), :r, :Range)), (:block,
        (:line, 859, :none),
        (:if, (:call, :issorted, :r), (:(:), 1, 1, (:call, :length, :r)), (:(:), (:call, :length, :r), -1, 1))
      )),
    (:line, 861, :none),
    (:function, (:call, (:curly, :sum, (:<:, :T, :Real)), (:(::), :r, (:curly, :Range, :T))), (:block,
        (:line, 862, :none),
        (:(=), :l, (:call, :length, :r)),
        (:line, 864, :none),
        (:return, (:call, :+, (:call, :*, :l, (:call, :first, :r)), (:if, (:call, :iseven, :l), (:call, :*, (:call, :*, (:call, :step, :r), (:call, :-, :l, 1)), (:call, :>>, :l, 1)), (:call, :*, (:call, :*, (:call, :step, :r), :l), (:call, :>>, (:call, :-, :l, 1), 1)))))
      )),
    (:line, 868, :none),
    (:function, (:call, :sum, (:(::), :r, :FloatRange)), (:block,
        (:line, 869, :none),
        (:(=), :l, (:call, :length, :r)),
        (:line, 870, :none),
        (:if, (:call, :iseven, :l), (:block,
            (:line, 871, :none),
            (:(=), :s, (:call, :*, (:., :r, (:quote, #QuoteNode
                    :step
                  )), (:call, :-, :l, 1), (:call, :>>, :l, 1)))
          ), (:block,
            (:line, 873, :none),
            (:(=), :s, (:call, :*, (:call, :*, (:., :r, (:quote, #QuoteNode
                      :step
                    )), :l), (:call, :>>, (:call, :-, :l, 1), 1)))
          )),
        (:line, 875, :none),
        (:return, (:call, :/, (:call, :+, (:call, :*, :l, (:., :r, (:quote, #QuoteNode
                    :start
                  ))), :s), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 879, :none),
    (:function, (:call, (:curly, :mean, (:<:, :T, :Real)), (:(::), :r, (:curly, :Range, :T))), (:block,
        (:line, 880, :none),
        (:&&, (:call, :isempty, :r), (:call, :throw, (:call, :ArgumentError, "mean of an empty range is undefined"))),
        (:line, 881, :none),
        (:call, :/, (:call, :+, (:call, :first, :r), (:call, :last, :r)), 2)
      )),
    (:line, 884, :none),
    (:(=), (:call, (:curly, :median, (:<:, :T, :Real)), (:(::), :r, (:curly, :Range, :T))), (:block,
        (:line, 884, :none),
        (:call, :mean, :r)
      )),
    (:line, 886, :none),
    (:function, (:call, :in, :x, (:(::), :r, :Range)), (:block,
        (:line, 887, :none),
        (:(=), :n, (:if, (:call, :(==), (:call, :step, :r), 0), 1, (:call, :+, (:call, :round, :Integer, (:call, :/, (:call, :-, :x, (:call, :first, :r)), (:call, :step, :r))), 1))),
        (:line, 888, :none),
        (:&&, (:call, :(>=), :n, 1), (:&&, (:call, :(<=), :n, (:call, :length, :r)), (:call, :(==), (:ref, :r, :n), :x)))
      )),
    (:line, 891, :none),
    (:(=), (:call, (:curly, :in, (:<:, :T, :Integer)), (:(::), :x, :Integer), (:(::), :r, (:curly, :AbstractUnitRange, :T))), (:block,
        (:line, 891, :none),
        (:call, :&, (:call, :(<=), (:call, :first, :r), :x), (:call, :(<=), :x, (:call, :last, :r)))
      )),
    (:line, 892, :none),
    (:(=), (:call, (:curly, :in, (:<:, :T, :Integer)), :x, (:(::), :r, (:curly, :Range, :T))), (:block,
        (:line, 892, :none),
        (:&&, (:call, :isinteger, :x), (:&&, (:call, :!, (:call, :isempty, :r)), (:&&, (:call, :(>=), :x, (:call, :minimum, :r)), (:&&, (:call, :(<=), :x, (:call, :maximum, :r)), (:call, :(==), (:call, :-, (:call, :mod, (:call, :convert, :T, :x), (:call, :step, :r)), (:call, :mod, (:call, :first, :r), (:call, :step, :r))), 0)))))
      )),
    (:line, 893, :none),
    (:(=), (:call, :in, (:(::), :x, :Char), (:(::), :r, (:curly, :Range, :Char))), (:block,
        (:line, 893, :none),
        (:&&, (:call, :!, (:call, :isempty, :r)), (:&&, (:call, :(>=), :x, (:call, :minimum, :r)), (:&&, (:call, :(<=), :x, (:call, :maximum, :r)), (:call, :(==), (:call, :mod, (:call, :-, (:call, :Int, :x), (:call, :Int, (:call, :first, :r))), (:call, :step, :r)), 0))))
      ))
  ))