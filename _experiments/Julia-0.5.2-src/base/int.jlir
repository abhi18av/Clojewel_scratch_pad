(:quote, (:block,
    (:line, 10, :none),
    (:const, (:(=), :BitSigned64_types, (:tuple, :Int8, :Int16, :Int32, :Int64))),
    (:line, 11, :none),
    (:const, (:(=), :BitUnsigned64_types, (:tuple, :UInt8, :UInt16, :UInt32, :UInt64))),
    (:line, 12, :none),
    (:const, (:(=), :BitInteger64_types, (:tuple, (:..., :BitSigned64_types), (:..., :BitUnsigned64_types)))),
    (:line, 13, :none),
    (:const, (:(=), :BitSigned_types, (:tuple, (:..., :BitSigned64_types), :Int128))),
    (:line, 14, :none),
    (:const, (:(=), :BitUnsigned_types, (:tuple, (:..., :BitUnsigned64_types), :UInt128))),
    (:line, 15, :none),
    (:const, (:(=), :BitInteger_types, (:tuple, (:..., :BitSigned_types), (:..., :BitUnsigned_types)))),
    (:line, 17, :none),
    (:typealias, :BitSigned64, (:curly, :Union, (:..., :BitSigned64_types))),
    (:line, 18, :none),
    (:typealias, :BitUnsigned64, (:curly, :Union, (:..., :BitUnsigned64_types))),
    (:line, 19, :none),
    (:typealias, :BitInteger64, (:curly, :Union, (:..., :BitInteger64_types))),
    (:line, 20, :none),
    (:typealias, :BitSigned, (:curly, :Union, (:..., :BitSigned_types))),
    (:line, 21, :none),
    (:typealias, :BitUnsigned, (:curly, :Union, (:..., :BitUnsigned_types))),
    (:line, 22, :none),
    (:typealias, :BitInteger, (:curly, :Union, (:..., :BitInteger_types))),
    (:line, 23, :none),
    (:typealias, :BitSigned64T, (:curly, :Union, (:curly, :Type, :Int8), (:curly, :Type, :Int16), (:curly, :Type, :Int32), (:curly, :Type, :Int64))),
    (:line, 24, :none),
    (:typealias, :BitUnsigned64T, (:curly, :Union, (:curly, :Type, :UInt8), (:curly, :Type, :UInt16), (:curly, :Type, :UInt32), (:curly, :Type, :UInt64))),
    (:line, 28, :none),
    (:(=), (:call, (:curly, :<, (:<:, :T, :BitSigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 28, :none),
        (:call, :slt_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y))
      )),
    (:line, 30, :none),
    (:(=), (:call, (:curly, :-, (:<:, :T, :BitInteger)), (:(::), :x, :T)), (:block,
        (:line, 30, :none),
        (:call, :box, :T, (:call, :neg_int, (:call, :unbox, :T, :x)))
      )),
    (:line, 31, :none),
    (:(=), (:call, (:curly, :-, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 31, :none),
        (:call, :box, :T, (:call, :sub_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 32, :none),
    (:(=), (:call, (:curly, :+, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 32, :none),
        (:call, :box, :T, (:call, :add_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 33, :none),
    (:(=), (:call, (:curly, :*, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 33, :none),
        (:call, :box, :T, (:call, :mul_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 35, :none),
    (:(=), (:call, :/, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
        (:line, 35, :none),
        (:call, :/, (:call, :float, :x), (:call, :float, :y))
      )),
    (:line, 36, :none),
    (:(=), (:call, :inv, (:(::), :x, :Integer)), (:block,
        (:line, 36, :none),
        (:call, :/, (:call, :float, (:call, :one, :x)), (:call, :float, :x))
      )),
    (:line, 38, :none),
    (:(=), (:call, :isodd, (:(::), :n, :Integer)), (:block,
        (:line, 38, :none),
        (:call, :(!=), (:call, :rem, :n, 2), 0)
      )),
    (:line, 39, :none),
    (:(=), (:call, :iseven, (:(::), :n, :Integer)), (:block,
        (:line, 39, :none),
        (:call, :!, (:call, :isodd, :n))
      )),
    (:line, 41, :none),
    (:(=), (:call, :signbit, (:(::), :x, :Integer)), (:block,
        (:line, 41, :none),
        (:call, :<, :x, 0)
      )),
    (:line, 42, :none),
    (:(=), (:call, :signbit, (:(::), :x, :Unsigned)), (:block,
        (:line, 42, :none),
        false
      )),
    (:line, 44, :none),
    (:(=), (:call, (:curly, :flipsign, (:<:, :T, :BitSigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 44, :none),
        (:call, :box, :T, (:call, :flipsign_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 46, :none),
    (:(=), (:call, :flipsign, (:(::), :x, :Signed), (:(::), :y, :Signed)), (:block,
        (:line, 46, :none),
        (:call, :convert, (:call, :typeof, :x), (:call, :flipsign, (:..., (:call, :promote, :x, :y))))
      )),
    (:line, 47, :none),
    (:(=), (:call, :flipsign, (:(::), :x, :Signed), (:(::), :y, :Float16)), (:block,
        (:line, 47, :none),
        (:call, :flipsign, :x, (:call, :reinterpret, :Int16, :y))
      )),
    (:line, 48, :none),
    (:(=), (:call, :flipsign, (:(::), :x, :Signed), (:(::), :y, :Float32)), (:block,
        (:line, 48, :none),
        (:call, :flipsign, :x, (:call, :reinterpret, :Int32, :y))
      )),
    (:line, 49, :none),
    (:(=), (:call, :flipsign, (:(::), :x, :Signed), (:(::), :y, :Float64)), (:block,
        (:line, 49, :none),
        (:call, :flipsign, :x, (:call, :reinterpret, :Int64, :y))
      )),
    (:line, 50, :none),
    (:(=), (:call, :flipsign, (:(::), :x, :Signed), (:(::), :y, :Real)), (:block,
        (:line, 50, :none),
        (:call, :flipsign, :x, (:call, :-, (:call, :oftype, :x, (:call, :signbit, :y))))
      )),
    (:line, 52, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Signed), (:(::), :y, :Signed)), (:block,
        (:line, 52, :none),
        (:call, :flipsign, :x, (:call, :$, :x, :y))
      )),
    (:line, 53, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Signed), (:(::), :y, :Float16)), (:block,
        (:line, 53, :none),
        (:call, :copysign, :x, (:call, :reinterpret, :Int16, :y))
      )),
    (:line, 54, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Signed), (:(::), :y, :Float32)), (:block,
        (:line, 54, :none),
        (:call, :copysign, :x, (:call, :reinterpret, :Int32, :y))
      )),
    (:line, 55, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Signed), (:(::), :y, :Float64)), (:block,
        (:line, 55, :none),
        (:call, :copysign, :x, (:call, :reinterpret, :Int64, :y))
      )),
    (:line, 56, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Signed), (:(::), :y, :Real)), (:block,
        (:line, 56, :none),
        (:call, :copysign, :x, (:call, :-, (:call, :oftype, :x, (:call, :signbit, :y))))
      )),
    (:line, 58, :none),
    "    abs(x)\n\nThe absolute value of `x`.\n\nWhen `abs` is applied to signed integers, overflow may occur,\nresulting in the return of a negative value. This overflow occurs only\nwhen `abs` is applied to the minimum representable value of a signed\ninteger. That is, when `x == typemin(typeof(x))`, `abs(x) == x < 0`,\nnot `-x` as might be expected.\n",
    (:line, 69, :none),
    (:function, :abs),
    (:line, 71, :none),
    (:(=), (:call, :abs, (:(::), :x, :Unsigned)), (:block,
        (:line, 71, :none),
        :x
      )),
    (:line, 72, :none),
    (:(=), (:call, :abs, (:(::), :x, :Signed)), (:block,
        (:line, 72, :none),
        (:call, :flipsign, :x, :x)
      )),
    (:line, 74, :none),
    (:(=), (:call, :~, (:(::), :n, :Integer)), (:block,
        (:line, 74, :none),
        (:call, :-, (:call, :-, :n), 1)
      )),
    (:line, 76, :none),
    (:(=), (:call, :unsigned, (:(::), :x, :Signed)), (:block,
        (:line, 76, :none),
        (:call, :reinterpret, (:call, :typeof, (:call, :convert, :Unsigned, (:call, :zero, :x))), :x)
      )),
    (:line, 77, :none),
    (:(=), (:call, :unsigned, (:(::), :x, :Bool)), (:block,
        (:line, 77, :none),
        (:call, :convert, :Unsigned, :x)
      )),
    (:line, 78, :none),
    (:(=), (:call, :unsigned, :x), (:block,
        (:line, 78, :none),
        (:call, :convert, :Unsigned, :x)
      )),
    (:line, 79, :none),
    (:(=), (:call, :signed, (:(::), :x, :Unsigned)), (:block,
        (:line, 79, :none),
        (:call, :reinterpret, (:call, :typeof, (:call, :convert, :Signed, (:call, :zero, :x))), :x)
      )),
    (:line, 80, :none),
    (:(=), (:call, :signed, :x), (:block,
        (:line, 80, :none),
        (:call, :convert, :Signed, :x)
      )),
    (:line, 82, :none),
    (:(=), (:call, :div, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 82, :none),
        (:call, :flipsign, (:call, :signed, (:call, :div, (:call, :unsigned, (:call, :abs, :x)), :y)), :x)
      )),
    (:line, 83, :none),
    (:(=), (:call, :div, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 83, :none),
        (:call, :unsigned, (:call, :flipsign, (:call, :signed, (:call, :div, :x, (:call, :unsigned, (:call, :abs, :y)))), :y))
      )),
    (:line, 85, :none),
    (:(=), (:call, :rem, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 85, :none),
        (:call, :flipsign, (:call, :signed, (:call, :rem, (:call, :unsigned, (:call, :abs, :x)), :y)), :x)
      )),
    (:line, 86, :none),
    (:(=), (:call, :rem, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 86, :none),
        (:call, :rem, :x, (:call, :unsigned, (:call, :abs, :y)))
      )),
    (:line, 88, :none),
    (:(=), (:call, :fld, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 88, :none),
        (:call, :-, (:call, :div, :x, :y), (:call, :&, (:call, :signbit, :x), (:call, :(!=), (:call, :rem, :x, :y), 0)))
      )),
    (:line, 89, :none),
    (:(=), (:call, :fld, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 89, :none),
        (:call, :-, (:call, :div, :x, :y), (:call, :&, (:call, :signbit, :y), (:call, :(!=), (:call, :rem, :x, :y), 0)))
      )),
    (:line, 92, :none),
    "    mod(x, y)\n\nModulus after flooring division, returning in the range ``[0,y)``, if `y` is positive, or\n``(y,0]`` if `y` is negative.\n\n```julia\nx == fld(x,y)*y + mod(x,y)\n```\n",
    (:line, 102, :none),
    (:function, (:call, (:curly, :mod, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 103, :none),
        (:&&, (:call, :(==), :y, -1), (:return, (:call, :T, 0))),
        (:line, 104, :none),
        (:call, :-, :x, (:call, :*, (:call, :fld, :x, :y), :y))
      )),
    (:line, 106, :none),
    (:(=), (:call, :mod, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 106, :none),
        (:call, :rem, (:call, :+, :y, (:call, :unsigned, (:call, :rem, :x, :y))), :y)
      )),
    (:line, 107, :none),
    (:(=), (:call, :mod, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 107, :none),
        (:call, :rem, (:call, :+, :y, (:call, :signed, (:call, :rem, :x, :y))), :y)
      )),
    (:line, 108, :none),
    (:(=), (:call, (:curly, :mod, (:<:, :T, :Unsigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 108, :none),
        (:call, :rem, :x, :y)
      )),
    (:line, 110, :none),
    (:(=), (:call, :cld, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 110, :none),
        (:call, :+, (:call, :div, :x, :y), (:call, :&, (:call, :!, (:call, :signbit, :x)), (:call, :(!=), (:call, :rem, :x, :y), 0)))
      )),
    (:line, 111, :none),
    (:(=), (:call, :cld, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 111, :none),
        (:call, :+, (:call, :div, :x, :y), (:call, :&, (:call, :!, (:call, :signbit, :y)), (:call, :(!=), (:call, :rem, :x, :y), 0)))
      )),
    (:line, 115, :none),
    (:(=), (:call, (:curly, :div, (:<:, :T, :BitSigned64)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 115, :none),
        (:call, :box, :T, (:call, :checked_sdiv_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 116, :none),
    (:(=), (:call, (:curly, :rem, (:<:, :T, :BitSigned64)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 116, :none),
        (:call, :box, :T, (:call, :checked_srem_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 117, :none),
    (:(=), (:call, (:curly, :div, (:<:, :T, :BitUnsigned64)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 117, :none),
        (:call, :box, :T, (:call, :checked_udiv_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 118, :none),
    (:(=), (:call, (:curly, :rem, (:<:, :T, :BitUnsigned64)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 118, :none),
        (:call, :box, :T, (:call, :checked_urem_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 122, :none),
    (:(=), (:call, (:curly, :fld, (:<:, :T, :Unsigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 122, :none),
        (:call, :div, :x, :y)
      )),
    (:line, 123, :none),
    (:function, (:call, (:curly, :fld, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 124, :none),
        (:(=), :d, (:call, :div, :x, :y)),
        (:line, 125, :none),
        (:call, :-, :d, (:call, :&, (:call, :signbit, (:call, :$, :x, :y)), (:call, :(!=), (:call, :*, :d, :y), :x)))
      )),
    (:line, 129, :none),
    (:function, (:call, (:curly, :cld, (:<:, :T, :Unsigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 130, :none),
        (:(=), :d, (:call, :div, :x, :y)),
        (:line, 131, :none),
        (:call, :+, :d, (:call, :(!=), (:call, :*, :d, :y), :x))
      )),
    (:line, 133, :none),
    (:function, (:call, (:curly, :cld, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 134, :none),
        (:(=), :d, (:call, :div, :x, :y)),
        (:line, 135, :none),
        (:call, :+, :d, (:call, :&, (:call, :(==), (:call, :>, :x, 0), (:call, :>, :y, 0)), (:call, :(!=), (:call, :*, :d, :y), :x)))
      )),
    (:line, 140, :none),
    (:(=), (:call, (:curly, :~, (:<:, :T, :BitInteger)), (:(::), :x, :T)), (:block,
        (:line, 140, :none),
        (:call, :box, :T, (:call, :not_int, (:call, :unbox, :T, :x)))
      )),
    (:line, 141, :none),
    (:(=), (:call, (:curly, :&, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 141, :none),
        (:call, :box, :T, (:call, :and_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 142, :none),
    (:(=), (:call, (:curly, :|, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 142, :none),
        (:call, :box, :T, (:call, :or_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 143, :none),
    (:(=), (:call, (:curly, :$, (:<:, :T, :BitInteger)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 143, :none),
        (:call, :box, :T, (:call, :xor_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
      )),
    (:line, 145, :none),
    (:(=), (:call, (:curly, :bswap, (:<:, :T, (:curly, :Union, :Int8, :UInt8))), (:(::), :x, :T)), (:block,
        (:line, 145, :none),
        :x
      )),
    (:line, 146, :none),
    (:(=), (:call, (:curly, :bswap, (:<:, :T, (:curly, :Union, :Int16, :UInt16, :Int32, :UInt32, :Int64, :UInt64, :Int128, :UInt128))), (:(::), :x, :T)), (:block,
        (:line, 146, :none),
        (:call, :box, :T, (:call, :bswap_int, (:call, :unbox, :T, :x)))
      )),
    (:line, 149, :none),
    (:(=), (:call, (:curly, :count_ones, (:<:, :T, :BitInteger)), (:(::), :x, :T)), (:block,
        (:line, 149, :none),
        (:call, :Int, (:call, :box, :T, (:call, :ctpop_int, (:call, :unbox, :T, :x))))
      )),
    (:line, 150, :none),
    (:(=), (:call, (:curly, :leading_zeros, (:<:, :T, :BitInteger)), (:(::), :x, :T)), (:block,
        (:line, 150, :none),
        (:call, :Int, (:call, :box, :T, (:call, :ctlz_int, (:call, :unbox, :T, :x))))
      )),
    (:line, 151, :none),
    (:(=), (:call, (:curly, :trailing_zeros, (:<:, :T, :BitInteger)), (:(::), :x, :T)), (:block,
        (:line, 151, :none),
        (:call, :Int, (:call, :box, :T, (:call, :cttz_int, (:call, :unbox, :T, :x))))
      )),
    (:line, 153, :none),
    (:(=), (:call, :count_zeros, (:(::), :x, :Integer)), (:block,
        (:line, 153, :none),
        (:call, :count_ones, (:call, :~, :x))
      )),
    (:line, 154, :none),
    (:(=), (:call, :leading_ones, (:(::), :x, :Integer)), (:block,
        (:line, 154, :none),
        (:call, :leading_zeros, (:call, :~, :x))
      )),
    (:line, 155, :none),
    (:(=), (:call, :trailing_ones, (:(::), :x, :Integer)), (:block,
        (:line, 155, :none),
        (:call, :trailing_zeros, (:call, :~, :x))
      )),
    (:line, 159, :none),
    (:(=), (:call, (:curly, :<, (:<:, :T, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 159, :none),
        (:call, :ult_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y))
      )),
    (:line, 160, :none),
    (:(=), (:call, (:curly, :(<=), (:<:, :T, :BitSigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 160, :none),
        (:call, :sle_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y))
      )),
    (:line, 161, :none),
    (:(=), (:call, (:curly, :(<=), (:<:, :T, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 161, :none),
        (:call, :ule_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y))
      )),
    (:line, 163, :none),
    (:(=), (:call, :(==), (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 163, :none),
        (:call, :&, (:call, :(>=), :x, 0), (:call, :(==), (:call, :unsigned, :x), :y))
      )),
    (:line, 164, :none),
    (:(=), (:call, :(==), (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 164, :none),
        (:call, :&, (:call, :(>=), :y, 0), (:call, :(==), :x, (:call, :unsigned, :y)))
      )),
    (:line, 165, :none),
    (:(=), (:call, :<, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 165, :none),
        (:call, :|, (:call, :<, :x, 0), (:call, :<, (:call, :unsigned, :x), :y))
      )),
    (:line, 166, :none),
    (:(=), (:call, :<, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 166, :none),
        (:call, :&, (:call, :(>=), :y, 0), (:call, :<, :x, (:call, :unsigned, :y)))
      )),
    (:line, 167, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 167, :none),
        (:call, :|, (:call, :<, :x, 0), (:call, :(<=), (:call, :unsigned, :x), :y))
      )),
    (:line, 168, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 168, :none),
        (:call, :&, (:call, :(>=), :y, 0), (:call, :(<=), :x, (:call, :unsigned, :y)))
      )),
    (:line, 173, :none),
    (:(=), (:call, (:curly, :>>, (:<:, :T, :BitSigned), (:<:, :S, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :S)), (:block,
        (:line, 173, :none),
        (:call, :box, :T, (:call, :ashr_int, (:call, :unbox, :T, :x), (:call, :unbox, :S, :y)))
      )),
    (:line, 175, :none),
    (:(=), (:call, (:curly, :>>, (:<:, :T, :BitUnsigned), (:<:, :S, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :S)), (:block,
        (:line, 175, :none),
        (:call, :box, :T, (:call, :lshr_int, (:call, :unbox, :T, :x), (:call, :unbox, :S, :y)))
      )),
    (:line, 177, :none),
    (:(=), (:call, (:curly, :<<, (:<:, :T, :BitInteger), (:<:, :S, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :S)), (:block,
        (:line, 177, :none),
        (:call, :box, :T, (:call, :shl_int, (:call, :unbox, :T, :x), (:call, :unbox, :S, :y)))
      )),
    (:line, 179, :none),
    (:(=), (:call, (:curly, :>>>, (:<:, :T, :BitInteger), (:<:, :S, :BitUnsigned)), (:(::), :x, :T), (:(::), :y, :S)), (:block,
        (:line, 179, :none),
        (:call, :box, :T, (:call, :lshr_int, (:call, :unbox, :T, :x), (:call, :unbox, :S, :y)))
      )),
    (:line, 184, :none),
    (:(=), (:call, :>>, (:(::), :x, :BitInteger), (:(::), :y, :Int)), (:block,
        (:line, 184, :none),
        (:call, :select_value, (:call, :(<=), 0, :y), (:call, :>>, :x, (:call, :unsigned, :y)), (:call, :<<, :x, (:call, :unsigned, (:call, :-, :y))))
      )),
    (:line, 186, :none),
    (:(=), (:call, :<<, (:(::), :x, :BitInteger), (:(::), :y, :Int)), (:block,
        (:line, 186, :none),
        (:call, :select_value, (:call, :(<=), 0, :y), (:call, :<<, :x, (:call, :unsigned, :y)), (:call, :>>, :x, (:call, :unsigned, (:call, :-, :y))))
      )),
    (:line, 188, :none),
    (:(=), (:call, :>>>, (:(::), :x, :BitInteger), (:(::), :y, :Int)), (:block,
        (:line, 188, :none),
        (:call, :select_value, (:call, :(<=), 0, :y), (:call, :>>>, :x, (:call, :unsigned, :y)), (:call, :<<, :x, (:call, :unsigned, (:call, :-, :y))))
      )),
    (:line, 193, :none),
    (:for, (:block,
        (:(=), :to, :BitInteger_types),
        (:(=), :from, (:tuple, (:..., :BitInteger_types), :Bool))
      ), (:block,
        (:line, 194, :none),
        (:if, (:call, :!, (:call, :(===), :to, :from)), (:block,
            (:line, 195, :none),
            (:if, (:call, :<, (:., :to, (:quote, #QuoteNode
                    :size
                  )), (:., :from, (:quote, #QuoteNode
                    :size
                  ))), (:block,
                (:line, 196, :none),
                (:if, (:call, :issubtype, :to, :Signed), (:block,
                    (:line, 197, :none),
                    (:if, (:call, :issubtype, :from, :Unsigned), (:block,
                        (:line, 198, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                              (:line, 198, :none),
                              (:call, :box, (:$, :to), (:call, :checked_trunc_sint, (:$, :to), (:call, :check_top_bit, (:call, :unbox, (:$, :from), :x))))
                            )))
                      ), (:block,
                        (:line, 201, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                              (:line, 201, :none),
                              (:call, :box, (:$, :to), (:call, :checked_trunc_sint, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                            )))
                      ))
                  ), (:block,
                    (:line, 205, :none),
                    (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                          (:line, 205, :none),
                          (:call, :box, (:$, :to), (:call, :checked_trunc_uint, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                        )))
                  )),
                (:line, 208, :none),
                (:macrocall, Symbol("@eval"), (:(=), (:call, :rem, (:(::), :x, (:$, :from)), (:(::), (:curly, :Type, (:$, :to)))), (:block,
                      (:line, 208, :none),
                      (:call, :box, (:$, :to), (:call, :trunc_int, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                    )))
              ), (:block,
                (:line, 209, :none),
                (:if, (:||, (:call, :<, (:., :from, (:quote, #QuoteNode
                          :size
                        )), (:., :to, (:quote, #QuoteNode
                          :size
                        ))), (:call, :(===), :from, :Bool)), (:block,
                    (:line, 210, :none),
                    (:if, (:call, :issubtype, :from, :Signed), (:block,
                        (:line, 211, :none),
                        (:if, (:call, :issubtype, :to, :Unsigned), (:block,
                            (:line, 212, :none),
                            (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                                  (:line, 212, :none),
                                  (:call, :box, (:$, :to), (:call, :sext_int, (:$, :to), (:call, :check_top_bit, (:call, :unbox, (:$, :from), :x))))
                                )))
                          ), (:block,
                            (:line, 215, :none),
                            (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                                  (:line, 215, :none),
                                  (:call, :box, (:$, :to), (:call, :sext_int, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                                )))
                          )),
                        (:line, 218, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :rem, (:(::), :x, (:$, :from)), (:(::), (:curly, :Type, (:$, :to)))), (:block,
                              (:line, 218, :none),
                              (:call, :box, (:$, :to), (:call, :sext_int, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                            )))
                      ), (:block,
                        (:line, 220, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                              (:line, 220, :none),
                              (:call, :box, (:$, :to), (:call, :zext_int, (:$, :to), (:call, :unbox, (:$, :from), :x)))
                            ))),
                        (:line, 221, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :rem, (:(::), :x, (:$, :from)), (:(::), (:curly, :Type, (:$, :to)))), (:block,
                              (:line, 221, :none),
                              (:call, :convert, (:$, :to), :x)
                            )))
                      ))
                  ), (:block,
                    (:line, 224, :none),
                    (:if, (:call, :!, (:call, :(===), (:call, :issubtype, :from, :Signed), (:call, :issubtype, :to, :Signed))), (:block,
                        (:line, 226, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                              (:line, 226, :none),
                              (:call, :box, (:$, :to), (:call, :check_top_bit, (:call, :unbox, (:$, :from), :x)))
                            )))
                      ), (:block,
                        (:line, 228, :none),
                        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :to))), (:(::), :x, (:$, :from))), (:block,
                              (:line, 228, :none),
                              (:call, :box, (:$, :to), (:call, :unbox, (:$, :from), :x))
                            )))
                      )),
                    (:line, 230, :none),
                    (:macrocall, Symbol("@eval"), (:(=), (:call, :rem, (:(::), :x, (:$, :from)), (:(::), (:curly, :Type, (:$, :to)))), (:block,
                          (:line, 230, :none),
                          (:call, :box, (:$, :to), (:call, :unbox, (:$, :from), :x))
                        )))
                  ))
              ))
          ))
      )),
    (:line, 235, :none),
    (:(=), (:call, (:curly, :rem, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 235, :none),
        :x
      )),
    (:line, 236, :none),
    (:(=), (:call, :rem, (:(::), :x, :Integer), (:(::), (:curly, :Type, :Bool))), (:block,
        (:line, 236, :none),
        (:call, :(!=), (:call, :&, :x, 1), 0)
      )),
    (:line, 237, :none),
    (:(=), (:call, (:curly, :mod, (:<:, :T, :Integer)), (:(::), :x, :Integer), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 237, :none),
        (:call, :rem, :x, :T)
      )),
    (:line, 239, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :Tf, (:curly, :Union, :Float32, :Float64))), (:(::), :T, :BitSigned64T), (:(::), :x, :Tf)), (:block,
        (:line, 239, :none),
        (:call, :box, :T, (:call, :checked_fptosi, :T, (:call, :unbox, :Tf, :x)))
      )),
    (:line, 241, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :Tf, (:curly, :Union, :Float32, :Float64))), (:(::), :T, :BitUnsigned64T), (:(::), :x, :Tf)), (:block,
        (:line, 241, :none),
        (:call, :box, :T, (:call, :checked_fptoui, :T, (:call, :unbox, :Tf, :x)))
      )),
    (:line, 244, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :Tf, (:curly, :Union, :Float32, :Float64))), (:(::), :T, (:curly, :Union, (:curly, :Type, :Int128), (:curly, :Type, :UInt128))), (:(::), :x, :Tf)), (:block,
        (:line, 244, :none),
        (:block,
          (:||, (:call, :isinteger, :x), (:call, :throw, (:call, :InexactError))),
          (:call, :trunc, :T, :x)
        )
      )),
    (:line, 247, :none),
    (:for, (:(=), (:tuple, :Ts, :Tu), (:tuple, (:tuple, :Int8, :UInt8), (:tuple, :Int16, :UInt16), (:tuple, :Int32, :UInt32), (:tuple, :Int64, :UInt64), (:tuple, :Int128, :UInt128))), (:block,
        (:line, 248, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, :Signed)), (:(::), :x, (:$, :Tu))), (:block,
              (:line, 248, :none),
              (:call, :convert, (:$, :Ts), :x)
            ))),
        (:line, 249, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, :convert, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, (:$, :Ts))), (:block,
              (:line, 249, :none),
              (:call, :convert, (:$, :Tu), :x)
            )))
      )),
    (:line, 252, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Float32, :Float64, :Bool))), (:(::), (:curly, :Type, :Signed)), (:(::), :x, :T)), (:block,
        (:line, 252, :none),
        (:call, :convert, :Int, :x)
      )),
    (:line, 253, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Float32, :Float64, :Bool))), (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :T)), (:block,
        (:line, 253, :none),
        (:call, :convert, :UInt, :x)
      )),
    (:line, 255, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Integer)), (:(::), :x, :Integer)), (:block,
        (:line, 255, :none),
        :x
      )),
    (:line, 256, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Integer)), (:(::), :x, :Real)), (:block,
        (:line, 256, :none),
        (:call, :convert, :Signed, :x)
      )),
    (:line, 258, :none),
    (:(=), (:call, :round, (:(::), :x, :Integer)), (:block,
        (:line, 258, :none),
        :x
      )),
    (:line, 259, :none),
    (:(=), (:call, :trunc, (:(::), :x, :Integer)), (:block,
        (:line, 259, :none),
        :x
      )),
    (:line, 260, :none),
    (:(=), (:call, :floor, (:(::), :x, :Integer)), (:block,
        (:line, 260, :none),
        :x
      )),
    (:line, 261, :none),
    (:(=), (:call, :ceil, (:(::), :x, :Integer)), (:block,
        (:line, 261, :none),
        :x
      )),
    (:line, 263, :none),
    (:(=), (:call, (:curly, :round, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Integer)), (:block,
        (:line, 263, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 264, :none),
    (:(=), (:call, (:curly, :trunc, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Integer)), (:block,
        (:line, 264, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 265, :none),
    (:(=), (:call, (:curly, :floor, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Integer)), (:block,
        (:line, 265, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 266, :none),
    (:(=), (:call, (:curly, :ceil, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Integer)), (:block,
        (:line, 266, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 270, :none),
    (:macro, (:call, :int128_str, :s), (:block,
        (:line, 271, :none),
        (:call, :parse, :Int128, :s)
      )),
    (:line, 274, :none),
    (:macro, (:call, :uint128_str, :s), (:block,
        (:line, 275, :none),
        (:call, :parse, :UInt128, :s)
      )),
    (:line, 278, :none),
    (:macro, (:call, :big_str, :s), (:block,
        (:line, 279, :none),
        (:(=), :n, (:call, :tryparse, :BigInt, :s)),
        (:line, 280, :none),
        (:&&, (:call, :!, (:call, :isnull, :n)), (:return, (:call, :get, :n))),
        (:line, 281, :none),
        (:(=), :n, (:call, :tryparse, :BigFloat, :s)),
        (:line, 282, :none),
        (:&&, (:call, :!, (:call, :isnull, :n)), (:return, (:call, :get, :n))),
        (:line, 283, :none),
        (:(=), :message, (:string, "invalid number format ", :s, " for BigInt or BigFloat")),
        (:line, 284, :none),
        (:quote, (:call, :throw, (:call, :ArgumentError, (:$, :message))))
      )),
    (:line, 289, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Int8)), (:(::), (:curly, :Type, :Int16))), (:block,
        (:line, 289, :none),
        :Int16
      )),
    (:line, 290, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :UInt8)), (:(::), (:curly, :Type, :UInt16))), (:block,
        (:line, 290, :none),
        :UInt16
      )),
    (:line, 291, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :Int8, :Int16))), (:(::), (:curly, :Type, :Int32)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 291, :none),
        :Int32
      )),
    (:line, 292, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :UInt8, :UInt16))), (:(::), (:curly, :Type, :UInt32)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 292, :none),
        :UInt32
      )),
    (:line, 293, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :Int8, :Int16, :Int32))), (:(::), (:curly, :Type, :Int64)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 293, :none),
        :Int64
      )),
    (:line, 294, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :UInt8, :UInt16, :UInt32))), (:(::), (:curly, :Type, :UInt64)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 294, :none),
        :UInt64
      )),
    (:line, 295, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :BitSigned64)), (:(::), (:curly, :Type, :Int128)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 295, :none),
        :Int128
      )),
    (:line, 296, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :BitUnsigned64)), (:(::), (:curly, :Type, :UInt128)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 296, :none),
        :UInt128
      )),
    (:line, 297, :none),
    (:for, (:(=), :T, :BitSigned_types), (:block,
        (:line, 298, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, (:curly, :promote_rule, (:<:, :S, (:curly, :Union, :UInt8, :UInt16))), (:(::), (:curly, :Type, :S)), (:(::), (:curly, :Type, (:$, :T)))), (:block,
              (:line, 298, :none),
              (:$, (:if, (:call, :<, (:call, :sizeof, :T), (:call, :sizeof, :Int)), :Int, :T))
            )))
      )),
    (:line, 301, :none),
    (:macrocall, Symbol("@eval"), (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :Int8, :Int16, :Int32))), (:(::), (:curly, :Type, :UInt32)), (:(::), (:curly, :Type, :T))), (:block,
          (:line, 301, :none),
          (:$, (:if, (:call, :(==), (:call, (:., :Core, (:quote, #QuoteNode
                      :sizeof
                    )), :Int), 8), :Int, :UInt))
        ))),
    (:line, 303, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :UInt32)), (:(::), (:curly, :Type, :Int64))), (:block,
        (:line, 303, :none),
        :Int64
      )),
    (:line, 304, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :BitSigned64)), (:(::), (:curly, :Type, :UInt64)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 304, :none),
        :UInt64
      )),
    (:line, 305, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, (:curly, :Union, :UInt32, :UInt64))), (:(::), (:curly, :Type, :T)), (:(::), (:curly, :Type, :Int128))), (:block,
        (:line, 305, :none),
        :Int128
      )),
    (:line, 306, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :BitSigned)), (:(::), (:curly, :Type, :UInt128)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 306, :none),
        :UInt128
      )),
    (:line, 308, :none),
    (:(=), (:call, :_default_type, (:(::), :T, (:curly, :Type, :Unsigned))), (:block,
        (:line, 308, :none),
        :UInt
      )),
    (:line, 309, :none),
    (:(=), (:call, :_default_type, (:(::), :T, (:curly, :Union, (:curly, :Type, :Integer), (:curly, :Type, :Signed)))), (:block,
        (:line, 309, :none),
        :Int
      )),
    (:line, 313, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Int8))), (:block,
        (:line, 313, :none),
        (:call, :Int8, -128)
      )),
    (:line, 314, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Int8))), (:block,
        (:line, 314, :none),
        (:call, :Int8, 127)
      )),
    (:line, 315, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :UInt8))), (:block,
        (:line, 315, :none),
        (:call, :UInt8, 0)
      )),
    (:line, 316, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :UInt8))), (:block,
        (:line, 316, :none),
        (:call, :UInt8, 255)
      )),
    (:line, 317, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Int16))), (:block,
        (:line, 317, :none),
        (:call, :Int16, -32768)
      )),
    (:line, 318, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Int16))), (:block,
        (:line, 318, :none),
        (:call, :Int16, 32767)
      )),
    (:line, 319, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :UInt16))), (:block,
        (:line, 319, :none),
        (:call, :UInt16, 0)
      )),
    (:line, 320, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :UInt16))), (:block,
        (:line, 320, :none),
        (:call, :UInt16, 65535)
      )),
    (:line, 321, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Int32))), (:block,
        (:line, 321, :none),
        (:call, :Int32, -2147483648)
      )),
    (:line, 322, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Int32))), (:block,
        (:line, 322, :none),
        (:call, :Int32, 2147483647)
      )),
    (:line, 323, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :UInt32))), (:block,
        (:line, 323, :none),
        (:call, :UInt32, 0)
      )),
    (:line, 324, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :UInt32))), (:block,
        (:line, 324, :none),
        (:call, :UInt32, 4294967295)
      )),
    (:line, 325, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Int64))), (:block,
        (:line, 325, :none),
        -9223372036854775808
      )),
    (:line, 326, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Int64))), (:block,
        (:line, 326, :none),
        9223372036854775807
      )),
    (:line, 327, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :UInt64))), (:block,
        (:line, 327, :none),
        (:call, :UInt64, 0)
      )),
    (:line, 328, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :UInt64))), (:block,
        (:line, 328, :none),
        0xffffffffffffffff
      )),
    (:line, 329, :none),
    (:macrocall, Symbol("@eval"), (:(=), (:call, :typemin, (:(::), (:curly, :Type, :UInt128))), (:block,
          (:line, 329, :none),
          (:$, (:call, :convert, :UInt128, 0))
        ))),
    (:line, 330, :none),
    (:macrocall, Symbol("@eval"), (:(=), (:call, :typemax, (:(::), (:curly, :Type, :UInt128))), (:block,
          (:line, 330, :none),
          (:$, (:call, :box, :UInt128, (:call, :unbox, :Int128, (:call, :convert, :Int128, -1))))
        ))),
    (:line, 331, :none),
    (:macrocall, Symbol("@eval"), (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Int128))), (:block,
          (:line, 331, :none),
          (:$, (:call, :<<, (:call, :convert, :Int128, 1), 127))
        ))),
    (:line, 332, :none),
    (:macrocall, Symbol("@eval"), (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Int128))), (:block,
          (:line, 332, :none),
          (:$, (:call, :box, :Int128, (:call, :unbox, :UInt128, (:call, :>>, (:call, :typemax, :UInt128), 1))))
        ))),
    (:line, 334, :none),
    (:(=), (:call, (:curly, :widen, (:<:, :T, (:curly, :Union, :Int8, :Int16))), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 334, :none),
        :Int32
      )),
    (:line, 335, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :Int32))), (:block,
        (:line, 335, :none),
        :Int64
      )),
    (:line, 336, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :Int64))), (:block,
        (:line, 336, :none),
        :Int128
      )),
    (:line, 337, :none),
    (:(=), (:call, (:curly, :widen, (:<:, :T, (:curly, :Union, :UInt8, :UInt16))), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 337, :none),
        :UInt32
      )),
    (:line, 338, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :UInt32))), (:block,
        (:line, 338, :none),
        :UInt64
      )),
    (:line, 339, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :UInt64))), (:block,
        (:line, 339, :none),
        :UInt128
      )),
    (:line, 344, :none),
    (:(=), (:call, :widemul, (:(::), :x, :Signed), (:(::), :y, :Unsigned)), (:block,
        (:line, 344, :none),
        (:call, :*, (:call, :widen, :x), (:call, :signed, (:call, :widen, :y)))
      )),
    (:line, 345, :none),
    (:(=), (:call, :widemul, (:(::), :x, :Unsigned), (:(::), :y, :Signed)), (:block,
        (:line, 345, :none),
        (:call, :*, (:call, :signed, (:call, :widen, :x)), (:call, :widen, :y))
      )),
    (:line, 347, :none),
    (:(=), (:call, :widemul, (:(::), :x, :Bool), (:(::), :y, :Bool)), (:block,
        (:line, 347, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 348, :none),
    (:(=), (:call, :widemul, (:(::), :x, :Bool), (:(::), :y, :Number)), (:block,
        (:line, 348, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 349, :none),
    (:(=), (:call, :widemul, (:(::), :x, :Number), (:(::), :y, :Bool)), (:block,
        (:line, 349, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 354, :none),
    (:if, (:call, :(==), (:call, (:., :Core, (:quote, #QuoteNode
              :sizeof
            )), :Int), 4), (:block,
        (:line, 355, :none),
        (:function, (:call, :widemul, (:(::), :u, :Int64), (:(::), :v, :Int64)), (:block,
            (:line, 356, :none),
            (:local, (:(::), :u0, :UInt64), (:(::), :v0, :UInt64), (:(::), :w0, :UInt64)),
            (:line, 357, :none),
            (:local, (:(::), :u1, :Int64), (:(::), :v1, :Int64), (:(::), :w1, :UInt64), (:(::), :w2, :Int64), (:(::), :t, :UInt64)),
            (:line, 359, :none),
            (:(=), :u0, (:call, :&, :u, 0xffffffff)),
            (:line, 359, :none),
            (:(=), :u1, (:call, :>>, :u, 32)),
            (:line, 360, :none),
            (:(=), :v0, (:call, :&, :v, 0xffffffff)),
            (:line, 360, :none),
            (:(=), :v1, (:call, :>>, :v, 32)),
            (:line, 361, :none),
            (:(=), :w0, (:call, :*, :u0, :v0)),
            (:line, 362, :none),
            (:(=), :t, (:call, :+, (:call, :*, (:call, :reinterpret, :UInt64, :u1), :v0), (:call, :>>>, :w0, 32))),
            (:line, 363, :none),
            (:(=), :w2, (:call, :>>, (:call, :reinterpret, :Int64, :t), 32)),
            (:line, 364, :none),
            (:(=), :w1, (:call, :+, (:call, :*, :u0, (:call, :reinterpret, :UInt64, :v1)), (:call, :&, :t, 0xffffffff))),
            (:line, 365, :none),
            (:(=), :hi, (:call, :+, (:call, :*, :u1, :v1), :w2, (:call, :>>, (:call, :reinterpret, :Int64, :w1), 32))),
            (:line, 366, :none),
            (:(=), :lo, (:call, :+, (:call, :&, :w0, 0xffffffff), (:call, :<<, :w1, 32))),
            (:line, 367, :none),
            (:call, :+, (:call, :<<, (:call, :Int128, :hi), 64), (:call, :Int128, :lo))
          )),
        (:line, 370, :none),
        (:function, (:call, :widemul, (:(::), :u, :UInt64), (:(::), :v, :UInt64)), (:block,
            (:line, 371, :none),
            (:local, (:(::), :u0, :UInt64), (:(::), :v0, :UInt64), (:(::), :w0, :UInt64)),
            (:line, 372, :none),
            (:local, (:(::), :u1, :UInt64), (:(::), :v1, :UInt64), (:(::), :w1, :UInt64), (:(::), :w2, :UInt64), (:(::), :t, :UInt64)),
            (:line, 374, :none),
            (:(=), :u0, (:call, :&, :u, 0xffffffff)),
            (:line, 374, :none),
            (:(=), :u1, (:call, :>>>, :u, 32)),
            (:line, 375, :none),
            (:(=), :v0, (:call, :&, :v, 0xffffffff)),
            (:line, 375, :none),
            (:(=), :v1, (:call, :>>>, :v, 32)),
            (:line, 376, :none),
            (:(=), :w0, (:call, :*, :u0, :v0)),
            (:line, 377, :none),
            (:(=), :t, (:call, :+, (:call, :*, :u1, :v0), (:call, :>>>, :w0, 32))),
            (:line, 378, :none),
            (:(=), :w2, (:call, :>>>, :t, 32)),
            (:line, 379, :none),
            (:(=), :w1, (:call, :+, (:call, :*, :u0, :v1), (:call, :&, :t, 0xffffffff))),
            (:line, 380, :none),
            (:(=), :hi, (:call, :+, (:call, :*, :u1, :v1), :w2, (:call, :>>>, :w1, 32))),
            (:line, 381, :none),
            (:(=), :lo, (:call, :+, (:call, :&, :w0, 0xffffffff), (:call, :<<, :w1, 32))),
            (:line, 382, :none),
            (:call, :+, (:call, :<<, (:call, :UInt128, :hi), 64), (:call, :UInt128, :lo))
          )),
        (:line, 385, :none),
        (:function, (:call, :*, (:(::), :u, :Int128), (:(::), :v, :Int128)), (:block,
            (:line, 386, :none),
            (:(=), :u0, (:call, :%, :u, :UInt64)),
            (:line, 386, :none),
            (:(=), :u1, (:call, :Int64, (:call, :>>, :u, 64))),
            (:line, 387, :none),
            (:(=), :v0, (:call, :%, :v, :UInt64)),
            (:line, 387, :none),
            (:(=), :v1, (:call, :Int64, (:call, :>>, :v, 64))),
            (:line, 388, :none),
            (:(=), :lolo, (:call, :widemul, :u0, :v0)),
            (:line, 389, :none),
            (:(=), :lohi, (:call, :widemul, (:call, :reinterpret, :Int64, :u0), :v1)),
            (:line, 390, :none),
            (:(=), :hilo, (:call, :widemul, :u1, (:call, :reinterpret, :Int64, :v0))),
            (:line, 391, :none),
            (:(=), :t, (:call, :+, (:call, :reinterpret, :UInt128, :hilo), (:call, :>>>, :lolo, 64))),
            (:line, 392, :none),
            (:(=), :w1, (:call, :+, (:call, :reinterpret, :UInt128, :lohi), (:call, :&, :t, 0xffffffffffffffff))),
            (:line, 393, :none),
            (:call, :+, (:call, :Int128, (:call, :&, :lolo, 0xffffffffffffffff)), (:call, :<<, (:call, :reinterpret, :Int128, :w1), 64))
          )),
        (:line, 396, :none),
        (:function, (:call, :*, (:(::), :u, :UInt128), (:(::), :v, :UInt128)), (:block,
            (:line, 397, :none),
            (:(=), :u0, (:call, :%, :u, :UInt64)),
            (:line, 397, :none),
            (:(=), :u1, (:call, :UInt64, (:call, :>>>, :u, 64))),
            (:line, 398, :none),
            (:(=), :v0, (:call, :%, :v, :UInt64)),
            (:line, 398, :none),
            (:(=), :v1, (:call, :UInt64, (:call, :>>>, :v, 64))),
            (:line, 399, :none),
            (:(=), :lolo, (:call, :widemul, :u0, :v0)),
            (:line, 400, :none),
            (:(=), :lohi, (:call, :widemul, :u0, :v1)),
            (:line, 401, :none),
            (:(=), :hilo, (:call, :widemul, :u1, :v0)),
            (:line, 402, :none),
            (:(=), :t, (:call, :+, :hilo, (:call, :>>>, :lolo, 64))),
            (:line, 403, :none),
            (:(=), :w1, (:call, :+, :lohi, (:call, :&, :t, 0xffffffffffffffff))),
            (:line, 404, :none),
            (:call, :+, (:call, :&, :lolo, 0xffffffffffffffff), (:call, :<<, (:call, :UInt128, :w1), 64))
          )),
        (:line, 407, :none),
        (:function, (:call, :div, (:(::), :x, :Int128), (:(::), :y, :Int128)), (:block,
            (:line, 408, :none),
            (:&&, (:call, :&, (:call, :(==), :x, (:call, :typemin, :Int128)), (:call, :(==), :y, -1)), (:call, :throw, (:call, :DivideError))),
            (:line, 409, :none),
            (:call, :Int128, (:call, :div, (:call, :BigInt, :x), (:call, :BigInt, :y)))
          )),
        (:line, 411, :none),
        (:function, (:call, :div, (:(::), :x, :UInt128), (:(::), :y, :UInt128)), (:block,
            (:line, 412, :none),
            (:call, :UInt128, (:call, :div, (:call, :BigInt, :x), (:call, :BigInt, :y)))
          )),
        (:line, 415, :none),
        (:function, (:call, :rem, (:(::), :x, :Int128), (:(::), :y, :Int128)), (:block,
            (:line, 416, :none),
            (:call, :Int128, (:call, :rem, (:call, :BigInt, :x), (:call, :BigInt, :y)))
          )),
        (:line, 418, :none),
        (:function, (:call, :rem, (:(::), :x, :UInt128), (:(::), :y, :UInt128)), (:block,
            (:line, 419, :none),
            (:call, :UInt128, (:call, :rem, (:call, :BigInt, :x), (:call, :BigInt, :y)))
          )),
        (:line, 422, :none),
        (:function, (:call, :mod, (:(::), :x, :Int128), (:(::), :y, :Int128)), (:block,
            (:line, 423, :none),
            (:call, :Int128, (:call, :mod, (:call, :BigInt, :x), (:call, :BigInt, :y)))
          ))
      ), (:block,
        (:line, 426, :none),
        (:(=), (:call, (:curly, :*, (:<:, :T, (:curly, :Union, :Int128, :UInt128))), (:(::), :x, :T), (:(::), :y, :T)), (:block,
            (:line, 426, :none),
            (:call, :box, :T, (:call, :mul_int, (:call, :unbox, :T, :x), (:call, :unbox, :T, :y)))
          )),
        (:line, 428, :none),
        (:(=), (:call, :div, (:(::), :x, :Int128), (:(::), :y, :Int128)), (:block,
            (:line, 428, :none),
            (:call, :box, :Int128, (:call, :checked_sdiv_int, (:call, :unbox, :Int128, :x), (:call, :unbox, :Int128, :y)))
          )),
        (:line, 429, :none),
        (:(=), (:call, :div, (:(::), :x, :UInt128), (:(::), :y, :UInt128)), (:block,
            (:line, 429, :none),
            (:call, :box, :UInt128, (:call, :checked_udiv_int, (:call, :unbox, :UInt128, :x), (:call, :unbox, :UInt128, :y)))
          )),
        (:line, 431, :none),
        (:(=), (:call, :rem, (:(::), :x, :Int128), (:(::), :y, :Int128)), (:block,
            (:line, 431, :none),
            (:call, :box, :Int128, (:call, :checked_srem_int, (:call, :unbox, :Int128, :x), (:call, :unbox, :Int128, :y)))
          )),
        (:line, 432, :none),
        (:(=), (:call, :rem, (:(::), :x, :UInt128), (:(::), :y, :UInt128)), (:block,
            (:line, 432, :none),
            (:call, :box, :UInt128, (:call, :checked_urem_int, (:call, :unbox, :UInt128, :x), (:call, :unbox, :UInt128, :y)))
          ))
      ))
  ))