(:quote, (:block,
    (:line, 3, :none),
    (:typealias, :NonSliceIndex, (:curly, :Union, :Colon, :AbstractArray)),
    (:line, 4, :none),
    (:typealias, :ViewIndex, (:curly, :Union, :Real, :NonSliceIndex)),
    (:line, 5, :none),
    (:abstract, (:curly, :AbstractCartesianIndex, :N)),
    (:line, 8, :none),
    (:type, false, (:<:, (:curly, :SubArray, :T, :N, :P, :I, :L), (:curly, :AbstractArray, :T, :N)), (:block,
        (:line, 9, :none),
        (:(::), :parent, :P),
        (:line, 10, :none),
        (:(::), :indexes, :I),
        (:line, 11, :none),
        (:(::), :offset1, :Int),
        (:line, 12, :none),
        (:(::), :stride1, :Int),
        (:line, 13, :none),
        (:function, (:call, :SubArray, :parent, :indexes, :offset1, :stride1), (:block,
            (:line, 14, :none),
            (:call, :check_parent_index_match, :parent, :indexes),
            (:line, 15, :none),
            (:call, :new, :parent, :indexes, :offset1, :stride1)
          ))
      )),
    (:line, 19, :none),
    (:function, (:call, :SubArray, (:(::), :parent, :AbstractArray), (:(::), :indexes, :Tuple), (:(::), :dims, :Tuple)), (:block,
        (:line, 20, :none),
        (:call, :SubArray, (:call, :linearindexing, (:call, :viewindexing, :indexes), (:call, :linearindexing, :parent)), :parent, :indexes, :dims)
      )),
    (:line, 22, :none),
    (:function, (:call, (:curly, :SubArray, :P, :I, :N), (:(::), :LinearSlow), (:(::), :parent, :P), (:(::), :indexes, :I), (:(::), :dims, (:curly, :NTuple, :N))), (:block,
        (:line, 23, :none),
        (:call, (:curly, :SubArray, (:call, :eltype, :P), :N, :P, :I, false), :parent, :indexes, 0, 0)
      )),
    (:line, 25, :none),
    (:function, (:call, (:curly, :SubArray, :P, :I, :N), (:(::), :LinearFast), (:(::), :parent, :P), (:(::), :indexes, :I), (:(::), :dims, (:curly, :NTuple, :N))), (:block,
        (:line, 27, :none),
        (:(=), :stride1, (:call, :compute_stride1, :parent, :indexes)),
        (:line, 28, :none),
        (:call, (:curly, :SubArray, (:call, :eltype, :P), :N, :P, :I, true), :parent, :indexes, (:call, :compute_offset1, :parent, :stride1, :indexes), :stride1)
      )),
    (:line, 31, :none),
    (:(=), (:call, (:curly, :check_parent_index_match, :T, :N), (:(::), :parent, (:curly, :AbstractArray, :T, :N)), (:(::), :indexes, (:curly, :NTuple, :N))), (:block,
        (:line, 31, :none),
        :nothing
      )),
    (:line, 32, :none),
    (:(=), (:call, :check_parent_index_match, :parent, :indexes), (:block,
        (:line, 32, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "number of indices (", (:call, :length, :indexes), ") must match the parent dimensionality (", (:call, :ndims, :parent), ")")))
      )),
    (:line, 35, :none),
    (:(=), (:call, :viewindexing), (:block,
        (:line, 35, :none),
        (:call, :LinearFast)
      )),
    (:line, 37, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, :Real, (:curly, :Vararg, :Any)))), (:block,
        (:line, 37, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :viewindexing, (:call, :tail, :I))
        )
      )),
    (:line, 39, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, :Colon, :Colon, (:curly, :Vararg, :Any)))), (:block,
        (:line, 39, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :viewindexing, (:call, :tail, :I))
        )
      )),
    (:line, 41, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, :Colon, :UnitRange, (:curly, :Vararg, :Real)))), (:block,
        (:line, 41, :none),
        (:call, :LinearFast)
      )),
    (:line, 43, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, (:curly, :Union, :Range, :Colon), (:curly, :Vararg, :Real)))), (:block,
        (:line, 43, :none),
        (:call, :LinearFast)
      )),
    (:line, 45, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, (:curly, :Vararg, :Any)))), (:block,
        (:line, 45, :none),
        (:call, :LinearSlow)
      )),
    (:line, 47, :none),
    (:(=), (:call, :viewindexing, (:(::), :I, (:curly, :Tuple, :AbstractArray, (:curly, :Vararg, :Any)))), (:block,
        (:line, 47, :none),
        (:call, :LinearSlow)
      )),
    (:line, 50, :none),
    (:(=), (:call, :size, (:(::), :V, :SubArray)), (:block,
        (:line, 50, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :map, (:->, :n, (:block,
                (:line, 50, :none),
                (:call, :Int, (:call, :unsafe_length, :n))
              )), (:call, :indices, :V))
        )
      )),
    (:line, 52, :none),
    (:(=), (:call, :similar, (:(::), :V, :SubArray), (:(::), :T, :Type), (:(::), :dims, :Dims)), (:block,
        (:line, 52, :none),
        (:call, :similar, (:., :V, (:quote, #QuoteNode
              :parent
            )), :T, :dims)
      )),
    (:line, 54, :none),
    (:(=), (:call, :parent, (:(::), :V, :SubArray)), (:block,
        (:line, 54, :none),
        (:., :V, (:quote, #QuoteNode
            :parent
          ))
      )),
    (:line, 55, :none),
    (:(=), (:call, :parentindexes, (:(::), :V, :SubArray)), (:block,
        (:line, 55, :none),
        (:., :V, (:quote, #QuoteNode
            :indexes
          ))
      )),
    (:line, 57, :none),
    (:(=), (:call, :parent, (:(::), :a, :AbstractArray)), (:block,
        (:line, 57, :none),
        :a
      )),
    (:line, 58, :none),
    (:(=), (:call, :parentindexes, (:(::), :a, :AbstractArray)), (:block,
        (:line, 58, :none),
        (:call, :ntuple, (:->, :i, (:block,
              (:line, 58, :none),
              (:call, :OneTo, (:call, :size, :a, :i))
            )), (:call, :ndims, :a))
      )),
    (:line, 62, :none),
    (:function, (:call, (:curly, :view, :T, :N), (:(::), :A, (:curly, :AbstractArray, :T, :N)), (:(::), :I, (:curly, :Vararg, :ViewIndex, :N))), (:block,
        (:line, 63, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 64, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, (:..., :I))),
        (:line, 65, :none),
        (:call, :unsafe_view, :A, (:..., :I))
      )),
    (:line, 67, :none),
    (:function, (:call, :view, (:(::), :A, :AbstractArray), (:(::), :i, :ViewIndex)), (:block,
        (:line, 68, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 69, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, :i)),
        (:line, 70, :none),
        (:call, :unsafe_view, (:call, :reshape, :A, (:curly, :Val, 1)), :i)
      )),
    (:line, 72, :none),
    (:function, (:call, (:curly, :view, :N), (:(::), :A, :AbstractArray), (:(::), :I, (:curly, :Vararg, :ViewIndex, :N))), (:block,
        (:line, 73, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 74, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, (:..., :I))),
        (:line, 75, :none),
        (:call, :unsafe_view, (:call, :reshape, :A, (:curly, :Val, :N)), (:..., :I))
      )),
    (:line, 78, :none),
    (:function, (:call, (:curly, :unsafe_view, :T, :N), (:(::), :A, (:curly, :AbstractArray, :T, :N)), (:(::), :I, (:curly, :Vararg, :ViewIndex, :N))), (:block,
        (:line, 79, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 80, :none),
        (:(=), :J, (:call, :to_indexes, (:..., :I))),
        (:line, 81, :none),
        (:call, :SubArray, :A, :J, (:call, :map, :unsafe_length, (:call, :index_shape, :A, (:..., :J))))
      )),
    (:line, 83, :none),
    (:function, (:call, (:curly, :unsafe_view, :T, :N), (:(::), :V, (:curly, :SubArray, :T, :N)), (:(::), :I, (:curly, :Vararg, :ViewIndex, :N))), (:block,
        (:line, 84, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 85, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), :idxs, (:call, :reindex, :V, (:., :V, (:quote, #QuoteNode
                  :indexes
                )), (:call, :to_indexes, (:..., :I))))),
        (:line, 86, :none),
        (:call, :SubArray, (:., :V, (:quote, #QuoteNode
              :parent
            )), :idxs, (:call, :map, :unsafe_length, (:call, :index_shape, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:..., :idxs))))
      )),
    (:line, 97, :none),
    (:typealias, (:curly, :AbstractZeroDimArray, :T), (:curly, :AbstractArray, :T, 0)),
    (:line, 98, :none),
    (:typealias, :DroppedScalar, (:curly, :Union, :Real, :AbstractCartesianIndex)),
    (:line, 100, :none),
    (:(=), (:call, :reindex, :V, (:(::), (:curly, :Tuple)), (:(::), (:curly, :Tuple))), (:block,
        (:line, 100, :none),
        (:tuple,)
      )),
    (:line, 103, :none),
    (:(=), (:call, :reindex, :V, (:(::), :idxs, (:curly, :Tuple, :DroppedScalar, (:curly, :Vararg, :Any))), (:(::), :subidxs, (:curly, :Tuple, (:curly, :Vararg, :Any)))), (:block,
        (:line, 103, :none),
        (:block,
          (:macrocall, Symbol("@_propagate_inbounds_meta")),
          (:tuple, (:ref, :idxs, 1), (:..., (:call, :reindex, :V, (:call, :tail, :idxs), :subidxs)))
        )
      )),
    (:line, 107, :none),
    (:(=), (:call, :reindex, :V, (:(::), :idxs, (:curly, :Tuple, :Colon, (:curly, :Vararg, :Any))), (:(::), :subidxs, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 107, :none),
        (:block,
          (:macrocall, Symbol("@_propagate_inbounds_meta")),
          (:tuple, (:ref, :subidxs, 1), (:..., (:call, :reindex, :V, (:call, :tail, :idxs), (:call, :tail, :subidxs))))
        )
      )),
    (:line, 111, :none),
    (:(=), (:call, :reindex, :V, (:(::), :idxs, (:curly, :Tuple, :AbstractVector, (:curly, :Vararg, :Any))), (:(::), :subidxs, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 111, :none),
        (:block,
          (:macrocall, Symbol("@_propagate_inbounds_meta")),
          (:tuple, (:ref, (:ref, :idxs, 1), (:ref, :subidxs, 1)), (:..., (:call, :reindex, :V, (:call, :tail, :idxs), (:call, :tail, :subidxs))))
        )
      )),
    (:line, 115, :none),
    (:(=), (:call, :reindex, :V, (:(::), :idxs, (:curly, :Tuple, :AbstractMatrix, (:curly, :Vararg, :Any))), (:(::), :subidxs, (:curly, :Tuple, :Any, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 115, :none),
        (:block,
          (:macrocall, Symbol("@_propagate_inbounds_meta")),
          (:tuple, (:ref, (:ref, :idxs, 1), (:ref, :subidxs, 1), (:ref, :subidxs, 2)), (:..., (:call, :reindex, :V, (:call, :tail, :idxs), (:call, :tail, (:call, :tail, :subidxs)))))
        )
      )),
    (:line, 119, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :reindex, :T, :N), :V, (:(::), :idxs, (:curly, :Tuple, (:curly, :AbstractArray, :T, :N), (:curly, :Vararg, :Any))), (:(::), :subidxs, (:curly, :Tuple, (:curly, :Vararg, :Any)))), (:block,
          (:line, 120, :none),
          (:if, (:call, :(>=), (:call, :length, (:., :subidxs, (:quote, #QuoteNode
                    :parameters
                  ))), :N), (:block,
              (:line, 121, :none),
              (:(=), :subs, (:comprehension, (:generator, (:quote, (:ref, :subidxs, (:$, :d))), (:(=), :d, (:(:), 1, :N))))),
              (:line, 122, :none),
              (:(=), :tail, (:comprehension, (:generator, (:quote, (:ref, :subidxs, (:$, :d))), (:(=), :d, (:(:), (:call, :+, :N, 1), (:call, :length, (:., :subidxs, (:quote, #QuoteNode
                              :parameters
                            )))))))),
              (:line, 123, :none),
              (:quote, (:block,
                  (:macrocall, Symbol("@_propagate_inbounds_meta")),
                  (:tuple, (:ref, (:ref, :idxs, 1), (:$, (:tuple, (:..., :subs)))), (:..., (:call, :reindex, :V, (:call, :tail, :idxs), (:tuple, (:$, (:tuple, (:..., :tail)))))))
                ))
            ), (:block,
              (:line, 125, :none),
              (:quote, (:call, :throw, (:call, :ArgumentError, (:string, "cannot re-index ", (:call, :ndims, :V), " dimensional SubArray with fewer than ", (:call, :ndims, :V), " indices\nThis should not occur; please submit a bug report."))))
            ))
        ))),
    (:line, 130, :none),
    (:typealias, (:curly, :SlowSubArray, :T, :N, :P, :I), (:curly, :SubArray, :T, :N, :P, :I, false)),
    (:line, 131, :none),
    (:function, (:call, (:curly, :getindex, :T, :N), (:(::), :V, (:curly, :SlowSubArray, :T, :N)), (:(::), :I, (:curly, :Vararg, :Real, :N))), (:block,
        (:line, 132, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 133, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, (:..., :I))),
        (:line, 134, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), :r, (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:..., (:call, :reindex, :V, (:., :V, (:quote, #QuoteNode
                      :indexes
                    )), (:call, :to_indexes, (:..., :I))))))),
        (:line, 135, :none),
        :r
      )),
    (:line, 138, :none),
    (:typealias, (:curly, :FastSubArray, :T, :N, :P, :I), (:curly, :SubArray, :T, :N, :P, :I, true)),
    (:line, 139, :none),
    (:function, (:call, :getindex, (:(::), :V, :FastSubArray), (:(::), :i, :Real)), (:block,
        (:line, 140, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 141, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, :i)),
        (:line, 142, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), :r, (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:call, :+, (:., :V, (:quote, #QuoteNode
                    :offset1
                  )), (:call, :*, (:., :V, (:quote, #QuoteNode
                      :stride1
                    )), (:call, :to_index, :i)))))),
        (:line, 143, :none),
        :r
      )),
    (:line, 146, :none),
    (:typealias, (:curly, :FastContiguousSubArray, :T, :N, :P, (:<:, :I, (:curly, :Tuple, (:curly, :Union, :Colon, :UnitRange), (:curly, :Vararg, :Any)))), (:curly, :SubArray, :T, :N, :P, :I, true)),
    (:line, 147, :none),
    (:function, (:call, :getindex, (:(::), :V, :FastContiguousSubArray), (:(::), :i, :Real)), (:block,
        (:line, 148, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 149, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, :i)),
        (:line, 150, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), :r, (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:call, :+, (:., :V, (:quote, #QuoteNode
                    :offset1
                  )), (:call, :to_index, :i))))),
        (:line, 151, :none),
        :r
      )),
    (:line, 154, :none),
    (:function, (:call, (:curly, :setindex!, :T, :N), (:(::), :V, (:curly, :SlowSubArray, :T, :N)), :x, (:(::), :I, (:curly, :Vararg, :Real, :N))), (:block,
        (:line, 155, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 156, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, (:..., :I))),
        (:line, 157, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:..., (:call, :reindex, :V, (:., :V, (:quote, #QuoteNode
                      :indexes
                    )), (:call, :to_indexes, (:..., :I))))), :x)),
        (:line, 158, :none),
        :V
      )),
    (:line, 160, :none),
    (:function, (:call, :setindex!, (:(::), :V, :FastSubArray), :x, (:(::), :i, :Real)), (:block,
        (:line, 161, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 162, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, :i)),
        (:line, 163, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:call, :+, (:., :V, (:quote, #QuoteNode
                    :offset1
                  )), (:call, :*, (:., :V, (:quote, #QuoteNode
                      :stride1
                    )), (:call, :to_index, :i)))), :x)),
        (:line, 164, :none),
        :V
      )),
    (:line, 166, :none),
    (:function, (:call, :setindex!, (:(::), :V, :FastContiguousSubArray), :x, (:(::), :i, :Real)), (:block,
        (:line, 167, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 168, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :V, :i)),
        (:line, 169, :none),
        (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:., :V, (:quote, #QuoteNode
                  :parent
                )), (:call, :+, (:., :V, (:quote, #QuoteNode
                    :offset1
                  )), (:call, :to_index, :i))), :x)),
        (:line, 170, :none),
        :V
      )),
    (:line, 173, :none),
    (:(=), (:call, (:curly, :linearindexing, (:<:, :T, :FastSubArray)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 173, :none),
        (:call, :LinearFast)
      )),
    (:line, 174, :none),
    (:(=), (:call, (:curly, :linearindexing, (:<:, :T, :SubArray)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 174, :none),
        (:call, :LinearSlow)
      )),
    (:line, 176, :none),
    (:(=), (:call, :getindex, (:(::), :Colon), :i), (:block,
        (:line, 176, :none),
        (:call, :to_index, :i)
      )),
    (:line, 177, :none),
    (:(=), (:call, :unsafe_getindex, (:(::), :Colon), :i), (:block,
        (:line, 177, :none),
        (:call, :to_index, :i)
      )),
    (:line, 179, :none),
    (:(=), (:call, :step, (:(::), :Colon)), (:block,
        (:line, 179, :none),
        1
      )),
    (:line, 180, :none),
    (:(=), (:call, :isempty, (:(::), :Colon)), (:block,
        (:line, 180, :none),
        false
      )),
    (:line, 181, :none),
    (:(=), (:call, :in, (:(::), :Integer), (:(::), :Colon)), (:block,
        (:line, 181, :none),
        true
      )),
    (:line, 185, :none),
    (:(=), (:call, (:curly, :strides, :T, :N, :P, :I), (:(::), :V, (:curly, :SubArray, :T, :N, :P, :I))), (:block,
        (:line, 185, :none),
        (:call, :substrides, (:., :V, (:quote, #QuoteNode
              :parent
            )), (:., :V, (:quote, #QuoteNode
              :indexes
            )))
      )),
    (:line, 187, :none),
    (:(=), (:call, :substrides, :parent, (:(::), :I, :Tuple)), (:block,
        (:line, 187, :none),
        (:call, :substrides, 1, :parent, 1, :I)
      )),
    (:line, 188, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), (:curly, :Tuple))), (:block,
        (:line, 188, :none),
        (:tuple,)
      )),
    (:line, 189, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), :I, (:curly, :Tuple, :Real, (:curly, :Vararg, :Any)))), (:block,
        (:line, 189, :none),
        (:tuple, (:..., (:call, :substrides, (:call, :*, :s, (:call, :size, :parent, :dim)), :parent, (:call, :+, :dim, 1), (:call, :tail, :I))))
      )),
    (:line, 190, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), :I, (:curly, :Tuple, :AbstractCartesianIndex, (:curly, :Vararg, :Any)))), (:block,
        (:line, 190, :none),
        (:call, :substrides, :s, :parent, :dim, (:tuple, (:..., (:., (:ref, :I, 1), (:quote, #QuoteNode
                  :I
                ))), (:..., (:call, :tail, :I))))
      )),
    (:line, 191, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), :I, (:curly, :Tuple, :Colon, (:curly, :Vararg, :Any)))), (:block,
        (:line, 191, :none),
        (:tuple, :s, (:..., (:call, :substrides, (:call, :*, :s, (:call, :size, :parent, :dim)), :parent, (:call, :+, :dim, 1), (:call, :tail, :I))))
      )),
    (:line, 192, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), :I, (:curly, :Tuple, :Range, (:curly, :Vararg, :Any)))), (:block,
        (:line, 192, :none),
        (:tuple, (:call, :*, :s, (:call, :step, (:ref, :I, 1))), (:..., (:call, :substrides, (:call, :*, :s, (:call, :size, :parent, :dim)), :parent, (:call, :+, :dim, 1), (:call, :tail, :I))))
      )),
    (:line, 193, :none),
    (:(=), (:call, :substrides, :s, :parent, :dim, (:(::), :I, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 193, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "strides is invalid for SubArrays with indices of type ", (:call, :typeof, (:ref, :I, 1)))))
      )),
    (:line, 195, :none),
    (:(=), (:call, :stride, (:(::), :V, :SubArray), (:(::), :d, :Integer)), (:block,
        (:line, 195, :none),
        (:if, (:call, :(<=), :d, (:call, :ndims, :V)), (:ref, (:call, :strides, :V), :d), (:call, :*, (:ref, (:call, :strides, :V), :end), (:ref, (:call, :size, :V), :end)))
      )),
    (:line, 197, :none),
    (:(=), (:call, (:curly, :compute_stride1, :N), (:(::), :parent, :AbstractArray), (:(::), :I, (:curly, :NTuple, :N))), (:block,
        (:line, 197, :none),
        (:call, :compute_stride1, 1, (:call, :fill_to_length, (:call, :indices, :parent), (:call, :OneTo, 1), (:curly, :Val, :N)), :I)
      )),
    (:line, 199, :none),
    (:(=), (:call, :compute_stride1, :s, :inds, (:(::), :I, (:curly, :Tuple))), (:block,
        (:line, 199, :none),
        :s
      )),
    (:line, 200, :none),
    (:(=), (:call, :compute_stride1, :s, :inds, (:(::), :I, (:curly, :Tuple, :DroppedScalar, (:curly, :Vararg, :Any)))), (:block,
        (:line, 200, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :compute_stride1, (:call, :*, :s, (:call, :unsafe_length, (:ref, :inds, 1))), (:call, :tail, :inds), (:call, :tail, :I))
        )
      )),
    (:line, 202, :none),
    (:(=), (:call, :compute_stride1, :s, :inds, (:(::), :I, (:curly, :Tuple, :Range, (:curly, :Vararg, :Any)))), (:block,
        (:line, 202, :none),
        (:call, :*, :s, (:call, :step, (:ref, :I, 1)))
      )),
    (:line, 203, :none),
    (:(=), (:call, :compute_stride1, :s, :inds, (:(::), :I, (:curly, :Tuple, :Colon, (:curly, :Vararg, :Any)))), (:block,
        (:line, 203, :none),
        :s
      )),
    (:line, 204, :none),
    (:(=), (:call, :compute_stride1, :s, :inds, (:(::), :I, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 204, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "invalid strided index type ", (:call, :typeof, (:ref, :I, 1)))))
      )),
    (:line, 206, :none),
    (:(=), (:call, :iscontiguous, (:(::), :A, :SubArray)), (:block,
        (:line, 206, :none),
        (:call, :iscontiguous, (:call, :typeof, :A))
      )),
    (:line, 207, :none),
    (:(=), (:call, (:curly, :iscontiguous, (:<:, :S, :SubArray)), (:(::), (:curly, :Type, :S))), (:block,
        (:line, 207, :none),
        false
      )),
    (:line, 208, :none),
    (:(=), (:call, (:curly, :iscontiguous, (:<:, :F, :FastContiguousSubArray)), (:(::), (:curly, :Type, :F))), (:block,
        (:line, 208, :none),
        true
      )),
    (:line, 210, :none),
    (:(=), (:call, :first_index, (:(::), :V, :FastSubArray)), (:block,
        (:line, 210, :none),
        (:call, :+, (:., :V, (:quote, #QuoteNode
              :offset1
            )), (:., :V, (:quote, #QuoteNode
              :stride1
            )))
      )),
    (:line, 211, :none),
    (:function, (:call, :first_index, (:(::), :V, :SubArray)), (:block,
        (:line, 212, :none),
        (:(=), (:tuple, :P, :I), (:tuple, (:call, :parent, :V), (:., :V, (:quote, #QuoteNode
                :indexes
              )))),
        (:line, 213, :none),
        (:(=), :s1, (:call, :compute_stride1, :P, :I)),
        (:line, 214, :none),
        (:call, :+, :s1, (:call, :compute_offset1, :P, :s1, :I))
      )),
    (:line, 223, :none),
    (:(=), (:call, :compute_offset1, :parent, (:(::), :stride1, :Integer), (:(::), :I, :Tuple)), (:block,
        (:line, 223, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :compute_offset1, :parent, :stride1, (:..., (:call, :find_extended_dims, :I)), :I)
        )
      )),
    (:line, 224, :none),
    (:(=), (:call, :compute_offset1, :parent, (:(::), :stride1, :Integer), (:(::), :dims, (:curly, :Tuple, :Int)), (:(::), :inds, (:curly, :Tuple, :Colon)), (:(::), :I, :Tuple)), (:block,
        (:line, 224, :none),
        (:call, :-, (:call, :compute_linindex, :parent, :I), (:call, :*, :stride1, (:call, :first, (:call, :indices, :parent, (:ref, :dims, 1)))))
      )),
    (:line, 225, :none),
    (:(=), (:call, :compute_offset1, :parent, (:(::), :stride1, :Integer), :dims, :inds, (:(::), :I, :Tuple)), (:block,
        (:line, 225, :none),
        (:call, :-, (:call, :compute_linindex, :parent, :I), :stride1)
      )),
    (:line, 227, :none),
    (:function, (:call, (:curly, :compute_linindex, :N), :parent, (:(::), :I, (:curly, :NTuple, :N))), (:block,
        (:line, 228, :none),
        (:(=), :IP, (:call, :fill_to_length, (:call, :indices, :parent), (:call, :OneTo, 1), (:curly, :Val, :N))),
        (:line, 229, :none),
        (:call, :compute_linindex, 1, 1, :IP, :I)
      )),
    (:line, 231, :none),
    (:function, (:call, :compute_linindex, :f, :s, (:(::), :IP, :Tuple), (:(::), :I, (:curly, :Tuple, :Real, (:curly, :Vararg, :Any)))), (:block,
        (:line, 232, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 233, :none),
        (:(=), :Δi, (:call, :-, (:ref, :I, 1), (:call, :first, (:ref, :IP, 1)))),
        (:line, 234, :none),
        (:call, :compute_linindex, (:call, :+, :f, (:call, :*, :Δi, :s)), (:call, :*, :s, (:call, :unsafe_length, (:ref, :IP, 1))), (:call, :tail, :IP), (:call, :tail, :I))
      )),
    (:line, 237, :none),
    (:(=), (:call, :compute_linindex, :f, :s, (:(::), :IP, :Tuple), (:(::), :I, (:curly, :Tuple, :AbstractCartesianIndex, (:curly, :Vararg, :Any)))), (:block,
        (:line, 237, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :compute_linindex, :f, :s, :IP, (:tuple, (:..., (:., (:ref, :I, 1), (:quote, #QuoteNode
                    :I
                  ))), (:..., (:call, :tail, :I))))
        )
      )),
    (:line, 239, :none),
    (:(=), (:call, :compute_linindex, :f, :s, (:(::), :IP, :Tuple), (:(::), :I, (:curly, :Tuple, :Colon, (:curly, :Vararg, :Any)))), (:block,
        (:line, 239, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :compute_linindex, :f, (:call, :*, :s, (:call, :unsafe_length, (:ref, :IP, 1))), (:call, :tail, :IP), (:call, :tail, :I))
        )
      )),
    (:line, 241, :none),
    (:function, (:call, :compute_linindex, :f, :s, (:(::), :IP, :Tuple), (:(::), :I, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 242, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 243, :none),
        (:(=), :Δi, (:call, :-, (:call, :first, (:ref, :I, 1)), (:call, :first, (:ref, :IP, 1)))),
        (:line, 244, :none),
        (:call, :compute_linindex, (:call, :+, :f, (:call, :*, :Δi, :s)), (:call, :*, :s, (:call, :unsafe_length, (:ref, :IP, 1))), (:call, :tail, :IP), (:call, :tail, :I))
      )),
    (:line, 246, :none),
    (:(=), (:call, :compute_linindex, :f, :s, (:(::), :IP, :Tuple), (:(::), :I, (:curly, :Tuple))), (:block,
        (:line, 246, :none),
        :f
      )),
    (:line, 248, :none),
    (:(=), (:call, :find_extended_dims, :I), (:block,
        (:line, 248, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :_find_extended_dims, (:tuple,), (:tuple,), 1, (:..., :I))
        )
      )),
    (:line, 249, :none),
    (:(=), (:call, :_find_extended_dims, :dims, :inds, :dim), (:block,
        (:line, 249, :none),
        (:tuple, :dims, :inds)
      )),
    (:line, 250, :none),
    (:(=), (:call, :_find_extended_dims, :dims, :inds, :dim, (:(::), :Real), (:..., :I)), (:block,
        (:line, 250, :none),
        (:call, :_find_extended_dims, :dims, :inds, (:call, :+, :dim, 1), (:..., :I))
      )),
    (:line, 251, :none),
    (:(=), (:call, :_find_extended_dims, :dims, :inds, :dim, (:(::), :i1, :AbstractCartesianIndex), (:..., :I)), (:block,
        (:line, 251, :none),
        (:call, :_find_extended_dims, :dims, :inds, :dim, (:..., (:., :i1, (:quote, #QuoteNode
                :I
              ))), (:..., :I))
      )),
    (:line, 252, :none),
    (:(=), (:call, :_find_extended_dims, :dims, :inds, :dim, :i1, (:..., :I)), (:block,
        (:line, 252, :none),
        (:call, :_find_extended_dims, (:tuple, (:..., :dims), :dim), (:tuple, (:..., :inds), :i1), (:call, :+, :dim, 1), (:..., :I))
      )),
    (:line, 254, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :T, :N, :P, (:<:, :I, (:curly, :Tuple, (:curly, :Vararg, :RangeIndex)))), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :V, (:curly, :SubArray, :T, :N, :P, :I))), (:block,
        (:line, 254, :none),
        (:call, :+, (:call, :unsafe_convert, (:curly, :Ptr, :T), (:., :V, (:quote, #QuoteNode
                :parent
              ))), (:call, :*, (:call, :-, (:call, :first_index, :V), 1), (:call, :sizeof, :T)))
      )),
    (:line, 257, :none),
    (:(=), (:call, :pointer, (:(::), :V, :FastSubArray), (:(::), :i, :Int)), (:block,
        (:line, 257, :none),
        (:call, :pointer, (:., :V, (:quote, #QuoteNode
              :parent
            )), (:call, :+, (:., :V, (:quote, #QuoteNode
                :offset1
              )), (:call, :*, (:., :V, (:quote, #QuoteNode
                  :stride1
                )), :i)))
      )),
    (:line, 258, :none),
    (:(=), (:call, :pointer, (:(::), :V, :FastContiguousSubArray), (:(::), :i, :Int)), (:block,
        (:line, 258, :none),
        (:call, :pointer, (:., :V, (:quote, #QuoteNode
              :parent
            )), (:call, :+, (:., :V, (:quote, #QuoteNode
                :offset1
              )), :i))
      )),
    (:line, 259, :none),
    (:(=), (:call, :pointer, (:(::), :V, :SubArray), (:(::), :i, :Int)), (:block,
        (:line, 259, :none),
        (:call, :_pointer, :V, :i)
      )),
    (:line, 260, :none),
    (:(=), (:call, (:curly, :_pointer, :T), (:(::), :V, (:curly, :SubArray, :T, 1)), (:(::), :i, :Int)), (:block,
        (:line, 260, :none),
        (:call, :pointer, :V, (:tuple, :i))
      )),
    (:line, 261, :none),
    (:(=), (:call, :_pointer, (:(::), :V, :SubArray), (:(::), :i, :Int)), (:block,
        (:line, 261, :none),
        (:call, :pointer, :V, (:call, :ind2sub, (:call, :indices, :V), :i))
      )),
    (:line, 263, :none),
    (:function, (:call, (:curly, :pointer, :T, :N, (:<:, :P, :Array), (:<:, :I, (:curly, :Tuple, (:curly, :Vararg, :RangeIndex)))), (:(::), :V, (:curly, :SubArray, :T, :N, :P, :I)), (:(::), :is, (:curly, :Tuple, (:curly, :Vararg, :Int)))), (:block,
        (:line, 264, :none),
        (:(=), :index, (:call, :first_index, :V)),
        (:line, 265, :none),
        (:(=), :strds, (:call, :strides, :V)),
        (:line, 266, :none),
        (:for, (:(=), :d, (:(:), 1, (:call, :length, :is))), (:block,
            (:line, 267, :none),
            (:+=, :index, (:call, :*, (:call, :-, (:ref, :is, :d), 1), (:ref, :strds, :d)))
          )),
        (:line, 269, :none),
        (:return, (:call, :pointer, (:., :V, (:quote, #QuoteNode
                :parent
              )), :index))
      )),
    (:line, 276, :none),
    (:(=), (:call, :indices, (:(::), :S, :SubArray)), (:block,
        (:line, 276, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :_indices_sub, :S, (:call, :indices, (:., :S, (:quote, #QuoteNode
                  :parent
                ))), (:..., (:., :S, (:quote, #QuoteNode
                  :indexes
                ))))
        )
      )),
    (:line, 277, :none),
    (:(=), (:call, :_indices_sub, (:(::), :S, :SubArray), :pinds), (:block,
        (:line, 277, :none),
        (:tuple,)
      )),
    (:line, 278, :none),
    (:function, (:call, :_indices_sub, (:(::), :S, :SubArray), :pinds, (:(::), :Real), (:..., :I)), (:block,
        (:line, 279, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 280, :none),
        (:call, :_indices_sub, :S, (:call, :tail, :pinds), (:..., :I))
      )),
    (:line, 282, :none),
    (:function, (:call, :_indices_sub, (:(::), :S, :SubArray), :pinds, (:(::), :Colon), (:..., :I)), (:block,
        (:line, 283, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 284, :none),
        (:tuple, (:ref, :pinds, 1), (:..., (:call, :_indices_sub, :S, (:call, :tail, :pinds), (:..., :I))))
      )),
    (:line, 286, :none),
    (:function, (:call, :_indices_sub, (:(::), :S, :SubArray), :pinds, (:(::), :i1, :AbstractArray), (:..., :I)), (:block,
        (:line, 287, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 288, :none),
        (:tuple, (:..., (:call, :unsafe_indices, :i1)), (:..., (:call, :_indices_sub, :S, (:call, :tail, :pinds), (:..., :I))))
      )),
    (:line, 293, :none),
    (:function, (:call, :parentdims, (:(::), :s, :SubArray)), (:block,
        (:line, 294, :none),
        (:(=), :nd, (:call, :ndims, :s)),
        (:line, 295, :none),
        (:(=), :dimindex, (:call, (:curly, :Array, :Int), :nd)),
        (:line, 296, :none),
        (:(=), :sp, (:call, :strides, (:., :s, (:quote, #QuoteNode
                :parent
              )))),
        (:line, 297, :none),
        (:(=), :sv, (:call, :strides, :s)),
        (:line, 298, :none),
        (:(=), :j, 1),
        (:line, 299, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :ndims, (:., :s, (:quote, #QuoteNode
                    :parent
                  ))))), (:block,
            (:line, 300, :none),
            (:(=), :r, (:ref, (:., :s, (:quote, #QuoteNode
                    :indexes
                  )), :i)),
            (:line, 301, :none),
            (:if, (:&&, (:call, :(<=), :j, :nd), (:call, :(==), (:if, (:call, :isa, :r, (:curly, :Union, :Colon, :Range)), (:call, :*, (:ref, :sp, :i), (:call, :step, :r)), (:ref, :sp, :i)), (:ref, :sv, :j))), (:block,
                (:line, 302, :none),
                (:(=), (:ref, :dimindex, :j), :i),
                (:line, 303, :none),
                (:+=, :j, 1)
              ))
          )),
        (:line, 306, :none),
        :dimindex
      )),
    (:line, 309, :none),
    "    replace_ref_end!(ex)\n\nRecursively replace occurrences of the symbol :end in a \"ref\" expression (i.e. A[...]) `ex`\nwith the appropriate function calls (`endof`, `size` or `trailingsize`). Replacement uses\nthe closest enclosing ref, so\n\n    A[B[end]]\n\nshould transform to\n\n    A[B[endof(B)]]\n\n",
    (:line, 323, :none),
    (:(=), (:call, :replace_ref_end!, :ex), (:block,
        (:line, 323, :none),
        (:ref, (:call, :replace_ref_end_!, :ex, :nothing), 1)
      )),
    (:line, 325, :none),
    (:function, (:call, :replace_ref_end_!, :ex, :withex), (:block,
        (:line, 326, :none),
        (:(=), :used_withex, false),
        (:line, 327, :none),
        (:if, (:&&, (:call, :isa, :ex, :Symbol), (:call, :(==), :ex, (:quote, #QuoteNode
                :end
              ))), (:block,
            (:line, 328, :none),
            (:&&, (:call, :(===), :withex, :nothing), (:call, :error, "Invalid use of end")),
            (:line, 329, :none),
            (:return, (:tuple, :withex, true))
          ), (:block,
            (:line, 330, :none),
            (:if, (:call, :isa, :ex, :Expr), (:block,
                (:line, 331, :none),
                (:if, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :ref
                    )), (:block,
                    (:line, 332, :none),
                    (:(=), (:tuple, (:ref, (:., :ex, (:quote, #QuoteNode
                              :args
                            )), 1), :used_withex), (:call, :replace_ref_end_!, (:ref, (:., :ex, (:quote, #QuoteNode
                              :args
                            )), 1), :withex)),
                    (:line, 333, :none),
                    (:(=), :S, (:if, (:call, :isa, (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), 1), :Symbol), (:(::), (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), 1), :Symbol), (:call, :gensym, (:quote, #QuoteNode
                            :S
                          )))),
                    (:line, 334, :none),
                    (:(=), :used_S, false),
                    (:line, 336, :none),
                    (:(=), :nargs, (:call, :-, (:call, :length, (:., :ex, (:quote, #QuoteNode
                              :args
                            ))), 1)),
                    (:line, 337, :none),
                    (:if, (:call, :(==), :nargs, 0), (:block,
                        (:line, 338, :none),
                        (:return, (:tuple, :ex, :used_withex))
                      ), (:block,
                        (:line, 339, :none),
                        (:if, (:call, :(==), :nargs, 1), (:block,
                            (:line, 341, :none),
                            (:(=), (:tuple, (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), 2), :used_S), (:call, :replace_ref_end_!, (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), 2), (:quote, (:call, (:$, :endof), (:$, :S)))))
                          ), (:block,
                            (:line, 343, :none),
                            (:(=), :n, 1),
                            (:line, 344, :none),
                            (:(=), :J, (:call, :endof, (:., :ex, (:quote, #QuoteNode
                                    :args
                                  )))),
                            (:line, 345, :none),
                            (:for, (:(=), :j, (:(:), 2, (:call, :-, :J, 1))), (:block,
                                (:line, 346, :none),
                                (:(=), (:tuple, :exj, :used), (:call, :replace_ref_end_!, (:ref, (:., :ex, (:quote, #QuoteNode
                                          :args
                                        )), :j), (:quote, (:call, (:$, :size), (:$, :S), (:$, :n))))),
                                (:line, 347, :none),
                                (:|=, :used_S, :used),
                                (:line, 348, :none),
                                (:(=), (:ref, (:., :ex, (:quote, #QuoteNode
                                        :args
                                      )), :j), :exj),
                                (:line, 349, :none),
                                (:if, (:&&, (:call, :isa, :exj, :Expr), (:call, :(==), (:., :exj, (:quote, #QuoteNode
                                          :head
                                        )), (:quote, #QuoteNode
                                        :...
                                      ))), (:block,
                                    (:line, 351, :none),
                                    (:(=), :exjs, (:ref, (:., :exj, (:quote, #QuoteNode
                                            :args
                                          )), 1)),
                                    (:line, 352, :none),
                                    (:(=), :n, (:quote, (:call, :+, (:$, :n), (:call, :length, (:$, :exjs)))))
                                  ), (:block,
                                    (:line, 353, :none),
                                    (:if, (:call, :isa, :n, :Expr), (:block,
                                        (:line, 355, :none),
                                        (:(=), :n, (:quote, (:call, :+, (:$, :n), 1)))
                                      ), (:block,
                                        (:line, 358, :none),
                                        (:+=, :n, 1)
                                      ))
                                  ))
                              )),
                            (:line, 361, :none),
                            (:(=), (:tuple, (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), :J), :used), (:call, :replace_ref_end_!, (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), :J), (:quote, (:call, (:$, :trailingsize), (:$, :S), (:$, :n))))),
                            (:line, 362, :none),
                            (:|=, :used_S, :used)
                          ))
                      )),
                    (:line, 364, :none),
                    (:if, (:&&, :used_S, (:call, :(!==), :S, (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), 1))), (:block,
                        (:line, 365, :none),
                        (:(=), :S0, (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), 1)),
                        (:line, 366, :none),
                        (:(=), (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), 1), :S),
                        (:line, 367, :none),
                        (:(=), :ex, (:call, :Expr, (:quote, #QuoteNode
                              :let
                            ), :ex, (:quote, (:(=), (:$, :S), (:$, :S0)))))
                      ))
                  ), (:block,
                    (:line, 371, :none),
                    (:for, (:(=), :i, (:call, :eachindex, (:., :ex, (:quote, #QuoteNode
                              :args
                            )))), (:block,
                        (:line, 372, :none),
                        (:(=), (:tuple, (:ref, (:., :ex, (:quote, #QuoteNode
                                  :args
                                )), :i), :used), (:call, :replace_ref_end_!, (:ref, (:., :ex, (:quote, #QuoteNode
                                  :args
                                )), :i), :withex)),
                        (:line, 373, :none),
                        (:|=, :used_withex, :used)
                      ))
                  ))
              ))
          )),
        (:line, 377, :none),
        (:tuple, :ex, :used_withex)
      )),
    (:line, 380, :none),
    "    @view A[inds...]\n\nCreates a `SubArray` from an indexing expression. This can only be applied directly to a\nreference expression (e.g. `@view A[1,2:end]`), and should *not* be used as the target of\nan assignment (e.g. `@view(A[1,2:end]) = ...`).\n",
    (:line, 387, :none),
    (:macro, (:call, :view, :ex), (:block,
        (:line, 388, :none),
        (:if, (:call, (:., :Meta, (:quote, #QuoteNode
                :isexpr
              )), :ex, (:quote, #QuoteNode
              :ref
            )), (:block,
            (:line, 389, :none),
            (:(=), :ex, (:call, :replace_ref_end!, :ex)),
            (:line, 390, :none),
            (:if, (:call, (:., :Meta, (:quote, #QuoteNode
                    :isexpr
                  )), :ex, (:quote, #QuoteNode
                  :ref
                )), (:block,
                (:line, 391, :none),
                (:(=), :ex, (:call, :Expr, (:quote, #QuoteNode
                      :call
                    ), :view, (:..., (:., :ex, (:quote, #QuoteNode
                          :args
                        )))))
              ), (:block,
                (:line, 393, :none),
                (:call, :assert, (:&&, (:call, (:., :Meta, (:quote, #QuoteNode
                          :isexpr
                        )), :ex, (:quote, #QuoteNode
                        :let
                      )), (:call, (:., :Meta, (:quote, #QuoteNode
                          :isexpr
                        )), (:ref, (:., :ex, (:quote, #QuoteNode
                            :args
                          )), 1), (:quote, #QuoteNode
                        :ref
                      )))),
                (:line, 394, :none),
                (:(=), (:ref, (:., :ex, (:quote, #QuoteNode
                        :args
                      )), 1), (:call, :Expr, (:quote, #QuoteNode
                      :call
                    ), :view, (:..., (:., (:ref, (:., :ex, (:quote, #QuoteNode
                              :args
                            )), 1), (:quote, #QuoteNode
                          :args
                        )))))
              )),
            (:line, 396, :none),
            (:call, :Expr, (:quote, #QuoteNode
                :&&
              ), true, (:call, :esc, :ex))
          ), (:block,
            (:line, 398, :none),
            (:call, :throw, (:call, :ArgumentError, "Invalid use of @view macro: argument must be a reference expression A[...]."))
          ))
      ))
  ))