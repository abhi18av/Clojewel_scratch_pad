(:quote, (:block,
    (:line, 3, :none),
    (:export, :abspath, :basename, :dirname, :expanduser, :homedir, :isabspath, :isdirpath, :joinpath, :normpath, :realpath, :relpath, :splitdir, :splitdrive, :splitext),
    (:line, 19, :none),
    (:if, (:call, :is_unix), (:block,
        (:line, 20, :none),
        (:const, (:(=), :path_separator, "/")),
        (:line, 21, :none),
        (:const, (:(=), :path_separator_re, (:macrocall, Symbol("@r_str"), "/+"))),
        (:line, 22, :none),
        (:const, (:(=), :path_absolute_re, (:macrocall, Symbol("@r_str"), "^/"))),
        (:line, 23, :none),
        (:const, (:(=), :path_directory_re, (:macrocall, Symbol("@r_str"), "(?:^|/)\\.{0,2}\$"))),
        (:line, 24, :none),
        (:const, (:(=), :path_dir_splitter, (:macrocall, Symbol("@r_str"), "^(.*?)(/+)([^/]*)\$"))),
        (:line, 25, :none),
        (:const, (:(=), :path_ext_splitter, (:macrocall, Symbol("@r_str"), "^((?:.*/)?(?:\\.|[^/\\.])[^/]*?)(\\.[^/\\.]*|)\$"))),
        (:line, 27, :none),
        (:(=), (:call, :splitdrive, (:(::), :path, :String)), (:block,
            (:line, 27, :none),
            (:tuple, "", :path)
          )),
        (:line, 28, :none),
        (:(=), (:call, :homedir), (:block,
            (:line, 28, :none),
            (:ref, :ENV, "HOME")
          ))
      ), (:block,
        (:line, 29, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 30, :none),
            (:const, (:(=), :path_separator, "\\")),
            (:line, 31, :none),
            (:const, (:(=), :path_separator_re, (:macrocall, Symbol("@r_str"), "[/\\\\]+"))),
            (:line, 32, :none),
            (:const, (:(=), :path_absolute_re, (:macrocall, Symbol("@r_str"), "^(?:\\w+:)?[/\\\\]"))),
            (:line, 33, :none),
            (:const, (:(=), :path_directory_re, (:macrocall, Symbol("@r_str"), "(?:^|[/\\\\])\\.{0,2}\$"))),
            (:line, 34, :none),
            (:const, (:(=), :path_dir_splitter, (:macrocall, Symbol("@r_str"), "^(.*?)([/\\\\]+)([^/\\\\]*)\$"))),
            (:line, 35, :none),
            (:const, (:(=), :path_ext_splitter, (:macrocall, Symbol("@r_str"), "^((?:.*[/\\\\])?(?:\\.|[^/\\\\\\.])[^/\\\\]*?)(\\.[^/\\\\\\.]*|)\$"))),
            (:line, 37, :none),
            (:function, (:call, :splitdrive, (:(::), :path, :String)), (:block,
                (:line, 38, :none),
                (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^([^\\\\]+:|\\\\\\\\[^\\\\]+\\\\[^\\\\]+|\\\\\\\\\\?\\\\UNC\\\\[^\\\\]+\\\\[^\\\\]+|\\\\\\\\\\?\\\\[^\\\\]+:|)(.*)\$"), :path)),
                (:line, 39, :none),
                (:tuple, (:call, :String, (:ref, (:., :m, (:quote, #QuoteNode
                          :captures
                        )), 1)), (:call, :String, (:ref, (:., :m, (:quote, #QuoteNode
                          :captures
                        )), 2)))
              )),
            (:line, 41, :none),
            (:(=), (:call, :homedir), (:block,
                (:line, 41, :none),
                (:call, :get, :ENV, "HOME", (:call, :string, (:ref, :ENV, "HOMEDRIVE"), (:ref, :ENV, "HOMEPATH")))
              ))
          ), (:block,
            (:line, 43, :none),
            (:call, :error, "path primitives for this OS need to be defined")
          ))
      )),
    (:line, 46, :none),
    (:(=), (:call, :isabspath, (:(::), :path, :String)), (:block,
        (:line, 46, :none),
        (:call, :ismatch, :path_absolute_re, :path)
      )),
    (:line, 47, :none),
    (:(=), (:call, :isdirpath, (:(::), :path, :String)), (:block,
        (:line, 47, :none),
        (:call, :ismatch, :path_directory_re, (:ref, (:call, :splitdrive, :path), 2))
      )),
    (:line, 49, :none),
    (:function, (:call, :splitdir, (:(::), :path, :String)), (:block,
        (:line, 50, :none),
        (:(=), (:tuple, :a, :b), (:call, :splitdrive, :path)),
        (:line, 51, :none),
        (:(=), :m, (:call, :match, :path_dir_splitter, :b)),
        (:line, 52, :none),
        (:&&, (:call, :(===), :m, :nothing), (:return, (:tuple, :a, :b))),
        (:line, 53, :none),
        (:(=), :a, (:call, :string, :a, (:if, (:call, :isempty, (:ref, (:., :m, (:quote, #QuoteNode
                      :captures
                    )), 1)), (:ref, (:ref, (:., :m, (:quote, #QuoteNode
                      :captures
                    )), 2), 1), (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 1)))),
        (:line, 54, :none),
        (:tuple, :a, (:call, :String, (:ref, (:., :m, (:quote, #QuoteNode
                  :captures
                )), 3)))
      )),
    (:line, 57, :none),
    (:(=), (:call, :dirname, (:(::), :path, :AbstractString)), (:block,
        (:line, 57, :none),
        (:ref, (:call, :splitdir, :path), 1)
      )),
    (:line, 58, :none),
    (:(=), (:call, :basename, (:(::), :path, :AbstractString)), (:block,
        (:line, 58, :none),
        (:ref, (:call, :splitdir, :path), 2)
      )),
    (:line, 60, :none),
    (:function, (:call, :splitext, (:(::), :path, :String)), (:block,
        (:line, 61, :none),
        (:(=), (:tuple, :a, :b), (:call, :splitdrive, :path)),
        (:line, 62, :none),
        (:(=), :m, (:call, :match, :path_ext_splitter, :b)),
        (:line, 63, :none),
        (:&&, (:call, :(===), :m, :nothing), (:return, (:tuple, :path, ""))),
        (:line, 64, :none),
        (:tuple, (:call, :*, :a, (:ref, (:., :m, (:quote, #QuoteNode
                  :captures
                )), 1)), (:call, :String, (:ref, (:., :m, (:quote, #QuoteNode
                  :captures
                )), 2)))
      )),
    (:line, 67, :none),
    (:function, (:call, :pathsep, (:..., (:(::), :paths, :AbstractString))), (:block,
        (:line, 68, :none),
        (:for, (:(=), :path, :paths), (:block,
            (:line, 69, :none),
            (:(=), :m, (:call, :match, :path_separator_re, (:call, :String, :path))),
            (:line, 70, :none),
            (:&&, (:call, :(!==), :m, :nothing), (:return, (:ref, (:., :m, (:quote, #QuoteNode
                      :match
                    )), (:(:), 1, 1))))
          )),
        (:line, 72, :none),
        (:return, :path_separator)
      )),
    (:line, 75, :none),
    (:(=), (:call, :joinpath, (:(::), :a, :AbstractString)), (:block,
        (:line, 75, :none),
        :a
      )),
    (:line, 76, :none),
    (:(=), (:call, :joinpath, (:(::), :a, :AbstractString), (:(::), :b, :AbstractString), (:..., (:(::), :c, :AbstractString))), (:block,
        (:line, 76, :none),
        (:call, :joinpath, (:call, :joinpath, :a, :b), (:..., :c))
      )),
    (:line, 78, :none),
    (:function, (:call, :joinpath, (:(::), :a, :String), (:(::), :b, :String)), (:block,
        (:line, 79, :none),
        (:&&, (:call, :isabspath, :b), (:return, :b)),
        (:line, 80, :none),
        (:(=), (:tuple, :A, :a), (:call, :splitdrive, :a)),
        (:line, 81, :none),
        (:(=), (:tuple, :B, :b), (:call, :splitdrive, :b)),
        (:line, 82, :none),
        (:&&, (:call, :!, (:call, :isempty, :B)), (:&&, (:call, :(!=), :A, :B), (:call, :throw, (:call, :ArgumentError, (:string, "drive mismatch: ", :A, :a, " ", :B, :b))))),
        (:line, 83, :none),
        (:(=), :C, (:if, (:call, :isempty, :B), :A, :B)),
        (:line, 84, :none),
        (:if, (:call, :isempty, :a), (:call, :string, :C, :b), (:if, (:call, :ismatch, :path_separator_re, (:ref, :a, (:(:), :end, :end))), (:call, :string, :C, :a, :b), (:call, :string, :C, :a, (:call, :pathsep, :a, :b), :b)))
      )),
    (:line, 88, :none),
    (:(=), (:call, :joinpath, (:(::), :a, :AbstractString), (:(::), :b, :AbstractString)), (:block,
        (:line, 88, :none),
        (:call, :joinpath, (:call, :String, :a), (:call, :String, :b))
      )),
    (:line, 90, :none),
    (:function, (:call, :normpath, (:(::), :path, :String)), (:block,
        (:line, 91, :none),
        (:(=), :isabs, (:call, :isabspath, :path)),
        (:line, 92, :none),
        (:(=), :isdir, (:call, :isdirpath, :path)),
        (:line, 93, :none),
        (:(=), (:tuple, :drive, :path), (:call, :splitdrive, :path)),
        (:line, 94, :none),
        (:(=), :parts, (:call, :split, :path, :path_separator_re)),
        (:line, 95, :none),
        (:call, :filter!, (:->, :x, (:block,
              (:line, 95, :none),
              (:&&, (:call, :!, (:call, :isempty, :x)), (:call, :(!=), :x, "."))
            )), :parts),
        (:line, 96, :none),
        (:while, true, (:block,
            (:line, 97, :none),
            (:(=), :clean, true),
            (:line, 98, :none),
            (:for, (:(=), :j, (:(:), 1, (:call, :-, (:call, :length, :parts), 1))), (:block,
                (:line, 99, :none),
                (:if, (:&&, (:call, :(!=), (:ref, :parts, :j), ".."), (:call, :(==), (:ref, :parts, (:call, :+, :j, 1)), "..")), (:block,
                    (:line, 100, :none),
                    (:call, :deleteat!, :parts, (:(:), :j, (:call, :+, :j, 1))),
                    (:line, 101, :none),
                    (:(=), :clean, false),
                    (:line, 102, :none),
                    (:break,)
                  ))
              )),
            (:line, 105, :none),
            (:&&, :clean, (:break,))
          )),
        (:line, 107, :none),
        (:if, :isabs, (:block,
            (:line, 108, :none),
            (:while, (:&&, (:call, :!, (:call, :isempty, :parts)), (:call, :(==), (:ref, :parts, 1), "..")), (:block,
                (:line, 109, :none),
                (:call, :shift!, :parts)
              ))
          ), (:block,
            (:line, 111, :none),
            (:if, (:call, :isempty, :parts), (:block,
                (:line, 112, :none),
                (:call, :push!, :parts, ".")
              ))
          )),
        (:line, 114, :none),
        (:(=), :path, (:call, :join, :parts, :path_separator)),
        (:line, 115, :none),
        (:if, :isabs, (:block,
            (:line, 116, :none),
            (:(=), :path, (:call, :*, :path_separator, :path))
          )),
        (:line, 118, :none),
        (:if, (:&&, :isdir, (:call, :!, (:call, :isdirpath, :path))), (:block,
            (:line, 119, :none),
            (:*=, :path, :path_separator)
          )),
        (:line, 121, :none),
        (:call, :string, :drive, :path)
      )),
    (:line, 123, :none),
    (:(=), (:call, :normpath, (:(::), :a, :AbstractString), (:..., (:(::), :b, :AbstractString))), (:block,
        (:line, 123, :none),
        (:call, :normpath, (:call, :joinpath, :a, (:..., :b)))
      )),
    (:line, 125, :none),
    (:(=), (:call, :abspath, (:(::), :a, :String)), (:block,
        (:line, 125, :none),
        (:call, :normpath, (:if, (:call, :isabspath, :a), :a, (:call, :joinpath, (:call, :pwd), :a)))
      )),
    (:line, 126, :none),
    (:(=), (:call, :abspath, (:(::), :a, :AbstractString), (:..., (:(::), :b, :AbstractString))), (:block,
        (:line, 126, :none),
        (:call, :abspath, (:call, :joinpath, :a, (:..., :b)))
      )),
    (:line, 128, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 129, :none),
        (:function, (:call, :realpath, (:(::), :path, :AbstractString)), (:block,
            (:line, 130, :none),
            (:(=), :p, (:call, :cwstring, :path)),
            (:line, 131, :none),
            (:(=), :buf, (:call, :zeros, :UInt16, (:call, :length, :p))),
            (:line, 132, :none),
            (:while, true, (:block,
                (:line, 133, :none),
                (:(=), :n, (:ccall, (:tuple, (:quote, #QuoteNode
                        :GetFullPathNameW
                      ), "kernel32"), :UInt32, (:tuple, (:curly, :Ptr, :UInt16), :UInt32, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :Void)), :p, (:call, :length, :buf), :buf, :C_NULL, (:stdcall,))),
                (:line, 136, :none),
                (:call, :systemerror, (:quote, #QuoteNode
                    :realpath
                  ), (:call, :(==), :n, 0)),
                (:line, 137, :none),
                (:(=), :x, (:call, :<, :n, (:call, :length, :buf))),
                (:line, 138, :none),
                (:call, :resize!, :buf, :n),
                (:line, 139, :none),
                (:&&, :x, (:return, (:call, :transcode, :String, :buf)))
              ))
          )),
        (:line, 143, :none),
        (:function, (:call, :longpath, (:(::), :path, :AbstractString)), (:block,
            (:line, 144, :none),
            (:(=), :p, (:call, :cwstring, :path)),
            (:line, 145, :none),
            (:(=), :buf, (:call, :zeros, :UInt16, (:call, :length, :p))),
            (:line, 146, :none),
            (:while, true, (:block,
                (:line, 147, :none),
                (:(=), :n, (:ccall, (:tuple, (:quote, #QuoteNode
                        :GetLongPathNameW
                      ), "kernel32"), :UInt32, (:tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16), :UInt32), :p, :buf, (:call, :length, :buf), (:stdcall,))),
                (:line, 150, :none),
                (:call, :systemerror, (:quote, #QuoteNode
                    :longpath
                  ), (:call, :(==), :n, 0)),
                (:line, 151, :none),
                (:(=), :x, (:call, :<, :n, (:call, :length, :buf))),
                (:line, 152, :none),
                (:call, :resize!, :buf, :n),
                (:line, 153, :none),
                (:&&, :x, (:return, (:call, :transcode, :String, :buf)))
              ))
          ))
      ), (:block,
        (:line, 158, :none),
        (:function, (:call, :realpath, (:(::), :path, :AbstractString)), (:block,
            (:line, 159, :none),
            (:(=), :p, (:ccall, (:quote, #QuoteNode
                  :realpath
                ), (:curly, :Ptr, :UInt8), (:tuple, :Cstring, (:curly, :Ptr, :UInt8)), :path, :C_NULL)),
            (:line, 160, :none),
            (:call, :systemerror, (:quote, #QuoteNode
                :realpath
              ), (:call, :(==), :p, :C_NULL)),
            (:line, 161, :none),
            (:return, (:call, :unsafe_wrap, :String, :p, true))
          ))
      )),
    (:line, 165, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 166, :none),
        (:(=), (:call, :expanduser, (:(::), :path, :AbstractString)), (:block,
            (:line, 166, :none),
            :path
          ))
      ), (:block,
        (:line, 168, :none),
        (:function, (:call, :expanduser, (:(::), :path, :AbstractString)), (:block,
            (:line, 169, :none),
            (:(=), :i, (:call, :start, :path)),
            (:line, 170, :none),
            (:(=), (:tuple, :c, :i), (:call, :next, :path, :i)),
            (:line, 171, :none),
            (:if, (:call, :(!=), :c, '~'), (:block,
                (:line, 171, :none),
                (:return, :path)
              )),
            (:line, 172, :none),
            (:if, (:call, :done, :path, :i), (:block,
                (:line, 172, :none),
                (:return, (:call, :homedir))
              )),
            (:line, 173, :none),
            (:(=), (:tuple, :c, :j), (:call, :next, :path, :i)),
            (:line, 174, :none),
            (:if, (:call, :(==), :c, '/'), (:block,
                (:line, 174, :none),
                (:return, (:call, :*, (:call, :homedir), (:ref, :path, (:(:), :i, :end))))
              )),
            (:line, 175, :none),
            (:call, :throw, (:call, :ArgumentError, "~user tilde expansion not yet implemented"))
          ))
      )),
    (:line, 179, :none),
    (:function, (:call, :relpath, (:(::), :path, :String), (:kw, (:(::), :startpath, :String), ".")), (:block,
        (:line, 180, :none),
        (:&&, (:call, :isempty, :path), (:call, :throw, (:call, :ArgumentError, "`path` must be specified"))),
        (:line, 181, :none),
        (:&&, (:call, :isempty, :startpath), (:call, :throw, (:call, :ArgumentError, "`startpath` must be specified"))),
        (:line, 182, :none),
        (:(=), :curdir, "."),
        (:line, 183, :none),
        (:(=), :pardir, ".."),
        (:line, 184, :none),
        (:&&, (:call, :(==), :path, :startpath), (:return, :curdir)),
        (:line, 185, :none),
        (:(=), :path_arr, (:call, :split, (:call, :abspath, :path), :path_separator_re)),
        (:line, 186, :none),
        (:(=), :start_arr, (:call, :split, (:call, :abspath, :startpath), :path_separator_re)),
        (:line, 187, :none),
        (:(=), :i, 0),
        (:line, 188, :none),
        (:while, (:call, :<, :i, (:call, :min, (:call, :length, :path_arr), (:call, :length, :start_arr))), (:block,
            (:line, 189, :none),
            (:+=, :i, 1),
            (:line, 190, :none),
            (:if, (:call, :(!=), (:ref, :path_arr, :i), (:ref, :start_arr, :i)), (:block,
                (:line, 191, :none),
                (:-=, :i, 1),
                (:line, 192, :none),
                (:break,)
              ))
          )),
        (:line, 195, :none),
        (:(=), :pathpart, (:call, :join, (:ref, :path_arr, (:(:), (:call, :+, :i, 1), (:call, :findlast, (:->, :x, (:block,
                      (:line, 195, :none),
                      (:call, :!, (:call, :isempty, :x))
                    )), :path_arr))), :path_separator)),
        (:line, 196, :none),
        (:(=), :prefix_num, (:call, :-, (:call, :-, (:call, :findlast, (:->, :x, (:block,
                    (:line, 196, :none),
                    (:call, :!, (:call, :isempty, :x))
                  )), :start_arr), :i), 1)),
        (:line, 197, :none),
        (:if, (:call, :(>=), :prefix_num, 0), (:block,
            (:line, 198, :none),
            (:(=), :prefix, (:call, :*, :pardir, :path_separator)),
            (:line, 199, :none),
            (:(=), :relpath_, (:if, (:call, :isempty, :pathpart), (:call, :*, (:call, :^, :prefix, :prefix_num), :pardir), (:call, :*, (:call, :^, :prefix, :prefix_num), :pardir, :path_separator, :pathpart)))
          ), (:block,
            (:line, 203, :none),
            (:(=), :relpath_, :pathpart)
          )),
        (:line, 205, :none),
        (:return, (:if, (:call, :isempty, :relpath_), :curdir, :relpath_))
      )),
    (:line, 207, :none),
    (:(=), (:call, :relpath, (:(::), :path, :AbstractString), (:(::), :startpath, :AbstractString)), (:block,
        (:line, 207, :none),
        (:call, :relpath, (:call, :String, :path), (:call, :String, :startpath))
      )),
    (:line, 210, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :isabspath
          ), (:quote, #QuoteNode
            :isdirpath
          ), (:quote, #QuoteNode
            :splitdir
          ), (:quote, #QuoteNode
            :splitdrive
          ), (:quote, #QuoteNode
            :splitext
          ), (:quote, #QuoteNode
            :normpath
          ), (:quote, #QuoteNode
            :abspath
          ))), (:block,
        (:line, 211, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, (:$, :f), (:(::), :path, :AbstractString)), (:block,
              (:line, 211, :none),
              (:call, (:$, :f), (:call, :String, :path))
            )))
      ))
  ))