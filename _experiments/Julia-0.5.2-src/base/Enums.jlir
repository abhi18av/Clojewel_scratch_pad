(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :Enums, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:import, :Core, :Intrinsics, :box),
        (:line, 6, :none),
        (:export, :Enum, Symbol("@enum")),
        (:line, 8, :none),
        (:abstract, :Enum),
        (:line, 10, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :convert
                )), (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Enum)), (:block,
            (:line, 10, :none),
            (:call, :convert, :T, (:call, :box, :Int32, :x))
          )),
        (:line, 12, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :write
              )), (:(::), :io, :IO), (:(::), :x, :Enum)), (:block,
            (:line, 12, :none),
            (:call, :write, :io, (:call, :Int32, :x))
          )),
        (:line, 13, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :read
                )), (:<:, :T, :Enum)), (:(::), :io, :IO), (:(::), (:curly, :Type, :T))), (:block,
            (:line, 13, :none),
            (:call, :T, (:call, :read, :io, :Int32))
          )),
        (:line, 16, :none),
        (:function, (:call, :membershiptest, :expr, :values), (:block,
            (:line, 17, :none),
            (:(=), (:tuple, :lo, :hi), (:call, :extrema, :values)),
            (:line, 18, :none),
            (:if, (:call, :(==), (:call, :length, :values), (:call, :+, (:call, :-, :hi, :lo), 1)), (:block,
                (:line, 19, :none),
                (:quote, (:comparison, (:$, :lo), :(<=), (:$, :expr), :(<=), (:$, :hi)))
              ), (:block,
                (:line, 20, :none),
                (:if, (:call, :<, (:call, :length, :values), 20), (:block,
                    (:line, 21, :none),
                    (:call, :foldl, (:->, (:tuple, :x1, :x2), (:block,
                          (:line, 21, :none),
                          (:quote, (:||, (:$, :x1), (:call, :(==), (:$, :expr), (:$, :x2))))
                        )), (:quote, (:call, :(==), (:$, :expr), (:$, (:ref, :values, 1)))), (:ref, :values, (:(:), 2, :end)))
                  ), (:block,
                    (:line, 23, :none),
                    (:quote, (:call, :in, (:$, :expr), (:$, (:call, :Set, :values))))
                  ))
              ))
          )),
        (:line, 27, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :enum_argument_error, :typename, :x), (:block,
              (:line, 27, :none),
              (:call, :throw, (:call, :ArgumentError, (:call, :string, (:string, "invalid value for Enum ", :typename, ": ", :x))))
            ))),
        (:line, 29, :none),
        (:macro, (:call, :enum, :T, (:..., :syms)), (:block,
            (:line, 30, :none),
            (:if, (:call, :isempty, :syms), (:block,
                (:line, 31, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "no arguments given for Enum ", :T)))
              )),
            (:line, 33, :none),
            (:if, (:call, :!, (:call, :isa, :T, :Symbol)), (:block,
                (:line, 34, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "invalid type expression for enum ", :T)))
              )),
            (:line, 36, :none),
            (:(=), :typename, :T),
            (:line, 37, :none),
            (:(=), :vals, (:call, (:curly, :Array, (:curly, :Tuple, :Symbol, :Integer)), 0)),
            (:line, 38, :none),
            (:(=), :lo, (:(=), :hi, 0)),
            (:line, 39, :none),
            (:(=), :i, (:call, :Int32, -1)),
            (:line, 40, :none),
            (:(=), :hasexpr, false),
            (:line, 41, :none),
            (:for, (:(=), :s, :syms), (:block,
                (:line, 42, :none),
                (:if, (:call, :isa, :s, :Symbol), (:block,
                    (:line, 43, :none),
                    (:if, (:call, :(==), :i, (:call, :typemax, (:call, :typeof, :i))), (:block,
                        (:line, 44, :none),
                        (:call, :throw, (:call, :ArgumentError, (:string, "overflow in value \"", :s, "\" of Enum ", :typename)))
                      )),
                    (:line, 46, :none),
                    (:+=, :i, (:call, :one, :i))
                  ), (:block,
                    (:line, 47, :none),
                    (:if, (:&&, (:call, :isa, :s, :Expr), (:&&, (:||, (:call, :(==), (:., :s, (:quote, #QuoteNode
                                  :head
                                )), (:quote, #QuoteNode
                                :(=)
                              )), (:call, :(==), (:., :s, (:quote, #QuoteNode
                                  :head
                                )), (:quote, #QuoteNode
                                :kw
                              ))), (:&&, (:call, :(==), (:call, :length, (:., :s, (:quote, #QuoteNode
                                    :args
                                  ))), 2), (:call, :isa, (:ref, (:., :s, (:quote, #QuoteNode
                                    :args
                                  )), 1), :Symbol)))), (:block,
                        (:line, 50, :none),
                        (:(=), :i, (:call, :eval, (:call, :current_module), (:ref, (:., :s, (:quote, #QuoteNode
                                  :args
                                )), 2))),
                        (:line, 51, :none),
                        (:if, (:call, :!, (:call, :isa, :i, :Integer)), (:block,
                            (:line, 52, :none),
                            (:call, :throw, (:call, :ArgumentError, (:string, "invalid value for Enum ", :typename, ", ", :s, "=", :i, "; values must be integers")))
                          )),
                        (:line, 54, :none),
                        (:(=), :i, (:call, :convert, :Int32, :i)),
                        (:line, 55, :none),
                        (:(=), :s, (:ref, (:., :s, (:quote, #QuoteNode
                                :args
                              )), 1)),
                        (:line, 56, :none),
                        (:(=), :hasexpr, true)
                      ), (:block,
                        (:line, 58, :none),
                        (:call, :throw, (:call, :ArgumentError, (:call, :string, "invalid argument for Enum ", :typename, ": ", :s)))
                      ))
                  )),
                (:line, 60, :none),
                (:if, (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                          :isidentifier
                        )), :s)), (:block,
                    (:line, 61, :none),
                    (:call, :throw, (:call, :ArgumentError, (:string, "invalid name for Enum ", :typename, "; \"", :s, "\" is not a valid identifier.")))
                  )),
                (:line, 63, :none),
                (:call, :push!, :vals, (:tuple, :s, :i)),
                (:line, 64, :none),
                (:if, (:call, :(==), (:call, :length, :vals), 1), (:block,
                    (:line, 65, :none),
                    (:(=), :lo, (:(=), :hi, :i))
                  ), (:block,
                    (:line, 67, :none),
                    (:(=), :lo, (:call, :min, :lo, :i)),
                    (:line, 68, :none),
                    (:(=), :hi, (:call, :max, :hi, :i))
                  ))
              )),
            (:line, 71, :none),
            (:(=), :values, (:typed_comprehension, :Int32, (:generator, (:ref, :i, 2), (:(=), :i, :vals)))),
            (:line, 72, :none),
            (:if, (:&&, :hasexpr, (:call, :(!=), :values, (:call, :unique, :values))), (:block,
                (:line, 73, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "values for Enum ", :typename, " are not unique")))
              )),
            (:line, 75, :none),
            (:(=), :blk, (:quote, (:block,
                  (:line, 77, :none),
                  (:macrocall, (:., :Base, (:quote, #QuoteNode
                        Symbol("@__doc__")
                      )), (:bitstype, 32, (:<:, (:$, (:call, :esc, :T)), :Enum))),
                  (:line, 78, :none),
                  (:function, (:call, (:., :Base, (:quote, #QuoteNode
                          :convert
                        )), (:(::), (:curly, :Type, (:$, (:call, :esc, :typename)))), (:(::), :x, :Integer)), (:block,
                      (:line, 79, :none),
                      (:||, (:$, (:call, :membershiptest, (:quote, #QuoteNode
                              :x
                            ), :values)), (:call, :enum_argument_error, (:$, (:call, :Expr, (:quote, #QuoteNode
                                :quote
                              ), :typename)), :x)),
                      (:line, 80, :none),
                      (:call, :box, (:$, (:call, :esc, :typename)), (:call, :convert, :Int32, :x))
                    )),
                  (:line, 82, :none),
                  (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                          :typemin
                        )), (:(::), :x, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                      (:line, 82, :none),
                      (:call, (:$, (:call, :esc, :typename)), (:$, :lo))
                    )),
                  (:line, 83, :none),
                  (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                          :typemax
                        )), (:(::), :x, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                      (:line, 83, :none),
                      (:call, (:$, (:call, :esc, :typename)), (:$, :hi))
                    )),
                  (:line, 84, :none),
                  (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                          :isless
                        )), (:(::), :x, (:$, (:call, :esc, :typename))), (:(::), :y, (:$, (:call, :esc, :typename)))), (:block,
                      (:line, 84, :none),
                      (:call, :isless, (:call, :Int32, :x), (:call, :Int32, :y))
                    )),
                  (:line, 85, :none),
                  (:let, (:block,
                      (:line, 86, :none),
                      (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                              :instances
                            )), (:(::), (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                          (:line, 86, :none),
                          :insts
                        ))
                    ), (:(=), :insts, (:call, :ntuple, (:->, :i, (:block,
                            (:line, 85, :none),
                            (:call, (:$, (:call, :esc, :typename)), (:ref, (:$, :values), :i))
                          )), (:$, (:call, :length, :vals))))),
                  (:line, 88, :none),
                  (:function, (:call, (:., :Base, (:quote, #QuoteNode
                          :print
                        )), (:(::), :io, :IO), (:(::), :x, (:$, (:call, :esc, :typename)))), (:block,
                      (:line, 89, :none),
                      (:for, (:(=), (:tuple, :sym, :i), (:$, :vals)), (:block,
                          (:line, 90, :none),
                          (:if, (:call, :(==), :i, (:call, :Int32, :x)), (:block,
                              (:line, 91, :none),
                              (:call, :print, :io, :sym),
                              (:line, 91, :none),
                              (:break,)
                            ))
                        ))
                    )),
                  (:line, 95, :none),
                  (:function, (:call, (:., :Base, (:quote, #QuoteNode
                          :show
                        )), (:(::), :io, :IO), (:(::), :x, (:$, (:call, :esc, :typename)))), (:block,
                      (:line, 96, :none),
                      (:if, (:call, :get, :io, (:quote, #QuoteNode
                            :compact
                          ), false), (:block,
                          (:line, 97, :none),
                          (:call, :print, :io, :x)
                        ), (:block,
                          (:line, 99, :none),
                          (:call, :print, :io, :x, "::"),
                          (:line, 100, :none),
                          (:call, :showcompact, :io, (:call, :typeof, :x)),
                          (:line, 101, :none),
                          (:call, :print, :io, " = ", (:call, :Int, :x))
                        ))
                    )),
                  (:line, 104, :none),
                  (:function, (:call, (:., :Base, (:quote, #QuoteNode
                          :show
                        )), (:(::), :io, :IO), (:(::), :t, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                      (:line, 105, :none),
                      (:call, (:., :Base, (:quote, #QuoteNode
                            :show_datatype
                          )), :io, :t)
                    )),
                  (:line, 107, :none),
                  (:function, (:call, (:., :Base, (:quote, #QuoteNode
                          :show
                        )), (:(::), :io, :IO), (:(::), (:macrocall, Symbol("@MIME_str"), "text/plain")), (:(::), :t, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                      (:line, 108, :none),
                      (:call, :print, :io, "Enum "),
                      (:line, 109, :none),
                      (:call, (:., :Base, (:quote, #QuoteNode
                            :show_datatype
                          )), :io, :t),
                      (:line, 110, :none),
                      (:call, :print, :io, ":"),
                      (:line, 111, :none),
                      (:for, (:(=), (:tuple, :sym, :i), (:$, :vals)), (:block,
                          (:line, 112, :none),
                          (:call, :print, :io, "\n", :sym, " = ", :i)
                        ))
                    ))
                ))),
            (:line, 116, :none),
            (:if, (:call, :isa, :T, :Symbol), (:block,
                (:line, 117, :none),
                (:for, (:(=), (:tuple, :sym, :i), :vals), (:block,
                    (:line, 118, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:const, (:(=), (:$, (:call, :esc, :sym)), (:call, (:$, (:call, :esc, :T)), (:$, :i))))))
                  ))
              )),
            (:line, 121, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, #QuoteNode
                :nothing
              )),
            (:line, 122, :none),
            (:(=), (:., :blk, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :toplevel
              )),
            (:line, 123, :none),
            (:return, :blk)
          ))
      ))
  ))