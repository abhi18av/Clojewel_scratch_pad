(:quote, (:block,
    (:line, 5, :none),
    "    Inf16\n\nPositive infinity of type `Float16`.\n",
    (:line, 10, :none),
    (:const, (:(=), :Inf16, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0x7c00)))),
    (:line, 11, :none),
    "    NaN16\n\nA not-a-number value of type `Float16`.\n",
    (:line, 16, :none),
    (:const, (:(=), :NaN16, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0x7e00)))),
    (:line, 17, :none),
    "    Inf32\n\nPositive infinity of type `Float32`.\n",
    (:line, 22, :none),
    (:const, (:(=), :Inf32, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x7f800000)))),
    (:line, 23, :none),
    "    NaN32\n\nA not-a-number value of type `Float32`.\n",
    (:line, 28, :none),
    (:const, (:(=), :NaN32, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x7fc00000)))),
    (:line, 29, :none),
    (:const, (:(=), :Inf64, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x7ff0000000000000)))),
    (:line, 30, :none),
    (:const, (:(=), :NaN64, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x7ff8000000000000)))),
    (:line, 32, :none),
    "    Inf\n\nPositive infinity of type `Float64`.\n",
    (:line, 37, :none),
    (:const, (:(=), :Inf, :Inf64)),
    (:line, 38, :none),
    "    NaN\n\nA not-a-number value of type `Float64`.\n",
    (:line, 43, :none),
    (:const, (:(=), :NaN, :NaN64)),
    (:line, 46, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float16)), (:(::), :x, :Integer)), (:block,
        (:line, 46, :none),
        (:call, :convert, :Float16, (:call, :convert, :Float32, :x))
      )),
    (:line, 47, :none),
    (:for, (:(=), :t, (:tuple, :Int8, :Int16, :Int32, :Int64, :Int128, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128)), (:block,
        (:line, 48, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float16)), (:(::), (:curly, :Type, (:$, :t)))), (:block,
              (:line, 48, :none),
              :Float32
            )))
      )),
    (:line, 50, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float16)), (:(::), (:curly, :Type, :Bool))), (:block,
        (:line, 50, :none),
        :Float16
      )),
    (:line, 52, :none),
    (:for, (:(=), :t1, (:tuple, :Float32, :Float64)), (:block,
        (:line, 53, :none),
        (:for, (:(=), :st, (:tuple, :Int8, :Int16, :Int32, :Int64)), (:block,
            (:line, 54, :none),
            (:macrocall, Symbol("@eval"), (:block,
                (:line, 55, :none),
                (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :t1))), (:(::), :x, (:$, :st))), (:block,
                    (:line, 55, :none),
                    (:call, :box, (:$, :t1), (:call, :sitofp, (:$, :t1), (:call, :unbox, (:$, :st), :x)))
                  )),
                (:line, 56, :none),
                (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, (:$, :t1))), (:(::), (:curly, :Type, (:$, :st)))), (:block,
                    (:line, 56, :none),
                    (:$, :t1)
                  ))
              ))
          )),
        (:line, 59, :none),
        (:for, (:(=), :ut, (:tuple, :Bool, :UInt8, :UInt16, :UInt32, :UInt64)), (:block,
            (:line, 60, :none),
            (:macrocall, Symbol("@eval"), (:block,
                (:line, 61, :none),
                (:(=), (:call, :convert, (:(::), (:curly, :Type, (:$, :t1))), (:(::), :x, (:$, :ut))), (:block,
                    (:line, 61, :none),
                    (:call, :box, (:$, :t1), (:call, :uitofp, (:$, :t1), (:call, :unbox, (:$, :ut), :x)))
                  )),
                (:line, 62, :none),
                (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, (:$, :t1))), (:(::), (:curly, :Type, (:$, :ut)))), (:block,
                    (:line, 62, :none),
                    (:$, :t1)
                  ))
              ))
          ))
      )),
    (:line, 67, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float64)), (:(::), (:curly, :Type, :UInt128))), (:block,
        (:line, 67, :none),
        :Float64
      )),
    (:line, 68, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float64)), (:(::), (:curly, :Type, :Int128))), (:block,
        (:line, 68, :none),
        :Float64
      )),
    (:line, 69, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float32)), (:(::), (:curly, :Type, :UInt128))), (:block,
        (:line, 69, :none),
        :Float32
      )),
    (:line, 70, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float32)), (:(::), (:curly, :Type, :Int128))), (:block,
        (:line, 70, :none),
        :Float32
      )),
    (:line, 72, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :Float64)), (:(::), :x, :UInt128)), (:block,
        (:line, 73, :none),
        (:&&, (:call, :(==), :x, 0), (:return, 0.0)),
        (:line, 74, :none),
        (:(=), :n, (:call, :-, 128, (:call, :leading_zeros, :x))),
        (:line, 75, :none),
        (:if, (:call, :(<=), :n, 53), (:block,
            (:line, 76, :none),
            (:(=), :y, (:call, :&, (:call, :<<, (:call, :%, :x, :UInt64), (:call, :-, 53, :n)), 0x000fffffffffffff))
          ), (:block,
            (:line, 78, :none),
            (:(=), :y, (:call, :&, (:call, :%, (:call, :>>, :x, (:call, :-, :n, 54)), :UInt64), 0x001fffffffffffff)),
            (:line, 79, :none),
            (:(=), :y, (:call, :>>, (:call, :+, :y, 1), 1)),
            (:line, 80, :none),
            (:&=, :y, (:call, :~, (:call, :UInt64, (:call, :(==), (:call, :trailing_zeros, :x), (:call, :-, :n, 54)))))
          )),
        (:line, 82, :none),
        (:(=), :d, (:call, :<<, (:call, :%, (:call, :+, :n, 1022), :UInt64), 52)),
        (:line, 83, :none),
        (:call, :reinterpret, :Float64, (:call, :+, :d, :y))
      )),
    (:line, 86, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :Float64)), (:(::), :x, :Int128)), (:block,
        (:line, 87, :none),
        (:&&, (:call, :(==), :x, 0), (:return, 0.0)),
        (:line, 88, :none),
        (:(=), :s, (:call, :&, (:call, :%, (:call, :>>>, :x, 64), :UInt64), 0x8000000000000000)),
        (:line, 89, :none),
        (:(=), :x, (:call, :%, (:call, :abs, :x), :UInt128)),
        (:line, 90, :none),
        (:(=), :n, (:call, :-, 128, (:call, :leading_zeros, :x))),
        (:line, 91, :none),
        (:if, (:call, :(<=), :n, 53), (:block,
            (:line, 92, :none),
            (:(=), :y, (:call, :&, (:call, :<<, (:call, :%, :x, :UInt64), (:call, :-, 53, :n)), 0x000fffffffffffff))
          ), (:block,
            (:line, 94, :none),
            (:(=), :y, (:call, :&, (:call, :%, (:call, :>>, :x, (:call, :-, :n, 54)), :UInt64), 0x001fffffffffffff)),
            (:line, 95, :none),
            (:(=), :y, (:call, :>>, (:call, :+, :y, 1), 1)),
            (:line, 96, :none),
            (:&=, :y, (:call, :~, (:call, :UInt64, (:call, :(==), (:call, :trailing_zeros, :x), (:call, :-, :n, 54)))))
          )),
        (:line, 98, :none),
        (:(=), :d, (:call, :<<, (:call, :%, (:call, :+, :n, 1022), :UInt64), 52)),
        (:line, 99, :none),
        (:call, :reinterpret, :Float64, (:call, :+, (:call, :|, :s, :d), :y))
      )),
    (:line, 102, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :Float32)), (:(::), :x, :UInt128)), (:block,
        (:line, 103, :none),
        (:&&, (:call, :(==), :x, 0), (:return, 0.0f0)),
        (:line, 104, :none),
        (:(=), :n, (:call, :-, 128, (:call, :leading_zeros, :x))),
        (:line, 105, :none),
        (:if, (:call, :(<=), :n, 24), (:block,
            (:line, 106, :none),
            (:(=), :y, (:call, :&, (:call, :<<, (:call, :%, :x, :UInt32), (:call, :-, 24, :n)), 0x007fffff))
          ), (:block,
            (:line, 108, :none),
            (:(=), :y, (:call, :&, (:call, :%, (:call, :>>, :x, (:call, :-, :n, 25)), :UInt32), 0x00ffffff)),
            (:line, 109, :none),
            (:(=), :y, (:call, :>>, (:call, :+, :y, (:call, :one, :UInt32)), 1)),
            (:line, 110, :none),
            (:&=, :y, (:call, :~, (:call, :UInt32, (:call, :(==), (:call, :trailing_zeros, :x), (:call, :-, :n, 25)))))
          )),
        (:line, 112, :none),
        (:(=), :d, (:call, :<<, (:call, :%, (:call, :+, :n, 126), :UInt32), 23)),
        (:line, 113, :none),
        (:call, :reinterpret, :Float32, (:call, :+, :d, :y))
      )),
    (:line, 116, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :Float32)), (:(::), :x, :Int128)), (:block,
        (:line, 117, :none),
        (:&&, (:call, :(==), :x, 0), (:return, 0.0f0)),
        (:line, 118, :none),
        (:(=), :s, (:call, :&, (:call, :%, (:call, :>>>, :x, 96), :UInt32), 0x80000000)),
        (:line, 119, :none),
        (:(=), :x, (:call, :%, (:call, :abs, :x), :UInt128)),
        (:line, 120, :none),
        (:(=), :n, (:call, :-, 128, (:call, :leading_zeros, :x))),
        (:line, 121, :none),
        (:if, (:call, :(<=), :n, 24), (:block,
            (:line, 122, :none),
            (:(=), :y, (:call, :&, (:call, :<<, (:call, :%, :x, :UInt32), (:call, :-, 24, :n)), 0x007fffff))
          ), (:block,
            (:line, 124, :none),
            (:(=), :y, (:call, :&, (:call, :%, (:call, :>>, :x, (:call, :-, :n, 25)), :UInt32), 0x00ffffff)),
            (:line, 125, :none),
            (:(=), :y, (:call, :>>, (:call, :+, :y, (:call, :one, :UInt32)), 1)),
            (:line, 126, :none),
            (:&=, :y, (:call, :~, (:call, :UInt32, (:call, :(==), (:call, :trailing_zeros, :x), (:call, :-, :n, 25)))))
          )),
        (:line, 128, :none),
        (:(=), :d, (:call, :<<, (:call, :%, (:call, :+, :n, 126), :UInt32), 23)),
        (:line, 129, :none),
        (:call, :reinterpret, :Float32, (:call, :+, (:call, :|, :s, :d), :y))
      )),
    (:line, 133, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float16)), (:(::), :x, :Float64)), (:block,
        (:line, 133, :none),
        (:call, :convert, :Float16, (:call, :convert, :Float32, :x))
      )),
    (:line, 134, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float32)), (:(::), :x, :Float64)), (:block,
        (:line, 134, :none),
        (:call, :box, :Float32, (:call, :fptrunc, :Float32, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 137, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float64)), (:(::), :x, :Float16)), (:block,
        (:line, 137, :none),
        (:call, :convert, :Float64, (:call, :convert, :Float32, :x))
      )),
    (:line, 138, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float64)), (:(::), :x, :Float32)), (:block,
        (:line, 138, :none),
        (:call, :box, :Float64, (:call, :fpext, :Float64, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 140, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Bool)), (:block,
        (:line, 140, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 141, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Int8)), (:block,
        (:line, 141, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 142, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Int16)), (:block,
        (:line, 142, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 143, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Int32)), (:block,
        (:line, 143, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 144, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Int64)), (:block,
        (:line, 144, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 145, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Int128)), (:block,
        (:line, 145, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 146, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :UInt8)), (:block,
        (:line, 146, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 147, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :UInt16)), (:block,
        (:line, 147, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 148, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :UInt32)), (:block,
        (:line, 148, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 149, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :UInt64)), (:block,
        (:line, 149, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 150, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :UInt128)), (:block,
        (:line, 150, :none),
        (:call, :convert, :Float64, :x)
      )),
    (:line, 152, :none),
    (:(=), (:call, :float, :x), (:block,
        (:line, 152, :none),
        (:call, :convert, :AbstractFloat, :x)
      )),
    (:line, 155, :none),
    (:(=), (:call, (:curly, :float, (:<:, :T, :Number)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 155, :none),
        (:call, :typeof, (:call, :float, (:call, :zero, :T)))
      )),
    (:line, 157, :none),
    (:for, (:(=), :Ti, (:tuple, :Int8, :Int16, :Int32, :Int64)), (:block,
        (:line, 158, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 159, :none),
            (:(=), (:call, :unsafe_trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, :Float32)), (:block,
                (:line, 159, :none),
                (:call, :box, (:$, :Ti), (:call, :fptosi, (:$, :Ti), (:call, :unbox, :Float32, :x)))
              )),
            (:line, 160, :none),
            (:(=), (:call, :unsafe_trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, :Float64)), (:block,
                (:line, 160, :none),
                (:call, :box, (:$, :Ti), (:call, :fptosi, (:$, :Ti), (:call, :unbox, :Float64, :x)))
              ))
          ))
      )),
    (:line, 163, :none),
    (:for, (:(=), :Ti, (:tuple, :UInt8, :UInt16, :UInt32, :UInt64)), (:block,
        (:line, 164, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 165, :none),
            (:(=), (:call, :unsafe_trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, :Float32)), (:block,
                (:line, 165, :none),
                (:call, :box, (:$, :Ti), (:call, :fptoui, (:$, :Ti), (:call, :unbox, :Float32, :x)))
              )),
            (:line, 166, :none),
            (:(=), (:call, :unsafe_trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, :Float64)), (:block,
                (:line, 166, :none),
                (:call, :box, (:$, :Ti), (:call, :fptoui, (:$, :Ti), (:call, :unbox, :Float64, :x)))
              ))
          ))
      )),
    (:line, 170, :none),
    (:function, (:call, :unsafe_trunc, (:(::), (:curly, :Type, :UInt128)), (:(::), :x, :Float64)), (:block,
        (:line, 171, :none),
        (:(=), :xu, (:call, :reinterpret, :UInt64, :x)),
        (:line, 172, :none),
        (:(=), :k, (:call, :-, (:call, :&, (:call, :Int, (:call, :>>, :xu, 52)), 0x07ff), 1075)),
        (:line, 173, :none),
        (:(=), :xu, (:call, :|, (:call, :&, :xu, 0x000fffffffffffff), 0x0010000000000000)),
        (:line, 174, :none),
        (:if, (:call, :(<=), :k, 0), (:block,
            (:line, 175, :none),
            (:call, :UInt128, (:call, :>>, :xu, (:call, :-, :k)))
          ), (:block,
            (:line, 177, :none),
            (:call, :<<, (:call, :UInt128, :xu), :k)
          ))
      )),
    (:line, 180, :none),
    (:function, (:call, :unsafe_trunc, (:(::), (:curly, :Type, :Int128)), (:(::), :x, :Float64)), (:block,
        (:line, 181, :none),
        (:call, :copysign, (:call, :%, (:call, :unsafe_trunc, :UInt128, :x), :Int128), :x)
      )),
    (:line, 184, :none),
    (:function, (:call, :unsafe_trunc, (:(::), (:curly, :Type, :UInt128)), (:(::), :x, :Float32)), (:block,
        (:line, 185, :none),
        (:(=), :xu, (:call, :reinterpret, :UInt32, :x)),
        (:line, 186, :none),
        (:(=), :k, (:call, :-, (:call, :&, (:call, :Int, (:call, :>>, :xu, 23)), 0x00ff), 150)),
        (:line, 187, :none),
        (:(=), :xu, (:call, :|, (:call, :&, :xu, 0x007fffff), 0x00800000)),
        (:line, 188, :none),
        (:if, (:call, :(<=), :k, 0), (:block,
            (:line, 189, :none),
            (:call, :UInt128, (:call, :>>, :xu, (:call, :-, :k)))
          ), (:block,
            (:line, 191, :none),
            (:call, :<<, (:call, :UInt128, :xu), :k)
          ))
      )),
    (:line, 194, :none),
    (:function, (:call, :unsafe_trunc, (:(::), (:curly, :Type, :Int128)), (:(::), :x, :Float32)), (:block,
        (:line, 195, :none),
        (:call, :copysign, (:call, :%, (:call, :unsafe_trunc, :UInt128, :x), :Int128), :x)
      )),
    (:line, 201, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Signed)), (:(::), :x, :Float32)), (:block,
        (:line, 201, :none),
        (:call, :trunc, :Int, :x)
      )),
    (:line, 202, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Signed)), (:(::), :x, :Float64)), (:block,
        (:line, 202, :none),
        (:call, :trunc, :Int, :x)
      )),
    (:line, 203, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :Float32)), (:block,
        (:line, 203, :none),
        (:call, :trunc, :UInt, :x)
      )),
    (:line, 204, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :Float64)), (:block,
        (:line, 204, :none),
        (:call, :trunc, :UInt, :x)
      )),
    (:line, 205, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Integer)), (:(::), :x, :Float32)), (:block,
        (:line, 205, :none),
        (:call, :trunc, :Int, :x)
      )),
    (:line, 206, :none),
    (:(=), (:call, :trunc, (:(::), (:curly, :Type, :Integer)), (:(::), :x, :Float64)), (:block,
        (:line, 206, :none),
        (:call, :trunc, :Int, :x)
      )),
    (:line, 209, :none),
    (:(=), (:call, (:curly, :floor, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 209, :none),
        (:call, :trunc, :T, (:call, :floor, :x))
      )),
    (:line, 210, :none),
    (:(=), (:call, (:curly, :ceil, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 210, :none),
        (:call, :trunc, :T, (:call, :ceil, :x))
      )),
    (:line, 211, :none),
    (:(=), (:call, (:curly, :round, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 211, :none),
        (:call, :trunc, :T, (:call, :round, :x))
      )),
    (:line, 213, :none),
    (:(=), (:call, :trunc, (:(::), :x, :Float64)), (:block,
        (:line, 213, :none),
        (:call, :box, :Float64, (:call, :trunc_llvm, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 214, :none),
    (:(=), (:call, :trunc, (:(::), :x, :Float32)), (:block,
        (:line, 214, :none),
        (:call, :box, :Float32, (:call, :trunc_llvm, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 216, :none),
    (:(=), (:call, :floor, (:(::), :x, :Float64)), (:block,
        (:line, 216, :none),
        (:call, :box, :Float64, (:call, :floor_llvm, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 217, :none),
    (:(=), (:call, :floor, (:(::), :x, :Float32)), (:block,
        (:line, 217, :none),
        (:call, :box, :Float32, (:call, :floor_llvm, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 219, :none),
    (:(=), (:call, :ceil, (:(::), :x, :Float64)), (:block,
        (:line, 219, :none),
        (:call, :box, :Float64, (:call, :ceil_llvm, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 220, :none),
    (:(=), (:call, :ceil, (:(::), :x, :Float32)), (:block,
        (:line, 220, :none),
        (:call, :box, :Float32, (:call, :ceil_llvm, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 222, :none),
    (:(=), (:call, :round, (:(::), :x, :Float64)), (:block,
        (:line, 222, :none),
        (:call, :box, :Float64, (:call, :rint_llvm, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 223, :none),
    (:(=), (:call, :round, (:(::), :x, :Float32)), (:block,
        (:line, 223, :none),
        (:call, :box, :Float32, (:call, :rint_llvm, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 226, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float32)), (:(::), (:curly, :Type, :Float16))), (:block,
        (:line, 226, :none),
        :Float32
      )),
    (:line, 227, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float64)), (:(::), (:curly, :Type, :Float16))), (:block,
        (:line, 227, :none),
        :Float64
      )),
    (:line, 228, :none),
    (:(=), (:call, :promote_rule, (:(::), (:curly, :Type, :Float64)), (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 228, :none),
        :Float64
      )),
    (:line, 230, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :Float16))), (:block,
        (:line, 230, :none),
        :Float32
      )),
    (:line, 231, :none),
    (:(=), (:call, :widen, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 231, :none),
        :Float64
      )),
    (:line, 233, :none),
    (:(=), (:call, :_default_type, (:(::), :T, (:curly, :Union, (:curly, :Type, :Real), (:curly, :Type, :AbstractFloat)))), (:block,
        (:line, 233, :none),
        :Float64
      )),
    (:line, 236, :none),
    (:(=), (:call, :-, (:(::), :x, :Float32)), (:block,
        (:line, 236, :none),
        (:call, :box, :Float32, (:call, :neg_float, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 237, :none),
    (:(=), (:call, :-, (:(::), :x, :Float64)), (:block,
        (:line, 237, :none),
        (:call, :box, :Float64, (:call, :neg_float, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 239, :none),
    (:(=), (:call, :+, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 239, :none),
        (:call, :box, :Float32, (:call, :add_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y)))
      )),
    (:line, 240, :none),
    (:(=), (:call, :+, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 240, :none),
        (:call, :box, :Float64, (:call, :add_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y)))
      )),
    (:line, 241, :none),
    (:(=), (:call, :-, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 241, :none),
        (:call, :box, :Float32, (:call, :sub_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y)))
      )),
    (:line, 242, :none),
    (:(=), (:call, :-, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 242, :none),
        (:call, :box, :Float64, (:call, :sub_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y)))
      )),
    (:line, 243, :none),
    (:(=), (:call, :*, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 243, :none),
        (:call, :box, :Float32, (:call, :mul_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y)))
      )),
    (:line, 244, :none),
    (:(=), (:call, :*, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 244, :none),
        (:call, :box, :Float64, (:call, :mul_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y)))
      )),
    (:line, 245, :none),
    (:(=), (:call, :/, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 245, :none),
        (:call, :box, :Float32, (:call, :div_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y)))
      )),
    (:line, 246, :none),
    (:(=), (:call, :/, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 246, :none),
        (:call, :box, :Float64, (:call, :div_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y)))
      )),
    (:line, 248, :none),
    (:(=), (:call, :muladd, (:(::), :x, :Float32), (:(::), :y, :Float32), (:(::), :z, :Float32)), (:block,
        (:line, 248, :none),
        (:call, :box, :Float32, (:call, :muladd_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y), (:call, :unbox, :Float32, :z)))
      )),
    (:line, 249, :none),
    (:(=), (:call, :muladd, (:(::), :x, :Float64), (:(::), :y, :Float64), (:(::), :z, :Float64)), (:block,
        (:line, 249, :none),
        (:call, :box, :Float64, (:call, :muladd_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y), (:call, :unbox, :Float64, :z)))
      )),
    (:line, 254, :none),
    (:(=), (:call, :rem, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 254, :none),
        (:call, :box, :Float32, (:call, :rem_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y)))
      )),
    (:line, 255, :none),
    (:(=), (:call, :rem, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 255, :none),
        (:call, :box, :Float64, (:call, :rem_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y)))
      )),
    (:line, 257, :none),
    (:(=), (:call, (:curly, :cld, (:<:, :T, :AbstractFloat)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 257, :none),
        (:call, :-, (:call, :fld, (:call, :-, :x), :y))
      )),
    (:line, 259, :none),
    (:function, (:call, (:curly, :mod, (:<:, :T, :AbstractFloat)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 260, :none),
        (:(=), :r, (:call, :rem, :x, :y)),
        (:line, 261, :none),
        (:if, (:call, :(==), :r, 0), (:block,
            (:line, 262, :none),
            (:call, :copysign, :r, :y)
          ), (:block,
            (:line, 263, :none),
            (:if, (:call, :$, (:call, :>, :r, 0), (:call, :>, :y, 0)), (:block,
                (:line, 264, :none),
                (:call, :+, :r, :y)
              ), (:block,
                (:line, 266, :none),
                :r
              ))
          ))
      )),
    (:line, 271, :none),
    (:(=), (:call, :(==), (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 271, :none),
        (:call, :eq_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 272, :none),
    (:(=), (:call, :(==), (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 272, :none),
        (:call, :eq_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 273, :none),
    (:(=), (:call, :(!=), (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 273, :none),
        (:call, :ne_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 274, :none),
    (:(=), (:call, :(!=), (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 274, :none),
        (:call, :ne_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 275, :none),
    (:(=), (:call, :<, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 275, :none),
        (:call, :lt_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 276, :none),
    (:(=), (:call, :<, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 276, :none),
        (:call, :lt_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 277, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 277, :none),
        (:call, :le_float, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 278, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 278, :none),
        (:call, :le_float, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 280, :none),
    (:(=), (:call, :isequal, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 280, :none),
        (:call, :fpiseq, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 281, :none),
    (:(=), (:call, :isequal, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 281, :none),
        (:call, :fpiseq, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 282, :none),
    (:(=), (:call, :isless, (:(::), :x, :Float32), (:(::), :y, :Float32)), (:block,
        (:line, 282, :none),
        (:call, :fpislt, (:call, :unbox, :Float32, :x), (:call, :unbox, :Float32, :y))
      )),
    (:line, 283, :none),
    (:(=), (:call, :isless, (:(::), :x, :Float64), (:(::), :y, :Float64)), (:block,
        (:line, 283, :none),
        (:call, :fpislt, (:call, :unbox, :Float64, :x), (:call, :unbox, :Float64, :y))
      )),
    (:line, 285, :none),
    (:function, (:call, :cmp, (:(::), :x, :AbstractFloat), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 286, :none),
        (:&&, (:||, (:call, :isnan, :x), (:call, :isnan, :y)), (:call, :throw, (:call, :DomainError))),
        (:line, 287, :none),
        (:call, :ifelse, (:call, :<, :x, :y), -1, (:call, :ifelse, (:call, :>, :x, :y), 1, 0))
      )),
    (:line, 290, :none),
    (:function, (:call, :cmp, (:(::), :x, :Real), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 291, :none),
        (:&&, (:call, :isnan, :y), (:call, :throw, (:call, :DomainError))),
        (:line, 292, :none),
        (:call, :ifelse, (:call, :<, :x, :y), -1, (:call, :ifelse, (:call, :>, :x, :y), 1, 0))
      )),
    (:line, 295, :none),
    (:function, (:call, :cmp, (:(::), :x, :AbstractFloat), (:(::), :y, :Real)), (:block,
        (:line, 296, :none),
        (:&&, (:call, :isnan, :x), (:call, :throw, (:call, :DomainError))),
        (:line, 297, :none),
        (:call, :ifelse, (:call, :<, :x, :y), -1, (:call, :ifelse, (:call, :>, :x, :y), 1, 0))
      )),
    (:line, 313, :none),
    (:for, (:(=), :Ti, (:tuple, :Int64, :UInt64, :Int128, :UInt128)), (:block,
        (:line, 314, :none),
        (:for, (:(=), :Tf, (:tuple, :Float32, :Float64)), (:block,
            (:line, 315, :none),
            (:macrocall, Symbol("@eval"), (:block,
                (:line, 316, :none),
                (:function, (:call, :(==), (:(::), :x, (:$, :Tf)), (:(::), :y, (:$, :Ti))), (:block,
                    (:line, 317, :none),
                    (:(=), :fy, (:call, (:$, :Tf), :y)),
                    (:line, 318, :none),
                    (:call, :&, (:call, :&, (:call, :(==), :x, :fy), (:call, :(!=), :fy, (:$, (:call, :Tf, (:call, :typemax, :Ti))))), (:call, :(==), :y, (:call, :unsafe_trunc, (:$, :Ti), :fy)))
                  )),
                (:line, 320, :none),
                (:(=), (:call, :(==), (:(::), :y, (:$, :Ti)), (:(::), :x, (:$, :Tf))), (:block,
                    (:line, 320, :none),
                    (:call, :(==), :x, :y)
                  )),
                (:line, 322, :none),
                (:function, (:call, :<, (:(::), :x, (:$, :Ti)), (:(::), :y, (:$, :Tf))), (:block,
                    (:line, 323, :none),
                    (:(=), :fx, (:call, (:$, :Tf), :x)),
                    (:line, 324, :none),
                    (:call, :|, (:call, :<, :fx, :y), (:call, :&, (:call, :(==), :fx, :y), (:call, :|, (:call, :(==), :fx, (:$, (:call, :Tf, (:call, :typemax, :Ti)))), (:call, :<, :x, (:call, :unsafe_trunc, (:$, :Ti), :fx)))))
                  )),
                (:line, 326, :none),
                (:function, (:call, :(<=), (:(::), :x, (:$, :Ti)), (:(::), :y, (:$, :Tf))), (:block,
                    (:line, 327, :none),
                    (:(=), :fx, (:call, (:$, :Tf), :x)),
                    (:line, 328, :none),
                    (:call, :|, (:call, :<, :fx, :y), (:call, :&, (:call, :(==), :fx, :y), (:call, :|, (:call, :(==), :fx, (:$, (:call, :Tf, (:call, :typemax, :Ti)))), (:call, :(<=), :x, (:call, :unsafe_trunc, (:$, :Ti), :fx)))))
                  )),
                (:line, 331, :none),
                (:function, (:call, :<, (:(::), :x, (:$, :Tf)), (:(::), :y, (:$, :Ti))), (:block,
                    (:line, 332, :none),
                    (:(=), :fy, (:call, (:$, :Tf), :y)),
                    (:line, 333, :none),
                    (:call, :|, (:call, :<, :x, :fy), (:call, :&, (:call, :&, (:call, :(==), :x, :fy), (:call, :<, :fy, (:$, (:call, :Tf, (:call, :typemax, :Ti))))), (:call, :<, (:call, :unsafe_trunc, (:$, :Ti), :fy), :y)))
                  )),
                (:line, 335, :none),
                (:function, (:call, :(<=), (:(::), :x, (:$, :Tf)), (:(::), :y, (:$, :Ti))), (:block,
                    (:line, 336, :none),
                    (:(=), :fy, (:call, (:$, :Tf), :y)),
                    (:line, 337, :none),
                    (:call, :|, (:call, :<, :x, :fy), (:call, :&, (:call, :&, (:call, :(==), :x, :fy), (:call, :<, :fy, (:$, (:call, :Tf, (:call, :typemax, :Ti))))), (:call, :(<=), (:call, :unsafe_trunc, (:$, :Ti), :fy), :y)))
                  ))
              ))
          ))
      )),
    (:line, 343, :none),
    (:(=), (:call, :(==), (:(::), :x, :Float32), (:(::), :y, (:curly, :Union, :Int32, :UInt32))), (:block,
        (:line, 343, :none),
        (:call, :(==), (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 344, :none),
    (:(=), (:call, :(==), (:(::), :x, (:curly, :Union, :Int32, :UInt32)), (:(::), :y, :Float32)), (:block,
        (:line, 344, :none),
        (:call, :(==), (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 346, :none),
    (:(=), (:call, :<, (:(::), :x, :Float32), (:(::), :y, (:curly, :Union, :Int32, :UInt32))), (:block,
        (:line, 346, :none),
        (:call, :<, (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 347, :none),
    (:(=), (:call, :<, (:(::), :x, (:curly, :Union, :Int32, :UInt32)), (:(::), :y, :Float32)), (:block,
        (:line, 347, :none),
        (:call, :<, (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 349, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Float32), (:(::), :y, (:curly, :Union, :Int32, :UInt32))), (:block,
        (:line, 349, :none),
        (:call, :(<=), (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 350, :none),
    (:(=), (:call, :(<=), (:(::), :x, (:curly, :Union, :Int32, :UInt32)), (:(::), :y, :Float32)), (:block,
        (:line, 350, :none),
        (:call, :(<=), (:call, :Float64, :x), (:call, :Float64, :y))
      )),
    (:line, 352, :none),
    (:(=), (:call, :abs, (:(::), :x, :Float64)), (:block,
        (:line, 352, :none),
        (:call, :box, :Float64, (:call, :abs_float, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 353, :none),
    (:(=), (:call, :abs, (:(::), :x, :Float32)), (:block,
        (:line, 353, :none),
        (:call, :box, :Float32, (:call, :abs_float, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 355, :none),
    (:(=), (:call, :isnan, (:(::), :x, :AbstractFloat)), (:block,
        (:line, 355, :none),
        (:call, :(!=), :x, :x)
      )),
    (:line, 356, :none),
    (:(=), (:call, :isnan, (:(::), :x, :Real)), (:block,
        (:line, 356, :none),
        false
      )),
    (:line, 358, :none),
    (:(=), (:call, :isfinite, (:(::), :x, :AbstractFloat)), (:block,
        (:line, 358, :none),
        (:call, :(==), (:call, :-, :x, :x), 0)
      )),
    (:line, 359, :none),
    (:(=), (:call, :isfinite, (:(::), :x, :Real)), (:block,
        (:line, 359, :none),
        (:call, :(!=), (:ref, (:call, :decompose, :x), 3), 0)
      )),
    (:line, 360, :none),
    (:(=), (:call, :isfinite, (:(::), :x, :Integer)), (:block,
        (:line, 360, :none),
        true
      )),
    (:line, 362, :none),
    (:(=), (:call, :isinf, (:(::), :x, :Real)), (:block,
        (:line, 362, :none),
        (:call, :&, (:call, :!, (:call, :isnan, :x)), (:call, :!, (:call, :isfinite, :x)))
      )),
    (:line, 366, :none),
    (:(=), (:call, :hx, (:(::), :a, :UInt64), (:(::), :b, :Float64), (:(::), :h, :UInt)), (:block,
        (:line, 366, :none),
        (:call, :hash_uint64, (:call, :-, (:call, :+, (:call, :*, 3, :a), (:call, :reinterpret, :UInt64, :b)), :h))
      )),
    (:line, 367, :none),
    (:const, (:(=), :hx_NaN, (:call, :hx, (:call, :UInt64, 0), :NaN, (:call, :UInt, 0)))),
    (:line, 369, :none),
    (:(=), (:call, :hash, (:(::), :x, :UInt64), (:(::), :h, :UInt)), (:block,
        (:line, 369, :none),
        (:call, :hx, :x, (:call, :Float64, :x), :h)
      )),
    (:line, 370, :none),
    (:(=), (:call, :hash, (:(::), :x, :Int64), (:(::), :h, :UInt)), (:block,
        (:line, 370, :none),
        (:call, :hx, (:call, :reinterpret, :UInt64, (:call, :abs, :x)), (:call, :Float64, :x), :h)
      )),
    (:line, 371, :none),
    (:(=), (:call, :hash, (:(::), :x, :Float64), (:(::), :h, :UInt)), (:block,
        (:line, 371, :none),
        (:if, (:call, :isnan, :x), (:call, :$, :hx_NaN, :h), (:call, :hx, (:call, :box, :UInt64, (:call, :fptoui, (:call, :unbox, :Float64, (:call, :abs, :x)))), :x, :h))
      )),
    (:line, 373, :none),
    (:(=), (:call, :hash, (:(::), :x, (:curly, :Union, :Bool, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32)), (:(::), :h, :UInt)), (:block,
        (:line, 373, :none),
        (:call, :hash, (:call, :Int64, :x), :h)
      )),
    (:line, 374, :none),
    (:(=), (:call, :hash, (:(::), :x, :Float32), (:(::), :h, :UInt)), (:block,
        (:line, 374, :none),
        (:call, :hash, (:call, :Float64, :x), :h)
      )),
    (:line, 377, :none),
    (:(=), (:call, :precision, (:(::), (:curly, :Type, :Float16))), (:block,
        (:line, 377, :none),
        11
      )),
    (:line, 378, :none),
    (:(=), (:call, :precision, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 378, :none),
        24
      )),
    (:line, 379, :none),
    (:(=), (:call, :precision, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 379, :none),
        53
      )),
    (:line, 380, :none),
    (:(=), (:call, (:curly, :precision, (:<:, :T, :AbstractFloat)), (:(::), :T)), (:block,
        (:line, 380, :none),
        (:call, :precision, :T)
      )),
    (:line, 382, :none),
    "    uabs(x::Integer)\n\nReturns the absolute value of `x`, possibly returning a different type should the\noperation be susceptible to overflow. This typically arises when `x` is a two's complement\nsigned integer, so that `abs(typemin(x)) == typemin(x) < 0`, in which case the result of\n`uabs(x)` will be an unsigned integer of the same size.\n",
    (:line, 390, :none),
    (:(=), (:call, :uabs, (:(::), :x, :Integer)), (:block,
        (:line, 390, :none),
        (:call, :abs, :x)
      )),
    (:line, 391, :none),
    (:(=), (:call, :uabs, (:(::), :x, :Signed)), (:block,
        (:line, 391, :none),
        (:call, :unsigned, (:call, :abs, :x))
      )),
    (:line, 394, :none),
    "    nextfloat(x::AbstractFloat, n::Integer)\n\nThe result of `n` iterative applications of `nextfloat` to `x` if `n >= 0`, or `-n`\napplications of `prevfloat` if `n < 0`.\n",
    (:line, 400, :none),
    (:function, (:call, :nextfloat, (:(::), :f, (:curly, :Union, :Float16, :Float32, :Float64)), (:(::), :d, :Integer)), (:block,
        (:line, 401, :none),
        (:(=), :F, (:call, :typeof, :f)),
        (:line, 402, :none),
        (:(=), :fumax, (:call, :reinterpret, :Unsigned, (:call, :F, :Inf))),
        (:line, 403, :none),
        (:(=), :U, (:call, :typeof, :fumax)),
        (:line, 405, :none),
        (:&&, (:call, :isnan, :f), (:return, :f)),
        (:line, 406, :none),
        (:(=), :fi, (:call, :reinterpret, :Signed, :f)),
        (:line, 407, :none),
        (:(=), :fneg, (:call, :<, :fi, 0)),
        (:line, 408, :none),
        (:(=), :fu, (:call, :unsigned, (:call, :&, :fi, (:call, :typemax, :fi)))),
        (:line, 410, :none),
        (:(=), :dneg, (:call, :<, :d, 0)),
        (:line, 411, :none),
        (:(=), :da, (:call, :uabs, :d)),
        (:line, 412, :none),
        (:if, (:call, :>, :da, (:call, :typemax, :U)), (:block,
            (:line, 413, :none),
            (:(=), :fneg, :dneg),
            (:line, 414, :none),
            (:(=), :fu, :fumax)
          ), (:block,
            (:line, 416, :none),
            (:(=), :du, (:call, :%, :da, :U)),
            (:line, 417, :none),
            (:if, (:call, :$, :fneg, :dneg), (:block,
                (:line, 418, :none),
                (:if, (:call, :>, :du, :fu), (:block,
                    (:line, 419, :none),
                    (:(=), :fu, (:call, :min, :fumax, (:call, :-, :du, :fu))),
                    (:line, 420, :none),
                    (:(=), :fneg, (:call, :!, :fneg))
                  ), (:block,
                    (:line, 422, :none),
                    (:(=), :fu, (:call, :-, :fu, :du))
                  ))
              ), (:block,
                (:line, 425, :none),
                (:if, (:call, :<, (:call, :-, :fumax, :fu), :du), (:block,
                    (:line, 426, :none),
                    (:(=), :fu, :fumax)
                  ), (:block,
                    (:line, 428, :none),
                    (:(=), :fu, (:call, :+, :fu, :du))
                  ))
              ))
          )),
        (:line, 432, :none),
        (:if, :fneg, (:block,
            (:line, 433, :none),
            (:|=, :fu, (:call, :sign_mask, :F))
          )),
        (:line, 435, :none),
        (:call, :reinterpret, :F, :fu)
      )),
    (:line, 438, :none),
    "    nextfloat(x::AbstractFloat)\n\nReturns the smallest floating point number `y` of the same type as `x` such `x < y`. If no\nsuch `y` exists (e.g. if `x` is `Inf` or `NaN`), then returns `x`.\n",
    (:line, 444, :none),
    (:(=), (:call, :nextfloat, (:(::), :x, :AbstractFloat)), (:block,
        (:line, 444, :none),
        (:call, :nextfloat, :x, 1)
      )),
    (:line, 446, :none),
    "    prevfloat(x::AbstractFloat)\n\nReturns the largest floating point number `y` of the same type as `x` such `y < x`. If no\nsuch `y` exists (e.g. if `x` is `-Inf` or `NaN`), then returns `x`.\n",
    (:line, 452, :none),
    (:(=), (:call, :prevfloat, (:(::), :x, :AbstractFloat)), (:block,
        (:line, 452, :none),
        (:call, :nextfloat, :x, -1)
      )),
    (:line, 454, :none),
    (:for, (:(=), :Ti, (:tuple, :Int8, :Int16, :Int32, :Int64, :Int128, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128)), (:block,
        (:line, 455, :none),
        (:for, (:(=), :Tf, (:tuple, :Float32, :Float64)), (:block,
            (:line, 456, :none),
            (:if, (:||, (:call, :<, (:call, :sizeof, :Ti), (:call, :sizeof, :Tf)), (:<:, :Ti, :Unsigned)), (:block,
                (:line, 457, :none),
                (:macrocall, Symbol("@eval"), (:function, (:call, :trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, (:$, :Tf))), (:block,
                      (:line, 458, :none),
                      (:||, (:comparison, (:$, (:call, :-, (:call, :Tf, (:call, :typemin, :Ti)), (:call, :one, :Tf))), :<, :x, :<, (:$, (:call, :+, (:call, :Tf, (:call, :typemax, :Ti)), (:call, :one, :Tf)))), (:call, :throw, (:call, :InexactError))),
                      (:line, 459, :none),
                      (:call, :unsafe_trunc, (:$, :Ti), :x)
                    )))
              ), (:block,
                (:line, 462, :none),
                (:macrocall, Symbol("@eval"), (:function, (:call, :trunc, (:(::), (:curly, :Type, (:$, :Ti))), (:(::), :x, (:$, :Tf))), (:block,
                      (:line, 463, :none),
                      (:||, (:comparison, (:$, (:call, :Tf, (:call, :typemin, :Ti))), :(<=), :x, :<, (:$, (:call, :Tf, (:call, :typemax, :Ti)))), (:call, :throw, (:call, :InexactError))),
                      (:line, 464, :none),
                      (:call, :unsafe_trunc, (:$, :Ti), :x)
                    )))
              ))
          ))
      )),
    (:line, 471, :none),
    (:macrocall, Symbol("@eval"), (:block,
        (:line, 472, :none),
        (:(=), (:call, :issubnormal, (:(::), :x, :Float32)), (:block,
            (:line, 472, :none),
            (:call, :&, (:call, :<, (:call, :abs, :x), (:$, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x00800000)))), (:call, :(!=), :x, 0))
          )),
        (:line, 473, :none),
        (:(=), (:call, :issubnormal, (:(::), :x, :Float64)), (:block,
            (:line, 473, :none),
            (:call, :&, (:call, :<, (:call, :abs, :x), (:$, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x0010000000000000)))), (:call, :(!=), :x, 0))
          )),
        (:line, 475, :none),
        (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 475, :none),
            (:$, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0xfc00)))
          )),
        (:line, 476, :none),
        (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 476, :none),
            (:$, :Inf16)
          )),
        (:line, 477, :none),
        (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 477, :none),
            (:$, (:call, :-, :Inf32))
          )),
        (:line, 478, :none),
        (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 478, :none),
            (:$, :Inf32)
          )),
        (:line, 479, :none),
        (:(=), (:call, :typemin, (:(::), (:curly, :Type, :Float64))), (:block,
            (:line, 479, :none),
            (:$, (:call, :-, :Inf64))
          )),
        (:line, 480, :none),
        (:(=), (:call, :typemax, (:(::), (:curly, :Type, :Float64))), (:block,
            (:line, 480, :none),
            (:$, :Inf64)
          )),
        (:line, 481, :none),
        (:(=), (:call, (:curly, :typemin, (:<:, :T, :Real)), (:(::), :x, :T)), (:block,
            (:line, 481, :none),
            (:call, :typemin, :T)
          )),
        (:line, 482, :none),
        (:(=), (:call, (:curly, :typemax, (:<:, :T, :Real)), (:(::), :x, :T)), (:block,
            (:line, 482, :none),
            (:call, :typemax, :T)
          )),
        (:line, 484, :none),
        (:(=), (:call, :realmin, (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 484, :none),
            (:$, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0x0400)))
          )),
        (:line, 485, :none),
        (:(=), (:call, :realmin, (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 485, :none),
            (:$, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x00800000)))
          )),
        (:line, 486, :none),
        (:(=), (:call, :realmin, (:(::), (:curly, :Type, :Float64))), (:block,
            (:line, 486, :none),
            (:$, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x0010000000000000)))
          )),
        (:line, 487, :none),
        (:(=), (:call, :realmax, (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 487, :none),
            (:$, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0x7bff)))
          )),
        (:line, 488, :none),
        (:(=), (:call, :realmax, (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 488, :none),
            (:$, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x7f7fffff)))
          )),
        (:line, 489, :none),
        (:(=), (:call, :realmax, (:(::), (:curly, :Type, :Float64))), (:block,
            (:line, 489, :none),
            (:$, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x7fefffffffffffff)))
          )),
        (:line, 490, :none),
        (:(=), (:call, (:curly, :realmin, (:<:, :T, :AbstractFloat)), (:(::), :x, :T)), (:block,
            (:line, 490, :none),
            (:call, :realmin, :T)
          )),
        (:line, 491, :none),
        (:(=), (:call, (:curly, :realmax, (:<:, :T, :AbstractFloat)), (:(::), :x, :T)), (:block,
            (:line, 491, :none),
            (:call, :realmax, :T)
          )),
        (:line, 492, :none),
        (:(=), (:call, :realmin), (:block,
            (:line, 492, :none),
            (:call, :realmin, :Float64)
          )),
        (:line, 493, :none),
        (:(=), (:call, :realmax), (:block,
            (:line, 493, :none),
            (:call, :realmax, :Float64)
          )),
        (:line, 495, :none),
        (:(=), (:call, :eps, (:(::), :x, :AbstractFloat)), (:block,
            (:line, 495, :none),
            (:if, (:call, :isfinite, :x), (:if, (:call, :(>=), (:call, :abs, :x), (:call, :realmin, :x)), (:call, :ldexp, (:call, :eps, (:call, :typeof, :x)), (:call, :exponent, :x)), (:call, :nextfloat, (:call, :zero, :x))), (:call, :oftype, :x, :NaN))
          )),
        (:line, 496, :none),
        (:(=), (:call, :eps, (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 496, :none),
            (:$, (:call, :box, :Float16, (:call, :unbox, :UInt16, 0x1400)))
          )),
        (:line, 497, :none),
        (:(=), (:call, :eps, (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 497, :none),
            (:$, (:call, :box, :Float32, (:call, :unbox, :UInt32, 0x34000000)))
          )),
        (:line, 498, :none),
        (:(=), (:call, :eps, (:(::), (:curly, :Type, :Float64))), (:block,
            (:line, 498, :none),
            (:$, (:call, :box, :Float64, (:call, :unbox, :UInt64, 0x3cb0000000000000)))
          )),
        (:line, 499, :none),
        (:(=), (:call, :eps), (:block,
            (:line, 499, :none),
            (:call, :eps, :Float64)
          ))
      )),
    (:line, 503, :none),
    (:(=), (:call, :bswap, (:(::), :x, :Float32)), (:block,
        (:line, 503, :none),
        (:call, :box, :Float32, (:call, :bswap_int, (:call, :unbox, :Float32, :x)))
      )),
    (:line, 504, :none),
    (:(=), (:call, :bswap, (:(::), :x, :Float64)), (:block,
        (:line, 504, :none),
        (:call, :box, :Float64, (:call, :bswap_int, (:call, :unbox, :Float64, :x)))
      )),
    (:line, 507, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :Float64)), (:block,
        (:line, 507, :none),
        (:call, :reinterpret, :UInt64, :x)
      )),
    (:line, 508, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :Float32)), (:block,
        (:line, 508, :none),
        (:call, :reinterpret, :UInt32, :x)
      )),
    (:line, 509, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Signed)), (:(::), :x, :Float64)), (:block,
        (:line, 509, :none),
        (:call, :reinterpret, :Int64, :x)
      )),
    (:line, 510, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Signed)), (:(::), :x, :Float32)), (:block,
        (:line, 510, :none),
        (:call, :reinterpret, :Int32, :x)
      )),
    (:line, 512, :none),
    (:(=), (:call, :sign_mask, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 512, :none),
        0x8000000000000000
      )),
    (:line, 513, :none),
    (:(=), (:call, :exponent_mask, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 513, :none),
        0x7ff0000000000000
      )),
    (:line, 514, :none),
    (:(=), (:call, :exponent_one, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 514, :none),
        0x3ff0000000000000
      )),
    (:line, 515, :none),
    (:(=), (:call, :exponent_half, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 515, :none),
        0x3fe0000000000000
      )),
    (:line, 516, :none),
    (:(=), (:call, :significand_mask, (:(::), (:curly, :Type, :Float64))), (:block,
        (:line, 516, :none),
        0x000fffffffffffff
      )),
    (:line, 518, :none),
    (:(=), (:call, :sign_mask, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 518, :none),
        0x80000000
      )),
    (:line, 519, :none),
    (:(=), (:call, :exponent_mask, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 519, :none),
        0x7f800000
      )),
    (:line, 520, :none),
    (:(=), (:call, :exponent_one, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 520, :none),
        0x3f800000
      )),
    (:line, 521, :none),
    (:(=), (:call, :exponent_half, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 521, :none),
        0x3f000000
      )),
    (:line, 522, :none),
    (:(=), (:call, :significand_mask, (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 522, :none),
        0x007fffff
      )),
    (:line, 524, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :significand_bits, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, :T))), (:block,
          (:line, 524, :none),
          (:call, :trailing_ones, (:call, :significand_mask, :T))
        ))),
    (:line, 525, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :exponent_bits, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, :T))), (:block,
          (:line, 525, :none),
          (:call, :-, (:call, :-, (:call, :*, (:call, :sizeof, :T), 8), (:call, :significand_bits, :T)), 1)
        ))),
    (:line, 526, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :exponent_bias, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, :T))), (:block,
          (:line, 526, :none),
          (:call, :Int, (:call, :>>, (:call, :exponent_one, :T), (:call, :significand_bits, :T)))
        ))),
    (:line, 530, :none),
    (:(=), (:call, (:curly, :float, (:<:, :T, :AbstractFloat)), (:(::), :A, (:curly, :AbstractArray, :T))), (:block,
        (:line, 530, :none),
        :A
      )),
    (:line, 532, :none),
    (:function, (:call, (:curly, :float, :T), (:(::), :A, (:curly, :AbstractArray, :T))), (:block,
        (:line, 533, :none),
        (:if, (:call, :!, (:call, :isleaftype, :T)), (:block,
            (:line, 534, :none),
            (:call, :error, "`float` not defined on abstractly-typed arrays; please convert to a more specific type")
          )),
        (:line, 536, :none),
        (:call, :convert, (:curly, :AbstractArray, (:call, :typeof, (:call, :float, (:call, :zero, :T)))), :A)
      )),
    (:line, 539, :none),
    (:for, (:(=), :fn, (:tuple, (:quote, #QuoteNode
            :float
          ), (:quote, #QuoteNode
            :big
          ))), (:block,
        (:line, 540, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 541, :none),
            (:(=), (:call, (:$, :fn), (:(::), :r, :StepRange)), (:block,
                (:line, 541, :none),
                (:(:), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :start
                      ))), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :step
                      ))), (:call, (:$, :fn), (:call, :last, :r)))
              )),
            (:line, 542, :none),
            (:(=), (:call, (:$, :fn), (:(::), :r, :UnitRange)), (:block,
                (:line, 542, :none),
                (:(:), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :start
                      ))), (:call, (:$, :fn), (:call, :last, :r)))
              )),
            (:line, 543, :none),
            (:(=), (:call, (:$, :fn), (:(::), :r, :FloatRange)), (:block,
                (:line, 543, :none),
                (:call, :FloatRange, (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :start
                      ))), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :step
                      ))), (:., :r, (:quote, #QuoteNode
                      :len
                    )), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :divisor
                      ))))
              )),
            (:line, 544, :none),
            (:function, (:call, (:$, :fn), (:(::), :r, :LinSpace)), (:block,
                (:line, 545, :none),
                (:(=), :new_len, (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :len
                      )))),
                (:line, 546, :none),
                (:||, (:call, :(==), :new_len, (:., :r, (:quote, #QuoteNode
                        :len
                      ))), (:call, :error, (:call, :string, :r, ": too long for ", (:$, :fn)))),
                (:line, 547, :none),
                (:call, :LinSpace, (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :start
                      ))), (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :stop
                      ))), :new_len, (:call, (:$, :fn), (:., :r, (:quote, #QuoteNode
                        :divisor
                      ))))
              ))
          ))
      )),
    (:line, 552, :none),
    (:(=), (:call, (:curly, :big, (:<:, :T, :AbstractFloat), :N), (:(::), :x, (:curly, :AbstractArray, :T, :N))), (:block,
        (:line, 552, :none),
        (:call, :convert, (:curly, :AbstractArray, :BigFloat, :N), :x)
      )),
    (:line, 553, :none),
    (:(=), (:call, (:curly, :big, (:<:, :T, :Integer), :N), (:(::), :x, (:curly, :AbstractArray, :T, :N))), (:block,
        (:line, 553, :none),
        (:call, :convert, (:curly, :AbstractArray, :BigInt, :N), :x)
      ))
  ))