(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :StackTraces, (:block,
        (:line, 3, :none),
        (:line, 6, :none),
        (:toplevel, (:import, :Base, :hash), (:import, :Base, :(==)), (:import, :Base, :show)),
        (:line, 7, :none),
        (:toplevel, (:import, :Base, :Serializer, :serialize), (:import, :Base, :Serializer, :deserialize)),
        (:line, 9, :none),
        (:export, :StackTrace, :StackFrame, :stacktrace, :catch_stacktrace),
        (:line, 11, :none),
        (:macrocall, :(Core.@doc), "    StackFrame\n\nStack information representing execution context, with the following fields:\n\n- `func::Symbol`\n\n  The name of the function containing the execution context.\n\n- `linfo::Nullable{LambdaInfo}`\n\n  The LambdaInfo containing the execution context (if it could be found).\n\n- `file::Symbol`\n\n  The path to the file containing the execution context.\n\n- `line::Int`\n\n  The line number in the file containing the execution context.\n\n- `from_c::Bool`\n\n  True if the code is from C.\n\n- `inlined::Bool`\n\n  True if the code is from an inlined frame.\n\n- `pointer::UInt64`\n\n  Representation of the pointer to the execution context as returned by `backtrace`.\n\n", (:type, false, :StackFrame, (:block,
              (:line, 46, :none),
              "the name of the function containing the execution context",
              (:line, 47, :none),
              (:(::), :func, :Symbol),
              (:line, 48, :none),
              "the path to the file containing the execution context",
              (:line, 49, :none),
              (:(::), :file, :Symbol),
              (:line, 50, :none),
              "the line number in the file containing the execution context",
              (:line, 51, :none),
              (:(::), :line, :Int),
              (:line, 52, :none),
              "the LambdaInfo containing the execution context (if it could be found)",
              (:line, 53, :none),
              (:(::), :linfo, (:curly, :Nullable, :LambdaInfo)),
              (:line, 54, :none),
              "true if the code is from C",
              (:line, 55, :none),
              (:(::), :from_c, :Bool),
              (:line, 56, :none),
              "true if the code is from an inlined frame",
              (:line, 57, :none),
              (:(::), :inlined, :Bool),
              (:line, 58, :none),
              "representation of the pointer to the execution context as returned by `backtrace`",
              (:line, 59, :none),
              (:(::), :pointer, :UInt64)
            ))),
        (:line, 62, :none),
        (:(=), (:call, :StackFrame, :func, :file, :line), (:block,
            (:line, 62, :none),
            (:call, :StackFrame, :func, :file, :line, (:call, (:curly, :Nullable, :LambdaInfo)), false, false, 0)
          )),
        (:line, 64, :none),
        (:macrocall, :(Core.@doc), "    StackTrace\n\nAn alias for `Vector{StackFrame}` provided for convenience; returned by calls to\n`stacktrace` and `catch_stacktrace`.\n", (:typealias, :StackTrace, (:curly, :Vector, :StackFrame))),
        (:line, 72, :none),
        (:const, (:(=), :empty_sym, (:call, :Symbol, ""))),
        (:line, 73, :none),
        (:const, (:(=), :UNKNOWN, (:call, :StackFrame, :empty_sym, :empty_sym, -1, (:call, (:curly, :Nullable, :LambdaInfo)), true, false, 0))),
        (:line, 80, :none),
        (:function, (:call, :(==), (:(::), :a, :StackFrame), (:(::), :b, :StackFrame)), (:block,
            (:line, 81, :none),
            (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                    :line
                  )), (:., :b, (:quote, #QuoteNode
                    :line
                  ))), (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                      :from_c
                    )), (:., :b, (:quote, #QuoteNode
                      :from_c
                    ))), (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                        :func
                      )), (:., :b, (:quote, #QuoteNode
                        :func
                      ))), (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                          :file
                        )), (:., :b, (:quote, #QuoteNode
                          :file
                        ))), (:call, :(==), (:., :a, (:quote, #QuoteNode
                          :inlined
                        )), (:., :b, (:quote, #QuoteNode
                          :inlined
                        )))))))
          )),
        (:line, 84, :none),
        (:function, (:call, :hash, (:(::), :frame, :StackFrame), (:(::), :h, :UInt)), (:block,
            (:line, 85, :none),
            (:+=, :h, (:call, :%, 0xf4fbda67fe20ce88, :UInt)),
            (:line, 86, :none),
            (:(=), :h, (:call, :hash, (:., :frame, (:quote, #QuoteNode
                    :line
                  )), :h)),
            (:line, 87, :none),
            (:(=), :h, (:call, :hash, (:., :frame, (:quote, #QuoteNode
                    :file
                  )), :h)),
            (:line, 88, :none),
            (:(=), :h, (:call, :hash, (:., :frame, (:quote, #QuoteNode
                    :func
                  )), :h)),
            (:line, 89, :none),
            (:(=), :h, (:call, :hash, (:., :frame, (:quote, #QuoteNode
                    :from_c
                  )), :h)),
            (:line, 90, :none),
            (:(=), :h, (:call, :hash, (:., :frame, (:quote, #QuoteNode
                    :inlined
                  )), :h))
          )),
        (:line, 96, :none),
        (:function, (:call, :serialize, (:(::), :s, :AbstractSerializer), (:(::), :frame, :StackFrame)), (:block,
            (:line, 97, :none),
            (:call, (:., :Serializer, (:quote, #QuoteNode
                  :serialize_type
                )), :s, (:call, :typeof, :frame)),
            (:line, 98, :none),
            (:call, :serialize, :s, (:., :frame, (:quote, #QuoteNode
                  :func
                ))),
            (:line, 99, :none),
            (:call, :serialize, :s, (:., :frame, (:quote, #QuoteNode
                  :file
                ))),
            (:line, 100, :none),
            (:call, :write, (:., :s, (:quote, #QuoteNode
                  :io
                )), (:., :frame, (:quote, #QuoteNode
                  :line
                ))),
            (:line, 101, :none),
            (:call, :write, (:., :s, (:quote, #QuoteNode
                  :io
                )), (:., :frame, (:quote, #QuoteNode
                  :from_c
                ))),
            (:line, 102, :none),
            (:call, :write, (:., :s, (:quote, #QuoteNode
                  :io
                )), (:., :frame, (:quote, #QuoteNode
                  :inlined
                ))),
            (:line, 103, :none),
            (:call, :write, (:., :s, (:quote, #QuoteNode
                  :io
                )), (:., :frame, (:quote, #QuoteNode
                  :pointer
                )))
          )),
        (:line, 106, :none),
        (:function, (:call, :deserialize, (:(::), :s, :AbstractSerializer), (:(::), (:curly, :Type, :StackFrame))), (:block,
            (:line, 107, :none),
            (:(=), :func, (:call, :deserialize, :s)),
            (:line, 108, :none),
            (:(=), :file, (:call, :deserialize, :s)),
            (:line, 109, :none),
            (:(=), :line, (:call, :read, (:., :s, (:quote, #QuoteNode
                    :io
                  )), :Int)),
            (:line, 110, :none),
            (:(=), :from_c, (:call, :read, (:., :s, (:quote, #QuoteNode
                    :io
                  )), :Bool)),
            (:line, 111, :none),
            (:(=), :inlined, (:call, :read, (:., :s, (:quote, #QuoteNode
                    :io
                  )), :Bool)),
            (:line, 112, :none),
            (:(=), :pointer, (:call, :read, (:., :s, (:quote, #QuoteNode
                    :io
                  )), :UInt64)),
            (:line, 113, :none),
            (:return, (:call, :StackFrame, :func, :file, :line, (:call, (:curly, :Nullable, :LambdaInfo)), :from_c, :inlined, :pointer))
          )),
        (:line, 117, :none),
        (:macrocall, :(Core.@doc), "    lookup(pointer::Union{Ptr{Void}, UInt}) -> Vector{StackFrame}\n\nGiven a pointer to an execution context (usually generated by a call to `backtrace`), looks\nup stack frame context information. Returns an array of frame information for all functions\ninlined at that point, innermost function first.\n", (:function, (:call, :lookup, (:(::), :pointer, (:curly, :Ptr, :Void))), (:block,
              (:line, 125, :none),
              (:(=), :infos, (:ccall, (:quote, #QuoteNode
                    :jl_lookup_code_address
                  ), :Any, (:tuple, (:curly, :Ptr, :Void), :Cint), (:call, :-, :pointer, 1), false)),
              (:line, 126, :none),
              (:&&, (:call, :isempty, :infos), (:return, (:vect, (:call, :StackFrame, :empty_sym, :empty_sym, -1, (:call, (:curly, :Nullable, :LambdaInfo)), true, false, (:call, :convert, :UInt64, :pointer))))),
              (:line, 127, :none),
              (:(=), :res, (:call, (:curly, :Array, :StackFrame), (:call, :length, :infos))),
              (:line, 128, :none),
              (:for, (:(=), :i, (:(:), 1, (:call, :length, :infos))), (:block,
                  (:line, 129, :none),
                  (:(=), :info, (:ref, :infos, :i)),
                  (:line, 130, :none),
                  (:macrocall, Symbol("@assert"), (:call, :(==), (:call, :length, :info), 7)),
                  (:line, 131, :none),
                  (:(=), :li, (:if, (:call, :(===), (:ref, :info, 4), :nothing), (:call, (:curly, :Nullable, :LambdaInfo)), (:call, (:curly, :Nullable, :LambdaInfo), (:ref, :info, 4)))),
                  (:line, 132, :none),
                  (:(=), (:ref, :res, :i), (:call, :StackFrame, (:ref, :info, 1), (:ref, :info, 2), (:ref, :info, 3), :li, (:ref, :info, 5), (:ref, :info, 6), (:ref, :info, 7)))
                )),
              (:line, 134, :none),
              :res
            ))),
        (:line, 137, :none),
        (:(=), (:call, :lookup, (:(::), :pointer, :UInt)), (:block,
            (:line, 137, :none),
            (:call, :lookup, (:call, :convert, (:curly, :Ptr, :Void), :pointer))
          )),
        (:line, 139, :none),
        (:macrocall, :(Core.@doc), "    stacktrace([trace::Vector{Ptr{Void}},] [c_funcs::Bool=false]) -> StackTrace\n\nReturns a stack trace in the form of a vector of `StackFrame`s. (By default stacktrace\ndoesn't return C functions, but this can be enabled.) When called without specifying a\ntrace, `stacktrace` first calls `backtrace`.\n", (:function, (:call, :stacktrace, (:(::), :trace, (:curly, :Vector, (:curly, :Ptr, :Void))), (:kw, (:(::), :c_funcs, :Bool), false)), (:block,
              (:line, 147, :none),
              (:(=), :stack, (:(::), (:call, :vcat, (:call, :StackTrace), (:..., (:call, :map, :lookup, :trace))), :StackTrace)),
              (:line, 150, :none),
              (:if, (:call, :!, :c_funcs), (:block,
                  (:line, 151, :none),
                  (:call, :filter!, (:->, :frame, (:block,
                        (:line, 151, :none),
                        (:call, :!, (:., :frame, (:quote, #QuoteNode
                              :from_c
                            )))
                      )), :stack)
                )),
              (:line, 155, :none),
              (:call, :remove_frames!, :stack, (:quote, #QuoteNode
                  :stacktrace
                ))
            ))),
        (:line, 158, :none),
        (:(=), (:call, :stacktrace, (:kw, (:(::), :c_funcs, :Bool), false)), (:block,
            (:line, 158, :none),
            (:call, :stacktrace, (:call, :backtrace), :c_funcs)
          )),
        (:line, 160, :none),
        (:macrocall, :(Core.@doc), "    catch_stacktrace([c_funcs::Bool=false]) -> StackTrace\n\nReturns the stack trace for the most recent error thrown, rather than the current execution\ncontext.\n", (:(=), (:call, :catch_stacktrace, (:kw, (:(::), :c_funcs, :Bool), false)), (:block,
              (:line, 166, :none),
              (:call, :stacktrace, (:call, :catch_backtrace), :c_funcs)
            ))),
        (:line, 168, :none),
        (:macrocall, :(Core.@doc), "    remove_frames!(stack::StackTrace, name::Symbol)\n\nTakes a `StackTrace` (a vector of `StackFrames`) and a function name (a `Symbol`) and\nremoves the `StackFrame` specified by the function name from the `StackTrace` (also removing\nall frames above the specified function). Primarily used to remove `StackTraces` functions\nfrom the `StackTrace` prior to returning it.\n", (:function, (:call, :remove_frames!, (:(::), :stack, :StackTrace), (:(::), :name, :Symbol)), (:block,
              (:line, 177, :none),
              (:call, :splice!, :stack, (:(:), 1, (:call, :findlast, (:->, :frame, (:block,
                        (:line, 177, :none),
                        (:call, :(==), (:., :frame, (:quote, #QuoteNode
                              :func
                            )), :name)
                      )), :stack))),
              (:line, 178, :none),
              (:return, :stack)
            ))),
        (:line, 181, :none),
        (:function, (:call, :remove_frames!, (:(::), :stack, :StackTrace), (:(::), :names, (:curly, :Vector, :Symbol))), (:block,
            (:line, 182, :none),
            (:call, :splice!, :stack, (:(:), 1, (:call, :findlast, (:->, :frame, (:block,
                      (:line, 182, :none),
                      (:call, :in, (:., :frame, (:quote, #QuoteNode
                            :func
                          )), :names)
                    )), :stack))),
            (:line, 183, :none),
            (:return, :stack)
          )),
        (:line, 186, :none),
        (:function, (:call, :show_spec_linfo, (:(::), :io, :IO), (:(::), :frame, :StackFrame)), (:block,
            (:line, 187, :none),
            (:if, (:call, :isnull, (:., :frame, (:quote, #QuoteNode
                    :linfo
                  ))), (:block,
                (:line, 188, :none),
                (:if, (:call, :(===), (:., :frame, (:quote, #QuoteNode
                        :func
                      )), :empty_sym), (:block,
                    (:line, 189, :none),
                    (:macrocall, Symbol("@printf"), :io, "ip:%#x", (:., :frame, (:quote, #QuoteNode
                          :pointer
                        )))
                  ), (:block,
                    (:line, 191, :none),
                    (:call, :print, :io, (:., :frame, (:quote, #QuoteNode
                          :func
                        )))
                  ))
              ), (:block,
                (:line, 194, :none),
                (:(=), :linfo, (:call, :get, (:., :frame, (:quote, #QuoteNode
                        :linfo
                      )))),
                (:line, 195, :none),
                (:if, (:call, :isdefined, :linfo, (:quote, #QuoteNode
                      :def
                    )), (:block,
                    (:line, 196, :none),
                    (:call, (:., :Base, (:quote, #QuoteNode
                          :show_lambda_types
                        )), :io, :linfo)
                  ), (:block,
                    (:line, 198, :none),
                    (:call, (:., :Base, (:quote, #QuoteNode
                          :show
                        )), :io, :linfo)
                  ))
              ))
          )),
        (:line, 203, :none),
        (:function, (:call, :show, (:parameters, (:kw, (:(::), :full_path, :Bool), false)), (:(::), :io, :IO), (:(::), :frame, :StackFrame)), (:block,
            (:line, 204, :none),
            (:call, :print, :io, " in "),
            (:line, 205, :none),
            (:call, :show_spec_linfo, :io, :frame),
            (:line, 206, :none),
            (:if, (:call, :(!==), (:., :frame, (:quote, #QuoteNode
                    :file
                  )), :empty_sym), (:block,
                (:line, 207, :none),
                (:(=), :file_info, (:if, :full_path, (:call, :string, (:., :frame, (:quote, #QuoteNode
                          :file
                        ))), (:call, :basename, (:call, :string, (:., :frame, (:quote, #QuoteNode
                            :file
                          )))))),
                (:line, 208, :none),
                (:call, :print, :io, " at ", :file_info, ":"),
                (:line, 209, :none),
                (:if, (:call, :(>=), (:., :frame, (:quote, #QuoteNode
                        :line
                      )), 0), (:block,
                    (:line, 210, :none),
                    (:call, :print, :io, (:., :frame, (:quote, #QuoteNode
                          :line
                        )))
                  ), (:block,
                    (:line, 212, :none),
                    (:call, :print, :io, "?")
                  ))
              )),
            (:line, 215, :none),
            (:if, (:., :frame, (:quote, #QuoteNode
                  :inlined
                )), (:block,
                (:line, 216, :none),
                (:call, :print, :io, " [inlined]")
              ))
          ))
      ))
  ))