(:quote, (:block,
    (:line, 3, :none),
    (:module, false, :Base, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:using, :Core, :Intrinsics),
        (:line, 6, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_set_istopmod
          ), :Void, (:tuple, :Bool), true),
        (:line, 7, :none),
        (:(=), :include, (:., :Core, (:quote, #QuoteNode
              :include
            ))),
        (:line, 8, :none),
        (:call, :include, "coreio.jl"),
        (:line, 10, :none),
        (:(=), (:call, :eval, :x), (:block,
            (:line, 10, :none),
            (:call, (:., :Core, (:quote, #QuoteNode
                  :eval
                )), :Base, :x)
          )),
        (:line, 11, :none),
        (:(=), (:call, :eval, :m, :x), (:block,
            (:line, 11, :none),
            (:call, (:., :Core, (:quote, #QuoteNode
                  :eval
                )), :m, :x)
          )),
        (:line, 14, :none),
        (:toplevel, (:import, :Core, Symbol("@doc")), (:import, :Core, Symbol("@__doc__")), (:import, :Core, Symbol("@doc_str"))),
        (:line, 15, :none),
        (:if, (:call, :isdefined, :Core, (:quote, #QuoteNode
              :Inference
            )), (:block,
            (:line, 16, :none),
            (:import, :Core, :Inference, :CoreDocs),
            (:line, 17, :none),
            (:call, (:., :Core, (:quote, #QuoteNode
                  :atdoc!
                )), (:., :CoreDocs, (:quote, #QuoteNode
                  :docm
                )))
          )),
        (:line, 20, :none),
        (:call, :include, "exports.jl"),
        (:line, 22, :none),
        (:if, false, (:block,
            (:line, 26, :none),
            (:global, :show, :print, :println),
            (:line, 27, :none),
            (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
                (:line, 27, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :show
                    )), :io, :x)
              )),
            (:line, 28, :none),
            (:(=), (:call, :print, (:(::), :io, :IO), (:..., (:(::), :a, :ANY))), (:block,
                (:line, 28, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :print
                    )), :io, (:..., :a))
              )),
            (:line, 29, :none),
            (:(=), (:call, :println, (:(::), :io, :IO), (:..., (:(::), :x, :ANY))), (:block,
                (:line, 29, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :println
                    )), :io, (:..., :x))
              ))
          )),
        (:line, 33, :none),
        (:call, :include, "essentials.jl"),
        (:line, 34, :none),
        (:call, :include, "base.jl"),
        (:line, 35, :none),
        (:call, :include, "generator.jl"),
        (:line, 36, :none),
        (:call, :include, "reflection.jl"),
        (:line, 37, :none),
        (:call, :include, "options.jl"),
        (:line, 40, :none),
        (:call, :include, "promotion.jl"),
        (:line, 41, :none),
        (:call, :include, "tuple.jl"),
        (:line, 42, :none),
        (:call, :include, "range.jl"),
        (:line, 43, :none),
        (:call, :include, "expr.jl"),
        (:line, 44, :none),
        (:call, :include, "error.jl"),
        (:line, 47, :none),
        (:call, :include, "bool.jl"),
        (:line, 48, :none),
        (:call, :include, "number.jl"),
        (:line, 49, :none),
        (:call, :include, "int.jl"),
        (:line, 50, :none),
        (:call, :include, "operators.jl"),
        (:line, 51, :none),
        (:call, :include, "pointer.jl"),
        (:line, 52, :none),
        (:call, :include, "refpointer.jl"),
        (:line, 53, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, :T)), :T), :arg), (:block,
            (:line, 53, :none),
            (:(::), (:call, :convert, :T, :arg), :T)
          )),
        (:line, 54, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :VecElement, :T))), :T), :arg), (:block,
            (:line, 54, :none),
            (:call, (:curly, :VecElement, :T), (:call, :convert, :T, :arg))
          )),
        (:line, 55, :none),
        (:(=), (:call, (:curly, :convert, (:<:, :T, :VecElement)), (:(::), (:curly, :Type, :T)), :arg), (:block,
            (:line, 55, :none),
            (:call, :T, :arg)
          )),
        (:line, 56, :none),
        (:(=), (:call, (:curly, :convert, (:<:, :T, :VecElement)), (:(::), (:curly, :Type, :T)), (:(::), :arg, :T)), (:block,
            (:line, 56, :none),
            :arg
          )),
        (:line, 57, :none),
        (:call, :include, "checked.jl"),
        (:line, 58, :none),
        (:importall, :., :Checked),
        (:line, 61, :none),
        (:if, (:call, :!, (:call, :isdefined, :Core, (:quote, #QuoteNode
                :Inference
              ))), (:block,
            (:line, 62, :none),
            (:(=), (:call, :Symbol, (:(::), :s, :String)), (:block,
                (:line, 62, :none),
                (:call, :Symbol, (:., :s, (:quote, #QuoteNode
                      :data
                    )))
              )),
            (:line, 63, :none),
            (:(=), (:call, :Symbol, (:(::), :a, (:curly, :Array, :UInt8, 1))), (:block,
                (:line, 63, :none),
                (:ccall, (:quote, #QuoteNode
                    :jl_symbol_n
                  ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int32), :a, (:call, :length, :a))
              ))
          )),
        (:line, 67, :none),
        (:(=), (:call, :Symbol, (:..., :x)), (:block,
            (:line, 67, :none),
            (:call, :Symbol, (:call, :string, (:..., :x)))
          )),
        (:line, 70, :none),
        (:call, :include, "abstractarray.jl"),
        (:line, 71, :none),
        (:call, :include, "subarray.jl"),
        (:line, 72, :none),
        (:call, :include, "array.jl"),
        (:line, 75, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Array, :T))), :T), (:(::), :m, :Integer)), (:block,
            (:line, 75, :none),
            (:call, (:curly, :Array, :T, 1), (:call, :Int, :m))
          )),
        (:line, 76, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Array, :T))), :T), (:(::), :m, :Integer), (:(::), :n, :Integer)), (:block,
            (:line, 76, :none),
            (:call, (:curly, :Array, :T, 2), (:call, :Int, :m), (:call, :Int, :n))
          )),
        (:line, 77, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Array, :T))), :T), (:(::), :m, :Integer), (:(::), :n, :Integer), (:(::), :o, :Integer)), (:block,
            (:line, 77, :none),
            (:call, (:curly, :Array, :T, 3), (:call, :Int, :m), (:call, :Int, :n), (:call, :Int, :o))
          )),
        (:line, 78, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Array, :T))), :T), (:..., (:(::), :d, :Integer))), (:block,
            (:line, 78, :none),
            (:call, (:curly, :Array, :T), (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :d))
          )),
        (:line, 80, :none),
        (:(=), (:call, (:(::), (:curly, :Type, :Vector))), (:block,
            (:line, 80, :none),
            (:call, (:curly, :Array, :Any, 1), 0)
          )),
        (:line, 81, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Vector, :T))), :T), (:(::), :m, :Integer)), (:block,
            (:line, 81, :none),
            (:call, (:curly, :Array, :T, 1), (:call, :Int, :m))
          )),
        (:line, 82, :none),
        (:(=), (:call, (:(::), (:curly, :Type, :Vector)), (:(::), :m, :Integer)), (:block,
            (:line, 82, :none),
            (:call, (:curly, :Array, :Any, 1), (:call, :Int, :m))
          )),
        (:line, 83, :none),
        (:(=), (:call, (:(::), (:curly, :Type, :Matrix))), (:block,
            (:line, 83, :none),
            (:call, (:curly, :Array, :Any, 2), 0, 0)
          )),
        (:line, 84, :none),
        (:(=), (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Matrix, :T))), :T), (:(::), :m, :Integer), (:(::), :n, :Integer)), (:block,
            (:line, 84, :none),
            (:call, (:curly, :Matrix, :T), (:call, :Int, :m), (:call, :Int, :n))
          )),
        (:line, 85, :none),
        (:(=), (:call, (:(::), (:curly, :Type, :Matrix)), (:(::), :m, :Integer), (:(::), :n, :Integer)), (:block,
            (:line, 85, :none),
            (:call, (:curly, :Matrix, :Any), (:call, :Int, :m), (:call, :Int, :n))
          )),
        (:line, 88, :none),
        (:(=), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:..., (:(::), :d, :Integer))), (:block,
            (:line, 88, :none),
            (:call, :Array, :T, (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :d))
          )),
        (:line, 89, :none),
        (:(=), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer)), (:block,
            (:line, 89, :none),
            (:call, (:curly, :Array, :T, 1), (:call, :Int, :m))
          )),
        (:line, 90, :none),
        (:(=), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer), (:(::), :n, :Integer)), (:block,
            (:line, 90, :none),
            (:call, (:curly, :Array, :T, 2), (:call, :Int, :m), (:call, :Int, :n))
          )),
        (:line, 91, :none),
        (:(=), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer), (:(::), :n, :Integer), (:(::), :o, :Integer)), (:block,
            (:line, 91, :none),
            (:call, (:curly, :Array, :T, 3), (:call, :Int, :m), (:call, :Int, :n), (:call, :Int, :o))
          )),
        (:line, 94, :none),
        (:call, :include, "hashing.jl"),
        (:line, 95, :none),
        (:call, :include, "rounding.jl"),
        (:line, 96, :none),
        (:importall, :., :Rounding),
        (:line, 97, :none),
        (:call, :include, "float.jl"),
        (:line, 98, :none),
        (:call, :include, "complex.jl"),
        (:line, 99, :none),
        (:call, :include, "rational.jl"),
        (:line, 100, :none),
        (:call, :include, "multinverses.jl"),
        (:line, 101, :none),
        (:using, :., :MultiplicativeInverses),
        (:line, 102, :none),
        (:call, :include, "abstractarraymath.jl"),
        (:line, 103, :none),
        (:call, :include, "arraymath.jl"),
        (:line, 104, :none),
        (:call, :include, "float16.jl"),
        (:line, 107, :none),
        (:call, :include, "simdloop.jl"),
        (:line, 108, :none),
        (:importall, :., :SimdLoop),
        (:line, 111, :none),
        (:call, :include, "reduce.jl"),
        (:line, 114, :none),
        (:call, :include, "reshapedarray.jl"),
        (:line, 115, :none),
        (:call, :include, "bitarray.jl"),
        (:line, 116, :none),
        (:call, :include, "intset.jl"),
        (:line, 117, :none),
        (:call, :include, "dict.jl"),
        (:line, 118, :none),
        (:call, :include, "set.jl"),
        (:line, 119, :none),
        (:call, :include, "iterator.jl"),
        (:line, 122, :none),
        (:typealias, (:curly, :StridedReshapedArray, :T, :N, (:<:, :A, :DenseArray)), (:curly, :ReshapedArray, :T, :N, :A)),
        (:line, 123, :none),
        (:typealias, (:curly, :StridedArray, :T, :N, (:<:, :A, (:curly, :Union, :DenseArray, :StridedReshapedArray)), (:<:, :I, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :RangeIndex, :AbstractCartesianIndex))))), (:curly, :Union, (:curly, :DenseArray, :T, :N), (:curly, :SubArray, :T, :N, :A, :I), (:curly, :StridedReshapedArray, :T, :N))),
        (:line, 124, :none),
        (:typealias, (:curly, :StridedVector, :T, (:<:, :A, (:curly, :Union, :DenseArray, :StridedReshapedArray)), (:<:, :I, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :RangeIndex, :AbstractCartesianIndex))))), (:curly, :Union, (:curly, :DenseArray, :T, 1), (:curly, :SubArray, :T, 1, :A, :I), (:curly, :StridedReshapedArray, :T, 1))),
        (:line, 125, :none),
        (:typealias, (:curly, :StridedMatrix, :T, (:<:, :A, (:curly, :Union, :DenseArray, :StridedReshapedArray)), (:<:, :I, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :RangeIndex, :AbstractCartesianIndex))))), (:curly, :Union, (:curly, :DenseArray, :T, 2), (:curly, :SubArray, :T, 2, :A, :I), (:curly, :StridedReshapedArray, :T, 2))),
        (:line, 126, :none),
        (:typealias, (:curly, :StridedVecOrMat, :T), (:curly, :Union, (:curly, :StridedVector, :T), (:curly, :StridedMatrix, :T))),
        (:line, 129, :none),
        (:call, :include, (:call, :String, (:call, :vcat, (:if, (:call, :(>=), (:call, :length, (:., :Core, (:quote, #QuoteNode
                        :ARGS
                      ))), 2), (:., (:ref, (:., :Core, (:quote, #QuoteNode
                        :ARGS
                      )), 2), (:quote, #QuoteNode
                    :data
                  )), (:., "", (:quote, #QuoteNode
                    :data
                  ))), (:., "build_h.jl", (:quote, #QuoteNode
                  :data
                ))))),
        (:line, 130, :none),
        (:call, :include, (:call, :String, (:call, :vcat, (:if, (:call, :(>=), (:call, :length, (:., :Core, (:quote, #QuoteNode
                        :ARGS
                      ))), 2), (:., (:ref, (:., :Core, (:quote, #QuoteNode
                        :ARGS
                      )), 2), (:quote, #QuoteNode
                    :data
                  )), (:., "", (:quote, #QuoteNode
                    :data
                  ))), (:., "version_git.jl", (:quote, #QuoteNode
                  :data
                ))))),
        (:line, 131, :none),
        (:call, :include, "osutils.jl"),
        (:line, 132, :none),
        (:call, :include, "c.jl"),
        (:line, 133, :none),
        (:call, :include, "sysinfo.jl"),
        (:line, 135, :none),
        (:if, (:call, :!, (:call, :isdefined, :Core, (:quote, #QuoteNode
                :Inference
              ))), (:block,
            (:line, 136, :none),
            (:call, :include, "docs/core.jl"),
            (:line, 137, :none),
            (:call, (:., :Core, (:quote, #QuoteNode
                  :atdoc!
                )), (:., :CoreDocs, (:quote, #QuoteNode
                  :docm
                )))
          )),
        (:line, 141, :none),
        (:call, :include, "io.jl"),
        (:line, 142, :none),
        (:call, :include, "iostream.jl"),
        (:line, 143, :none),
        (:call, :include, "iobuffer.jl"),
        (:line, 146, :none),
        (:call, :include, "char.jl"),
        (:line, 147, :none),
        (:call, :include, "intfuncs.jl"),
        (:line, 148, :none),
        (:call, :include, "strings/strings.jl"),
        (:line, 149, :none),
        (:call, :include, "parse.jl"),
        (:line, 150, :none),
        (:call, :include, "shell.jl"),
        (:line, 151, :none),
        (:call, :include, "regex.jl"),
        (:line, 152, :none),
        (:call, :include, "show.jl"),
        (:line, 153, :none),
        (:call, :include, "base64.jl"),
        (:line, 154, :none),
        (:importall, :., :Base64),
        (:line, 157, :none),
        (:call, :include, "nullable.jl"),
        (:line, 160, :none),
        (:call, :include, "version.jl"),
        (:line, 163, :none),
        (:call, :include, "libc.jl"),
        (:line, 164, :none),
        (:toplevel, (:using, :., :Libc, :getpid), (:using, :., :Libc, :gethostname), (:using, :., :Libc, :time)),
        (:line, 165, :none),
        (:call, :include, "libdl.jl"),
        (:line, 166, :none),
        (:using, :., :Libdl, :DL_LOAD_PATH),
        (:line, 167, :none),
        (:call, :include, "env.jl"),
        (:line, 170, :none),
        (:call, :include, "libuv.jl"),
        (:line, 171, :none),
        (:call, :include, "event.jl"),
        (:line, 172, :none),
        (:call, :include, "task.jl"),
        (:line, 173, :none),
        (:call, :include, "lock.jl"),
        (:line, 174, :none),
        (:call, :include, "threads.jl"),
        (:line, 175, :none),
        (:call, :include, "weakkeydict.jl"),
        (:line, 178, :none),
        (:call, :include, "stream.jl"),
        (:line, 179, :none),
        (:call, :include, "socket.jl"),
        (:line, 180, :none),
        (:call, :include, "filesystem.jl"),
        (:line, 181, :none),
        (:importall, :., :Filesystem),
        (:line, 182, :none),
        (:call, :include, "process.jl"),
        (:line, 183, :none),
        (:call, :include, "multimedia.jl"),
        (:line, 184, :none),
        (:importall, :., :Multimedia),
        (:line, 185, :none),
        (:call, :include, "grisu/grisu.jl"),
        (:line, 186, :none),
        (:import, :., :Grisu, :print_shortest),
        (:line, 187, :none),
        (:call, :include, "methodshow.jl"),
        (:line, 190, :none),
        (:call, :include, "floatfuncs.jl"),
        (:line, 191, :none),
        (:call, :include, "math.jl"),
        (:line, 192, :none),
        (:importall, :., :Math),
        (:line, 193, :none),
        (:const, (:(=), :√, :sqrt)),
        (:line, 194, :none),
        (:const, (:(=), :∛, :cbrt)),
        (:line, 197, :none),
        (:call, :include, "cartesian.jl"),
        (:line, 198, :none),
        (:using, :., :Cartesian),
        (:line, 199, :none),
        (:call, :include, "multidimensional.jl"),
        (:line, 200, :none),
        (:call, :include, "permuteddimsarray.jl"),
        (:line, 201, :none),
        (:using, :., :PermutedDimsArrays),
        (:line, 203, :none),
        (:let, (:block,
            (:line, 204, :none),
            (:global, (:(=), :include, (:function, (:tuple, :path), (:block,
                    (:line, 205, :none),
                    (:(=), :prev, :SOURCE_PATH),
                    (:line, 206, :none),
                    (:(=), :path, (:call, :joinpath, (:call, :dirname, :prev), :path)),
                    (:line, 207, :none),
                    (:(=), :SOURCE_PATH, :path),
                    (:line, 208, :none),
                    (:call, (:., :Core, (:quote, #QuoteNode
                          :include
                        )), :path),
                    (:line, 209, :none),
                    (:(=), :SOURCE_PATH, :prev)
                  ))))
          ), (:(=), :SOURCE_PATH, "")),
        (:line, 214, :none),
        (:call, :include, "reducedim.jl"),
        (:line, 217, :none),
        (:call, :include, "ordering.jl"),
        (:line, 218, :none),
        (:importall, :., :Order),
        (:line, 219, :none),
        (:call, :include, "collections.jl"),
        (:line, 222, :none),
        (:call, :include, "sort.jl"),
        (:line, 223, :none),
        (:importall, :., :Sort),
        (:line, 225, :none),
        (:function, :deepcopy_internal),
        (:line, 228, :none),
        (:call, :include, "gmp.jl"),
        (:line, 229, :none),
        (:importall, :., :GMP),
        (:line, 230, :none),
        (:call, :include, "mpfr.jl"),
        (:line, 231, :none),
        (:importall, :., :MPFR),
        (:line, 232, :none),
        (:(=), (:call, :big, (:(::), :n, :Integer)), (:block,
            (:line, 232, :none),
            (:call, :convert, :BigInt, :n)
          )),
        (:line, 233, :none),
        (:(=), (:call, :big, (:(::), :x, :AbstractFloat)), (:block,
            (:line, 233, :none),
            (:call, :convert, :BigFloat, :x)
          )),
        (:line, 234, :none),
        (:(=), (:call, :big, (:(::), :q, :Rational)), (:block,
            (:line, 234, :none),
            (:call, ://, (:call, :big, (:call, :num, :q)), (:call, :big, (:call, :den, :q)))
          )),
        (:line, 236, :none),
        (:call, :include, "combinatorics.jl"),
        (:line, 239, :none),
        (:call, :include, "hashing2.jl"),
        (:line, 242, :none),
        (:call, :include, "dSFMT.jl"),
        (:line, 243, :none),
        (:call, :include, "random.jl"),
        (:line, 244, :none),
        (:importall, :., :Random),
        (:line, 247, :none),
        (:call, :include, "printf.jl"),
        (:line, 248, :none),
        (:importall, :., :Printf),
        (:line, 251, :none),
        (:call, :include, "meta.jl"),
        (:line, 254, :none),
        (:call, :include, "Enums.jl"),
        (:line, 255, :none),
        (:importall, :., :Enums),
        (:line, 258, :none),
        (:call, :include, "serialize.jl"),
        (:line, 259, :none),
        (:importall, :., :Serializer),
        (:line, 260, :none),
        (:call, :include, "channels.jl"),
        (:line, 261, :none),
        (:call, :include, "clusterserialize.jl"),
        (:line, 262, :none),
        (:call, :include, "multi.jl"),
        (:line, 263, :none),
        (:call, :include, "workerpool.jl"),
        (:line, 264, :none),
        (:call, :include, "pmap.jl"),
        (:line, 265, :none),
        (:call, :include, "managers.jl"),
        (:line, 266, :none),
        (:call, :include, "asyncmap.jl"),
        (:line, 269, :none),
        (:call, :include, "loading.jl"),
        (:line, 272, :none),
        (:call, :include, "mmap.jl"),
        (:line, 273, :none),
        (:import, :., :Mmap),
        (:line, 274, :none),
        (:call, :include, "sharedarray.jl"),
        (:line, 277, :none),
        (:call, :include, "datafmt.jl"),
        (:line, 278, :none),
        (:importall, :., :DataFmt),
        (:line, 279, :none),
        (:call, :include, "deepcopy.jl"),
        (:line, 280, :none),
        (:call, :include, "interactiveutil.jl"),
        (:line, 281, :none),
        (:call, :include, "replutil.jl"),
        (:line, 282, :none),
        (:call, :include, "test.jl"),
        (:line, 283, :none),
        (:call, :include, "i18n.jl"),
        (:line, 284, :none),
        (:using, :., :I18n),
        (:line, 287, :none),
        (:call, :include, "initdefs.jl"),
        (:line, 288, :none),
        (:call, :include, "Terminals.jl"),
        (:line, 289, :none),
        (:call, :include, "LineEdit.jl"),
        (:line, 290, :none),
        (:call, :include, "REPLCompletions.jl"),
        (:line, 291, :none),
        (:call, :include, "REPL.jl"),
        (:line, 292, :none),
        (:call, :include, "client.jl"),
        (:line, 295, :none),
        (:call, :include, "util.jl"),
        (:line, 298, :none),
        (:call, :include, "linalg/linalg.jl"),
        (:line, 299, :none),
        (:importall, :., :LinAlg),
        (:line, 300, :none),
        (:const, (:(=), :⋅, :dot)),
        (:line, 301, :none),
        (:const, (:(=), :×, :cross)),
        (:line, 302, :none),
        (:call, :include, "broadcast.jl"),
        (:line, 303, :none),
        (:importall, :., :Broadcast),
        (:line, 306, :none),
        (:call, :include, "statistics.jl"),
        (:line, 309, :none),
        (:call, :include, "irrationals.jl"),
        (:line, 312, :none),
        (:call, :include, "dft.jl"),
        (:line, 313, :none),
        (:importall, :., :DFT),
        (:line, 314, :none),
        (:call, :include, "dsp.jl"),
        (:line, 315, :none),
        (:importall, :., :DSP),
        (:line, 318, :none),
        (:call, :include, "quadgk.jl"),
        (:line, 319, :none),
        (:importall, :., :QuadGK),
        (:line, 322, :none),
        (:call, :include, "fastmath.jl"),
        (:line, 323, :none),
        (:importall, :., :FastMath),
        (:line, 326, :none),
        (:call, :include, "libgit2/libgit2.jl"),
        (:line, 329, :none),
        (:call, :include, "pkg/pkg.jl"),
        (:line, 332, :none),
        (:call, :include, "stacktraces.jl"),
        (:line, 333, :none),
        (:importall, :., :StackTraces),
        (:line, 336, :none),
        (:call, :include, "profile.jl"),
        (:line, 337, :none),
        (:importall, :., :Profile),
        (:line, 340, :none),
        (:call, :include, "dates/Dates.jl"),
        (:line, 341, :none),
        (:toplevel, (:import, :., :Dates, :Date), (:import, :., :Dates, :DateTime), (:import, :., :Dates, :now)),
        (:line, 344, :none),
        (:call, :include, "sparse/sparse.jl"),
        (:line, 345, :none),
        (:importall, :., :SparseArrays),
        (:line, 348, :none),
        (:call, :include, "threadcall.jl"),
        (:line, 351, :none),
        (:call, :include, "deprecated.jl"),
        (:line, 354, :none),
        (:call, :include, "docs/helpdb.jl"),
        (:line, 355, :none),
        (:call, :include, "docs/basedocs.jl"),
        (:line, 358, :none),
        (:call, :include, "markdown/Markdown.jl"),
        (:line, 359, :none),
        (:call, :include, "docs/Docs.jl"),
        (:line, 360, :none),
        (:toplevel, (:using, :., :Docs), (:using, :., :Markdown)),
        (:line, 361, :none),
        (:&&, (:call, :isdefined, :Core, (:quote, #QuoteNode
              :Inference
            )), (:call, (:., :Docs, (:quote, #QuoteNode
                :loaddocs
              )), (:., (:., (:., :Core, (:quote, #QuoteNode
                    :Inference
                  )), (:quote, #QuoteNode
                  :CoreDocs
                )), (:quote, #QuoteNode
                :DOCS
              )))),
        (:line, 363, :none),
        (:function, (:call, :__init__), (:block,
            (:line, 365, :none),
            (:call, :reinit_stdio),
            (:line, 366, :none),
            (:call, (:., :Multimedia, (:quote, #QuoteNode
                  :reinit_displays
                ))),
            (:line, 367, :none),
            (:call, :early_init),
            (:line, 368, :none),
            (:call, :init_load_path),
            (:line, 369, :none),
            (:call, :init_parallel),
            (:line, 370, :none),
            (:call, :init_threadcall)
          )),
        (:line, 373, :none),
        (:(=), :include, :include_from_node1),
        (:line, 374, :none),
        (:call, :include, "precompile.jl")
      )),
    (:line, 378, :none),
    (:using, :Base),
    (:line, 379, :none),
    (:importall, :Base, :Operators),
    (:line, 381, :none),
    (:&&, (:call, (:., :Base, (:quote, #QuoteNode
            :isfile
          )), "userimg.jl"), (:call, (:., :Base, (:quote, #QuoteNode
            :include
          )), "userimg.jl"))
  ))