(:quote, (:block,
    (:line, 3, :none),
    (:type, false, (:<:, (:curly, :Rational, (:<:, :T, :Integer)), :Real), (:block,
        (:line, 4, :none),
        (:(::), :num, :T),
        (:line, 5, :none),
        (:(::), :den, :T),
        (:line, 7, :none),
        (:function, (:call, :Rational, (:(::), :num, :Integer), (:(::), :den, :Integer)), (:block,
            (:line, 8, :none),
            (:&&, (:comparison, :num, :(==), :den, :(==), (:call, :zero, :T)), (:call, :throw, (:call, :ArgumentError, (:string, "invalid rational: zero(", :T, ")//zero(", :T, ")")))),
            (:line, 9, :none),
            (:(=), :g, (:if, (:call, :<, :den, 0), (:call, :-, (:call, :gcd, :den, :num)), (:call, :gcd, :den, :num))),
            (:line, 10, :none),
            (:call, :new, (:call, :div, :num, :g), (:call, :div, :den, :g))
          ))
      )),
    (:line, 13, :none),
    (:(=), (:call, (:curly, :Rational, (:<:, :T, :Integer)), (:(::), :n, :T), (:(::), :d, :T)), (:block,
        (:line, 13, :none),
        (:call, (:curly, :Rational, :T), :n, :d)
      )),
    (:line, 14, :none),
    (:(=), (:call, :Rational, (:(::), :n, :Integer), (:(::), :d, :Integer)), (:block,
        (:line, 14, :none),
        (:call, :Rational, (:..., (:call, :promote, :n, :d)))
      )),
    (:line, 15, :none),
    (:(=), (:call, :Rational, (:(::), :n, :Integer)), (:block,
        (:line, 15, :none),
        (:call, :Rational, :n, (:call, :one, :n))
      )),
    (:line, 17, :none),
    (:function, (:call, :divgcd, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
        (:line, 18, :none),
        (:(=), :g, (:call, :gcd, :x, :y)),
        (:line, 19, :none),
        (:tuple, (:call, :div, :x, :g), (:call, :div, :y, :g))
      )),
    (:line, 22, :none),
    (:(=), (:call, ://, (:(::), :n, :Integer), (:(::), :d, :Integer)), (:block,
        (:line, 22, :none),
        (:call, :Rational, :n, :d)
      )),
    (:line, 24, :none),
    (:function, (:call, ://, (:(::), :x, :Rational), (:(::), :y, :Integer)), (:block,
        (:line, 25, :none),
        (:(=), (:tuple, :xn, :yn), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                :num
              )), :y)),
        (:line, 26, :none),
        (:call, ://, :xn, (:call, :checked_mul, (:., :x, (:quote, #QuoteNode
                :den
              )), :yn))
      )),
    (:line, 28, :none),
    (:function, (:call, ://, (:(::), :x, :Integer), (:(::), :y, :Rational)), (:block,
        (:line, 29, :none),
        (:(=), (:tuple, :xn, :yn), (:call, :divgcd, :x, (:., :y, (:quote, #QuoteNode
                :num
              )))),
        (:line, 30, :none),
        (:call, ://, (:call, :checked_mul, :xn, (:., :y, (:quote, #QuoteNode
                :den
              ))), :yn)
      )),
    (:line, 32, :none),
    (:function, (:call, ://, (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 33, :none),
        (:(=), (:tuple, :xn, :yn), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :num
              )))),
        (:line, 34, :none),
        (:(=), (:tuple, :xd, :yd), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                :den
              )), (:., :y, (:quote, #QuoteNode
                :den
              )))),
        (:line, 35, :none),
        (:call, ://, (:call, :checked_mul, :xn, :yd), (:call, :checked_mul, :xd, :yn))
      )),
    (:line, 38, :none),
    (:(=), (:call, ://, (:(::), :x, :Complex), (:(::), :y, :Real)), (:block,
        (:line, 38, :none),
        (:call, :complex, (:call, ://, (:call, :real, :x), :y), (:call, ://, (:call, :imag, :x), :y))
      )),
    (:line, 39, :none),
    (:(=), (:call, ://, (:(::), :x, :Number), (:(::), :y, :Complex)), (:block,
        (:line, 39, :none),
        (:call, :*, :x, (:call, ://, (:', :y), (:call, :abs2, :y)))
      )),
    (:line, 42, :none),
    (:(=), (:call, ://, (:(::), :X, :AbstractArray), (:(::), :y, :Number)), (:block,
        (:line, 42, :none),
        (:call, :.//, :X, :y)
      )),
    (:line, 43, :none),
    (:(=), (:call, :.//, (:(::), :X, :AbstractArray), (:(::), :y, :Number)), (:block,
        (:line, 43, :none),
        (:call, :reshape, (:comprehension, (:generator, (:call, ://, :x, :y), (:(=), :x, :X))), (:call, :size, :X))
      )),
    (:line, 44, :none),
    (:(=), (:call, :.//, (:(::), :y, :Number), (:(::), :X, :AbstractArray)), (:block,
        (:line, 44, :none),
        (:call, :reshape, (:comprehension, (:generator, (:call, ://, :y, :x), (:(=), :x, :X))), (:call, :size, :X))
      )),
    (:line, 46, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :x, :Rational)), (:block,
        (:line, 47, :none),
        (:call, :show, :io, (:call, :num, :x)),
        (:line, 48, :none),
        (:call, :print, :io, "//"),
        (:line, 49, :none),
        (:call, :show, :io, (:call, :den, :x))
      )),
    (:line, 52, :none),
    (:function, (:call, (:curly, :read, (:<:, :T, :Integer)), (:(::), :s, :IO), (:(::), (:curly, :Type, (:curly, :Rational, :T)))), (:block,
        (:line, 53, :none),
        (:(=), :r, (:call, :read, :s, :T)),
        (:line, 54, :none),
        (:(=), :i, (:call, :read, :s, :T)),
        (:line, 55, :none),
        (:call, ://, :r, :i)
      )),
    (:line, 57, :none),
    (:function, (:call, :write, (:(::), :s, :IO), (:(::), :z, :Rational)), (:block,
        (:line, 58, :none),
        (:call, :write, :s, (:call, :num, :z), (:call, :den, :z))
      )),
    (:line, 61, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), :x, :Rational)), (:block,
        (:line, 61, :none),
        (:call, (:curly, :Rational, :T), (:call, :convert, :T, (:., :x, (:quote, #QuoteNode
                :num
              ))), (:call, :convert, :T, (:., :x, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 62, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), :x, :Integer)), (:block,
        (:line, 62, :none),
        (:call, (:curly, :Rational, :T), (:call, :convert, :T, :x), (:call, :convert, :T, 1))
      )),
    (:line, 64, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Rational)), (:(::), :x, :Rational)), (:block,
        (:line, 64, :none),
        :x
      )),
    (:line, 65, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Rational)), (:(::), :x, :Integer)), (:block,
        (:line, 65, :none),
        (:call, :convert, (:curly, :Rational, (:call, :typeof, :x)), :x)
      )),
    (:line, 67, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Bool)), (:(::), :x, :Rational)), (:block,
        (:line, 67, :none),
        (:if, (:call, :(==), :x, 0), false, (:if, (:call, :(==), :x, 1), true, (:call, :throw, (:call, :InexactError))))
      )),
    (:line, 68, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Rational)), (:block,
        (:line, 68, :none),
        (:if, (:call, :isinteger, :x), (:call, :convert, :T, (:., :x, (:quote, #QuoteNode
                :num
              ))), (:call, :throw, (:call, :InexactError)))
      )),
    (:line, 70, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Rational)), (:block,
        (:line, 70, :none),
        (:call, :/, (:call, :float, (:., :x, (:quote, #QuoteNode
                :num
              ))), (:call, :float, (:., :x, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 71, :none),
    (:function, (:call, (:curly, :convert, (:<:, :T, :AbstractFloat), :S), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :S))), (:block,
        (:line, 72, :none),
        (:(=), :P, (:call, :promote_type, :T, :S)),
        (:line, 73, :none),
        (:call, :convert, :T, (:call, :/, (:call, :convert, :P, (:., :x, (:quote, #QuoteNode
                  :num
                ))), (:call, :convert, :P, (:., :x, (:quote, #QuoteNode
                  :den
                )))))
      )),
    (:line, 76, :none),
    (:function, (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 77, :none),
        (:(=), :r, (:call, :rationalize, :T, :x, (:kw, :tol, 0))),
        (:line, 78, :none),
        (:||, (:call, :(==), :x, (:call, :convert, (:call, :typeof, :x), :r)), (:call, :throw, (:call, :InexactError))),
        (:line, 79, :none),
        :r
      )),
    (:line, 81, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Rational)), (:(::), :x, :Float64)), (:block,
        (:line, 81, :none),
        (:call, :convert, (:curly, :Rational, :Int64), :x)
      )),
    (:line, 82, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Rational)), (:(::), :x, :Float32)), (:block,
        (:line, 82, :none),
        (:call, :convert, (:curly, :Rational, :Int), :x)
      )),
    (:line, 84, :none),
    (:(=), (:call, (:curly, :big, (:<:, :T, :Integer)), (:(::), :z, (:curly, :Complex, (:curly, :Rational, :T)))), (:block,
        (:line, 84, :none),
        (:call, (:curly, :Complex, (:curly, :Rational, :BigInt)), :z)
      )),
    (:line, 85, :none),
    (:(=), (:call, (:curly, :big, (:<:, :T, :Integer), :N), (:(::), :x, (:curly, :AbstractArray, (:curly, :Complex, (:curly, :Rational, :T)), :N))), (:block,
        (:line, 85, :none),
        (:call, :convert, (:curly, :AbstractArray, (:curly, :Complex, (:curly, :Rational, :BigInt)), :N), :x)
      )),
    (:line, 87, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :Integer), (:<:, :S, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), (:curly, :Type, :S))), (:block,
        (:line, 87, :none),
        (:curly, :Rational, (:call, :promote_type, :T, :S))
      )),
    (:line, 88, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :Integer), (:<:, :S, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), (:curly, :Type, (:curly, :Rational, :S)))), (:block,
        (:line, 88, :none),
        (:curly, :Rational, (:call, :promote_type, :T, :S))
      )),
    (:line, 89, :none),
    (:(=), (:call, (:curly, :promote_rule, (:<:, :T, :Integer), (:<:, :S, :AbstractFloat)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), (:curly, :Type, :S))), (:block,
        (:line, 89, :none),
        (:call, :promote_type, :T, :S)
      )),
    (:line, 91, :none),
    (:(=), (:call, (:curly, :widen, :T), (:(::), (:curly, :Type, (:curly, :Rational, :T)))), (:block,
        (:line, 91, :none),
        (:curly, :Rational, (:call, :widen, :T))
      )),
    (:line, 93, :none),
    "    rationalize([T<:Integer=Int,] x; tol::Real=eps(x))\n\nApproximate floating point number `x` as a `Rational` number with components\nof the given integer type. The result will differ from `x` by no more than `tol`.\nIf `T` is not provided, it defaults to `Int`.\n\n```jldoctest\njulia> rationalize(5.6)\n28//5\n\njulia> a = rationalize(BigInt, 10.3)\n103//10\n\njulia> typeof(num(a))\nBigInt\n```\n",
    (:line, 111, :none),
    (:function, (:call, (:curly, :rationalize, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractFloat), (:(::), :tol, :Real)), (:block,
        (:line, 112, :none),
        (:if, (:call, :<, :tol, 0), (:block,
            (:line, 113, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "negative tolerance ", :tol)))
          )),
        (:line, 115, :none),
        (:&&, (:call, :isnan, :x), (:return, (:call, ://, (:call, :zero, :T), (:call, :zero, :T)))),
        (:line, 116, :none),
        (:&&, (:call, :isinf, :x), (:return, (:call, ://, (:if, (:call, :<, :x, 0), (:call, :-, (:call, :one, :T)), (:call, :one, :T)), (:call, :zero, :T)))),
        (:line, 118, :none),
        (:(=), (:tuple, :p, :q), (:tuple, (:if, (:call, :<, :x, 0), (:call, :-, (:call, :one, :T)), (:call, :one, :T)), (:call, :zero, :T))),
        (:line, 119, :none),
        (:(=), (:tuple, :pp, :qq), (:tuple, (:call, :zero, :T), (:call, :one, :T))),
        (:line, 121, :none),
        (:(=), :x, (:call, :abs, :x)),
        (:line, 122, :none),
        (:(=), :a, (:call, :trunc, :x)),
        (:line, 123, :none),
        (:(=), :r, (:call, :-, :x, :a)),
        (:line, 124, :none),
        (:(=), :y, (:call, :one, :x)),
        (:line, 126, :none),
        (:(=), :tolx, (:call, :oftype, :x, :tol)),
        (:line, 127, :none),
        (:(=), (:tuple, :nt, :t, :tt), (:tuple, :tolx, (:call, :zero, :tolx), :tolx)),
        (:line, 128, :none),
        (:(=), :ia, (:(=), :np, (:(=), :nq, (:call, :zero, :T)))),
        (:line, 132, :none),
        (:while, (:call, :>, :r, :nt), (:block,
            (:line, 133, :none),
            (:try, (:block,
                (:line, 134, :none),
                (:(=), :ia, (:call, :convert, :T, :a)),
                (:line, 136, :none),
                (:(=), :np, (:call, :checked_add, (:call, :checked_mul, :ia, :p), :pp)),
                (:line, 137, :none),
                (:(=), :nq, (:call, :checked_add, (:call, :checked_mul, :ia, :q), :qq)),
                (:line, 138, :none),
                (:(=), (:tuple, :p, :pp), (:tuple, :np, :p)),
                (:line, 139, :none),
                (:(=), (:tuple, :q, :qq), (:tuple, :nq, :q))
              ), :e, (:block,
                (:line, 141, :none),
                (:||, (:call, :isa, :e, :InexactError), (:||, (:call, :isa, :e, :OverflowError), (:call, :rethrow, :e))),
                (:line, 142, :none),
                (:return, (:call, ://, :p, :q))
              )),
            (:line, 148, :none),
            (:(=), (:tuple, :x, :y), (:tuple, :y, :r)),
            (:line, 149, :none),
            (:(=), (:tuple, :a, :r), (:call, :divrem, :x, :y)),
            (:line, 153, :none),
            (:(=), (:tuple, :t, :tt), (:tuple, :nt, :t)),
            (:line, 154, :none),
            (:(=), :nt, (:call, :+, (:call, :*, :a, :t), :tt))
          )),
        (:line, 159, :none),
        (:(=), :a, (:call, :cld, (:call, :-, :x, :tt), (:call, :+, :y, :t))),
        (:line, 160, :none),
        (:try, (:block,
            (:line, 161, :none),
            (:(=), :ia, (:call, :convert, :T, :a)),
            (:line, 162, :none),
            (:(=), :np, (:call, :checked_add, (:call, :checked_mul, :ia, :p), :pp)),
            (:line, 163, :none),
            (:(=), :nq, (:call, :checked_add, (:call, :checked_mul, :ia, :q), :qq)),
            (:line, 164, :none),
            (:return, (:call, ://, :np, :nq))
          ), :e, (:block,
            (:line, 166, :none),
            (:||, (:call, :isa, :e, :InexactError), (:||, (:call, :isa, :e, :OverflowError), (:call, :rethrow, :e))),
            (:line, 167, :none),
            (:return, (:call, ://, :p, :q))
          ))
      )),
    (:line, 170, :none),
    (:(=), (:call, (:curly, :rationalize, (:<:, :T, :Integer)), (:parameters, (:kw, (:(::), :tol, :Real), (:call, :eps, :x))), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 170, :none),
        (:(::), (:call, :rationalize, :T, :x, :tol), (:curly, :Rational, :T))
      )),
    (:line, 171, :none),
    (:(=), (:call, :rationalize, (:parameters, (:..., :kvs)), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 171, :none),
        (:call, :rationalize, (:parameters, (:..., :kvs)), :Int, :x)
      )),
    (:line, 173, :none),
    (:(=), (:call, :num, (:(::), :x, :Integer)), (:block,
        (:line, 173, :none),
        :x
      )),
    (:line, 174, :none),
    (:(=), (:call, :den, (:(::), :x, :Integer)), (:block,
        (:line, 174, :none),
        (:call, :one, :x)
      )),
    (:line, 175, :none),
    (:(=), (:call, :num, (:(::), :x, :Rational)), (:block,
        (:line, 175, :none),
        (:., :x, (:quote, #QuoteNode
            :num
          ))
      )),
    (:line, 176, :none),
    (:(=), (:call, :den, (:(::), :x, :Rational)), (:block,
        (:line, 176, :none),
        (:., :x, (:quote, #QuoteNode
            :den
          ))
      )),
    (:line, 178, :none),
    (:(=), (:call, :sign, (:(::), :x, :Rational)), (:block,
        (:line, 178, :none),
        (:call, :oftype, :x, (:call, :sign, (:., :x, (:quote, #QuoteNode
                :num
              ))))
      )),
    (:line, 179, :none),
    (:(=), (:call, :signbit, (:(::), :x, :Rational)), (:block,
        (:line, 179, :none),
        (:call, :signbit, (:., :x, (:quote, #QuoteNode
              :num
            )))
      )),
    (:line, 180, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Rational), (:(::), :y, :Real)), (:block,
        (:line, 180, :none),
        (:call, ://, (:call, :copysign, (:., :x, (:quote, #QuoteNode
                :num
              )), :y), (:., :x, (:quote, #QuoteNode
              :den
            )))
      )),
    (:line, 181, :none),
    (:(=), (:call, :copysign, (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 181, :none),
        (:call, ://, (:call, :copysign, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :num
              ))), (:., :x, (:quote, #QuoteNode
              :den
            )))
      )),
    (:line, 183, :none),
    (:(=), (:call, (:curly, :typemin, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T)))), (:block,
        (:line, 183, :none),
        (:call, ://, (:call, :-, (:call, :one, :T)), (:call, :zero, :T))
      )),
    (:line, 184, :none),
    (:(=), (:call, (:curly, :typemax, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T)))), (:block,
        (:line, 184, :none),
        (:call, ://, (:call, :one, :T), (:call, :zero, :T))
      )),
    (:line, 186, :none),
    (:(=), (:call, :isinteger, (:(::), :x, :Rational)), (:block,
        (:line, 186, :none),
        (:call, :(==), (:., :x, (:quote, #QuoteNode
              :den
            )), 1)
      )),
    (:line, 188, :none),
    (:(=), (:call, :-, (:(::), :x, :Rational)), (:block,
        (:line, 188, :none),
        (:call, ://, (:call, :-, (:., :x, (:quote, #QuoteNode
                :num
              ))), (:., :x, (:quote, #QuoteNode
              :den
            )))
      )),
    (:line, 189, :none),
    (:function, (:call, (:curly, :-, (:<:, :T, :Signed)), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 190, :none),
        (:&&, (:call, :(==), (:., :x, (:quote, #QuoteNode
                :num
              )), (:call, :typemin, :T)), (:call, :throw, (:call, :OverflowError))),
        (:line, 191, :none),
        (:call, ://, (:call, :-, (:., :x, (:quote, #QuoteNode
                :num
              ))), (:., :x, (:quote, #QuoteNode
              :den
            )))
      )),
    (:line, 193, :none),
    (:function, (:call, (:curly, :-, (:<:, :T, :Unsigned)), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 194, :none),
        (:&&, (:call, :(!=), (:., :x, (:quote, #QuoteNode
                :num
              )), (:call, :zero, :T)), (:call, :throw, (:call, :OverflowError))),
        (:line, 195, :none),
        :x
      )),
    (:line, 198, :none),
    (:for, (:(=), (:tuple, :op, :chop), (:tuple, (:tuple, (:quote, #QuoteNode
              :+
            ), (:quote, #QuoteNode
              :checked_add
            )), (:tuple, (:quote, #QuoteNode
              :-
            ), (:quote, #QuoteNode
              :checked_sub
            )), (:tuple, (:quote, #QuoteNode
              :rem
            ), (:quote, #QuoteNode
              :rem
            )), (:tuple, (:quote, #QuoteNode
              :mod
            ), (:quote, #QuoteNode
              :mod
            )))), (:block,
        (:line, 200, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 201, :none),
            (:function, (:call, (:$, :op), (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
                (:line, 202, :none),
                (:(=), (:tuple, :xd, :yd), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                        :den
                      )), (:., :y, (:quote, #QuoteNode
                        :den
                      )))),
                (:line, 203, :none),
                (:call, :Rational, (:call, (:$, :chop), (:call, :checked_mul, (:., :x, (:quote, #QuoteNode
                          :num
                        )), :yd), (:call, :checked_mul, (:., :y, (:quote, #QuoteNode
                          :num
                        )), :xd)), (:call, :checked_mul, (:., :x, (:quote, #QuoteNode
                        :den
                      )), :yd))
              ))
          ))
      )),
    (:line, 208, :none),
    (:function, (:call, :*, (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 209, :none),
        (:(=), (:tuple, :xn, :yd), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :den
              )))),
        (:line, 210, :none),
        (:(=), (:tuple, :xd, :yn), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                :den
              )), (:., :y, (:quote, #QuoteNode
                :num
              )))),
        (:line, 211, :none),
        (:call, ://, (:call, :checked_mul, :xn, :yn), (:call, :checked_mul, :xd, :yd))
      )),
    (:line, 213, :none),
    (:(=), (:call, :/, (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 213, :none),
        (:call, ://, :x, :y)
      )),
    (:line, 214, :none),
    (:(=), (:call, (:curly, :/, (:<:, :T, (:curly, :Union, :Integer, :Rational))), (:(::), :x, :Rational), (:(::), :y, (:curly, :Complex, :T))), (:block,
        (:line, 214, :none),
        (:call, ://, :x, :y)
      )),
    (:line, 216, :none),
    (:(=), (:call, :fma, (:(::), :x, :Rational), (:(::), :y, :Rational), (:(::), :z, :Rational)), (:block,
        (:line, 216, :none),
        (:call, :+, (:call, :*, :x, :y), :z)
      )),
    (:line, 218, :none),
    (:(=), (:call, :(==), (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 218, :none),
        (:call, :&, (:call, :(==), (:., :x, (:quote, #QuoteNode
                :den
              )), (:., :y, (:quote, #QuoteNode
                :den
              ))), (:call, :(==), (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :num
              ))))
      )),
    (:line, 219, :none),
    (:(=), (:call, :<, (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 219, :none),
        (:if, (:call, :(==), (:., :x, (:quote, #QuoteNode
                :den
              )), (:., :y, (:quote, #QuoteNode
                :den
              ))), (:call, :<, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :num
              ))), (:call, :<, (:call, :widemul, (:., :x, (:quote, #QuoteNode
                  :num
                )), (:., :y, (:quote, #QuoteNode
                  :den
                ))), (:call, :widemul, (:., :x, (:quote, #QuoteNode
                  :den
                )), (:., :y, (:quote, #QuoteNode
                  :num
                )))))
      )),
    (:line, 221, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
        (:line, 221, :none),
        (:if, (:call, :(==), (:., :x, (:quote, #QuoteNode
                :den
              )), (:., :y, (:quote, #QuoteNode
                :den
              ))), (:call, :(<=), (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :num
              ))), (:call, :(<=), (:call, :widemul, (:., :x, (:quote, #QuoteNode
                  :num
                )), (:., :y, (:quote, #QuoteNode
                  :den
                ))), (:call, :widemul, (:., :x, (:quote, #QuoteNode
                  :den
                )), (:., :y, (:quote, #QuoteNode
                  :num
                )))))
      )),
    (:line, 225, :none),
    (:(=), (:call, :(==), (:(::), :x, :Rational), (:(::), :y, :Integer)), (:block,
        (:line, 225, :none),
        (:call, :&, (:call, :(==), (:., :x, (:quote, #QuoteNode
                :den
              )), 1), (:call, :(==), (:., :x, (:quote, #QuoteNode
                :num
              )), :y))
      )),
    (:line, 226, :none),
    (:(=), (:call, :(==), (:(::), :x, :Integer), (:(::), :y, :Rational)), (:block,
        (:line, 226, :none),
        (:call, :(==), :y, :x)
      )),
    (:line, 227, :none),
    (:(=), (:call, :<, (:(::), :x, :Rational), (:(::), :y, :Integer)), (:block,
        (:line, 227, :none),
        (:call, :<, (:., :x, (:quote, #QuoteNode
              :num
            )), (:call, :widemul, (:., :x, (:quote, #QuoteNode
                :den
              )), :y))
      )),
    (:line, 228, :none),
    (:(=), (:call, :<, (:(::), :x, :Integer), (:(::), :y, :Rational)), (:block,
        (:line, 228, :none),
        (:call, :<, (:call, :widemul, :x, (:., :y, (:quote, #QuoteNode
                :den
              ))), (:., :y, (:quote, #QuoteNode
              :num
            )))
      )),
    (:line, 229, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Rational), (:(::), :y, :Integer)), (:block,
        (:line, 229, :none),
        (:call, :(<=), (:., :x, (:quote, #QuoteNode
              :num
            )), (:call, :widemul, (:., :x, (:quote, #QuoteNode
                :den
              )), :y))
      )),
    (:line, 230, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Integer), (:(::), :y, :Rational)), (:block,
        (:line, 230, :none),
        (:call, :(<=), (:call, :widemul, :x, (:., :y, (:quote, #QuoteNode
                :den
              ))), (:., :y, (:quote, #QuoteNode
              :num
            )))
      )),
    (:line, 232, :none),
    (:function, (:call, :(==), (:(::), :x, :AbstractFloat), (:(::), :q, :Rational)), (:block,
        (:line, 233, :none),
        (:if, (:call, :isfinite, :x), (:block,
            (:line, 234, :none),
            (:call, :&, (:call, :(==), (:call, :count_ones, (:., :q, (:quote, #QuoteNode
                      :den
                    ))), 1), (:call, :(==), (:call, :*, :x, (:., :q, (:quote, #QuoteNode
                      :den
                    ))), (:., :q, (:quote, #QuoteNode
                    :num
                  ))))
          ), (:block,
            (:line, 236, :none),
            (:call, :(==), :x, (:call, :/, (:., :q, (:quote, #QuoteNode
                    :num
                  )), (:., :q, (:quote, #QuoteNode
                    :den
                  ))))
          ))
      )),
    (:line, 240, :none),
    (:(=), (:call, :(==), (:(::), :q, :Rational), (:(::), :x, :AbstractFloat)), (:block,
        (:line, 240, :none),
        (:call, :(==), :x, :q)
      )),
    (:line, 242, :none),
    (:for, (:(=), :rel, (:tuple, (:quote, #QuoteNode
            :<
          ), (:quote, #QuoteNode
            :(<=)
          ), (:quote, #QuoteNode
            :cmp
          ))), (:block,
        (:line, 243, :none),
        (:for, (:(=), (:tuple, :Tx, :Ty), (:tuple, (:tuple, :Rational, :AbstractFloat), (:tuple, :AbstractFloat, :Rational))), (:block,
            (:line, 244, :none),
            (:macrocall, Symbol("@eval"), (:function, (:call, (:$, :rel), (:(::), :x, (:$, :Tx)), (:(::), :y, (:$, :Ty))), (:block,
                  (:line, 245, :none),
                  (:if, (:||, (:call, :isnan, :x), (:call, :isnan, :y)), (:block,
                      (:line, 246, :none),
                      (:$, (:if, (:call, :(==), :rel, (:quote, #QuoteNode
                              :cmp
                            )), (:quote, (:call, :throw, (:call, :DomainError))), (:quote, (:return, false))))
                    )),
                  (:line, 249, :none),
                  (:(=), (:tuple, :xn, :xp, :xd), (:call, :decompose, :x)),
                  (:line, 250, :none),
                  (:(=), (:tuple, :yn, :yp, :yd), (:call, :decompose, :y)),
                  (:line, 252, :none),
                  (:if, (:call, :<, :xd, 0), (:block,
                      (:line, 253, :none),
                      (:(=), :xn, (:call, :-, :xn)),
                      (:line, 254, :none),
                      (:(=), :xd, (:call, :-, :xd))
                    )),
                  (:line, 256, :none),
                  (:if, (:call, :<, :yd, 0), (:block,
                      (:line, 257, :none),
                      (:(=), :yn, (:call, :-, :yn)),
                      (:line, 258, :none),
                      (:(=), :yd, (:call, :-, :yd))
                    )),
                  (:line, 261, :none),
                  (:(=), (:tuple, :xc, :yc), (:tuple, (:call, :widemul, :xn, :yd), (:call, :widemul, :yn, :xd))),
                  (:line, 262, :none),
                  (:(=), (:tuple, :xs, :ys), (:tuple, (:call, :sign, :xc), (:call, :sign, :yc))),
                  (:line, 264, :none),
                  (:if, (:call, :(!=), :xs, :ys), (:block,
                      (:line, 265, :none),
                      (:return, (:call, (:$, :rel), :xs, :ys))
                    ), (:block,
                      (:line, 266, :none),
                      (:if, (:call, :(==), :xs, 0), (:block,
                          (:line, 268, :none),
                          (:return, (:call, (:$, :rel), :xn, :yn))
                        ))
                    )),
                  (:line, 271, :none),
                  (:(=), (:tuple, :xb, :yb), (:tuple, (:call, :+, (:call, :ndigits0z, :xc, 2), :xp), (:call, :+, (:call, :ndigits0z, :yc, 2), :yp))),
                  (:line, 273, :none),
                  (:if, (:call, :(==), :xb, :yb), (:block,
                      (:line, 274, :none),
                      (:(=), (:tuple, :xc, :yc), (:call, :promote, :xc, :yc)),
                      (:line, 275, :none),
                      (:if, (:call, :>, :xp, :yp), (:block,
                          (:line, 276, :none),
                          (:(=), :xc, (:call, :<<, :xc, (:call, :-, :xp, :yp)))
                        ), (:block,
                          (:line, 278, :none),
                          (:(=), :yc, (:call, :<<, :yc, (:call, :-, :yp, :xp)))
                        )),
                      (:line, 280, :none),
                      (:return, (:call, (:$, :rel), :xc, :yc))
                    ), (:block,
                      (:line, 282, :none),
                      (:return, (:if, (:call, :>, :xc, 0), (:call, (:$, :rel), :xb, :yb), (:call, (:$, :rel), :yb, :xb)))
                    ))
                )))
          ))
      )),
    (:line, 289, :none),
    (:(=), (:call, :(==), (:(::), :z, :Complex), (:(::), :x, :Rational)), (:block,
        (:line, 289, :none),
        (:call, :&, (:call, :isreal, :z), (:call, :(==), (:call, :real, :z), :x))
      )),
    (:line, 290, :none),
    (:(=), (:call, :(==), (:(::), :x, :Rational), (:(::), :z, :Complex)), (:block,
        (:line, 290, :none),
        (:call, :&, (:call, :isreal, :z), (:call, :(==), (:call, :real, :z), :x))
      )),
    (:line, 292, :none),
    (:for, (:(=), :op, (:tuple, (:quote, #QuoteNode
            :div
          ), (:quote, #QuoteNode
            :fld
          ), (:quote, #QuoteNode
            :cld
          ))), (:block,
        (:line, 293, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 294, :none),
            (:function, (:call, (:$, :op), (:(::), :x, :Rational), (:(::), :y, :Integer)), (:block,
                (:line, 295, :none),
                (:(=), (:tuple, :xn, :yn), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                        :num
                      )), :y)),
                (:line, 296, :none),
                (:call, (:$, :op), :xn, (:call, :checked_mul, (:., :x, (:quote, #QuoteNode
                        :den
                      )), :yn))
              )),
            (:line, 298, :none),
            (:function, (:call, (:$, :op), (:(::), :x, :Integer), (:(::), :y, :Rational)), (:block,
                (:line, 299, :none),
                (:(=), (:tuple, :xn, :yn), (:call, :divgcd, :x, (:., :y, (:quote, #QuoteNode
                        :num
                      )))),
                (:line, 300, :none),
                (:call, (:$, :op), (:call, :checked_mul, :xn, (:., :y, (:quote, #QuoteNode
                        :den
                      ))), :yn)
              )),
            (:line, 302, :none),
            (:function, (:call, (:$, :op), (:(::), :x, :Rational), (:(::), :y, :Rational)), (:block,
                (:line, 303, :none),
                (:(=), (:tuple, :xn, :yn), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                        :num
                      )), (:., :y, (:quote, #QuoteNode
                        :num
                      )))),
                (:line, 304, :none),
                (:(=), (:tuple, :xd, :yd), (:call, :divgcd, (:., :x, (:quote, #QuoteNode
                        :den
                      )), (:., :y, (:quote, #QuoteNode
                        :den
                      )))),
                (:line, 305, :none),
                (:call, (:$, :op), (:call, :checked_mul, :xn, :yd), (:call, :checked_mul, :xd, :yn))
              ))
          ))
      )),
    (:line, 310, :none),
    (:(=), (:call, (:curly, :trunc, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :Rational)), (:block,
        (:line, 310, :none),
        (:call, :convert, :T, (:call, :div, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :x, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 311, :none),
    (:(=), (:call, (:curly, :floor, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :Rational)), (:block,
        (:line, 311, :none),
        (:call, :convert, :T, (:call, :fld, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :x, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 312, :none),
    (:(=), (:call, (:curly, :ceil, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :Rational)), (:block,
        (:line, 312, :none),
        (:call, :convert, :T, (:call, :cld, (:., :x, (:quote, #QuoteNode
                :num
              )), (:., :x, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 315, :none),
    (:function, (:call, (:curly, :round, :T, :Tr), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Tr)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :Nearest
            )))), (:block,
        (:line, 316, :none),
        (:if, (:&&, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:<:, :T, :Integer)), (:block,
            (:line, 317, :none),
            (:call, :throw, (:call, :DivideError))
          ), (:block,
            (:line, 318, :none),
            (:if, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:block,
                (:line, 319, :none),
                (:return, (:call, :convert, :T, (:call, :copysign, (:call, ://, (:call, :one, :Tr), (:call, :zero, :Tr)), (:call, :num, :x))))
              ))
          )),
        (:line, 321, :none),
        (:(=), (:tuple, :q, :r), (:call, :divrem, (:call, :num, :x), (:call, :den, :x))),
        (:line, 322, :none),
        (:(=), :s, :q),
        (:line, 323, :none),
        (:if, (:call, :(>=), (:call, :abs, :r), (:call, :abs, (:call, :+, (:call, :>>, (:call, :+, (:call, :-, (:call, :den, :x), (:call, :copysign, (:call, :Tr, 4), (:call, :num, :x))), (:call, :one, :Tr), (:call, :iseven, :q)), 1), (:call, :copysign, (:call, :Tr, 2), (:call, :num, :x))))), (:block,
            (:line, 324, :none),
            (:+=, :s, (:call, :copysign, (:call, :one, :Tr), (:call, :num, :x)))
          )),
        (:line, 326, :none),
        (:call, :convert, :T, :s)
      )),
    (:line, 329, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :Rational)), (:block,
        (:line, 329, :none),
        (:call, :round, :T, :x, :RoundNearest)
      )),
    (:line, 331, :none),
    (:function, (:call, (:curly, :round, :T, :Tr), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Tr)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :NearestTiesAway
            )))), (:block,
        (:line, 332, :none),
        (:if, (:&&, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:<:, :T, :Integer)), (:block,
            (:line, 333, :none),
            (:call, :throw, (:call, :DivideError))
          ), (:block,
            (:line, 334, :none),
            (:if, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:block,
                (:line, 335, :none),
                (:return, (:call, :convert, :T, (:call, :copysign, (:call, ://, (:call, :one, :Tr), (:call, :zero, :Tr)), (:call, :num, :x))))
              ))
          )),
        (:line, 337, :none),
        (:(=), (:tuple, :q, :r), (:call, :divrem, (:call, :num, :x), (:call, :den, :x))),
        (:line, 338, :none),
        (:(=), :s, :q),
        (:line, 339, :none),
        (:if, (:call, :(>=), (:call, :abs, :r), (:call, :abs, (:call, :+, (:call, :>>, (:call, :+, (:call, :-, (:call, :den, :x), (:call, :copysign, (:call, :Tr, 4), (:call, :num, :x))), (:call, :one, :Tr)), 1), (:call, :copysign, (:call, :Tr, 2), (:call, :num, :x))))), (:block,
            (:line, 340, :none),
            (:+=, :s, (:call, :copysign, (:call, :one, :Tr), (:call, :num, :x)))
          )),
        (:line, 342, :none),
        (:call, :convert, :T, :s)
      )),
    (:line, 345, :none),
    (:function, (:call, (:curly, :round, :T, :Tr), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Tr)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :NearestTiesUp
            )))), (:block,
        (:line, 346, :none),
        (:if, (:&&, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:<:, :T, :Integer)), (:block,
            (:line, 347, :none),
            (:call, :throw, (:call, :DivideError))
          ), (:block,
            (:line, 348, :none),
            (:if, (:call, :(==), (:call, :den, :x), (:call, :zero, :Tr)), (:block,
                (:line, 349, :none),
                (:return, (:call, :convert, :T, (:call, :copysign, (:call, ://, (:call, :one, :Tr), (:call, :zero, :Tr)), (:call, :num, :x))))
              ))
          )),
        (:line, 351, :none),
        (:(=), (:tuple, :q, :r), (:call, :divrem, (:call, :num, :x), (:call, :den, :x))),
        (:line, 352, :none),
        (:(=), :s, :q),
        (:line, 353, :none),
        (:if, (:call, :(>=), (:call, :abs, :r), (:call, :abs, (:call, :+, (:call, :>>, (:call, :+, (:call, :-, (:call, :den, :x), (:call, :copysign, (:call, :Tr, 4), (:call, :num, :x))), (:call, :one, :Tr), (:call, :<, (:call, :num, :x), 0)), 1), (:call, :copysign, (:call, :Tr, 2), (:call, :num, :x))))), (:block,
            (:line, 354, :none),
            (:+=, :s, (:call, :copysign, (:call, :one, :Tr), (:call, :num, :x)))
          )),
        (:line, 356, :none),
        (:call, :convert, :T, :s)
      )),
    (:line, 359, :none),
    (:function, (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Bool))), (:block,
        (:line, 360, :none),
        (:if, (:&&, (:call, :(==), (:call, :den, :x), false), (:call, :issubtype, :T, (:curly, :Union, :Integer, :Bool))), (:block,
            (:line, 361, :none),
            (:call, :throw, (:call, :DivideError))
          )),
        (:line, 363, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 366, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Bool)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :Nearest
            )))), (:block,
        (:line, 366, :none),
        (:call, :round, :T, :x)
      )),
    (:line, 367, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Bool)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :NearestTiesAway
            )))), (:block,
        (:line, 367, :none),
        (:call, :round, :T, :x)
      )),
    (:line, 368, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Bool)), (:(::), (:curly, :RoundingMode, (:quote, #QuoteNode
              :NearestTiesUp
            )))), (:block,
        (:line, 368, :none),
        (:call, :round, :T, :x)
      )),
    (:line, 369, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Rational, :Bool)), (:(::), :RoundingMode)), (:block,
        (:line, 369, :none),
        (:call, :round, :T, :x)
      )),
    (:line, 371, :none),
    (:(=), (:call, (:curly, :trunc, :T), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 371, :none),
        (:call, :Rational, (:call, :trunc, :T, :x))
      )),
    (:line, 372, :none),
    (:(=), (:call, (:curly, :floor, :T), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 372, :none),
        (:call, :Rational, (:call, :floor, :T, :x))
      )),
    (:line, 373, :none),
    (:(=), (:call, (:curly, :ceil, :T), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 373, :none),
        (:call, :Rational, (:call, :ceil, :T, :x))
      )),
    (:line, 374, :none),
    (:(=), (:call, (:curly, :round, :T), (:(::), :x, (:curly, :Rational, :T))), (:block,
        (:line, 374, :none),
        (:call, :Rational, (:call, :round, :T, :x))
      )),
    (:line, 376, :none),
    (:function, (:call, :^, (:(::), :x, :Rational), (:(::), :n, :Integer)), (:block,
        (:line, 377, :none),
        (:if, (:call, :(>=), :n, 0), (:call, :power_by_squaring, :x, :n), (:call, :power_by_squaring, (:call, :inv, :x), (:call, :-, :n)))
      )),
    (:line, 380, :none),
    (:(=), (:call, :^, (:(::), :x, :Number), (:(::), :y, :Rational)), (:block,
        (:line, 380, :none),
        (:call, :^, :x, (:call, :/, (:., :y, (:quote, #QuoteNode
                :num
              )), (:., :y, (:quote, #QuoteNode
                :den
              ))))
      )),
    (:line, 381, :none),
    (:(=), (:call, (:curly, :^, (:<:, :T, :AbstractFloat)), (:(::), :x, :T), (:(::), :y, :Rational)), (:block,
        (:line, 381, :none),
        (:call, :^, :x, (:call, :convert, :T, :y))
      )),
    (:line, 382, :none),
    (:(=), (:call, (:curly, :^, (:<:, :T, :AbstractFloat)), (:(::), :x, (:curly, :Complex, :T)), (:(::), :y, :Rational)), (:block,
        (:line, 382, :none),
        (:call, :^, :x, (:call, :convert, :T, :y))
      )),
    (:line, 384, :none),
    (:(=), (:call, (:curly, :^, (:<:, :T, :Rational)), (:(::), :z, (:curly, :Complex, :T)), (:(::), :n, :Bool)), (:block,
        (:line, 384, :none),
        (:if, :n, :z, (:call, :one, :z))
      )),
    (:line, 385, :none),
    (:function, (:call, (:curly, :^, (:<:, :T, :Rational)), (:(::), :z, (:curly, :Complex, :T)), (:(::), :n, :Integer)), (:block,
        (:line, 386, :none),
        (:if, (:call, :(>=), :n, 0), (:call, :power_by_squaring, :z, :n), (:call, :power_by_squaring, (:call, :inv, :z), (:call, :-, :n)))
      ))
  ))