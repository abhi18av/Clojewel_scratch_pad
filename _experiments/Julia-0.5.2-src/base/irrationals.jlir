(:quote, (:block,
    (:line, 5, :none),
    (:type, false, (:<:, (:curly, :Irrational, :sym), :Real), (:block,
        (:line, 5, :none)
      )),
    (:line, 7, :none),
    (:(=), (:call, (:curly, :show, :sym), (:(::), :io, :IO), (:(::), :x, (:curly, :Irrational, :sym))), (:block,
        (:line, 7, :none),
        (:call, :print, :io, (:string, :sym, " = ", (:ref, (:call, :string, (:call, :float, :x)), (:(:), 1, 15)), "..."))
      )),
    (:line, 9, :none),
    (:(=), (:call, (:curly, :promote_rule, :s), (:(::), (:curly, :Type, (:curly, :Irrational, :s))), (:(::), (:curly, :Type, :Float32))), (:block,
        (:line, 9, :none),
        :Float32
      )),
    (:line, 10, :none),
    (:(=), (:call, (:curly, :promote_rule, :s, :t), (:(::), (:curly, :Type, (:curly, :Irrational, :s))), (:(::), (:curly, :Type, (:curly, :Irrational, :t)))), (:block,
        (:line, 10, :none),
        :Float64
      )),
    (:line, 11, :none),
    (:(=), (:call, (:curly, :promote_rule, :s, (:<:, :T, :Number)), (:(::), (:curly, :Type, (:curly, :Irrational, :s))), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 11, :none),
        (:call, :promote_type, :Float64, :T)
      )),
    (:line, 13, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :AbstractFloat)), (:(::), :x, :Irrational)), (:block,
        (:line, 13, :none),
        (:call, :Float64, :x)
      )),
    (:line, 14, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Float16)), (:(::), :x, :Irrational)), (:block,
        (:line, 14, :none),
        (:call, :Float16, (:call, :Float32, :x))
      )),
    (:line, 15, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Real)), (:(::), (:curly, :Type, (:curly, :Complex, :T))), (:(::), :x, :Irrational)), (:block,
        (:line, 15, :none),
        (:call, :convert, (:curly, :Complex, :T), (:call, :convert, :T, :x))
      )),
    (:line, 17, :none),
    (:macrocall, Symbol("@pure"), (:function, (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, (:curly, :Rational, :T))), (:(::), :x, :Irrational)), (:block,
          (:line, 18, :none),
          (:(=), :o, (:call, :precision, :BigFloat)),
          (:line, 19, :none),
          (:(=), :p, 256),
          (:line, 20, :none),
          (:while, true, (:block,
              (:line, 21, :none),
              (:call, :setprecision, :BigFloat, :p),
              (:line, 22, :none),
              (:(=), :bx, (:call, :BigFloat, :x)),
              (:line, 23, :none),
              (:(=), :r, (:call, :rationalize, :T, :bx, (:kw, :tol, 0))),
              (:line, 24, :none),
              (:if, (:call, :>, (:call, :abs, (:call, :-, (:call, :BigFloat, :r), :bx)), (:call, :eps, :bx)), (:block,
                  (:line, 25, :none),
                  (:call, :setprecision, :BigFloat, :o),
                  (:line, 26, :none),
                  (:return, :r)
                )),
              (:line, 28, :none),
              (:+=, :p, 32)
            ))
        ))),
    (:line, 31, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, (:curly, :Rational, :BigInt))), (:(::), :x, :Irrational)), (:block,
        (:line, 31, :none),
        (:call, :throw, (:call, :ArgumentError, "Cannot convert an Irrational to a Rational{BigInt}: use rationalize(Rational{BigInt}, x) instead"))
      )),
    (:line, 33, :none),
    (:macrocall, Symbol("@pure"), (:function, (:call, (:curly, (:(::), :t, (:curly, :Type, :T)), (:<:, :T, (:curly, :Union, :Float32, :Float64))), (:(::), :x, :Irrational), (:(::), :r, :RoundingMode)), (:block,
          (:line, 34, :none),
          (:call, :setprecision, (:->, (:tuple,), (:block,
                (:line, 35, :none),
                (:call, :T, (:call, :BigFloat, :x), :r)
              )), :BigFloat, 256)
        ))),
    (:line, 39, :none),
    (:(=), (:call, (:curly, :(==), :s), (:(::), (:curly, :Irrational, :s)), (:(::), (:curly, :Irrational, :s))), (:block,
        (:line, 39, :none),
        true
      )),
    (:line, 40, :none),
    (:(=), (:call, :(==), (:(::), :Irrational), (:(::), :Irrational)), (:block,
        (:line, 40, :none),
        false
      )),
    (:line, 43, :none),
    (:(=), (:call, :(==), (:(::), :x, :Irrational), (:(::), :y, :Real)), (:block,
        (:line, 43, :none),
        false
      )),
    (:line, 44, :none),
    (:(=), (:call, :(==), (:(::), :x, :Real), (:(::), :y, :Irrational)), (:block,
        (:line, 44, :none),
        false
      )),
    (:line, 47, :none),
    (:(=), (:call, :<, (:(::), :x, :Irrational), (:(::), :y, :Float64)), (:block,
        (:line, 47, :none),
        (:call, :(<=), (:call, :Float64, :x, :RoundUp), :y)
      )),
    (:line, 48, :none),
    (:(=), (:call, :<, (:(::), :x, :Float64), (:(::), :y, :Irrational)), (:block,
        (:line, 48, :none),
        (:call, :(<=), :x, (:call, :Float64, :y, :RoundDown))
      )),
    (:line, 49, :none),
    (:(=), (:call, :<, (:(::), :x, :Irrational), (:(::), :y, :Float32)), (:block,
        (:line, 49, :none),
        (:call, :(<=), (:call, :Float32, :x, :RoundUp), :y)
      )),
    (:line, 50, :none),
    (:(=), (:call, :<, (:(::), :x, :Float32), (:(::), :y, :Irrational)), (:block,
        (:line, 50, :none),
        (:call, :(<=), :x, (:call, :Float32, :y, :RoundDown))
      )),
    (:line, 51, :none),
    (:(=), (:call, :<, (:(::), :x, :Irrational), (:(::), :y, :Float16)), (:block,
        (:line, 51, :none),
        (:call, :(<=), (:call, :Float32, :x, :RoundUp), :y)
      )),
    (:line, 52, :none),
    (:(=), (:call, :<, (:(::), :x, :Float16), (:(::), :y, :Irrational)), (:block,
        (:line, 52, :none),
        (:call, :(<=), :x, (:call, :Float32, :y, :RoundDown))
      )),
    (:line, 53, :none),
    (:(=), (:call, :<, (:(::), :x, :Irrational), (:(::), :y, :BigFloat)), (:block,
        (:line, 53, :none),
        (:call, :setprecision, (:->, (:tuple,), (:block,
              (:line, 54, :none),
              (:call, :<, (:call, :big, :x), :y)
            )), (:call, :+, (:call, :precision, :y), 32))
      )),
    (:line, 56, :none),
    (:(=), (:call, :<, (:(::), :x, :BigFloat), (:(::), :y, :Irrational)), (:block,
        (:line, 56, :none),
        (:call, :setprecision, (:->, (:tuple,), (:block,
              (:line, 57, :none),
              (:call, :<, :x, (:call, :big, :y))
            )), (:call, :+, (:call, :precision, :x), 32))
      )),
    (:line, 60, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Irrational), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 60, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 61, :none),
    (:(=), (:call, :(<=), (:(::), :x, :AbstractFloat), (:(::), :y, :Irrational)), (:block,
        (:line, 61, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 64, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :<, :T), (:(::), :x, :Irrational), (:(::), :y, (:curly, :Rational, :T))), (:block,
          (:line, 65, :none),
          (:(=), :bx, (:call, :big, (:call, :x))),
          (:line, 66, :none),
          (:&&, (:call, :<, :bx, 0), (:&&, (:<:, :T, :Unsigned), (:return, true))),
          (:line, 67, :none),
          (:(=), :rx, (:call, :rationalize, :T, :bx, (:kw, :tol, 0))),
          (:line, 68, :none),
          (:if, (:call, :<, :rx, :bx), (:quote, (:call, :<, (:$, :rx), :y)), (:quote, (:call, :(<=), (:$, :rx), :y)))
        ))),
    (:line, 70, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :<, :T), (:(::), :x, (:curly, :Rational, :T)), (:(::), :y, :Irrational)), (:block,
          (:line, 71, :none),
          (:(=), :by, (:call, :big, (:call, :y))),
          (:line, 72, :none),
          (:&&, (:call, :<, :by, 0), (:&&, (:<:, :T, :Unsigned), (:return, false))),
          (:line, 73, :none),
          (:(=), :ry, (:call, :rationalize, :T, :by, (:kw, :tol, 0))),
          (:line, 74, :none),
          (:if, (:call, :<, :ry, :by), (:quote, (:call, :(<=), :x, (:$, :ry))), (:quote, (:call, :<, :x, (:$, :ry))))
        ))),
    (:line, 76, :none),
    (:(=), (:call, :<, (:(::), :x, :Irrational), (:(::), :y, (:curly, :Rational, :BigInt))), (:block,
        (:line, 76, :none),
        (:call, :<, (:call, :big, :x), :y)
      )),
    (:line, 77, :none),
    (:(=), (:call, :<, (:(::), :x, (:curly, :Rational, :BigInt)), (:(::), :y, :Irrational)), (:block,
        (:line, 77, :none),
        (:call, :<, :x, (:call, :big, :y))
      )),
    (:line, 79, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Irrational), (:(::), :y, :Rational)), (:block,
        (:line, 79, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 80, :none),
    (:(=), (:call, :(<=), (:(::), :x, :Rational), (:(::), :y, :Irrational)), (:block,
        (:line, 80, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 82, :none),
    (:(=), (:call, :isfinite, (:(::), :Irrational)), (:block,
        (:line, 82, :none),
        true
      )),
    (:line, 84, :none),
    (:(=), (:call, :hash, (:(::), :x, :Irrational), (:(::), :h, :UInt)), (:block,
        (:line, 84, :none),
        (:call, :-, (:call, :*, 3, (:call, :object_id, :x)), :h)
      )),
    (:line, 86, :none),
    (:(=), (:call, :-, (:(::), :x, :Irrational)), (:block,
        (:line, 86, :none),
        (:call, :-, (:call, :Float64, :x))
      )),
    (:line, 87, :none),
    (:for, (:(=), :op, (:ref, :Symbol, (:quote, #QuoteNode
            :+
          ), (:quote, #QuoteNode
            :-
          ), (:quote, #QuoteNode
            :*
          ), (:quote, #QuoteNode
            :/
          ), (:quote, #QuoteNode
            :^
          ))), (:block,
        (:line, 88, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, (:$, :op), (:(::), :x, :Irrational), (:(::), :y, :Irrational)), (:block,
              (:line, 88, :none),
              (:call, (:$, :op), (:call, :Float64, :x), (:call, :Float64, :y))
            )))
      )),
    (:line, 90, :none),
    (:(=), (:call, :*, (:(::), :x, :Bool), (:(::), :y, :Irrational)), (:block,
        (:line, 90, :none),
        (:call, :ifelse, :x, (:call, :Float64, :y), 0.0)
      )),
    (:line, 92, :none),
    (:macro, (:call, :irrational, :sym, :val, :def), (:block,
        (:line, 93, :none),
        (:(=), :esym, (:call, :esc, :sym)),
        (:line, 94, :none),
        (:(=), :qsym, (:call, :esc, (:call, :Expr, (:quote, #QuoteNode
                :quote
              ), :sym))),
        (:line, 95, :none),
        (:(=), :bigconvert, (:if, (:call, :isa, :def, :Symbol), (:quote, (:block,
                (:line, 96, :none),
                (:function, (:call, (:., :Base, (:quote, #QuoteNode
                        :convert
                      )), (:(::), (:curly, :Type, :BigFloat)), (:(::), (:curly, :Irrational, (:$, :qsym)))), (:block,
                    (:line, 97, :none),
                    (:(=), :c, (:call, :BigFloat)),
                    (:line, 98, :none),
                    (:ccall, (:tuple, (:$, (:call, :string, "mpfr_const_", :def)), (:quote, #QuoteNode
                          :libmpfr
                        )), :Cint, (:tuple, (:curly, :Ptr, :BigFloat), :Int32), (:&, :c), (:ref, (:., :MPFR, (:quote, #QuoteNode
                            :ROUNDING_MODE
                          )))),
                    (:line, 101, :none),
                    (:return, :c)
                  ))
              )), (:quote, (:block,
                (:line, 104, :none),
                (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                        :convert
                      )), (:(::), (:curly, :Type, :BigFloat)), (:(::), (:curly, :Irrational, (:$, :qsym)))), (:block,
                    (:line, 104, :none),
                    (:$, (:call, :esc, :def))
                  ))
              )))),
        (:line, 106, :none),
        (:quote, (:block,
            (:line, 107, :none),
            (:const, (:(=), (:$, :esym), (:call, (:curly, :Irrational, (:$, :qsym))))),
            (:line, 108, :none),
            (:$, :bigconvert),
            (:line, 109, :none),
            (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                    :convert
                  )), (:(::), (:curly, :Type, :Float64)), (:(::), (:curly, :Irrational, (:$, :qsym)))), (:block,
                (:line, 109, :none),
                (:$, :val)
              )),
            (:line, 110, :none),
            (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                    :convert
                  )), (:(::), (:curly, :Type, :Float32)), (:(::), (:curly, :Irrational, (:$, :qsym)))), (:block,
                (:line, 110, :none),
                (:$, (:call, :Float32, :val))
              )),
            (:line, 111, :none),
            (:macrocall, Symbol("@assert"), (:call, :isa, (:call, :big, (:$, :esym)), :BigFloat)),
            (:line, 112, :none),
            (:macrocall, Symbol("@assert"), (:call, :(==), (:call, :Float64, (:$, :esym)), (:call, :Float64, (:call, :big, (:$, :esym))))),
            (:line, 113, :none),
            (:macrocall, Symbol("@assert"), (:call, :(==), (:call, :Float32, (:$, :esym)), (:call, :Float32, (:call, :big, (:$, :esym)))))
          ))
      )),
    (:line, 117, :none),
    (:(=), (:call, :big, (:(::), :x, :Irrational)), (:block,
        (:line, 117, :none),
        (:call, :convert, :BigFloat, :x)
      )),
    (:line, 121, :none),
    (:macrocall, Symbol("@irrational"), :π, 3.141592653589793, :pi),
    (:line, 122, :none),
    (:macrocall, Symbol("@irrational"), :e, 2.718281828459045, (:call, :exp, (:call, :big, 1))),
    (:line, 123, :none),
    (:macrocall, Symbol("@irrational"), :γ, 0.5772156649015329, :euler),
    (:line, 124, :none),
    (:macrocall, Symbol("@irrational"), :catalan, 0.915965594177219, :catalan),
    (:line, 125, :none),
    (:macrocall, Symbol("@irrational"), :φ, 1.618033988749895, (:call, :/, (:call, :+, 1, (:call, :sqrt, (:call, :big, 5))), 2)),
    (:line, 128, :none),
    "    pi\n    π\n\nThe constant pi.\n",
    (:line, 134, :none),
    (:const, (:(=), :pi, :π)),
    (:line, 136, :none),
    "    e\n    eu\n\nThe constant e.\n",
    (:line, 142, :none),
    (:const, (:(=), :eu, :e)),
    (:line, 144, :none),
    "    γ\n    eulergamma\n\nEuler's constant.\n",
    (:line, 150, :none),
    (:const, (:(=), :eulergamma, :γ)),
    (:line, 152, :none),
    "    φ\n    golden\n\nThe golden ratio.\n",
    (:line, 158, :none),
    (:const, (:(=), :golden, :φ)),
    (:line, 160, :none),
    "    catalan\n\nCatalan's constant.\n",
    (:line, 165, :none),
    :catalan,
    (:line, 173, :none),
    (:for, (:(=), :T, (:tuple, :Irrational, :Rational, :Integer, :Number)), (:block,
        (:line, 174, :none),
        (:(=), (:call, :^, (:(::), (:curly, :Irrational, (:quote, #QuoteNode
                  :e
                ))), (:(::), :x, :T)), (:block,
            (:line, 174, :none),
            (:call, :exp, :x)
          ))
      )),
    (:line, 176, :none),
    (:for, (:(=), :T, (:tuple, :Range, :BitArray, :StridedArray, :AbstractArray)), (:block,
        (:line, 177, :none),
        (:(=), (:call, :.^, (:(::), (:curly, :Irrational, (:quote, #QuoteNode
                  :e
                ))), (:(::), :x, :T)), (:block,
            (:line, 177, :none),
            (:call, :exp, :x)
          ))
      )),
    (:line, 180, :none),
    (:(=), (:call, :log, (:(::), (:curly, :Irrational, (:quote, #QuoteNode
              :e
            )))), (:block,
        (:line, 180, :none),
        1
      )),
    (:line, 181, :none),
    (:(=), (:call, :log, (:(::), (:curly, :Irrational, (:quote, #QuoteNode
              :e
            ))), (:(::), :x, :Number)), (:block,
        (:line, 181, :none),
        (:call, :log, :x)
      )),
    (:line, 184, :none),
    (:function, (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Irrational)), (:block,
        (:line, 185, :none),
        (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(.*?)(=.*)\$"), (:call, :sprint, 0, :showcompact, :x, (:kw, :env, :io)))),
        (:line, 186, :none),
        (:if, (:call, :(===), :m, :nothing), (:tuple, (:call, :length, (:call, :sprint, 0, :showcompact, :x, (:kw, :env, :io))), 0), (:tuple, (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 1)), (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 2))))
      ))
  ))