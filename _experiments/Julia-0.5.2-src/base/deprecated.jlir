(:quote, (:block,
    (:line, 21, :none),
    (:macro, (:call, :deprecate, :old, :new), (:block,
        (:line, 22, :none),
        (:(=), :meta, (:call, :Expr, (:quote, #QuoteNode
              :meta
            ), (:quote, #QuoteNode
              :noinline
            ))),
        (:line, 23, :none),
        (:if, (:call, :isa, :old, :Symbol), (:block,
            (:line, 24, :none),
            (:(=), :oldname, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :old)),
            (:line, 25, :none),
            (:(=), :newname, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :new)),
            (:line, 26, :none),
            (:call, :Expr, (:quote, #QuoteNode
                :toplevel
              ), (:call, :Expr, (:quote, #QuoteNode
                  :export
                ), (:call, :esc, :old)), (:quote, (:function, (:call, (:$, (:call, :esc, :old)), (:..., :args)), (:block,
                    (:line, 29, :none),
                    (:$, :meta),
                    (:line, 30, :none),
                    (:call, :depwarn, (:call, :string, (:$, :oldname), " is deprecated, use ", (:$, :newname), " instead."), (:$, :oldname)),
                    (:line, 32, :none),
                    (:call, (:$, (:call, :esc, :new)), (:..., :args))
                  ))))
          ), (:block,
            (:line, 34, :none),
            (:if, (:&&, (:call, :isa, :old, :Expr), (:call, :(==), (:., :old, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :call
                  ))), (:block,
                (:line, 35, :none),
                (:call, :remove_linenums!, :new),
                (:line, 36, :none),
                (:(=), :oldcall, (:call, :sprint, (:->, :io, (:block,
                        (:line, 36, :none),
                        (:call, :show_unquoted, :io, :old)
                      )))),
                (:line, 37, :none),
                (:(=), :newcall, (:call, :sprint, (:->, :io, (:block,
                        (:line, 37, :none),
                        (:call, :show_unquoted, :io, :new)
                      )))),
                (:line, 38, :none),
                (:(=), :oldsym, (:if, (:call, :isa, (:ref, (:., :old, (:quote, #QuoteNode
                            :args
                          )), 1), :Symbol), (:block,
                      (:line, 39, :none),
                      (:ref, (:., :old, (:quote, #QuoteNode
                            :args
                          )), 1)
                    ), (:block,
                      (:line, 40, :none),
                      (:if, (:&&, (:call, :isa, (:ref, (:., :old, (:quote, #QuoteNode
                                  :args
                                )), 1), :Expr), (:call, :(==), (:., (:ref, (:., :old, (:quote, #QuoteNode
                                    :args
                                  )), 1), (:quote, #QuoteNode
                                :head
                              )), (:quote, #QuoteNode
                              :curly
                            ))), (:block,
                          (:line, 41, :none),
                          (:ref, (:., (:ref, (:., :old, (:quote, #QuoteNode
                                    :args
                                  )), 1), (:quote, #QuoteNode
                                :args
                              )), 1)
                        ), (:block,
                          (:line, 43, :none),
                          (:call, :error, "invalid usage of @deprecate")
                        ))
                    ))),
                (:line, 45, :none),
                (:(=), :oldname, (:call, :Expr, (:quote, #QuoteNode
                      :quote
                    ), :oldsym)),
                (:line, 46, :none),
                (:call, :Expr, (:quote, #QuoteNode
                    :toplevel
                  ), (:call, :Expr, (:quote, #QuoteNode
                      :export
                    ), (:call, :esc, :oldsym)), (:quote, (:(=), (:$, (:call, :esc, :old)), (:block,
                        (:line, 49, :none),
                        (:$, :meta),
                        (:line, 50, :none),
                        (:call, :depwarn, (:call, :string, (:$, :oldcall), " is deprecated, use ", (:$, :newcall), " instead."), (:$, :oldname)),
                        (:line, 52, :none),
                        (:$, (:call, :esc, :new))
                      ))))
              ), (:block,
                (:line, 55, :none),
                (:call, :error, "invalid usage of @deprecate")
              ))
          ))
      )),
    (:line, 59, :none),
    (:function, (:call, :depwarn, :msg, :funcsym), (:block,
        (:line, 60, :none),
        (:(=), :opts, (:call, :JLOptions)),
        (:line, 61, :none),
        (:if, (:call, :>, (:., :opts, (:quote, #QuoteNode
                :depwarn
              )), 0), (:block,
            (:line, 62, :none),
            (:(=), :ln, (:call, :Int, (:call, :unsafe_load, (:call, :cglobal, (:quote, #QuoteNode
                      :jl_lineno
                    ), :Cint)))),
            (:line, 63, :none),
            (:(=), :fn, (:call, :unsafe_string, (:call, :unsafe_load, (:call, :cglobal, (:quote, #QuoteNode
                      :jl_filename
                    ), (:curly, :Ptr, :Cchar))))),
            (:line, 64, :none),
            (:(=), :bt, (:call, :backtrace)),
            (:line, 65, :none),
            (:(=), :caller, (:call, :firstcaller, :bt, :funcsym)),
            (:line, 66, :none),
            (:if, (:call, :(==), (:., :opts, (:quote, #QuoteNode
                    :depwarn
                  )), 1), (:block,
                (:line, 67, :none),
                (:call, :warn, :msg, (:kw, :once, (:call, :(!=), :caller, :C_NULL)), (:kw, :key, :caller), (:kw, :bt, :bt), (:kw, :filename, :fn), (:kw, :lineno, :ln))
              ), (:block,
                (:line, 69, :none),
                (:if, (:call, :(==), (:., :opts, (:quote, #QuoteNode
                        :depwarn
                      )), 2), (:block,
                    (:line, 70, :none),
                    (:call, :throw, (:call, :ErrorException, :msg))
                  ))
              ))
          )),
        (:line, 73, :none),
        :nothing
      )),
    (:line, 76, :none),
    (:function, (:call, :firstcaller, (:(::), :bt, (:curly, :Array, (:curly, :Ptr, :Void), 1)), (:(::), :funcsym, :Symbol)), (:block,
        (:line, 78, :none),
        (:(=), :i, 1),
        (:line, 79, :none),
        (:while, (:call, :(<=), :i, (:call, :length, :bt)), (:block,
            (:line, 80, :none),
            (:(=), :lkups, (:call, (:., :StackTraces, (:quote, #QuoteNode
                    :lookup
                  )), (:ref, :bt, :i))),
            (:line, 81, :none),
            (:+=, :i, 1),
            (:line, 82, :none),
            (:for, (:(=), :lkup, :lkups), (:block,
                (:line, 83, :none),
                (:if, (:call, :(===), :lkup, (:., :StackTraces, (:quote, #QuoteNode
                        :UNKNOWN
                      ))), (:block,
                    (:line, 84, :none),
                    (:continue,)
                  )),
                (:line, 86, :none),
                (:if, (:call, :(==), (:., :lkup, (:quote, #QuoteNode
                        :func
                      )), :funcsym), (:block,
                    (:line, 87, :none),
                    (:macrocall, Symbol("@goto"), :found)
                  ))
              ))
          )),
        (:line, 91, :none),
        (:macrocall, Symbol("@label"), :found),
        (:line, 92, :none),
        (:if, (:call, :(<=), :i, (:call, :length, :bt)), (:block,
            (:line, 93, :none),
            (:return, (:ref, :bt, :i))
          )),
        (:line, 95, :none),
        (:return, :C_NULL)
      )),
    (:line, 98, :none),
    (:(=), (:call, :deprecate, (:(::), :s, :Symbol)), (:block,
        (:line, 98, :none),
        (:call, :deprecate, (:call, :current_module), :s)
      )),
    (:line, 99, :none),
    (:(=), (:call, :deprecate, (:(::), :m, :Module), (:(::), :s, :Symbol)), (:block,
        (:line, 99, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_deprecate_binding
          ), :Void, (:tuple, :Any, :Any), :m, :s)
      )),
    (:line, 101, :none),
    (:macro, (:call, :deprecate_binding, :old, :new), (:block,
        (:line, 102, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :toplevel
          ), (:call, :Expr, (:quote, #QuoteNode
              :export
            ), (:call, :esc, :old)), (:call, :Expr, (:quote, #QuoteNode
              :const
            ), (:call, :Expr, (:quote, #QuoteNode
                :(=)
              ), (:call, :esc, :old), (:call, :esc, :new))), (:call, :Expr, (:quote, #QuoteNode
              :call
            ), (:quote, #QuoteNode
              :deprecate
            ), (:call, :Expr, (:quote, #QuoteNode
                :quote
              ), :old)))
      )),
    (:line, 110, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :remotecall
          ), (:quote, #QuoteNode
            :remotecall_fetch
          ), (:quote, #QuoteNode
            :remotecall_wait
          ))), (:block,
        (:line, 111, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 112, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :w, :LocalProcess), (:(::), :f, :Function), (:..., :args)), (:call, (:$, :f), :f, (:(::), :w, :LocalProcess), (:..., :args))),
            (:line, 113, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :w, :Worker), (:(::), :f, :Function), (:..., :args)), (:call, (:$, :f), :f, (:(::), :w, :Worker), (:..., :args))),
            (:line, 114, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :id, :Integer), (:(::), :f, :Function), (:..., :args)), (:call, (:$, :f), :f, (:(::), :id, :Integer), (:..., :args)))
          ))
      )),
    (:line, 119, :none),
    (:macrocall, Symbol("@deprecate"), :with_bigfloat_precision, :setprecision),
    (:line, 120, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :set_bigfloat_precision, :prec), (:call, :setprecision, :prec)),
    (:line, 121, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :get_bigfloat_precision), (:call, :precision, :BigFloat)),
    (:line, 123, :none),
    (:macrocall, Symbol("@deprecate"), :set_rounding, :setrounding),
    (:line, 124, :none),
    (:macrocall, Symbol("@deprecate"), :with_rounding, :setrounding),
    (:line, 125, :none),
    (:macrocall, Symbol("@deprecate"), :get_rounding, :rounding),
    (:line, 128, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cov, (:parameters, (:kw, :corrected, true), (:kw, :mean, (:call, (:., :Base, (:quote, #QuoteNode
                  :mean
                )), :x))), (:(::), :x, :AbstractVector)), (:call, (:., :Base, (:quote, #QuoteNode
            :covm
          )), :x, :mean, :corrected)),
    (:line, 129, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cov, (:parameters, (:kw, :vardim, 1), (:kw, :corrected, true), (:kw, :mean, (:call, (:., :Base, (:quote, #QuoteNode
                  :mean
                )), :X, :vardim))), (:(::), :X, :AbstractMatrix)), (:call, (:., :Base, (:quote, #QuoteNode
            :covm
          )), :X, :mean, :vardim, :corrected)),
    (:line, 130, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cov, (:parameters, (:kw, :corrected, true), (:kw, :mean, (:tuple, (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :x), (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :y)))), (:(::), :x, :AbstractVector), (:(::), :y, :AbstractVector)), (:call, (:., :Base, (:quote, #QuoteNode
            :covm
          )), :x, (:ref, :mean, 1), :y, (:ref, :mean, 2), :corrected)),
    (:line, 131, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cov, (:parameters, (:kw, :vardim, 1), (:kw, :corrected, true), (:kw, :mean, (:tuple, (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :X, :vardim), (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :Y, :vardim)))), (:(::), :X, :AbstractVecOrMat), (:(::), :Y, :AbstractVecOrMat)), (:call, (:., :Base, (:quote, #QuoteNode
            :covm
          )), :X, (:ref, :mean, 1), :Y, (:ref, :mean, 2), :vardim, :corrected)),
    (:line, 133, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cor, (:parameters, (:kw, :mean, (:call, (:., :Base, (:quote, #QuoteNode
                  :mean
                )), :x))), (:(::), :x, :AbstractVector)), (:call, (:., :Base, (:quote, #QuoteNode
            :corm
          )), :x, :mean)),
    (:line, 134, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cor, (:parameters, (:kw, :vardim, 1), (:kw, :mean, (:call, (:., :Base, (:quote, #QuoteNode
                  :mean
                )), :X, :vardim))), (:(::), :X, :AbstractMatrix)), (:call, (:., :Base, (:quote, #QuoteNode
            :corm
          )), :X, :mean, :vardim)),
    (:line, 135, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cor, (:parameters, (:kw, :mean, (:tuple, (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :x), (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :y)))), (:(::), :x, :AbstractVector), (:(::), :y, :AbstractVector)), (:call, (:., :Base, (:quote, #QuoteNode
            :corm
          )), :x, (:ref, :mean, 1), :y, (:ref, :mean, 2))),
    (:line, 136, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cor, (:parameters, (:kw, :vardim, 1), (:kw, :mean, (:tuple, (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :X, :vardim), (:call, (:., :Base, (:quote, #QuoteNode
                    :mean
                  )), :Y, :vardim)))), (:(::), :X, :AbstractVecOrMat), (:(::), :Y, :AbstractVecOrMat)), (:call, (:., :Base, (:quote, #QuoteNode
            :corm
          )), :X, (:ref, :mean, 1), :Y, (:ref, :mean, 2), :vardim)),
    (:line, 138, :none),
    (:macrocall, Symbol("@deprecate_binding"), :SparseMatrix, :SparseArrays),
    (:line, 141, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :A_ldiv_B!, (:(::), :A, :SparseMatrixCSC), (:(::), :B, :StridedVecOrMat)), (:call, :A_ldiv_B!, (:call, :factorize, :A), :B)),
    (:line, 143, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :chol, (:(::), :A, :Number), (:(::), (:curly, :Type, (:curly, :Val, (:quote, #QuoteNode
                :U
              ))))), (:call, :chol, :A)),
    (:line, 144, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :chol, (:(::), :A, :AbstractMatrix), (:(::), (:curly, :Type, (:curly, :Val, (:quote, #QuoteNode
                :U
              ))))), (:call, :chol, :A)),
    (:line, 145, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :chol, (:(::), :A, :Number), (:(::), (:curly, :Type, (:curly, :Val, (:quote, #QuoteNode
                :L
              ))))), (:call, :ctranspose, (:call, :chol, :A))),
    (:line, 146, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :chol, (:(::), :A, :AbstractMatrix), (:(::), (:curly, :Type, (:curly, :Val, (:quote, #QuoteNode
                :L
              ))))), (:call, :ctranspose, (:call, :chol, :A))),
    (:line, 152, :none),
    (:function, (:call, (:curly, :rem1, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 153, :none),
        (:call, :depwarn, "`rem1(x,y)` is discontinued, as it cannot be defined consistently for `x==0`. Rewrite the expression using `mod1` instead.", (:quote, #QuoteNode
            :rem1
          )),
        (:line, 154, :none),
        (:call, :+, (:call, :rem, (:call, :-, :x, 1), :y), 1)
      )),
    (:line, 156, :none),
    (:(=), (:call, :rem1, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 156, :none),
        (:call, :rem1, (:..., (:call, :promote, :x, :y)))
      )),
    (:line, 157, :none),
    (:export, :rem1),
    (:line, 161, :none),
    (:macrocall, Symbol("@deprecate_binding"), :FS, :Filesystem),
    (:line, 163, :none),
    (:(=), (:call, :isreadable, (:..., :path)), (:block,
        (:line, 163, :none),
        (:call, :isreadable, (:call, :stat, (:..., :path)))
      )),
    (:line, 164, :none),
    (:(=), (:call, :iswritable, (:..., :path)), (:block,
        (:line, 164, :none),
        (:call, :iswritable, (:call, :stat, (:..., :path)))
      )),
    (:line, 165, :none),
    (:(=), (:call, :isexecutable, (:..., :path)), (:block,
        (:line, 165, :none),
        (:call, :isexecutable, (:call, :stat, (:..., :path)))
      )),
    (:line, 166, :none),
    (:function, (:call, :isreadable, (:(::), :st, (:., :Filesystem, (:quote, #QuoteNode
              :StatStruct
            )))), (:block,
        (:line, 167, :none),
        (:call, :depwarn, "isreadable is deprecated as it implied that the file would actually be readable by the user; consider using `isfile` instead. see also the system man page for `access`", (:quote, #QuoteNode
            :isreadable
          )),
        (:line, 168, :none),
        (:return, (:call, :>, (:call, :&, (:., :st, (:quote, #QuoteNode
                  :mode
                )), 0x0124), 0))
      )),
    (:line, 170, :none),
    (:function, (:call, :iswritable, (:(::), :st, (:., :Filesystem, (:quote, #QuoteNode
              :StatStruct
            )))), (:block,
        (:line, 171, :none),
        (:call, :depwarn, "iswritable is deprecated as it implied that the file would actually be writable by the user; consider using `isfile` instead. see also the system man page for `access`", (:quote, #QuoteNode
            :iswritable
          )),
        (:line, 172, :none),
        (:return, (:call, :>, (:call, :&, (:., :st, (:quote, #QuoteNode
                  :mode
                )), 0x92), 0))
      )),
    (:line, 174, :none),
    (:function, (:call, :isexecutable, (:(::), :st, (:., :Filesystem, (:quote, #QuoteNode
              :StatStruct
            )))), (:block,
        (:line, 175, :none),
        (:call, :depwarn, "isexecutable is deprecated as it implied that the file would actually be executable by the user; consider using `isfile` instead. see also the system man page for `access`", (:quote, #QuoteNode
            :isexecutable
          )),
        (:line, 176, :none),
        (:return, (:call, :>, (:call, :&, (:., :st, (:quote, #QuoteNode
                  :mode
                )), 0x49), 0))
      )),
    (:line, 178, :none),
    (:export, :isreadable, :iswritable, :isexecutable),
    (:line, 180, :none),
    (:macrocall, Symbol("@deprecate"), :RemoteRef, :RemoteChannel),
    (:line, 182, :none),
    (:function, (:call, :tty_size), (:block,
        (:line, 183, :none),
        (:call, :depwarn, "tty_size is deprecated. use `displaysize(io)` as a replacement", (:quote, #QuoteNode
            :tty_size
          )),
        (:line, 184, :none),
        (:if, (:call, :isdefined, :Base, (:quote, #QuoteNode
              :active_repl
            )), (:block,
            (:line, 185, :none),
            (:(=), :os, (:call, (:., :REPL, (:quote, #QuoteNode
                    :outstream
                  )), (:., :Base, (:quote, #QuoteNode
                    :active_repl
                  )))),
            (:line, 186, :none),
            (:if, (:call, :isa, :os, (:., :Terminals, (:quote, #QuoteNode
                    :TTYTerminal
                  ))), (:block,
                (:line, 187, :none),
                (:return, (:call, :displaysize, :os))
              ))
          )),
        (:line, 190, :none),
        (:if, (:call, :isdefined, :Base, (:quote, #QuoteNode
              :STDOUT
            )), (:block,
            (:line, 191, :none),
            (:return, (:call, :displaysize, :STDOUT))
          )),
        (:line, 193, :none),
        (:return, (:call, :displaysize))
      )),
    (:line, 198, :none),
    (:for, (:(=), :deprecatedfunc, (:vect, (:quote, #QuoteNode
            :combinations
          ), (:quote, #QuoteNode
            :factorial
          ), (:quote, #QuoteNode
            :prevprod
          ), (:quote, #QuoteNode
            :levicivita
          ), (:quote, #QuoteNode
            :nthperm!
          ), (:quote, #QuoteNode
            :nthperm
          ), (:quote, #QuoteNode
            :parity
          ), (:quote, #QuoteNode
            :partitions
          ), (:quote, #QuoteNode
            :permutations
          ))), (:block,
        (:line, 200, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 201, :none),
            (:(=), (:call, (:$, :deprecatedfunc), (:..., :args)), (:block,
                (:line, 201, :none),
                (:call, :error, (:call, :string, (:$, :deprecatedfunc), :args, " has been moved to the package Combinatorics.jl.\n", "Run Pkg.add(\"Combinatorics\") to install Combinatorics on Julia v0.5-"))
              )),
            (:line, 204, :none),
            (:export, (:$, :deprecatedfunc))
          ))
      )),
    (:line, 209, :none),
    (:for, (:(=), :deprecatedfunc, (:vect, (:quote, #QuoteNode
            :isprime
          ), (:quote, #QuoteNode
            :primes
          ), (:quote, #QuoteNode
            :primesmask
          ), (:quote, #QuoteNode
            :factor
          ))), (:block,
        (:line, 210, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 211, :none),
            (:(=), (:call, (:$, :deprecatedfunc), (:..., :args)), (:block,
                (:line, 211, :none),
                (:call, :error, (:call, :string, (:$, :deprecatedfunc), :args, " has been moved to the package Primes.jl.\n", "Run Pkg.add(\"Primes\") to install Primes on Julia v0.5-"))
              )),
            (:line, 214, :none),
            (:export, (:$, :deprecatedfunc))
          ))
      )),
    (:line, 219, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :super, (:(::), :T, :DataType)), (:call, :supertype, :T)),
    (:line, 221, :none),
    (:function, (:call, :with_output_limit, :thk, (:kw, (:(::), :lim, :Bool), true)), (:block,
        (:line, 222, :none),
        (:call, :depwarn, "with_output_limit is deprecated. use `io = IOContext(io, :limit => lim)` as a replacement", (:quote, #QuoteNode
            :with_output_limit
          )),
        (:line, 223, :none),
        (:global, :_limit_output),
        (:line, 224, :none),
        (:(=), :last, :_limit_output),
        (:line, 225, :none),
        (:(=), :_limit_output, :lim),
        (:line, 226, :none),
        (:try, (:block,
            (:line, 227, :none),
            (:call, :thk)
          ), false, false, (:block,
            (:line, 229, :none),
            (:(=), :_limit_output, :last)
          ))
      )),
    (:line, 234, :none),
    (:macrocall, Symbol("@deprecate_binding"), :Coff_t, :Int64),
    (:line, 235, :none),
    (:macrocall, Symbol("@deprecate_binding"), :FileOffset, :Int64),
    (:line, 238, :none),
    (:macro, (:call, :boundscheck, :yesno, :blk), (:block,
        (:line, 239, :none),
        (:call, :depwarn, "The meaning of `@boundscheck` has changed. It now indicates that the provided code block performs bounds checking, and may be elided when inbounds.", (:call, :Symbol, "@boundscheck")),
        (:line, 240, :none),
        (:if, (:call, :(===), :yesno, true), (:block,
            (:line, 241, :none),
            (:quote, (:macrocall, Symbol("@inbounds"), (:$, (:call, :esc, :blk))))
          ))
      )),
    (:line, 246, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :parseip, (:(::), :str, :AbstractString)), (:call, :parse, :IPAddr, :str)),
    (:line, 249, :none),
    (:macrocall, Symbol("@deprecate"), :readall, :readstring),
    (:line, 250, :none),
    (:macrocall, Symbol("@deprecate"), :readbytes, :read),
    (:line, 252, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :field_offset, (:(::), :x, :DataType), :idx), (:call, :fieldoffset, :x, (:call, :+, :idx, 1))),
    (:line, 253, :none),
    (:macrocall, Symbol("@noinline"), (:function, (:call, :fieldoffsets, (:(::), :x, :DataType)), (:block,
          (:line, 254, :none),
          (:call, :depwarn, "fieldoffsets is deprecated. use `map(idx->fieldoffset(x, idx), 1:nfields(x))` instead", (:quote, #QuoteNode
              :fieldoffsets
            )),
          (:line, 255, :none),
          (:(=), :nf, (:call, :nfields, :x)),
          (:line, 256, :none),
          (:(=), :offsets, (:call, (:curly, :Array, :Int), :nf)),
          (:line, 257, :none),
          (:for, (:(=), :i, (:(:), 1, :nf)), (:block,
              (:line, 258, :none),
              (:(=), (:ref, :offsets, :i), (:call, :fieldoffset, :x, :i))
            )),
          (:line, 260, :none),
          (:return, :offsets)
        ))),
    (:line, 262, :none),
    (:export, :fieldoffsets),
    (:line, 265, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :write, (:(::), :io, :IO), (:(::), :p, :Ptr), (:(::), :nb, :Integer)), (:call, :unsafe_write, :io, :p, :nb)),
    (:line, 267, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isgeneric, :f), (:call, :isa, :f, :Function)),
    (:line, 270, :none),
    (:const, (:(=), :call, (:macrocall, Symbol("@eval"), (:function, (:tuple, (:parameters, (:..., :kw)), :f, (:..., :args)), (:block,
              (:line, 271, :none),
              (:$, (:call, :Expr, (:quote, #QuoteNode
                    :meta
                  ), (:quote, #QuoteNode
                    :noinline
                  ))),
              (:line, 272, :none),
              (:call, :depwarn, "call(f,args...) is deprecated, use f(args...) instead.", (:quote, #QuoteNode
                  :call
                )),
              (:line, 273, :none),
              (:call, :f, (:parameters, (:..., :kw)), (:..., :args))
            ))))),
    (:line, 275, :none),
    (:export, :call),
    (:line, 277, :none),
    (:macrocall, Symbol("@deprecate_binding"), :LambdaStaticData, :LambdaInfo),
    (:line, 280, :none),
    (:macrocall, Symbol("@deprecate"), :issym, :issymmetric),
    (:line, 283, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :scale, (:(::), :α, :Number), (:(::), :A, :AbstractArray)), (:call, :*, :α, :A)),
    (:line, 284, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :scale, (:(::), :A, :AbstractArray), (:(::), :α, :Number)), (:call, :*, :A, :α)),
    (:line, 285, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :scale, (:(::), :A, :AbstractMatrix), (:(::), :x, :AbstractVector)), (:call, :*, :A, (:call, :Diagonal, :x))),
    (:line, 286, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :scale, (:(::), :x, :AbstractVector), (:(::), :A, :AbstractMatrix)), (:call, :*, (:call, :Diagonal, :x), :A)),
    (:line, 289, :none),
    (:macrocall, Symbol("@deprecate_binding"), :SingleAsyncWork, :AsyncCondition),
    (:line, 292, :none),
    (:macrocall, Symbol("@deprecate"), :istext, :istextmime),
    (:line, 299, :none),
    (:typealias, (:curly, :Func, :N), :Function),
    (:line, 300, :none),
    (:call, :deprecate, (:quote, #QuoteNode
        :Func
      )),
    (:line, 301, :none),
    (:for, (:(=), (:tuple, :Fun, :func), (:vect, (:tuple, (:quote, #QuoteNode
              :IdFun
            ), (:quote, #QuoteNode
              :identity
            )), (:tuple, (:quote, #QuoteNode
              :AbsFun
            ), (:quote, #QuoteNode
              :abs
            )), (:tuple, (:quote, #QuoteNode
              :Abs2Fun
            ), (:quote, #QuoteNode
              :abs2
            )), (:tuple, (:quote, #QuoteNode
              :ExpFun
            ), (:quote, #QuoteNode
              :exp
            )), (:tuple, (:quote, #QuoteNode
              :LogFun
            ), (:quote, #QuoteNode
              :log
            )), (:tuple, (:quote, #QuoteNode
              :ConjFun
            ), (:quote, #QuoteNode
              :conj
            )), (:tuple, (:quote, #QuoteNode
              :AndFun
            ), (:quote, #QuoteNode
              :&
            )), (:tuple, (:quote, #QuoteNode
              :OrFun
            ), (:quote, #QuoteNode
              :|
            )), (:tuple, (:quote, #QuoteNode
              :XorFun
            ), (:quote, #QuoteNode
              :$
            )), (:tuple, (:quote, #QuoteNode
              :AddFun
            ), (:quote, #QuoteNode
              :+
            )), (:tuple, (:quote, #QuoteNode
              :DotAddFun
            ), (:quote, #QuoteNode
              :.+
            )), (:tuple, (:quote, #QuoteNode
              :SubFun
            ), (:quote, #QuoteNode
              :-
            )), (:tuple, (:quote, #QuoteNode
              :DotSubFun
            ), (:quote, #QuoteNode
              :.-
            )), (:tuple, (:quote, #QuoteNode
              :MulFun
            ), (:quote, #QuoteNode
              :*
            )), (:tuple, (:quote, #QuoteNode
              :DotMulFun
            ), (:quote, #QuoteNode
              :.*
            )), (:tuple, (:quote, #QuoteNode
              :RDivFun
            ), (:quote, #QuoteNode
              :/
            )), (:tuple, (:quote, #QuoteNode
              :DotRDivFun
            ), (:quote, #QuoteNode
              :./
            )), (:tuple, (:quote, #QuoteNode
              :LDivFun
            ), (:quote, #QuoteNode
              :\
            )), (:tuple, (:quote, #QuoteNode
              :IDivFun
            ), (:quote, #QuoteNode
              :div
            )), (:tuple, (:quote, #QuoteNode
              :DotIDivFun
            ), (:quote, #QuoteNode
              :.÷
            )), (:tuple, (:quote, #QuoteNode
              :ModFun
            ), (:quote, #QuoteNode
              :mod
            )), (:tuple, (:quote, #QuoteNode
              :RemFun
            ), (:quote, #QuoteNode
              :rem
            )), (:tuple, (:quote, #QuoteNode
              :DotRemFun
            ), (:quote, #QuoteNode
              :.%
            )), (:tuple, (:quote, #QuoteNode
              :PowFun
            ), (:quote, #QuoteNode
              :^
            )), (:tuple, (:quote, #QuoteNode
              :MaxFun
            ), (:quote, #QuoteNode
              :scalarmax
            )), (:tuple, (:quote, #QuoteNode
              :MinFun
            ), (:quote, #QuoteNode
              :scalarmin
            )), (:tuple, (:quote, #QuoteNode
              :LessFun
            ), (:quote, #QuoteNode
              :<
            )), (:tuple, (:quote, #QuoteNode
              :MoreFun
            ), (:quote, #QuoteNode
              :>
            )), (:tuple, (:quote, #QuoteNode
              :DotLSFun
            ), (:quote, #QuoteNode
              :.<<
            )), (:tuple, (:quote, #QuoteNode
              :DotRSFun
            ), (:quote, #QuoteNode
              :.>>
            )), (:tuple, (:quote, #QuoteNode
              :ElementwiseMaxFun
            ), (:quote, #QuoteNode
              :max
            )), (:tuple, (:quote, #QuoteNode
              :ElementwiseMinFun
            ), (:quote, #QuoteNode
              :min
            )), (:tuple, (:quote, #QuoteNode
              :ComplexFun
            ), (:quote, #QuoteNode
              :complex
            )), (:tuple, (:quote, #QuoteNode
              :DotFun
            ), (:quote, #QuoteNode
              :dot
            )))), (:block,
        (:line, 336, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 337, :none),
            (:macrocall, Symbol("@deprecate_binding"), (:$, :Fun), (:call, :typeof, (:$, :func))),
            (:line, 338, :none),
            (:(=), (:call, (:(::), (:curly, :Type, (:call, :typeof, (:$, :func))))), (:block,
                (:line, 338, :none),
                (:$, :func)
              ))
          ))
      )),
    (:line, 341, :none),
    (:macrocall, Symbol("@deprecate_binding"), :CentralizedAbs2Fun, (:., (:., (:call, :typeof, (:call, :centralizedabs2fun, 0)), (:quote, #QuoteNode
            :name
          )), (:quote, #QuoteNode
          :primary
        ))),
    (:line, 342, :none),
    (:(=), (:call, (:(::), (:curly, :Type, (:., (:., (:call, :typeof, (:call, :centralizedabs2fun, 0)), (:quote, #QuoteNode
                  :name
                )), (:quote, #QuoteNode
                :primary
              )))), (:(::), :m, :Number)), (:block,
        (:line, 342, :none),
        (:call, :centralizedabs2fun, :m)
      )),
    (:line, 343, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :specialized_unary, (:(::), :f, :Function)), :f),
    (:line, 344, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :specialized_binary, (:(::), :f, :Function)), :f),
    (:line, 345, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :specialized_bitwise_unary, (:(::), :f, :Function)), :f),
    (:line, 346, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :specialized_bitwise_binary, (:(::), :f, :Function)), :f),
    (:line, 348, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bitunpack, (:(::), :B, :BitArray)), (:call, :Array, :B)),
    (:line, 349, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bitpack, (:(::), :A, :AbstractArray)), (:call, :BitArray, :A)),
    (:line, 352, :none),
    (:macrocall, Symbol("@deprecate"), :xdump, :dump),
    (:line, 354, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :copy, (:(::), :x, :AbstractString)), (:call, :identity, :x)),
    (:line, 355, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :copy, (:(::), :x, :Tuple)), (:call, :identity, :x)),
    (:line, 357, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sprandbool, (:(::), :m, :Integer), (:(::), :n, :Integer), (:(::), :density, :AbstractFloat)), (:call, :sprand, :Bool, :m, :n, :density)),
    (:line, 358, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sprandbool, (:(::), :r, :AbstractRNG), (:(::), :m, :Integer), (:(::), :n, :Integer), (:(::), :density, :AbstractFloat)), (:call, :sprand, :r, :Bool, :m, :n, :density)),
    (:line, 359, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sprandbool, (:(::), :n, :Integer), (:(::), :density, :AbstractFloat)), (:call, :sprand, :Bool, :n, :density)),
    (:line, 360, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sprandbool, (:(::), :r, :AbstractRNG), (:(::), :n, :Integer), (:(::), :density, :AbstractFloat)), (:call, :sprand, :r, :Bool, :n, :density)),
    (:line, 361, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :sprand, :T), (:(::), :n, :Integer), (:(::), :density, :AbstractFloat), (:(::), (:curly, :Type, :T))), (:call, :sprand, :T, :n, :density)),
    (:line, 362, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :sprand, :T), (:(::), :r, :AbstractRNG), (:(::), :n, :Integer), (:(::), :density, :AbstractFloat), (:(::), (:curly, :Type, :T))), (:call, :sprand, :r, :T, :n, :density)),
    (:line, 365, :none),
    (:macrocall, Symbol("@deprecate"), :symbol, :Symbol),
    (:line, 371, :none),
    (:function, (:call, :broadcast, (:(::), :x, :Any), (:(::), :i, (:curly, :Union, :Integer, :Symbol))), (:block,
        (:line, 372, :none),
        (:call, :depwarn, "x.(i) is deprecated; use getfield(x, i) instead.", (:quote, #QuoteNode
            :broadcast
          )),
        (:line, 373, :none),
        (:call, :getfield, :x, :i)
      )),
    (:line, 376, :none),
    (:function, (:call, :broadcast, (:(::), :m, :Module), (:(::), :s, :Symbol)), (:block,
        (:line, 377, :none),
        (:(=), :S, (:call, :repr, :s)),
        (:line, 378, :none),
        (:call, :depwarn, (:string, :m, ".(", :S, ") is deprecated; use ", :m, ".", :S, " or getfield(", :m, ", ", :S, ") instead."), (:quote, #QuoteNode
            :broadcast
          )),
        (:line, 379, :none),
        (:call, :getfield, :m, :s)
      )),
    (:line, 384, :none),
    (:(=), (:call, :broadcast, (:(::), :f, :Function), (:(::), :i, :Integer)), (:block,
        (:line, 384, :none),
        (:call, :f, :i)
      )),
    (:line, 387, :none),
    (:macro, (:call, :ccallable, :def), (:block,
        (:line, 388, :none),
        (:call, :depwarn, "@ccallable requires a return type", (:call, :Symbol, "@ccallable")),
        (:line, 389, :none),
        (:if, (:&&, (:call, :isa, :def, :Expr), (:||, (:call, :(===), (:., :def, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :(=)
                )), (:call, :(===), (:., :def, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :function
                )))), (:block,
            (:line, 390, :none),
            (:(=), :sig, (:ref, (:., :def, (:quote, #QuoteNode
                    :args
                  )), 1)),
            (:line, 391, :none),
            (:if, (:call, :(===), (:., :sig, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :call
                )), (:block,
                (:line, 392, :none),
                (:(=), :name, (:ref, (:., :sig, (:quote, #QuoteNode
                        :args
                      )), 1)),
                (:line, 393, :none),
                (:(=), :at, (:call, :map, (:->, (:tuple, :a), (:block,
                        (:line, 394, :none),
                        (:if, (:&&, (:call, :isa, :a, :Expr), (:call, :(===), (:., :a, (:quote, #QuoteNode
                                  :head
                                )), (:quote, #QuoteNode
                                :(::)
                              ))), (:block,
                            (:line, 395, :none),
                            (:ref, (:., :a, (:quote, #QuoteNode
                                  :args
                                )), 2)
                          ), (:block,
                            (:line, 397, :none),
                            (:quote, #QuoteNode
                              :Any
                            )
                          ))
                      )), (:ref, (:., :sig, (:quote, #QuoteNode
                          :args
                        )), (:(:), 2, :end)))),
                (:line, 400, :none),
                (:return, (:quote, (:block,
                      (:line, 401, :none),
                      (:$, (:call, :esc, :def)),
                      (:line, 402, :none),
                      (:let, (:block,
                          (:line, 403, :none),
                          (:(=), :rt, (:call, :return_types, :name, :tt)),
                          (:line, 404, :none),
                          (:||, (:call, :(==), (:call, :length, :rt), 1), (:call, :error, "function not ccallable")),
                          (:line, 405, :none),
                          (:call, :ccallable, :name, (:ref, :rt, 1), :tt)
                        ), (:(=), :name, (:$, (:call, :esc, :name))), (:(=), :tt, (:$, (:call, :Expr, (:quote, #QuoteNode
                                :curly
                              ), (:quote, #QuoteNode
                                :Tuple
                              ), (:..., (:call, :map, :esc, :at))))))
                    )))
              ))
          )),
        (:line, 410, :none),
        (:call, :error, "expected method definition in @ccallable")
      )),
    (:line, 413, :none),
    (:macrocall, Symbol("@deprecate_binding"), :ASCIIString, :String),
    (:line, 414, :none),
    (:macrocall, Symbol("@deprecate_binding"), :UTF8String, :String),
    (:line, 415, :none),
    (:macrocall, Symbol("@deprecate_binding"), :ByteString, :String),
    (:line, 417, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :utf8, (:(::), :p, (:curly, :Ptr, :UInt8)), (:(::), :len, :Integer)), (:call, :unsafe_string, :p, :len)),
    (:line, 418, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :utf8, (:(::), :p, (:curly, :Ptr, :UInt8))), (:call, :unsafe_string, :p)),
    (:line, 419, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :utf8, (:(::), :v, (:curly, :Vector, :UInt8))), (:call, :String, :v)),
    (:line, 420, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :utf8, (:(::), :s, :AbstractString)), (:call, :String, :s)),
    (:line, 421, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :utf8, :x), (:call, :convert, :String, :x)),
    (:line, 423, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ascii, (:(::), :p, (:curly, :Ptr, :UInt8)), (:(::), :len, :Integer)), (:call, :ascii, (:call, :unsafe_string, :p, :len))),
    (:line, 424, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ascii, (:(::), :p, (:curly, :Ptr, :UInt8))), (:call, :ascii, (:call, :unsafe_string, :p))),
    (:line, 425, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ascii, (:(::), :v, (:curly, :Vector, :UInt8))), (:call, :ascii, (:call, :String, :v))),
    (:line, 426, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ascii, :x), (:call, :ascii, (:call, :convert, :String, :x))),
    (:line, 428, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:(::), :s, :Cstring)), (:call, :unsafe_string, :s)),
    (:line, 429, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:(::), :v, (:curly, :Vector, :UInt8))), (:call, :String, (:call, :copy, :v))),
    (:line, 430, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:(::), :io, (:., :Base, (:quote, #QuoteNode
              :AbstractIOBuffer
            )))), (:call, :String, :io)),
    (:line, 431, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:(::), :p, (:curly, :Union, (:curly, :Ptr, :Int8), (:curly, :Ptr, :UInt8)))), (:call, :unsafe_string, :p)),
    (:line, 432, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:(::), :p, (:curly, :Union, (:curly, :Ptr, :Int8), (:curly, :Ptr, :UInt8))), (:(::), :len, :Integer)), (:call, :unsafe_string, :p, :len)),
    (:line, 433, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :bytestring, (:..., (:(::), :s, :AbstractString))), (:call, :string, (:..., :s))),
    (:line, 434, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :String, (:(::), :s, :Cstring)), (:call, :unsafe_string, :s)),
    (:line, 435, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :String, (:(::), :p, (:curly, :Union, (:curly, :Ptr, :Int8), (:curly, :Ptr, :UInt8)))), (:call, :unsafe_string, :p)),
    (:line, 436, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :String, (:(::), :p, (:curly, :Union, (:curly, :Ptr, :Int8), (:curly, :Ptr, :UInt8))), (:(::), :len, :Integer)), (:call, :unsafe_string, :p, :len)),
    (:line, 438, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :convert, (:(::), (:curly, :Type, :String)), (:(::), :a, (:curly, :Vector, :UInt8)), (:(::), :invalids_as, :AbstractString)), (:let, (:block,
          (:line, 441, :none),
          (:(=), :l, (:call, :length, :a)),
          (:line, 442, :none),
          (:(=), :idx, 1),
          (:line, 443, :none),
          (:(=), :iscopy, false),
          (:line, 444, :none),
          (:while, (:call, :(<=), :idx, :l), (:block,
              (:line, 445, :none),
              (:if, (:call, :!, (:call, :is_valid_continuation, (:ref, :a, :idx))), (:block,
                  (:line, 446, :none),
                  (:(=), :nextidx, (:call, :+, :idx, 1, (:ref, :utf8_trailing, (:call, :+, (:ref, :a, :idx), 1)))),
                  (:line, 447, :none),
                  (:&&, (:call, :(<=), :nextidx, (:call, :+, :l, 1)), (:block,
                      (:(=), :idx, :nextidx),
                      (:continue,)
                    ))
                )),
              (:line, 449, :none),
              (:&&, (:call, :!, :iscopy), (:block,
                  (:(=), :a, (:call, :copy, :a)),
                  (:(=), :iscopy, true)
                )),
              (:line, 450, :none),
              (:(=), :endn, :idx),
              (:line, 451, :none),
              (:while, (:call, :(<=), :endn, :l), (:block,
                  (:line, 452, :none),
                  (:&&, (:call, :!, (:call, :is_valid_continuation, (:ref, :a, :endn))), (:break,)),
                  (:line, 453, :none),
                  (:+=, :endn, 1)
                )),
              (:line, 455, :none),
              (:&&, (:call, :>, :endn, :idx), (:-=, :endn, 1)),
              (:line, 456, :none),
              (:call, :splice!, :a, (:(:), :idx, :endn), (:., :invalids_as, (:quote, #QuoteNode
                    :data
                  ))),
              (:line, 457, :none),
              (:(=), :l, (:call, :length, :a))
            )),
          (:line, 459, :none),
          (:call, :String, :a)
        ), (:(=), :a, :a), (:(=), :invalids_as, :invalids_as))),
    (:line, 463, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :(==), (:(::), :x, :Char), (:(::), :y, :Integer)), (:call, :(==), (:call, :UInt32, :x), :y)),
    (:line, 464, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :(==), (:(::), :x, :Integer), (:(::), :y, :Char)), (:call, :(==), :x, (:call, :UInt32, :y))),
    (:line, 467, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isless, (:(::), :x, :Char), (:(::), :y, :Integer)), (:call, :<, (:call, :UInt32, :x), :y)),
    (:line, 468, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isless, (:(::), :x, :Integer), (:(::), :y, :Char)), (:call, :<, :x, (:call, :UInt32, :y))),
    (:line, 472, :none),
    (:macro, (:call, :windows, :qm, :ex), (:block,
        (:line, 473, :none),
        (:call, :depwarn, "`@windows` is deprecated, use `@static is_windows()` instead", (:call, :Symbol, "@windows")),
        (:line, 474, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 1)), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 2)))))
      )),
    (:line, 476, :none),
    (:macro, (:call, :unix, :qm, :ex), (:block,
        (:line, 477, :none),
        (:call, :depwarn, "`@unix` is deprecated, use `@static is_unix()` instead", (:call, :Symbol, "@unix")),
        (:line, 478, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_unix), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 1)), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 2)))))
      )),
    (:line, 480, :none),
    (:macro, (:call, :osx, :qm, :ex), (:block,
        (:line, 481, :none),
        (:call, :depwarn, "`@osx` is deprecated, use `@static is_apple()` instead", (:call, :Symbol, "@osx")),
        (:line, 482, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_apple), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 1)), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 2)))))
      )),
    (:line, 484, :none),
    (:macro, (:call, :linux, :qm, :ex), (:block,
        (:line, 485, :none),
        (:call, :depwarn, "`@linux` is deprecated, use `@static is_linux()` instead", (:call, :Symbol, "@linux")),
        (:line, 486, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_linux), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 1)), (:call, :esc, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 2)))))
      )),
    (:line, 488, :none),
    (:macro, (:call, :windows_only, :ex), (:block,
        (:line, 489, :none),
        (:call, :depwarn, "`@windows_only` is deprecated, use `@static if is_windows()` instead", (:call, :Symbol, "@windows_only")),
        (:line, 490, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:block,
                (:line, 490, :none),
                (:call, :esc, :ex)
              ))))
      )),
    (:line, 492, :none),
    (:macro, (:call, :unix_only, :ex), (:block,
        (:line, 493, :none),
        (:call, :depwarn, "`@unix_only` is deprecated, use `@static if is_unix()` instead", (:call, :Symbol, "@unix_only")),
        (:line, 494, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_unix), (:block,
                (:line, 494, :none),
                (:call, :esc, :ex)
              ))))
      )),
    (:line, 496, :none),
    (:macro, (:call, :osx_only, :ex), (:block,
        (:line, 497, :none),
        (:call, :depwarn, "`@osx_only` is deprecated, use `@static if is_apple()` instead", (:call, :Symbol, "@osx_only")),
        (:line, 498, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_apple), (:block,
                (:line, 498, :none),
                (:call, :esc, :ex)
              ))))
      )),
    (:line, 500, :none),
    (:macro, (:call, :linux_only, :ex), (:block,
        (:line, 501, :none),
        (:call, :depwarn, "`@linux_only` is deprecated, use `@static if is_linux()` instead", (:call, :Symbol, "@linux_only")),
        (:line, 502, :none),
        (:return, (:macrocall, Symbol("@static"), (:if, (:call, :is_linux), (:block,
                (:line, 502, :none),
                (:call, :esc, :ex)
              ))))
      )),
    (:line, 504, :none),
    (:export, Symbol("@windows"), Symbol("@unix"), Symbol("@osx"), Symbol("@linux"), Symbol("@windows_only"), Symbol("@unix_only"), Symbol("@osx_only"), Symbol("@linux_only")),
    (:line, 514, :none),
    (:export, :OS_NAME),
    (:line, 515, :none),
    (:const, (:(=), :OS_NAME, (:if, (:call, :(===), (:., :Sys, (:quote, #QuoteNode
                :KERNEL
              )), (:quote, #QuoteNode
              :NT
            )), (:block,
            (:line, 517, :none),
            (:quote, #QuoteNode
              :Windows
            )
          ), (:block,
            (:line, 519, :none),
            (:., :Sys, (:quote, #QuoteNode
                :KERNEL
              ))
          )))),
    (:line, 521, :none),
    (:call, :deprecate, (:quote, #QuoteNode
        :OS_NAME
      )),
    (:line, 523, :none),
    (:export, :CPU_CORES),
    (:line, 524, :none),
    (:function, (:call, :_set_CPU_CORES), (:block,
        (:line, 525, :none),
        (:const, (:global, (:(=), :CPU_CORES, (:., :Sys, (:quote, #QuoteNode
                  :CPU_CORES
                ))))),
        (:line, 526, :none),
        (:call, :deprecate, :Base, (:quote, #QuoteNode
            :CPU_CORES
          ))
      )),
    (:line, 528, :none),
    (:module, true, :Init_CPU_CORES, (:block,
        (:line, 528, :none),
        (:line, 529, :none),
        (:const, (:(=), :__init__, (:., :Base, (:quote, #QuoteNode
                :_set_CPU_CORES
              ))))
      )),
    (:line, 532, :none),
    (:macrocall, Symbol("@deprecate_binding"), :WORD_SIZE, (:., :Sys, (:quote, #QuoteNode
          :WORD_SIZE
        ))),
    (:line, 534, :none),
    (:macrocall, Symbol("@deprecate"), :showcompact_lim, :show),
    (:line, 535, :none),
    (:macrocall, Symbol("@deprecate_binding"), :writemime, :show),
    (:line, 537, :none),
    (:macrocall, Symbol("@deprecate"), :blas_set_num_threads, (:., :BLAS, (:quote, #QuoteNode
          :set_num_threads
        ))),
    (:line, 539, :none),
    (:macrocall, Symbol("@deprecate"), :print_escaped, :escape_string),
    (:line, 540, :none),
    (:macrocall, Symbol("@deprecate"), :print_unescaped, :unescape_string),
    (:line, 541, :none),
    (:macrocall, Symbol("@deprecate"), :print_joined, :join),
    (:line, 543, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :broadcast!_function, :f), (:->, (:tuple, :B, (:..., :As)), (:block,
          (:line, 543, :none),
          (:call, :broadcast!, :f, :B, (:..., :As))
        ))),
    (:line, 544, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :broadcast_function, :f), (:->, (:tuple, (:..., :As)), (:block,
          (:line, 544, :none),
          (:call, :broadcast, :f, (:..., :As))
        ))),
    (:line, 549, :none),
    (:export, :hist, :hist!, :hist2d, :hist2d!, :histrange),
    (:line, 551, :none),
    (:function, (:call, (:curly, :histrange, (:<:, :T, :AbstractFloat), :N), (:(::), :v, (:curly, :AbstractArray, :T, :N)), (:(::), :n, :Integer)), (:block,
        (:line, 552, :none),
        (:call, :depwarn, "histrange(...) is deprecated, use StatsBase.histrange(...) instead", (:quote, #QuoteNode
            :histrange
          )),
        (:line, 553, :none),
        (:(=), :nv, (:call, :length, :v)),
        (:line, 554, :none),
        (:if, (:&&, (:call, :(==), :nv, 0), (:call, :<, :n, 0)), (:block,
            (:line, 555, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "number of bins must be ≥ 0 for an empty array, got ", :n)))
          ), (:block,
            (:line, 556, :none),
            (:if, (:&&, (:call, :>, :nv, 0), (:call, :<, :n, 1)), (:block,
                (:line, 557, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "number of bins must be ≥ 1 for a non-empty array, got ", :n)))
              ))
          )),
        (:line, 559, :none),
        (:if, (:call, :(==), :nv, 0), (:block,
            (:line, 560, :none),
            (:return, (:(:), 0.0, 1.0, 0.0))
          )),
        (:line, 562, :none),
        (:(=), (:tuple, :lo, :hi), (:call, :extrema, :v)),
        (:line, 563, :none),
        (:if, (:call, :(==), :hi, :lo), (:block,
            (:line, 564, :none),
            (:(=), :step, 1.0)
          ), (:block,
            (:line, 566, :none),
            (:(=), :bw, (:call, :/, (:call, :-, :hi, :lo), :n)),
            (:line, 567, :none),
            (:(=), :e, (:call, :^, 10.0, (:call, :floor, (:call, :log10, :bw)))),
            (:line, 568, :none),
            (:(=), :r, (:call, :/, :bw, :e)),
            (:line, 569, :none),
            (:if, (:call, :(<=), :r, 2), (:block,
                (:line, 570, :none),
                (:(=), :step, (:call, :*, 2, :e))
              ), (:block,
                (:line, 571, :none),
                (:if, (:call, :(<=), :r, 5), (:block,
                    (:line, 572, :none),
                    (:(=), :step, (:call, :*, 5, :e))
                  ), (:block,
                    (:line, 574, :none),
                    (:(=), :step, (:call, :*, 10, :e))
                  ))
              ))
          )),
        (:line, 577, :none),
        (:(=), :start, (:call, :*, :step, (:call, :-, (:call, :ceil, (:call, :/, :lo, :step)), 1))),
        (:line, 578, :none),
        (:(=), :nm1, (:call, :ceil, :Int, (:call, :/, (:call, :-, :hi, :start), :step))),
        (:line, 579, :none),
        (:(:), :start, :step, (:call, :+, :start, (:call, :*, :nm1, :step)))
      )),
    (:line, 582, :none),
    (:function, (:call, (:curly, :histrange, (:<:, :T, :Integer), :N), (:(::), :v, (:curly, :AbstractArray, :T, :N)), (:(::), :n, :Integer)), (:block,
        (:line, 583, :none),
        (:call, :depwarn, "histrange(...) is deprecated, use StatsBase.histrange(...) instead", (:quote, #QuoteNode
            :histrange
          )),
        (:line, 584, :none),
        (:(=), :nv, (:call, :length, :v)),
        (:line, 585, :none),
        (:if, (:&&, (:call, :(==), :nv, 0), (:call, :<, :n, 0)), (:block,
            (:line, 586, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "number of bins must be ≥ 0 for an empty array, got ", :n)))
          ), (:block,
            (:line, 587, :none),
            (:if, (:&&, (:call, :>, :nv, 0), (:call, :<, :n, 1)), (:block,
                (:line, 588, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "number of bins must be ≥ 1 for a non-empty array, got ", :n)))
              ))
          )),
        (:line, 590, :none),
        (:if, (:call, :(==), :nv, 0), (:block,
            (:line, 591, :none),
            (:return, (:(:), 0, 1, 0))
          )),
        (:line, 593, :none),
        (:if, (:call, :(<=), :n, 0), (:block,
            (:line, 594, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "number of bins n=", :n, " must be positive")))
          )),
        (:line, 596, :none),
        (:(=), (:tuple, :lo, :hi), (:call, :extrema, :v)),
        (:line, 597, :none),
        (:if, (:call, :(==), :hi, :lo), (:block,
            (:line, 598, :none),
            (:(=), :step, 1)
          ), (:block,
            (:line, 600, :none),
            (:(=), :bw, (:call, :/, (:call, :-, (:call, :Float64, :hi), (:call, :Float64, :lo)), :n)),
            (:line, 601, :none),
            (:(=), :e, (:call, :^, 10.0, (:call, :max, 0, (:call, :floor, (:call, :log10, :bw))))),
            (:line, 602, :none),
            (:(=), :r, (:call, :/, :bw, :e)),
            (:line, 603, :none),
            (:if, (:call, :(<=), :r, 1), (:block,
                (:line, 604, :none),
                (:(=), :step, :e)
              ), (:block,
                (:line, 605, :none),
                (:if, (:call, :(<=), :r, 2), (:block,
                    (:line, 606, :none),
                    (:(=), :step, (:call, :*, 2, :e))
                  ), (:block,
                    (:line, 607, :none),
                    (:if, (:call, :(<=), :r, 5), (:block,
                        (:line, 608, :none),
                        (:(=), :step, (:call, :*, 5, :e))
                      ), (:block,
                        (:line, 610, :none),
                        (:(=), :step, (:call, :*, 10, :e))
                      ))
                  ))
              ))
          )),
        (:line, 613, :none),
        (:(=), :start, (:call, :*, :step, (:call, :-, (:call, :ceil, (:call, :/, :lo, :step)), 1))),
        (:line, 614, :none),
        (:(=), :nm1, (:call, :ceil, :Int, (:call, :/, (:call, :-, :hi, :start), :step))),
        (:line, 615, :none),
        (:(:), :start, :step, (:call, :+, :start, (:call, :*, :nm1, :step)))
      )),
    (:line, 619, :none),
    (:(=), (:call, :midpoints, (:(::), :r, :Range)), (:block,
        (:line, 619, :none),
        (:call, :+, (:ref, :r, (:(:), 1, (:call, :-, (:call, :length, :r), 1))), (:call, :*, 0.5, (:call, :step, :r)))
      )),
    (:line, 620, :none),
    (:(=), (:call, :midpoints, (:(::), :v, :AbstractVector)), (:block,
        (:line, 620, :none),
        (:comprehension, (:generator, (:call, :*, 0.5, (:call, :+, (:ref, :v, :i), (:ref, :v, (:call, :+, :i, 1)))), (:(=), :i, (:(:), 1, (:call, :-, (:call, :length, :v), 1)))))
      )),
    (:line, 623, :none),
    (:function, (:call, :sturges, :n), (:block,
        (:line, 624, :none),
        (:call, :depwarn, "sturges(n) is deprecated, use StatsBase.sturges(n) instead.", (:quote, #QuoteNode
            :sturges
          )),
        (:line, 625, :none),
        (:&&, (:call, :(==), :n, 0), (:return, (:call, :one, :n))),
        (:line, 626, :none),
        (:call, :+, (:call, :ceil, :Int, (:call, :log2, :n)), 1)
      )),
    (:line, 629, :none),
    (:function, (:call, (:curly, :hist!, :HT), (:parameters, (:kw, (:(::), :init, :Bool), true)), (:(::), :h, (:curly, :AbstractArray, :HT)), (:(::), :v, :AbstractVector), (:(::), :edg, :AbstractVector)), (:block,
        (:line, 630, :none),
        (:call, :depwarn, "hist(...) and hist!(...) are deprecated. Use fit(Histogram,...) in StatsBase.jl instead.", (:quote, #QuoteNode
            :hist!
          )),
        (:line, 631, :none),
        (:(=), :n, (:call, :-, (:call, :length, :edg), 1)),
        (:line, 632, :none),
        (:||, (:call, :(==), (:call, :length, :h), :n), (:call, :throw, (:call, :DimensionMismatch, "length(histogram) must equal length(edges) - 1"))),
        (:line, 633, :none),
        (:if, :init, (:block,
            (:line, 634, :none),
            (:call, :fill!, :h, (:call, :zero, :HT))
          )),
        (:line, 636, :none),
        (:for, (:(=), :x, :v), (:block,
            (:line, 637, :none),
            (:(=), :i, (:call, :-, (:call, :searchsortedfirst, :edg, :x), 1)),
            (:line, 638, :none),
            (:if, (:comparison, 1, :(<=), :i, :(<=), :n), (:block,
                (:line, 639, :none),
                (:+=, (:ref, :h, :i), 1)
              ))
          )),
        (:line, 642, :none),
        (:tuple, :edg, :h)
      )),
    (:line, 645, :none),
    (:(=), (:call, :hist, (:(::), :v, :AbstractVector), (:(::), :edg, :AbstractVector)), (:block,
        (:line, 645, :none),
        (:call, :hist!, (:call, (:curly, :Array, :Int, 1), (:call, :-, (:call, :length, :edg), 1)), :v, :edg)
      )),
    (:line, 646, :none),
    (:(=), (:call, :hist, (:(::), :v, :AbstractVector), (:(::), :n, :Integer)), (:block,
        (:line, 646, :none),
        (:call, :hist, :v, (:call, :histrange, :v, :n))
      )),
    (:line, 647, :none),
    (:(=), (:call, :hist, (:(::), :v, :AbstractVector)), (:block,
        (:line, 647, :none),
        (:call, :hist, :v, (:call, :sturges, (:call, :length, :v)))
      )),
    (:line, 649, :none),
    (:function, (:call, (:curly, :hist!, :HT), (:parameters, (:kw, (:(::), :init, :Bool), true)), (:(::), :H, (:curly, :AbstractArray, :HT, 2)), (:(::), :A, :AbstractMatrix), (:(::), :edg, :AbstractVector)), (:block,
        (:line, 650, :none),
        (:call, :depwarn, "hist(...) and hist!(...) are deprecated. Use fit(Histogram,...) in StatsBase.jl instead.", (:quote, #QuoteNode
            :hist!
          )),
        (:line, 652, :none),
        (:(=), (:tuple, :m, :n), (:call, :size, :A)),
        (:line, 653, :none),
        (:(=), :sH, (:call, :size, :H)),
        (:line, 654, :none),
        (:(=), :sE, (:tuple, (:call, :-, (:call, :length, :edg), 1), :n)),
        (:line, 655, :none),
        (:||, (:call, :(==), :sH, :sE), (:call, :throw, (:call, :DimensionMismatch, "incorrect size of histogram"))),
        (:line, 656, :none),
        (:if, :init, (:block,
            (:line, 657, :none),
            (:call, :fill!, :H, (:call, :zero, :HT))
          )),
        (:line, 659, :none),
        (:for, (:(=), :j, (:(:), 1, :n)), (:block,
            (:line, 660, :none),
            (:call, :hist!, (:call, :sub, :H, :(:), :j), (:call, :sub, :A, :(:), :j), :edg)
          )),
        (:line, 662, :none),
        (:tuple, :edg, :H)
      )),
    (:line, 665, :none),
    (:(=), (:call, :hist, (:(::), :A, :AbstractMatrix), (:(::), :edg, :AbstractVector)), (:block,
        (:line, 665, :none),
        (:call, :hist!, (:call, (:curly, :Array, :Int, 2), (:call, :-, (:call, :length, :edg), 1), (:call, :size, :A, 2)), :A, :edg)
      )),
    (:line, 666, :none),
    (:(=), (:call, :hist, (:(::), :A, :AbstractMatrix), (:(::), :n, :Integer)), (:block,
        (:line, 666, :none),
        (:call, :hist, :A, (:call, :histrange, :A, :n))
      )),
    (:line, 667, :none),
    (:(=), (:call, :hist, (:(::), :A, :AbstractMatrix)), (:block,
        (:line, 667, :none),
        (:call, :hist, :A, (:call, :sturges, (:call, :size, :A, 1)))
      )),
    (:line, 671, :none),
    (:function, (:call, (:curly, :hist2d!, :HT), (:parameters, (:kw, (:(::), :init, :Bool), true)), (:(::), :H, (:curly, :AbstractArray, :HT, 2)), (:(::), :v, :AbstractMatrix), (:(::), :edg1, :AbstractVector), (:(::), :edg2, :AbstractVector)), (:block,
        (:line, 673, :none),
        (:call, :depwarn, "hist2d!(...) and hist2d(...) are deprecated. Use fit(Histogram,...) in StatsBase.jl instead.", (:quote, #QuoteNode
            :hist2d!
          )),
        (:line, 675, :none),
        (:||, (:call, :(==), (:call, :size, :v, 2), 2), (:call, :throw, (:call, :DimensionMismatch, "hist2d requires an Nx2 matrix"))),
        (:line, 676, :none),
        (:(=), :n, (:call, :-, (:call, :length, :edg1), 1)),
        (:line, 677, :none),
        (:(=), :m, (:call, :-, (:call, :length, :edg2), 1)),
        (:line, 678, :none),
        (:||, (:call, :(==), (:call, :size, :H), (:tuple, :n, :m)), (:call, :throw, (:call, :DimensionMismatch, "incorrect size of histogram"))),
        (:line, 679, :none),
        (:if, :init, (:block,
            (:line, 680, :none),
            (:call, :fill!, :H, (:call, :zero, :HT))
          )),
        (:line, 682, :none),
        (:for, (:(=), :i, (:call, :indices, :v, 1)), (:block,
            (:line, 683, :none),
            (:(=), :x, (:call, :-, (:call, :searchsortedfirst, :edg1, (:ref, :v, :i, 1)), 1)),
            (:line, 684, :none),
            (:(=), :y, (:call, :-, (:call, :searchsortedfirst, :edg2, (:ref, :v, :i, 2)), 1)),
            (:line, 685, :none),
            (:if, (:&&, (:comparison, 1, :(<=), :x, :(<=), :n), (:comparison, 1, :(<=), :y, :(<=), :m)), (:block,
                (:line, 686, :none),
                (:macrocall, Symbol("@inbounds"), (:+=, (:ref, :H, :x, :y), 1))
              ))
          )),
        (:line, 689, :none),
        (:tuple, :edg1, :edg2, :H)
      )),
    (:line, 692, :none),
    (:(=), (:call, :hist2d, (:(::), :v, :AbstractMatrix), (:(::), :edg1, :AbstractVector), (:(::), :edg2, :AbstractVector)), (:block,
        (:line, 692, :none),
        (:call, :hist2d!, (:call, (:curly, :Array, :Int, 2), (:call, :-, (:call, :length, :edg1), 1), (:call, :-, (:call, :length, :edg2), 1)), :v, :edg1, :edg2)
      )),
    (:line, 695, :none),
    (:(=), (:call, :hist2d, (:(::), :v, :AbstractMatrix), (:(::), :edg, :AbstractVector)), (:block,
        (:line, 695, :none),
        (:call, :hist2d, :v, :edg, :edg)
      )),
    (:line, 697, :none),
    (:(=), (:call, :hist2d, (:(::), :v, :AbstractMatrix), (:(::), :n1, :Integer), (:(::), :n2, :Integer)), (:block,
        (:line, 697, :none),
        (:call, :hist2d, :v, (:call, :histrange, (:call, :sub, :v, :(:), 1), :n1), (:call, :histrange, (:call, :sub, :v, :(:), 2), :n2))
      )),
    (:line, 699, :none),
    (:(=), (:call, :hist2d, (:(::), :v, :AbstractMatrix), (:(::), :n, :Integer)), (:block,
        (:line, 699, :none),
        (:call, :hist2d, :v, :n, :n)
      )),
    (:line, 700, :none),
    (:(=), (:call, :hist2d, (:(::), :v, :AbstractMatrix)), (:block,
        (:line, 700, :none),
        (:call, :hist2d, :v, (:call, :sturges, (:call, :size, :v, 1)))
      )),
    (:line, 702, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cell, (:..., (:(::), :dims, :Integer))), (:call, (:curly, :Array, :Any), (:..., :dims))),
    (:line, 703, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cell, (:(::), :dims, (:curly, :Tuple, (:curly, :Vararg, :Integer)))), (:call, (:curly, :Array, :Any), :dims)),
    (:line, 705, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :pointer_to_array, :T), (:(::), :p, (:curly, :Ptr, :T)), (:(::), :d, (:curly, :Union, :Integer, (:curly, :Tuple, (:curly, :Vararg, :Integer)))), (:kw, (:(::), :own, :Bool), false)), (:call, :unsafe_wrap, :Array, :p, :d, :own)),
    (:line, 707, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :pointer_to_string, (:(::), :p, (:curly, :Ptr, :UInt8)), (:(::), :len, :Integer), (:kw, (:(::), :own, :Bool), false)), (:call, :unsafe_wrap, :String, :p, :len, :own)),
    (:line, 709, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :pointer_to_string, (:(::), :p, (:curly, :Ptr, :UInt8)), (:kw, (:(::), :own, :Bool), false)), (:call, :unsafe_wrap, :String, :p, :own)),
    (:line, 712, :none),
    (:function, (:call, :checkbounds, (:(::), (:curly, :Type, :Bool)), (:(::), :sz, :Integer), :i), (:block,
        (:line, 713, :none),
        (:call, :depwarn, "checkbounds(Bool, size(A, d), i) is deprecated, use checkindex(Bool, indices(A, d), i).", (:quote, #QuoteNode
            :checkbounds
          )),
        (:line, 714, :none),
        (:call, :checkbounds, :Bool, (:(:), 1, :sz), :i)
      )),
    (:line, 716, :none),
    (:type, false, (:<:, (:curly, :FakeArray, :T, :N), (:curly, :AbstractArray, :T, :N)), (:block,
        (:line, 717, :none),
        (:(::), :dims, (:curly, :NTuple, :N, :Int))
      )),
    (:line, 719, :none),
    (:(=), (:call, :size, (:(::), :A, :FakeArray)), (:block,
        (:line, 719, :none),
        (:., :A, (:quote, #QuoteNode
            :dims
          ))
      )),
    (:line, 720, :none),
    (:function, (:call, (:curly, :checkbounds, :N, :T), (:(::), (:curly, :Type, :Bool)), (:(::), :sz, (:curly, :NTuple, :N, :Integer)), (:(::), :I1, :T), (:..., :I)), (:block,
        (:line, 721, :none),
        (:call, :depwarn, "checkbounds(Bool, size(A), I...) is deprecated, use checkbounds(Bool, A, I...).", (:quote, #QuoteNode
            :checkbounds
          )),
        (:line, 722, :none),
        (:call, :checkbounds, :Bool, (:call, :FakeArray, :sz), :I1, (:..., :I))
      )),
    (:line, 725, :none),
    (:function, (:call, :first, (:(::), :Colon)), (:block,
        (:line, 726, :none),
        (:call, :depwarn, "first(:) is deprecated, see https://docs.julialang.org/en/release-0.5/devdocs/offset-arrays/", (:quote, #QuoteNode
            :first
          )),
        (:line, 727, :none),
        1
      )),
    (:line, 729, :none),
    (:function, (:call, :_first, :i, :A, :d), (:block,
        (:line, 730, :none),
        (:call, :depwarn, "_first is deprecated, see https://docs.julialang.org/en/release-0.5/devdocs/offset-arrays/", (:quote, #QuoteNode
            :_first
          )),
        (:line, 731, :none),
        (:call, :__first, :i, :A, :d)
      )),
    (:line, 733, :none),
    (:(=), (:call, :__first, (:(::), :Colon), :P, (:(::), :Colon)), (:block,
        (:line, 733, :none),
        (:call, :first, (:call, :linearindices, :P))
      )),
    (:line, 734, :none),
    (:(=), (:call, :__first, :i, :P, (:(::), :Colon)), (:block,
        (:line, 734, :none),
        (:call, :first, :i)
      )),
    (:line, 735, :none),
    (:(=), (:call, :__first, (:(::), :Colon), :P, :d), (:block,
        (:line, 735, :none),
        (:call, :first, (:call, :indices, :P, :d))
      )),
    (:line, 736, :none),
    (:(=), (:call, :__first, :i, :P, :d), (:block,
        (:line, 736, :none),
        (:call, :first, :i)
      )),
    (:line, 739, :none),
    (:function, (:call, (:., :Broadcast, (:quote, #QuoteNode
            :check_broadcast_shape
          )), (:(::), :sz, :Dims), (:..., (:(::), :As, (:curly, :Union, :AbstractArray, :Number)))), (:block,
        (:line, 740, :none),
        (:call, :depwarn, "check_broadcast_shape(size(A), B...) should be replaced with check_broadcast_shape(indices(A), B...)", (:quote, #QuoteNode
            :check_broadcast_shape
          )),
        (:line, 741, :none),
        (:call, (:., :Broadcast, (:quote, #QuoteNode
              :check_broadcast_shape
            )), (:call, :map, :OneTo, :sz), (:..., :As))
      )),
    (:line, 744, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :trailingsize, :n), (:(::), :A, :AbstractArray), (:(::), (:curly, :Type, (:curly, :Val, :n)))), (:call, :trailingsize, :A, :n)),
    (:line, 746, :none),
    (:macrocall, Symbol("@deprecate"), :slice, :view),
    (:line, 747, :none),
    (:macrocall, Symbol("@deprecate"), :sub, :view),
    (:line, 750, :none),
    (:function, (:call, (:curly, :ereach, :Tv, :Ti), (:(::), :A, (:curly, :SparseMatrixCSC, :Tv, :Ti)), (:(::), :k, :Integer), (:(::), :parent, (:curly, :Vector, :Ti))), (:block,
        (:line, 751, :none),
        (:call, :error, (:call, :string, "ereach(A, k, parent) now lives in package SuiteSparse.jl. Run", "Pkg.add(\"SuiteSparse\") to install SuiteSparse on Julia v0.5."))
      )),
    (:line, 754, :none),
    (:export, :etree),
    (:line, 755, :none),
    (:function, (:call, (:curly, :etree, :Tv, :Ti), (:(::), :A, (:curly, :SparseMatrixCSC, :Tv, :Ti)), (:(::), :postorder, :Bool)), (:block,
        (:line, 756, :none),
        (:call, :error, (:call, :string, "etree(A[, post]) now lives in package SuiteSparse.jl. Run", "Pkg.add(\"SuiteSparse\") to install SuiteSparse on Julia v0.5."))
      )),
    (:line, 759, :none),
    (:(=), (:call, :etree, (:(::), :A, :SparseMatrixCSC)), (:block,
        (:line, 759, :none),
        (:call, :etree, :A, false)
      )),
    (:line, 760, :none),
    (:function, (:call, (:curly, :csc_permute, :Tv, :Ti), (:(::), :A, (:curly, :SparseMatrixCSC, :Tv, :Ti)), (:(::), :pinv, (:curly, :Vector, :Ti)), (:(::), :q, (:curly, :Vector, :Ti))), (:block,
        (:line, 761, :none),
        (:call, :error, (:call, :string, "csc_permute(A, pinv, q) now lives in package SuiteSparse.jl. Run", "Pkg.add(\"SuiteSparse\") to install SuiteSparse on Julia v0.5."))
      )),
    (:line, 764, :none),
    (:function, (:call, (:curly, :symperm, :Tv, :Ti), (:(::), :A, (:curly, :SparseMatrixCSC, :Tv, :Ti)), (:(::), :pinv, (:curly, :Vector, :Ti))), (:block,
        (:line, 765, :none),
        (:call, :error, (:call, :string, "symperm(A, pinv) now lives in package SuiteSparse.jl. Run,", "Pkg.add(\"SuiteSparse\") to install SuiteSparse on Julia v0.5."))
      )),
    (:line, 770, :none),
    (:function, (:call, :transpose, :x), (:block,
        (:line, 771, :none),
        (:call, :depwarn, (:call, :string, "the no-op `transpose` for non-numeric arrays is deprecated, ", (:string, "and no specific `transpose` method for ", (:call, :typeof, :x), " exists. Use "), "`permutedims(x, (2, 1))` for matrices and `reshape(x, 1, length(x))` for vectors, ", (:string, "or write a specific `transpose(x::", (:call, :typeof, :x), ")` method if appropriate.")), (:quote, #QuoteNode
            :transpose
          )),
        (:line, 776, :none),
        (:return, :x)
      )),
    (:line, 779, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cholfact!, (:(::), :A, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :HermOrSym
            ))), (:(::), :uplo, :Symbol), (:(::), (:curly, :Type, (:curly, :Val, false)))), (:call, :cholfact!, :A, (:curly, :Val, false))),
    (:line, 780, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cholfact!, (:(::), :A, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :HermOrSym
            ))), (:kw, (:(::), :uplo, :Symbol), (:quote, #QuoteNode
            :U
          ))), (:call, :cholfact!, :A)),
    (:line, 785, :none),
    (:const, (:(=), :_oldstyle_array_vcat_, false)),
    (:line, 787, :none),
    (:(=), (:call, (:., :Filesystem, (:quote, #QuoteNode
            :stop_watching
          )), (:(::), :stream, (:., :Filesystem, (:quote, #QuoteNode
              :_FDWatcher
            )))), (:block,
        (:line, 787, :none),
        (:call, :depwarn, "stop_watching(::_FDWatcher) should not be used.", (:quote, #QuoteNode
            :stop_watching
          ))
      ))
  ))