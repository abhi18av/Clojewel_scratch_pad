(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :Libc, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:import, :Base, :transcode),
        (:line, 7, :none),
        (:export, :FILE, :TmStruct, :strftime, :strptime, :getpid, :gethostname, :free, :malloc, :calloc, :realloc, :errno, :strerror, :flush_cstdio, :systemsleep, :time, :transcode),
        (:line, 9, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 10, :none),
            (:export, :GetLastError, :FormatMessage)
          )),
        (:line, 13, :none),
        (:call, :include, (:call, :string, (:if, (:call, :(>=), (:call, :length, (:., :Core, (:quote, #QuoteNode
                      :ARGS
                    ))), 2), (:ref, (:., :Core, (:quote, #QuoteNode
                    :ARGS
                  )), 2), ""), "errno_h.jl")),
        (:line, 18, :none),
        (:type, false, :RawFD, (:block,
            (:line, 19, :none),
            (:(::), :fd, :Int32),
            (:line, 20, :none),
            (:(=), (:call, :RawFD, (:(::), :fd, :Integer)), (:block,
                (:line, 20, :none),
                (:call, :new, :fd)
              )),
            (:line, 21, :none),
            (:(=), (:call, :RawFD, (:(::), :fd, :RawFD)), (:block,
                (:line, 21, :none),
                :fd
              ))
          )),
        (:line, 24, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :cconvert
              )), (:(::), (:curly, :Type, :Int32)), (:(::), :fd, :RawFD)), (:block,
            (:line, 24, :none),
            (:., :fd, (:quote, #QuoteNode
                :fd
              ))
          )),
        (:line, 26, :none),
        (:(=), (:call, :dup, (:(::), :x, :RawFD)), (:block,
            (:line, 26, :none),
            (:call, :RawFD, (:ccall, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:quote, #QuoteNode
                      :_dup
                    ), (:quote, #QuoteNode
                      :dup
                    ))), :Int32, (:tuple, :Int32), (:., :x, (:quote, #QuoteNode
                    :fd
                  ))))
          )),
        (:line, 27, :none),
        (:(=), (:call, :dup, (:(::), :src, :RawFD), (:(::), :target, :RawFD)), (:block,
            (:line, 27, :none),
            (:call, :systemerror, "dup", (:call, :(==), -1, (:ccall, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:quote, #QuoteNode
                        :_dup2
                      ), (:quote, #QuoteNode
                        :dup2
                      ))), :Int32, (:tuple, :Int32, :Int32), (:., :src, (:quote, #QuoteNode
                      :fd
                    )), (:., :target, (:quote, #QuoteNode
                      :fd
                    )))))
          )),
        (:line, 32, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 33, :none),
            (:type, false, :WindowsRawSocket, (:block,
                (:line, 34, :none),
                (:(::), :handle, (:curly, :Ptr, :Void))
              )),
            (:line, 36, :none),
            (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                    :cconvert
                  )), (:(::), (:curly, :Type, (:curly, :Ptr, :Void))), (:(::), :fd, :WindowsRawSocket)), (:block,
                (:line, 36, :none),
                (:., :fd, (:quote, #QuoteNode
                    :handle
                  ))
              )),
            (:line, 37, :none),
            (:(=), (:call, :_get_osfhandle, (:(::), :fd, :RawFD)), (:block,
                (:line, 37, :none),
                (:call, :WindowsRawSocket, (:ccall, (:quote, #QuoteNode
                      :_get_osfhandle
                    ), (:curly, :Ptr, :Void), (:tuple, :Cint), (:., :fd, (:quote, #QuoteNode
                        :fd
                      ))))
              )),
            (:line, 38, :none),
            (:(=), (:call, :_get_osfhandle, (:(::), :fd, :WindowsRawSocket)), (:block,
                (:line, 38, :none),
                :fd
              ))
          ), (:block,
            (:line, 40, :none),
            (:(=), (:call, :_get_osfhandle, (:(::), :fd, :RawFD)), (:block,
                (:line, 40, :none),
                :fd
              ))
          )),
        (:line, 45, :none),
        (:type, false, :FILE, (:block,
            (:line, 46, :none),
            (:(::), :ptr, (:curly, :Ptr, :Void))
          )),
        (:line, 49, :none),
        (:(=), (:call, :modestr, (:(::), :s, :IO)), (:block,
            (:line, 49, :none),
            (:call, :modestr, (:call, :isreadable, :s), (:call, :iswritable, :s))
          )),
        (:line, 50, :none),
        (:(=), (:call, :modestr, (:(::), :r, :Bool), (:(::), :w, :Bool)), (:block,
            (:line, 50, :none),
            (:if, :r, (:if, :w, "r+", "r"), (:if, :w, "w", (:call, :throw, (:call, :ArgumentError, "neither readable nor writable"))))
          )),
        (:line, 52, :none),
        (:function, (:call, :FILE, (:(::), :fd, :RawFD), :mode), (:block,
            (:line, 53, :none),
            (:(=), :FILEp, (:ccall, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:quote, #QuoteNode
                      :_fdopen
                    ), (:quote, #QuoteNode
                      :fdopen
                    ))), (:curly, :Ptr, :Void), (:tuple, :Cint, :Cstring), :fd, :mode)),
            (:line, 54, :none),
            (:call, :systemerror, "fdopen", (:call, :(==), :FILEp, :C_NULL)),
            (:line, 55, :none),
            (:call, :FILE, :FILEp)
          )),
        (:line, 58, :none),
        (:function, (:call, :FILE, (:(::), :s, :IO)), (:block,
            (:line, 59, :none),
            (:(=), :f, (:call, :FILE, (:call, :dup, (:call, :RawFD, (:call, :fd, :s))), (:call, :modestr, :s))),
            (:line, 60, :none),
            (:call, :seek, :f, (:call, :position, :s)),
            (:line, 61, :none),
            :f
          )),
        (:line, 64, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :unsafe_convert
              )), (:(::), :T, (:curly, :Union, (:curly, :Type, (:curly, :Ptr, :Void)), (:curly, :Type, (:curly, :Ptr, :FILE)))), (:(::), :f, :FILE)), (:block,
            (:line, 64, :none),
            (:call, :convert, :T, (:., :f, (:quote, #QuoteNode
                  :ptr
                )))
          )),
        (:line, 65, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :close
              )), (:(::), :f, :FILE)), (:block,
            (:line, 65, :none),
            (:call, :systemerror, "fclose", (:call, :(!=), (:ccall, (:quote, #QuoteNode
                    :fclose
                  ), :Cint, (:tuple, (:curly, :Ptr, :Void)), (:., :f, (:quote, #QuoteNode
                      :ptr
                    ))), 0))
          )),
        (:line, 66, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :convert
              )), (:(::), (:curly, :Type, :FILE)), (:(::), :s, :IO)), (:block,
            (:line, 66, :none),
            (:call, :FILE, :s)
          )),
        (:line, 68, :none),
        (:function, (:call, (:., :Base, (:quote, #QuoteNode
                :seek
              )), (:(::), :h, :FILE), (:(::), :offset, :Integer)), (:block,
            (:line, 69, :none),
            (:call, :systemerror, "fseek", (:call, :(!=), (:ccall, (:quote, #QuoteNode
                    :fseek
                  ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Clong, :Cint), (:., :h, (:quote, #QuoteNode
                      :ptr
                    )), :offset, 0), 0)),
            (:line, 71, :none),
            :h
          )),
        (:line, 74, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :position
              )), (:(::), :h, :FILE)), (:block,
            (:line, 74, :none),
            (:ccall, (:quote, #QuoteNode
                :ftell
              ), :Clong, (:tuple, (:curly, :Ptr, :Void)), (:., :h, (:quote, #QuoteNode
                  :ptr
                )))
          )),
        (:line, 78, :none),
        (:macrocall, :(Core.@doc), "    flush_cstdio()\n\nFlushes the C `stdout` and `stderr` streams (which may have been written to by external C code).\n", (:(=), (:call, :flush_cstdio), (:block,
              (:line, 83, :none),
              (:ccall, (:quote, #QuoteNode
                  :jl_flush_cstdio
                ), :Void, (:tuple,))
            ))),
        (:line, 88, :none),
        (:if, (:call, :is_unix), (:block,
            (:line, 89, :none),
            (:(=), (:call, :systemsleep, (:(::), :s, :Real)), (:block,
                (:line, 89, :none),
                (:ccall, (:quote, #QuoteNode
                    :usleep
                  ), :Int32, (:tuple, :UInt32), (:call, :round, :UInt32, (:call, :*, :s, 1.0e6)))
              ))
          ), (:block,
            (:line, 90, :none),
            (:if, (:call, :is_windows), (:block,
                (:line, 91, :none),
                (:function, (:call, :systemsleep, (:(::), :s, :Real)), (:block,
                    (:line, 92, :none),
                    (:ccall, (:quote, #QuoteNode
                        :Sleep
                      ), :Void, (:tuple, :UInt32), (:call, :round, :UInt32, (:call, :*, :s, 1000.0)), (:stdcall,)),
                    (:line, 93, :none),
                    (:return, (:call, :Int32, 0))
                  ))
              ), (:block,
                (:line, 96, :none),
                (:call, :error, "systemsleep undefined for this OS")
              ))
          )),
        (:line, 99, :none),
        (:type, false, :TimeVal, (:block,
            (:line, 100, :none),
            (:(::), :sec, :Int64),
            (:line, 101, :none),
            (:(::), :usec, :Int64)
          )),
        (:line, 104, :none),
        (:function, (:call, :TimeVal), (:block,
            (:line, 105, :none),
            (:(=), :tv, (:call, (:curly, :Ref, :TimeVal))),
            (:line, 106, :none),
            (:(=), :status, (:ccall, (:quote, #QuoteNode
                  :jl_gettimeofday
                ), :Cint, (:tuple, (:curly, :Ref, :TimeVal)), :tv)),
            (:line, 107, :none),
            (:&&, (:call, :(!=), :status, 0), (:call, :error, "unable to determine current time: ", :status)),
            (:line, 108, :none),
            (:return, (:ref, :tv))
          )),
        (:line, 111, :none),
        (:macrocall, :(Core.@doc), "    TmStruct([seconds])\n\nConvert a number of seconds since the epoch to broken-down format, with fields `sec`, `min`,\n`hour`, `mday`, `month`, `year`, `wday`, `yday`, and `isdst`.\n", (:type, true, :TmStruct, (:block,
              (:line, 118, :none),
              (:(::), :sec, :Int32),
              (:line, 119, :none),
              (:(::), :min, :Int32),
              (:line, 120, :none),
              (:(::), :hour, :Int32),
              (:line, 121, :none),
              (:(::), :mday, :Int32),
              (:line, 122, :none),
              (:(::), :month, :Int32),
              (:line, 123, :none),
              (:(::), :year, :Int32),
              (:line, 124, :none),
              (:(::), :wday, :Int32),
              (:line, 125, :none),
              (:(::), :yday, :Int32),
              (:line, 126, :none),
              (:(::), :isdst, :Int32),
              (:line, 128, :none),
              (:(::), :_10, :Int32),
              (:line, 129, :none),
              (:(::), :_11, :Int32),
              (:line, 130, :none),
              (:(::), :_12, :Int32),
              (:line, 131, :none),
              (:(::), :_13, :Int32),
              (:line, 132, :none),
              (:(::), :_14, :Int32),
              (:line, 134, :none),
              (:(=), (:call, :TmStruct, :sec, :min, :hour, :mday, :month, :year, :wday, :yday, :isdst), (:block,
                  (:line, 134, :none),
                  (:call, :new, :sec, :min, :hour, :mday, :month, :year, :wday, :yday, :isdst, 0, 0, 0, 0, 0)
                )),
              (:line, 136, :none),
              (:(=), (:call, :TmStruct), (:block,
                  (:line, 136, :none),
                  (:call, :new, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                )),
              (:line, 137, :none),
              (:function, (:call, :TmStruct, (:(::), :t, :Real)), (:block,
                  (:line, 138, :none),
                  (:(=), :t, (:call, :floor, :t)),
                  (:line, 139, :none),
                  (:(=), :tm, (:call, :TmStruct)),
                  (:line, 141, :none),
                  (:ccall, (:quote, #QuoteNode
                      :localtime_r
                    ), (:curly, :Ptr, :TmStruct), (:tuple, (:curly, :Ptr, :Int), (:curly, :Ptr, :TmStruct)), (:&, :t), (:&, :tm)),
                  (:line, 142, :none),
                  (:return, :tm)
                ))
            ))),
        (:line, 146, :none),
        (:macrocall, :(Core.@doc), "    strftime([format], time)\n\nConvert time, given as a number of seconds since the epoch or a `TmStruct`, to a formatted\nstring using the given format. Supported formats are the same as those in the standard C\nlibrary.\n", (:(=), (:call, :strftime, :t), (:block,
              (:line, 153, :none),
              (:call, :strftime, "%c", :t)
            ))),
        (:line, 154, :none),
        (:(=), (:call, :strftime, (:(::), :fmt, :AbstractString), (:(::), :t, :Real)), (:block,
            (:line, 154, :none),
            (:call, :strftime, :fmt, (:call, :TmStruct, :t))
          )),
        (:line, 155, :none),
        (:function, (:call, :strftime, (:(::), :fmt, :AbstractString), (:(::), :tm, :TmStruct)), (:block,
            (:line, 156, :none),
            (:(=), :timestr, (:call, (:curly, :Array, :UInt8), 128)),
            (:line, 157, :none),
            (:(=), :n, (:ccall, (:quote, #QuoteNode
                  :strftime
                ), :Int, (:tuple, (:curly, :Ptr, :UInt8), :Int, :Cstring, (:curly, :Ptr, :TmStruct)), :timestr, (:call, :length, :timestr), :fmt, (:&, :tm))),
            (:line, 159, :none),
            (:if, (:call, :(==), :n, 0), (:block,
                (:line, 160, :none),
                (:return, "")
              )),
            (:line, 162, :none),
            (:return, (:call, :String, (:ref, :timestr, (:(:), 1, :n))))
          )),
        (:line, 165, :none),
        (:macrocall, :(Core.@doc), "    strptime([format], timestr)\n\nParse a formatted time string into a `TmStruct` giving the seconds, minute, hour, date, etc.\nSupported formats are the same as those in the standard C library. On some platforms,\ntimezones will not be parsed correctly. If the result of this function will be passed to\n`time` to convert it to seconds since the epoch, the `isdst` field should be filled in\nmanually. Setting it to `-1` will tell the C library to use the current system settings to\ndetermine the timezone.\n", (:(=), (:call, :strptime, (:(::), :timestr, :AbstractString)), (:block,
              (:line, 175, :none),
              (:call, :strptime, "%c", :timestr)
            ))),
        (:line, 176, :none),
        (:function, (:call, :strptime, (:(::), :fmt, :AbstractString), (:(::), :timestr, :AbstractString)), (:block,
            (:line, 177, :none),
            (:(=), :tm, (:call, :TmStruct)),
            (:line, 178, :none),
            (:(=), :r, (:ccall, (:quote, #QuoteNode
                  :strptime
                ), :Cstring, (:tuple, :Cstring, :Cstring, (:curly, :Ptr, :TmStruct)), :timestr, :fmt, (:&, :tm))),
            (:line, 184, :none),
            (:if, (:call, :(==), :r, :C_NULL), (:block,
                (:line, 186, :none),
                (:call, :throw, (:call, :ArgumentError, "invalid arguments"))
              )),
            (:line, 188, :none),
            (:macrocall, Symbol("@static"), (:if, (:call, :is_apple), (:block,
                  (:line, 191, :none),
                  (:if, (:call, :!, (:call, :ismatch, (:macrocall, Symbol("@r_str"), "([^%]|^)%(a|A|j|w|Ow)"), :fmt)), (:block,
                      (:line, 192, :none),
                      (:ccall, (:quote, #QuoteNode
                          :mktime
                        ), :Int, (:tuple, (:curly, :Ptr, :TmStruct)), (:&, :tm))
                    ))
                ))),
            (:line, 195, :none),
            (:return, :tm)
          )),
        (:line, 200, :none),
        (:macrocall, :(Core.@doc), "    time(t::TmStruct)\n\nConverts a `TmStruct` struct to a number of seconds since the epoch.\n", (:(=), (:call, :time, (:(::), :tm, :TmStruct)), (:block,
              (:line, 205, :none),
              (:call, :Float64, (:ccall, (:quote, #QuoteNode
                    :mktime
                  ), :Int, (:tuple, (:curly, :Ptr, :TmStruct)), (:&, :tm)))
            ))),
        (:line, 206, :none),
        (:(=), (:call, :time), (:block,
            (:line, 206, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_clock_now
              ), :Float64, (:tuple,))
          )),
        (:line, 210, :none),
        (:(=), (:call, :getpid), (:block,
            (:line, 210, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_getpid
              ), :Int32, (:tuple,))
          )),
        (:line, 214, :none),
        (:function, (:call, :gethostname), (:block,
            (:line, 215, :none),
            (:(=), :hn, (:call, (:curly, :Array, :UInt8), 256)),
            (:line, 216, :none),
            (:(=), :err, (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), (:block,
                    (:line, 217, :none),
                    (:ccall, (:quote, #QuoteNode
                        :gethostname
                      ), :Int32, (:tuple, (:curly, :Ptr, :UInt8), :UInt32), :hn, (:call, :length, :hn), (:stdcall,))
                  ), (:block,
                    (:line, 219, :none),
                    (:ccall, (:quote, #QuoteNode
                        :gethostname
                      ), :Int32, (:tuple, (:curly, :Ptr, :UInt8), :UInt), :hn, (:call, :length, :hn))
                  )))),
            (:line, 221, :none),
            (:call, :systemerror, "gethostname", (:call, :(!=), :err, 0)),
            (:line, 222, :none),
            (:return, (:call, :unsafe_string, (:call, :pointer, :hn)))
          )),
        (:line, 227, :none),
        (:macrocall, :(Core.@doc), "    errno([code])\n\nGet the value of the C library's `errno`. If an argument is specified, it is used to set the\nvalue of `errno`.\n\nThe value of `errno` is only valid immediately after a `ccall` to a C library routine that\nsets it. Specifically, you cannot call `errno` at the next prompt in a REPL, because lots of\ncode is executed between prompts.\n", (:(=), (:call, :errno), (:block,
              (:line, 237, :none),
              (:ccall, (:quote, #QuoteNode
                  :jl_errno
                ), :Cint, (:tuple,))
            ))),
        (:line, 238, :none),
        (:(=), (:call, :errno, (:(::), :e, :Integer)), (:block,
            (:line, 238, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_set_errno
              ), :Void, (:tuple, :Cint), :e)
          )),
        (:line, 240, :none),
        (:macrocall, :(Core.@doc), "    strerror(n=errno())\n\nConvert a system call error code to a descriptive string\n", (:(=), (:call, :strerror, (:(::), :e, :Integer)), (:block,
              (:line, 245, :none),
              (:call, :unsafe_string, (:ccall, (:quote, #QuoteNode
                    :strerror
                  ), :Cstring, (:tuple, :Int32), :e))
            ))),
        (:line, 246, :none),
        (:(=), (:call, :strerror), (:block,
            (:line, 246, :none),
            (:call, :strerror, (:call, :errno))
          )),
        (:line, 248, :none),
        (:macrocall, :(Core.@doc), "    GetLastError()\n\nCall the Win32 `GetLastError` function [only available on Windows].\n", (:function, :GetLastError)),
        (:line, 255, :none),
        (:macrocall, :(Core.@doc), "    FormatMessage(n=GetLastError())\n\nConvert a Win32 system call error code to a descriptive string [only available on Windows].\n", (:function, :FormatMessage)),
        (:line, 262, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 263, :none),
            (:(=), (:call, :GetLastError), (:block,
                (:line, 263, :none),
                (:ccall, (:quote, #QuoteNode
                    :GetLastError
                  ), :UInt32, (:tuple,), (:stdcall,))
              )),
            (:line, 265, :none),
            (:function, (:call, :FormatMessage, (:kw, :e, (:call, :GetLastError))), (:block,
                (:line, 266, :none),
                (:const, (:(=), :FORMAT_MESSAGE_ALLOCATE_BUFFER, (:call, :UInt32, 0x0100))),
                (:line, 267, :none),
                (:const, (:(=), :FORMAT_MESSAGE_FROM_SYSTEM, (:call, :UInt32, 0x1000))),
                (:line, 268, :none),
                (:const, (:(=), :FORMAT_MESSAGE_IGNORE_INSERTS, (:call, :UInt32, 0x0200))),
                (:line, 269, :none),
                (:const, (:(=), :FORMAT_MESSAGE_MAX_WIDTH_MASK, (:call, :UInt32, 0xff))),
                (:line, 270, :none),
                (:(=), :lpMsgBuf, (:call, :Array, (:curly, :Ptr, :UInt16))),
                (:line, 271, :none),
                (:(=), (:ref, :lpMsgBuf, 1), 0),
                (:line, 272, :none),
                (:(=), :len, (:ccall, (:quote, #QuoteNode
                      :FormatMessageW
                    ), :UInt32, (:tuple, :Cint, (:curly, :Ptr, :Void), :Cint, :Cint, (:curly, :Ptr, (:curly, :Ptr, :UInt16)), :Cint, (:curly, :Ptr, :Void)), (:call, :|, (:call, :|, (:call, :|, :FORMAT_MESSAGE_ALLOCATE_BUFFER, :FORMAT_MESSAGE_FROM_SYSTEM), :FORMAT_MESSAGE_IGNORE_INSERTS), :FORMAT_MESSAGE_MAX_WIDTH_MASK), :C_NULL, :e, 0, :lpMsgBuf, 0, :C_NULL, (:stdcall,))),
                (:line, 275, :none),
                (:(=), :p, (:ref, :lpMsgBuf, 1)),
                (:line, 276, :none),
                (:&&, (:call, :(==), :len, 0), (:return, "")),
                (:line, 277, :none),
                (:(=), :buf, (:call, (:curly, :Array, :UInt16), :len)),
                (:line, 278, :none),
                (:call, :unsafe_copy!, (:call, :pointer, :buf), :p, :len),
                (:line, 279, :none),
                (:ccall, (:quote, #QuoteNode
                    :LocalFree
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :p, (:stdcall,)),
                (:line, 280, :none),
                (:return, (:call, :transcode, :String, :buf))
              ))
          )),
        (:line, 286, :none),
        (:macrocall, :(Core.@doc), "    free(addr::Ptr)\n\nCall `free` from the C standard library. Only use this on memory obtained from `malloc`, not\non pointers retrieved from other C libraries. `Ptr` objects obtained from C libraries should\nbe freed by the free functions defined in that library, to avoid assertion failures if\nmultiple `libc` libraries exist on the system.\n", (:(=), (:call, :free, (:(::), :p, :Ptr)), (:block,
              (:line, 294, :none),
              (:ccall, (:quote, #QuoteNode
                  :free
                ), :Void, (:tuple, (:curly, :Ptr, :Void)), :p)
            ))),
        (:line, 296, :none),
        (:macrocall, :(Core.@doc), "    malloc(size::Integer) -> Ptr{Void}\n\nCall `malloc` from the C standard library.\n", (:(=), (:call, :malloc, (:(::), :size, :Integer)), (:block,
              (:line, 301, :none),
              (:ccall, (:quote, #QuoteNode
                  :malloc
                ), (:curly, :Ptr, :Void), (:tuple, :Csize_t), :size)
            ))),
        (:line, 303, :none),
        (:macrocall, :(Core.@doc), "    realloc(addr::Ptr, size::Integer) -> Ptr{Void}\n\nCall `realloc` from the C standard library.\n\nSee warning in the documentation for `free` regarding only using this on memory originally\nobtained from `malloc`.\n", (:(=), (:call, :realloc, (:(::), :p, :Ptr), (:(::), :size, :Integer)), (:block,
              (:line, 311, :none),
              (:ccall, (:quote, #QuoteNode
                  :realloc
                ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Csize_t), :p, :size)
            ))),
        (:line, 313, :none),
        (:macrocall, :(Core.@doc), "    calloc(num::Integer, size::Integer) -> Ptr{Void}\n\nCall `calloc` from the C standard library.\n", (:(=), (:call, :calloc, (:(::), :num, :Integer), (:(::), :size, :Integer)), (:block,
              (:line, 318, :none),
              (:ccall, (:quote, #QuoteNode
                  :calloc
                ), (:curly, :Ptr, :Void), (:tuple, :Csize_t, :Csize_t), :num, :size)
            ))),
        (:line, 320, :none),
        (:(=), (:call, :free, (:(::), :p, :Cstring)), (:block,
            (:line, 320, :none),
            (:call, :free, (:call, :convert, (:curly, :Ptr, :UInt8), :p))
          )),
        (:line, 321, :none),
        (:(=), (:call, :free, (:(::), :p, :Cwstring)), (:block,
            (:line, 321, :none),
            (:call, :free, (:call, :convert, (:curly, :Ptr, :Cwchar_t), :p))
          ))
      ))
  ))