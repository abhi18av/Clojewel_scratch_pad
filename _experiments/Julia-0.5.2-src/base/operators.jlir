(:quote, (:block,
    (:line, 5, :none),
    (:typealias, (:curly, :Dims, :N), (:curly, :NTuple, :N, :Int)),
    (:line, 6, :none),
    (:typealias, (:curly, :DimsInteger, :N), (:curly, :NTuple, :N, :Integer)),
    (:line, 7, :none),
    (:typealias, (:curly, :Indices, :N), (:curly, :NTuple, :N, :AbstractUnitRange)),
    (:line, 9, :none),
    (:const, (:(=), :<:, :issubtype)),
    (:line, 11, :none),
    (:(=), (:call, :supertype, (:(::), :T, :DataType)), (:block,
        (:line, 11, :none),
        (:., :T, (:quote, #QuoteNode
            :super
          ))
      )),
    (:line, 15, :none),
    (:(=), (:call, :(==), :x, :y), (:block,
        (:line, 15, :none),
        (:call, :(===), :x, :y)
      )),
    (:line, 16, :none),
    (:(=), (:call, :isequal, :x, :y), (:block,
        (:line, 16, :none),
        (:call, :(==), :x, :y)
      )),
    (:line, 20, :none),
    (:(=), (:call, :isequal, (:(::), :x, :Char), (:(::), :y, :Integer)), (:block,
        (:line, 20, :none),
        false
      )),
    (:line, 21, :none),
    (:(=), (:call, :isequal, (:(::), :x, :Integer), (:(::), :y, :Char)), (:block,
        (:line, 21, :none),
        false
      )),
    (:line, 36, :none),
    (:(=), (:call, :isequal, (:(::), :x, :AbstractFloat), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 36, :none),
        (:call, :|, (:call, :&, (:call, :isnan, :x), (:call, :isnan, :y)), (:call, :&, (:call, :(==), (:call, :signbit, :x), (:call, :signbit, :y)), (:call, :(==), :x, :y)))
      )),
    (:line, 37, :none),
    (:(=), (:call, :isequal, (:(::), :x, :Real), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 37, :none),
        (:call, :|, (:call, :&, (:call, :isnan, :x), (:call, :isnan, :y)), (:call, :&, (:call, :(==), (:call, :signbit, :x), (:call, :signbit, :y)), (:call, :(==), :x, :y)))
      )),
    (:line, 38, :none),
    (:(=), (:call, :isequal, (:(::), :x, :AbstractFloat), (:(::), :y, :Real)), (:block,
        (:line, 38, :none),
        (:call, :|, (:call, :&, (:call, :isnan, :x), (:call, :isnan, :y)), (:call, :&, (:call, :(==), (:call, :signbit, :x), (:call, :signbit, :y)), (:call, :(==), :x, :y)))
      )),
    (:line, 40, :none),
    (:(=), (:call, :isless, (:(::), :x, :AbstractFloat), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 40, :none),
        (:call, :|, (:call, :|, (:call, :&, (:call, :!, (:call, :isnan, :x)), (:call, :isnan, :y)), (:call, :&, (:call, :signbit, :x), (:call, :!, (:call, :signbit, :y)))), (:call, :<, :x, :y))
      )),
    (:line, 41, :none),
    (:(=), (:call, :isless, (:(::), :x, :Real), (:(::), :y, :AbstractFloat)), (:block,
        (:line, 41, :none),
        (:call, :|, (:call, :|, (:call, :&, (:call, :!, (:call, :isnan, :x)), (:call, :isnan, :y)), (:call, :&, (:call, :signbit, :x), (:call, :!, (:call, :signbit, :y)))), (:call, :<, :x, :y))
      )),
    (:line, 42, :none),
    (:(=), (:call, :isless, (:(::), :x, :AbstractFloat), (:(::), :y, :Real)), (:block,
        (:line, 42, :none),
        (:call, :|, (:call, :|, (:call, :&, (:call, :!, (:call, :isnan, :x)), (:call, :isnan, :y)), (:call, :&, (:call, :signbit, :x), (:call, :!, (:call, :signbit, :y)))), (:call, :<, :x, :y))
      )),
    (:line, 44, :none),
    (:function, (:call, :(==), (:(::), :T, :Type), (:(::), :S, :Type)), (:block,
        (:line, 45, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 46, :none),
        (:call, :typeseq, :T, :S)
      )),
    (:line, 48, :none),
    (:function, (:call, :(!=), (:(::), :T, :Type), (:(::), :S, :Type)), (:block,
        (:line, 49, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 50, :none),
        (:call, :!, (:call, :(==), :T, :S))
      )),
    (:line, 52, :none),
    (:(=), (:call, :(==), (:(::), :T, :TypeVar), (:(::), :S, :Type)), (:block,
        (:line, 52, :none),
        false
      )),
    (:line, 53, :none),
    (:(=), (:call, :(==), (:(::), :T, :Type), (:(::), :S, :TypeVar)), (:block,
        (:line, 53, :none),
        false
      )),
    (:line, 57, :none),
    (:(=), (:call, :(!=), :x, :y), (:block,
        (:line, 57, :none),
        (:call, :!, (:call, :(==), :x, :y))
      )),
    (:line, 58, :none),
    (:const, (:(=), :≠, :(!=))),
    (:line, 59, :none),
    (:const, (:(=), :≡, :is)),
    (:line, 60, :none),
    (:(=), (:call, :(!==), :x, :y), (:block,
        (:line, 60, :none),
        (:call, :!, (:call, :is, :x, :y))
      )),
    (:line, 61, :none),
    (:const, (:(=), :≢, :(!==))),
    (:line, 63, :none),
    (:(=), (:call, :<, :x, :y), (:block,
        (:line, 63, :none),
        (:call, :isless, :x, :y)
      )),
    (:line, 64, :none),
    (:(=), (:call, :>, :x, :y), (:block,
        (:line, 64, :none),
        (:call, :<, :y, :x)
      )),
    (:line, 65, :none),
    (:(=), (:call, :(<=), :x, :y), (:block,
        (:line, 65, :none),
        (:call, :!, (:call, :<, :y, :x))
      )),
    (:line, 66, :none),
    (:const, (:(=), :≤, :(<=))),
    (:line, 67, :none),
    (:(=), (:call, :(>=), :x, :y), (:block,
        (:line, 67, :none),
        (:call, :(<=), :y, :x)
      )),
    (:line, 68, :none),
    (:const, (:(=), :≥, :(>=))),
    (:line, 69, :none),
    (:(=), (:call, :.>, :x, :y), (:block,
        (:line, 69, :none),
        (:call, :.<, :y, :x)
      )),
    (:line, 70, :none),
    (:(=), (:call, :.>=, :x, :y), (:block,
        (:line, 70, :none),
        (:call, :.<=, :y, :x)
      )),
    (:line, 71, :none),
    (:const, (:(=), :.≥, :.>=)),
    (:line, 75, :none),
    (:(=), (:call, :isless, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 75, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 76, :none),
    (:(=), (:call, :lexcmp, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 76, :none),
        (:if, (:call, :isless, :x, :y), -1, (:call, :ifelse, (:call, :isless, :y, :x), 1, 0))
      )),
    (:line, 78, :none),
    (:(=), (:call, :ifelse, (:(::), :c, :Bool), :x, :y), (:block,
        (:line, 78, :none),
        (:call, :select_value, :c, :x, :y)
      )),
    (:line, 80, :none),
    (:(=), (:call, :cmp, :x, :y), (:block,
        (:line, 80, :none),
        (:if, (:call, :isless, :x, :y), -1, (:call, :ifelse, (:call, :isless, :y, :x), 1, 0))
      )),
    (:line, 81, :none),
    (:(=), (:call, :lexcmp, :x, :y), (:block,
        (:line, 81, :none),
        (:call, :cmp, :x, :y)
      )),
    (:line, 82, :none),
    (:(=), (:call, :lexless, :x, :y), (:block,
        (:line, 82, :none),
        (:call, :<, (:call, :lexcmp, :x, :y), 0)
      )),
    (:line, 85, :none),
    (:(=), (:call, :cmp, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
        (:line, 85, :none),
        (:call, :ifelse, (:call, :isless, :x, :y), -1, (:call, :ifelse, (:call, :isless, :y, :x), 1, 0))
      )),
    (:line, 87, :none),
    (:(=), (:call, :max, :x, :y), (:block,
        (:line, 87, :none),
        (:call, :ifelse, (:call, :<, :y, :x), :x, :y)
      )),
    (:line, 88, :none),
    (:(=), (:call, :min, :x, :y), (:block,
        (:line, 88, :none),
        (:call, :ifelse, (:call, :<, :y, :x), :y, :x)
      )),
    (:line, 89, :none),
    "    minmax(x, y)\n\nReturn `(min(x,y), max(x,y))`. See also: [`extrema`](:func:`extrema`) that returns `(minimum(x), maximum(x))`.\n\n```jldoctest\njulia> minmax('c','b')\n('b','c')\n```\n",
    (:line, 99, :none),
    (:(=), (:call, :minmax, :x, :y), (:block,
        (:line, 99, :none),
        (:if, (:call, :<, :y, :x), (:tuple, :y, :x), (:tuple, :x, :y))
      )),
    (:line, 101, :none),
    (:(=), (:call, :scalarmax, :x, :y), (:block,
        (:line, 101, :none),
        (:call, :max, :x, :y)
      )),
    (:line, 102, :none),
    (:(=), (:call, :scalarmax, (:(::), :x, :AbstractArray), (:(::), :y, :AbstractArray)), (:block,
        (:line, 102, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 103, :none),
    (:(=), (:call, :scalarmax, :x, (:(::), :y, :AbstractArray)), (:block,
        (:line, 103, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 104, :none),
    (:(=), (:call, :scalarmax, (:(::), :x, :AbstractArray), :y), (:block,
        (:line, 104, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 106, :none),
    (:(=), (:call, :scalarmin, :x, :y), (:block,
        (:line, 106, :none),
        (:call, :min, :x, :y)
      )),
    (:line, 107, :none),
    (:(=), (:call, :scalarmin, (:(::), :x, :AbstractArray), (:(::), :y, :AbstractArray)), (:block,
        (:line, 107, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 108, :none),
    (:(=), (:call, :scalarmin, :x, (:(::), :y, :AbstractArray)), (:block,
        (:line, 108, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 109, :none),
    (:(=), (:call, :scalarmin, (:(::), :x, :AbstractArray), :y), (:block,
        (:line, 109, :none),
        (:call, :throw, (:call, :ArgumentError, "ordering is not well-defined for arrays"))
      )),
    (:line, 113, :none),
    (:(=), (:call, :identity, :x), (:block,
        (:line, 113, :none),
        :x
      )),
    (:line, 115, :none),
    (:(=), (:call, :+, (:(::), :x, :Number)), (:block,
        (:line, 115, :none),
        :x
      )),
    (:line, 116, :none),
    (:(=), (:call, :*, (:(::), :x, :Number)), (:block,
        (:line, 116, :none),
        :x
      )),
    (:line, 117, :none),
    (:(=), (:call, :&, (:(::), :x, :Integer)), (:block,
        (:line, 117, :none),
        :x
      )),
    (:line, 118, :none),
    (:(=), (:call, :|, (:(::), :x, :Integer)), (:block,
        (:line, 118, :none),
        :x
      )),
    (:line, 119, :none),
    (:(=), (:call, :$, (:(::), :x, :Integer)), (:block,
        (:line, 119, :none),
        :x
      )),
    (:line, 124, :none),
    (:(=), (:call, :afoldl, :op, :a), (:block,
        (:line, 124, :none),
        :a
      )),
    (:line, 125, :none),
    (:(=), (:call, :afoldl, :op, :a, :b), (:block,
        (:line, 125, :none),
        (:call, :op, :a, :b)
      )),
    (:line, 126, :none),
    (:(=), (:call, :afoldl, :op, :a, :b, (:..., :c)), (:block,
        (:line, 126, :none),
        (:call, :afoldl, :op, (:call, :op, :a, :b), (:..., :c))
      )),
    (:line, 127, :none),
    (:function, (:call, :afoldl, :op, :a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p, (:..., :qs)), (:block,
        (:line, 128, :none),
        (:(=), :y, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, (:call, :op, :a, :b), :c), :d), :e), :f), :g), :h), :i), :j), :k), :l), :m), :n), :o), :p)),
        (:line, 129, :none),
        (:for, (:(=), :x, :qs), (:block,
            (:line, 129, :none),
            (:(=), :y, (:call, :op, :y, :x))
          )),
        (:line, 130, :none),
        :y
      )),
    (:line, 133, :none),
    (:for, (:(=), :op, (:tuple, (:quote, #QuoteNode
            :+
          ), (:quote, #QuoteNode
            :*
          ), (:quote, #QuoteNode
            :&
          ), (:quote, #QuoteNode
            :|
          ), (:quote, #QuoteNode
            :$
          ), (:quote, #QuoteNode
            :min
          ), (:quote, #QuoteNode
            :max
          ), (:quote, #QuoteNode
            :kron
          ))), (:block,
        (:line, 134, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 138, :none),
            (:(=), (:call, (:$, :op), :a, :b, :c, (:..., :xs)), (:block,
                (:line, 138, :none),
                (:call, :afoldl, (:$, :op), (:call, (:$, :op), (:call, (:$, :op), :a, :b), :c), (:..., :xs))
              ))
          ))
      )),
    (:line, 145, :none),
    (:(=), (:call, :\, :x, :y), (:block,
        (:line, 145, :none),
        (:', (:call, :/, (:', :y), (:', :x)))
      )),
    (:line, 148, :none),
    (:(=), (:call, :./, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 148, :none),
        (:call, :/, :x, :y)
      )),
    (:line, 149, :none),
    (:(=), (:call, :.\, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 149, :none),
        (:call, :./, :y, :x)
      )),
    (:line, 150, :none),
    (:(=), (:call, :.*, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 150, :none),
        (:call, :*, :x, :y)
      )),
    (:line, 151, :none),
    (:(=), (:call, :.^, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 151, :none),
        (:call, :^, :x, :y)
      )),
    (:line, 152, :none),
    (:(=), (:call, :.+, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 152, :none),
        (:call, :+, :x, :y)
      )),
    (:line, 153, :none),
    (:(=), (:call, :.-, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 153, :none),
        (:call, :-, :x, :y)
      )),
    (:line, 154, :none),
    (:(=), (:call, :.<<, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
        (:line, 154, :none),
        (:call, :<<, :x, :y)
      )),
    (:line, 155, :none),
    (:(=), (:call, :.>>, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
        (:line, 155, :none),
        (:call, :>>, :x, :y)
      )),
    (:line, 157, :none),
    (:(=), (:call, :.==, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 157, :none),
        (:call, :(==), :x, :y)
      )),
    (:line, 158, :none),
    (:(=), (:call, :.!=, (:(::), :x, :Number), (:(::), :y, :Number)), (:block,
        (:line, 158, :none),
        (:call, :(!=), :x, :y)
      )),
    (:line, 159, :none),
    (:(=), (:call, :.<, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 159, :none),
        (:call, :<, :x, :y)
      )),
    (:line, 160, :none),
    (:(=), (:call, :.<=, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 160, :none),
        (:call, :(<=), :x, :y)
      )),
    (:line, 161, :none),
    (:const, (:(=), :.≤, :.<=)),
    (:line, 162, :none),
    (:const, (:(=), :.≠, :.!=)),
    (:line, 168, :none),
    "    <<(x, n)\n\nLeft bit shift operator, `x << n`. For `n >= 0`, the result is `x` shifted left\nby `n` bits, filling with `0`s. This is equivalent to `x * 2^n`. For `n < 0`,\nthis is equivalent to `x >> -n`.\n\n```jldoctest\njulia> Int8(3) << 2\n12\n\njulia> bits(Int8(3))\n\"00000011\"\n\njulia> bits(Int8(12))\n\"00001100\"\n```\nSee also [`>>`](:func:`>>`), [`>>>`](:func:`>>>`).\n",
    (:line, 187, :none),
    (:function, (:call, :<<, (:(::), :x, :Integer), (:(::), :c, :Integer)), (:block,
        (:line, 188, :none),
        (:&&, (:comparison, (:call, :typemin, :Int), :(<=), :c, :(<=), (:call, :typemax, :Int)), (:return, (:call, :<<, :x, (:call, :%, :c, :Int)))),
        (:line, 189, :none),
        (:&&, (:||, (:call, :(>=), :x, 0), (:call, :(>=), :c, 0)), (:return, (:call, :zero, :x))),
        (:line, 190, :none),
        (:call, :oftype, :x, -1)
      )),
    (:line, 192, :none),
    (:(=), (:call, :<<, (:(::), :x, :Integer), (:(::), :c, :Unsigned)), (:block,
        (:line, 192, :none),
        (:if, (:call, :(<=), :c, (:call, :typemax, :UInt)), (:call, :<<, :x, (:call, :%, :c, :UInt)), (:call, :zero, :x))
      )),
    (:line, 193, :none),
    (:(=), (:call, :<<, (:(::), :x, :Integer), (:(::), :c, :Int)), (:block,
        (:line, 193, :none),
        (:if, (:call, :(>=), :c, 0), (:call, :<<, :x, (:call, :unsigned, :c)), (:call, :>>, :x, (:call, :unsigned, (:call, :-, :c))))
      )),
    (:line, 195, :none),
    "    >>(x, n)\n\nRight bit shift operator, `x >> n`. For `n >= 0`, the result is `x` shifted\nright by `n` bits, where `n >= 0`, filling with `0`s if `x >= 0`, `1`s if `x <\n0`, preserving the sign of `x`. This is equivalent to `fld(x, 2^n)`. For `n <\n0`, this is equivalent to `x << -n`.\n\n\n```jldoctest\njulia> Int8(13) >> 2\n3\n\njulia> bits(Int8(13))\n\"00001101\"\n\njulia> bits(Int8(3))\n\"00000011\"\n\njulia> Int8(-14) >> 2\n-4\n\njulia> bits(Int8(-14))\n\"11110010\"\n\njulia> bits(Int8(-4))\n\"11111100\"\n```\nSee also [`>>>`](:func:`>>>`), [`<<`](:func:`<<`).\n",
    (:line, 225, :none),
    (:function, (:call, :>>, (:(::), :x, :Integer), (:(::), :c, :Integer)), (:block,
        (:line, 226, :none),
        (:&&, (:comparison, (:call, :typemin, :Int), :(<=), :c, :(<=), (:call, :typemax, :Int)), (:return, (:call, :>>, :x, (:call, :%, :c, :Int)))),
        (:line, 227, :none),
        (:&&, (:||, (:call, :(>=), :x, 0), (:call, :<, :c, 0)), (:return, (:call, :zero, :x))),
        (:line, 228, :none),
        (:call, :oftype, :x, -1)
      )),
    (:line, 230, :none),
    (:(=), (:call, :>>, (:(::), :x, :Integer), (:(::), :c, :Unsigned)), (:block,
        (:line, 230, :none),
        (:if, (:call, :(<=), :c, (:call, :typemax, :UInt)), (:call, :>>, :x, (:call, :%, :c, :UInt)), (:call, :zero, :x))
      )),
    (:line, 231, :none),
    (:(=), (:call, :>>, (:(::), :x, :Integer), (:(::), :c, :Int)), (:block,
        (:line, 231, :none),
        (:if, (:call, :(>=), :c, 0), (:call, :>>, :x, (:call, :unsigned, :c)), (:call, :<<, :x, (:call, :unsigned, (:call, :-, :c))))
      )),
    (:line, 233, :none),
    "    >>>(x, n)\n\nUnsigned right bit shift operator, `x >>> n`. For `n >= 0`, the result is `x`\nshifted right by `n` bits, where `n >= 0`, filling with `0`s. For `n < 0`, this\nis equivalent to `x << -n`.\n\nFor `Unsigned` integer types, this is equivalent to [`>>`](:func:`>>`). For\n`Signed` integer types, this is equivalent to `signed(unsigned(x) >> n)`.\n\n```jldoctest\njulia> Int8(-14) >>> 2\n60\n\njulia> bits(Int8(-14))\n\"11110010\"\n\njulia> bits(Int8(60))\n\"00111100\"\n```\n`BigInt`s are treated as if having infinite size, so no filling is required and this\nis equivalent to [`>>`](:func:`>>`).\n\nSee also [`>>`](:func:`>>`), [`<<`](:func:`<<`).\n",
    (:line, 258, :none),
    (:(=), (:call, :>>>, (:(::), :x, :Integer), (:(::), :c, :Integer)), (:block,
        (:line, 258, :none),
        (:if, (:comparison, (:call, :typemin, :Int), :(<=), :c, :(<=), (:call, :typemax, :Int)), (:call, :>>>, :x, (:call, :%, :c, :Int)), (:call, :zero, :x))
      )),
    (:line, 260, :none),
    (:(=), (:call, :>>>, (:(::), :x, :Integer), (:(::), :c, :Unsigned)), (:block,
        (:line, 260, :none),
        (:if, (:call, :(<=), :c, (:call, :typemax, :UInt)), (:call, :>>>, :x, (:call, :%, :c, :UInt)), (:call, :zero, :x))
      )),
    (:line, 261, :none),
    (:(=), (:call, :>>>, (:(::), :x, :Integer), (:(::), :c, :Int)), (:block,
        (:line, 261, :none),
        (:if, (:call, :(>=), :c, 0), (:call, :>>>, :x, (:call, :unsigned, :c)), (:call, :<<, :x, (:call, :unsigned, (:call, :-, :c))))
      )),
    (:line, 266, :none),
    (:(=), (:call, (:curly, :div, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 266, :none),
        (:call, :convert, :T, (:call, :round, (:call, :/, (:call, :-, :x, (:call, :rem, :x, :y)), :y)))
      )),
    (:line, 267, :none),
    (:(=), (:call, (:curly, :fld, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 267, :none),
        (:call, :convert, :T, (:call, :round, (:call, :/, (:call, :-, :x, (:call, :mod, :x, :y)), :y)))
      )),
    (:line, 268, :none),
    (:(=), (:call, (:curly, :cld, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 268, :none),
        (:call, :convert, :T, (:call, :round, (:call, :/, (:call, :-, :x, (:call, :modCeil, :x, :y)), :y)))
      )),
    (:line, 271, :none),
    (:(=), (:call, (:curly, :modCeil, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 271, :none),
        (:call, :convert, :T, (:call, :-, :x, (:call, :*, :y, (:call, :ceil, (:call, :/, :x, :y)))))
      )),
    (:line, 274, :none),
    (:const, (:(=), :%, :rem)),
    (:line, 275, :none),
    (:(=), (:call, :.%, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 275, :none),
        (:call, :%, :x, :y)
      )),
    (:line, 276, :none),
    (:const, (:(=), :÷, :div)),
    (:line, 277, :none),
    (:(=), (:call, :.÷, (:(::), :x, :Real), (:(::), :y, :Real)), (:block,
        (:line, 277, :none),
        (:call, :÷, :x, :y)
      )),
    (:line, 280, :none),
    "    mod1(x, y)\n\nModulus after flooring division, returning a value `r` such that `mod(r, y) == mod(x, y)`\n in the range ``(0, y]`` for positive `y` and in the range ``[y,0)`` for negative `y`.\n",
    (:line, 286, :none),
    (:(=), (:call, (:curly, :mod1, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 286, :none),
        (:block,
          (:(=), :m, (:call, :mod, :x, :y)),
          (:call, :ifelse, (:call, :(==), :m, 0), :y, :m)
        )
      )),
    (:line, 288, :none),
    (:(=), (:call, (:curly, :mod1, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 288, :none),
        (:call, :+, (:call, :mod, (:call, :-, (:call, :+, :x, :y), (:call, :T, 1)), :y), (:call, :T, 1))
      )),
    (:line, 291, :none),
    "    fld1(x, y)\n\nFlooring division, returning a value consistent with `mod1(x,y)`\n\n```julia\nx == fld(x,y)*y + mod(x,y)\nx == (fld1(x,y)-1)*y + mod1(x,y)\n```\n",
    (:line, 301, :none),
    (:(=), (:call, (:curly, :fld1, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 301, :none),
        (:block,
          (:(=), :m, (:call, :mod, :x, :y)),
          (:call, :fld, (:call, :-, :x, :m), :y)
        )
      )),
    (:line, 303, :none),
    (:(=), (:call, (:curly, :fld1, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 303, :none),
        (:call, :fld, (:call, :-, (:call, :+, :x, :y), (:call, :T, 1)), :y)
      )),
    (:line, 305, :none),
    "    fldmod1(x, y)\n\nReturn `(fld1(x,y), mod1(x,y))`.\n",
    (:line, 310, :none),
    (:(=), (:call, (:curly, :fldmod1, (:<:, :T, :Real)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 310, :none),
        (:tuple, (:call, :fld1, :x, :y), (:call, :mod1, :x, :y))
      )),
    (:line, 312, :none),
    (:(=), (:call, (:curly, :fldmod1, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :y, :T)), (:block,
        (:line, 312, :none),
        (:tuple, (:call, :fld1, :x, :y), (:call, :mod1, :x, :y))
      )),
    (:line, 315, :none),
    (:(=), (:call, :ctranspose, :x), (:block,
        (:line, 315, :none),
        (:call, :conj, (:call, :transpose, :x))
      )),
    (:line, 316, :none),
    (:(=), (:call, :conj, :x), (:block,
        (:line, 316, :none),
        :x
      )),
    (:line, 319, :none),
    (:(=), (:call, :Ac_mul_B, :a, :b), (:block,
        (:line, 319, :none),
        (:call, :*, (:call, :ctranspose, :a), :b)
      )),
    (:line, 320, :none),
    (:(=), (:call, :A_mul_Bc, :a, :b), (:block,
        (:line, 320, :none),
        (:call, :*, :a, (:call, :ctranspose, :b))
      )),
    (:line, 321, :none),
    (:(=), (:call, :Ac_mul_Bc, :a, :b), (:block,
        (:line, 321, :none),
        (:call, :*, (:call, :ctranspose, :a), (:call, :ctranspose, :b))
      )),
    (:line, 322, :none),
    (:(=), (:call, :At_mul_B, :a, :b), (:block,
        (:line, 322, :none),
        (:call, :*, (:call, :transpose, :a), :b)
      )),
    (:line, 323, :none),
    (:(=), (:call, :A_mul_Bt, :a, :b), (:block,
        (:line, 323, :none),
        (:call, :*, :a, (:call, :transpose, :b))
      )),
    (:line, 324, :none),
    (:(=), (:call, :At_mul_Bt, :a, :b), (:block,
        (:line, 324, :none),
        (:call, :*, (:call, :transpose, :a), (:call, :transpose, :b))
      )),
    (:line, 327, :none),
    (:(=), (:call, :Ac_rdiv_B, :a, :b), (:block,
        (:line, 327, :none),
        (:call, :/, (:call, :ctranspose, :a), :b)
      )),
    (:line, 328, :none),
    (:(=), (:call, :A_rdiv_Bc, :a, :b), (:block,
        (:line, 328, :none),
        (:call, :/, :a, (:call, :ctranspose, :b))
      )),
    (:line, 329, :none),
    (:(=), (:call, :Ac_rdiv_Bc, :a, :b), (:block,
        (:line, 329, :none),
        (:call, :/, (:call, :ctranspose, :a), (:call, :ctranspose, :b))
      )),
    (:line, 330, :none),
    (:(=), (:call, :At_rdiv_B, :a, :b), (:block,
        (:line, 330, :none),
        (:call, :/, (:call, :transpose, :a), :b)
      )),
    (:line, 331, :none),
    (:(=), (:call, :A_rdiv_Bt, :a, :b), (:block,
        (:line, 331, :none),
        (:call, :/, :a, (:call, :transpose, :b))
      )),
    (:line, 332, :none),
    (:(=), (:call, :At_rdiv_Bt, :a, :b), (:block,
        (:line, 332, :none),
        (:call, :/, (:call, :transpose, :a), (:call, :transpose, :b))
      )),
    (:line, 334, :none),
    (:(=), (:call, :Ac_ldiv_B, :a, :b), (:block,
        (:line, 334, :none),
        (:call, :\, (:call, :ctranspose, :a), :b)
      )),
    (:line, 335, :none),
    (:(=), (:call, :A_ldiv_Bc, :a, :b), (:block,
        (:line, 335, :none),
        (:call, :\, :a, (:call, :ctranspose, :b))
      )),
    (:line, 336, :none),
    (:(=), (:call, :Ac_ldiv_Bc, :a, :b), (:block,
        (:line, 336, :none),
        (:call, :\, (:call, :ctranspose, :a), (:call, :ctranspose, :b))
      )),
    (:line, 337, :none),
    (:(=), (:call, :At_ldiv_B, :a, :b), (:block,
        (:line, 337, :none),
        (:call, :\, (:call, :transpose, :a), :b)
      )),
    (:line, 338, :none),
    (:(=), (:call, :A_ldiv_Bt, :a, :b), (:block,
        (:line, 338, :none),
        (:call, :\, :a, (:call, :transpose, :b))
      )),
    (:line, 339, :none),
    (:(=), (:call, :At_ldiv_Bt, :a, :b), (:block,
        (:line, 339, :none),
        (:call, :At_ldiv_B, :a, (:call, :transpose, :b))
      )),
    (:line, 340, :none),
    (:(=), (:call, :Ac_ldiv_Bt, :a, :b), (:block,
        (:line, 340, :none),
        (:call, :Ac_ldiv_B, :a, (:call, :transpose, :b))
      )),
    (:line, 342, :none),
    (:(=), (:call, (:curly, :widen, (:<:, :T, :Number)), (:(::), :x, :T)), (:block,
        (:line, 342, :none),
        (:call, :convert, (:call, :widen, :T), :x)
      )),
    (:line, 344, :none),
    (:(=), (:call, :eltype, (:(::), :Type)), (:block,
        (:line, 344, :none),
        :Any
      )),
    (:line, 345, :none),
    (:(=), (:call, :eltype, (:(::), (:curly, :Type, :Any))), (:block,
        (:line, 345, :none),
        :Any
      )),
    (:line, 346, :none),
    (:(=), (:call, :eltype, (:(::), :t, :DataType)), (:block,
        (:line, 346, :none),
        (:call, :eltype, (:call, :supertype, :t))
      )),
    (:line, 347, :none),
    (:(=), (:call, :eltype, :x), (:block,
        (:line, 347, :none),
        (:call, :eltype, (:call, :typeof, :x))
      )),
    (:line, 350, :none),
    (:(=), (:call, :|>, :x, :f), (:block,
        (:line, 350, :none),
        (:call, :f, :x)
      )),
    (:line, 354, :none),
    (:(=), (:call, :promote_shape, (:(::), (:curly, :Tuple)), (:(::), (:curly, :Tuple))), (:block,
        (:line, 354, :none),
        (:tuple,)
      )),
    (:line, 356, :none),
    (:function, (:call, :promote_shape, (:(::), :a, (:curly, :Tuple, :Int)), (:(::), :b, (:curly, :Tuple, :Int))), (:block,
        (:line, 357, :none),
        (:if, (:call, :(!=), (:ref, :a, 1), (:ref, :b, 1)), (:block,
            (:line, 358, :none),
            (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
          )),
        (:line, 360, :none),
        (:return, :a)
      )),
    (:line, 363, :none),
    (:function, (:call, :promote_shape, (:(::), :a, (:curly, :Tuple, :Int, :Int)), (:(::), :b, (:curly, :Tuple, :Int))), (:block,
        (:line, 364, :none),
        (:if, (:||, (:call, :(!=), (:ref, :a, 1), (:ref, :b, 1)), (:call, :(!=), (:ref, :a, 2), 1)), (:block,
            (:line, 365, :none),
            (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
          )),
        (:line, 367, :none),
        (:return, :a)
      )),
    (:line, 370, :none),
    (:(=), (:call, :promote_shape, (:(::), :a, (:curly, :Tuple, :Int)), (:(::), :b, (:curly, :Tuple, :Int, :Int))), (:block,
        (:line, 370, :none),
        (:call, :promote_shape, :b, :a)
      )),
    (:line, 372, :none),
    (:function, (:call, :promote_shape, (:(::), :a, (:curly, :Tuple, :Int, :Int)), (:(::), :b, (:curly, :Tuple, :Int, :Int))), (:block,
        (:line, 373, :none),
        (:if, (:||, (:call, :(!=), (:ref, :a, 1), (:ref, :b, 1)), (:call, :(!=), (:ref, :a, 2), (:ref, :b, 2))), (:block,
            (:line, 374, :none),
            (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
          )),
        (:line, 376, :none),
        (:return, :a)
      )),
    (:line, 379, :none),
    (:function, (:call, :promote_shape, (:(::), :a, :Dims), (:(::), :b, :Dims)), (:block,
        (:line, 380, :none),
        (:if, (:call, :<, (:call, :length, :a), (:call, :length, :b)), (:block,
            (:line, 381, :none),
            (:return, (:call, :promote_shape, :b, :a))
          )),
        (:line, 383, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :b))), (:block,
            (:line, 384, :none),
            (:if, (:call, :(!=), (:ref, :a, :i), (:ref, :b, :i)), (:block,
                (:line, 385, :none),
                (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
              ))
          )),
        (:line, 388, :none),
        (:for, (:(=), :i, (:(:), (:call, :+, (:call, :length, :b), 1), (:call, :length, :a))), (:block,
            (:line, 389, :none),
            (:if, (:call, :(!=), (:ref, :a, :i), 1), (:block,
                (:line, 390, :none),
                (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
              ))
          )),
        (:line, 393, :none),
        (:return, :a)
      )),
    (:line, 396, :none),
    (:function, (:call, :promote_shape, (:(::), :a, :AbstractArray), (:(::), :b, :AbstractArray)), (:block,
        (:line, 397, :none),
        (:call, :promote_shape, (:call, :indices, :a), (:call, :indices, :b))
      )),
    (:line, 400, :none),
    (:function, (:call, :promote_shape, (:(::), :a, :Indices), (:(::), :b, :Indices)), (:block,
        (:line, 401, :none),
        (:if, (:call, :<, (:call, :length, :a), (:call, :length, :b)), (:block,
            (:line, 402, :none),
            (:return, (:call, :promote_shape, :b, :a))
          )),
        (:line, 404, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :b))), (:block,
            (:line, 405, :none),
            (:if, (:call, :(!=), (:ref, :a, :i), (:ref, :b, :i)), (:block,
                (:line, 406, :none),
                (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
              ))
          )),
        (:line, 409, :none),
        (:for, (:(=), :i, (:(:), (:call, :+, (:call, :length, :b), 1), (:call, :length, :a))), (:block,
            (:line, 410, :none),
            (:if, (:call, :(!=), (:ref, :a, :i), (:(:), 1, 1)), (:block,
                (:line, 411, :none),
                (:call, :throw, (:call, :DimensionMismatch, "dimensions must match"))
              ))
          )),
        (:line, 414, :none),
        (:return, :a)
      )),
    (:line, 417, :none),
    (:function, (:call, :throw_setindex_mismatch, :X, :I), (:block,
        (:line, 418, :none),
        (:if, (:call, :(==), (:call, :length, :I), 1), (:block,
            (:line, 419, :none),
            (:call, :throw, (:call, :DimensionMismatch, (:string, "tried to assign ", (:call, :length, :X), " elements to ", (:ref, :I, 1), " destinations")))
          ), (:block,
            (:line, 421, :none),
            (:call, :throw, (:call, :DimensionMismatch, (:string, "tried to assign ", (:call, :dims2string, (:call, :size, :X)), " array to ", (:call, :dims2string, :I), " destination")))
          ))
      )),
    (:line, 430, :none),
    (:function, (:call, :setindex_shape_check, (:(::), :X, :AbstractArray), (:..., (:(::), :I, :Integer))), (:block,
        (:line, 431, :none),
        (:(=), :li, (:call, :ndims, :X)),
        (:line, 432, :none),
        (:(=), :lj, (:call, :length, :I)),
        (:line, 433, :none),
        (:(=), :i, (:(=), :j, 1)),
        (:line, 434, :none),
        (:while, true, (:block,
            (:line, 435, :none),
            (:(=), :ii, (:call, :length, (:call, :indices, :X, :i))),
            (:line, 436, :none),
            (:(=), :jj, (:ref, :I, :j)),
            (:line, 437, :none),
            (:if, (:||, (:call, :(==), :i, :li), (:call, :(==), :j, :lj)), (:block,
                (:line, 438, :none),
                (:while, (:call, :<, :i, :li), (:block,
                    (:line, 439, :none),
                    (:+=, :i, 1),
                    (:line, 440, :none),
                    (:*=, :ii, (:call, :length, (:call, :indices, :X, :i)))
                  )),
                (:line, 442, :none),
                (:while, (:call, :<, :j, :lj), (:block,
                    (:line, 443, :none),
                    (:+=, :j, 1),
                    (:line, 444, :none),
                    (:*=, :jj, (:ref, :I, :j))
                  )),
                (:line, 446, :none),
                (:if, (:call, :(!=), :ii, :jj), (:block,
                    (:line, 447, :none),
                    (:call, :throw_setindex_mismatch, :X, :I)
                  )),
                (:line, 449, :none),
                (:return, nothing)
              )),
            (:line, 451, :none),
            (:if, (:call, :(==), :ii, :jj), (:block,
                (:line, 452, :none),
                (:+=, :i, 1),
                (:line, 453, :none),
                (:+=, :j, 1)
              ), (:block,
                (:line, 454, :none),
                (:if, (:call, :(==), :ii, 1), (:block,
                    (:line, 455, :none),
                    (:+=, :i, 1)
                  ), (:block,
                    (:line, 456, :none),
                    (:if, (:call, :(==), :jj, 1), (:block,
                        (:line, 457, :none),
                        (:+=, :j, 1)
                      ), (:block,
                        (:line, 459, :none),
                        (:call, :throw_setindex_mismatch, :X, :I)
                      ))
                  ))
              ))
          ))
      )),
    (:line, 464, :none),
    (:(=), (:call, :setindex_shape_check, (:(::), :X, :AbstractArray)), (:block,
        (:line, 464, :none),
        (:||, (:call, :(==), (:call, :_length, :X), 1), (:call, :throw_setindex_mismatch, :X, (:tuple,)))
      )),
    (:line, 467, :none),
    (:(=), (:call, :setindex_shape_check, (:(::), :X, :AbstractArray), (:(::), :i, :Integer)), (:block,
        (:line, 467, :none),
        (:||, (:call, :(==), (:call, :_length, :X), :i), (:call, :throw_setindex_mismatch, :X, (:tuple, :i)))
      )),
    (:line, 470, :none),
    (:(=), (:call, (:curly, :setindex_shape_check, :T), (:(::), :X, (:curly, :AbstractArray, :T, 1)), (:(::), :i, :Integer)), (:block,
        (:line, 470, :none),
        (:||, (:call, :(==), (:call, :_length, :X), :i), (:call, :throw_setindex_mismatch, :X, (:tuple, :i)))
      )),
    (:line, 473, :none),
    (:(=), (:call, (:curly, :setindex_shape_check, :T), (:(::), :X, (:curly, :AbstractArray, :T, 1)), (:(::), :i, :Integer), (:(::), :j, :Integer)), (:block,
        (:line, 473, :none),
        (:||, (:call, :(==), (:call, :_length, :X), (:call, :*, :i, :j)), (:call, :throw_setindex_mismatch, :X, (:tuple, :i, :j)))
      )),
    (:line, 476, :none),
    (:function, (:call, (:curly, :setindex_shape_check, :T), (:(::), :X, (:curly, :AbstractArray, :T, 2)), (:(::), :i, :Integer), (:(::), :j, :Integer)), (:block,
        (:line, 477, :none),
        (:if, (:call, :(!=), (:call, :length, :X), (:call, :*, :i, :j)), (:block,
            (:line, 478, :none),
            (:call, :throw_setindex_mismatch, :X, (:tuple, :i, :j))
          )),
        (:line, 480, :none),
        (:(=), :sx1, (:call, :length, (:call, :indices, :X, 1))),
        (:line, 481, :none),
        (:if, (:call, :!, (:||, (:call, :(==), :i, 1), (:||, (:call, :(==), :i, :sx1), (:call, :(==), :sx1, 1)))), (:block,
            (:line, 482, :none),
            (:call, :throw_setindex_mismatch, :X, (:tuple, :i, :j))
          ))
      )),
    (:line, 485, :none),
    (:(=), (:call, :setindex_shape_check, :X, (:..., :I)), (:block,
        (:line, 485, :none),
        :nothing
      )),
    (:line, 488, :none),
    (:(=), (:call, :to_index, (:(::), :i, :Int)), (:block,
        (:line, 488, :none),
        :i
      )),
    (:line, 489, :none),
    (:(=), (:call, :to_index, (:(::), :i, :Integer)), (:block,
        (:line, 489, :none),
        (:(::), (:call, :convert, :Int, :i), :Int)
      )),
    (:line, 490, :none),
    (:(=), (:call, :to_index, (:(::), :c, :Colon)), (:block,
        (:line, 490, :none),
        :c
      )),
    (:line, 491, :none),
    (:(=), (:call, :to_index, (:(::), :I, (:curly, :AbstractArray, :Bool))), (:block,
        (:line, 491, :none),
        (:call, :find, :I)
      )),
    (:line, 492, :none),
    (:(=), (:call, :to_index, (:(::), :A, :AbstractArray)), (:block,
        (:line, 492, :none),
        :A
      )),
    (:line, 493, :none),
    (:(=), (:call, (:curly, :to_index, (:<:, :T, :AbstractArray)), (:(::), :A, (:curly, :AbstractArray, :T))), (:block,
        (:line, 493, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "invalid index: ", :A)))
      )),
    (:line, 494, :none),
    (:(=), (:call, :to_index, (:(::), :A, (:curly, :AbstractArray, :Colon))), (:block,
        (:line, 494, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "invalid index: ", :A)))
      )),
    (:line, 495, :none),
    (:(=), (:call, :to_index, :i), (:block,
        (:line, 495, :none),
        (:call, :throw, (:call, :ArgumentError, (:string, "invalid index: ", :i)))
      )),
    (:line, 497, :none),
    (:(=), (:call, :to_indexes), (:block,
        (:line, 497, :none),
        (:tuple,)
      )),
    (:line, 498, :none),
    (:(=), (:call, :to_indexes, :i1), (:block,
        (:line, 498, :none),
        (:tuple, (:call, :to_index, :i1))
      )),
    (:line, 499, :none),
    (:(=), (:call, :to_indexes, :i1, (:..., :I)), (:block,
        (:line, 499, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:tuple, (:call, :to_index, :i1), (:..., (:call, :to_indexes, (:..., :I))))
        )
      )),
    (:line, 502, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :+
          ), (:quote, #QuoteNode
            :-
          ))), (:block,
        (:line, 503, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 504, :none),
            (:function, (:call, (:$, :f), (:(::), :r1, :OrdinalRange), (:(::), :r2, :OrdinalRange)), (:block,
                (:line, 505, :none),
                (:(=), :r1l, (:call, :length, :r1)),
                (:line, 506, :none),
                (:||, (:call, :(==), :r1l, (:call, :length, :r2)), (:call, :throw, (:call, :DimensionMismatch, "argument dimensions must match"))),
                (:line, 508, :none),
                (:call, :range, (:call, (:$, :f), (:call, :first, :r1), (:call, :first, :r2)), (:call, (:$, :f), (:call, :step, :r1), (:call, :step, :r2)), :r1l)
              )),
            (:line, 511, :none),
            (:function, (:call, (:curly, (:$, :f), (:<:, :T, :AbstractFloat)), (:(::), :r1, (:curly, :FloatRange, :T)), (:(::), :r2, (:curly, :FloatRange, :T))), (:block,
                (:line, 512, :none),
                (:(=), :len, (:., :r1, (:quote, #QuoteNode
                      :len
                    ))),
                (:line, 513, :none),
                (:||, (:call, :(==), :len, (:., :r2, (:quote, #QuoteNode
                        :len
                      ))), (:call, :throw, (:call, :DimensionMismatch, "argument dimensions must match"))),
                (:line, 515, :none),
                (:(=), (:tuple, :divisor1, :divisor2), (:tuple, (:., :r1, (:quote, #QuoteNode
                        :divisor
                      )), (:., :r2, (:quote, #QuoteNode
                        :divisor
                      )))),
                (:line, 516, :none),
                (:if, (:call, :(==), :divisor1, :divisor2), (:block,
                    (:line, 517, :none),
                    (:call, (:curly, :FloatRange, :T), (:call, (:$, :f), (:., :r1, (:quote, #QuoteNode
                            :start
                          )), (:., :r2, (:quote, #QuoteNode
                            :start
                          ))), (:call, (:$, :f), (:., :r1, (:quote, #QuoteNode
                            :step
                          )), (:., :r2, (:quote, #QuoteNode
                            :step
                          ))), :len, :divisor1)
                  ), (:block,
                    (:line, 520, :none),
                    (:(=), :d1, (:call, :Int, :divisor1)),
                    (:line, 521, :none),
                    (:(=), :d2, (:call, :Int, :divisor2)),
                    (:line, 522, :none),
                    (:(=), :d, (:call, :lcm, :d1, :d2)),
                    (:line, 523, :none),
                    (:(=), :s1, (:call, :div, :d, :d1)),
                    (:line, 524, :none),
                    (:(=), :s2, (:call, :div, :d, :d2)),
                    (:line, 525, :none),
                    (:call, (:curly, :FloatRange, :T), (:call, (:$, :f), (:call, :*, (:., :r1, (:quote, #QuoteNode
                              :start
                            )), :s1), (:call, :*, (:., :r2, (:quote, #QuoteNode
                              :start
                            )), :s2)), (:call, (:$, :f), (:call, :*, (:., :r1, (:quote, #QuoteNode
                              :step
                            )), :s1), (:call, :*, (:., :r2, (:quote, #QuoteNode
                              :step
                            )), :s2)), :len, :d)
                  ))
              )),
            (:line, 530, :none),
            (:function, (:call, (:curly, (:$, :f), (:<:, :T, :AbstractFloat)), (:(::), :r1, (:curly, :LinSpace, :T)), (:(::), :r2, (:curly, :LinSpace, :T))), (:block,
                (:line, 531, :none),
                (:(=), :len, (:., :r1, (:quote, #QuoteNode
                      :len
                    ))),
                (:line, 532, :none),
                (:||, (:call, :(==), :len, (:., :r2, (:quote, #QuoteNode
                        :len
                      ))), (:call, :throw, (:call, :DimensionMismatch, "argument dimensions must match"))),
                (:line, 534, :none),
                (:(=), (:tuple, :divisor1, :divisor2), (:tuple, (:., :r1, (:quote, #QuoteNode
                        :divisor
                      )), (:., :r2, (:quote, #QuoteNode
                        :divisor
                      )))),
                (:line, 535, :none),
                (:if, (:call, :(==), :divisor1, :divisor2), (:block,
                    (:line, 536, :none),
                    (:call, (:curly, :LinSpace, :T), (:call, (:$, :f), (:., :r1, (:quote, #QuoteNode
                            :start
                          )), (:., :r2, (:quote, #QuoteNode
                            :start
                          ))), (:call, (:$, :f), (:., :r1, (:quote, #QuoteNode
                            :stop
                          )), (:., :r2, (:quote, #QuoteNode
                            :stop
                          ))), :len, :divisor1)
                  ), (:block,
                    (:line, 539, :none),
                    (:call, :linspace, (:call, :convert, :T, (:call, (:$, :f), (:call, :first, :r1), (:call, :first, :r2))), (:call, :convert, :T, (:call, (:$, :f), (:call, :last, :r1), (:call, :last, :r2))), :len)
                  ))
              )),
            (:line, 544, :none),
            (:(=), (:call, (:$, :f), (:(::), :r1, (:curly, :Union, :FloatRange, :OrdinalRange, :LinSpace)), (:(::), :r2, (:curly, :Union, :FloatRange, :OrdinalRange, :LinSpace))), (:block,
                (:line, 544, :none),
                (:call, (:$, :f), (:..., (:call, :promote, :r1, :r2)))
              ))
          ))
      )),
    (:line, 552, :none),
    (:macro, (:call, :vectorize_1arg, :S, :f), (:block,
        (:line, 553, :none),
        (:(=), :S, (:call, :esc, :S)),
        (:line, 553, :none),
        (:(=), :f, (:call, :esc, :f)),
        (:line, 553, :none),
        (:(=), :T, (:call, :esc, (:quote, #QuoteNode
              :T
            ))),
        (:line, 554, :none),
        (:quote, (:block,
            (:line, 555, :none),
            (:(=), (:call, (:curly, (:$, :f), (:<:, (:$, :T), (:$, :S))), (:(::), :x, (:curly, :AbstractArray, (:$, :T)))), (:block,
                (:line, 555, :none),
                (:comprehension, (:generator, (:call, (:$, :f), :elem), (:(=), :elem, :x)))
              ))
          ))
      )),
    (:line, 559, :none),
    (:macro, (:call, :vectorize_2arg, :S, :f), (:block,
        (:line, 560, :none),
        (:(=), :S, (:call, :esc, :S)),
        (:line, 560, :none),
        (:(=), :f, (:call, :esc, :f)),
        (:line, 560, :none),
        (:(=), :T1, (:call, :esc, (:quote, #QuoteNode
              :T1
            ))),
        (:line, 560, :none),
        (:(=), :T2, (:call, :esc, (:quote, #QuoteNode
              :T2
            ))),
        (:line, 561, :none),
        (:quote, (:block,
            (:line, 562, :none),
            (:(=), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S)), (:<:, (:$, :T2), (:$, :S))), (:(::), :x, (:$, :T1)), (:(::), :y, (:curly, :AbstractArray, (:$, :T2)))), (:block,
                (:line, 562, :none),
                (:comprehension, (:generator, (:call, (:$, :f), :x, :z), (:(=), :z, :y)))
              )),
            (:line, 563, :none),
            (:(=), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S)), (:<:, (:$, :T2), (:$, :S))), (:(::), :x, (:curly, :AbstractArray, (:$, :T1))), (:(::), :y, (:$, :T2))), (:block,
                (:line, 563, :none),
                (:comprehension, (:generator, (:call, (:$, :f), :z, :y), (:(=), :z, :x)))
              )),
            (:line, 564, :none),
            (:(=), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S)), (:<:, (:$, :T2), (:$, :S))), (:(::), :x, (:curly, :AbstractArray, (:$, :T1))), (:(::), :y, (:curly, :AbstractArray, (:$, :T2)))), (:block,
                (:line, 564, :none),
                (:comprehension, (:generator, (:call, (:$, :f), :xx, :yy), (:(=), (:tuple, :xx, :yy), (:call, :zip, :x, :y))))
              ))
          ))
      )),
    (:line, 571, :none),
    (:function, (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), :x, :y), (:block,
        (:line, 572, :none),
        (:comprehension, (:generator, (:call, :ifelse, :ci, :x, :y), (:(=), :ci, :c)))
      )),
    (:line, 575, :none),
    (:function, (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), (:(::), :x, :AbstractArray), (:(::), :y, :AbstractArray)), (:block,
        (:line, 576, :none),
        (:comprehension, (:generator, (:call, :ifelse, :c_elem, :x_elem, :y_elem), (:(=), (:tuple, :c_elem, :x_elem, :y_elem), (:call, :zip, :c, :x, :y))))
      )),
    (:line, 579, :none),
    (:function, (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), (:(::), :x, :AbstractArray), :y), (:block,
        (:line, 580, :none),
        (:comprehension, (:generator, (:call, :ifelse, :c_elem, :x_elem, :y), (:(=), (:tuple, :c_elem, :x_elem), (:call, :zip, :c, :x))))
      )),
    (:line, 583, :none),
    (:function, (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), :x, (:(::), :y, :AbstractArray)), (:block,
        (:line, 584, :none),
        (:comprehension, (:generator, (:call, :ifelse, :c_elem, :x, :y_elem), (:(=), (:tuple, :c_elem, :y_elem), (:call, :zip, :c, :y))))
      )),
    (:line, 589, :none),
    (:type, false, (:curly, :Pair, :A, :B), (:block,
        (:line, 590, :none),
        (:(::), :first, :A),
        (:line, 591, :none),
        (:(::), :second, :B)
      )),
    (:line, 594, :none),
    (:const, (:(=), :(=>), :Pair)),
    (:line, 596, :none),
    (:(=), (:call, :start, (:(::), :p, :Pair)), (:block,
        (:line, 596, :none),
        1
      )),
    (:line, 597, :none),
    (:(=), (:call, :done, (:(::), :p, :Pair), :i), (:block,
        (:line, 597, :none),
        (:call, :>, :i, 2)
      )),
    (:line, 598, :none),
    (:(=), (:call, :next, (:(::), :p, :Pair), :i), (:block,
        (:line, 598, :none),
        (:tuple, (:call, :getfield, :p, :i), (:call, :+, :i, 1))
      )),
    (:line, 600, :none),
    (:(=), (:call, :indexed_next, (:(::), :p, :Pair), (:(::), :i, :Int), :state), (:block,
        (:line, 600, :none),
        (:tuple, (:call, :getfield, :p, :i), (:call, :+, :i, 1))
      )),
    (:line, 602, :none),
    (:(=), (:call, :hash, (:(::), :p, :Pair), (:(::), :h, :UInt)), (:block,
        (:line, 602, :none),
        (:call, :hash, (:., :p, (:quote, #QuoteNode
              :second
            )), (:call, :hash, (:., :p, (:quote, #QuoteNode
                :first
              )), :h))
      )),
    (:line, 604, :none),
    (:(=), (:call, :(==), (:(::), :p, :Pair), (:(::), :q, :Pair)), (:block,
        (:line, 604, :none),
        (:call, :&, (:call, :(==), (:., :p, (:quote, #QuoteNode
                :first
              )), (:., :q, (:quote, #QuoteNode
                :first
              ))), (:call, :(==), (:., :p, (:quote, #QuoteNode
                :second
              )), (:., :q, (:quote, #QuoteNode
                :second
              ))))
      )),
    (:line, 605, :none),
    (:(=), (:call, :isequal, (:(::), :p, :Pair), (:(::), :q, :Pair)), (:block,
        (:line, 605, :none),
        (:call, :&, (:call, :isequal, (:., :p, (:quote, #QuoteNode
                :first
              )), (:., :q, (:quote, #QuoteNode
                :first
              ))), (:call, :isequal, (:., :p, (:quote, #QuoteNode
                :second
              )), (:., :q, (:quote, #QuoteNode
                :second
              ))))
      )),
    (:line, 607, :none),
    (:(=), (:call, :isless, (:(::), :p, :Pair), (:(::), :q, :Pair)), (:block,
        (:line, 607, :none),
        (:call, :ifelse, (:call, :!, (:call, :isequal, (:., :p, (:quote, #QuoteNode
                  :first
                )), (:., :q, (:quote, #QuoteNode
                  :first
                )))), (:call, :isless, (:., :p, (:quote, #QuoteNode
                :first
              )), (:., :q, (:quote, #QuoteNode
                :first
              ))), (:call, :isless, (:., :p, (:quote, #QuoteNode
                :second
              )), (:., :q, (:quote, #QuoteNode
                :second
              ))))
      )),
    (:line, 609, :none),
    (:(=), (:call, :getindex, (:(::), :p, :Pair), (:(::), :i, :Int)), (:block,
        (:line, 609, :none),
        (:call, :getfield, :p, :i)
      )),
    (:line, 610, :none),
    (:(=), (:call, :getindex, (:(::), :p, :Pair), (:(::), :i, :Real)), (:block,
        (:line, 610, :none),
        (:call, :getfield, :p, (:call, :convert, :Int, :i))
      )),
    (:line, 611, :none),
    (:(=), (:call, (:curly, :reverse, :A, :B), (:(::), :p, (:curly, :Pair, :A, :B))), (:block,
        (:line, 611, :none),
        (:call, (:curly, :Pair, :B, :A), (:., :p, (:quote, #QuoteNode
              :second
            )), (:., :p, (:quote, #QuoteNode
              :first
            )))
      )),
    (:line, 613, :none),
    (:(=), (:call, :endof, (:(::), :p, :Pair)), (:block,
        (:line, 613, :none),
        2
      )),
    (:line, 614, :none),
    (:(=), (:call, :length, (:(::), :p, :Pair)), (:block,
        (:line, 614, :none),
        2
      )),
    (:line, 617, :none),
    (:global, ://, :>:, :<|, :hcat, :hvcat, :⋅, :×, :∈, :∉, :∋, :∌, :⊆, :⊈, :⊊, :∩, :∪, :√, :∛),
    (:line, 619, :none),
    (:(=), :this_module, (:call, :current_module)),
    (:line, 620, :none),
    (:module, false, :Operators, (:block,
        (:line, 620, :none),
        (:line, 622, :none),
        (:export, :!, :(!=), :(!==), :(===), :$, :%, :.%, :÷, :.÷, :&, :*, :+, :-, :.!=, :.+, :.-, :.*, :./, :.<, :.<=, :.==, :.>, :.>=, :.\, :.^, :/, ://, :<, :<:, :>:, :<<, :(<=), :(==), :>, :(>=), :≥, :≤, :≠, :.≥, :.≤, :.≠, :>>, :.>>, :.<<, :>>>, :\, :^, :|, :|>, :<|, :~, :⋅, :×, :∈, :∉, :∋, :∌, :⊆, :⊈, :⊊, :∩, :∪, :√, :∛, :colon, :hcat, :vcat, :hvcat, :getindex, :setindex!, :transpose, :ctranspose),
        (:line, 696, :none),
        (:toplevel, (:import, :., :., :this_module, :!), (:import, :., :., :this_module, :(!=)), (:import, :., :., :this_module, :$), (:import, :., :., :this_module, :%), (:import, :., :., :this_module, :.%), (:import, :., :., :this_module, :÷), (:import, :., :., :this_module, :.÷), (:import, :., :., :this_module, :&), (:import, :., :., :this_module, :*), (:import, :., :., :this_module, :+), (:import, :., :., :this_module, :-), (:import, :., :., :this_module, :.!=), (:import, :., :., :this_module, :.+), (:import, :., :., :this_module, :.-), (:import, :., :., :this_module, :.*), (:import, :., :., :this_module, :./), (:import, :., :., :this_module, :.<), (:import, :., :., :this_module, :.<=), (:import, :., :., :this_module, :.==), (:import, :., :., :this_module, :.>), (:import, :., :., :this_module, :.>=), (:import, :., :., :this_module, :.\), (:import, :., :., :this_module, :.^), (:import, :., :., :this_module, :/), (:import, :., :., :this_module, ://), (:import, :., :., :this_module, :<), (:import, :., :., :this_module, :<:), (:import, :., :., :this_module, :<<), (:import, :., :., :this_module, :(<=)), (:import, :., :., :this_module, :(==)), (:import, :., :., :this_module, :>), (:import, :., :., :this_module, :(>=)), (:import, :., :., :this_module, :>>), (:import, :., :., :this_module, :.>>), (:import, :., :., :this_module, :.<<), (:import, :., :., :this_module, :>>>), (:import, :., :., :this_module, :<|), (:import, :., :., :this_module, :|>), (:import, :., :., :this_module, :\), (:import, :., :., :this_module, :^), (:import, :., :., :this_module, :|), (:import, :., :., :this_module, :~), (:import, :., :., :this_module, :(!==)), (:import, :., :., :this_module, :(===)), (:import, :., :., :this_module, :>:), (:import, :., :., :this_module, :colon), (:import, :., :., :this_module, :hcat), (:import, :., :., :this_module, :vcat), (:import, :., :., :this_module, :hvcat), (:import, :., :., :this_module, :getindex), (:import, :., :., :this_module, :setindex!), (:import, :., :., :this_module, :transpose), (:import, :., :., :this_module, :ctranspose), (:import, :., :., :this_module, :≥), (:import, :., :., :this_module, :≤), (:import, :., :., :this_module, :≠), (:import, :., :., :this_module, :.≥), (:import, :., :., :this_module, :.≤), (:import, :., :., :this_module, :.≠), (:import, :., :., :this_module, :⋅), (:import, :., :., :this_module, :×), (:import, :., :., :this_module, :∈), (:import, :., :., :this_module, :∉), (:import, :., :., :this_module, :∋), (:import, :., :., :this_module, :∌), (:import, :., :., :this_module, :⊆), (:import, :., :., :this_module, :⊈), (:import, :., :., :this_module, :⊊), (:import, :., :., :this_module, :∩), (:import, :., :., :this_module, :∪), (:import, :., :., :this_module, :√), (:import, :., :., :this_module, :∛))
      ))
  ))