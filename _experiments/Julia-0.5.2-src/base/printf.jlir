(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :Printf, (:block,
        (:line, 3, :none),
        (:line, 4, :none),
        (:using, :Base, :Grisu),
        (:line, 5, :none),
        (:export, Symbol("@printf"), Symbol("@sprintf")),
        (:line, 8, :none),
        (:const, (:(=), :SmallFloatingPoint, (:curly, :Union, :Float64, :Float32, :Float16))),
        (:line, 9, :none),
        (:const, (:(=), :SmallNumber, (:curly, :Union, :SmallFloatingPoint, (:., :Base, (:quote, #QuoteNode
                  :BitInteger
                ))))),
        (:line, 11, :none),
        (:function, (:call, :gen, (:(::), :s, :AbstractString)), (:block,
            (:line, 12, :none),
            (:(=), :args, (:vect,)),
            (:line, 13, :none),
            (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                  :block
                ), (:quote, (:local, :neg, :pt, :len, :exp, :do_out, :args)))),
            (:line, 14, :none),
            (:for, (:(=), :x, (:call, :parse, :s)), (:block,
                (:line, 15, :none),
                (:if, (:call, :isa, :x, :AbstractString), (:block,
                    (:line, 16, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :write, :out, (:$, (:if, (:call, :(==), (:call, :length, :x), 1), (:ref, :x, 1), :x)))))
                  ), (:block,
                    (:line, 18, :none),
                    (:(=), :c, (:call, :lowercase, (:ref, :x, :end))),
                    (:line, 19, :none),
                    (:(=), :f, (:if, (:call, :(==), :c, 'f'), :gen_f, (:if, (:call, :(==), :c, 'e'), :gen_e, (:if, (:call, :(==), :c, 'a'), :gen_a, (:if, (:call, :(==), :c, 'g'), :gen_g, (:if, (:call, :(==), :c, 'c'), :gen_c, (:if, (:call, :(==), :c, 's'), :gen_s, (:if, (:call, :(==), :c, 'p'), :gen_p, :gen_d)))))))),
                    (:line, 27, :none),
                    (:(=), (:tuple, :arg, :ex), (:call, :f, (:..., :x))),
                    (:line, 28, :none),
                    (:call, :push!, :args, :arg),
                    (:line, 29, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), :ex)
                  ))
              )),
            (:line, 32, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, #QuoteNode
                :nothing
              )),
            (:line, 33, :none),
            (:return, (:tuple, :args, :blk))
          )),
        (:line, 38, :none),
        (:function, (:call, :parse, (:(::), :s, :AbstractString)), (:block,
            (:line, 40, :none),
            (:(=), :list, (:vect,)),
            (:line, 41, :none),
            (:(=), :i, (:(=), :j, (:call, :start, :s))),
            (:line, 42, :none),
            (:while, (:call, :!, (:call, :done, :s, :j)), (:block,
                (:line, 43, :none),
                (:(=), (:tuple, :c, :k), (:call, :next, :s, :j)),
                (:line, 44, :none),
                (:if, (:call, :(==), :c, '%'), (:block,
                    (:line, 45, :none),
                    (:||, (:call, :isempty, (:ref, :s, (:(:), :i, (:call, :-, :j, 1)))), (:call, :push!, :list, (:ref, :s, (:(:), :i, (:call, :-, :j, 1))))),
                    (:line, 46, :none),
                    (:(=), (:tuple, :flags, :width, :precision, :conversion, :k), (:call, :parse1, :s, :k)),
                    (:line, 47, :none),
                    (:&&, (:call, :in, '\'', :flags), (:call, :error, "printf format flag ' not yet supported")),
                    (:line, 48, :none),
                    (:&&, (:call, :(==), :conversion, 'n'), (:call, :error, "printf feature %n not supported")),
                    (:line, 49, :none),
                    (:call, :push!, :list, (:if, (:call, :(==), :conversion, '%'), "%", (:tuple, :flags, :width, :precision, :conversion))),
                    (:line, 50, :none),
                    (:(=), :i, (:(=), :j, :k))
                  ), (:block,
                    (:line, 52, :none),
                    (:(=), :j, :k)
                  ))
              )),
            (:line, 55, :none),
            (:||, (:call, :isempty, (:ref, :s, (:(:), :i, :end))), (:call, :push!, :list, (:ref, :s, (:(:), :i, :end)))),
            (:line, 57, :none),
            (:(=), :i, 1),
            (:line, 58, :none),
            (:while, (:call, :<, :i, (:call, :length, :list)), (:block,
                (:line, 59, :none),
                (:if, (:call, :isa, (:ref, :list, :i), :AbstractString), (:block,
                    (:line, 60, :none),
                    (:for, (:(=), :j, (:(:), (:call, :+, :i, 1), (:call, :length, :list))), (:block,
                        (:line, 61, :none),
                        (:if, (:call, :!, (:call, :isa, (:ref, :list, :j), :AbstractString)), (:block,
                            (:line, 62, :none),
                            (:-=, :j, 1),
                            (:line, 63, :none),
                            (:break,)
                          )),
                        (:line, 65, :none),
                        (:*=, (:ref, :list, :i), (:ref, :list, :j))
                      )),
                    (:line, 67, :none),
                    (:call, :deleteat!, :list, (:(:), (:call, :+, :i, 1), :j))
                  )),
                (:line, 69, :none),
                (:+=, :i, 1)
              )),
            (:line, 71, :none),
            (:return, :list)
          )),
        (:line, 85, :none),
        (:(=), (:call, :next_or_die, (:(::), :s, :AbstractString), :k), (:block,
            (:line, 85, :none),
            (:if, (:call, :!, (:call, :done, :s, :k)), (:call, :next, :s, :k), (:call, :throw, (:call, :ArgumentError, (:string, "invalid printf format string: ", (:call, :repr, :s)))))
          )),
        (:line, 88, :none),
        (:function, (:call, :parse1, (:(::), :s, :AbstractString), (:(::), :k, :Integer)), (:block,
            (:line, 89, :none),
            (:(=), :j, :k),
            (:line, 90, :none),
            (:(=), :width, 0),
            (:line, 91, :none),
            (:(=), :precision, -1),
            (:line, 92, :none),
            (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k)),
            (:line, 94, :none),
            (:if, (:call, :(==), :c, '%'), (:block,
                (:line, 95, :none),
                (:return, (:tuple, "", :width, :precision, :c, :k))
              )),
            (:line, 98, :none),
            (:while, (:call, :in, :c, "#0- + '"), (:block,
                (:line, 99, :none),
                (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k))
              )),
            (:line, 101, :none),
            (:(=), :flags, (:call, :String, (:ref, :s, (:(:), :j, (:call, :-, :k, 2))))),
            (:line, 103, :none),
            (:while, (:comparison, '0', :(<=), :c, :(<=), '9'), (:block,
                (:line, 104, :none),
                (:(=), :width, (:call, :-, (:call, :+, (:call, :*, 10, :width), :c), '0')),
                (:line, 105, :none),
                (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k))
              )),
            (:line, 108, :none),
            (:if, (:call, :(==), :c, '.'), (:block,
                (:line, 109, :none),
                (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k)),
                (:line, 110, :none),
                (:if, (:comparison, '0', :(<=), :c, :(<=), '9'), (:block,
                    (:line, 111, :none),
                    (:(=), :precision, 0),
                    (:line, 112, :none),
                    (:while, (:comparison, '0', :(<=), :c, :(<=), '9'), (:block,
                        (:line, 113, :none),
                        (:(=), :precision, (:call, :-, (:call, :+, (:call, :*, 10, :precision), :c), '0')),
                        (:line, 114, :none),
                        (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k))
                      ))
                  ))
              )),
            (:line, 119, :none),
            (:if, (:||, (:call, :(==), :c, 'h'), (:call, :(==), :c, 'l')), (:block,
                (:line, 120, :none),
                (:(=), :prev, :c),
                (:line, 121, :none),
                (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k)),
                (:line, 122, :none),
                (:if, (:call, :(==), :c, :prev), (:block,
                    (:line, 123, :none),
                    (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k))
                  ))
              ), (:block,
                (:line, 125, :none),
                (:if, (:call, :in, :c, "Ljqtz"), (:block,
                    (:line, 126, :none),
                    (:(=), (:tuple, :c, :k), (:call, :next_or_die, :s, :k))
                  ))
              )),
            (:line, 129, :none),
            (:if, (:call, :!, (:call, :in, :c, "diouxXDOUeEfFgGaAcCsSpn")), (:block,
                (:line, 130, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "invalid printf format string: ", (:call, :repr, :s))))
              )),
            (:line, 133, :none),
            (:tuple, :flags, :width, :precision, :c, :k)
          )),
        (:line, 138, :none),
        (:function, (:call, :special_handler, (:(::), :flags, :String), (:(::), :width, :Int)), (:block,
            (:line, 139, :none),
            (:macrocall, Symbol("@gensym"), :x),
            (:line, 140, :none),
            (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                  :block
                ))),
            (:line, 141, :none),
            (:(=), :pad, (:if, (:call, :in, '-', :flags), :rpad, :lpad)),
            (:line, 142, :none),
            (:(=), :pos, (:if, (:call, :in, '+', :flags), "+", (:if, (:call, :in, ' ', :flags), " ", ""))),
            (:line, 144, :none),
            (:(=), :abn, (:quote, (:block,
                  (:line, 145, :none),
                  (:if, (:call, :isnan, (:$, :x)), (:$, (:call, :pad, "NaN", :width)), (:if, (:call, :<, (:$, :x), 0), (:$, (:call, :pad, "-Inf", :width)), (:$, (:call, :pad, (:string, :pos, "Inf"), :width))))
                ))),
            (:line, 149, :none),
            (:(=), :ex, (:quote, (:if, (:call, :isfinite, (:$, :x)), (:$, :blk), (:call, :write, :out, (:$, :abn))))),
            (:line, 150, :none),
            (:tuple, :x, :ex, :blk)
          )),
        (:line, 153, :none),
        (:function, (:call, :pad, (:(::), :m, :Int), :n, (:(::), :c, :Char)), (:block,
            (:line, 154, :none),
            (:if, (:call, :(<=), :m, 1), (:block,
                (:line, 155, :none),
                (:quote, (:&&, (:call, :>, (:$, :n), 0), (:call, :write, :out, (:$, :c))))
              ), (:block,
                (:line, 157, :none),
                (:macrocall, Symbol("@gensym"), :i),
                (:line, 158, :none),
                (:quote, (:block,
                    (:line, 159, :none),
                    (:(=), (:$, :i), (:$, :n)),
                    (:line, 160, :none),
                    (:while, (:call, :>, (:$, :i), 0), (:block,
                        (:line, 161, :none),
                        (:call, :write, :out, (:$, :c)),
                        (:line, 162, :none),
                        (:-=, (:$, :i), 1)
                      ))
                  ))
              ))
          )),
        (:line, 168, :none),
        (:function, (:call, :dynamic_pad, :m, :val, (:(::), :c, :Char)), (:block,
            (:line, 169, :none),
            (:macrocall, Symbol("@gensym"), :i),
            (:line, 170, :none),
            (:quote, (:block,
                (:line, 171, :none),
                (:if, (:call, :(<=), (:$, :m), 1), (:block,
                    (:line, 172, :none),
                    (:&&, (:call, :>, (:$, :val), 0), (:call, :write, :out, (:$, :c)))
                  ), (:block,
                    (:line, 174, :none),
                    (:(=), (:$, :i), (:$, :val)),
                    (:line, 175, :none),
                    (:while, (:call, :>, (:$, :i), 0), (:block,
                        (:line, 176, :none),
                        (:call, :write, :out, (:$, :c)),
                        (:line, 177, :none),
                        (:-=, (:$, :i), 1)
                      ))
                  ))
              ))
          )),
        (:line, 183, :none),
        (:function, (:call, :print_fixed, :out, :precision, :pt, :ndigits, (:kw, :trailingzeros, true)), (:block,
            (:line, 184, :none),
            (:(=), :pdigits, (:call, :pointer, :DIGITS)),
            (:line, 185, :none),
            (:if, (:call, :(<=), :pt, 0), (:block,
                (:line, 187, :none),
                (:call, :write, :out, '0'),
                (:line, 188, :none),
                (:call, :write, :out, '.'),
                (:line, 189, :none),
                (:+=, :precision, :pt),
                (:line, 190, :none),
                (:while, (:call, :<, :pt, 0), (:block,
                    (:line, 191, :none),
                    (:call, :write, :out, '0'),
                    (:line, 192, :none),
                    (:+=, :pt, 1)
                  )),
                (:line, 194, :none),
                (:call, :unsafe_write, :out, :pdigits, :ndigits),
                (:line, 195, :none),
                (:-=, :precision, :ndigits)
              ), (:block,
                (:line, 196, :none),
                (:if, (:call, :(<=), :ndigits, :pt), (:block,
                    (:line, 198, :none),
                    (:call, :unsafe_write, :out, :pdigits, :ndigits),
                    (:line, 199, :none),
                    (:while, (:call, :<, :ndigits, :pt), (:block,
                        (:line, 200, :none),
                        (:call, :write, :out, '0'),
                        (:line, 201, :none),
                        (:+=, :ndigits, 1)
                      )),
                    (:line, 203, :none),
                    (:if, :trailingzeros, (:block,
                        (:line, 204, :none),
                        (:call, :write, :out, '.')
                      ))
                  ), (:block,
                    (:line, 208, :none),
                    (:-=, :ndigits, :pt),
                    (:line, 209, :none),
                    (:call, :unsafe_write, :out, :pdigits, :pt),
                    (:line, 210, :none),
                    (:call, :write, :out, '.'),
                    (:line, 211, :none),
                    (:call, :unsafe_write, :out, (:call, :+, :pdigits, :pt), :ndigits),
                    (:line, 212, :none),
                    (:-=, :precision, :ndigits)
                  ))
              )),
            (:line, 214, :none),
            (:if, :trailingzeros, (:block,
                (:line, 215, :none),
                (:while, (:call, :>, :precision, 0), (:block,
                    (:line, 216, :none),
                    (:call, :write, :out, '0'),
                    (:line, 217, :none),
                    (:-=, :precision, 1)
                  ))
              ))
          )),
        (:line, 222, :none),
        (:function, (:call, :print_exp_e, :out, (:(::), :exp, :Integer)), (:block,
            (:line, 223, :none),
            (:call, :write, :out, (:if, (:call, :<, :exp, 0), '-', '+')),
            (:line, 224, :none),
            (:(=), :exp, (:call, :abs, :exp)),
            (:line, 225, :none),
            (:(=), :d, (:call, :div, :exp, 100)),
            (:line, 226, :none),
            (:if, (:call, :>, :d, 0), (:block,
                (:line, 227, :none),
                (:if, (:call, :(>=), :d, 10), (:block,
                    (:line, 228, :none),
                    (:call, :print, :out, :exp),
                    (:line, 229, :none),
                    (:return, nothing)
                  )),
                (:line, 231, :none),
                (:call, :write, :out, (:call, :Char, (:call, :+, '0', :d)))
              )),
            (:line, 233, :none),
            (:(=), :exp, (:call, :rem, :exp, 100)),
            (:line, 234, :none),
            (:call, :write, :out, (:call, :Char, (:call, :+, '0', (:call, :div, :exp, 10)))),
            (:line, 235, :none),
            (:call, :write, :out, (:call, :Char, (:call, :+, '0', (:call, :rem, :exp, 10))))
          )),
        (:line, 238, :none),
        (:function, (:call, :print_exp_a, :out, (:(::), :exp, :Integer)), (:block,
            (:line, 239, :none),
            (:call, :write, :out, (:if, (:call, :<, :exp, 0), '-', '+')),
            (:line, 240, :none),
            (:(=), :exp, (:call, :abs, :exp)),
            (:line, 241, :none),
            (:call, :print, :out, :exp)
          )),
        (:line, 245, :none),
        (:function, (:call, :gen_d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 259, :none),
            (:(=), (:tuple, :x, :ex, :blk), (:call, :special_handler, :flags, :width)),
            (:line, 261, :none),
            (:(=), :prefix, ""),
            (:line, 262, :none),
            (:if, (:call, :(==), (:call, :lowercase, :c), 'o'), (:block,
                (:line, 263, :none),
                (:(=), :fn, (:if, (:call, :in, '#', :flags), (:quote, #QuoteNode
                      :decode_0ct
                    ), (:quote, #QuoteNode
                      :decode_oct
                    )))
              ), (:block,
                (:line, 264, :none),
                (:if, (:call, :(==), :c, 'x'), (:block,
                    (:line, 265, :none),
                    (:&&, (:call, :in, '#', :flags), (:(=), :prefix, "0x")),
                    (:line, 266, :none),
                    (:(=), :fn, (:quote, #QuoteNode
                        :decode_hex
                      ))
                  ), (:block,
                    (:line, 267, :none),
                    (:if, (:call, :(==), :c, 'X'), (:block,
                        (:line, 268, :none),
                        (:&&, (:call, :in, '#', :flags), (:(=), :prefix, "0X")),
                        (:line, 269, :none),
                        (:(=), :fn, (:quote, #QuoteNode
                            :decode_HEX
                          ))
                      ), (:block,
                        (:line, 271, :none),
                        (:(=), :fn, (:quote, #QuoteNode
                            :decode_dec
                          ))
                      ))
                  ))
              )),
            (:line, 273, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, (:$, :fn), :out, (:$, :x), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c))))),
            (:line, 274, :none),
            (:(=), :ifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 275, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :ifblk),
            (:line, 276, :none),
            (:(=), :blk, (:ref, (:., :ifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 277, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :pt, :neg), :args))),
            (:line, 279, :none),
            (:-=, :width, (:call, :length, :prefix)),
            (:line, 280, :none),
            (:(=), :space_pad, (:||, (:&&, (:call, :>, :width, (:call, :max, 1, :precision)), (:call, :in, '-', :flags)), (:||, (:&&, (:call, :<, :precision, 0), (:&&, (:call, :>, :width, 1), (:call, :!, (:call, :in, '0', :flags)))), (:&&, (:call, :(>=), :precision, 0), (:call, :>, :width, :precision))))),
            (:line, 283, :none),
            (:(=), :padding, :nothing),
            (:line, 284, :none),
            (:if, (:call, :<, :precision, 1), (:block,
                (:line, 284, :none),
                (:(=), :precision, 1)
              )),
            (:line, 285, :none),
            (:if, :space_pad, (:block,
                (:line, 286, :none),
                (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:block,
                    (:line, 287, :none),
                    (:-=, :width, 1),
                    (:line, 288, :none),
                    (:if, (:call, :>, :width, :precision), (:block,
                        (:line, 289, :none),
                        (:(=), :padding, (:quote, (:call, :-, (:$, :width), (:if, (:call, :>, :pt, (:$, :precision)), :pt, (:$, :precision)))))
                      ))
                  ), (:block,
                    (:line, 292, :none),
                    (:if, (:call, :>, :width, :precision), (:block,
                        (:line, 293, :none),
                        (:(=), :padding, (:quote, (:call, :-, (:call, :-, (:$, :width), :neg), (:if, (:call, :>, :pt, (:$, :precision)), :pt, (:$, :precision)))))
                      ))
                  ))
              )),
            (:line, 298, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:call, :!, (:call, :in, '-', :flags))), (:block,
                (:line, 299, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, :precision), :padding, ' '))
              )),
            (:line, 302, :none),
            (:if, (:call, :in, '+', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, (:call, :write, :out, (:if, :neg, '-', '+')))), (:if, (:call, :in, ' ', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:if, :neg, '-', ' ')))), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:&&, :neg, (:call, :write, :out, '-')))))),
            (:line, 306, :none),
            (:for, (:(=), :ch, :prefix), (:block,
                (:line, 307, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:$, :ch))))
              )),
            (:line, 310, :none),
            (:if, (:&&, :space_pad, (:call, :>, :precision, 1)), (:block,
                (:line, 311, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :precision, 1), (:quote, (:call, :-, (:$, :precision), :pt)), '0'))
              ), (:block,
                (:line, 312, :none),
                (:if, (:&&, (:call, :!, :space_pad), (:call, :>, :width, 1)), (:block,
                    (:line, 313, :none),
                    (:(=), :zeros, (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:quote, (:call, :-, (:$, (:call, :-, :width, 1)), :pt)), (:quote, (:call, :-, (:call, :-, (:$, :width), :neg), :pt)))),
                    (:line, 314, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:call, :pad, (:call, :-, :width, 1), :zeros, '0'))
                  ))
              )),
            (:line, 317, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :unsafe_write, :out, (:call, :pointer, :DIGITS), :pt))),
            (:line, 319, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:call, :in, '-', :flags)), (:block,
                (:line, 320, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, :precision), :padding, ' '))
              )),
            (:line, 323, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Real)), :ex)
          )),
        (:line, 326, :none),
        (:function, (:call, :gen_f, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 337, :none),
            (:(=), (:tuple, :x, :ex, :blk), (:call, :special_handler, :flags, :width)),
            (:line, 339, :none),
            (:if, (:call, :<, :precision, 0), (:block,
                (:line, 339, :none),
                (:(=), :precision, 6)
              )),
            (:line, 340, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, :fix_dec, :out, (:$, :x), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c))))),
            (:line, 341, :none),
            (:(=), :ifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 342, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :ifblk),
            (:line, 343, :none),
            (:(=), :blk, (:ref, (:., :ifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 344, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :pt, :neg), :args))),
            (:line, 346, :none),
            (:(=), :padding, :nothing),
            (:line, 347, :none),
            (:if, (:||, (:call, :>, :precision, 0), (:call, :in, '#', :flags)), (:block,
                (:line, 348, :none),
                (:-=, :width, (:call, :+, :precision, 1))
              )),
            (:line, 350, :none),
            (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:block,
                (:line, 351, :none),
                (:-=, :width, 1),
                (:line, 352, :none),
                (:if, (:call, :>, :width, 1), (:block,
                    (:line, 353, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:$, :width), (:if, (:call, :>, :pt, 0), :pt, 1))))
                  ))
              ), (:block,
                (:line, 356, :none),
                (:if, (:call, :>, :width, 1), (:block,
                    (:line, 357, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:call, :-, (:$, :width), (:if, (:call, :>, :pt, 0), :pt, 1)), :neg)))
                  ))
              )),
            (:line, 361, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :!, (:call, :in, '0', :flags)))), (:block,
                (:line, 362, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, 1), :padding, ' '))
              )),
            (:line, 365, :none),
            (:if, (:call, :in, '+', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, (:call, :write, :out, (:if, :neg, '-', '+')))), (:if, (:call, :in, ' ', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:if, :neg, '-', ' ')))), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:&&, :neg, (:call, :write, :out, '-')))))),
            (:line, 369, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :in, '0', :flags))), (:block,
                (:line, 370, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, 1), :padding, '0'))
              )),
            (:line, 373, :none),
            (:if, (:call, :>, :precision, 0), (:block,
                (:line, 374, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :print_fixed, :out, (:$, :precision), :pt, :len)))
              ), (:block,
                (:line, 376, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :unsafe_write, :out, (:call, :pointer, :DIGITS), :len))),
                (:line, 377, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:while, (:call, :(>=), :pt, (:+=, :len, 1)), (:block,
                        (:line, 377, :none),
                        (:call, :write, :out, '0')
                      )))),
                (:line, 378, :none),
                (:&&, (:call, :in, '#', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                        :args
                      )), (:quote, (:call, :write, :out, '.'))))
              )),
            (:line, 381, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:call, :in, '-', :flags)), (:block,
                (:line, 382, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, 1), :padding, ' '))
              )),
            (:line, 385, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Real)), :ex)
          )),
        (:line, 388, :none),
        (:function, (:call, :gen_e, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char), (:kw, (:(::), :inside_g, :Bool), false)), (:block,
            (:line, 400, :none),
            (:(=), (:tuple, :x, :ex, :blk), (:if, :inside_g, (:block,
                  (:line, 401, :none),
                  (:macrocall, Symbol("@gensym"), :x),
                  (:line, 402, :none),
                  (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                        :block
                      ))),
                  (:line, 403, :none),
                  (:tuple, :x, :blk, :blk)
                ), (:block,
                  (:line, 405, :none),
                  (:call, :special_handler, :flags, :width)
                ))),
            (:line, 408, :none),
            (:if, (:call, :<, :precision, 0), (:block,
                (:line, 408, :none),
                (:(=), :precision, 6)
              )),
            (:line, 409, :none),
            (:(=), :ndigits, (:call, :min, (:call, :+, :precision, 1), (:call, :-, (:call, :length, :DIGITS), 1))),
            (:line, 410, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, :ini_dec, :out, (:$, :x), (:$, :ndigits), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c))))),
            (:line, 411, :none),
            (:(=), :ifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 412, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :ifblk),
            (:line, 413, :none),
            (:(=), :blk, (:ref, (:., :ifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 414, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :pt, :neg), :args))),
            (:line, 415, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :exp, (:call, :-, :pt, 1)))),
            (:line, 416, :none),
            (:(=), :expmark, (:if, (:call, :isupper, :c), "E", "e")),
            (:line, 417, :none),
            (:if, (:&&, (:call, :(==), :precision, 0), (:call, :in, '#', :flags)), (:block,
                (:line, 418, :none),
                (:(=), :expmark, (:call, :string, ".", :expmark))
              )),
            (:line, 421, :none),
            (:(=), :padding, :nothing),
            (:line, 422, :none),
            (:-=, :width, (:call, :+, :precision, (:call, :length, :expmark), (:call, :>, :precision, 0), 4)),
            (:line, 424, :none),
            (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:block,
                (:line, 425, :none),
                (:-=, :width, 1),
                (:line, 426, :none),
                (:if, (:call, :>, :width, 0), (:block,
                    (:line, 427, :none),
                    (:(=), :padding, (:quote, (:block,
                          (:line, 428, :none),
                          (:(=), :padn, (:$, :width)),
                          (:line, 429, :none),
                          (:if, (:call, :|, (:call, :(<=), :exp, -100), (:call, :(<=), 100, :exp)), (:block,
                              (:line, 430, :none),
                              (:if, (:call, :isa, (:$, :x), :SmallNumber), (:block,
                                  (:line, 431, :none),
                                  (:-=, :padn, 1)
                                ), (:block,
                                  (:line, 433, :none),
                                  (:-=, :padn, (:call, :-, (:call, (:., :Base, (:quote, #QuoteNode
                                            :ndigits0z
                                          )), :exp), 2))
                                ))
                            )),
                          (:line, 436, :none),
                          :padn
                        )))
                  ))
              ), (:block,
                (:line, 440, :none),
                (:if, (:call, :>, :width, 0), (:block,
                    (:line, 441, :none),
                    (:(=), :padding, (:quote, (:block,
                          (:line, 442, :none),
                          (:(=), :padn, (:call, :-, (:$, :width), :neg)),
                          (:line, 443, :none),
                          (:if, (:call, :|, (:call, :(<=), :exp, -100), (:call, :(<=), 100, :exp)), (:block,
                              (:line, 444, :none),
                              (:if, (:call, :isa, (:$, :x), :SmallNumber), (:block,
                                  (:line, 445, :none),
                                  (:-=, :padn, 1)
                                ), (:block,
                                  (:line, 447, :none),
                                  (:-=, :padn, (:call, :-, (:call, (:., :Base, (:quote, #QuoteNode
                                            :ndigits0z
                                          )), :exp), 2))
                                ))
                            )),
                          (:line, 450, :none),
                          :padn
                        )))
                  ))
              )),
            (:line, 455, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :!, (:call, :in, '0', :flags)))), (:block,
                (:line, 456, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, ' '))
              )),
            (:line, 459, :none),
            (:if, (:call, :in, '+', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, (:call, :write, :out, (:if, :neg, '-', '+')))), (:if, (:call, :in, ' ', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:if, :neg, '-', ' ')))), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:&&, :neg, (:call, :write, :out, '-')))))),
            (:line, 463, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :in, '0', :flags))), (:block,
                (:line, 464, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, '0'))
              )),
            (:line, 467, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, (:ref, :DIGITS, 1)))),
            (:line, 468, :none),
            (:if, (:call, :>, :precision, 0), (:block,
                (:line, 469, :none),
                (:if, (:&&, :inside_g, (:call, :!, (:call, :in, '#', :flags))), (:block,
                    (:line, 470, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:block,
                          (:(=), :endidx, (:$, :ndigits)),
                          (:while, (:&&, (:call, :>, :endidx, 1), (:call, :(==), (:ref, :DIGITS, :endidx), (:call, :UInt8, '0'))), (:block,
                              (:line, 472, :none),
                              (:-=, :endidx, 1)
                            )),
                          (:if, (:call, :>, :endidx, 1), (:block,
                              (:line, 475, :none),
                              (:call, :write, :out, '.'),
                              (:line, 476, :none),
                              (:call, :unsafe_write, :out, (:call, :+, (:call, :pointer, :DIGITS), 1), (:call, :-, :endidx, 1))
                            ))
                        )))
                  ), (:block,
                    (:line, 480, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :write, :out, '.'))),
                    (:line, 481, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :unsafe_write, :out, (:call, :+, (:call, :pointer, :DIGITS), 1), (:$, (:call, :-, :ndigits, 1))))),
                    (:line, 482, :none),
                    (:if, (:call, :<, :ndigits, (:call, :+, :precision, 1)), (:block,
                        (:line, 483, :none),
                        (:(=), :n, (:call, :-, (:call, :+, :precision, 1), :ndigits)),
                        (:line, 484, :none),
                        (:call, :push!, (:., :blk, (:quote, #QuoteNode
                              :args
                            )), (:call, :pad, :n, :n, '0'))
                      ))
                  ))
              )),
            (:line, 488, :none),
            (:for, (:(=), :ch, :expmark), (:block,
                (:line, 489, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:$, :ch))))
              )),
            (:line, 491, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :print_exp_e, :out, :exp))),
            (:line, 493, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:call, :in, '-', :flags)), (:block,
                (:line, 494, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, ' '))
              )),
            (:line, 497, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Real)), :ex)
          )),
        (:line, 500, :none),
        (:function, (:call, :gen_a, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 512, :none),
            (:(=), (:tuple, :x, :ex, :blk), (:call, :special_handler, :flags, :width)),
            (:line, 513, :none),
            (:if, (:call, :(==), :c, 'A'), (:block,
                (:line, 514, :none),
                (:(=), (:tuple, :hexmark, :expmark), (:tuple, "0X", "P")),
                (:line, 515, :none),
                (:(=), :fn, (:quote, #QuoteNode
                    :ini_HEX
                  ))
              ), (:block,
                (:line, 517, :none),
                (:(=), (:tuple, :hexmark, :expmark), (:tuple, "0x", "p")),
                (:line, 518, :none),
                (:(=), :fn, (:quote, #QuoteNode
                    :ini_hex
                  ))
              )),
            (:line, 521, :none),
            (:if, (:call, :<, :precision, 0), (:block,
                (:line, 522, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, (:$, :fn), :out, (:$, :x), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c)))))
              ), (:block,
                (:line, 524, :none),
                (:(=), :ndigits, (:call, :min, (:call, :+, :precision, 1), (:call, :-, (:call, :length, :DIGITS), 1))),
                (:line, 525, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, (:$, :fn), :out, (:$, :x), (:$, :ndigits), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c)))))
              )),
            (:line, 527, :none),
            (:(=), :ifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 528, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :ifblk),
            (:line, 529, :none),
            (:(=), :blk, (:ref, (:., :ifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 530, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :exp, :neg), :args))),
            (:line, 531, :none),
            (:if, (:&&, (:call, :(==), :precision, 0), (:call, :in, '#', :flags)), (:block,
                (:line, 532, :none),
                (:(=), :expmark, (:call, :string, ".", :expmark))
              )),
            (:line, 535, :none),
            (:(=), :padding, :nothing),
            (:line, 536, :none),
            (:if, (:call, :>, :precision, 0), (:block,
                (:line, 537, :none),
                (:-=, :width, (:call, :+, :precision, (:call, :length, :hexmark), (:call, :length, :expmark), 4))
              ), (:block,
                (:line, 540, :none),
                (:-=, :width, (:call, :+, (:call, :length, :hexmark), (:call, :length, :expmark), 3, (:&&, (:call, :<, :precision, 0), (:call, :in, '#', :flags))))
              )),
            (:line, 543, :none),
            (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:block,
                (:line, 544, :none),
                (:-=, :width, 1),
                (:line, 545, :none),
                (:if, (:call, :>, :width, 0), (:block,
                    (:line, 546, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:$, (:call, :+, :width, 1)), (:call, (:., :Base, (:quote, #QuoteNode
                                :ndigits
                              )), :exp))))
                  ))
              ), (:block,
                (:line, 549, :none),
                (:if, (:call, :>, :width, 0), (:block,
                    (:line, 550, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:call, :-, (:$, (:call, :+, :width, 1)), :neg), (:call, (:., :Base, (:quote, #QuoteNode
                                :ndigits
                              )), :exp))))
                  ))
              )),
            (:line, 553, :none),
            (:if, (:&&, (:call, :<, :precision, 0), (:call, :>, :width, 0)), (:block,
                (:line, 554, :none),
                (:if, (:call, :in, '#', :flags), (:block,
                    (:line, 555, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:$, :padding), (:call, :-, :len, 1))))
                  ), (:block,
                    (:line, 557, :none),
                    (:(=), :padding, (:quote, (:call, :-, (:$, :padding), (:if, (:call, :>, :len, 1), :len, 0))))
                  ))
              )),
            (:line, 561, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :!, (:call, :in, '0', :flags)))), (:block,
                (:line, 562, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, ' '))
              )),
            (:line, 565, :none),
            (:if, (:call, :in, '+', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, (:call, :write, :out, (:if, :neg, '-', '+')))), (:if, (:call, :in, ' ', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:if, :neg, '-', ' ')))), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:&&, :neg, (:call, :write, :out, '-')))))),
            (:line, 569, :none),
            (:for, (:(=), :ch, :hexmark), (:block,
                (:line, 570, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:$, :ch))))
              )),
            (:line, 573, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :in, '0', :flags))), (:block,
                (:line, 574, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, '0'))
              )),
            (:line, 577, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, (:ref, :DIGITS, 1)))),
            (:line, 578, :none),
            (:if, (:call, :>, :precision, 0), (:block,
                (:line, 579, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, '.'))),
                (:line, 580, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :unsafe_write, :out, (:call, :+, (:call, :pointer, :DIGITS), 1), (:$, (:call, :-, :ndigits, 1))))),
                (:line, 581, :none),
                (:if, (:call, :<, :ndigits, (:call, :+, :precision, 1)), (:block,
                    (:line, 582, :none),
                    (:(=), :n, (:call, :-, (:call, :+, :precision, 1), :ndigits)),
                    (:line, 583, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:call, :pad, :n, :n, '0'))
                  ))
              ), (:block,
                (:line, 585, :none),
                (:if, (:call, :<, :precision, 0), (:block,
                    (:line, 586, :none),
                    (:(=), :ifvpblk, (:call, :Expr, (:quote, #QuoteNode
                          :if
                        ), (:quote, (:call, :>, :len, 1)), (:call, :Expr, (:quote, #QuoteNode
                            :block
                          )))),
                    (:line, 587, :none),
                    (:(=), :vpblk, (:ref, (:., :ifvpblk, (:quote, #QuoteNode
                            :args
                          )), 2)),
                    (:line, 588, :none),
                    (:if, (:call, :in, '#', :flags), (:block,
                        (:line, 589, :none),
                        (:call, :push!, (:., :blk, (:quote, #QuoteNode
                              :args
                            )), (:quote, (:call, :write, :out, '.')))
                      ), (:block,
                        (:line, 591, :none),
                        (:call, :push!, (:., :vpblk, (:quote, #QuoteNode
                              :args
                            )), (:quote, (:call, :write, :out, '.')))
                      )),
                    (:line, 593, :none),
                    (:call, :push!, (:., :vpblk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :unsafe_write, :out, (:call, :+, (:call, :pointer, :DIGITS), 1), (:call, :-, :len, 1)))),
                    (:line, 594, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), :ifvpblk)
                  ))
              )),
            (:line, 596, :none),
            (:for, (:(=), :ch, :expmark), (:block,
                (:line, 597, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:$, :ch))))
              )),
            (:line, 599, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :print_exp_a, :out, :exp))),
            (:line, 601, :none),
            (:if, (:&&, (:call, :(!==), :padding, :nothing), (:call, :in, '-', :flags)), (:block,
                (:line, 602, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :padding, ' '))
              )),
            (:line, 605, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Real)), :ex)
          )),
        (:line, 608, :none),
        (:function, (:call, :gen_c, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 616, :none),
            (:macrocall, Symbol("@gensym"), :x),
            (:line, 617, :none),
            (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                  :block
                ), (:quote, (:(=), (:$, :x), (:call, :Char, (:$, :x)))))),
            (:line, 618, :none),
            (:if, (:&&, (:call, :>, :width, 1), (:call, :!, (:call, :in, '-', :flags))), (:block,
                (:line, 619, :none),
                (:(=), :p, (:if, (:call, :in, '0', :flags), '0', ' ')),
                (:line, 620, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, 1), (:quote, (:call, :-, (:$, :width), (:call, :charwidth, (:$, :x)))), :p))
              )),
            (:line, 622, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, (:$, :x)))),
            (:line, 623, :none),
            (:if, (:&&, (:call, :>, :width, 1), (:call, :in, '-', :flags)), (:block,
                (:line, 624, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, (:call, :-, :width, 1), (:quote, (:call, :-, (:$, :width), (:call, :charwidth, (:$, :x)))), ' '))
              )),
            (:line, 626, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Integer)), :blk)
          )),
        (:line, 629, :none),
        (:function, (:call, :gen_s, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 637, :none),
            (:macrocall, Symbol("@gensym"), :x),
            (:line, 638, :none),
            (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                  :block
                ))),
            (:line, 639, :none),
            (:if, (:call, :>, :width, 0), (:block,
                (:line, 640, :none),
                (:if, (:call, :!, (:call, :in, '#', :flags)), (:block,
                    (:line, 641, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:(=), (:$, :x), (:call, :string, (:$, :x)))))
                  ), (:block,
                    (:line, 643, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:(=), (:$, :x), (:call, :repr, (:$, :x)))))
                  )),
                (:line, 645, :none),
                (:if, (:call, :!, (:call, :in, '-', :flags)), (:block,
                    (:line, 646, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:call, :pad, :width, (:quote, (:call, :-, (:$, :width), (:call, :strwidth, (:$, :x)))), ' '))
                  )),
                (:line, 648, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:$, :x)))),
                (:line, 649, :none),
                (:if, (:call, :in, '-', :flags), (:block,
                    (:line, 650, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:call, :pad, :width, (:quote, (:call, :-, (:$, :width), (:call, :strwidth, (:$, :x)))), ' '))
                  ))
              ), (:block,
                (:line, 653, :none),
                (:if, (:call, :!, (:call, :in, '#', :flags)), (:block,
                    (:line, 654, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :print, :out, (:$, :x))))
                  ), (:block,
                    (:line, 656, :none),
                    (:call, :push!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:call, :show, :out, (:$, :x))))
                  ))
              )),
            (:line, 659, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Any)), :blk)
          )),
        (:line, 664, :none),
        (:function, (:call, :gen_p, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 668, :none),
            (:macrocall, Symbol("@gensym"), :x),
            (:line, 669, :none),
            (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
                  :block
                ))),
            (:line, 670, :none),
            (:(=), :ptrwidth, (:call, :>>, (:., :Sys, (:quote, #QuoteNode
                    :WORD_SIZE
                  )), 2)),
            (:line, 671, :none),
            (:-=, :width, (:call, :+, :ptrwidth, 2)),
            (:line, 672, :none),
            (:if, (:&&, (:call, :>, :width, 0), (:call, :!, (:call, :in, '-', :flags))), (:block,
                (:line, 673, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :width, ' '))
              )),
            (:line, 675, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, '0'))),
            (:line, 676, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, 'x'))),
            (:line, 677, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, (:call, :String, (:call, :hex, (:call, :unsigned, (:$, :x)), (:$, :ptrwidth)))))),
            (:line, 678, :none),
            (:if, (:&&, (:call, :>, :width, 0), (:call, :in, '-', :flags)), (:block,
                (:line, 679, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:call, :pad, :width, :width, ' '))
              )),
            (:line, 681, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Ptr)), :blk)
          )),
        (:line, 684, :none),
        (:function, (:call, :gen_g, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 696, :none),
            (:(=), (:tuple, :x, :ex, :blk), (:call, :special_handler, :flags, :width)),
            (:line, 697, :none),
            (:if, (:call, :<, :precision, 0), (:block,
                (:line, 697, :none),
                (:(=), :precision, 6)
              )),
            (:line, 698, :none),
            (:(=), :ndigits, (:call, :min, (:call, :+, :precision, 1), (:call, :-, (:call, :length, :DIGITS), 1))),
            (:line, 700, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, :ini_dec, :out, (:$, :x), (:$, :ndigits), (:$, :flags), (:$, :width), (:$, :precision), (:$, :c))))),
            (:line, 701, :none),
            (:(=), :ifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 702, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :ifblk),
            (:line, 703, :none),
            (:(=), :blk, (:ref, (:., :ifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 704, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :pt, :neg), :args))),
            (:line, 705, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :exp, (:call, :-, :pt, 1)))),
            (:line, 706, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :do_f, (:comparison, (:$, :precision), :>, :exp, :(>=), -4)))),
            (:line, 707, :none),
            (:(=), :feblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_f
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 708, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), :feblk),
            (:line, 709, :none),
            (:(=), :fblk, (:ref, (:., :feblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 710, :none),
            (:(=), :eblk, (:ref, (:., :feblk, (:quote, #QuoteNode
                    :args
                  )), 3)),
            (:line, 715, :none),
            (:call, :push!, (:., :fblk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :fprec, (:call, :-, (:$, :precision), (:call, :+, :exp, 1))))),
            (:line, 716, :none),
            (:call, :push!, (:., :fblk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :do_out, :args), (:call, :fix_dec, :out, (:$, :x), (:$, :flags), (:$, :width), :fprec, (:call, :-, (:$, :c), 1))))),
            (:line, 717, :none),
            (:(=), :fifblk, (:call, :Expr, (:quote, #QuoteNode
                  :if
                ), (:quote, #QuoteNode
                  :do_out
                ), (:call, :Expr, (:quote, #QuoteNode
                    :block
                  )))),
            (:line, 718, :none),
            (:call, :push!, (:., :fblk, (:quote, #QuoteNode
                  :args
                )), :fifblk),
            (:line, 719, :none),
            (:(=), :blk, (:ref, (:., :fifblk, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 720, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:tuple, :len, :pt, :neg), :args))),
            (:line, 721, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :padding, :nothing))),
            (:line, 722, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :width, (:$, :width)))),
            (:line, 724, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :tmpout, (:call, :IOBuffer)))),
            (:line, 725, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :print_fixed, :tmpout, :fprec, :pt, :len, (:$, (:call, :in, '#', :flags))))),
            (:line, 726, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :tmpstr, (:call, :takebuf_string, :tmpout)))),
            (:line, 727, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:-=, :width, (:call, :length, :tmpstr)))),
            (:line, 728, :none),
            (:if, (:||, (:call, :in, '+', :flags), (:call, :in, ' ', :flags)), (:block,
                (:line, 729, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:-=, :width, 1)))
              ), (:block,
                (:line, 731, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:if, :neg, (:block,
                        (:line, 731, :none),
                        (:-=, :width, 1)
                      ))))
              )),
            (:line, 733, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:if, (:call, :(>=), :width, 1), (:block,
                    (:line, 733, :none),
                    (:(=), :padding, :width)
                  )))),
            (:line, 735, :none),
            (:if, (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :!, (:call, :in, '0', :flags))), (:block,
                (:line, 736, :none),
                (:(=), :padexpr, (:call, :dynamic_pad, (:quote, #QuoteNode
                      :width
                    ), (:quote, #QuoteNode
                      :padding
                    ), ' ')),
                (:line, 737, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:if, (:call, :(!==), :padding, :nothing), (:block,
                        (:line, 738, :none),
                        (:$, :padexpr)
                      ))))
              )),
            (:line, 741, :none),
            (:if, (:call, :in, '+', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, (:call, :write, :out, (:if, :neg, '-', '+')))), (:if, (:call, :in, ' ', :flags), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:call, :write, :out, (:if, :neg, '-', ' ')))), (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:&&, :neg, (:call, :write, :out, '-')))))),
            (:line, 745, :none),
            (:if, (:&&, (:call, :!, (:call, :in, '-', :flags)), (:call, :in, '0', :flags)), (:block,
                (:line, 746, :none),
                (:(=), :padexpr, (:call, :dynamic_pad, (:quote, #QuoteNode
                      :width
                    ), (:quote, #QuoteNode
                      :padding
                    ), '0')),
                (:line, 747, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:if, (:call, :(!==), :padding, :nothing), (:block,
                        (:line, 748, :none),
                        (:$, :padexpr)
                      ))))
              )),
            (:line, 751, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :write, :out, :tmpstr))),
            (:line, 753, :none),
            (:if, (:call, :in, '-', :flags), (:block,
                (:line, 754, :none),
                (:(=), :padexpr, (:call, :dynamic_pad, (:quote, #QuoteNode
                      :width
                    ), (:quote, #QuoteNode
                      :padding
                    ), ' ')),
                (:line, 755, :none),
                (:call, :push!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:if, (:call, :(!==), :padding, :nothing), (:block,
                        (:line, 756, :none),
                        (:$, :padexpr)
                      ))))
              )),
            (:line, 761, :none),
            (:(=), (:tuple, :var, :eex), (:call, :gen_e, :flags, :width, (:call, :-, :precision, 1), :c, true)),
            (:line, 762, :none),
            (:call, :push!, (:., :eblk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:$, (:ref, (:., :var, (:quote, #QuoteNode
                          :args
                        )), 1)), (:$, :x)))),
            (:line, 763, :none),
            (:call, :push!, (:., :eblk, (:quote, #QuoteNode
                  :args
                )), :eex),
            (:line, 765, :none),
            (:tuple, (:quote, (:(::), (:$, :x), :Real)), :ex)
          )),
        (:line, 770, :none),
        (:macro, (:call, :handle_zero, :ex), (:block,
            (:line, 771, :none),
            (:quote, (:block,
                (:line, 772, :none),
                (:if, (:call, :(==), (:$, (:call, :esc, :ex)), 0), (:block,
                    (:line, 773, :none),
                    (:(=), (:ref, :DIGITS, 1), '0'),
                    (:line, 774, :none),
                    (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), (:$, (:call, :esc, (:quote, #QuoteNode
                              :neg
                            )))))
                  ))
              ))
          )),
        (:line, 779, :none),
        (:(=), (:call, :decode_oct, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 779, :none),
            (:tuple, true, (:call, :decode_oct, :d))
          )),
        (:line, 780, :none),
        (:(=), (:call, :decode_0ct, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 780, :none),
            (:tuple, true, (:call, :decode_0ct, :d))
          )),
        (:line, 781, :none),
        (:(=), (:call, :decode_dec, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 781, :none),
            (:tuple, true, (:call, :decode_dec, :d))
          )),
        (:line, 782, :none),
        (:(=), (:call, :decode_hex, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 782, :none),
            (:tuple, true, (:call, :decode_hex, :d))
          )),
        (:line, 783, :none),
        (:(=), (:call, :decode_HEX, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 783, :none),
            (:tuple, true, (:call, :decode_HEX, :d))
          )),
        (:line, 784, :none),
        (:(=), (:call, :fix_dec, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 784, :none),
            (:tuple, true, (:call, :fix_dec, :d, :precision))
          )),
        (:line, 785, :none),
        (:(=), (:call, :ini_dec, :out, :d, (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 785, :none),
            (:tuple, true, (:call, :ini_dec, :d, :ndigits))
          )),
        (:line, 786, :none),
        (:(=), (:call, :ini_hex, :out, :d, (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 786, :none),
            (:tuple, true, (:call, :ini_hex, :d, :ndigits))
          )),
        (:line, 787, :none),
        (:(=), (:call, :ini_HEX, :out, :d, (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 787, :none),
            (:tuple, true, (:call, :ini_HEX, :d, :ndigits))
          )),
        (:line, 788, :none),
        (:(=), (:call, :ini_hex, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 788, :none),
            (:tuple, true, (:call, :ini_hex, :d))
          )),
        (:line, 789, :none),
        (:(=), (:call, :ini_HEX, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 789, :none),
            (:tuple, true, (:call, :ini_HEX, :d))
          )),
        (:line, 793, :none),
        (:(=), (:call, :decode_oct, (:(::), :d, :Real)), (:block,
            (:line, 793, :none),
            (:call, :decode_oct, (:call, :Integer, :d))
          )),
        (:line, 794, :none),
        (:(=), (:call, :decode_0ct, (:(::), :d, :Real)), (:block,
            (:line, 794, :none),
            (:call, :decode_0ct, (:call, :Integer, :d))
          )),
        (:line, 795, :none),
        (:(=), (:call, :decode_dec, (:(::), :d, :Real)), (:block,
            (:line, 795, :none),
            (:call, :decode_dec, (:call, :Integer, :d))
          )),
        (:line, 796, :none),
        (:(=), (:call, :decode_hex, (:(::), :d, :Real)), (:block,
            (:line, 796, :none),
            (:call, :decode_hex, (:call, :Integer, :d))
          )),
        (:line, 797, :none),
        (:(=), (:call, :decode_HEX, (:(::), :d, :Real)), (:block,
            (:line, 797, :none),
            (:call, :decode_HEX, (:call, :Integer, :d))
          )),
        (:line, 799, :none),
        (:(=), (:call, :handlenegative, (:(::), :d, :Unsigned)), (:block,
            (:line, 799, :none),
            (:tuple, false, :d)
          )),
        (:line, 800, :none),
        (:function, (:call, :handlenegative, (:(::), :d, :Integer)), (:block,
            (:line, 801, :none),
            (:if, (:call, :<, :d, 0), (:block,
                (:line, 802, :none),
                (:return, (:tuple, true, (:call, :unsigned, (:call, :oftype, :d, (:call, :-, :d)))))
              ), (:block,
                (:line, 804, :none),
                (:return, (:tuple, false, (:call, :unsigned, :d)))
              ))
          )),
        (:line, 808, :none),
        (:function, (:call, :decode_oct, (:(::), :d, :Integer)), (:block,
            (:line, 809, :none),
            (:(=), (:tuple, :neg, :x), (:call, :handlenegative, :d)),
            (:line, 810, :none),
            (:macrocall, Symbol("@handle_zero"), :x),
            (:line, 811, :none),
            (:(=), :pt, (:(=), :i, (:call, :div, (:call, :+, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x)), 2), 3))),
            (:line, 812, :none),
            (:while, (:call, :>, :i, 0), (:block,
                (:line, 813, :none),
                (:(=), (:ref, :DIGITS, :i), (:call, :+, '0', (:call, :&, :x, 0x07))),
                (:line, 814, :none),
                (:>>=, :x, 3),
                (:line, 815, :none),
                (:-=, :i, 1)
              )),
            (:line, 817, :none),
            (:return, (:tuple, (:call, :Int32, :pt), (:call, :Int32, :pt), :neg))
          )),
        (:line, 820, :none),
        (:function, (:call, :decode_0ct, (:(::), :d, :Integer)), (:block,
            (:line, 821, :none),
            (:(=), (:tuple, :neg, :x), (:call, :handlenegative, :d)),
            (:line, 823, :none),
            (:(=), :pt, (:(=), :i, (:call, :div, (:call, :+, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x)), 5), 3))),
            (:line, 824, :none),
            (:while, (:call, :>, :i, 0), (:block,
                (:line, 825, :none),
                (:(=), (:ref, :DIGITS, :i), (:call, :+, '0', (:call, :&, :x, 0x07))),
                (:line, 826, :none),
                (:>>=, :x, 3),
                (:line, 827, :none),
                (:-=, :i, 1)
              )),
            (:line, 829, :none),
            (:return, (:tuple, (:call, :Int32, :pt), (:call, :Int32, :pt), :neg))
          )),
        (:line, 832, :none),
        (:function, (:call, :decode_dec, (:(::), :d, :Integer)), (:block,
            (:line, 833, :none),
            (:(=), (:tuple, :neg, :x), (:call, :handlenegative, :d)),
            (:line, 834, :none),
            (:macrocall, Symbol("@handle_zero"), :x),
            (:line, 835, :none),
            (:(=), :pt, (:(=), :i, (:call, (:., :Base, (:quote, #QuoteNode
                      :ndigits0z
                    )), :x))),
            (:line, 836, :none),
            (:while, (:call, :>, :i, 0), (:block,
                (:line, 837, :none),
                (:(=), (:ref, :DIGITS, :i), (:call, :+, '0', (:call, :rem, :x, 10))),
                (:line, 838, :none),
                (:(=), :x, (:call, :div, :x, 10)),
                (:line, 839, :none),
                (:-=, :i, 1)
              )),
            (:line, 841, :none),
            (:return, (:tuple, (:call, :Int32, :pt), (:call, :Int32, :pt), :neg))
          )),
        (:line, 844, :none),
        (:function, (:call, :decode_hex, (:(::), :d, :Integer), (:(::), :symbols, (:curly, :Array, :UInt8, 1))), (:block,
            (:line, 845, :none),
            (:(=), (:tuple, :neg, :x), (:call, :handlenegative, :d)),
            (:line, 846, :none),
            (:macrocall, Symbol("@handle_zero"), :x),
            (:line, 847, :none),
            (:(=), :pt, (:(=), :i, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 1), (:call, :>>, (:call, :leading_zeros, :x), 2)))),
            (:line, 848, :none),
            (:while, (:call, :>, :i, 0), (:block,
                (:line, 849, :none),
                (:(=), (:ref, :DIGITS, :i), (:ref, :symbols, (:call, :+, (:call, :&, :x, 0x0f), 1))),
                (:line, 850, :none),
                (:>>=, :x, 4),
                (:line, 851, :none),
                (:-=, :i, 1)
              )),
            (:line, 853, :none),
            (:return, (:tuple, (:call, :Int32, :pt), (:call, :Int32, :pt), :neg))
          )),
        (:line, 856, :none),
        (:const, (:(=), :hex_symbols, (:., "0123456789abcdef", (:quote, #QuoteNode
                :data
              )))),
        (:line, 857, :none),
        (:const, (:(=), :HEX_symbols, (:., "0123456789ABCDEF", (:quote, #QuoteNode
                :data
              )))),
        (:line, 859, :none),
        (:(=), (:call, :decode_hex, (:(::), :x, :Integer)), (:block,
            (:line, 859, :none),
            (:call, :decode_hex, :x, :hex_symbols)
          )),
        (:line, 860, :none),
        (:(=), (:call, :decode_HEX, (:(::), :x, :Integer)), (:block,
            (:line, 860, :none),
            (:call, :decode_hex, :x, :HEX_symbols)
          )),
        (:line, 862, :none),
        (:function, (:call, :decode, (:(::), :b, :Int), (:(::), :x, :BigInt)), (:block,
            (:line, 863, :none),
            (:(=), :neg, (:call, :<, (:., :x, (:quote, #QuoteNode
                    :size
                  )), 0)),
            (:line, 864, :none),
            (:(=), :pt, (:call, (:., :Base, (:quote, #QuoteNode
                    :ndigits
                  )), :x, (:call, :abs, :b))),
            (:line, 865, :none),
            (:&&, (:call, :<, (:call, :length, :DIGITS), (:call, :+, :pt, 1)), (:call, :resize!, :DIGITS, (:call, :+, :pt, 1))),
            (:line, 866, :none),
            (:&&, :neg, (:(=), (:., :x, (:quote, #QuoteNode
                    :size
                  )), (:call, :-, (:., :x, (:quote, #QuoteNode
                      :size
                    ))))),
            (:line, 867, :none),
            (:ccall, (:tuple, (:quote, #QuoteNode
                  :__gmpz_get_str
                ), (:quote, #QuoteNode
                  :libgmp
                )), :Cstring, (:tuple, (:curly, :Ptr, :UInt8), :Cint, (:curly, :Ptr, :BigInt)), :DIGITS, :b, (:&, :x)),
            (:line, 869, :none),
            (:&&, :neg, (:(=), (:., :x, (:quote, #QuoteNode
                    :size
                  )), (:call, :-, (:., :x, (:quote, #QuoteNode
                      :size
                    ))))),
            (:line, 870, :none),
            (:return, (:tuple, (:call, :Int32, :pt), (:call, :Int32, :pt), :neg))
          )),
        (:line, 872, :none),
        (:(=), (:call, :decode_oct, (:(::), :x, :BigInt)), (:block,
            (:line, 872, :none),
            (:call, :decode, 8, :x)
          )),
        (:line, 873, :none),
        (:(=), (:call, :decode_dec, (:(::), :x, :BigInt)), (:block,
            (:line, 873, :none),
            (:call, :decode, 10, :x)
          )),
        (:line, 874, :none),
        (:(=), (:call, :decode_hex, (:(::), :x, :BigInt)), (:block,
            (:line, 874, :none),
            (:call, :decode, 16, :x)
          )),
        (:line, 875, :none),
        (:(=), (:call, :decode_HEX, (:(::), :x, :BigInt)), (:block,
            (:line, 875, :none),
            (:call, :decode, -16, :x)
          )),
        (:line, 877, :none),
        (:function, (:call, :decode_0ct, (:(::), :x, :BigInt)), (:block,
            (:line, 878, :none),
            (:(=), :neg, (:call, :<, (:., :x, (:quote, #QuoteNode
                    :size
                  )), 0)),
            (:line, 879, :none),
            (:(=), (:ref, :DIGITS, 1), '0'),
            (:line, 880, :none),
            (:if, (:call, :(==), (:., :x, (:quote, #QuoteNode
                    :size
                  )), 0), (:block,
                (:line, 881, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), :neg))
              )),
            (:line, 883, :none),
            (:(=), :pt, (:call, :+, (:call, (:., :Base, (:quote, #QuoteNode
                      :ndigits0z
                    )), :x, 8), 1)),
            (:line, 884, :none),
            (:&&, (:call, :<, (:call, :length, :DIGITS), (:call, :+, :pt, 1)), (:call, :resize!, :DIGITS, (:call, :+, :pt, 1))),
            (:line, 885, :none),
            (:&&, :neg, (:(=), (:., :x, (:quote, #QuoteNode
                    :size
                  )), (:call, :-, (:., :x, (:quote, #QuoteNode
                      :size
                    ))))),
            (:line, 886, :none),
            (:(=), :p, (:call, :+, (:call, :convert, (:curly, :Ptr, :UInt8), :DIGITS), 1)),
            (:line, 887, :none),
            (:ccall, (:tuple, (:quote, #QuoteNode
                  :__gmpz_get_str
                ), (:quote, #QuoteNode
                  :libgmp
                )), :Cstring, (:tuple, (:curly, :Ptr, :UInt8), :Cint, (:curly, :Ptr, :BigInt)), :p, 8, (:&, :x)),
            (:line, 889, :none),
            (:&&, :neg, (:(=), (:., :x, (:quote, #QuoteNode
                    :size
                  )), (:call, :-, (:., :x, (:quote, #QuoteNode
                      :size
                    ))))),
            (:line, 890, :none),
            (:return, (:tuple, :neg, (:call, :Int32, :pt), (:call, :Int32, :pt)))
          )),
        (:line, 907, :none),
        (:function, (:call, :decode_dec, (:(::), :x, :SmallFloatingPoint)), (:block,
            (:line, 908, :none),
            (:if, (:call, :(==), :x, 0.0), (:block,
                (:line, 909, :none),
                (:(=), (:ref, :DIGITS, 1), '0'),
                (:line, 910, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), false))
              )),
            (:line, 912, :none),
            (:(=), (:tuple, :len, :pt, :neg), (:call, :grisu, :x, (:., :Grisu, (:quote, #QuoteNode
                    :FIXED
                  )), 0)),
            (:line, 913, :none),
            (:if, (:call, :(==), :len, 0), (:block,
                (:line, 914, :none),
                (:(=), (:ref, :DIGITS, 1), '0'),
                (:line, 915, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), false))
              ), (:block,
                (:line, 917, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :len, 1), :pt)), (:block,
                    (:line, 918, :none),
                    (:(=), (:ref, :DIGITS, :i), '0')
                  ))
              )),
            (:line, 921, :none),
            (:return, (:tuple, (:call, :Int32, :len), (:call, :Int32, :pt), :neg))
          )),
        (:line, 932, :none),
        (:(=), (:call, :fix_dec, (:(::), :x, :Real), (:(::), :n, :Int)), (:block,
            (:line, 932, :none),
            (:call, :fix_dec, (:call, :float, :x), :n)
          )),
        (:line, 934, :none),
        (:(=), (:call, :fix_dec, (:(::), :x, :Integer), (:(::), :n, :Int)), (:block,
            (:line, 934, :none),
            (:call, :decode_dec, :x)
          )),
        (:line, 936, :none),
        (:function, (:call, :fix_dec, (:(::), :x, :SmallFloatingPoint), (:(::), :n, :Int)), (:block,
            (:line, 937, :none),
            (:if, (:call, :>, :n, (:call, :-, (:call, :length, :DIGITS), 1)), (:block,
                (:line, 937, :none),
                (:(=), :n, (:call, :-, (:call, :length, :DIGITS), 1))
              )),
            (:line, 938, :none),
            (:(=), (:tuple, :len, :pt, :neg), (:call, :grisu, :x, (:., :Grisu, (:quote, #QuoteNode
                    :FIXED
                  )), :n)),
            (:line, 939, :none),
            (:if, (:call, :(==), :len, 0), (:block,
                (:line, 940, :none),
                (:(=), (:ref, :DIGITS, 1), '0'),
                (:line, 941, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), :neg))
              )),
            (:line, 943, :none),
            (:return, (:tuple, (:call, :Int32, :len), (:call, :Int32, :pt), :neg))
          )),
        (:line, 953, :none),
        (:(=), (:call, :ini_dec, (:(::), :x, :Real), (:(::), :n, :Int)), (:block,
            (:line, 953, :none),
            (:call, :ini_dec, (:call, :float, :x), :n)
          )),
        (:line, 955, :none),
        (:function, (:call, :ini_dec, (:(::), :d, :Integer), (:(::), :n, :Int)), (:block,
            (:line, 956, :none),
            (:(=), (:tuple, :neg, :x), (:call, :handlenegative, :d)),
            (:line, 957, :none),
            (:(=), :k, (:call, :ndigits, :x)),
            (:line, 958, :none),
            (:if, (:call, :(<=), :k, :n), (:block,
                (:line, 959, :none),
                (:(=), :pt, :k),
                (:line, 960, :none),
                (:for, (:(=), :i, (:(:), :k, -1, 1)), (:block,
                    (:line, 961, :none),
                    (:(=), (:ref, :DIGITS, :i), (:call, :+, '0', (:call, :rem, :x, 10))),
                    (:line, 962, :none),
                    (:(=), :x, (:call, :div, :x, 10))
                  )),
                (:line, 964, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :k, 1), :n)), (:block,
                    (:line, 965, :none),
                    (:(=), (:ref, :DIGITS, :i), '0')
                  ))
              ), (:block,
                (:line, 968, :none),
                (:(=), :p, (:ref, (:., :Base, (:quote, #QuoteNode
                        :powers_of_ten
                      )), (:call, :+, (:call, :-, :k, :n), 1))),
                (:line, 969, :none),
                (:(=), :r, (:call, :rem, :x, :p)),
                (:line, 970, :none),
                (:if, (:call, :(>=), :r, (:call, :>>, :p, 1)), (:block,
                    (:line, 971, :none),
                    (:+=, :x, :p),
                    (:line, 972, :none),
                    (:if, (:call, :(>=), :x, (:ref, (:., :Base, (:quote, #QuoteNode
                              :powers_of_ten
                            )), (:call, :+, :k, 1))), (:block,
                        (:line, 973, :none),
                        (:*=, :p, 10),
                        (:line, 974, :none),
                        (:+=, :k, 1)
                      ))
                  )),
                (:line, 977, :none),
                (:(=), :pt, :k),
                (:line, 978, :none),
                (:(=), :x, (:call, :div, :x, :p)),
                (:line, 979, :none),
                (:for, (:(=), :i, (:(:), :n, -1, 1)), (:block,
                    (:line, 980, :none),
                    (:(=), (:ref, :DIGITS, :i), (:call, :+, '0', (:call, :rem, :x, 10))),
                    (:line, 981, :none),
                    (:(=), :x, (:call, :div, :x, 10))
                  ))
              )),
            (:line, 984, :none),
            (:return, (:tuple, :n, :pt, :neg))
          )),
        (:line, 987, :none),
        (:function, (:call, :ini_dec, (:(::), :x, :SmallFloatingPoint), (:(::), :n, :Int)), (:block,
            (:line, 988, :none),
            (:if, (:call, :(==), :x, 0.0), (:block,
                (:line, 989, :none),
                (:ccall, (:quote, #QuoteNode
                    :memset
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :DIGITS, '0', :n),
                (:line, 990, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), (:call, :signbit, :x)))
              ), (:block,
                (:line, 992, :none),
                (:(=), (:tuple, :len, :pt, :neg), (:call, :grisu, :x, (:., :Grisu, (:quote, #QuoteNode
                        :PRECISION
                      )), :n))
              )),
            (:line, 994, :none),
            (:return, (:tuple, (:call, :Int32, :len), (:call, :Int32, :pt), :neg))
          )),
        (:line, 997, :none),
        (:function, (:call, :ini_dec, (:(::), :x, :BigInt), (:(::), :n, :Int)), (:block,
            (:line, 998, :none),
            (:if, (:call, :(==), (:., :x, (:quote, #QuoteNode
                    :size
                  )), 0), (:block,
                (:line, 999, :none),
                (:ccall, (:quote, #QuoteNode
                    :memset
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :DIGITS, '0', :n),
                (:line, 1000, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 1), false))
              )),
            (:line, 1002, :none),
            (:(=), :d, (:call, (:., :Base, (:quote, #QuoteNode
                    :ndigits0z
                  )), :x)),
            (:line, 1003, :none),
            (:if, (:call, :(<=), :d, :n), (:block,
                (:line, 1004, :none),
                (:(=), :info, (:call, :decode_dec, :x)),
                (:line, 1005, :none),
                (:&&, (:call, :(==), :d, :n), (:return, :info)),
                (:line, 1006, :none),
                (:(=), :p, (:call, :+, (:call, :convert, (:curly, :Ptr, :Void), :DIGITS), (:ref, :info, 2))),
                (:line, 1007, :none),
                (:ccall, (:quote, #QuoteNode
                    :memset
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :p, '0', (:call, :-, :n, (:ref, :info, 2))),
                (:line, 1008, :none),
                (:return, :info)
              )),
            (:line, 1010, :none),
            (:return, (:tuple, :n, :d, (:ref, (:call, :decode_dec, (:call, :round, :BigInt, (:call, :/, :x, (:call, :^, (:call, :big, 10), (:call, :-, :d, :n))))), 3)))
          )),
        (:line, 1014, :none),
        (:(=), (:call, :ini_hex, (:(::), :x, :Real), (:(::), :n, :Int)), (:block,
            (:line, 1014, :none),
            (:call, :ini_hex, :x, :n, :hex_symbols)
          )),
        (:line, 1015, :none),
        (:(=), (:call, :ini_HEX, (:(::), :x, :Real), (:(::), :n, :Int)), (:block,
            (:line, 1015, :none),
            (:call, :ini_hex, :x, :n, :HEX_symbols)
          )),
        (:line, 1017, :none),
        (:(=), (:call, :ini_hex, (:(::), :x, :Real)), (:block,
            (:line, 1017, :none),
            (:call, :ini_hex, :x, :hex_symbols)
          )),
        (:line, 1018, :none),
        (:(=), (:call, :ini_HEX, (:(::), :x, :Real)), (:block,
            (:line, 1018, :none),
            (:call, :ini_hex, :x, :HEX_symbols)
          )),
        (:line, 1020, :none),
        (:(=), (:call, :ini_hex, (:(::), :x, :Real), (:(::), :n, :Int), (:(::), :symbols, (:curly, :Array, :UInt8, 1))), (:block,
            (:line, 1020, :none),
            (:call, :ini_hex, (:call, :float, :x), :n, :symbols)
          )),
        (:line, 1021, :none),
        (:(=), (:call, :ini_hex, (:(::), :x, :Real), (:(::), :symbols, (:curly, :Array, :UInt8, 1))), (:block,
            (:line, 1021, :none),
            (:call, :ini_hex, (:call, :float, :x), :symbols)
          )),
        (:line, 1023, :none),
        (:function, (:call, :ini_hex, (:(::), :x, :SmallFloatingPoint), (:(::), :n, :Int), (:(::), :symbols, (:curly, :Array, :UInt8, 1))), (:block,
            (:line, 1024, :none),
            (:(=), :x, (:call, :Float64, :x)),
            (:line, 1025, :none),
            (:if, (:call, :(==), :x, 0.0), (:block,
                (:line, 1026, :none),
                (:ccall, (:quote, #QuoteNode
                    :memset
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :DIGITS, '0', :n),
                (:line, 1027, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 0), (:call, :signbit, :x)))
              ), (:block,
                (:line, 1029, :none),
                (:(=), (:tuple, :s, :p), (:call, :frexp, :x)),
                (:line, 1030, :none),
                (:(=), :sigbits, (:call, :*, 4, (:call, :min, (:call, :-, :n, 1), 13))),
                (:line, 1031, :none),
                (:(=), :s, (:call, :*, 0.25, (:call, :round, (:call, :ldexp, :s, (:call, :+, 1, :sigbits))))),
                (:line, 1033, :none),
                (:(=), :u, (:call, :>>, (:call, :&, (:call, :reinterpret, :UInt64, :s), 0x003fffffffffffff), (:call, :-, 52, :sigbits))),
                (:line, 1034, :none),
                (:if, (:call, :>, :n, 14), (:block,
                    (:line, 1035, :none),
                    (:ccall, (:quote, #QuoteNode
                        :memset
                      ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :DIGITS, '0', :n)
                  )),
                (:line, 1037, :none),
                (:(=), :i, (:call, :-, (:call, :<<, (:call, :sizeof, :u), 1), (:call, :>>, (:call, :leading_zeros, :u), 2))),
                (:line, 1038, :none),
                (:while, (:call, :>, :i, 0), (:block,
                    (:line, 1039, :none),
                    (:(=), (:ref, :DIGITS, :i), (:ref, :symbols, (:call, :+, (:call, :&, :u, 0x0f), 1))),
                    (:line, 1040, :none),
                    (:>>=, :u, 4),
                    (:line, 1041, :none),
                    (:-=, :i, 1)
                  )),
                (:line, 1044, :none),
                (:return, (:tuple, (:call, :Int32, :n), (:call, :Int32, (:call, :-, :p, 1)), (:call, :<, :x, 0.0)))
              ))
          )),
        (:line, 1048, :none),
        (:function, (:call, :ini_hex, (:(::), :x, :SmallFloatingPoint), (:(::), :symbols, (:curly, :Array, :UInt8, 1))), (:block,
            (:line, 1049, :none),
            (:(=), :x, (:call, :Float64, :x)),
            (:line, 1050, :none),
            (:if, (:call, :(==), :x, 0.0), (:block,
                (:line, 1051, :none),
                (:ccall, (:quote, #QuoteNode
                    :memset
                  ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void), :Cint, :Csize_t), :DIGITS, '0', 1),
                (:line, 1052, :none),
                (:return, (:tuple, (:call, :Int32, 1), (:call, :Int32, 0), (:call, :signbit, :x)))
              ), (:block,
                (:line, 1054, :none),
                (:(=), (:tuple, :s, :p), (:call, :frexp, :x)),
                (:line, 1055, :none),
                (:*=, :s, 2.0),
                (:line, 1056, :none),
                (:(=), :u, (:call, :&, (:call, :reinterpret, :UInt64, :s), 0x001fffffffffffff)),
                (:line, 1057, :none),
                (:(=), :t, (:call, :>>, (:call, :trailing_zeros, :u), 2)),
                (:line, 1058, :none),
                (:>>=, :u, (:call, :<<, :t, 2)),
                (:line, 1059, :none),
                (:(=), :n, (:call, :-, 14, :t)),
                (:line, 1060, :none),
                (:for, (:(=), :i, (:(:), :n, -1, 1)), (:block,
                    (:line, 1061, :none),
                    (:(=), (:ref, :DIGITS, :i), (:ref, :symbols, (:call, :+, (:call, :&, :u, 0x0f), 1))),
                    (:line, 1062, :none),
                    (:>>=, :u, 4)
                  )),
                (:line, 1065, :none),
                (:return, (:tuple, (:call, :Int32, :n), (:call, :Int32, (:call, :-, :p, 1)), (:call, :<, :x, 0.0)))
              ))
          )),
        (:line, 1069, :none),
        (:function, (:call, :ini_hex, (:(::), :x, :Integer)), (:block,
            (:line, 1070, :none),
            (:(=), (:tuple, :len, :pt, :neg), (:call, :decode_hex, :x)),
            (:line, 1071, :none),
            (:(=), :pt, (:call, :<<, (:call, :-, :len, 1), 2)),
            (:line, 1072, :none),
            (:tuple, :len, :pt, :neg)
          )),
        (:line, 1074, :none),
        (:function, (:call, :ini_HEX, (:(::), :x, :Integer)), (:block,
            (:line, 1075, :none),
            (:(=), (:tuple, :len, :pt, :neg), (:call, :decode_HEX, :x)),
            (:line, 1076, :none),
            (:(=), :pt, (:call, :<<, (:call, :-, :len, 1), 2)),
            (:line, 1077, :none),
            (:tuple, :len, :pt, :neg)
          )),
        (:line, 1081, :none),
        (:(=), (:call, :ini_hex, (:(::), :x, :Integer), (:(::), :ndigits, :Int)), (:block,
            (:line, 1081, :none),
            (:call, :throw, (:call, :MethodError, :ini_hex, (:tuple, :x, :ndigits)))
          )),
        (:line, 1084, :none),
        (:(=), (:call, :fix_dec, :out, (:(::), :d, :BigFloat), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1084, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1085, :none),
        (:(=), (:call, :ini_dec, :out, (:(::), :d, :BigFloat), (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1085, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1086, :none),
        (:(=), (:call, :ini_hex, :out, (:(::), :d, :BigFloat), (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1086, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1087, :none),
        (:(=), (:call, :ini_HEX, :out, (:(::), :d, :BigFloat), (:(::), :ndigits, :Int), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1087, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1088, :none),
        (:(=), (:call, :ini_hex, :out, (:(::), :d, :BigFloat), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1088, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1089, :none),
        (:(=), (:call, :ini_HEX, :out, (:(::), :d, :BigFloat), (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1089, :none),
            (:call, :bigfloat_printf, :out, :d, :flags, :width, :precision, :c)
          )),
        (:line, 1090, :none),
        (:function, (:call, :bigfloat_printf, :out, :d, (:(::), :flags, :String), (:(::), :width, :Int), (:(::), :precision, :Int), (:(::), :c, :Char)), (:block,
            (:line, 1091, :none),
            (:(=), :fmt_len, (:call, :+, (:call, :sizeof, :flags), 4)),
            (:line, 1092, :none),
            (:if, (:call, :>, :width, 0), (:block,
                (:line, 1093, :none),
                (:+=, :fmt_len, (:call, :ndigits, :width))
              )),
            (:line, 1095, :none),
            (:if, (:call, :(>=), :precision, 0), (:block,
                (:line, 1096, :none),
                (:+=, :fmt_len, (:call, :+, (:call, :ndigits, :precision), 1))
              )),
            (:line, 1098, :none),
            (:(=), :fmt, (:call, :IOBuffer, :fmt_len)),
            (:line, 1099, :none),
            (:call, :write, :fmt, '%'),
            (:line, 1100, :none),
            (:call, :write, :fmt, :flags),
            (:line, 1101, :none),
            (:if, (:call, :>, :width, 0), (:block,
                (:line, 1102, :none),
                (:call, :print, :fmt, :width)
              )),
            (:line, 1104, :none),
            (:if, (:call, :(==), :precision, 0), (:block,
                (:line, 1105, :none),
                (:call, :write, :fmt, '.'),
                (:line, 1106, :none),
                (:call, :write, :fmt, '0')
              ), (:block,
                (:line, 1107, :none),
                (:if, (:call, :>, :precision, 0), (:block,
                    (:line, 1108, :none),
                    (:call, :write, :fmt, '.'),
                    (:line, 1109, :none),
                    (:call, :print, :fmt, :precision)
                  ))
              )),
            (:line, 1111, :none),
            (:call, :write, :fmt, 'R'),
            (:line, 1112, :none),
            (:call, :write, :fmt, :c),
            (:line, 1113, :none),
            (:call, :write, :fmt, (:call, :UInt8, 0)),
            (:line, 1114, :none),
            (:(=), :printf_fmt, (:call, :takebuf_array, :fmt)),
            (:line, 1115, :none),
            (:macrocall, Symbol("@assert"), (:call, :(==), (:call, :length, :printf_fmt), :fmt_len)),
            (:line, 1116, :none),
            (:(=), :bufsiz, (:call, :-, (:call, :length, :DIGITS), 1)),
            (:line, 1117, :none),
            (:(=), :lng, (:ccall, (:tuple, (:quote, #QuoteNode
                    :mpfr_snprintf
                  ), (:quote, #QuoteNode
                    :libmpfr
                  )), :Int32, (:tuple, (:curly, :Ptr, :UInt8), :Culong, (:curly, :Ptr, :UInt8), (:..., (:curly, :Ptr, :BigFloat))), :DIGITS, :bufsiz, :printf_fmt, (:&, :d))),
            (:line, 1118, :none),
            (:||, (:call, :>, :lng, 0), (:call, :error, "invalid printf formatting for BigFloat")),
            (:line, 1119, :none),
            (:call, :unsafe_write, :out, (:call, :pointer, :DIGITS), (:call, :min, :lng, :bufsiz)),
            (:line, 1120, :none),
            (:return, (:tuple, false, (:tuple,)))
          )),
        (:line, 1125, :none),
        (:(=), (:call, :is_str_expr, :ex), (:block,
            (:line, 1125, :none),
            (:&&, (:call, :isa, :ex, :Expr), (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :string
                  )), (:&&, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :macrocall
                    )), (:&&, (:call, :isa, (:ref, (:., :ex, (:quote, #QuoteNode
                            :args
                          )), 1), :Symbol), (:call, :endswith, (:call, :string, (:ref, (:., :ex, (:quote, #QuoteNode
                              :args
                            )), 1)), "str")))))
          )),
        (:line, 1129, :none),
        (:function, (:call, :_printf, :macroname, :io, :fmt, :args), (:block,
            (:line, 1130, :none),
            (:||, (:call, :isa, :fmt, :AbstractString), (:call, :throw, (:call, :ArgumentError, (:string, :macroname, ": format must be a plain static string (no interpolation or prefix)")))),
            (:line, 1131, :none),
            (:(=), (:tuple, :sym_args, :blk), (:call, :gen, :fmt)),
            (:line, 1133, :none),
            (:(=), :has_splatting, false),
            (:line, 1134, :none),
            (:for, (:(=), :arg, :args), (:block,
                (:line, 1135, :none),
                (:if, (:&&, (:call, :isa, :arg, :Expr), (:call, :(==), (:., :arg, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :...
                      ))), (:block,
                    (:line, 1136, :none),
                    (:(=), :has_splatting, true),
                    (:line, 1137, :none),
                    (:break,)
                  ))
              )),
            (:line, 1144, :none),
            (:if, (:&&, (:call, :!, :has_splatting), (:call, :(!=), (:call, :length, :sym_args), (:call, :length, :args))), (:block,
                (:line, 1145, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, :macroname, ": wrong number of arguments (", (:call, :length, :args), ") should be (", (:call, :length, :sym_args), ")")))
              )),
            (:line, 1148, :none),
            (:for, (:(=), :i, (:(:), (:call, :length, :sym_args), -1, 1)), (:block,
                (:line, 1149, :none),
                (:(=), :var, (:ref, (:., (:ref, :sym_args, :i), (:quote, #QuoteNode
                        :args
                      )), 1)),
                (:line, 1150, :none),
                (:if, :has_splatting, (:block,
                    (:line, 1151, :none),
                    (:call, :unshift!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:(=), (:$, :var), (:ref, :G, (:$, :i)))))
                  ), (:block,
                    (:line, 1153, :none),
                    (:call, :unshift!, (:., :blk, (:quote, #QuoteNode
                          :args
                        )), (:quote, (:(=), (:$, :var), (:$, (:call, :esc, (:ref, :args, :i))))))
                  ))
              )),
            (:line, 1161, :none),
            (:if, :has_splatting, (:block,
                (:line, 1162, :none),
                (:(=), :x, (:call, :Expr, (:quote, #QuoteNode
                      :call
                    ), (:quote, #QuoteNode
                      :tuple
                    ), (:..., :args))),
                (:line, 1163, :none),
                (:call, :unshift!, (:., :blk, (:quote, #QuoteNode
                      :args
                    )), (:quote, (:block,
                      (:line, 1165, :none),
                      (:(=), :G, (:$, (:call, :esc, :x))),
                      (:line, 1166, :none),
                      (:if, (:call, :(!=), (:call, :length, :G), (:$, (:call, :length, :sym_args))), (:block,
                          (:line, 1167, :none),
                          (:call, :throw, (:call, :ArgumentError, (:$, :macroname), ": wrong number of arguments (", (:call, :length, :G), ") should be (", (:$, (:call, :length, :sym_args)), ")"))
                        ))
                    )))
              )),
            (:line, 1173, :none),
            (:call, :unshift!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), :out, (:$, :io)))),
            (:line, 1174, :none),
            (:call, :Expr, (:quote, #QuoteNode
                :let
              ), :blk)
          )),
        (:line, 1177, :none),
        (:macro, (:call, :printf, (:..., :args)), (:block,
            (:line, 1178, :none),
            (:&&, (:call, :isempty, :args), (:call, :throw, (:call, :ArgumentError, "@printf: called with no arguments"))),
            (:line, 1179, :none),
            (:if, (:||, (:call, :isa, (:ref, :args, 1), :AbstractString), (:call, :is_str_expr, (:ref, :args, 1))), (:block,
                (:line, 1180, :none),
                (:call, :_printf, "@printf", (:quote, #QuoteNode
                    :STDOUT
                  ), (:ref, :args, 1), (:ref, :args, (:(:), 2, :end)))
              ), (:block,
                (:line, 1182, :none),
                (:||, (:&&, (:call, :(>=), (:call, :length, :args), 2), (:||, (:call, :isa, (:ref, :args, 2), :AbstractString), (:call, :is_str_expr, (:ref, :args, 2)))), (:call, :throw, (:call, :ArgumentError, "@printf: first or second argument must be a format string"))),
                (:line, 1184, :none),
                (:call, :_printf, "@printf", (:call, :esc, (:ref, :args, 1)), (:ref, :args, 2), (:ref, :args, (:(:), 3, :end)))
              ))
          )),
        (:line, 1188, :none),
        (:macro, (:call, :sprintf, (:..., :args)), (:block,
            (:line, 1189, :none),
            (:&&, (:call, :isempty, :args), (:call, :throw, (:call, :ArgumentError, "@sprintf: called with zero arguments"))),
            (:line, 1190, :none),
            (:||, (:call, :isa, (:ref, :args, 1), :AbstractString), (:||, (:call, :is_str_expr, (:ref, :args, 1)), (:call, :throw, (:call, :ArgumentError, "@sprintf: first argument must be a format string")))),
            (:line, 1192, :none),
            (:(=), :letexpr, (:call, :_printf, "@sprintf", (:quote, (:call, :IOBuffer)), (:ref, :args, 1), (:ref, :args, (:(:), 2, :end)))),
            (:line, 1193, :none),
            (:call, :push!, (:., (:ref, (:., :letexpr, (:quote, #QuoteNode
                      :args
                    )), 1), (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :takebuf_string, :out))),
            (:line, 1194, :none),
            :letexpr
          ))
      ))
  ))