(:quote, (:block,
    (:line, 5, :none),
    (:type, false, :VersionNumber, (:block,
        (:line, 6, :none),
        (:(::), :major, :Int),
        (:line, 7, :none),
        (:(::), :minor, :Int),
        (:line, 8, :none),
        (:(::), :patch, :Int),
        (:line, 9, :none),
        (:(::), :prerelease, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String)))),
        (:line, 10, :none),
        (:(::), :build, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String)))),
        (:line, 12, :none),
        (:function, (:call, :VersionNumber, (:(::), :major, :Int), (:(::), :minor, :Int), (:(::), :patch, :Int), (:(::), :pre, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String)))), (:(::), :bld, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String))))), (:block,
            (:line, 15, :none),
            (:||, (:call, :(>=), :major, 0), (:call, :throw, (:call, :ArgumentError, (:string, "invalid negative major version: ", :major)))),
            (:line, 16, :none),
            (:||, (:call, :(>=), :minor, 0), (:call, :throw, (:call, :ArgumentError, (:string, "invalid negative minor version: ", :minor)))),
            (:line, 17, :none),
            (:||, (:call, :(>=), :patch, 0), (:call, :throw, (:call, :ArgumentError, (:string, "invalid negative patch version: ", :patch)))),
            (:line, 18, :none),
            (:for, (:(=), :ident, :pre), (:block,
                (:line, 19, :none),
                (:if, (:call, :isa, :ident, :Int), (:block,
                    (:line, 20, :none),
                    (:||, (:call, :(>=), :ident, 0), (:call, :throw, (:call, :ArgumentError, (:string, "invalid negative pre-release identifier: ", :ident))))
                  ), (:block,
                    (:line, 22, :none),
                    (:if, (:||, (:call, :!, (:call, :ismatch, (:macrocall, Symbol("@r_str"), "^(?:|[0-9a-z-]*[a-z-][0-9a-z-]*)\$", "i"), :ident)), (:&&, (:call, :isempty, :ident), (:call, :!, (:&&, (:call, :(==), (:call, :length, :pre), 1), (:call, :isempty, :bld))))), (:block,
                        (:line, 24, :none),
                        (:call, :throw, (:call, :ArgumentError, (:string, "invalid pre-release identifier: ", (:call, :repr, :ident))))
                      ))
                  ))
              )),
            (:line, 28, :none),
            (:for, (:(=), :ident, :bld), (:block,
                (:line, 29, :none),
                (:if, (:call, :isa, :ident, :Int), (:block,
                    (:line, 30, :none),
                    (:||, (:call, :(>=), :ident, 0), (:call, :throw, (:call, :ArgumentError, (:string, "invalid negative build identifier: ", :ident))))
                  ), (:block,
                    (:line, 32, :none),
                    (:if, (:||, (:call, :!, (:call, :ismatch, (:macrocall, Symbol("@r_str"), "^(?:|[0-9a-z-]*[a-z-][0-9a-z-]*)\$", "i"), :ident)), (:&&, (:call, :isempty, :ident), (:call, :(!=), (:call, :length, :bld), 1))), (:block,
                        (:line, 34, :none),
                        (:call, :throw, (:call, :ArgumentError, (:string, "invalid build identifier: ", (:call, :repr, :ident))))
                      ))
                  ))
              )),
            (:line, 38, :none),
            (:call, :new, :major, :minor, :patch, :pre, :bld)
          ))
      )),
    (:line, 41, :none),
    (:(=), (:call, :VersionNumber, (:(::), :major, :Integer), (:kw, (:(::), :minor, :Integer), 0), (:kw, (:(::), :patch, :Integer), 0), (:kw, (:(::), :pre, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Integer, :AbstractString)))), (:tuple,)), (:kw, (:(::), :bld, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Integer, :AbstractString)))), (:tuple,))), (:block,
        (:line, 41, :none),
        (:call, :VersionNumber, (:call, :Int, :major), (:call, :Int, :minor), (:call, :Int, :patch), (:call, :map, (:->, :x, (:block,
                (:line, 45, :none),
                (:if, (:call, :isa, :x, :Integer), (:call, :Int, :x), (:call, :String, :x))
              )), :pre), (:call, :map, (:->, :x, (:block,
                (:line, 46, :none),
                (:if, (:call, :isa, :x, :Integer), (:call, :Int, :x), (:call, :String, :x))
              )), :bld))
      )),
    (:line, 48, :none),
    (:function, (:call, :print, (:(::), :io, :IO), (:(::), :v, :VersionNumber)), (:block,
        (:line, 49, :none),
        (:&&, (:call, :(==), :v, (:call, :typemax, :VersionNumber)), (:return, (:call, :print, :io, "âˆž"))),
        (:line, 50, :none),
        (:call, :print, :io, (:., :v, (:quote, #QuoteNode
              :major
            ))),
        (:line, 51, :none),
        (:call, :print, :io, '.'),
        (:line, 52, :none),
        (:call, :print, :io, (:., :v, (:quote, #QuoteNode
              :minor
            ))),
        (:line, 53, :none),
        (:call, :print, :io, '.'),
        (:line, 54, :none),
        (:call, :print, :io, (:., :v, (:quote, #QuoteNode
              :patch
            ))),
        (:line, 55, :none),
        (:if, (:call, :!, (:call, :isempty, (:., :v, (:quote, #QuoteNode
                  :prerelease
                )))), (:block,
            (:line, 56, :none),
            (:call, :print, :io, '-'),
            (:line, 57, :none),
            (:call, :join, :io, (:., :v, (:quote, #QuoteNode
                  :prerelease
                )), '.')
          )),
        (:line, 59, :none),
        (:if, (:call, :!, (:call, :isempty, (:., :v, (:quote, #QuoteNode
                  :build
                )))), (:block,
            (:line, 60, :none),
            (:call, :print, :io, '+'),
            (:line, 61, :none),
            (:call, :join, :io, (:., :v, (:quote, #QuoteNode
                  :build
                )), '.')
          ))
      )),
    (:line, 64, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :v, :VersionNumber)), (:block,
        (:line, 64, :none),
        (:call, :print, :io, "v\"", :v, "\"")
      )),
    (:line, 66, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :VersionNumber)), (:(::), :v, :Integer)), (:block,
        (:line, 66, :none),
        (:call, :VersionNumber, :v)
      )),
    (:line, 67, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :VersionNumber)), (:(::), :v, :Tuple)), (:block,
        (:line, 67, :none),
        (:call, :VersionNumber, (:..., :v))
      )),
    (:line, 69, :none),
    (:const, (:(=), :VERSION_REGEX, (:macrocall, Symbol("@r_str"), "^\n    v?                                      # prefix        (optional)\n    (\\d+)                                   # major         (required)\n    (?:\\.(\\d+))?                            # minor         (optional)\n    (?:\\.(\\d+))?                            # patch         (optional)\n    (?:(-)|                                 # pre-release   (optional)\n    ([a-z][0-9a-z-]*(?:\\.[0-9a-z-]+)*|-(?:[0-9a-z-]+\\.)*[0-9a-z-]+)?\n    (?:(\\+)|\n    (?:\\+((?:[0-9a-z-]+\\.)*[0-9a-z-]+))?    # build         (optional)\n    ))\n\$", "ix"))),
    (:line, 81, :none),
    (:function, (:call, :split_idents, (:(::), :s, :AbstractString)), (:block,
        (:line, 82, :none),
        (:(=), :idents, (:call, :split, :s, '.')),
        (:line, 83, :none),
        (:call, :ntuple, (:->, (:tuple, :i), (:block,
              (:line, 84, :none),
              (:(=), :ident, (:ref, :idents, :i)),
              (:line, 85, :none),
              (:if, (:call, :ismatch, (:macrocall, Symbol("@r_str"), "^\\d+\$"), :ident), (:call, :parse, :Int, :ident), (:call, :String, :ident))
            )), (:call, :length, :idents))
      )),
    (:line, 89, :none),
    (:function, (:call, :VersionNumber, (:(::), :v, :AbstractString)), (:block,
        (:line, 90, :none),
        (:(=), :m, (:call, :match, :VERSION_REGEX, :v)),
        (:line, 91, :none),
        (:&&, (:call, :(===), :m, :nothing), (:call, :throw, (:call, :ArgumentError, (:string, "invalid version string: ", :v)))),
        (:line, 92, :none),
        (:(=), (:tuple, :major, :minor, :patch, :minus, :prerl, :plus, :build), (:., :m, (:quote, #QuoteNode
              :captures
            ))),
        (:line, 93, :none),
        (:(=), :major, (:call, :parse, :Int, :major)),
        (:line, 94, :none),
        (:(=), :minor, (:if, (:call, :(!==), :minor, :nothing), (:call, :parse, :Int, :minor), 0)),
        (:line, 95, :none),
        (:(=), :patch, (:if, (:call, :(!==), :patch, :nothing), (:call, :parse, :Int, :patch), 0)),
        (:line, 96, :none),
        (:if, (:&&, (:call, :(!==), :prerl, :nothing), (:&&, (:call, :!, (:call, :isempty, :prerl)), (:call, :(==), (:ref, :prerl, 1), '-'))), (:block,
            (:line, 97, :none),
            (:(=), :prerl, (:ref, :prerl, (:(:), 2, :end)))
          )),
        (:line, 99, :none),
        (:(=), :prerl, (:if, (:call, :(!==), :prerl, :nothing), (:call, :split_idents, :prerl), (:if, (:call, :(!==), :minus, :nothing), (:tuple, ""), (:tuple,)))),
        (:line, 100, :none),
        (:(=), :build, (:if, (:call, :(!==), :build, :nothing), (:call, :split_idents, :build), (:if, (:call, :(!==), :plus, :nothing), (:tuple, ""), (:tuple,)))),
        (:line, 101, :none),
        (:call, :VersionNumber, :major, :minor, :patch, :prerl, :build)
      )),
    (:line, 104, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :VersionNumber)), (:(::), :v, :AbstractString)), (:block,
        (:line, 104, :none),
        (:call, :VersionNumber, :v)
      )),
    (:line, 106, :none),
    (:macro, (:call, :v_str, :v), (:block,
        (:line, 106, :none),
        (:call, :VersionNumber, :v)
      )),
    (:line, 108, :none),
    (:(=), (:call, :typemin, (:(::), (:curly, :Type, :VersionNumber))), (:block,
        (:line, 108, :none),
        (:macrocall, Symbol("@v_str"), "0-")
      )),
    (:line, 109, :none),
    (:(=), (:call, :typemax, (:(::), (:curly, :Type, :VersionNumber))), (:block,
        (:line, 109, :none),
        (:call, :VersionNumber, (:call, :typemax, :Int), (:call, :typemax, :Int), (:call, :typemax, :Int), (:tuple,), (:tuple, ""))
      )),
    (:line, 111, :none),
    (:(=), (:call, :ident_cmp, (:(::), :a, :Int), (:(::), :b, :Int)), (:block,
        (:line, 111, :none),
        (:call, :cmp, :a, :b)
      )),
    (:line, 112, :none),
    (:(=), (:call, :ident_cmp, (:(::), :a, :Int), (:(::), :b, :String)), (:block,
        (:line, 112, :none),
        (:if, (:call, :isempty, :b), 1, -1)
      )),
    (:line, 113, :none),
    (:(=), (:call, :ident_cmp, (:(::), :a, :String), (:(::), :b, :Int)), (:block,
        (:line, 113, :none),
        (:if, (:call, :isempty, :a), -1, 1)
      )),
    (:line, 114, :none),
    (:(=), (:call, :ident_cmp, (:(::), :a, :String), (:(::), :b, :String)), (:block,
        (:line, 114, :none),
        (:call, :cmp, :a, :b)
      )),
    (:line, 116, :none),
    (:function, (:call, :ident_cmp, (:(::), :A, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String)))), (:(::), :B, (:curly, :Tuple, (:curly, :Vararg, (:curly, :Union, :Int, :String))))), (:block,
        (:line, 118, :none),
        (:(=), :i, (:call, :start, :A)),
        (:line, 119, :none),
        (:(=), :j, (:call, :start, :B)),
        (:line, 120, :none),
        (:while, (:&&, (:call, :!, (:call, :done, :A, :i)), (:call, :!, (:call, :done, :B, :i))), (:block,
            (:line, 121, :none),
            (:(=), (:tuple, :a, :i), (:call, :next, :A, :i)),
            (:line, 122, :none),
            (:(=), (:tuple, :b, :j), (:call, :next, :B, :j)),
            (:line, 123, :none),
            (:(=), :c, (:call, :ident_cmp, :a, :b)),
            (:line, 124, :none),
            (:&&, (:call, :(!=), :c, 0), (:return, :c))
          )),
        (:line, 126, :none),
        (:if, (:&&, (:call, :done, :A, :i), (:call, :!, (:call, :done, :B, :j))), -1, (:if, (:&&, (:call, :!, (:call, :done, :A, :i)), (:call, :done, :B, :j)), 1, 0))
      )),
    (:line, 130, :none),
    (:function, (:call, :(==), (:(::), :a, :VersionNumber), (:(::), :b, :VersionNumber)), (:block,
        (:line, 131, :none),
        (:&&, (:call, :(!=), (:., :a, (:quote, #QuoteNode
                :major
              )), (:., :b, (:quote, #QuoteNode
                :major
              ))), (:return, false)),
        (:line, 132, :none),
        (:&&, (:call, :(!=), (:., :a, (:quote, #QuoteNode
                :minor
              )), (:., :b, (:quote, #QuoteNode
                :minor
              ))), (:return, false)),
        (:line, 133, :none),
        (:&&, (:call, :(!=), (:., :a, (:quote, #QuoteNode
                :patch
              )), (:., :b, (:quote, #QuoteNode
                :patch
              ))), (:return, false)),
        (:line, 134, :none),
        (:&&, (:call, :(!=), (:call, :ident_cmp, (:., :a, (:quote, #QuoteNode
                  :prerelease
                )), (:., :b, (:quote, #QuoteNode
                  :prerelease
                ))), 0), (:return, false)),
        (:line, 135, :none),
        (:&&, (:call, :(!=), (:call, :ident_cmp, (:., :a, (:quote, #QuoteNode
                  :build
                )), (:., :b, (:quote, #QuoteNode
                  :build
                ))), 0), (:return, false)),
        (:line, 136, :none),
        (:return, true)
      )),
    (:line, 139, :none),
    (:(=), (:call, :issupbuild, (:(::), :v, :VersionNumber)), (:block,
        (:line, 139, :none),
        (:&&, (:call, :(==), (:call, :length, (:., :v, (:quote, #QuoteNode
                  :build
                ))), 1), (:call, :isempty, (:ref, (:., :v, (:quote, #QuoteNode
                  :build
                )), 1)))
      )),
    (:line, 141, :none),
    (:function, (:call, :isless, (:(::), :a, :VersionNumber), (:(::), :b, :VersionNumber)), (:block,
        (:line, 142, :none),
        (:&&, (:call, :<, (:., :a, (:quote, #QuoteNode
                :major
              )), (:., :b, (:quote, #QuoteNode
                :major
              ))), (:return, true)),
        (:line, 143, :none),
        (:&&, (:call, :>, (:., :a, (:quote, #QuoteNode
                :major
              )), (:., :b, (:quote, #QuoteNode
                :major
              ))), (:return, false)),
        (:line, 144, :none),
        (:&&, (:call, :<, (:., :a, (:quote, #QuoteNode
                :minor
              )), (:., :b, (:quote, #QuoteNode
                :minor
              ))), (:return, true)),
        (:line, 145, :none),
        (:&&, (:call, :>, (:., :a, (:quote, #QuoteNode
                :minor
              )), (:., :b, (:quote, #QuoteNode
                :minor
              ))), (:return, false)),
        (:line, 146, :none),
        (:&&, (:call, :<, (:., :a, (:quote, #QuoteNode
                :patch
              )), (:., :b, (:quote, #QuoteNode
                :patch
              ))), (:return, true)),
        (:line, 147, :none),
        (:&&, (:call, :>, (:., :a, (:quote, #QuoteNode
                :patch
              )), (:., :b, (:quote, #QuoteNode
                :patch
              ))), (:return, false)),
        (:line, 148, :none),
        (:&&, (:&&, (:call, :!, (:call, :isempty, (:., :a, (:quote, #QuoteNode
                    :prerelease
                  )))), (:call, :isempty, (:., :b, (:quote, #QuoteNode
                  :prerelease
                )))), (:return, true)),
        (:line, 149, :none),
        (:&&, (:&&, (:call, :isempty, (:., :a, (:quote, #QuoteNode
                  :prerelease
                ))), (:call, :!, (:call, :isempty, (:., :b, (:quote, #QuoteNode
                    :prerelease
                  ))))), (:return, false)),
        (:line, 150, :none),
        (:(=), :c, (:call, :ident_cmp, (:., :a, (:quote, #QuoteNode
                :prerelease
              )), (:., :b, (:quote, #QuoteNode
                :prerelease
              )))),
        (:line, 151, :none),
        (:&&, (:call, :<, :c, 0), (:return, true)),
        (:line, 152, :none),
        (:&&, (:call, :>, :c, 0), (:return, false)),
        (:line, 153, :none),
        (:&&, (:&&, (:call, :!, (:call, :issupbuild, :a)), (:call, :issupbuild, :b)), (:return, true)),
        (:line, 154, :none),
        (:&&, (:&&, (:call, :issupbuild, :a), (:call, :!, (:call, :issupbuild, :b))), (:return, false)),
        (:line, 155, :none),
        (:(=), :c, (:call, :ident_cmp, (:., :a, (:quote, #QuoteNode
                :build
              )), (:., :b, (:quote, #QuoteNode
                :build
              )))),
        (:line, 156, :none),
        (:&&, (:call, :<, :c, 0), (:return, true)),
        (:line, 157, :none),
        (:return, false)
      )),
    (:line, 160, :none),
    (:function, (:call, :hash, (:(::), :v, :VersionNumber), (:(::), :h, :UInt)), (:block,
        (:line, 161, :none),
        (:+=, :h, (:call, :%, 0x8ff4ffdb75f9fede, :UInt)),
        (:line, 162, :none),
        (:(=), :h, (:call, :hash, (:., :v, (:quote, #QuoteNode
                :major
              )), :h)),
        (:line, 163, :none),
        (:(=), :h, (:call, :hash, (:., :v, (:quote, #QuoteNode
                :minor
              )), :h)),
        (:line, 164, :none),
        (:(=), :h, (:call, :hash, (:., :v, (:quote, #QuoteNode
                :patch
              )), :h)),
        (:line, 165, :none),
        (:(=), :h, (:call, :hash, (:., :v, (:quote, #QuoteNode
                :prerelease
              )), (:call, :~, :h))),
        (:line, 166, :none),
        (:(=), :h, (:call, :hash, (:., :v, (:quote, #QuoteNode
                :build
              )), (:call, :~, :h)))
      )),
    (:line, 169, :none),
    (:(=), (:call, :lowerbound, (:(::), :v, :VersionNumber)), (:block,
        (:line, 169, :none),
        (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
              :major
            )), (:., :v, (:quote, #QuoteNode
              :minor
            )), (:., :v, (:quote, #QuoteNode
              :patch
            )), (:tuple, ""), (:tuple,))
      )),
    (:line, 170, :none),
    (:(=), (:call, :upperbound, (:(::), :v, :VersionNumber)), (:block,
        (:line, 170, :none),
        (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
              :major
            )), (:., :v, (:quote, #QuoteNode
              :minor
            )), (:., :v, (:quote, #QuoteNode
              :patch
            )), (:tuple,), (:tuple, ""))
      )),
    (:line, 172, :none),
    (:(=), (:call, :thispatch, (:(::), :v, :VersionNumber)), (:block,
        (:line, 172, :none),
        (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
              :major
            )), (:., :v, (:quote, #QuoteNode
              :minor
            )), (:., :v, (:quote, #QuoteNode
              :patch
            )))
      )),
    (:line, 173, :none),
    (:(=), (:call, :thisminor, (:(::), :v, :VersionNumber)), (:block,
        (:line, 173, :none),
        (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
              :major
            )), (:., :v, (:quote, #QuoteNode
              :minor
            )), 0)
      )),
    (:line, 174, :none),
    (:(=), (:call, :thismajor, (:(::), :v, :VersionNumber)), (:block,
        (:line, 174, :none),
        (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
              :major
            )), 0, 0)
      )),
    (:line, 176, :none),
    (:(=), (:call, :nextpatch, (:(::), :v, :VersionNumber)), (:block,
        (:line, 176, :none),
        (:if, (:call, :<, :v, (:call, :thispatch, :v)), (:call, :thispatch, :v), (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
                :major
              )), (:., :v, (:quote, #QuoteNode
                :minor
              )), (:call, :+, (:., :v, (:quote, #QuoteNode
                  :patch
                )), 1)))
      )),
    (:line, 177, :none),
    (:(=), (:call, :nextminor, (:(::), :v, :VersionNumber)), (:block,
        (:line, 177, :none),
        (:if, (:call, :<, :v, (:call, :thisminor, :v)), (:call, :thisminor, :v), (:call, :VersionNumber, (:., :v, (:quote, #QuoteNode
                :major
              )), (:call, :+, (:., :v, (:quote, #QuoteNode
                  :minor
                )), 1), 0))
      )),
    (:line, 178, :none),
    (:(=), (:call, :nextmajor, (:(::), :v, :VersionNumber)), (:block,
        (:line, 178, :none),
        (:if, (:call, :<, :v, (:call, :thismajor, :v)), (:call, :thismajor, :v), (:call, :VersionNumber, (:call, :+, (:., :v, (:quote, #QuoteNode
                  :major
                )), 1), 0, 0))
      )),
    (:line, 180, :none),
    (:function, (:call, :check_new_version, (:(::), :existing, (:curly, :Vector, :VersionNumber)), (:(::), :ver, :VersionNumber)), (:block,
        (:line, 181, :none),
        (:macrocall, Symbol("@assert"), (:call, :issorted, :existing)),
        (:line, 182, :none),
        (:if, (:call, :isempty, :existing), (:block,
            (:line, 183, :none),
            (:for, (:(=), :v, (:vect, (:macrocall, Symbol("@v_str"), "0"), (:macrocall, Symbol("@v_str"), "0.0.1"), (:macrocall, Symbol("@v_str"), "0.1"), (:macrocall, Symbol("@v_str"), "1"))), (:block,
                (:line, 184, :none),
                (:&&, (:comparison, (:call, :lowerbound, :v), :(<=), :ver, :(<=), :v), (:return, nothing))
              )),
            (:line, 186, :none),
            (:call, :error, (:string, :ver, " is not a valid initial version (try 0.0.0, 0.0.1, 0.1 or 1.0)"))
          )),
        (:line, 188, :none),
        (:(=), :idx, (:call, :searchsortedlast, :existing, :ver)),
        (:line, 189, :none),
        (:(=), :prv, (:ref, :existing, :idx)),
        (:line, 190, :none),
        (:&&, (:call, :(==), :ver, :prv), (:call, :error, (:string, "version ", :ver, " already exists"))),
        (:line, 191, :none),
        (:(=), :nxt, (:if, (:call, :(!=), (:call, :thismajor, :ver), (:call, :thismajor, :prv)), (:call, :nextmajor, :prv), (:if, (:call, :(!=), (:call, :thisminor, :ver), (:call, :thisminor, :prv)), (:call, :nextminor, :prv), (:call, :nextpatch, :prv)))),
        (:line, 193, :none),
        (:||, (:call, :(<=), :ver, :nxt), (:call, :error, (:string, :ver, " skips over ", :nxt))),
        (:line, 194, :none),
        (:&&, (:call, :(<=), (:call, :thispatch, :ver), :ver), (:return, nothing)),
        (:line, 195, :none),
        (:&&, (:call, :<, :idx, (:call, :length, :existing)), (:&&, (:call, :(<=), (:call, :thispatch, (:ref, :existing, (:call, :+, :idx, 1))), :nxt), (:call, :error, (:string, :ver, " is a pre-release of existing version ", (:ref, :existing, (:call, :+, :idx, 1)))))),
        (:line, 197, :none),
        (:return, nothing)
      )),
    (:line, 202, :none),
    "    VERSION\n\nA `VersionNumber` object describing which version of Julia is in use. For details see\n[Version Number Literals](:ref:`man-version-number-literals`).\n",
    (:line, 208, :none),
    (:const, (:(=), :VERSION, (:try, (:block,
            (:line, 209, :none),
            (:(=), :ver, (:call, :convert, :VersionNumber, :VERSION_STRING)),
            (:line, 210, :none),
            (:if, (:call, :!, (:call, :isempty, (:., :ver, (:quote, #QuoteNode
                      :prerelease
                    )))), (:block,
                (:line, 211, :none),
                (:(=), :build_number, (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                      :build_number
                    ))),
                (:line, 212, :none),
                (:if, (:call, :(==), :ver, (:macrocall, Symbol("@v_str"), "0.5.0-pre")), (:block,
                    (:line, 214, :none),
                    (:+=, :build_number, 5578)
                  )),
                (:line, 216, :none),
                (:(=), :ver, (:call, :VersionNumber, (:., :ver, (:quote, #QuoteNode
                        :major
                      )), (:., :ver, (:quote, #QuoteNode
                        :minor
                      )), (:., :ver, (:quote, #QuoteNode
                        :patch
                      )), (:., :ver, (:quote, #QuoteNode
                        :prerelease
                      )), (:tuple, :build_number)))
              ), (:block,
                (:line, 217, :none),
                (:if, (:call, :(!=), (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                        :build_number
                      )), 0), (:block,
                    (:line, 218, :none),
                    (:call, :println, "WARNING: ignoring non-zero build number for VERSION")
                  ))
              )),
            (:line, 220, :none),
            :ver
          ), :e, (:block,
            (:line, 222, :none),
            (:call, :println, (:string, "while creating Base.VERSION, ignoring error ", :e)),
            (:line, 223, :none),
            (:call, :VersionNumber, 0)
          )))),
    (:line, 226, :none),
    (:function, (:call, :banner, (:kw, (:(::), :io, :IO), :STDOUT)), (:block,
        (:line, 227, :none),
        (:if, (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
              :tagged_commit
            )), (:block,
            (:line, 228, :none),
            (:(=), :commit_string, :TAGGED_RELEASE_BANNER)
          ), (:block,
            (:line, 229, :none),
            (:if, (:call, :(==), (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                    :commit
                  )), ""), (:block,
                (:line, 230, :none),
                (:(=), :commit_string, "")
              ), (:block,
                (:line, 232, :none),
                (:(=), :days, (:call, :Int, (:call, :floor, (:call, :/, (:call, :-, (:ccall, (:quote, #QuoteNode
                              :jl_clock_now
                            ), :Float64, (:tuple,)), (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                              :fork_master_timestamp
                            ))), (:call, :*, 60, 60, 24))))),
                (:line, 233, :none),
                (:(=), :days, (:call, :max, 0, :days)),
                (:line, 234, :none),
                (:(=), :unit, (:if, (:call, :(==), :days, 1), "day", "days")),
                (:line, 235, :none),
                (:(=), :distance, (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                      :fork_master_distance
                    ))),
                (:line, 236, :none),
                (:(=), :commit, (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                      :commit_short
                    ))),
                (:line, 238, :none),
                (:if, (:call, :(==), :distance, 0), (:block,
                    (:line, 239, :none),
                    (:(=), :commit_string, (:string, "Commit ", :commit, " (", :days, " ", :unit, " old release-0.5)"))
                  ), (:block,
                    (:line, 241, :none),
                    (:(=), :branch, (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                          :branch
                        ))),
                    (:line, 242, :none),
                    (:(=), :commit_string, (:string, :branch, "/", :commit, " (fork: ", :distance, " commits, ", :days, " ", :unit, ")"))
                  ))
              ))
          )),
        (:line, 245, :none),
        (:(=), :commit_date, (:if, (:call, :(!=), (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                  :date_string
                )), ""), (:string, " (", (:., :GIT_VERSION_INFO, (:quote, #QuoteNode
                  :date_string
                )), ")"), "")),
        (:line, 247, :none),
        (:if, :have_color, (:block,
            (:line, 248, :none),
            (:(=), :tx, "\e[0m\e[1m"),
            (:line, 249, :none),
            (:(=), :jl, "\e[0m\e[1m"),
            (:line, 250, :none),
            (:(=), :d1, "\e[34m"),
            (:line, 251, :none),
            (:(=), :d2, "\e[31m"),
            (:line, 252, :none),
            (:(=), :d3, "\e[32m"),
            (:line, 253, :none),
            (:(=), :d4, "\e[35m"),
            (:line, 255, :none),
            (:call, :print, :io, (:string, "\e[1m               ", :d3, "_", :tx, "\n   ", :d1, "_", :tx, "       ", :jl, "_", :tx, " ", :d2, "_", :d3, "(_)", :d4, "_", :tx, "     |  A fresh approach to technical computing\n  ", :d1, "(_)", :jl, "     | ", :d2, "(_)", :tx, " ", :d4, "(_)", :tx, "    |  Documentation: https://docs.julialang.org\n   ", :jl, "_ _   _| |_  __ _", :tx, "   |  Type \"?help\" for help.\n  ", :jl, "| | | | | | |/ _` |", :tx, "  |\n  ", :jl, "| | |_| | | | (_| |", :tx, "  |  Version ", :VERSION, :commit_date, "\n ", :jl, "_/ |\\__'_|_|_|\\__'_|", :tx, "  |  ", :commit_string, "\n", :jl, "|__/", :tx, "                   |  ", (:., :Sys, (:quote, #QuoteNode
                    :MACHINE
                  )), "\n\n\e[0m"))
          ), (:block,
            (:line, 266, :none),
            (:call, :print, :io, (:string, "               _\n   _       _ _(_)_     |  A fresh approach to technical computing\n  (_)     | (_) (_)    |  Documentation: https://docs.julialang.org\n   _ _   _| |_  __ _   |  Type \"?help\" for help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version ", :VERSION, :commit_date, "\n _/ |\\__'_|_|_|\\__'_|  |  ", :commit_string, "\n|__/                   |  ", (:., :Sys, (:quote, #QuoteNode
                    :MACHINE
                  )), "\n\n"))
          ))
      ))
  ))