(:quote, (:block,
    (:line, 3, :none),
    (:toplevel, (:import, :Core, :_apply), (:import, :Core, :svec), (:import, :Core, :apply_type), (:import, :Core, :Builtin), (:import, :Core, :IntrinsicFunction)),
    (:line, 6, :none),
    (:const, (:(=), :MAX_TYPEUNION_LEN, 3)),
    (:line, 7, :none),
    (:const, (:(=), :MAX_TYPE_DEPTH, 7)),
    (:line, 8, :none),
    (:const, (:(=), :MAX_TUPLETYPE_LEN, 15)),
    (:line, 9, :none),
    (:const, (:(=), :MAX_TUPLE_DEPTH, 4)),
    (:line, 11, :none),
    (:const, (:(=), :MAX_TUPLE_SPLAT, 16)),
    (:line, 12, :none),
    (:const, (:(=), :MAX_UNION_SPLITTING, 4)),
    (:line, 13, :none),
    (:const, (:(=), :UNION_SPLIT_MISMATCH_ERROR, false)),
    (:line, 24, :none),
    (:const, (:(=), :Slot_Assigned, 2)),
    (:line, 25, :none),
    (:const, (:(=), :Slot_AssignedOnce, 16)),
    (:line, 26, :none),
    (:const, (:(=), :Slot_UsedUndef, 32)),
    (:line, 30, :none),
    (:type, false, :NotFound, (:block,
        (:line, 30, :none)
      )),
    (:line, 31, :none),
    (:const, (:(=), :NF, (:call, :NotFound))),
    (:line, 32, :none),
    (:typealias, :LineNum, :Int),
    (:line, 33, :none),
    (:typealias, :VarTable, (:curly, :Array, :Any, 1)),
    (:line, 35, :none),
    (:type, true, :VarState, (:block,
        (:line, 36, :none),
        :typ,
        (:line, 37, :none),
        (:(::), :undef, :Bool)
      )),
    (:line, 40, :none),
    (:type, false, :Const, (:block,
        (:line, 41, :none),
        :val
      )),
    (:line, 44, :none),
    (:type, true, :InferenceState, (:block,
        (:line, 45, :none),
        (:(::), :sp, :SimpleVector),
        (:line, 46, :none),
        (:(::), :label_counter, :Int),
        (:line, 47, :none),
        (:(::), :mod, :Module),
        (:line, 48, :none),
        (:(::), :currpc, :LineNum),
        (:line, 51, :none),
        (:(::), :linfo, :LambdaInfo),
        (:line, 52, :none),
        (:(::), :nargs, :Int),
        (:line, 53, :none),
        (:(::), :stmt_types, (:curly, :Vector, :Any)),
        (:line, 55, :none),
        :bestguess,
        (:line, 57, :none),
        (:(::), :ip, :IntSet),
        (:line, 58, :none),
        (:(::), :nstmts, :Int),
        (:line, 60, :none),
        :cur_hand,
        (:line, 61, :none),
        (:(::), :handler_at, (:curly, :Vector, :Any)),
        (:line, 62, :none),
        (:(::), :n_handlers, :Int),
        (:line, 64, :none),
        (:(::), :ssavalue_uses, (:curly, :Vector, :IntSet)),
        (:line, 65, :none),
        (:(::), :ssavalue_init, (:curly, :Vector, :Any)),
        (:line, 69, :none),
        (:(::), :edges, :ObjectIdDict),
        (:line, 70, :none),
        (:(::), :backedges, (:curly, :Vector, (:curly, :Tuple, :InferenceState, (:curly, :Vector, :LineNum)))),
        (:line, 72, :none),
        (:(::), :fixedpoint, :Bool),
        (:line, 73, :none),
        (:(::), :inworkq, :Bool),
        (:line, 75, :none),
        (:(::), :optimize, :Bool),
        (:line, 76, :none),
        (:(::), :inlining, :Bool),
        (:line, 77, :none),
        (:(::), :needtree, :Bool),
        (:line, 78, :none),
        (:(::), :inferred, :Bool),
        (:line, 80, :none),
        (:function, (:call, :InferenceState, (:(::), :linfo, :LambdaInfo), (:(::), :optimize, :Bool), (:(::), :inlining, :Bool), (:(::), :needtree, :Bool)), (:block,
            (:line, 81, :none),
            (:macrocall, Symbol("@assert"), (:call, :isa, (:., :linfo, (:quote, #QuoteNode
                    :code
                  )), (:curly, :Array, :Any, 1))),
            (:line, 82, :none),
            (:(=), :nslots, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                    :slotnames
                  )))),
            (:line, 83, :none),
            (:(=), :nl, (:call, :+, (:call, :label_counter, (:., :linfo, (:quote, #QuoteNode
                      :code
                    ))), 1)),
            (:line, 85, :none),
            (:if, (:&&, (:call, :isempty, (:., :linfo, (:quote, #QuoteNode
                      :sparam_vals
                    ))), (:call, :!, (:call, :isempty, (:., :linfo, (:quote, #QuoteNode
                        :sparam_syms
                      ))))), (:block,
                (:line, 86, :none),
                (:(=), :sp, (:call, :svec, (:..., (:typed_comprehension, :Any, (:generator, (:call, :TypeVar, :sym, :Any, true), (:(=), :sym, (:., :linfo, (:quote, #QuoteNode
                                :sparam_syms
                              ))))))))
              ), (:block,
                (:line, 88, :none),
                (:(=), :sp, (:., :linfo, (:quote, #QuoteNode
                      :sparam_vals
                    )))
              )),
            (:line, 91, :none),
            (:if, (:call, :!, (:call, :isa, (:., :linfo, (:quote, #QuoteNode
                      :slottypes
                    )), :Array)), (:block,
                (:line, 92, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :slottypes
                    )), (:typed_comprehension, :Any, (:generator, :Any, (:(=), :i, (:(:), 1, :nslots)))))
              )),
            (:line, 94, :none),
            (:if, (:call, :!, (:call, :isa, (:., :linfo, (:quote, #QuoteNode
                      :ssavaluetypes
                    )), :Array)), (:block,
                (:line, 95, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :ssavaluetypes
                    )), (:typed_comprehension, :Any, (:generator, :NF, (:(=), :i, (:(:), 1, (:(::), (:., :linfo, (:quote, #QuoteNode
                                :ssavaluetypes
                              )), :Int))))))
              )),
            (:line, 98, :none),
            (:(=), :n, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                    :code
                  )))),
            (:line, 99, :none),
            (:(=), :s, (:typed_comprehension, :Any, (:generator, (:tuple,), (:(=), :i, (:(:), 1, :n))))),
            (:line, 101, :none),
            (:(=), (:ref, :s, 1), (:typed_comprehension, :Any, (:generator, (:call, :VarState, :Bottom, true), (:(=), :i, (:(:), 1, :nslots))))),
            (:line, 103, :none),
            (:(=), :atypes, (:., :linfo, (:quote, #QuoteNode
                  :specTypes
                ))),
            (:line, 104, :none),
            (:(=), :la, (:., :linfo, (:quote, #QuoteNode
                  :nargs
                ))),
            (:line, 105, :none),
            (:if, (:call, :>, :la, 0), (:block,
                (:line, 106, :none),
                (:if, (:., :linfo, (:quote, #QuoteNode
                      :isva
                    )), (:block,
                    (:line, 107, :none),
                    (:if, (:call, :(===), :atypes, :Tuple), (:block,
                        (:line, 108, :none),
                        (:if, (:call, :>, :la, 1), (:block,
                            (:line, 109, :none),
                            (:(=), :atypes, (:curly, :Tuple, (:..., (:typed_comprehension, :Any, (:generator, :Any, (:(=), :i, (:(:), 1, (:call, :-, :la, 1)))))), (:ref, (:., :Tuple, (:quote, #QuoteNode
                                      :parameters
                                    )), 1)))
                          )),
                        (:line, 111, :none),
                        (:(=), (:ref, (:ref, :s, 1), :la), (:call, :VarState, :Tuple, false))
                      ), (:block,
                        (:line, 113, :none),
                        (:(=), (:ref, (:ref, :s, 1), :la), (:call, :VarState, (:call, :tuple_tfunc, (:call, :limit_tuple_depth, (:call, :tupletype_tail, :atypes, :la))), false))
                      )),
                    (:line, 115, :none),
                    (:-=, :la, 1)
                  ))
              )),
            (:line, 119, :none),
            (:(=), :laty, (:call, :length, (:., :atypes, (:quote, #QuoteNode
                    :parameters
                  )))),
            (:line, 120, :none),
            (:if, (:call, :>, :laty, 0), (:block,
                (:line, 121, :none),
                (:(=), :lastatype, (:ref, (:., :atypes, (:quote, #QuoteNode
                        :parameters
                      )), :laty)),
                (:line, 122, :none),
                (:if, (:call, :isvarargtype, :lastatype), (:block,
                    (:line, 123, :none),
                    (:(=), :lastatype, (:ref, (:., :lastatype, (:quote, #QuoteNode
                            :parameters
                          )), 1)),
                    (:line, 124, :none),
                    (:-=, :laty, 1)
                  )),
                (:line, 126, :none),
                (:if, (:call, :isa, :lastatype, :TypeVar), (:block,
                    (:line, 127, :none),
                    (:(=), :lastatype, (:., :lastatype, (:quote, #QuoteNode
                          :ub
                        )))
                  )),
                (:line, 129, :none),
                (:if, (:call, :>, :laty, :la), (:block,
                    (:line, 130, :none),
                    (:(=), :laty, :la)
                  )),
                (:line, 132, :none),
                (:for, (:(=), :i, (:(:), 1, :laty)), (:block,
                    (:line, 133, :none),
                    (:(=), :atyp, (:ref, (:., :atypes, (:quote, #QuoteNode
                            :parameters
                          )), :i)),
                    (:line, 134, :none),
                    (:if, (:call, :isa, :atyp, :TypeVar), (:block,
                        (:line, 135, :none),
                        (:(=), :atyp, (:., :atyp, (:quote, #QuoteNode
                              :ub
                            )))
                      )),
                    (:line, 137, :none),
                    (:(=), (:ref, (:ref, :s, 1), :i), (:call, :VarState, :atyp, false))
                  )),
                (:line, 139, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :laty, 1), :la)), (:block,
                    (:line, 140, :none),
                    (:(=), (:ref, (:ref, :s, 1), :i), (:call, :VarState, :lastatype, false))
                  ))
              ), (:block,
                (:line, 143, :none),
                (:macrocall, Symbol("@assert"), (:call, :(==), :la, 0))
              )),
            (:line, 146, :none),
            (:(=), :ssavalue_uses, (:call, :find_ssavalue_uses, (:., :linfo, (:quote, #QuoteNode
                    :code
                  )))),
            (:line, 147, :none),
            (:(=), :ssavalue_init, (:call, :copy, (:., :linfo, (:quote, #QuoteNode
                    :ssavaluetypes
                  )))),
            (:line, 150, :none),
            (:(=), :cur_hand, (:tuple,)),
            (:line, 151, :none),
            (:(=), :handler_at, (:typed_comprehension, :Any, (:generator, (:tuple,), (:(=), :i, (:(:), 1, :n))))),
            (:line, 152, :none),
            (:(=), :n_handlers, 0),
            (:line, 154, :none),
            (:(=), :W, (:call, :IntSet)),
            (:line, 155, :none),
            (:call, :push!, :W, 1),
            (:line, 157, :none),
            (:(=), :inmodule, (:if, (:call, :isdefined, :linfo, (:quote, #QuoteNode
                    :def
                  )), (:., (:., :linfo, (:quote, #QuoteNode
                      :def
                    )), (:quote, #QuoteNode
                    :module
                  )), (:call, :current_module))),
            (:line, 158, :none),
            (:(=), :frame, (:call, :new, :sp, :nl, :inmodule, 0, :linfo, :la, :s, (:curly, :Union), :W, :n, :cur_hand, :handler_at, :n_handlers, :ssavalue_uses, :ssavalue_init, (:call, :ObjectIdDict), (:call, (:curly, :Vector, (:curly, :Tuple, :InferenceState, (:curly, :Vector, :LineNum)))), false, false, :optimize, :inlining, :needtree, false)),
            (:line, 166, :none),
            (:call, :push!, :active, :frame),
            (:line, 167, :none),
            (:+=, (:ref, :nactive), 1),
            (:line, 168, :none),
            (:return, :frame)
          ))
      )),
    (:line, 174, :none),
    (:const, (:(=), :active, (:call, (:curly, :Vector, :Any)))),
    (:line, 175, :none),
    (:const, (:(=), :nactive, (:call, (:curly, :Array, :Int), (:tuple,)))),
    (:line, 176, :none),
    (:(=), (:ref, :nactive), 0),
    (:line, 177, :none),
    (:const, (:(=), :workq, (:call, (:curly, :Vector, :InferenceState)))),
    (:line, 182, :none),
    (:function, (:call, :_any, (:(::), :f, :ANY), :a), (:block,
        (:line, 183, :none),
        (:for, (:(=), :x, :a), (:block,
            (:line, 184, :none),
            (:&&, (:call, :f, :x), (:return, true))
          )),
        (:line, 186, :none),
        (:return, false)
      )),
    (:line, 189, :none),
    (:function, (:call, :contains_is, :itr, (:(::), :x, :ANY)), (:block,
        (:line, 190, :none),
        (:for, (:(=), :y, :itr), (:block,
            (:line, 191, :none),
            (:if, (:call, :is, :y, :x), (:block,
                (:line, 192, :none),
                (:return, true)
              ))
          )),
        (:line, 195, :none),
        (:return, false)
      )),
    (:line, 198, :none),
    (:(=), (:call, :_topmod, (:(::), :sv, :InferenceState)), (:block,
        (:line, 198, :none),
        (:call, :_topmod, (:., :sv, (:quote, #QuoteNode
              :mod
            )))
      )),
    (:line, 199, :none),
    (:(=), (:call, :_topmod, (:(::), :m, :Module)), (:block,
        (:line, 199, :none),
        (:(::), (:ccall, (:quote, #QuoteNode
              :jl_base_relative_to
            ), :Any, (:tuple, :Any), :m), :Module)
      )),
    (:line, 201, :none),
    (:function, (:call, :istopfunction, :topmod, (:(::), :f, :ANY), :sym), (:block,
        (:line, 202, :none),
        (:if, (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                :Base
              )), (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                    :Base
                  )), :sym), (:call, :(===), :f, (:call, :getfield, (:., :Main, (:quote, #QuoteNode
                      :Base
                    )), :sym)))), (:block,
            (:line, 203, :none),
            (:return, true)
          ), (:block,
            (:line, 204, :none),
            (:if, (:&&, (:call, :isdefined, :topmod, :sym), (:call, :(===), :f, (:call, :getfield, :topmod, :sym))), (:block,
                (:line, 205, :none),
                (:return, true)
              ))
          )),
        (:line, 207, :none),
        (:return, false)
      )),
    (:line, 210, :none),
    (:(=), (:call, :isknownlength, (:(::), :t, :DataType)), (:block,
        (:line, 210, :none),
        (:||, (:call, :!, (:call, :isvatuple, :t)), (:&&, (:call, :(==), (:call, :length, (:., :t, (:quote, #QuoteNode
                    :parameters
                  ))), 1), (:call, :isa, (:ref, (:., (:ref, (:., :t, (:quote, #QuoteNode
                        :parameters
                      )), 1), (:quote, #QuoteNode
                    :parameters
                  )), 2), :Int)))
      )),
    (:line, 213, :none),
    (:(=), (:call, :tupletype_tail, (:(::), :t, :ANY), :n), (:block,
        (:line, 213, :none),
        (:curly, :Tuple, (:..., (:ref, (:., :t, (:quote, #QuoteNode
                  :parameters
                )), (:(:), :n, :end))))
      )),
    (:line, 218, :none),
    (:(=), :cmp_tfunc, (:->, (:tuple, :x, :y), (:block,
          (:line, 218, :none),
          :Bool
        ))),
    (:line, 220, :none),
    (:(=), (:call, :isType, (:(::), :t, :ANY)), (:block,
        (:line, 220, :none),
        (:&&, (:call, :isa, :t, :DataType), (:call, :is, (:., (:(::), :t, :DataType), (:quote, #QuoteNode
                :name
              )), (:., :Type, (:quote, #QuoteNode
                :name
              ))))
      )),
    (:line, 222, :none),
    (:const, (:(=), :IInf, (:call, :typemax, :Int))),
    (:line, 223, :none),
    (:const, (:(=), :n_ifunc, (:call, :+, (:call, :reinterpret, :Int32, :arraylen), 1))),
    (:line, 224, :none),
    (:const, (:(=), :t_ifunc, (:call, (:curly, :Array, (:curly, :Tuple, :Int, :Int, :Any), 1), :n_ifunc))),
    (:line, 225, :none),
    (:const, (:(=), :t_ffunc_key, (:call, (:curly, :Array, :Function, 1), 0))),
    (:line, 226, :none),
    (:const, (:(=), :t_ffunc_val, (:call, (:curly, :Array, (:curly, :Tuple, :Int, :Int, :Any), 1), 0))),
    (:line, 227, :none),
    (:function, (:call, :add_tfunc, (:(::), :f, :IntrinsicFunction), (:(::), :minarg, :Int), (:(::), :maxarg, :Int), (:(::), :tfunc, :ANY)), (:block,
        (:line, 228, :none),
        (:(=), (:ref, :t_ifunc, (:call, :+, (:call, :reinterpret, :Int32, :f), 1)), (:tuple, :minarg, :maxarg, :tfunc))
      )),
    (:line, 230, :none),
    (:function, (:call, :add_tfunc, (:(::), :f, :Function), (:(::), :minarg, :Int), (:(::), :maxarg, :Int), (:(::), :tfunc, :ANY)), (:block,
        (:line, 231, :none),
        (:call, :push!, :t_ffunc_key, :f),
        (:line, 232, :none),
        (:call, :push!, :t_ffunc_val, (:tuple, :minarg, :maxarg, :tfunc))
      )),
    (:line, 234, :none),
    (:call, :add_tfunc, :throw, 1, 1, (:->, :x, (:block,
          (:line, 234, :none),
          :Bottom
        ))),
    (:line, 235, :none),
    (:call, :add_tfunc, :box, 2, 2, (:->, (:tuple, :t, :v), (:block,
          (:line, 235, :none),
          (:if, (:call, :isType, :t), (:ref, (:., :t, (:quote, #QuoteNode
                  :parameters
                )), 1), :Any)
        ))),
    (:line, 236, :none),
    (:call, :add_tfunc, :eq_int, 2, 2, :cmp_tfunc),
    (:line, 237, :none),
    (:call, :add_tfunc, :ne_int, 2, 2, :cmp_tfunc),
    (:line, 238, :none),
    (:call, :add_tfunc, :slt_int, 2, 2, :cmp_tfunc),
    (:line, 239, :none),
    (:call, :add_tfunc, :ult_int, 2, 2, :cmp_tfunc),
    (:line, 240, :none),
    (:call, :add_tfunc, :sle_int, 2, 2, :cmp_tfunc),
    (:line, 241, :none),
    (:call, :add_tfunc, :ule_int, 2, 2, :cmp_tfunc),
    (:line, 242, :none),
    (:call, :add_tfunc, :eq_float, 2, 2, :cmp_tfunc),
    (:line, 243, :none),
    (:call, :add_tfunc, :ne_float, 2, 2, :cmp_tfunc),
    (:line, 244, :none),
    (:call, :add_tfunc, :lt_float, 2, 2, :cmp_tfunc),
    (:line, 245, :none),
    (:call, :add_tfunc, :le_float, 2, 2, :cmp_tfunc),
    (:line, 246, :none),
    (:call, :add_tfunc, :fpiseq, 2, 2, :cmp_tfunc),
    (:line, 247, :none),
    (:call, :add_tfunc, :fpislt, 2, 2, :cmp_tfunc),
    (:line, 248, :none),
    (:call, :add_tfunc, :eq_float_fast, 2, 2, :cmp_tfunc),
    (:line, 249, :none),
    (:call, :add_tfunc, :ne_float_fast, 2, 2, :cmp_tfunc),
    (:line, 250, :none),
    (:call, :add_tfunc, :lt_float_fast, 2, 2, :cmp_tfunc),
    (:line, 251, :none),
    (:call, :add_tfunc, :le_float_fast, 2, 2, :cmp_tfunc),
    (:line, 253, :none),
    (:call, :add_tfunc, (:., (:., :Core, (:quote, #QuoteNode
            :Intrinsics
          )), (:quote, #QuoteNode
          :ccall
        )), 3, :IInf, (:function, (:tuple, :fptr, :rt, :at, (:..., :a)), (:block,
          (:line, 255, :none),
          (:if, (:call, :!, (:call, :isType, :rt)), (:block,
              (:line, 256, :none),
              (:return, :Any)
            )),
          (:line, 258, :none),
          (:(=), :t, (:ref, (:., :rt, (:quote, #QuoteNode
                  :parameters
                )), 1)),
          (:line, 259, :none),
          (:if, (:&&, (:call, :isa, :t, :DataType), (:call, :is, (:., (:(::), :t, :DataType), (:quote, #QuoteNode
                    :name
                  )), (:., :Ref, (:quote, #QuoteNode
                    :name
                  )))), (:block,
              (:line, 260, :none),
              (:(=), :t, (:ref, (:., :t, (:quote, #QuoteNode
                      :parameters
                    )), 1)),
              (:line, 261, :none),
              (:if, (:call, :is, :t, :Any), (:block,
                  (:line, 262, :none),
                  (:return, (:curly, :Union))
                )),
              (:line, 264, :none),
              (:return, :t)
            )),
          (:line, 266, :none),
          (:return, :t)
        ))),
    (:line, 268, :none),
    (:call, :add_tfunc, (:., (:., :Core, (:quote, #QuoteNode
            :Intrinsics
          )), (:quote, #QuoteNode
          :llvmcall
        )), 3, :IInf, (:->, (:tuple, :fptr, :rt, :at, (:..., :a)), (:block,
          (:line, 269, :none),
          (:if, (:call, :isType, :rt), (:ref, (:., :rt, (:quote, #QuoteNode
                  :parameters
                )), 1), :Any)
        ))),
    (:line, 270, :none),
    (:call, :add_tfunc, (:., (:., :Core, (:quote, #QuoteNode
            :Intrinsics
          )), (:quote, #QuoteNode
          :cglobal
        )), 1, 2, (:->, (:tuple, :fptr, (:..., :t)), (:block,
          (:line, 271, :none),
          (:if, (:call, :isempty, :t), (:curly, :Ptr, :Void), (:if, (:call, :isType, (:ref, :t, 1)), (:curly, :Ptr, (:ref, (:., (:ref, :t, 1), (:quote, #QuoteNode
                      :parameters
                    )), 1)), :Ptr))
        ))),
    (:line, 273, :none),
    (:call, :add_tfunc, (:., (:., :Core, (:quote, #QuoteNode
            :Intrinsics
          )), (:quote, #QuoteNode
          :select_value
        )), 3, 3, (:function, (:tuple, :cnd, :x, :y), (:block,
          (:line, 275, :none),
          (:if, (:call, :isa, :cnd, :Const), (:block,
              (:line, 276, :none),
              (:if, (:call, :(===), (:., :cnd, (:quote, #QuoteNode
                      :val
                    )), true), (:block,
                  (:line, 277, :none),
                  (:return, :x)
                ), (:block,
                  (:line, 278, :none),
                  (:if, (:call, :(===), (:., :cnd, (:quote, #QuoteNode
                          :val
                        )), false), (:block,
                      (:line, 279, :none),
                      (:return, :y)
                    ), (:block,
                      (:line, 281, :none),
                      (:return, :Bottom)
                    ))
                ))
            )),
          (:line, 284, :none),
          (:||, (:call, :⊑, :Bool, :cnd), (:return, :Bottom)),
          (:line, 285, :none),
          (:call, :tmerge, :x, :y)
        ))),
    (:line, 287, :none),
    (:call, :add_tfunc, :is, 2, 2, (:function, (:tuple, (:(::), :x, :ANY), (:(::), :y, :ANY)), (:block,
          (:line, 289, :none),
          (:if, (:&&, (:call, :isa, :x, :Const), (:call, :isa, :y, :Const)), (:block,
              (:line, 290, :none),
              (:return, (:call, :Const, (:call, :(===), (:., :x, (:quote, #QuoteNode
                        :val
                      )), (:., :y, (:quote, #QuoteNode
                        :val
                      )))))
            ), (:block,
              (:line, 291, :none),
              (:if, (:&&, (:call, :isType, :x), (:&&, (:call, :isType, :y), (:&&, (:call, :isleaftype, :x), (:call, :isleaftype, :y)))), (:block,
                  (:line, 292, :none),
                  (:return, (:call, :Const, (:call, :(===), (:ref, (:., :x, (:quote, #QuoteNode
                              :parameters
                            )), 1), (:ref, (:., :y, (:quote, #QuoteNode
                              :parameters
                            )), 1))))
                ), (:block,
                  (:line, 293, :none),
                  (:if, (:call, :(===), (:call, :typeintersect, (:call, :widenconst, :x), (:call, :widenconst, :y)), :Bottom), (:block,
                      (:line, 294, :none),
                      (:return, (:call, :Const, false))
                    ), (:block,
                      (:line, 295, :none),
                      (:if, (:||, (:&&, (:call, :isa, :x, :Const), (:&&, (:call, :(===), :y, (:call, :typeof, (:., :x, (:quote, #QuoteNode
                                      :val
                                    )))), (:call, :isdefined, :y, (:quote, #QuoteNode
                                  :instance
                                )))), (:&&, (:call, :isa, :y, :Const), (:&&, (:call, :(===), :x, (:call, :typeof, (:., :y, (:quote, #QuoteNode
                                      :val
                                    )))), (:call, :isdefined, :x, (:quote, #QuoteNode
                                  :instance
                                ))))), (:block,
                          (:line, 297, :none),
                          (:return, (:call, :Const, true))
                        ), (:block,
                          (:line, 299, :none),
                          (:return, :Bool)
                        ))
                    ))
                ))
            ))
        ))),
    (:line, 302, :none),
    (:call, :add_tfunc, :isdefined, 1, :IInf, (:->, (:tuple, (:..., :args)), (:block,
          (:line, 302, :none),
          :Bool
        ))),
    (:line, 303, :none),
    (:call, :add_tfunc, (:., :Core, (:quote, #QuoteNode
          :sizeof
        )), 1, 1, (:->, :x, (:block,
          (:line, 303, :none),
          :Int
        ))),
    (:line, 304, :none),
    (:call, :add_tfunc, :nfields, 1, 1, (:->, :x, (:block,
          (:line, 304, :none),
          (:if, (:call, :isa, :x, :Const), (:call, :Const, (:call, :nfields, (:., :x, (:quote, #QuoteNode
                    :val
                  )))), (:if, (:&&, (:call, :isType, :x), (:call, :isleaftype, (:ref, (:., :x, (:quote, #QuoteNode
                        :parameters
                      )), 1))), (:call, :Const, (:call, :nfields, (:ref, (:., :x, (:quote, #QuoteNode
                        :parameters
                      )), 1))), :Int))
        ))),
    (:line, 307, :none),
    (:call, :add_tfunc, (:., :Core, (:quote, #QuoteNode
          :_expr
        )), 1, :IInf, (:->, (:tuple, (:..., :args)), (:block,
          (:line, 307, :none),
          :Expr
        ))),
    (:line, 308, :none),
    (:call, :add_tfunc, :applicable, 1, :IInf, (:->, (:tuple, :f, (:..., :args)), (:block,
          (:line, 308, :none),
          :Bool
        ))),
    (:line, 309, :none),
    (:call, :add_tfunc, (:., (:., :Core, (:quote, #QuoteNode
            :Intrinsics
          )), (:quote, #QuoteNode
          :arraylen
        )), 1, 1, (:->, :x, (:block,
          (:line, 309, :none),
          :Int
        ))),
    (:line, 310, :none),
    (:call, :add_tfunc, :arraysize, 2, 2, (:->, (:tuple, :a, :d), (:block,
          (:line, 310, :none),
          :Int
        ))),
    (:line, 311, :none),
    (:call, :add_tfunc, :pointerref, 3, 3, (:function, (:tuple, :a, :i, :align), (:block,
          (:line, 313, :none),
          (:(=), :a, (:call, :widenconst, :a)),
          (:line, 314, :none),
          (:if, (:&&, (:call, :isa, :a, :DataType), (:&&, (:<:, :a, :Ptr), (:call, :isa, (:ref, (:., :a, (:quote, #QuoteNode
                        :parameters
                      )), 1), (:curly, :Union, :Type, :TypeVar)))), (:ref, (:., :a, (:quote, #QuoteNode
                  :parameters
                )), 1), :Any)
        ))),
    (:line, 316, :none),
    (:call, :add_tfunc, :pointerset, 4, 4, (:->, (:tuple, :a, :v, :i, :align), (:block,
          (:line, 316, :none),
          :a
        ))),
    (:line, 318, :none),
    (:function, (:call, :typeof_tfunc, (:(::), :t, :ANY)), (:block,
        (:line, 319, :none),
        (:if, (:call, :isa, :t, :Const), (:block,
            (:line, 320, :none),
            (:return, (:curly, :Type, (:call, :typeof, (:., :t, (:quote, #QuoteNode
                      :val
                    )))))
          ), (:block,
            (:line, 321, :none),
            (:if, (:call, :isType, :t), (:block,
                (:line, 322, :none),
                (:(=), :t, (:ref, (:., :t, (:quote, #QuoteNode
                        :parameters
                      )), 1)),
                (:line, 323, :none),
                (:if, (:call, :isa, :t, :TypeVar), (:block,
                    (:line, 324, :none),
                    :DataType
                  ), (:block,
                    (:line, 326, :none),
                    (:curly, :Type, (:call, :typeof, :t))
                  ))
              ), (:block,
                (:line, 328, :none),
                (:if, (:call, :isa, :t, :DataType), (:block,
                    (:line, 329, :none),
                    (:if, (:||, (:call, :isleaftype, :t), (:call, :isvarargtype, :t)), (:block,
                        (:line, 330, :none),
                        (:curly, :Type, :t)
                      ), (:block,
                        (:line, 331, :none),
                        (:if, (:call, :(===), :t, :Any), (:block,
                            (:line, 332, :none),
                            :DataType
                          ), (:block,
                            (:line, 334, :none),
                            (:curly, :Type, (:call, :TypeVar, (:quote, #QuoteNode
                                  :_
                                ), :t))
                          ))
                      ))
                  ), (:block,
                    (:line, 336, :none),
                    (:if, (:call, :isa, :t, :Union), (:block,
                        (:line, 337, :none),
                        (:curly, :Union, (:..., (:call, :map, :typeof_tfunc, (:., :t, (:quote, #QuoteNode
                                  :types
                                )))))
                      ), (:block,
                        (:line, 338, :none),
                        (:if, (:&&, (:call, :isa, :t, :TypeVar), (:call, :!, (:<:, :Any, (:., :t, (:quote, #QuoteNode
                                    :ub
                                  ))))), (:block,
                            (:line, 339, :none),
                            (:curly, :Type, :t)
                          ), (:block,
                            (:line, 341, :none),
                            :DataType
                          ))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 344, :none),
    (:call, :add_tfunc, :typeof, 1, 1, :typeof_tfunc),
    (:line, 345, :none),
    (:call, :add_tfunc, :typeassert, 2, 2, (:function, (:tuple, :v, :t), (:block,
          (:line, 347, :none),
          (:if, (:call, :isType, :t), (:block,
              (:line, 348, :none),
              (:if, (:call, :isa, :v, :Const), (:block,
                  (:line, 349, :none),
                  (:if, (:&&, (:call, :isleaftype, :t), (:call, :!, (:call, :isa, (:., :v, (:quote, #QuoteNode
                              :val
                            )), (:ref, (:., :t, (:quote, #QuoteNode
                                :parameters
                              )), 1)))), (:block,
                      (:line, 350, :none),
                      (:return, :Bottom)
                    )),
                  (:line, 352, :none),
                  (:return, :v)
                )),
              (:line, 354, :none),
              (:return, (:call, :typeintersect, :v, (:ref, (:., :t, (:quote, #QuoteNode
                        :parameters
                      )), 1)))
            )),
          (:line, 356, :none),
          (:return, :v)
        ))),
    (:line, 358, :none),
    (:call, :add_tfunc, :isa, 2, 2, (:function, (:tuple, :v, :t), (:block,
          (:line, 360, :none),
          (:if, (:&&, (:call, :isType, :t), (:call, :isleaftype, :t)), (:block,
              (:line, 361, :none),
              (:if, (:call, :⊑, :v, (:ref, (:., :t, (:quote, #QuoteNode
                        :parameters
                      )), 1)), (:block,
                  (:line, 362, :none),
                  (:return, (:call, :Const, true))
                ), (:block,
                  (:line, 363, :none),
                  (:if, (:||, (:call, :isa, :v, :Const), (:call, :isleaftype, :v)), (:block,
                      (:line, 364, :none),
                      (:return, (:call, :Const, false))
                    ))
                ))
            )),
          (:line, 367, :none),
          (:return, :Bool)
        ))),
    (:line, 369, :none),
    (:call, :add_tfunc, :issubtype, 2, 2, (:function, (:tuple, :a, :b), (:block,
          (:line, 371, :none),
          (:if, (:&&, (:call, :isType, :a), (:&&, (:call, :isType, :b), (:&&, (:call, :isleaftype, :a), (:call, :isleaftype, :b)))), (:block,
              (:line, 372, :none),
              (:return, (:call, :Const, (:call, :issubtype, (:ref, (:., :a, (:quote, #QuoteNode
                          :parameters
                        )), 1), (:ref, (:., :b, (:quote, #QuoteNode
                          :parameters
                        )), 1))))
            )),
          (:line, 374, :none),
          (:return, :Bool)
        ))),
    (:line, 377, :none),
    (:function, (:call, :type_depth, (:(::), :t, :ANY)), (:block,
        (:line, 378, :none),
        (:if, (:call, :isa, :t, :Union), (:block,
            (:line, 379, :none),
            (:&&, (:call, :(===), :t, :Bottom), (:return, 0)),
            (:line, 380, :none),
            (:return, (:call, :+, (:call, :maximum, :type_depth, (:., :t, (:quote, #QuoteNode
                      :types
                    ))), 1))
          ), (:block,
            (:line, 381, :none),
            (:if, (:call, :isa, :t, :DataType), (:block,
                (:line, 382, :none),
                (:return, (:., (:(::), :t, :DataType), (:quote, #QuoteNode
                      :depth
                    )))
              ))
          )),
        (:line, 384, :none),
        (:return, 0)
      )),
    (:line, 387, :none),
    (:function, (:call, :limit_type_depth, (:(::), :t, :ANY), (:(::), :d, :Int), (:(::), :cov, :Bool), :vars), (:block,
        (:line, 388, :none),
        (:if, (:||, (:call, :isa, :t, :TypeVar), (:call, :isa, :t, :TypeConstructor)), (:block,
            (:line, 389, :none),
            (:return, :t)
          )),
        (:line, 391, :none),
        (:(=), :inexact, (:&&, (:call, :!, :cov), (:call, :>, :d, :MAX_TYPE_DEPTH))),
        (:line, 392, :none),
        (:if, (:call, :isa, :t, :Union), (:block,
            (:line, 393, :none),
            (:&&, (:call, :(===), :t, :Bottom), (:return, :t)),
            (:line, 394, :none),
            (:if, (:call, :>, :d, :MAX_TYPE_DEPTH), (:block,
                (:line, 395, :none),
                (:(=), :R, :Any)
              ), (:block,
                (:line, 397, :none),
                (:(=), :R, (:curly, :Union, (:..., (:call, :map, (:->, :x, (:block,
                            (:line, 397, :none),
                            (:call, :limit_type_depth, :x, (:call, :+, :d, 1), :cov, :vars)
                          )), (:., :t, (:quote, #QuoteNode
                            :types
                          ))))))
              ))
          ), (:block,
            (:line, 399, :none),
            (:if, (:call, :isa, :t, :DataType), (:block,
                (:line, 400, :none),
                (:(=), :P, (:., :t, (:quote, #QuoteNode
                      :parameters
                    ))),
                (:line, 401, :none),
                (:&&, (:call, :isempty, :P), (:return, :t)),
                (:line, 402, :none),
                (:if, (:call, :>, :d, :MAX_TYPE_DEPTH), (:block,
                    (:line, 403, :none),
                    (:(=), :R, (:., (:., :t, (:quote, #QuoteNode
                            :name
                          )), (:quote, #QuoteNode
                          :primary
                        )))
                  ), (:block,
                    (:line, 405, :none),
                    (:(=), :stillcov, (:&&, :cov, (:call, :(===), (:., :t, (:quote, #QuoteNode
                              :name
                            )), (:., :Tuple, (:quote, #QuoteNode
                              :name
                            ))))),
                    (:line, 406, :none),
                    (:(=), :Q, (:call, :map, (:->, :x, (:block,
                            (:line, 406, :none),
                            (:call, :limit_type_depth, :x, (:call, :+, :d, 1), :stillcov, :vars)
                          )), :P)),
                    (:line, 407, :none),
                    (:if, (:&&, (:call, :!, :cov), (:call, :_any, (:->, :p, (:block,
                              (:line, 407, :none),
                              (:call, :contains_is, :vars, :p)
                            )), :Q)), (:block,
                        (:line, 408, :none),
                        (:(=), :R, (:., (:., :t, (:quote, #QuoteNode
                                :name
                              )), (:quote, #QuoteNode
                              :primary
                            ))),
                        (:line, 409, :none),
                        (:(=), :inexact, true)
                      ), (:block,
                        (:line, 411, :none),
                        (:(=), :R, (:curly, (:., (:., :t, (:quote, #QuoteNode
                                  :name
                                )), (:quote, #QuoteNode
                                :primary
                              )), (:..., :Q)))
                      ))
                  ))
              ), (:block,
                (:line, 415, :none),
                (:return, :t)
              ))
          )),
        (:line, 417, :none),
        (:if, (:&&, :inexact, (:||, (:call, :!, :cov), (:call, :!, (:call, :isvarargtype, :R)))), (:block,
            (:line, 418, :none),
            (:(=), :R, (:call, :TypeVar, (:quote, #QuoteNode
                  :_
                ), :R)),
            (:line, 419, :none),
            (:call, :push!, :vars, :R)
          )),
        (:line, 421, :none),
        (:return, :R)
      )),
    (:line, 425, :none),
    (:function, (:call, :getfield_tfunc, (:(::), :s0, :ANY), :name), (:block,
        (:line, 426, :none),
        (:if, (:call, :isa, :s0, :TypeVar), (:block,
            (:line, 427, :none),
            (:(=), :s0, (:., :s0, (:quote, #QuoteNode
                  :ub
                )))
          )),
        (:line, 429, :none),
        (:if, (:call, :isa, :s0, :TypeConstructor), (:block,
            (:line, 430, :none),
            (:(=), :s0, (:., :s0, (:quote, #QuoteNode
                  :body
                )))
          )),
        (:line, 432, :none),
        (:(=), :s, :s0),
        (:line, 433, :none),
        (:if, (:call, :isType, :s), (:block,
            (:line, 434, :none),
            (:(=), :s, (:call, :typeof, (:ref, (:., :s, (:quote, #QuoteNode
                      :parameters
                    )), 1))),
            (:line, 435, :none),
            (:if, (:call, :(===), :s, :TypeVar), (:block,
                (:line, 436, :none),
                (:return, (:tuple, :Any, false))
              ))
          ), (:block,
            (:line, 438, :none),
            (:if, (:call, :isa, :s, :Const), (:block,
                (:line, 439, :none),
                (:if, (:&&, (:call, :isa, (:., :s, (:quote, #QuoteNode
                          :val
                        )), :Module), (:&&, (:call, :isa, :name, :Const), (:call, :isa, (:., :name, (:quote, #QuoteNode
                            :val
                          )), :Symbol))), (:block,
                    (:line, 440, :none),
                    (:return, (:tuple, (:call, :abstract_eval_global, (:., :s, (:quote, #QuoteNode
                              :val
                            )), (:., :name, (:quote, #QuoteNode
                              :val
                            ))), true))
                  )),
                (:line, 442, :none),
                (:(=), :s, (:call, :typeof, (:., :s, (:quote, #QuoteNode
                        :val
                      ))))
              ))
          )),
        (:line, 444, :none),
        (:if, (:call, :isa, :s, :Union), (:block,
            (:line, 445, :none),
            (:return, (:tuple, (:call, :reduce, :tmerge, :Bottom, (:call, :map, (:->, :t, (:block,
                        (:line, 445, :none),
                        (:ref, (:call, :getfield_tfunc, :t, :name), 1)
                      )), (:., :s, (:quote, #QuoteNode
                        :types
                      )))), false))
          )),
        (:line, 447, :none),
        (:if, (:call, :isa, :s, :DataType), (:block,
            (:line, 448, :none),
            (:if, (:., :s, (:quote, #QuoteNode
                  :abstract
                )), (:block,
                (:line, 449, :none),
                (:return, (:tuple, :Any, false))
              )),
            (:line, 451, :none),
            (:if, (:&&, (:<:, :s, :Tuple), (:call, :⊑, :name, :Symbol)), (:block,
                (:line, 452, :none),
                (:return, (:tuple, :Bottom, true))
              ))
          )),
        (:line, 455, :none),
        (:if, (:&&, (:call, :isa, :name, :Const), (:call, :isa, (:., :name, (:quote, #QuoteNode
                  :val
                )), :Symbol)), (:block,
            (:line, 456, :none),
            (:(=), :fld, (:., :name, (:quote, #QuoteNode
                  :val
                ))),
            (:line, 457, :none),
            (:if, (:&&, (:call, :isa, :s0, :Const), (:&&, (:call, :isa, (:., :s0, (:quote, #QuoteNode
                        :val
                      )), :Module), (:&&, (:call, :isdefined, (:., :s0, (:quote, #QuoteNode
                          :val
                        )), :fld), (:call, :isconst, (:., :s0, (:quote, #QuoteNode
                          :val
                        )), :fld)))), (:block,
                (:line, 458, :none),
                (:return, (:tuple, (:call, :abstract_eval_constant, (:call, :getfield, (:., :s0, (:quote, #QuoteNode
                            :val
                          )), :fld)), true))
              )),
            (:line, 460, :none),
            (:if, (:<:, :s, :Module), (:block,
                (:line, 461, :none),
                (:return, (:tuple, :Any, false))
              )),
            (:line, 463, :none),
            (:if, (:call, :isType, :s0), (:block,
                (:line, 464, :none),
                (:(=), :sp, (:ref, (:., :s0, (:quote, #QuoteNode
                        :parameters
                      )), 1)),
                (:line, 465, :none),
                (:if, (:call, :isa, :sp, :DataType), (:block,
                    (:line, 466, :none),
                    (:if, (:call, :(===), :fld, (:quote, #QuoteNode
                          :parameters
                        )), (:block,
                        (:line, 467, :none),
                        (:return, (:tuple, (:call, :Const, (:., :sp, (:quote, #QuoteNode
                                  :parameters
                                ))), true))
                      ), (:block,
                        (:line, 468, :none),
                        (:if, (:call, :(===), :fld, (:quote, #QuoteNode
                              :types
                            )), (:block,
                            (:line, 469, :none),
                            (:return, (:tuple, (:call, :Const, (:., :sp, (:quote, #QuoteNode
                                      :types
                                    ))), true))
                          ), (:block,
                            (:line, 470, :none),
                            (:if, (:call, :(===), :fld, (:quote, #QuoteNode
                                  :super
                                )), (:block,
                                (:line, 471, :none),
                                (:return, (:tuple, (:curly, :Type, (:., :sp, (:quote, #QuoteNode
                                          :super
                                        ))), (:call, :isleaftype, :s)))
                              ))
                          ))
                      ))
                  ))
              )),
            (:line, 475, :none),
            (:(=), :snames, (:., (:., :s, (:quote, #QuoteNode
                    :name
                  )), (:quote, #QuoteNode
                  :names
                ))),
            (:line, 476, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :snames))), (:block,
                (:line, 477, :none),
                (:if, (:call, :is, (:ref, :snames, :i), :fld), (:block,
                    (:line, 478, :none),
                    (:(=), :R, (:ref, (:., :s, (:quote, #QuoteNode
                            :types
                          )), :i)),
                    (:line, 479, :none),
                    (:if, (:call, :isempty, (:., :s, (:quote, #QuoteNode
                            :parameters
                          ))), (:block,
                        (:line, 480, :none),
                        (:return, (:tuple, :R, true))
                      ), (:block,
                        (:line, 485, :none),
                        (:(=), :typ, (:call, :limit_type_depth, :R, 0, true, (:call, :filter!, (:->, :x, (:block,
                                  (:line, 486, :none),
                                  (:call, :isa, :x, :TypeVar)
                                )), (:ref, :Any, (:..., (:., :s, (:quote, #QuoteNode
                                      :parameters
                                    ))))))),
                        (:line, 487, :none),
                        (:return, (:tuple, :typ, (:&&, (:call, :isleaftype, :s), (:&&, (:call, :isa, :R, :Type), (:&&, (:call, :(===), (:call, :typeof, :R), (:call, :typeof, :typ)), (:call, :typeseq, :R, :typ))))))
                      ))
                  ))
              )),
            (:line, 491, :none),
            (:return, (:tuple, :Bottom, true))
          ), (:block,
            (:line, 492, :none),
            (:if, (:&&, (:call, :isa, :name, :Const), (:call, :isa, (:., :name, (:quote, #QuoteNode
                      :val
                    )), :Int)), (:block,
                (:line, 493, :none),
                (:if, (:<:, :s, :Module), (:block,
                    (:line, 494, :none),
                    (:return, (:tuple, :Bottom, true))
                  )),
                (:line, 496, :none),
                (:(=), (:(::), :i, :Int), (:., :name, (:quote, #QuoteNode
                      :val
                    ))),
                (:line, 497, :none),
                (:(=), :nf, (:., (:., :s, (:quote, #QuoteNode
                        :types
                      )), (:quote, #QuoteNode
                      :length
                    ))),
                (:line, 498, :none),
                (:if, (:&&, (:call, :isvatuple, :s), (:call, :(>=), :i, :nf)), (:block,
                    (:line, 499, :none),
                    (:return, (:tuple, (:ref, (:., (:ref, (:., :s, (:quote, #QuoteNode
                                  :types
                                )), :nf), (:quote, #QuoteNode
                              :parameters
                            )), 1), false))
                  )),
                (:line, 501, :none),
                (:if, (:||, (:call, :<, :i, 1), (:call, :>, :i, :nf)), (:block,
                    (:line, 502, :none),
                    (:return, (:tuple, :Bottom, true))
                  )),
                (:line, 504, :none),
                (:return, (:tuple, (:ref, (:., :s, (:quote, #QuoteNode
                          :types
                        )), :i), false))
              ), (:block,
                (:line, 505, :none),
                (:if, (:call, :isempty, (:., :s, (:quote, #QuoteNode
                        :types
                      ))), (:block,
                    (:line, 506, :none),
                    (:return, (:tuple, :Bottom, true))
                  ), (:block,
                    (:line, 507, :none),
                    (:if, (:&&, (:call, :(==), (:call, :length, (:., :s, (:quote, #QuoteNode
                                :types
                              ))), 1), (:call, :isempty, (:., :s, (:quote, #QuoteNode
                              :parameters
                            )))), (:block,
                        (:line, 508, :none),
                        (:return, (:tuple, (:ref, (:., :s, (:quote, #QuoteNode
                                  :types
                                )), 1), true))
                      ), (:block,
                        (:line, 510, :none),
                        (:(=), :R, (:call, :reduce, :tmerge, :Bottom, (:call, :map, :unwrapva, (:., :s, (:quote, #QuoteNode
                                  :types
                                ))))),
                        (:line, 511, :none),
                        (:(=), :alleq, (:&&, (:call, :isa, :R, :Type), (:&&, (:call, :(===), (:call, :typeof, :R), (:call, :typeof, (:ref, (:., :s, (:quote, #QuoteNode
                                        :types
                                      )), 1))), (:call, :typeseq, :R, (:ref, (:., :s, (:quote, #QuoteNode
                                      :types
                                    )), 1))))),
                        (:line, 513, :none),
                        (:if, (:call, :isempty, (:., :s, (:quote, #QuoteNode
                                :parameters
                              ))), (:block,
                            (:line, 514, :none),
                            (:return, (:tuple, :R, :alleq))
                          ), (:block,
                            (:line, 516, :none),
                            (:(=), :typ, (:call, :limit_type_depth, :R, 0, true, (:call, :filter!, (:->, :x, (:block,
                                      (:line, 517, :none),
                                      (:call, :isa, :x, :TypeVar)
                                    )), (:ref, :Any, (:..., (:., :s, (:quote, #QuoteNode
                                          :parameters
                                        ))))))),
                            (:line, 518, :none),
                            (:return, (:tuple, :typ, (:&&, :alleq, (:&&, (:call, :isleaftype, :s), (:&&, (:call, :(===), (:call, :typeof, :R), (:call, :typeof, :typ)), (:call, :typeseq, :R, :typ))))))
                          ))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 522, :none),
    (:call, :add_tfunc, :getfield, 2, 2, (:->, (:tuple, :s, :name), (:block,
          (:line, 522, :none),
          (:ref, (:call, :getfield_tfunc, :s, :name), 1)
        ))),
    (:line, 523, :none),
    (:call, :add_tfunc, :setfield!, 3, 3, (:->, (:tuple, :o, :f, :v), (:block,
          (:line, 523, :none),
          :v
        ))),
    (:line, 524, :none),
    (:function, (:call, :fieldtype_tfunc, (:(::), :s, :ANY), :name), (:block,
        (:line, 525, :none),
        (:if, (:call, :isType, :s), (:block,
            (:line, 526, :none),
            (:(=), :s, (:ref, (:., :s, (:quote, #QuoteNode
                    :parameters
                  )), 1))
          ), (:block,
            (:line, 528, :none),
            (:return, :Type)
          )),
        (:line, 530, :none),
        (:(=), (:tuple, :t, :exact), (:call, :getfield_tfunc, :s, :name)),
        (:line, 531, :none),
        (:if, (:call, :is, :t, :Bottom), (:block,
            (:line, 532, :none),
            (:return, :t)
          )),
        (:line, 534, :none),
        (:curly, :Type, (:if, (:||, :exact, (:||, (:call, :isleaftype, :t), (:||, (:call, :isa, :t, :TypeVar), (:call, :isvarargtype, :t)))), :t, (:call, :TypeVar, (:quote, #QuoteNode
                :_
              ), :t)))
      )),
    (:line, 536, :none),
    (:call, :add_tfunc, :fieldtype, 2, 2, :fieldtype_tfunc),
    (:line, 538, :none),
    (:function, (:call, :valid_tparam, (:(::), :x, :ANY)), (:block,
        (:line, 539, :none),
        (:if, (:call, :isa, :x, :Tuple), (:block,
            (:line, 540, :none),
            (:for, (:(=), :t, :x), (:block,
                (:line, 541, :none),
                (:&&, (:call, :!, (:call, :valid_tparam, :t)), (:return, false))
              )),
            (:line, 543, :none),
            (:return, true)
          )),
        (:line, 545, :none),
        (:return, (:||, (:call, :isa, :x, :Int), (:||, (:call, :isa, :x, :Symbol), (:||, (:call, :isa, :x, :Bool), (:&&, (:call, :!, (:call, :isa, :x, :Type)), (:call, :isbits, :x))))))
      )),
    (:line, 548, :none),
    (:(=), (:call, :has_typevars, (:(::), :t, :ANY), (:kw, :all, false)), (:block,
        (:line, 548, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_has_typevars_
            ), :Cint, (:tuple, :Any, :Cint), :t, :all), 0)
      )),
    (:line, 551, :none),
    (:function, (:call, :apply_type_tfunc, (:..., :args)), (:block,
        (:line, 552, :none),
        (:if, (:call, :!, (:call, :isType, (:ref, :args, 1))), (:block,
            (:line, 553, :none),
            (:return, :Any)
          )),
        (:line, 555, :none),
        (:(=), :headtype, (:ref, (:., (:ref, :args, 1), (:quote, #QuoteNode
                :parameters
              )), 1)),
        (:line, 556, :none),
        (:if, (:||, (:call, :isa, :headtype, :Union), (:call, :isa, :headtype, :TypeVar)), (:block,
            (:line, 557, :none),
            (:return, (:ref, :args, 1))
          )),
        (:line, 559, :none),
        (:(=), :largs, (:call, :length, :args)),
        (:line, 560, :none),
        (:if, (:call, :(===), :headtype, :Union), (:block,
            (:line, 561, :none),
            (:&&, (:call, :(==), :largs, 1), (:return, (:curly, :Type, :Bottom))),
            (:line, 562, :none),
            (:&&, (:call, :(==), :largs, 2), (:return, (:ref, :args, 2))),
            (:line, 563, :none),
            (:(=), :args, (:ref, :args, (:(:), 2, :end))),
            (:line, 564, :none),
            (:if, (:call, :all, :isType, :args), (:block,
                (:line, 565, :none),
                (:try, (:block,
                    (:line, 566, :none),
                    (:return, (:curly, :Type, (:curly, :Union, (:..., (:call, :map, (:->, :t, (:block,
                                  (:line, 566, :none),
                                  (:ref, (:., :t, (:quote, #QuoteNode
                                        :parameters
                                      )), 1)
                                )), :args)))))
                  ), false, (:block,
                    (:line, 568, :none),
                    (:return, :Any)
                  ))
              ), (:block,
                (:line, 571, :none),
                (:return, :Any)
              ))
          ), (:block,
            (:line, 573, :none),
            (:if, (:call, :isa, :headtype, :Union), (:block,
                (:line, 574, :none),
                (:return, :Any)
              ))
          )),
        (:line, 576, :none),
        (:(=), :istuple, (:call, :(===), :headtype, :Tuple)),
        (:line, 577, :none),
        (:(=), :uncertain, false),
        (:line, 578, :none),
        (:(=), :tparams, (:ref, :Any)),
        (:line, 579, :none),
        (:for, (:(=), :i, (:(:), 2, :largs)), (:block,
            (:line, 580, :none),
            (:(=), :ai, (:ref, :args, :i)),
            (:line, 581, :none),
            (:if, (:call, :isType, :ai), (:block,
                (:line, 582, :none),
                (:(=), :aip1, (:ref, (:., :ai, (:quote, #QuoteNode
                        :parameters
                      )), 1)),
                (:line, 583, :none),
                (:|=, :uncertain, (:call, :has_typevars, :aip1)),
                (:line, 584, :none),
                (:call, :push!, :tparams, :aip1)
              ), (:block,
                (:line, 585, :none),
                (:if, (:&&, (:call, :isa, :ai, :Const), (:call, :valid_tparam, (:., :ai, (:quote, #QuoteNode
                          :val
                        )))), (:block,
                    (:line, 586, :none),
                    (:call, :push!, :tparams, (:., :ai, (:quote, #QuoteNode
                          :val
                        )))
                  ), (:block,
                    (:line, 588, :none),
                    (:if, (:&&, (:call, :!, :istuple), (:call, :>, (:call, :-, :i, 1), (:call, :length, (:., :headtype, (:quote, #QuoteNode
                                :parameters
                              ))))), (:block,
                        (:line, 590, :none),
                        (:return, :Bottom)
                      )),
                    (:line, 592, :none),
                    (:(=), :uncertain, true),
                    (:line, 593, :none),
                    (:if, :istuple, (:block,
                        (:line, 594, :none),
                        (:call, :push!, :tparams, :Any)
                      ), (:block,
                        (:line, 596, :none),
                        (:call, :push!, :tparams, (:ref, (:., :headtype, (:quote, #QuoteNode
                                :parameters
                              )), (:call, :-, :i, 1)))
                      ))
                  ))
              ))
          )),
        (:line, 600, :none),
        (:local, :appl),
        (:line, 602, :none),
        (:try, (:block,
            (:line, 603, :none),
            (:(=), :appl, (:call, :apply_type, :headtype, (:..., :tparams)))
          ), false, (:block,
            (:line, 607, :none),
            (:(=), :appl, :headtype),
            (:line, 608, :none),
            (:(=), :uncertain, true)
          )),
        (:line, 610, :none),
        (:&&, (:call, :!, :uncertain), (:return, (:curly, :Type, :appl))),
        (:line, 611, :none),
        (:if, (:call, :type_too_complex, :appl, 0), (:block,
            (:line, 612, :none),
            (:return, (:curly, :Type, (:call, :TypeVar, (:quote, #QuoteNode
                    :_
                  ), :headtype)))
          )),
        (:line, 614, :none),
        (:if, (:call, :!, (:||, (:call, :isa, :appl, :TypeVar), (:call, :isvarargtype, :appl))), (:curly, :Type, (:call, :TypeVar, (:quote, #QuoteNode
                :_
              ), :appl)), (:curly, :Type, :appl))
      )),
    (:line, 616, :none),
    (:call, :add_tfunc, :apply_type, 1, :IInf, :apply_type_tfunc),
    (:line, 618, :none),
    (:macrocall, Symbol("@pure"), (:function, (:call, :type_typeof, (:(::), :v, :ANY)), (:block,
          (:line, 619, :none),
          (:if, (:call, :isa, :v, :Type), (:block,
              (:line, 620, :none),
              (:return, (:curly, :Type, :v))
            )),
          (:line, 622, :none),
          (:return, (:call, :typeof, :v))
        ))),
    (:line, 625, :none),
    (:function, (:call, :invoke_tfunc, (:(::), :f, :ANY), (:(::), :types, :ANY), (:(::), :argtype, :ANY), (:(::), :sv, :InferenceState)), (:block,
        (:line, 626, :none),
        (:if, (:call, :!, (:call, :isleaftype, (:curly, :Type, :types))), (:block,
            (:line, 627, :none),
            (:return, :Any)
          )),
        (:line, 629, :none),
        (:(=), :argtype, (:call, :typeintersect, :types, (:call, :limit_tuple_type, :argtype))),
        (:line, 630, :none),
        (:if, (:call, :is, :argtype, :Bottom), (:block,
            (:line, 631, :none),
            (:return, :Bottom)
          )),
        (:line, 633, :none),
        (:(=), :ft, (:call, :type_typeof, :f)),
        (:line, 634, :none),
        (:(=), :types, (:curly, :Tuple, :ft, (:..., (:., :types, (:quote, #QuoteNode
                  :parameters
                ))))),
        (:line, 635, :none),
        (:(=), :argtype, (:curly, :Tuple, :ft, (:..., (:., :argtype, (:quote, #QuoteNode
                  :parameters
                ))))),
        (:line, 636, :none),
        (:(=), :entry, (:ccall, (:quote, #QuoteNode
              :jl_gf_invoke_lookup
            ), :Any, (:tuple, :Any), :types)),
        (:line, 637, :none),
        (:if, (:call, :is, :entry, :nothing), (:block,
            (:line, 638, :none),
            (:return, :Any)
          )),
        (:line, 640, :none),
        (:(=), :meth, (:., :entry, (:quote, #QuoteNode
              :func
            ))),
        (:line, 641, :none),
        (:(=), (:tuple, :ti, :env), (:(::), (:ccall, (:quote, #QuoteNode
                :jl_match_method
              ), :Any, (:tuple, :Any, :Any, :Any), :argtype, (:., :meth, (:quote, #QuoteNode
                  :sig
                )), (:., :meth, (:quote, #QuoteNode
                  :tvars
                ))), :SimpleVector)),
        (:line, 643, :none),
        (:return, (:ref, (:call, :typeinf_edge, (:(::), :meth, :Method), :ti, :env, :sv), 2))
      )),
    (:line, 646, :none),
    (:function, (:call, :tuple_tfunc, (:(::), :argtype, :ANY)), (:block,
        (:line, 647, :none),
        (:if, (:&&, (:call, :isa, :argtype, :DataType), (:call, :(===), (:., :argtype, (:quote, #QuoteNode
                  :name
                )), (:., :Tuple, (:quote, #QuoteNode
                  :name
                )))), (:block,
            (:line, 648, :none),
            (:(=), :p, (:call, :map, (:->, :x, (:block,
                    (:line, 648, :none),
                    (:if, (:&&, (:call, :isType, :x), (:call, :!, (:call, :isa, (:ref, (:., :x, (:quote, #QuoteNode
                                  :parameters
                                )), 1), :TypeVar))), (:call, :typeof, (:ref, (:., :x, (:quote, #QuoteNode
                              :parameters
                            )), 1)), :x)
                  )), (:., :argtype, (:quote, #QuoteNode
                    :parameters
                  )))),
            (:line, 650, :none),
            (:return, (:curly, :Tuple, (:..., :p)))
          )),
        (:line, 652, :none),
        :argtype
      )),
    (:line, 655, :none),
    (:function, (:call, :builtin_tfunction, (:(::), :f, :ANY), (:(::), :argtypes, (:curly, :Array, :Any, 1)), (:(::), :sv, :InferenceState)), (:block,
        (:line, 656, :none),
        (:(=), :isva, (:&&, (:call, :!, (:call, :isempty, :argtypes)), (:call, :isvarargtype, (:ref, :argtypes, :end)))),
        (:line, 657, :none),
        (:if, (:call, :is, :f, :tuple), (:block,
            (:line, 658, :none),
            (:for, (:(=), :a, :argtypes), (:block,
                (:line, 659, :none),
                (:if, (:call, :!, (:call, :isa, :a, :Const)), (:block,
                    (:line, 660, :none),
                    (:return, (:call, :tuple_tfunc, (:call, :limit_tuple_depth, (:call, :argtypes_to_type, :argtypes))))
                  ))
              )),
            (:line, 663, :none),
            (:return, (:call, :Const, (:call, :tuple, (:..., (:call, :map, (:->, :a, (:block,
                          (:line, 663, :none),
                          (:., :a, (:quote, #QuoteNode
                              :val
                            ))
                        )), :argtypes)))))
          ), (:block,
            (:line, 664, :none),
            (:if, (:call, :is, :f, :svec), (:block,
                (:line, 665, :none),
                (:return, :SimpleVector)
              ), (:block,
                (:line, 666, :none),
                (:if, (:call, :is, :f, :arrayset), (:block,
                    (:line, 667, :none),
                    (:if, (:&&, (:call, :<, (:call, :length, :argtypes), 3), (:call, :!, :isva)), (:block,
                        (:line, 668, :none),
                        (:return, :Bottom)
                      )),
                    (:line, 670, :none),
                    (:(=), :a1, (:ref, :argtypes, 1)),
                    (:line, 671, :none),
                    (:if, (:call, :isvarargtype, :a1), (:block,
                        (:line, 672, :none),
                        (:return, (:ref, (:., :a1, (:quote, #QuoteNode
                                :parameters
                              )), 1))
                      )),
                    (:line, 674, :none),
                    (:return, :a1)
                  ), (:block,
                    (:line, 675, :none),
                    (:if, (:call, :is, :f, :arrayref), (:block,
                        (:line, 676, :none),
                        (:if, (:&&, (:call, :<, (:call, :length, :argtypes), 2), (:call, :!, :isva)), (:block,
                            (:line, 677, :none),
                            (:return, :Bottom)
                          )),
                        (:line, 679, :none),
                        (:(=), :a, (:call, :widenconst, (:ref, :argtypes, 1))),
                        (:line, 680, :none),
                        (:return, (:if, (:&&, (:call, :isa, :a, :DataType), (:&&, (:<:, :a, :Array), (:call, :isa, (:ref, (:., :a, (:quote, #QuoteNode
                                        :parameters
                                      )), 1), (:curly, :Union, :Type, :TypeVar)))), (:ref, (:., :a, (:quote, #QuoteNode
                                  :parameters
                                )), 1), :Any))
                      ), (:block,
                        (:line, 682, :none),
                        (:if, (:call, :is, :f, :Expr), (:block,
                            (:line, 683, :none),
                            (:if, (:&&, (:call, :<, (:call, :length, :argtypes), 1), (:call, :!, :isva)), (:block,
                                (:line, 684, :none),
                                (:return, :Bottom)
                              )),
                            (:line, 686, :none),
                            (:return, :Expr)
                          ), (:block,
                            (:line, 687, :none),
                            (:if, (:call, :is, :f, :invoke), (:block,
                                (:line, 688, :none),
                                (:if, (:&&, (:call, :>, (:call, :length, :argtypes), 1), (:call, :isa, (:ref, :argtypes, 1), :Const)), (:block,
                                    (:line, 689, :none),
                                    (:(=), :af, (:., (:ref, :argtypes, 1), (:quote, #QuoteNode
                                          :val
                                        ))),
                                    (:line, 690, :none),
                                    (:(=), :sig, (:ref, :argtypes, 2)),
                                    (:line, 691, :none),
                                    (:if, (:&&, (:call, :isType, :sig), (:<:, (:ref, (:., :sig, (:quote, #QuoteNode
                                                :parameters
                                              )), 1), :Tuple)), (:block,
                                        (:line, 692, :none),
                                        (:return, (:call, :invoke_tfunc, :af, (:ref, (:., :sig, (:quote, #QuoteNode
                                                  :parameters
                                                )), 1), (:call, :argtypes_to_type, (:ref, :argtypes, (:(:), 3, :end))), :sv))
                                      ))
                                  )),
                                (:line, 695, :none),
                                (:return, :Any)
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 697, :none),
        (:if, :isva, (:block,
            (:line, 698, :none),
            (:return, :Any)
          )),
        (:line, 700, :none),
        (:if, (:call, :isa, :f, :IntrinsicFunction), (:block,
            (:line, 701, :none),
            (:(=), :iidx, (:call, :+, (:call, :Int, (:call, :reinterpret, :Int32, (:(::), :f, :IntrinsicFunction))), 1)),
            (:line, 702, :none),
            (:if, (:call, :!, (:call, :isdefined, :t_ifunc, :iidx)), (:block,
                (:line, 704, :none),
                (:return, :Any)
              )),
            (:line, 706, :none),
            (:(=), :tf, (:ref, :t_ifunc, :iidx))
          ), (:block,
            (:line, 708, :none),
            (:(=), :fidx, (:call, :findfirst, :t_ffunc_key, (:(::), :f, :Function))),
            (:line, 709, :none),
            (:if, (:call, :(==), :fidx, 0), (:block,
                (:line, 711, :none),
                (:return, :Any)
              )),
            (:line, 713, :none),
            (:(=), :tf, (:ref, :t_ffunc_val, :fidx))
          )),
        (:line, 715, :none),
        (:(=), :tf, (:(::), :tf, (:curly, :Tuple, :Real, :Real, :Any))),
        (:line, 716, :none),
        (:if, (:call, :!, (:comparison, (:ref, :tf, 1), :(<=), (:call, :length, :argtypes), :(<=), (:ref, :tf, 2))), (:block,
            (:line, 718, :none),
            (:return, :Bottom)
          )),
        (:line, 720, :none),
        (:return, (:call, (:ref, :tf, 3), (:..., :argtypes)))
      )),
    (:line, 723, :none),
    (:(=), (:call, :limit_tuple_depth, (:(::), :t, :ANY)), (:block,
        (:line, 723, :none),
        (:call, :limit_tuple_depth_, :t, 0)
      )),
    (:line, 725, :none),
    (:function, (:call, :limit_tuple_depth_, (:(::), :t, :ANY), (:(::), :d, :Int)), (:block,
        (:line, 726, :none),
        (:if, (:call, :isa, :t, :Union), (:block,
            (:line, 729, :none),
            (:return, (:curly, :Union, (:..., (:call, :map, (:->, :x, (:block,
                        (:line, 729, :none),
                        (:call, :limit_tuple_depth_, :x, (:call, :+, :d, 1))
                      )), (:., :t, (:quote, #QuoteNode
                        :types
                      ))))))
          )),
        (:line, 731, :none),
        (:if, (:call, :isa, :t, :TypeVar), (:block,
            (:line, 732, :none),
            (:return, (:call, :limit_tuple_depth_, (:., :t, (:quote, #QuoteNode
                    :ub
                  )), :d))
          )),
        (:line, 734, :none),
        (:if, (:call, :!, (:&&, (:call, :isa, :t, :DataType), (:call, :(===), (:., :t, (:quote, #QuoteNode
                    :name
                  )), (:., :Tuple, (:quote, #QuoteNode
                    :name
                  ))))), (:block,
            (:line, 735, :none),
            (:return, :t)
          )),
        (:line, 737, :none),
        (:if, (:call, :>, :d, :MAX_TUPLE_DEPTH), (:block,
            (:line, 738, :none),
            (:return, :Tuple)
          )),
        (:line, 740, :none),
        (:(=), :p, (:call, :map, (:->, :x, (:block,
                (:line, 740, :none),
                (:call, :limit_tuple_depth_, :x, (:call, :+, :d, 1))
              )), (:., :t, (:quote, #QuoteNode
                :parameters
              )))),
        (:line, 741, :none),
        (:curly, :Tuple, (:..., :p))
      )),
    (:line, 744, :none),
    (:(=), :limit_tuple_type, (:->, (:(::), :t, :ANY), (:block,
          (:line, 744, :none),
          (:call, :limit_tuple_type_n, :t, :MAX_TUPLETYPE_LEN)
        ))),
    (:line, 746, :none),
    (:function, (:call, :limit_tuple_type_n, (:(::), :t, :ANY), (:(::), :lim, :Int)), (:block,
        (:line, 747, :none),
        (:(=), :p, (:., :t, (:quote, #QuoteNode
              :parameters
            ))),
        (:line, 748, :none),
        (:(=), :n, (:call, :length, :p)),
        (:line, 749, :none),
        (:if, (:call, :>, :n, :lim), (:block,
            (:line, 750, :none),
            (:(=), :tail, (:call, :reduce, :typejoin, :Bottom, (:ref, :Any, (:..., (:ref, :p, (:(:), :lim, (:call, :-, :n, 1)))), (:call, :unwrapva, (:ref, :p, :n))))),
            (:line, 751, :none),
            (:return, (:curly, :Tuple, (:..., (:ref, :p, (:(:), 1, (:call, :-, :lim, 1)))), (:curly, :Vararg, :tail)))
          )),
        (:line, 753, :none),
        (:return, :t)
      )),
    (:line, 759, :none),
    (:function, (:call, :abstract_call_gf_by_type, (:(::), :f, :ANY), (:(::), :argtype, :ANY), :sv), (:block,
        (:line, 760, :none),
        (:(=), :tm, (:call, :_topmod, :sv)),
        (:line, 768, :none),
        (:(=), :argtype, (:call, :limit_tuple_type, :argtype)),
        (:line, 769, :none),
        (:(=), :argtypes, (:., :argtype, (:quote, #QuoteNode
              :parameters
            ))),
        (:line, 770, :none),
        (:(=), :applicable, (:call, :_methods_by_ftype, :argtype, 4)),
        (:line, 771, :none),
        (:(=), :rettype, :Bottom),
        (:line, 772, :none),
        (:if, (:call, :is, :applicable, false), (:block,
            (:line, 774, :none),
            (:return, :Any)
          )),
        (:line, 776, :none),
        (:(=), (:(::), :x, (:curly, :Array, :Any, 1)), :applicable),
        (:line, 777, :none),
        (:if, (:call, :isempty, :x), (:block,
            (:line, 782, :none),
            (:return, :Any)
          )),
        (:line, 784, :none),
        (:for, (:(=), (:(::), :m, :SimpleVector), :x), (:block,
            (:line, 785, :none),
            (:(=), :sig, (:(::), (:ref, :m, 1), :DataType)),
            (:line, 786, :none),
            (:(=), :method, (:(::), (:ref, :m, 3), :Method)),
            (:line, 787, :none),
            (:(=), :sparams, (:(::), (:ref, :m, 2), :SimpleVector)),
            (:line, 788, :none),
            (:(=), :recomputesvec, false),
            (:line, 791, :none),
            (:(=), :lsig, (:call, :length, (:., (:., (:ref, :m, 3), (:quote, #QuoteNode
                      :sig
                    )), (:quote, #QuoteNode
                    :parameters
                  )))),
            (:line, 792, :none),
            (:(=), :ls, (:call, :length, (:., :sig, (:quote, #QuoteNode
                    :parameters
                  )))),
            (:line, 793, :none),
            (:(=), :td, (:call, :type_depth, :sig)),
            (:line, 795, :none),
            (:(=), :mightlimitlength, (:call, :>, :ls, (:call, :+, :lsig, 1))),
            (:line, 796, :none),
            (:(=), :mightlimitdepth, (:call, :>, :td, 2)),
            (:line, 798, :none),
            (:(=), :limitlength, false),
            (:line, 799, :none),
            (:if, :mightlimitlength, (:block,
                (:line, 800, :none),
                (:for, (:(=), (:tuple, :callee, :_), (:., :sv, (:quote, #QuoteNode
                        :edges
                      ))), (:block,
                    (:line, 801, :none),
                    (:(=), :callee, (:(::), :callee, :InferenceState)),
                    (:line, 802, :none),
                    (:if, (:&&, (:call, :(===), :method, (:., (:., :callee, (:quote, #QuoteNode
                                :linfo
                              )), (:quote, #QuoteNode
                              :def
                            ))), (:call, :>, :ls, (:call, :length, (:., (:., (:., :callee, (:quote, #QuoteNode
                                    :linfo
                                  )), (:quote, #QuoteNode
                                  :specTypes
                                )), (:quote, #QuoteNode
                                :parameters
                              ))))), (:block,
                        (:line, 803, :none),
                        (:(=), :limitlength, true),
                        (:line, 804, :none),
                        (:break,)
                      ))
                  ))
              )),
            (:line, 810, :none),
            (:if, (:||, :mightlimitlength, :mightlimitdepth), (:block,
                (:line, 812, :none),
                (:for, (:(=), :infstate, :active), (:block,
                    (:line, 813, :none),
                    (:&&, (:call, :(===), :infstate, :nothing), (:continue,)),
                    (:line, 814, :none),
                    (:(=), :infstate, (:(::), :infstate, :InferenceState)),
                    (:line, 815, :none),
                    (:if, (:&&, (:call, :isdefined, (:., :infstate, (:quote, #QuoteNode
                              :linfo
                            )), (:quote, #QuoteNode
                            :def
                          )), (:call, :(===), :method, (:., (:., :infstate, (:quote, #QuoteNode
                                :linfo
                              )), (:quote, #QuoteNode
                              :def
                            )))), (:block,
                        (:line, 816, :none),
                        (:if, (:&&, :mightlimitlength, (:call, :>, :ls, (:call, :length, (:., (:., (:., :infstate, (:quote, #QuoteNode
                                        :linfo
                                      )), (:quote, #QuoteNode
                                      :specTypes
                                    )), (:quote, #QuoteNode
                                    :parameters
                                  ))))), (:block,
                            (:line, 817, :none),
                            (:(=), :limitlength, true)
                          )),
                        (:line, 819, :none),
                        (:if, (:&&, :mightlimitdepth, (:call, :>, :td, (:call, :type_depth, (:., (:., :infstate, (:quote, #QuoteNode
                                      :linfo
                                    )), (:quote, #QuoteNode
                                    :specTypes
                                  ))))), (:block,
                            (:line, 821, :none),
                            (:if, (:call, :>, :td, :MAX_TYPE_DEPTH), (:block,
                                (:line, 822, :none),
                                (:(=), :sig, (:call, :limit_type_depth, :sig, 0, true, (:vect,))),
                                (:line, 823, :none),
                                (:(=), :recomputesvec, true),
                                (:line, 824, :none),
                                (:break,)
                              ), (:block,
                                (:line, 826, :none),
                                (:(=), (:tuple, :p1, :p2), (:tuple, (:., :sig, (:quote, #QuoteNode
                                        :parameters
                                      )), (:., (:., (:., :infstate, (:quote, #QuoteNode
                                            :linfo
                                          )), (:quote, #QuoteNode
                                          :specTypes
                                        )), (:quote, #QuoteNode
                                        :parameters
                                      )))),
                                (:line, 827, :none),
                                (:if, (:call, :(==), (:call, :length, :p2), :ls), (:block,
                                    (:line, 828, :none),
                                    (:(=), :limitdepth, false),
                                    (:line, 829, :none),
                                    (:(=), :newsig, (:call, (:curly, :Array, :Any), :ls)),
                                    (:line, 830, :none),
                                    (:for, (:(=), :i, (:(:), 1, :ls)), (:block,
                                        (:line, 831, :none),
                                        (:if, (:&&, (:<:, (:ref, :p1, :i), :Function), (:&&, (:call, :>, (:call, :type_depth, (:ref, :p1, :i)), (:call, :type_depth, (:ref, :p2, :i))), (:call, :isa, (:ref, :p1, :i), :DataType))), (:block,
                                            (:line, 836, :none),
                                            (:(=), (:ref, :newsig, :i), (:., (:., (:ref, :p1, :i), (:quote, #QuoteNode
                                                    :name
                                                  )), (:quote, #QuoteNode
                                                  :primary
                                                ))),
                                            (:line, 837, :none),
                                            (:(=), :limitdepth, true)
                                          ), (:block,
                                            (:line, 839, :none),
                                            (:(=), (:ref, :newsig, :i), (:call, :limit_type_depth, (:ref, :p1, :i), 1, true, (:vect,)))
                                          ))
                                      )),
                                    (:line, 842, :none),
                                    (:if, :limitdepth, (:block,
                                        (:line, 843, :none),
                                        (:(=), :sig, (:curly, :Tuple, (:..., :newsig))),
                                        (:line, 844, :none),
                                        (:(=), :recomputesvec, true),
                                        (:line, 845, :none),
                                        (:break,)
                                      ))
                                  ))
                              ))
                          ))
                      ))
                  ))
              )),
            (:line, 863, :none),
            (:if, :limitlength, (:block,
                (:line, 864, :none),
                (:if, (:call, :!, (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                        :promote_typeof
                      ))), (:block,
                    (:line, 865, :none),
                    (:(=), :fst, (:ref, (:., :sig, (:quote, #QuoteNode
                            :parameters
                          )), (:call, :+, :lsig, 1))),
                    (:line, 866, :none),
                    (:(=), :allsame, true),
                    (:line, 870, :none),
                    (:for, (:(=), :i, (:(:), (:call, :+, :lsig, 2), :ls)), (:block,
                        (:line, 871, :none),
                        (:if, (:call, :(!=), (:ref, (:., :sig, (:quote, #QuoteNode
                                  :parameters
                                )), :i), :fst), (:block,
                            (:line, 872, :none),
                            (:(=), :allsame, false),
                            (:line, 873, :none),
                            (:break,)
                          ))
                      )),
                    (:line, 876, :none),
                    (:if, (:call, :!, :allsame), (:block,
                        (:line, 877, :none),
                        (:(=), :sig, (:call, :limit_tuple_type_n, :sig, (:call, :+, :lsig, 1))),
                        (:line, 878, :none),
                        (:(=), :recomputesvec, true)
                      ))
                  ))
              )),
            (:line, 884, :none),
            (:if, (:&&, :recomputesvec, (:call, :!, (:call, :isempty, :sparams))), (:block,
                (:line, 885, :none),
                (:(=), :recomputed, (:ccall, (:quote, #QuoteNode
                      :jl_type_intersection_env
                    ), (:curly, :Ref, :SimpleVector), (:tuple, :Any, :Any, :Any), :sig, (:., :method, (:quote, #QuoteNode
                        :sig
                      )), (:., :method, (:quote, #QuoteNode
                        :tvars
                      )))),
                (:line, 886, :none),
                (:if, (:call, :!, (:call, :isa, (:ref, :recomputed, 1), :DataType)), (:block,
                    (:line, 887, :none),
                    (:(=), :rettype, :Any),
                    (:line, 888, :none),
                    (:break,)
                  )),
                (:line, 890, :none),
                (:(=), :sig, (:(::), (:ref, :recomputed, 1), :DataType)),
                (:line, 891, :none),
                (:(=), :sparams, (:(::), (:ref, :recomputed, 2), :SimpleVector))
              )),
            (:line, 893, :none),
            (:(=), (:tuple, :_tree, :rt), (:call, :typeinf_edge, :method, :sig, :sparams, :sv)),
            (:line, 894, :none),
            (:(=), :rettype, (:call, :tmerge, :rettype, :rt)),
            (:line, 895, :none),
            (:if, (:call, :is, :rettype, :Any), (:block,
                (:line, 896, :none),
                (:break,)
              ))
          )),
        (:line, 901, :none),
        (:return, :rettype)
      )),
    (:line, 905, :none),
    (:function, (:call, :abstract_evals_to_constant, :ex, (:(::), :c, :ANY), :vtypes, :sv), (:block,
        (:line, 906, :none),
        (:(=), :av, (:call, :abstract_eval, :ex, :vtypes, :sv)),
        (:line, 907, :none),
        (:return, (:&&, (:call, :isa, :av, :Const), (:call, :(===), (:., :av, (:quote, #QuoteNode
                  :val
                )), :c)))
      )),
    (:line, 914, :none),
    (:function, (:call, :precise_container_types, :args, :types, (:(::), :vtypes, :VarTable), :sv), (:block,
        (:line, 915, :none),
        (:(=), :n, (:call, :length, :args)),
        (:line, 916, :none),
        (:call, :assert, (:call, :(==), :n, (:call, :length, :types))),
        (:line, 917, :none),
        (:(=), :result, (:call, (:curly, :Vector, :Any), :n)),
        (:line, 918, :none),
        (:for, (:(=), :i, (:(:), 1, :n)), (:block,
            (:line, 919, :none),
            (:(=), :ai, (:ref, :args, :i)),
            (:line, 920, :none),
            (:(=), :ti, (:ref, :types, :i)),
            (:line, 921, :none),
            (:(=), :tti, (:call, :widenconst, :ti)),
            (:line, 922, :none),
            (:if, (:call, :isa, :tti, :TypeConstructor), (:block,
                (:line, 923, :none),
                (:(=), :tti, (:., :tti, (:quote, #QuoteNode
                      :body
                    )))
              )),
            (:line, 925, :none),
            (:if, (:&&, (:call, :isa, :ai, :Expr), (:&&, (:call, :(===), (:., :ai, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :call
                    )), (:||, (:call, :abstract_evals_to_constant, (:ref, (:., :ai, (:quote, #QuoteNode
                            :args
                          )), 1), :svec, :vtypes, :sv), (:call, :abstract_evals_to_constant, (:ref, (:., :ai, (:quote, #QuoteNode
                            :args
                          )), 1), :tuple, :vtypes, :sv)))), (:block,
                (:line, 927, :none),
                (:(=), :aa, (:., :ai, (:quote, #QuoteNode
                      :args
                    ))),
                (:line, 928, :none),
                (:(=), (:ref, :result, :i), (:typed_comprehension, :Any, (:generator, (:if, (:call, :isa, (:ref, :aa, :j), :Expr), (:., (:ref, :aa, :j), (:quote, #QuoteNode
                            :typ
                          )), (:call, :abstract_eval, (:ref, :aa, :j), :vtypes, :sv)), (:(=), :j, (:(:), 2, (:call, :length, :aa)))))),
                (:line, 929, :none),
                (:if, (:call, :_any, :isvarargtype, (:ref, :result, :i)), (:block,
                    (:line, 930, :none),
                    (:return, :nothing)
                  ))
              ), (:block,
                (:line, 932, :none),
                (:if, (:call, :isa, :tti, :Union), (:block,
                    (:line, 933, :none),
                    (:return, :nothing)
                  ), (:block,
                    (:line, 934, :none),
                    (:if, (:<:, :tti, :Tuple), (:block,
                        (:line, 935, :none),
                        (:if, (:call, :(==), :i, :n), (:block,
                            (:line, 936, :none),
                            (:if, (:&&, (:call, :isvatuple, :tti), (:call, :(==), (:call, :length, (:., :tti, (:quote, #QuoteNode
                                        :parameters
                                      ))), 1)), (:block,
                                (:line, 937, :none),
                                (:(=), (:ref, :result, :i), (:ref, :Any, (:curly, :Vararg, (:ref, (:., (:ref, (:., :tti, (:quote, #QuoteNode
                                                :parameters
                                              )), 1), (:quote, #QuoteNode
                                            :parameters
                                          )), 1))))
                              ), (:block,
                                (:line, 939, :none),
                                (:(=), (:ref, :result, :i), (:., :tti, (:quote, #QuoteNode
                                      :parameters
                                    )))
                              ))
                          ), (:block,
                            (:line, 941, :none),
                            (:if, (:call, :isknownlength, :tti), (:block,
                                (:line, 942, :none),
                                (:(=), (:ref, :result, :i), (:., :tti, (:quote, #QuoteNode
                                      :parameters
                                    )))
                              ), (:block,
                                (:line, 944, :none),
                                (:return, :nothing)
                              ))
                          ))
                      ), (:block,
                        (:line, 946, :none),
                        (:if, (:&&, (:<:, :tti, :AbstractArray), (:call, :(==), :i, :n)), (:block,
                            (:line, 947, :none),
                            (:(=), (:ref, :result, :i), (:ref, :Any, (:curly, :Vararg, (:call, :eltype, :tti))))
                          ), (:block,
                            (:line, 949, :none),
                            (:return, :nothing)
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 952, :none),
        (:return, :result)
      )),
    (:line, 956, :none),
    (:function, (:call, :abstract_apply, (:(::), :af, :ANY), :fargs, (:(::), :aargtypes, (:curly, :Vector, :Any)), (:(::), :vtypes, :VarTable), :sv), (:block,
        (:line, 957, :none),
        (:(=), :ctypes, (:call, :precise_container_types, :fargs, :aargtypes, :vtypes, :sv)),
        (:line, 958, :none),
        (:if, (:call, :(!==), :ctypes, :nothing), (:block,
            (:line, 961, :none),
            (:(=), :at, (:call, :append_any, (:ref, :Any, (:call, :type_typeof, :af)), (:..., :ctypes))),
            (:line, 962, :none),
            (:(=), :n, (:call, :length, :at)),
            (:line, 963, :none),
            (:if, (:call, :>, (:call, :-, :n, 1), :MAX_TUPLETYPE_LEN), (:block,
                (:line, 964, :none),
                (:(=), :tail, (:call, :foldl, (:->, (:tuple, :a, :b), (:block,
                        (:line, 964, :none),
                        (:call, :tmerge, :a, (:call, :unwrapva, :b))
                      )), :Bottom, (:ref, :at, (:(:), (:call, :+, :MAX_TUPLETYPE_LEN, 1), :n)))),
                (:line, 965, :none),
                (:(=), :at, (:call, :vcat, (:ref, :at, (:(:), 1, :MAX_TUPLETYPE_LEN)), (:ref, :Any, (:curly, :Vararg, :tail))))
              )),
            (:line, 967, :none),
            (:return, (:call, :abstract_call, :af, (:tuple,), :at, :vtypes, :sv))
          )),
        (:line, 970, :none),
        (:return, (:call, :abstract_call, :af, (:tuple,), (:ref, :Any, (:call, :type_typeof, :af), (:curly, :Vararg, :Any)), :vtypes, :sv))
      )),
    (:line, 973, :none),
    (:function, (:call, :pure_eval_call, (:(::), :f, :ANY), (:(::), :argtypes, :ANY), :atype, :vtypes, :sv), (:block,
        (:line, 974, :none),
        (:for, (:(=), :a, (:call, :drop, :argtypes, 1)), (:block,
            (:line, 975, :none),
            (:if, (:call, :!, (:||, (:call, :isa, :a, :Const), (:&&, (:call, :isType, :a), (:call, :!, (:call, :has_typevars, (:ref, (:., :a, (:quote, #QuoteNode
                              :parameters
                            )), 1)))))), (:block,
                (:line, 976, :none),
                (:return, false)
              ))
          )),
        (:line, 980, :none),
        (:if, (:&&, (:call, :(===), :f, :return_type), (:call, :(==), (:call, :length, :argtypes), 3)), (:block,
            (:line, 981, :none),
            (:(=), :tt, (:ref, :argtypes, 3)),
            (:line, 982, :none),
            (:if, (:call, :isType, :tt), (:block,
                (:line, 983, :none),
                (:(=), :af_argtype, (:ref, (:., :tt, (:quote, #QuoteNode
                        :parameters
                      )), 1)),
                (:line, 984, :none),
                (:if, (:&&, (:<:, :af_argtype, :Tuple), (:call, :isa, :af_argtype, :DataType)), (:block,
                    (:line, 985, :none),
                    (:(=), :af, (:ref, :argtypes, 2)),
                    (:line, 986, :none),
                    (:(=), :rt, (:call, :abstract_call, (:if, (:call, :isa, :af, :Const), (:., :af, (:quote, #QuoteNode
                              :val
                            )), (:ref, (:., :af, (:quote, #QuoteNode
                                :parameters
                              )), 1)), (:tuple,), (:ref, :Any, (:ref, :argtypes, 2), (:..., (:., :af_argtype, (:quote, #QuoteNode
                                :parameters
                              )))), :vtypes, :sv)),
                    (:line, 988, :none),
                    (:if, (:call, :isa, :rt, :Const), (:block,
                        (:line, 989, :none),
                        (:return, (:curly, :Type, (:call, :widenconst, :rt)))
                      ), (:block,
                        (:line, 990, :none),
                        (:if, (:||, (:call, :isleaftype, :rt), (:||, (:call, :isleaftype, :af_argtype), (:call, :(===), :rt, :Bottom))), (:block,
                            (:line, 991, :none),
                            (:return, (:curly, :Type, :rt))
                          ), (:block,
                            (:line, 993, :none),
                            (:return, (:curly, :Type, (:call, :TypeVar, (:quote, #QuoteNode
                                    :R
                                  ), :rt)))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 999, :none),
        (:(=), :meth, (:call, :_methods_by_ftype, :atype, 1)),
        (:line, 1000, :none),
        (:if, (:||, (:call, :(===), :meth, false), (:call, :(!=), (:call, :length, :meth), 1)), (:block,
            (:line, 1001, :none),
            (:return, false)
          )),
        (:line, 1003, :none),
        (:(=), :meth, (:(::), (:ref, :meth, 1), :SimpleVector)),
        (:line, 1004, :none),
        (:(=), :method, (:(::), (:ref, :meth, 3), :Method)),
        (:line, 1006, :none),
        (:if, (:||, (:., :method, (:quote, #QuoteNode
                :isstaged
              )), (:call, :!, (:., (:., :method, (:quote, #QuoteNode
                    :lambda_template
                  )), (:quote, #QuoteNode
                  :pure
                )))), (:block,
            (:line, 1007, :none),
            (:return, false)
          )),
        (:line, 1010, :none),
        (:(=), :args, (:typed_comprehension, :Any, (:generator, (:if, (:call, :isa, :a, :Const), (:., :a, (:quote, #QuoteNode
                    :val
                  )), (:ref, (:., :a, (:quote, #QuoteNode
                      :parameters
                    )), 1)), (:(=), :a, (:call, :drop, :argtypes, 1))))),
        (:line, 1011, :none),
        (:try, (:block,
            (:line, 1012, :none),
            (:return, (:call, :abstract_eval_constant, (:call, :f, (:..., :args))))
          ), false, (:block,
            (:line, 1014, :none),
            (:return, false)
          ))
      )),
    (:line, 1018, :none),
    (:(=), (:call, :argtypes_to_type, (:(::), :argtypes, (:curly, :Array, :Any, 1))), (:block,
        (:line, 1018, :none),
        (:curly, :Tuple, (:..., (:call, :map, :widenconst, :argtypes)))
      )),
    (:line, 1020, :none),
    (:function, (:call, :abstract_call, (:(::), :f, :ANY), :fargs, (:(::), :argtypes, (:curly, :Vector, :Any)), (:(::), :vtypes, :VarTable), (:(::), :sv, :InferenceState)), (:block,
        (:line, 1021, :none),
        (:if, (:call, :is, :f, :_apply), (:block,
            (:line, 1022, :none),
            (:||, (:call, :>, (:call, :length, :fargs), 1), (:return, :Any)),
            (:line, 1023, :none),
            (:(=), :aft, (:ref, :argtypes, 2)),
            (:line, 1024, :none),
            (:if, (:call, :isa, :aft, :Const), (:block,
                (:line, 1025, :none),
                (:(=), :af, (:., :aft, (:quote, #QuoteNode
                      :val
                    )))
              ), (:block,
                (:line, 1027, :none),
                (:if, (:&&, (:call, :isType, :aft), (:call, :!, (:call, :isa, (:ref, (:., :aft, (:quote, #QuoteNode
                              :parameters
                            )), 1), :TypeVar))), (:block,
                    (:line, 1028, :none),
                    (:(=), :af, (:ref, (:., :aft, (:quote, #QuoteNode
                            :parameters
                          )), 1))
                  ), (:block,
                    (:line, 1029, :none),
                    (:if, (:&&, (:call, :isleaftype, :aft), (:call, :isdefined, :aft, (:quote, #QuoteNode
                            :instance
                          ))), (:block,
                        (:line, 1030, :none),
                        (:(=), :af, (:., :aft, (:quote, #QuoteNode
                              :instance
                            )))
                      ), (:block,
                        (:line, 1033, :none),
                        (:return, :Any)
                      ))
                  ))
              )),
            (:line, 1036, :none),
            (:return, (:call, :abstract_apply, :af, (:ref, :fargs, (:(:), 3, :end)), (:ref, :argtypes, (:(:), 3, :end)), :vtypes, :sv))
          )),
        (:line, 1038, :none),
        (:for, (:(=), :i, (:(:), 2, (:call, :-, (:call, :length, :argtypes), 1))), (:block,
            (:line, 1039, :none),
            (:if, (:call, :isvarargtype, (:ref, :argtypes, :i)), (:block,
                (:line, 1040, :none),
                (:return, :Any)
              ))
          )),
        (:line, 1043, :none),
        (:if, (:||, (:call, :isa, :f, :Builtin), (:call, :isa, :f, :IntrinsicFunction)), (:block,
            (:line, 1044, :none),
            (:(=), :rt, (:call, :builtin_tfunction, :f, (:ref, :argtypes, (:(:), 2, :end)), :sv)),
            (:line, 1045, :none),
            (:return, (:if, (:call, :isa, :rt, :TypeVar), (:., :rt, (:quote, #QuoteNode
                    :ub
                  )), :rt))
          ), (:block,
            (:line, 1046, :none),
            (:if, (:call, :is, :f, (:., :Core, (:quote, #QuoteNode
                    :kwfunc
                  ))), (:block,
                (:line, 1047, :none),
                (:if, (:call, :(==), (:call, :length, :fargs), 2), (:block,
                    (:line, 1048, :none),
                    (:(=), :ft, (:call, :widenconst, (:ref, :argtypes, 2))),
                    (:line, 1049, :none),
                    (:if, (:&&, (:call, :isa, :ft, :DataType), (:&&, (:call, :isdefined, (:., :ft, (:quote, #QuoteNode
                                :name
                              )), (:quote, #QuoteNode
                              :mt
                            )), (:call, :isdefined, (:., (:., :ft, (:quote, #QuoteNode
                                  :name
                                )), (:quote, #QuoteNode
                                :mt
                              )), (:quote, #QuoteNode
                              :kwsorter
                            )))), (:block,
                        (:line, 1050, :none),
                        (:return, (:call, :Const, (:., (:., (:., :ft, (:quote, #QuoteNode
                                    :name
                                  )), (:quote, #QuoteNode
                                  :mt
                                )), (:quote, #QuoteNode
                                :kwsorter
                              ))))
                      ))
                  )),
                (:line, 1053, :none),
                (:return, :Any)
              ))
          )),
        (:line, 1056, :none),
        (:(=), :tm, (:call, :_topmod, :sv)),
        (:line, 1057, :none),
        (:if, (:&&, (:call, :>, (:call, :length, :argtypes), 2), (:call, :⊑, (:ref, :argtypes, 3), :Int)), (:block,
            (:line, 1058, :none),
            (:(=), :at2, (:call, :widenconst, (:ref, :argtypes, 2))),
            (:line, 1059, :none),
            (:if, (:||, (:<:, :at2, :Tuple), (:&&, (:call, :isa, :at2, :DataType), (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                        :Base
                      )), (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :Pair
                        )), (:call, :(===), (:., (:(::), :at2, :DataType), (:quote, #QuoteNode
                            :name
                          )), (:., (:., (:., :Main, (:quote, #QuoteNode
                                :Base
                              )), (:quote, #QuoteNode
                              :Pair
                            )), (:quote, #QuoteNode
                            :name
                          ))))))), (:block,
                (:line, 1064, :none),
                (:if, (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                      :getindex
                    )), (:block,
                    (:line, 1065, :none),
                    (:return, (:ref, (:call, :getfield_tfunc, (:ref, :argtypes, 2), (:ref, :argtypes, 3)), 1))
                  ), (:block,
                    (:line, 1066, :none),
                    (:if, (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                          :next
                        )), (:block,
                        (:line, 1067, :none),
                        (:(=), :t1, (:ref, (:call, :getfield_tfunc, (:ref, :argtypes, 2), (:ref, :argtypes, 3)), 1)),
                        (:line, 1068, :none),
                        (:return, (:if, (:call, :(===), :t1, :Bottom), :Bottom, (:curly, :Tuple, :t1, :Int)))
                      ), (:block,
                        (:line, 1069, :none),
                        (:if, (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                              :indexed_next
                            )), (:block,
                            (:line, 1070, :none),
                            (:(=), :t1, (:ref, (:call, :getfield_tfunc, (:ref, :argtypes, 2), (:ref, :argtypes, 3)), 1)),
                            (:line, 1071, :none),
                            (:return, (:if, (:call, :(===), :t1, :Bottom), :Bottom, (:curly, :Tuple, :t1, :Int)))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1076, :none),
        (:(=), :atype, (:call, :argtypes_to_type, :argtypes)),
        (:line, 1077, :none),
        (:(=), :t, (:call, :pure_eval_call, :f, :argtypes, :atype, :vtypes, :sv)),
        (:line, 1078, :none),
        (:&&, (:call, :(!==), :t, false), (:return, :t)),
        (:line, 1080, :none),
        (:if, (:||, (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                :promote_type
              )), (:call, :istopfunction, :tm, :f, (:quote, #QuoteNode
                :typejoin
              ))), (:block,
            (:line, 1081, :none),
            (:return, :Type)
          )),
        (:line, 1084, :none),
        (:if, (:., :sv, (:quote, #QuoteNode
              :inlining
            )), (:block,
            (:line, 1087, :none),
            (:if, (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                    :Base
                  )), (:&&, (:||, (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :^
                        )), (:call, :is, :f, (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :^
                          )))), (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :.^
                        )), (:call, :is, :f, (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :.^
                          ))))), (:&&, (:call, :(==), (:call, :length, :argtypes), 3), (:||, (:call, :⊑, (:ref, :argtypes, 3), :Int32), (:call, :⊑, (:ref, :argtypes, 3), :Int64))))), (:block,
                (:line, 1092, :none),
                (:(=), :a1, (:ref, :argtypes, 2)),
                (:line, 1093, :none),
                (:(=), :basenumtype, (:curly, :Union, :corenumtype, (:., (:., :Main, (:quote, #QuoteNode
                          :Base
                        )), (:quote, #QuoteNode
                        :Complex64
                      )), (:., (:., :Main, (:quote, #QuoteNode
                          :Base
                        )), (:quote, #QuoteNode
                        :Complex128
                      )), (:., (:., :Main, (:quote, #QuoteNode
                          :Base
                        )), (:quote, #QuoteNode
                        :Rational
                      )))),
                (:line, 1094, :none),
                (:if, (:call, :⊑, :a1, :basenumtype), (:block,
                    (:line, 1095, :none),
                    (:(=), :ftimes, (:., (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :*
                        ))),
                    (:line, 1096, :none),
                    (:(=), :ta1, (:call, :widenconst, :a1)),
                    (:line, 1097, :none),
                    (:call, :abstract_call_gf_by_type, :ftimes, (:curly, :Tuple, (:call, :typeof, :ftimes), :ta1, :ta1), :sv)
                  ))
              ))
          )),
        (:line, 1101, :none),
        (:return, (:call, :abstract_call_gf_by_type, :f, :atype, :sv))
      )),
    (:line, 1104, :none),
    (:function, (:call, :abstract_eval_call, (:(::), :e, :Expr), (:(::), :vtypes, :VarTable), (:(::), :sv, :InferenceState)), (:block,
        (:line, 1105, :none),
        (:(=), :argtypes, (:typed_comprehension, :Any, (:generator, (:call, :abstract_eval, :a, :vtypes, :sv), (:(=), :a, (:., :e, (:quote, #QuoteNode
                    :args
                  )))))),
        (:line, 1107, :none),
        (:for, (:(=), :x, :argtypes), (:block,
            (:line, 1108, :none),
            (:&&, (:call, :(===), :x, :Bottom), (:return, :Bottom))
          )),
        (:line, 1110, :none),
        (:(=), :ft, (:ref, :argtypes, 1)),
        (:line, 1111, :none),
        (:if, (:call, :isa, :ft, :Const), (:block,
            (:line, 1112, :none),
            (:(=), :f, (:., :ft, (:quote, #QuoteNode
                  :val
                )))
          ), (:block,
            (:line, 1114, :none),
            (:if, (:&&, (:call, :isType, :ft), (:call, :!, (:call, :isa, (:ref, (:., :ft, (:quote, #QuoteNode
                          :parameters
                        )), 1), :TypeVar))), (:block,
                (:line, 1115, :none),
                (:(=), :f, (:ref, (:., :ft, (:quote, #QuoteNode
                        :parameters
                      )), 1))
              ), (:block,
                (:line, 1116, :none),
                (:if, (:&&, (:call, :isleaftype, :ft), (:call, :isdefined, :ft, (:quote, #QuoteNode
                        :instance
                      ))), (:block,
                    (:line, 1117, :none),
                    (:(=), :f, (:., :ft, (:quote, #QuoteNode
                          :instance
                        )))
                  ), (:block,
                    (:line, 1119, :none),
                    (:for, (:(=), :i, (:(:), 2, (:call, :-, (:call, :length, :argtypes), 1))), (:block,
                        (:line, 1120, :none),
                        (:if, (:call, :isvarargtype, (:ref, :argtypes, :i)), (:block,
                            (:line, 1121, :none),
                            (:return, :Any)
                          ))
                      )),
                    (:line, 1125, :none),
                    (:if, (:&&, (:||, (:call, :isleaftype, :ft), (:<:, :ft, :Type)), (:&&, (:call, :!, (:<:, :ft, :Builtin)), (:call, :!, (:<:, :ft, :IntrinsicFunction)))), (:block,
                        (:line, 1126, :none),
                        (:return, (:call, :abstract_call_gf_by_type, :nothing, (:call, :argtypes_to_type, :argtypes), :sv))
                      )),
                    (:line, 1128, :none),
                    (:return, :Any)
                  ))
              ))
          )),
        (:line, 1131, :none),
        (:return, (:call, :abstract_call, :f, (:., :e, (:quote, #QuoteNode
                :args
              )), :argtypes, :vtypes, :sv))
      )),
    (:line, 1134, :none),
    (:function, (:call, :abstract_eval, (:(::), :e, :ANY), (:(::), :vtypes, :VarTable), (:(::), :sv, :InferenceState)), (:block,
        (:line, 1135, :none),
        (:if, (:call, :isa, :e, :QuoteNode), (:block,
            (:line, 1136, :none),
            (:return, (:call, :abstract_eval_constant, (:., (:(::), :e, :QuoteNode), (:quote, #QuoteNode
                    :value
                  ))))
          ), (:block,
            (:line, 1137, :none),
            (:if, (:call, :isa, :e, :SSAValue), (:block,
                (:line, 1138, :none),
                (:return, (:call, :abstract_eval_ssavalue, (:(::), :e, :SSAValue), (:., :sv, (:quote, #QuoteNode
                        :linfo
                      ))))
              ), (:block,
                (:line, 1139, :none),
                (:if, (:call, :isa, :e, :Slot), (:block,
                    (:line, 1140, :none),
                    (:return, (:., (:ref, :vtypes, (:., :e, (:quote, #QuoteNode
                              :id
                            ))), (:quote, #QuoteNode
                          :typ
                        )))
                  ), (:block,
                    (:line, 1141, :none),
                    (:if, (:call, :isa, :e, :Symbol), (:block,
                        (:line, 1142, :none),
                        (:return, (:call, :abstract_eval_global, (:., :sv, (:quote, #QuoteNode
                                :mod
                              )), :e))
                      ), (:block,
                        (:line, 1143, :none),
                        (:if, (:call, :isa, :e, :GlobalRef), (:block,
                            (:line, 1144, :none),
                            (:return, (:call, :abstract_eval_global, (:., :e, (:quote, #QuoteNode
                                    :mod
                                  )), (:., :e, (:quote, #QuoteNode
                                    :name
                                  ))))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1147, :none),
        (:if, (:call, :!, (:call, :isa, :e, :Expr)), (:block,
            (:line, 1148, :none),
            (:return, (:call, :abstract_eval_constant, :e))
          )),
        (:line, 1150, :none),
        (:(=), :e, (:(::), :e, :Expr)),
        (:line, 1151, :none),
        (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :call
            )), (:block,
            (:line, 1152, :none),
            (:(=), :t, (:call, :abstract_eval_call, :e, :vtypes, :sv))
          ), (:block,
            (:line, 1153, :none),
            (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :null
                )), (:block,
                (:line, 1154, :none),
                (:(=), :t, :Void)
              ), (:block,
                (:line, 1155, :none),
                (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :new
                    )), (:block,
                    (:line, 1156, :none),
                    (:(=), :t, (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                              :args
                            )), 1), :vtypes, :sv)),
                    (:line, 1157, :none),
                    (:if, (:call, :isType, :t), (:block,
                        (:line, 1158, :none),
                        (:(=), :t, (:ref, (:., :t, (:quote, #QuoteNode
                                :parameters
                              )), 1))
                      ), (:block,
                        (:line, 1160, :none),
                        (:(=), :t, :Any)
                      )),
                    (:line, 1162, :none),
                    (:for, (:(=), :i, (:(:), 2, (:call, :length, (:., :e, (:quote, #QuoteNode
                                :args
                              ))))), (:block,
                        (:line, 1163, :none),
                        (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                                :args
                              )), :i), :vtypes, :sv)
                      ))
                  ), (:block,
                    (:line, 1165, :none),
                    (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :&
                        )), (:block,
                        (:line, 1166, :none),
                        (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                                :args
                              )), 1), :vtypes, :sv),
                        (:line, 1167, :none),
                        (:(=), :t, :Any)
                      ), (:block,
                        (:line, 1168, :none),
                        (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                                :head
                              )), (:quote, #QuoteNode
                              :static_parameter
                            )), (:block,
                            (:line, 1169, :none),
                            (:(=), :n, (:ref, (:., :e, (:quote, #QuoteNode
                                    :args
                                  )), 1)),
                            (:line, 1170, :none),
                            (:(=), :t, :Any),
                            (:line, 1171, :none),
                            (:if, (:call, :(<=), :n, (:call, :length, (:., :sv, (:quote, #QuoteNode
                                      :sp
                                    )))), (:block,
                                (:line, 1172, :none),
                                (:(=), :val, (:ref, (:., :sv, (:quote, #QuoteNode
                                        :sp
                                      )), :n)),
                                (:line, 1173, :none),
                                (:if, (:call, :isa, :val, :TypeVar), (:block,
                                    (:line, 1177, :none),
                                    (:if, (:call, :!, (:<:, :Any, (:., :val, (:quote, #QuoteNode
                                              :ub
                                            )))), (:block,
                                        (:line, 1178, :none),
                                        (:(=), :t, (:curly, :Type, :val))
                                      ))
                                  ), (:block,
                                    (:line, 1181, :none),
                                    (:(=), :t, (:call, :abstract_eval_constant, :val))
                                  ))
                              ))
                          ), (:block,
                            (:line, 1184, :none),
                            (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                                    :head
                                  )), (:quote, #QuoteNode
                                  :method
                                )), (:block,
                                (:line, 1185, :none),
                                (:(=), :t, (:if, (:call, :(==), (:call, :length, (:., :e, (:quote, #QuoteNode
                                            :args
                                          ))), 1), :Any, :Void))
                              ), (:block,
                                (:line, 1186, :none),
                                (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                                        :head
                                      )), (:quote, #QuoteNode
                                      :copyast
                                    )), (:block,
                                    (:line, 1187, :none),
                                    (:(=), :t, (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                                              :args
                                            )), 1), :vtypes, :sv))
                                  ), (:block,
                                    (:line, 1188, :none),
                                    (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                                            :head
                                          )), (:quote, #QuoteNode
                                          :inert
                                        )), (:block,
                                        (:line, 1189, :none),
                                        (:return, (:call, :abstract_eval_constant, (:ref, (:., :e, (:quote, #QuoteNode
                                                  :args
                                                )), 1)))
                                      ), (:block,
                                        (:line, 1190, :none),
                                        (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                                                :head
                                              )), (:quote, #QuoteNode
                                              :invoke
                                            )), (:block,
                                            (:line, 1191, :none),
                                            (:call, :error, "type inference data-flow error: tried to double infer a function")
                                          ), (:block,
                                            (:line, 1193, :none),
                                            (:(=), :t, :Any)
                                          ))
                                      ))
                                  ))
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1195, :none),
        (:if, (:call, :isa, :t, :TypeVar), (:block,
            (:line, 1197, :none),
            (:(=), :t, (:., :t, (:quote, #QuoteNode
                  :ub
                )))
          )),
        (:line, 1199, :none),
        (:(=), (:., :e, (:quote, #QuoteNode
              :typ
            )), :t),
        (:line, 1200, :none),
        (:return, :t)
      )),
    (:line, 1203, :none),
    (:const, (:(=), :Type_Array, (:curly, :Type, :Array))),
    (:line, 1205, :none),
    (:function, (:call, :abstract_eval_constant, (:(::), :x, :ANY)), (:block,
        (:line, 1206, :none),
        (:if, (:call, :isa, :x, :Type), (:block,
            (:line, 1207, :none),
            (:if, (:call, :is, :x, :Array), (:block,
                (:line, 1208, :none),
                (:return, :Type_Array)
              )),
            (:line, 1210, :none),
            (:return, (:curly, :Type, :x))
          )),
        (:line, 1212, :none),
        (:return, (:call, :Const, :x))
      )),
    (:line, 1215, :none),
    (:function, (:call, :abstract_eval_global, (:(::), :M, :Module), (:(::), :s, :Symbol)), (:block,
        (:line, 1216, :none),
        (:if, (:&&, (:call, :isdefined, :M, :s), (:call, :isconst, :M, :s)), (:block,
            (:line, 1217, :none),
            (:return, (:call, :abstract_eval_constant, (:call, :getfield, :M, :s)))
          )),
        (:line, 1219, :none),
        (:return, :Any)
      )),
    (:line, 1222, :none),
    (:function, (:call, :abstract_eval_ssavalue, (:(::), :s, :SSAValue), (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 1223, :none),
        (:(=), :typ, (:ref, (:., :linfo, (:quote, #QuoteNode
                :ssavaluetypes
              )), (:call, :+, (:., :s, (:quote, #QuoteNode
                  :id
                )), 1))),
        (:line, 1224, :none),
        (:if, (:call, :(===), :typ, :NF), (:block,
            (:line, 1225, :none),
            (:return, :Bottom)
          )),
        (:line, 1227, :none),
        (:return, :typ)
      )),
    (:line, 1233, :none),
    (:type, true, :StateUpdate, (:block,
        (:line, 1234, :none),
        (:(::), :var, (:curly, :Union, :Slot, :SSAValue)),
        (:line, 1235, :none),
        :vtype,
        (:line, 1236, :none),
        (:(::), :state, :VarTable)
      )),
    (:line, 1239, :none),
    (:function, (:call, :abstract_interpret, (:(::), :e, :ANY), (:(::), :vtypes, :VarTable), (:(::), :sv, :InferenceState)), (:block,
        (:line, 1240, :none),
        (:&&, (:call, :!, (:call, :isa, :e, :Expr)), (:return, :vtypes)),
        (:line, 1242, :none),
        (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :(=)
            )), (:block,
            (:line, 1243, :none),
            (:(=), :t, (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                      :args
                    )), 2), :vtypes, :sv)),
            (:line, 1244, :none),
            (:&&, (:call, :(===), :t, :Bottom), (:return, (:tuple,))),
            (:line, 1245, :none),
            (:(=), :lhs, (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), 1)),
            (:line, 1246, :none),
            (:if, (:||, (:call, :isa, :lhs, :Slot), (:call, :isa, :lhs, :SSAValue)), (:block,
                (:line, 1248, :none),
                (:return, (:call, :StateUpdate, :lhs, (:call, :VarState, :t, false), :vtypes))
              ))
          ), (:block,
            (:line, 1250, :none),
            (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :call
                )), (:block,
                (:line, 1251, :none),
                (:(=), :t, (:call, :abstract_eval, :e, :vtypes, :sv)),
                (:line, 1252, :none),
                (:&&, (:call, :(===), :t, :Bottom), (:return, (:tuple,)))
              ), (:block,
                (:line, 1253, :none),
                (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :gotoifnot
                    )), (:block,
                    (:line, 1254, :none),
                    (:(=), :t, (:call, :abstract_eval, (:ref, (:., :e, (:quote, #QuoteNode
                              :args
                            )), 1), :vtypes, :sv)),
                    (:line, 1255, :none),
                    (:&&, (:call, :(===), :t, :Bottom), (:return, (:tuple,)))
                  ), (:block,
                    (:line, 1256, :none),
                    (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :method
                        )), (:block,
                        (:line, 1257, :none),
                        (:(=), :fname, (:ref, (:., :e, (:quote, #QuoteNode
                                :args
                              )), 1)),
                        (:line, 1258, :none),
                        (:if, (:call, :isa, :fname, :Slot), (:block,
                            (:line, 1259, :none),
                            (:return, (:call, :StateUpdate, :fname, (:call, :VarState, :Any, false), :vtypes))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1262, :none),
        (:return, :vtypes)
      )),
    (:line, 1265, :none),
    (:function, (:call, :type_too_complex, (:(::), :t, :ANY), :d), (:block,
        (:line, 1266, :none),
        (:if, (:call, :>, :d, :MAX_TYPE_DEPTH), (:block,
            (:line, 1267, :none),
            (:return, true)
          )),
        (:line, 1269, :none),
        (:if, (:call, :isa, :t, :Union), (:block,
            (:line, 1270, :none),
            (:(=), :p, (:., :t, (:quote, #QuoteNode
                  :types
                )))
          ), (:block,
            (:line, 1271, :none),
            (:if, (:call, :isa, :t, :DataType), (:block,
                (:line, 1272, :none),
                (:(=), :p, (:., :t, (:quote, #QuoteNode
                      :parameters
                    )))
              ), (:block,
                (:line, 1273, :none),
                (:if, (:call, :isa, :t, :TypeVar), (:block,
                    (:line, 1274, :none),
                    (:return, (:||, (:call, :type_too_complex, (:., :t, (:quote, #QuoteNode
                              :lb
                            )), (:call, :+, :d, 1)), (:call, :type_too_complex, (:., :t, (:quote, #QuoteNode
                              :ub
                            )), (:call, :+, :d, 1))))
                  ), (:block,
                    (:line, 1276, :none),
                    (:return, false)
                  ))
              ))
          )),
        (:line, 1278, :none),
        (:for, (:(=), :x, (:(::), :p, :SimpleVector)), (:block,
            (:line, 1279, :none),
            (:if, (:call, :type_too_complex, :x, (:call, :+, :d, 1)), (:block,
                (:line, 1280, :none),
                (:return, true)
              ))
          )),
        (:line, 1283, :none),
        (:return, false)
      )),
    (:line, 1288, :none),
    (:function, (:call, :⊑, (:(::), :a, :ANY), (:(::), :b, :ANY)), (:block,
        (:line, 1289, :none),
        (:&&, (:call, :(===), :a, :NF), (:return, true)),
        (:line, 1290, :none),
        (:&&, (:call, :(===), :b, :NF), (:return, false)),
        (:line, 1291, :none),
        (:if, (:call, :isa, :a, :Const), (:block,
            (:line, 1292, :none),
            (:if, (:call, :isa, :b, :Const), (:block,
                (:line, 1293, :none),
                (:return, (:call, :(===), (:., :a, (:quote, #QuoteNode
                        :val
                      )), (:., :b, (:quote, #QuoteNode
                        :val
                      ))))
              )),
            (:line, 1295, :none),
            (:return, (:call, :isa, (:., :a, (:quote, #QuoteNode
                    :val
                  )), :b))
          ), (:block,
            (:line, 1296, :none),
            (:if, (:call, :isa, :b, :Const), (:block,
                (:line, 1297, :none),
                (:return, (:call, :(===), :a, :Bottom))
              ), (:block,
                (:line, 1298, :none),
                (:if, (:||, (:call, :!, (:||, (:call, :isa, :a, :Type), (:call, :isa, :a, :TypeVar))), (:call, :!, (:||, (:call, :isa, :b, :Type), (:call, :isa, :b, :TypeVar)))), (:block,
                    (:line, 1299, :none),
                    (:return, (:call, :(===), :a, :b))
                  ), (:block,
                    (:line, 1301, :none),
                    (:return, (:<:, :a, :b))
                  ))
              ))
          ))
      )),
    (:line, 1305, :none),
    (:(=), (:call, :widenconst, (:(::), :c, :Const)), (:block,
        (:line, 1305, :none),
        (:call, :typeof, (:., :c, (:quote, #QuoteNode
              :val
            )))
      )),
    (:line, 1306, :none),
    (:(=), (:call, :widenconst, (:(::), :t, :ANY)), (:block,
        (:line, 1306, :none),
        :t
      )),
    (:line, 1308, :none),
    (:(=), (:call, :issubstate, (:(::), :a, :VarState), (:(::), :b, :VarState)), (:block,
        (:line, 1308, :none),
        (:&&, (:call, :⊑, (:., :a, (:quote, #QuoteNode
                :typ
              )), (:., :b, (:quote, #QuoteNode
                :typ
              ))), (:call, :(<=), (:., :a, (:quote, #QuoteNode
                :undef
              )), (:., :b, (:quote, #QuoteNode
                :undef
              ))))
      )),
    (:line, 1310, :none),
    (:function, (:call, :tmerge, (:(::), :typea, :ANY), (:(::), :typeb, :ANY)), (:block,
        (:line, 1311, :none),
        (:&&, (:call, :⊑, :typea, :typeb), (:return, :typeb)),
        (:line, 1312, :none),
        (:&&, (:call, :⊑, :typeb, :typea), (:return, :typea)),
        (:line, 1313, :none),
        (:(=), (:tuple, :typea, :typeb), (:tuple, (:call, :widenconst, :typea), (:call, :widenconst, :typeb))),
        (:line, 1314, :none),
        (:&&, (:call, :(===), :typea, :typeb), (:return, :typea)),
        (:line, 1315, :none),
        (:if, (:||, (:call, :!, (:||, (:call, :isa, :typea, :Type), (:call, :isa, :typea, :TypeVar))), (:call, :!, (:||, (:call, :isa, :typeb, :Type), (:call, :isa, :typeb, :TypeVar)))), (:block,
            (:line, 1316, :none),
            (:return, :Any)
          )),
        (:line, 1318, :none),
        (:if, (:&&, (:<:, :typea, :Tuple), (:<:, :typeb, :Tuple)), (:block,
            (:line, 1319, :none),
            (:if, (:&&, (:call, :isa, :typea, :DataType), (:&&, (:call, :isa, :typeb, :DataType), (:&&, (:call, :(==), (:call, :length, (:., :typea, (:quote, #QuoteNode
                            :parameters
                          ))), (:call, :length, (:., :typeb, (:quote, #QuoteNode
                            :parameters
                          )))), (:&&, (:call, :!, (:call, :isvatuple, :typea)), (:call, :!, (:call, :isvatuple, :typeb)))))), (:block,
                (:line, 1320, :none),
                (:return, (:call, :typejoin, :typea, :typeb))
              )),
            (:line, 1322, :none),
            (:if, (:||, (:call, :isa, :typea, :Union), (:||, (:call, :isa, :typeb, :Union), (:||, (:&&, (:call, :isa, :typea, :DataType), (:call, :>, (:call, :length, (:., :typea, (:quote, #QuoteNode
                              :parameters
                            ))), 3)), (:&&, (:call, :isa, :typeb, :DataType), (:call, :>, (:call, :length, (:., :typeb, (:quote, #QuoteNode
                              :parameters
                            ))), 3))))), (:block,
                (:line, 1326, :none),
                (:return, :Tuple)
              ))
          )),
        (:line, 1329, :none),
        (:(=), :u, (:curly, :Union, :typea, :typeb)),
        (:line, 1330, :none),
        (:if, (:||, (:call, :>, (:call, :length, (:., :u, (:quote, #QuoteNode
                    :types
                  ))), :MAX_TYPEUNION_LEN), (:call, :type_too_complex, :u, 0)), (:block,
            (:line, 1333, :none),
            (:return, :Any)
          )),
        (:line, 1335, :none),
        (:return, :u)
      )),
    (:line, 1338, :none),
    (:function, (:call, :smerge, (:(::), :sa, (:curly, :Union, :NotFound, :VarState)), (:(::), :sb, (:curly, :Union, :NotFound, :VarState))), (:block,
        (:line, 1339, :none),
        (:&&, (:call, :(===), :sa, :NF), (:return, :sb)),
        (:line, 1340, :none),
        (:&&, (:call, :(===), :sb, :NF), (:return, :sa)),
        (:line, 1341, :none),
        (:&&, (:call, :issubstate, :sa, :sb), (:return, :sb)),
        (:line, 1342, :none),
        (:&&, (:call, :issubstate, :sb, :sa), (:return, :sa)),
        (:line, 1343, :none),
        (:call, :VarState, (:call, :tmerge, (:., :sa, (:quote, #QuoteNode
                :typ
              )), (:., :sb, (:quote, #QuoteNode
                :typ
              ))), (:call, :|, (:., :sa, (:quote, #QuoteNode
                :undef
              )), (:., :sb, (:quote, #QuoteNode
                :undef
              ))))
      )),
    (:line, 1346, :none),
    (:(=), (:call, :tchanged, (:(::), :n, :ANY), (:(::), :o, :ANY)), (:block,
        (:line, 1346, :none),
        (:||, (:call, :is, :o, :NF), (:&&, (:call, :!, (:call, :is, :n, :NF)), (:call, :!, (:call, :⊑, :n, :o))))
      )),
    (:line, 1347, :none),
    (:(=), (:call, :schanged, (:(::), :n, :ANY), (:(::), :o, :ANY)), (:block,
        (:line, 1347, :none),
        (:||, (:call, :is, :o, :NF), (:&&, (:call, :!, (:call, :is, :n, :NF)), (:call, :!, (:call, :issubstate, :n, :o))))
      )),
    (:line, 1349, :none),
    (:function, (:call, :stupdate!, (:(::), :state, (:curly, :Tuple)), (:(::), :changes, :StateUpdate)), (:block,
        (:line, 1350, :none),
        (:(=), :newst, (:call, :copy, (:., :changes, (:quote, #QuoteNode
                :state
              )))),
        (:line, 1351, :none),
        (:if, (:call, :isa, (:., :changes, (:quote, #QuoteNode
                :var
              )), :Slot), (:block,
            (:line, 1352, :none),
            (:(=), (:ref, :newst, (:., (:., :changes, (:quote, #QuoteNode
                      :var
                    )), (:quote, #QuoteNode
                    :id
                  ))), (:., :changes, (:quote, #QuoteNode
                  :vtype
                )))
          )),
        (:line, 1354, :none),
        :newst
      )),
    (:line, 1357, :none),
    (:function, (:call, :stupdate!, (:(::), :state, :VarTable), (:(::), :change, :StateUpdate)), (:block,
        (:line, 1358, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :state))), (:block,
            (:line, 1359, :none),
            (:if, (:&&, (:call, :isa, (:., :change, (:quote, #QuoteNode
                      :var
                    )), :Slot), (:call, :(==), :i, (:., (:., :change, (:quote, #QuoteNode
                        :var
                      )), (:quote, #QuoteNode
                      :id
                    )))), (:block,
                (:line, 1360, :none),
                (:(=), :newtype, (:., :change, (:quote, #QuoteNode
                      :vtype
                    )))
              ), (:block,
                (:line, 1362, :none),
                (:(=), :newtype, (:ref, (:., :change, (:quote, #QuoteNode
                        :state
                      )), :i))
              )),
            (:line, 1364, :none),
            (:(=), :oldtype, (:ref, :state, :i)),
            (:line, 1365, :none),
            (:if, (:call, :schanged, :newtype, :oldtype), (:block,
                (:line, 1366, :none),
                (:(=), (:ref, :state, :i), (:call, :smerge, :oldtype, :newtype))
              ))
          )),
        (:line, 1369, :none),
        (:return, :state)
      )),
    (:line, 1372, :none),
    (:function, (:call, :stupdate!, (:(::), :state, :VarTable), (:(::), :changes, :VarTable)), (:block,
        (:line, 1373, :none),
        (:(=), :newstate, false),
        (:line, 1374, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :state))), (:block,
            (:line, 1375, :none),
            (:(=), :newtype, (:ref, :changes, :i)),
            (:line, 1376, :none),
            (:(=), :oldtype, (:ref, :state, :i)),
            (:line, 1377, :none),
            (:if, (:call, :schanged, :newtype, :oldtype), (:block,
                (:line, 1378, :none),
                (:(=), :newstate, :state),
                (:line, 1379, :none),
                (:(=), (:ref, :state, :i), (:call, :smerge, :oldtype, :newtype))
              ))
          )),
        (:line, 1382, :none),
        (:return, :newstate)
      )),
    (:line, 1385, :none),
    (:(=), (:call, :stupdate!, (:(::), :state, (:curly, :Tuple)), (:(::), :changes, :VarTable)), (:block,
        (:line, 1385, :none),
        (:call, :copy, :changes)
      )),
    (:line, 1387, :none),
    (:(=), (:call, :stupdate!, (:(::), :state, (:curly, :Tuple)), (:(::), :changes, (:curly, :Tuple))), (:block,
        (:line, 1387, :none),
        false
      )),
    (:line, 1391, :none),
    (:function, (:call, :label_counter, :body), (:block,
        (:line, 1392, :none),
        (:(=), :l, -1),
        (:line, 1393, :none),
        (:for, (:(=), :b, :body), (:block,
            (:line, 1394, :none),
            (:if, (:&&, (:call, :isa, :b, :LabelNode), (:call, :>, (:., (:(::), :b, :LabelNode), (:quote, #QuoteNode
                      :label
                    )), :l)), (:block,
                (:line, 1395, :none),
                (:(=), :l, (:., (:(::), :b, :LabelNode), (:quote, #QuoteNode
                      :label
                    )))
              ))
          )),
        (:line, 1398, :none),
        (:return, :l)
      )),
    (:line, 1400, :none),
    (:(=), (:call, :genlabel, :sv), (:block,
        (:line, 1400, :none),
        (:call, :LabelNode, (:+=, (:., :sv, (:quote, #QuoteNode
                :label_counter
              )), 1))
      )),
    (:line, 1402, :none),
    (:function, (:call, :find_ssavalue_uses, :body), (:block,
        (:line, 1403, :none),
        (:(=), :uses, (:ref, :IntSet)),
        (:line, 1404, :none),
        (:for, (:(=), :line, (:(:), 1, (:call, :length, :body))), (:block,
            (:line, 1405, :none),
            (:call, :find_ssavalue_uses, (:ref, :body, :line), :uses, :line)
          )),
        (:line, 1407, :none),
        (:return, :uses)
      )),
    (:line, 1409, :none),
    (:function, (:call, :find_ssavalue_uses, (:(::), :e, :ANY), :uses, :line), (:block,
        (:line, 1410, :none),
        (:if, (:call, :isa, :e, :SSAValue), (:block,
            (:line, 1411, :none),
            (:(=), :id, (:call, :+, (:., (:(::), :e, :SSAValue), (:quote, #QuoteNode
                    :id
                  )), 1)),
            (:line, 1412, :none),
            (:while, (:call, :<, (:call, :length, :uses), :id), (:block,
                (:line, 1413, :none),
                (:call, :push!, :uses, (:call, :IntSet))
              )),
            (:line, 1415, :none),
            (:call, :push!, (:ref, :uses, :id), :line)
          ), (:block,
            (:line, 1416, :none),
            (:if, (:call, :isa, :e, :Expr), (:block,
                (:line, 1417, :none),
                (:(=), :b, (:(::), :e, :Expr)),
                (:line, 1418, :none),
                (:(=), :head, (:., :b, (:quote, #QuoteNode
                      :head
                    ))),
                (:line, 1419, :none),
                (:if, (:call, :(===), :head, (:quote, #QuoteNode
                      :line
                    )), (:block,
                    (:line, 1420, :none),
                    (:return, nothing)
                  )),
                (:line, 1422, :none),
                (:if, (:call, :(===), :head, (:quote, #QuoteNode
                      :(=)
                    )), (:block,
                    (:line, 1423, :none),
                    (:if, (:call, :isa, (:ref, (:., :b, (:quote, #QuoteNode
                              :args
                            )), 1), :SSAValue), (:block,
                        (:line, 1424, :none),
                        (:(=), :id, (:call, :+, (:., (:(::), (:ref, (:., :b, (:quote, #QuoteNode
                                      :args
                                    )), 1), :SSAValue), (:quote, #QuoteNode
                                :id
                              )), 1)),
                        (:line, 1425, :none),
                        (:while, (:call, :<, (:call, :length, :uses), :id), (:block,
                            (:line, 1426, :none),
                            (:call, :push!, :uses, (:call, :IntSet))
                          ))
                      )),
                    (:line, 1429, :none),
                    (:call, :find_ssavalue_uses, (:ref, (:., :b, (:quote, #QuoteNode
                            :args
                          )), 2), :uses, :line),
                    (:line, 1430, :none),
                    (:return, nothing)
                  )),
                (:line, 1432, :none),
                (:for, (:(=), :a, (:., :b, (:quote, #QuoteNode
                        :args
                      ))), (:block,
                    (:line, 1433, :none),
                    (:call, :find_ssavalue_uses, :a, :uses, :line)
                  ))
              ))
          ))
      )),
    (:line, 1438, :none),
    (:function, (:call, :newvar!, (:(::), :sv, :InferenceState), :typ), (:block,
        (:line, 1439, :none),
        (:(=), :id, (:call, :length, (:., (:., :sv, (:quote, #QuoteNode
                  :linfo
                )), (:quote, #QuoteNode
                :ssavaluetypes
              )))),
        (:line, 1440, :none),
        (:call, :push!, (:., (:., :sv, (:quote, #QuoteNode
                :linfo
              )), (:quote, #QuoteNode
              :ssavaluetypes
            )), :typ),
        (:line, 1441, :none),
        (:return, (:call, :SSAValue, :id))
      )),
    (:line, 1445, :none),
    (:function, (:call, :specialize_method, (:(::), :method, :Method), (:(::), :types, :ANY), (:(::), :sp, :SimpleVector), :cached), (:block,
        (:line, 1446, :none),
        (:if, :cached, (:block,
            (:line, 1447, :none),
            (:return, (:ccall, (:quote, #QuoteNode
                  :jl_specializations_get_linfo
                ), (:curly, :Ref, :LambdaInfo), (:tuple, :Any, :Any, :Any, :Cint), :method, :types, :sp, true))
          ), (:block,
            (:line, 1449, :none),
            (:return, (:ccall, (:quote, #QuoteNode
                  :jl_get_specialized
                ), (:curly, :Ref, :LambdaInfo), (:tuple, :Any, :Any, :Any), :method, :types, :sp))
          ))
      )),
    (:line, 1454, :none),
    (:function, (:call, :unshare_linfo!, (:(::), :li, :LambdaInfo)), (:block,
        (:line, 1455, :none),
        (:(=), :orig, (:., (:., :li, (:quote, #QuoteNode
                :def
              )), (:quote, #QuoteNode
              :lambda_template
            ))),
        (:line, 1456, :none),
        (:if, (:call, :isa, (:., :li, (:quote, #QuoteNode
                :code
              )), (:curly, :Array, :UInt8, 1)), (:block,
            (:line, 1457, :none),
            (:(=), (:., :li, (:quote, #QuoteNode
                  :code
                )), (:ccall, (:quote, #QuoteNode
                  :jl_uncompress_ast
                ), :Any, (:tuple, :Any, :Any), :li, (:., :li, (:quote, #QuoteNode
                    :code
                  ))))
          ), (:block,
            (:line, 1458, :none),
            (:if, (:call, :(===), (:., :li, (:quote, #QuoteNode
                    :code
                  )), (:., :orig, (:quote, #QuoteNode
                    :code
                  ))), (:block,
                (:line, 1459, :none),
                (:(=), (:., :li, (:quote, #QuoteNode
                      :code
                    )), (:call, :copy_exprargs, (:., :orig, (:quote, #QuoteNode
                        :code
                      ))))
              ))
          )),
        (:line, 1461, :none),
        (:if, (:call, :!, (:., (:., :li, (:quote, #QuoteNode
                  :def
                )), (:quote, #QuoteNode
                :isstaged
              ))), (:block,
            (:line, 1462, :none),
            (:(=), (:., :li, (:quote, #QuoteNode
                  :slotnames
                )), (:call, :copy, (:., :li, (:quote, #QuoteNode
                    :slotnames
                  )))),
            (:line, 1463, :none),
            (:(=), (:., :li, (:quote, #QuoteNode
                  :slotflags
                )), (:call, :copy, (:., :li, (:quote, #QuoteNode
                    :slotflags
                  ))))
          )),
        (:line, 1465, :none),
        (:return, :li)
      )),
    (:line, 1468, :none),
    (:(=), (:call, :inlining_enabled), (:block,
        (:line, 1468, :none),
        (:call, :(==), (:., (:call, :JLOptions), (:quote, #QuoteNode
              :can_inline
            )), 1)
      )),
    (:line, 1471, :none),
    (:function, (:call, :typeinf_edge, (:(::), :method, :Method), (:(::), :atypes, :ANY), (:(::), :sparams, :SimpleVector), (:(::), :needtree, :Bool), (:(::), :optimize, :Bool), (:(::), :cached, :Bool), :caller), (:block,
        (:line, 1472, :none),
        (:local, (:(=), :code, :nothing)),
        (:line, 1473, :none),
        (:local, (:(=), :frame, :nothing)),
        (:line, 1474, :none),
        (:if, (:call, :isa, :caller, :LambdaInfo), (:block,
            (:line, 1475, :none),
            (:(=), :code, :caller)
          ), (:block,
            (:line, 1476, :none),
            (:if, :cached, (:block,
                (:line, 1479, :none),
                (:if, (:call, :!, (:call, :is, (:., :method, (:quote, #QuoteNode
                          :specializations
                        )), :nothing)), (:block,
                    (:line, 1480, :none),
                    (:(=), :code, (:ccall, (:quote, #QuoteNode
                          :jl_specializations_lookup
                        ), :Any, (:tuple, :Any, :Any), :method, :atypes)),
                    (:line, 1481, :none),
                    (:if, (:call, :isa, :code, :Void), (:block,), (:block,
                        (:line, 1483, :none),
                        (:if, (:call, :isa, :code, :LambdaInfo), (:block,
                            (:line, 1485, :none),
                            (:if, (:&&, (:., :code, (:quote, #QuoteNode
                                    :inferred
                                  )), (:call, :!, (:&&, :needtree, (:call, :(===), (:., :code, (:quote, #QuoteNode
                                          :code
                                        )), :nothing)))), (:block,
                                (:line, 1486, :none),
                                (:return, (:tuple, :code, (:., :code, (:quote, #QuoteNode
                                        :rettype
                                      )), true))
                              ))
                          ), (:block,
                            (:line, 1491, :none),
                            (:call, :typeassert, :code, :Type),
                            (:line, 1492, :none),
                            (:if, (:call, :!, :needtree), (:block,
                                (:line, 1493, :none),
                                (:return, (:tuple, :nothing, :code, true))
                              )),
                            (:line, 1495, :none),
                            (:(=), :code, :nothing)
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1500, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_typeinf_begin
          ), :Void, (:tuple,)),
        (:line, 1501, :none),
        (:(=), :thread_in_typeinf_loop, (:(::), :in_typeinf_loop, :Bool)),
        (:line, 1502, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_typeinf_end
          ), :Void, (:tuple,)),
        (:line, 1504, :none),
        (:if, (:&&, (:call, :(===), :caller, :nothing), :thread_in_typeinf_loop), (:block,
            (:line, 1510, :none),
            (:(=), :skip, true),
            (:line, 1511, :none),
            (:if, (:||, (:call, :(==), (:., :method, (:quote, #QuoteNode
                      :module
                    )), (:call, :_topmod, (:., :method, (:quote, #QuoteNode
                        :module
                      )))), (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                      :Base
                    )), (:call, :(==), (:., :method, (:quote, #QuoteNode
                        :module
                      )), (:., :Main, (:quote, #QuoteNode
                        :Base
                      ))))), (:block,
                (:line, 1514, :none),
                (:if, (:||, (:call, :(==), (:., :method, (:quote, #QuoteNode
                          :name
                        )), (:quote, #QuoteNode
                        :promote_type
                      )), (:call, :(==), (:., :method, (:quote, #QuoteNode
                          :name
                        )), (:quote, #QuoteNode
                        :typejoin
                      ))), (:block,
                    (:line, 1515, :none),
                    (:(=), :skip, false)
                  ), (:block,
                    (:line, 1516, :none),
                    (:if, (:||, (:call, :(==), (:., :method, (:quote, #QuoteNode
                              :name
                            )), (:quote, #QuoteNode
                            :getindex
                          )), (:||, (:call, :(==), (:., :method, (:quote, #QuoteNode
                                :name
                              )), (:quote, #QuoteNode
                              :next
                            )), (:call, :(==), (:., :method, (:quote, #QuoteNode
                                :name
                              )), (:quote, #QuoteNode
                              :indexed_next
                            )))), (:block,
                        (:line, 1517, :none),
                        (:(=), :argtypes, (:., :atypes, (:quote, #QuoteNode
                              :parameters
                            ))),
                        (:line, 1518, :none),
                        (:if, (:&&, (:call, :>, (:call, :length, :argtypes), 2), (:call, :⊑, (:ref, :argtypes, 3), :Int)), (:block,
                            (:line, 1519, :none),
                            (:(=), :at2, (:call, :widenconst, (:ref, :argtypes, 2))),
                            (:line, 1520, :none),
                            (:if, (:||, (:<:, :at2, :Tuple), (:&&, (:call, :isa, :at2, :DataType), (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                                        :Base
                                      )), (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                                            :Base
                                          )), (:quote, #QuoteNode
                                          :Pair
                                        )), (:call, :(===), (:., (:(::), :at2, :DataType), (:quote, #QuoteNode
                                            :name
                                          )), (:., (:., (:., :Main, (:quote, #QuoteNode
                                                :Base
                                              )), (:quote, #QuoteNode
                                              :Pair
                                            )), (:quote, #QuoteNode
                                            :name
                                          ))))))), (:block,
                                (:line, 1523, :none),
                                (:(=), :skip, false)
                              ))
                          ))
                      ))
                  ))
              )),
            (:line, 1528, :none),
            (:if, :skip, (:block,
                (:line, 1529, :none),
                (:return, (:tuple, :nothing, (:curly, :Union), false))
              ))
          )),
        (:line, 1533, :none),
        (:if, (:&&, (:call, :isa, :code, :LambdaInfo), (:call, :(!==), (:., :code, (:quote, #QuoteNode
                  :code
                )), :nothing)), (:block,
            (:line, 1535, :none),
            (:(=), :linfo, :code),
            (:line, 1536, :none),
            (:macrocall, Symbol("@assert"), (:&&, (:call, :typeseq, (:., :linfo, (:quote, #QuoteNode
                      :specTypes
                    )), :atypes), (:call, :!, (:., :code, (:quote, #QuoteNode
                      :inferred
                    )))))
          ), (:block,
            (:line, 1537, :none),
            (:if, (:., :method, (:quote, #QuoteNode
                  :isstaged
                )), (:block,
                (:line, 1538, :none),
                (:if, (:call, :!, (:call, :isleaftype, :atypes)), (:block,
                    (:line, 1543, :none),
                    (:return, (:tuple, :nothing, :Any, false))
                  )),
                (:line, 1545, :none),
                (:try, (:block,
                    (:line, 1547, :none),
                    (:(=), :linfo, (:call, :specialize_method, :method, :atypes, :sparams, :cached))
                  ), false, (:block,
                    (:line, 1549, :none),
                    (:return, (:tuple, :nothing, :Any, false))
                  ))
              ), (:block,
                (:line, 1552, :none),
                (:(=), :linfo, (:call, :specialize_method, :method, :atypes, :sparams, :cached))
              ))
          )),
        (:line, 1555, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_typeinf_begin
          ), :Void, (:tuple,)),
        (:line, 1558, :none),
        (:if, (:., :linfo, (:quote, #QuoteNode
              :inInference
            )), (:block,
            (:line, 1561, :none),
            (:for, (:(=), :infstate, :active), (:block,
                (:line, 1562, :none),
                (:&&, (:call, :(===), :infstate, :nothing), (:continue,)),
                (:line, 1563, :none),
                (:(=), :infstate, (:(::), :infstate, :InferenceState)),
                (:line, 1564, :none),
                (:if, (:call, :(===), :linfo, (:., :infstate, (:quote, #QuoteNode
                        :linfo
                      ))), (:block,
                    (:line, 1565, :none),
                    (:(=), :frame, :infstate),
                    (:line, 1566, :none),
                    (:break,)
                  ))
              )),
            (:line, 1570, :none),
            (:call, :assert, (:call, :(!==), :frame, :nothing)),
            (:line, 1571, :none),
            (:if, :needtree, (:block,
                (:line, 1572, :none),
                (:(=), (:., :frame, (:quote, #QuoteNode
                      :needtree
                    )), true)
              ))
          ), (:block,
            (:line, 1576, :none),
            (:(=), (:., :linfo, (:quote, #QuoteNode
                  :inInference
                )), true),
            (:line, 1577, :none),
            (:(=), :frame, (:call, :InferenceState, (:call, :unshare_linfo!, (:(::), :linfo, :LambdaInfo)), :optimize, (:call, :inlining_enabled), :needtree))
          )),
        (:line, 1579, :none),
        (:(=), :frame, (:(::), :frame, :InferenceState)),
        (:line, 1581, :none),
        (:if, (:call, :isa, :caller, :InferenceState), (:block,
            (:line, 1584, :none),
            (:(=), :caller, (:(::), :caller, :InferenceState)),
            (:line, 1585, :none),
            (:if, (:call, :haskey, (:., :caller, (:quote, #QuoteNode
                    :edges
                  )), :frame), (:block,
                (:line, 1586, :none),
                (:(=), :Ws, (:(::), (:ref, (:., :caller, (:quote, #QuoteNode
                          :edges
                        )), :frame), (:curly, :Vector, :Int))),
                (:line, 1587, :none),
                (:if, (:call, :!, (:call, :in, (:., :caller, (:quote, #QuoteNode
                          :currpc
                        )), :Ws)), (:block,
                    (:line, 1588, :none),
                    (:call, :push!, :Ws, (:., :caller, (:quote, #QuoteNode
                          :currpc
                        )))
                  ))
              ), (:block,
                (:line, 1591, :none),
                (:macrocall, Symbol("@assert"), (:call, :>, (:., :caller, (:quote, #QuoteNode
                        :currpc
                      )), 0)),
                (:line, 1592, :none),
                (:(=), :Ws, (:ref, :Int, (:., :caller, (:quote, #QuoteNode
                        :currpc
                      )))),
                (:line, 1593, :none),
                (:(=), (:ref, (:., :caller, (:quote, #QuoteNode
                        :edges
                      )), :frame), :Ws),
                (:line, 1594, :none),
                (:call, :push!, (:., :frame, (:quote, #QuoteNode
                      :backedges
                    )), (:tuple, :caller, :Ws))
              ))
          )),
        (:line, 1597, :none),
        (:call, :typeinf_loop, :frame),
        (:line, 1598, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_typeinf_end
          ), :Void, (:tuple,)),
        (:line, 1599, :none),
        (:return, (:tuple, (:., :frame, (:quote, #QuoteNode
                :linfo
              )), (:call, :widenconst, (:., :frame, (:quote, #QuoteNode
                  :bestguess
                ))), (:., :frame, (:quote, #QuoteNode
                :inferred
              ))))
      )),
    (:line, 1602, :none),
    (:function, (:call, :typeinf_edge, (:(::), :method, :Method), (:(::), :atypes, :ANY), (:(::), :sparams, :SimpleVector), :caller), (:block,
        (:line, 1603, :none),
        (:return, (:call, :typeinf_edge, :method, :atypes, :sparams, false, true, true, :caller))
      )),
    (:line, 1605, :none),
    (:function, (:call, :typeinf, (:(::), :method, :Method), (:(::), :atypes, :ANY), (:(::), :sparams, :SimpleVector), (:kw, (:(::), :needtree, :Bool), false)), (:block,
        (:line, 1606, :none),
        (:return, (:call, :typeinf_edge, :method, :atypes, :sparams, :needtree, true, true, :nothing))
      )),
    (:line, 1609, :none),
    (:function, (:call, :typeinf_uncached, (:parameters, (:kw, (:(::), :optimize, :Bool), true)), (:(::), :method, :Method), (:(::), :atypes, :ANY), (:(::), :sparams, :ANY)), (:block,
        (:line, 1610, :none),
        (:return, (:call, :typeinf_edge, :method, :atypes, :sparams, true, :optimize, false, :nothing))
      )),
    (:line, 1612, :none),
    (:function, (:call, :typeinf_uncached, (:(::), :method, :Method), (:(::), :atypes, :ANY), (:(::), :sparams, :SimpleVector), (:(::), :optimize, :Bool)), (:block,
        (:line, 1613, :none),
        (:return, (:call, :typeinf_edge, :method, :atypes, :sparams, true, :optimize, false, :nothing))
      )),
    (:line, 1615, :none),
    (:function, (:call, :typeinf_ext, (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 1616, :none),
        (:if, (:call, :isdefined, :linfo, (:quote, #QuoteNode
              :def
            )), (:block,
            (:line, 1618, :none),
            (:if, (:&&, (:., :linfo, (:quote, #QuoteNode
                    :inferred
                  )), (:call, :(!==), (:., :linfo, (:quote, #QuoteNode
                      :code
                    )), :nothing)), (:block,
                (:line, 1619, :none),
                (:return, :linfo)
              )),
            (:line, 1621, :none),
            (:(=), (:tuple, :code, :_t, :inferred), (:call, :typeinf_edge, (:., :linfo, (:quote, #QuoteNode
                    :def
                  )), (:., :linfo, (:quote, #QuoteNode
                    :specTypes
                  )), (:., :linfo, (:quote, #QuoteNode
                    :sparam_vals
                  )), true, true, true, :linfo)),
            (:line, 1622, :none),
            (:if, (:&&, :inferred, (:&&, (:., :code, (:quote, #QuoteNode
                      :inferred
                    )), (:call, :(!==), :linfo, :code))), (:block,
                (:line, 1626, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :inInference
                    )), true),
                (:line, 1627, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :code
                    )), (:., :code, (:quote, #QuoteNode
                      :code
                    ))),
                (:line, 1628, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :slotnames
                    )), (:., :code, (:quote, #QuoteNode
                      :slotnames
                    ))),
                (:line, 1629, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :slottypes
                    )), (:., :code, (:quote, #QuoteNode
                      :slottypes
                    ))),
                (:line, 1630, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :slotflags
                    )), (:., :code, (:quote, #QuoteNode
                      :slotflags
                    ))),
                (:line, 1631, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :ssavaluetypes
                    )), (:., :code, (:quote, #QuoteNode
                      :ssavaluetypes
                    ))),
                (:line, 1632, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :pure
                    )), (:., :code, (:quote, #QuoteNode
                      :pure
                    ))),
                (:line, 1633, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :inlineable
                    )), (:., :code, (:quote, #QuoteNode
                      :inlineable
                    ))),
                (:line, 1634, :none),
                (:ccall, (:quote, #QuoteNode
                    :jl_set_lambda_rettype
                  ), :Void, (:tuple, :Any, :Any), :linfo, (:., :code, (:quote, #QuoteNode
                      :rettype
                    ))),
                (:line, 1635, :none),
                (:if, (:call, :(==), (:., :code, (:quote, #QuoteNode
                        :jlcall_api
                      )), 2), (:block,
                    (:line, 1636, :none),
                    (:(=), (:., :linfo, (:quote, #QuoteNode
                          :constval
                        )), (:., :code, (:quote, #QuoteNode
                          :constval
                        ))),
                    (:line, 1637, :none),
                    (:(=), (:., :linfo, (:quote, #QuoteNode
                          :jlcall_api
                        )), 2)
                  )),
                (:line, 1639, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :inferred
                    )), true),
                (:line, 1640, :none),
                (:(=), (:., :linfo, (:quote, #QuoteNode
                      :inInference
                    )), false)
              )),
            (:line, 1642, :none),
            (:return, :code)
          ), (:block,
            (:line, 1645, :none),
            (:(=), (:., :linfo, (:quote, #QuoteNode
                  :inInference
                )), true),
            (:line, 1646, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_typeinf_begin
              ), :Void, (:tuple,)),
            (:line, 1647, :none),
            (:(=), :frame, (:call, :InferenceState, :linfo, true, (:call, :inlining_enabled), true)),
            (:line, 1648, :none),
            (:call, :typeinf_loop, :frame),
            (:line, 1649, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_typeinf_end
              ), :Void, (:tuple,)),
            (:line, 1650, :none),
            (:macrocall, Symbol("@assert"), (:., :frame, (:quote, #QuoteNode
                  :inferred
                ))),
            (:line, 1651, :none),
            (:return, :linfo)
          ))
      )),
    (:line, 1656, :none),
    (:(=), :in_typeinf_loop, false),
    (:line, 1657, :none),
    (:function, (:call, :typeinf_loop, :frame), (:block,
        (:line, 1658, :none),
        (:global, :in_typeinf_loop),
        (:line, 1659, :none),
        (:if, :in_typeinf_loop, (:block,
            (:line, 1660, :none),
            (:||, (:., :frame, (:quote, #QuoteNode
                  :inworkq
                )), (:call, :typeinf_frame, :frame)),
            (:line, 1661, :none),
            (:return, nothing)
          )),
        (:line, 1663, :none),
        (:try, (:block,
            (:line, 1664, :none),
            (:(=), :in_typeinf_loop, true),
            (:line, 1668, :none),
            (:while, (:call, :>, (:ref, :nactive), 0), (:block,
                (:line, 1669, :none),
                (:while, (:call, :(===), (:ref, :active, :end), :nothing), (:block,
                    (:line, 1670, :none),
                    (:call, :pop!, :active)
                  )),
                (:line, 1672, :none),
                (:if, (:call, :isempty, :workq), (:block,
                    (:line, 1673, :none),
                    (:(=), :frame, (:(::), (:ref, :active, :end), :InferenceState))
                  ), (:block,
                    (:line, 1675, :none),
                    (:(=), :frame, (:call, :pop!, :workq))
                  )),
                (:line, 1677, :none),
                (:call, :typeinf_frame, :frame),
                (:line, 1678, :none),
                (:if, (:&&, (:call, :isempty, :workq), (:call, :>, (:ref, :nactive), 0)), (:block,
                    (:line, 1681, :none),
                    (:(=), :fplist, (:ref, :Any)),
                    (:line, 1682, :none),
                    (:for, (:(=), :i, :active), (:block,
                        (:line, 1683, :none),
                        (:&&, (:call, :(===), :i, :nothing), (:continue,)),
                        (:line, 1684, :none),
                        (:(=), :i, (:(::), :i, :InferenceState)),
                        (:line, 1685, :none),
                        (:if, (:., :i, (:quote, #QuoteNode
                              :fixedpoint
                            )), (:block,
                            (:line, 1686, :none),
                            (:call, :push!, :fplist, :i),
                            (:line, 1687, :none),
                            (:(=), (:., :i, (:quote, #QuoteNode
                                  :inworkq
                                )), true)
                          ))
                      )),
                    (:line, 1690, :none),
                    (:for, (:(=), :i, (:(:), (:call, :length, :fplist), -1, 1)), (:block,
                        (:line, 1691, :none),
                        (:call, :finish, (:ref, :fplist, :i))
                      ))
                  ))
              )),
            (:line, 1696, :none),
            (:call, :empty!, :active),
            (:line, 1703, :none),
            (:(=), :in_typeinf_loop, false)
          ), :ex, (:block,
            (:line, 1705, :none),
            (:call, :println, "WARNING: An error occurred during inference. Type inference is now partially disabled."),
            (:line, 1706, :none),
            (:call, :println, :ex),
            (:line, 1707, :none),
            (:ccall, (:quote, #QuoteNode
                :jlbacktrace
              ), :Void, (:tuple,))
          )),
        (:line, 1709, :none),
        :nothing
      )),
    (:line, 1712, :none),
    (:(=), :global_sv, :nothing),
    (:line, 1713, :none),
    (:function, (:call, :typeinf_frame, :frame), (:block,
        (:line, 1714, :none),
        (:global, :global_sv),
        (:line, 1715, :none),
        (:(=), :last_global_sv, :global_sv),
        (:line, 1716, :none),
        (:(=), :global_sv, :frame),
        (:line, 1717, :none),
        (:macrocall, Symbol("@assert"), (:call, :!, (:., :frame, (:quote, #QuoteNode
                :inferred
              )))),
        (:line, 1718, :none),
        (:(=), (:., :frame, (:quote, #QuoteNode
              :inworkq
            )), true),
        (:line, 1719, :none),
        (:(=), :W, (:., :frame, (:quote, #QuoteNode
              :ip
            ))),
        (:line, 1720, :none),
        (:(=), :s, (:., :frame, (:quote, #QuoteNode
              :stmt_types
            ))),
        (:line, 1721, :none),
        (:(=), :n, (:., :frame, (:quote, #QuoteNode
              :nstmts
            ))),
        (:line, 1722, :none),
        (:while, (:call, :!, (:call, :isempty, :W)), (:block,
            (:line, 1724, :none),
            (:local, (:(=), (:(::), :pc, :Int), (:call, :first, :W)), (:(::), :pc´, :Int)),
            (:line, 1725, :none),
            (:while, true, (:block,
                (:line, 1727, :none),
                (:call, :delete!, :W, :pc),
                (:line, 1728, :none),
                (:(=), (:., :frame, (:quote, #QuoteNode
                      :currpc
                    )), :pc),
                (:line, 1729, :none),
                (:(=), (:., :frame, (:quote, #QuoteNode
                      :cur_hand
                    )), (:ref, (:., :frame, (:quote, #QuoteNode
                        :handler_at
                      )), :pc)),
                (:line, 1730, :none),
                (:(=), :stmt, (:ref, (:., (:., :frame, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :code
                      )), :pc)),
                (:line, 1731, :none),
                (:(=), :changes, (:call, :abstract_interpret, :stmt, (:(::), (:ref, :s, :pc), (:curly, :Array, :Any, 1)), :frame)),
                (:line, 1732, :none),
                (:if, (:call, :(===), :changes, (:tuple,)), (:block,
                    (:line, 1734, :none),
                    (:break,),
                    (:line, 1735, :none),
                    (:(=), :changes, (:ref, :s, :pc))
                  )),
                (:line, 1737, :none),
                (:if, (:call, :(!==), (:., :frame, (:quote, #QuoteNode
                        :cur_hand
                      )), (:tuple,)), (:block,
                    (:line, 1739, :none),
                    (:(=), :l, (:ref, (:., :frame, (:quote, #QuoteNode
                            :cur_hand
                          )), 1)),
                    (:line, 1740, :none),
                    (:(=), :newstate, (:call, :stupdate!, (:ref, :s, :l), :changes)),
                    (:line, 1741, :none),
                    (:if, (:call, :(!==), :newstate, false), (:block,
                        (:line, 1742, :none),
                        (:call, :push!, :W, :l),
                        (:line, 1743, :none),
                        (:(=), (:ref, :s, :l), :newstate)
                      ))
                  )),
                (:line, 1746, :none),
                (:(=), :pc´, (:call, :+, :pc, 1)),
                (:line, 1747, :none),
                (:if, (:&&, (:call, :isa, :changes, :StateUpdate), (:call, :isa, (:., (:(::), :changes, :StateUpdate), (:quote, #QuoteNode
                          :var
                        )), :SSAValue)), (:block,
                    (:line, 1749, :none),
                    (:(=), :changes, (:(::), :changes, :StateUpdate)),
                    (:line, 1750, :none),
                    (:(=), :id, (:call, :+, (:., (:(::), (:., :changes, (:quote, #QuoteNode
                                :var
                              )), :SSAValue), (:quote, #QuoteNode
                            :id
                          )), 1)),
                    (:line, 1751, :none),
                    (:(=), :new, (:., (:., :changes, (:quote, #QuoteNode
                            :vtype
                          )), (:quote, #QuoteNode
                          :typ
                        ))),
                    (:line, 1752, :none),
                    (:(=), :old, (:ref, (:., (:., :frame, (:quote, #QuoteNode
                              :linfo
                            )), (:quote, #QuoteNode
                            :ssavaluetypes
                          )), :id)),
                    (:line, 1753, :none),
                    (:if, (:||, (:call, :(===), :old, :NF), (:call, :!, (:call, :⊑, :new, :old))), (:block,
                        (:line, 1754, :none),
                        (:(=), (:ref, (:., (:., :frame, (:quote, #QuoteNode
                                  :linfo
                                )), (:quote, #QuoteNode
                                :ssavaluetypes
                              )), :id), (:call, :tmerge, :old, :new)),
                        (:line, 1755, :none),
                        (:for, (:(=), :r, (:ref, (:., :frame, (:quote, #QuoteNode
                                  :ssavalue_uses
                                )), :id)), (:block,
                            (:line, 1756, :none),
                            (:if, (:call, :!, (:call, :is, (:ref, :s, :r), (:tuple,))), (:block,
                                (:line, 1757, :none),
                                (:call, :push!, :W, :r)
                              ))
                          ))
                      ))
                  ), (:block,
                    (:line, 1761, :none),
                    (:if, (:call, :isa, :stmt, :GotoNode), (:block,
                        (:line, 1762, :none),
                        (:(=), :pc´, (:., (:(::), :stmt, :GotoNode), (:quote, #QuoteNode
                              :label
                            )))
                      ), (:block,
                        (:line, 1763, :none),
                        (:if, (:call, :isa, :stmt, :Expr), (:block,
                            (:line, 1764, :none),
                            (:(=), :stmt, (:(::), :stmt, :Expr)),
                            (:line, 1765, :none),
                            (:(=), :hd, (:., :stmt, (:quote, #QuoteNode
                                  :head
                                ))),
                            (:line, 1766, :none),
                            (:if, (:call, :is, :hd, (:quote, #QuoteNode
                                  :gotoifnot
                                )), (:block,
                                (:line, 1767, :none),
                                (:(=), :condt, (:call, :abstract_eval, (:ref, (:., :stmt, (:quote, #QuoteNode
                                          :args
                                        )), 1), (:ref, :s, :pc), :frame)),
                                (:line, 1768, :none),
                                (:(=), :condval, (:if, (:call, :isa, :condt, :Const), (:., :condt, (:quote, #QuoteNode
                                        :val
                                      )), :nothing)),
                                (:line, 1769, :none),
                                (:(=), :l, (:(::), (:ref, (:., :stmt, (:quote, #QuoteNode
                                          :args
                                        )), 2), :Int)),
                                (:line, 1771, :none),
                                (:if, (:call, :(===), :condval, true), (:block,), (:block,
                                    (:line, 1772, :none),
                                    (:if, (:call, :(===), :condval, false), (:block,
                                        (:line, 1773, :none),
                                        (:(=), :pc´, :l)
                                      ), (:block,
                                        (:line, 1776, :none),
                                        (:(=), (:ref, (:., :frame, (:quote, #QuoteNode
                                                :handler_at
                                              )), :l), (:., :frame, (:quote, #QuoteNode
                                              :cur_hand
                                            ))),
                                        (:line, 1777, :none),
                                        (:(=), :newstate, (:call, :stupdate!, (:ref, :s, :l), :changes)),
                                        (:line, 1778, :none),
                                        (:if, (:call, :(!==), :newstate, false), (:block,
                                            (:line, 1780, :none),
                                            (:call, :push!, :W, :l),
                                            (:line, 1781, :none),
                                            (:(=), (:ref, :s, :l), :newstate)
                                          ))
                                      ))
                                  ))
                              ), (:block,
                                (:line, 1784, :none),
                                (:if, (:call, :is, :hd, (:quote, #QuoteNode
                                      :return
                                    )), (:block,
                                    (:line, 1785, :none),
                                    (:(=), :pc´, (:call, :+, :n, 1)),
                                    (:line, 1786, :none),
                                    (:(=), :rt, (:call, :abstract_eval, (:ref, (:., :stmt, (:quote, #QuoteNode
                                              :args
                                            )), 1), (:ref, :s, :pc), :frame)),
                                    (:line, 1787, :none),
                                    (:if, (:call, :tchanged, :rt, (:., :frame, (:quote, #QuoteNode
                                            :bestguess
                                          ))), (:block,
                                        (:line, 1789, :none),
                                        (:(=), (:., :frame, (:quote, #QuoteNode
                                              :bestguess
                                            )), (:call, :tmerge, (:., :frame, (:quote, #QuoteNode
                                                :bestguess
                                              )), :rt)),
                                        (:line, 1790, :none),
                                        (:for, (:(=), (:tuple, :caller, :callerW), (:., :frame, (:quote, #QuoteNode
                                                :backedges
                                              ))), (:block,
                                            (:line, 1792, :none),
                                            (:for, (:(=), :caller_pc, :callerW), (:block,
                                                (:line, 1793, :none),
                                                (:if, (:call, :(!==), (:ref, (:., :caller, (:quote, #QuoteNode
                                                          :stmt_types
                                                        )), :caller_pc), (:tuple,)), (:block,
                                                    (:line, 1794, :none),
                                                    (:call, :push!, (:., :caller, (:quote, #QuoteNode
                                                          :ip
                                                        )), :caller_pc)
                                                  ))
                                              ))
                                          )),
                                        (:line, 1798, :none),
                                        (:call, :unmark_fixedpoint, :frame)
                                      ))
                                  ), (:block,
                                    (:line, 1800, :none),
                                    (:if, (:call, :is, :hd, (:quote, #QuoteNode
                                          :enter
                                        )), (:block,
                                        (:line, 1801, :none),
                                        (:(=), :l, (:(::), (:ref, (:., :stmt, (:quote, #QuoteNode
                                                  :args
                                                )), 1), :Int)),
                                        (:line, 1802, :none),
                                        (:(=), (:., :frame, (:quote, #QuoteNode
                                              :cur_hand
                                            )), (:tuple, :l, (:., :frame, (:quote, #QuoteNode
                                                :cur_hand
                                              )))),
                                        (:line, 1804, :none),
                                        (:(=), :l, (:ref, (:., :frame, (:quote, #QuoteNode
                                                :cur_hand
                                              )), 1)),
                                        (:line, 1805, :none),
                                        (:(=), :old, (:ref, :s, :l)),
                                        (:line, 1806, :none),
                                        (:(=), :new, (:(::), (:ref, :s, :pc), (:curly, :Array, :Any, 1))),
                                        (:line, 1807, :none),
                                        (:(=), :newstate, (:call, :stupdate!, :old, :new)),
                                        (:line, 1808, :none),
                                        (:if, (:call, :(!==), :newstate, false), (:block,
                                            (:line, 1809, :none),
                                            (:call, :push!, :W, :l),
                                            (:line, 1810, :none),
                                            (:(=), (:ref, :s, :l), :newstate)
                                          )),
                                        (:line, 1822, :none),
                                        (:(=), (:ref, (:., :frame, (:quote, #QuoteNode
                                                :handler_at
                                              )), :l), (:., :frame, (:quote, #QuoteNode
                                              :cur_hand
                                            )))
                                      ), (:block,
                                        (:line, 1823, :none),
                                        (:if, (:call, :is, :hd, (:quote, #QuoteNode
                                              :leave
                                            )), (:block,
                                            (:line, 1824, :none),
                                            (:for, (:(=), :i, (:(:), 1, (:(::), (:ref, (:., :stmt, (:quote, #QuoteNode
                                                          :args
                                                        )), 1), :Int))), (:block,
                                                (:line, 1825, :none),
                                                (:(=), (:., :frame, (:quote, #QuoteNode
                                                      :cur_hand
                                                    )), (:ref, (:., :frame, (:quote, #QuoteNode
                                                        :cur_hand
                                                      )), 2))
                                              ))
                                          ))
                                      ))
                                  ))
                              ))
                          ))
                      ))
                  )),
                (:line, 1829, :none),
                (:&&, (:call, :>, :pc´, :n), (:break,)),
                (:line, 1830, :none),
                (:(=), (:ref, (:., :frame, (:quote, #QuoteNode
                        :handler_at
                      )), :pc´), (:., :frame, (:quote, #QuoteNode
                      :cur_hand
                    ))),
                (:line, 1831, :none),
                (:(=), :newstate, (:call, :stupdate!, (:ref, :s, :pc´), :changes)),
                (:line, 1832, :none),
                (:if, (:call, :(!==), :newstate, false), (:block,
                    (:line, 1833, :none),
                    (:(=), (:ref, :s, :pc´), :newstate),
                    (:line, 1834, :none),
                    (:(=), :pc, :pc´)
                  ), (:block,
                    (:line, 1835, :none),
                    (:if, (:call, :in, :pc´, :W), (:block,
                        (:line, 1836, :none),
                        (:(=), :pc, :pc´)
                      ), (:block,
                        (:line, 1838, :none),
                        (:break,)
                      ))
                  ))
              ))
          )),
        (:line, 1844, :none),
        (:macrocall, Symbol("@assert"), (:call, :!, (:., :frame, (:quote, #QuoteNode
                :inferred
              )))),
        (:line, 1845, :none),
        (:(=), :finished, (:call, :isempty, (:., :frame, (:quote, #QuoteNode
                :edges
              )))),
        (:line, 1846, :none),
        (:if, (:call, :isempty, :workq), (:block,
            (:line, 1849, :none),
            (:(=), (:., :frame, (:quote, #QuoteNode
                  :fixedpoint
                )), true)
          )),
        (:line, 1852, :none),
        (:if, (:||, :finished, (:., :frame, (:quote, #QuoteNode
                :fixedpoint
              ))), (:block,
            (:line, 1853, :none),
            (:if, :finished, (:block,
                (:line, 1854, :none),
                (:call, :finish, :frame)
              ), (:block,
                (:line, 1856, :none),
                (:for, (:(=), (:tuple, :i, :_), (:., :frame, (:quote, #QuoteNode
                        :edges
                      ))), (:block,
                    (:line, 1857, :none),
                    (:(=), :i, (:(::), :i, :InferenceState)),
                    (:line, 1858, :none),
                    (:if, (:call, :!, (:., :i, (:quote, #QuoteNode
                            :fixedpoint
                          ))), (:block,
                        (:line, 1859, :none),
                        (:||, (:., :i, (:quote, #QuoteNode
                              :inworkq
                            )), (:call, :push!, :workq, :i)),
                        (:line, 1860, :none),
                        (:(=), (:., :i, (:quote, #QuoteNode
                              :inworkq
                            )), true),
                        (:line, 1861, :none),
                        (:(=), (:., :i, (:quote, #QuoteNode
                              :fixedpoint
                            )), true)
                      ))
                  ))
              ))
          )),
        (:line, 1866, :none),
        (:(=), (:., :frame, (:quote, #QuoteNode
              :inworkq
            )), false),
        (:line, 1867, :none),
        (:(=), :global_sv, :last_global_sv),
        (:line, 1868, :none),
        :nothing
      )),
    (:line, 1871, :none),
    (:function, (:call, :unmark_fixedpoint, (:(::), :frame, :InferenceState)), (:block,
        (:line, 1875, :none),
        (:if, (:., :frame, (:quote, #QuoteNode
              :fixedpoint
            )), (:block,
            (:line, 1876, :none),
            (:(=), (:., :frame, (:quote, #QuoteNode
                  :fixedpoint
                )), false),
            (:line, 1877, :none),
            (:for, (:(=), (:tuple, :i, :_), (:., :frame, (:quote, #QuoteNode
                    :backedges
                  ))), (:block,
                (:line, 1878, :none),
                (:call, :unmark_fixedpoint, :i)
              ))
          ))
      )),
    (:line, 1886, :none),
    (:function, (:call, :isinlineable, (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 1887, :none),
        (:(=), :inlineable, false),
        (:line, 1888, :none),
        (:if, (:call, :isdefined, :linfo, (:quote, #QuoteNode
              :def
            )), (:block,
            (:line, 1889, :none),
            (:(=), :cost, 1000),
            (:line, 1890, :none),
            (:if, (:call, :(===), (:., (:., :linfo, (:quote, #QuoteNode
                      :def
                    )), (:quote, #QuoteNode
                    :module
                  )), (:call, :_topmod, (:., (:., :linfo, (:quote, #QuoteNode
                        :def
                      )), (:quote, #QuoteNode
                      :module
                    )))), (:block,
                (:line, 1891, :none),
                (:(=), :name, (:., (:., :linfo, (:quote, #QuoteNode
                        :def
                      )), (:quote, #QuoteNode
                      :name
                    ))),
                (:line, 1892, :none),
                (:(=), :sig, (:., (:., :linfo, (:quote, #QuoteNode
                        :def
                      )), (:quote, #QuoteNode
                      :sig
                    ))),
                (:line, 1893, :none),
                (:if, (:&&, (:||, (:call, :(===), :name, (:quote, #QuoteNode
                          :+
                        )), (:||, (:call, :(===), :name, (:quote, #QuoteNode
                            :*
                          )), (:||, (:call, :(===), :name, (:quote, #QuoteNode
                              :min
                            )), (:call, :(===), :name, (:quote, #QuoteNode
                              :max
                            ))))), (:call, :(==), :sig, (:curly, :Tuple, (:ref, (:., :sig, (:quote, #QuoteNode
                              :parameters
                            )), 1), :Any, :Any, :Any, (:curly, :Vararg, :Any)))), (:block,
                    (:line, 1895, :none),
                    (:(=), :inlineable, true)
                  ), (:block,
                    (:line, 1896, :none),
                    (:if, (:||, (:call, :(===), :name, (:quote, #QuoteNode
                            :next
                          )), (:||, (:call, :(===), :name, (:quote, #QuoteNode
                              :done
                            )), (:||, (:call, :(===), :name, (:quote, #QuoteNode
                                :unsafe_convert
                              )), (:call, :(===), :name, (:quote, #QuoteNode
                                :cconvert
                              ))))), (:block,
                        (:line, 1898, :none),
                        (:÷=, :cost, 4)
                      ))
                  ))
              )),
            (:line, 1901, :none),
            (:if, (:call, :!, :inlineable), (:block,
                (:line, 1902, :none),
                (:(=), :body, (:call, :Expr, (:quote, #QuoteNode
                      :block
                    ))),
                (:line, 1903, :none),
                (:(=), (:., :body, (:quote, #QuoteNode
                      :args
                    )), (:., :linfo, (:quote, #QuoteNode
                      :code
                    ))),
                (:line, 1904, :none),
                (:(=), :inlineable, (:call, :inline_worthy, :body, :cost))
              ))
          )),
        (:line, 1907, :none),
        (:return, :inlineable)
      )),
    (:line, 1912, :none),
    (:function, (:call, :finish, (:(::), :me, :InferenceState)), (:block,
        (:line, 1913, :none),
        (:for, (:(=), (:tuple, :i, :_), (:., :me, (:quote, #QuoteNode
                :edges
              ))), (:block,
            (:line, 1914, :none),
            (:macrocall, Symbol("@assert"), (:., (:(::), :i, :InferenceState), (:quote, #QuoteNode
                  :fixedpoint
                )))
          )),
        (:line, 1920, :none),
        (:macrocall, Symbol("@assert"), (:., :me, (:quote, #QuoteNode
              :inworkq
            ))),
        (:line, 1923, :none),
        (:(=), :gt, (:., (:., :me, (:quote, #QuoteNode
                :linfo
              )), (:quote, #QuoteNode
              :ssavaluetypes
            ))),
        (:line, 1924, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :gt))), (:block,
            (:line, 1925, :none),
            (:if, (:call, :(===), (:ref, :gt, :i), :NF), (:block,
                (:line, 1926, :none),
                (:(=), (:ref, :gt, :i), (:curly, :Union))
              ))
          )),
        (:line, 1929, :none),
        (:call, :type_annotate!, (:., :me, (:quote, #QuoteNode
              :linfo
            )), (:., :me, (:quote, #QuoteNode
              :stmt_types
            )), :me, (:., :me, (:quote, #QuoteNode
              :nargs
            ))),
        (:line, 1932, :none),
        (:if, (:., :me, (:quote, #QuoteNode
              :optimize
            )), (:block,
            (:line, 1938, :none),
            (:call, :gotoifnot_elim_pass!, (:., :me, (:quote, #QuoteNode
                  :linfo
                )), :me),
            (:line, 1939, :none),
            (:call, :inlining_pass!, (:., :me, (:quote, #QuoteNode
                  :linfo
                )), :me),
            (:line, 1940, :none),
            (:call, :inbounds_meta_elim_pass!, (:., (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :code
                ))),
            (:line, 1941, :none),
            (:call, :alloc_elim_pass!, (:., :me, (:quote, #QuoteNode
                  :linfo
                )), :me),
            (:line, 1942, :none),
            (:call, :getfield_elim_pass!, (:., :me, (:quote, #QuoteNode
                  :linfo
                )), :me),
            (:line, 1944, :none),
            (:call, :filter!, (:->, :x, (:block,
                  (:line, 1944, :none),
                  (:call, :(!==), :x, :nothing)
                )), (:., (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :code
                ))),
            (:line, 1945, :none),
            (:call, :reindex_labels!, (:., :me, (:quote, #QuoteNode
                  :linfo
                )), :me)
          )),
        (:line, 1947, :none),
        (:call, :widen_all_consts!, (:., :me, (:quote, #QuoteNode
              :linfo
            ))),
        (:line, 1949, :none),
        (:(=), :ispure, (:., (:., :me, (:quote, #QuoteNode
                :linfo
              )), (:quote, #QuoteNode
              :pure
            ))),
        (:line, 1950, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_set_lambda_rettype
          ), :Void, (:tuple, :Any, :Any), (:., :me, (:quote, #QuoteNode
              :linfo
            )), (:call, :widenconst, (:., :me, (:quote, #QuoteNode
                :bestguess
              )))),
        (:line, 1952, :none),
        (:if, (:||, (:&&, (:call, :isa, (:., :me, (:quote, #QuoteNode
                    :bestguess
                  )), :Const), (:call, :(!==), (:., (:., :me, (:quote, #QuoteNode
                      :bestguess
                    )), (:quote, #QuoteNode
                    :val
                  )), :nothing)), (:&&, (:call, :isType, (:., :me, (:quote, #QuoteNode
                    :bestguess
                  ))), (:call, :!, (:call, :has_typevars, (:ref, (:., (:., :me, (:quote, #QuoteNode
                          :bestguess
                        )), (:quote, #QuoteNode
                        :parameters
                      )), 1), true)))), (:block,
            (:line, 1954, :none),
            (:if, (:&&, (:call, :!, :ispure), (:call, :<, (:call, :length, (:., (:., :me, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :code
                      ))), 10)), (:block,
                (:line, 1955, :none),
                (:(=), :ispure, true),
                (:line, 1956, :none),
                (:for, (:(=), :stmt, (:., (:., :me, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :code
                      ))), (:block,
                    (:line, 1957, :none),
                    (:if, (:call, :!, (:call, :statement_effect_free, :stmt, (:., :me, (:quote, #QuoteNode
                              :linfo
                            )))), (:block,
                        (:line, 1958, :none),
                        (:(=), :ispure, false),
                        (:line, 1958, :none),
                        (:break,)
                      ))
                  )),
                (:line, 1961, :none),
                (:if, :ispure, (:block,
                    (:line, 1962, :none),
                    (:for, (:(=), :fl, (:., (:., :me, (:quote, #QuoteNode
                              :linfo
                            )), (:quote, #QuoteNode
                            :slotflags
                          ))), (:block,
                        (:line, 1963, :none),
                        (:if, (:call, :(!=), (:call, :&, :fl, :Slot_UsedUndef), 0), (:block,
                            (:line, 1964, :none),
                            (:(=), :ispure, false),
                            (:line, 1964, :none),
                            (:break,)
                          ))
                      ))
                  ))
              )),
            (:line, 1969, :none),
            (:if, :ispure, (:block,
                (:line, 1971, :none),
                (:call, :setfield!, (:., :me, (:quote, #QuoteNode
                      :linfo
                    )), (:quote, #QuoteNode
                    :constval
                  ), (:if, (:call, :isa, (:., :me, (:quote, #QuoteNode
                          :bestguess
                        )), :Const), (:., (:., :me, (:quote, #QuoteNode
                          :bestguess
                        )), (:quote, #QuoteNode
                        :val
                      )), (:ref, (:., (:., :me, (:quote, #QuoteNode
                            :bestguess
                          )), (:quote, #QuoteNode
                          :parameters
                        )), 1))),
                (:line, 1973, :none),
                (:(=), (:., (:., :me, (:quote, #QuoteNode
                        :linfo
                      )), (:quote, #QuoteNode
                      :jlcall_api
                    )), 2)
              )),
            (:line, 1975, :none),
            (:(=), (:., (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :pure
                )), :ispure)
          )),
        (:line, 1979, :none),
        (:if, (:call, :!, (:., (:., :me, (:quote, #QuoteNode
                  :linfo
                )), (:quote, #QuoteNode
                :inlineable
              ))), (:block,
            (:line, 1980, :none),
            (:(=), (:., (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :inlineable
                )), (:||, (:call, :(==), (:., (:., :me, (:quote, #QuoteNode
                        :linfo
                      )), (:quote, #QuoteNode
                      :jlcall_api
                    )), 2), (:call, :isinlineable, (:., :me, (:quote, #QuoteNode
                      :linfo
                    )))))
          )),
        (:line, 1983, :none),
        (:if, (:call, :!, (:., :me, (:quote, #QuoteNode
                :needtree
              ))), (:block,
            (:line, 1984, :none),
            (:(=), (:., :me, (:quote, #QuoteNode
                  :needtree
                )), (:||, (:., (:., :me, (:quote, #QuoteNode
                      :linfo
                    )), (:quote, #QuoteNode
                    :inlineable
                  )), (:call, :(!=), (:ccall, (:quote, #QuoteNode
                      :jl_is_cacheable_sig
                    ), :Int32, (:tuple, :Any, :Any, :Any), (:., (:., :me, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :specTypes
                      )), (:., (:., (:., :me, (:quote, #QuoteNode
                            :linfo
                          )), (:quote, #QuoteNode
                          :def
                        )), (:quote, #QuoteNode
                        :sig
                      )), (:., (:., :me, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :def
                      ))), 0)))
          )),
        (:line, 1988, :none),
        (:if, (:., :me, (:quote, #QuoteNode
              :needtree
            )), (:block,
            (:line, 1989, :none),
            (:if, (:call, :isdefined, (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :def
                )), (:block,
                (:line, 1991, :none),
                (:(=), :compressedtree, (:ccall, (:quote, #QuoteNode
                      :jl_compress_ast
                    ), :Any, (:tuple, :Any, :Any), (:., :me, (:quote, #QuoteNode
                        :linfo
                      )), (:., (:., :me, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :code
                      )))),
                (:line, 1992, :none),
                (:(=), (:., (:., :me, (:quote, #QuoteNode
                        :linfo
                      )), (:quote, #QuoteNode
                      :code
                    )), :compressedtree)
              ))
          ), (:block,
            (:line, 1995, :none),
            (:ccall, (:quote, #QuoteNode
                :jl_set_lambda_code_null
              ), :Void, (:tuple, :Any), (:., :me, (:quote, #QuoteNode
                  :linfo
                ))),
            (:line, 1996, :none),
            (:(=), (:., (:., :me, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :inlineable
                )), false)
          )),
        (:line, 1999, :none),
        (:(=), (:., (:., :me, (:quote, #QuoteNode
                :linfo
              )), (:quote, #QuoteNode
              :inferred
            )), true),
        (:line, 2000, :none),
        (:(=), (:., (:., :me, (:quote, #QuoteNode
                :linfo
              )), (:quote, #QuoteNode
              :inInference
            )), false),
        (:line, 2002, :none),
        (:(=), (:., :me, (:quote, #QuoteNode
              :inferred
            )), true),
        (:line, 2006, :none),
        (:-=, (:ref, :nactive), 1),
        (:line, 2007, :none),
        (:(=), (:ref, :active, (:call, :findlast, :active, :me)), :nothing),
        (:line, 2010, :none),
        (:for, (:(=), (:tuple, :i, :_), (:., :me, (:quote, #QuoteNode
                :backedges
              ))), (:block,
            (:line, 2011, :none),
            (:if, (:||, (:call, :!, (:., :me, (:quote, #QuoteNode
                      :fixedpoint
                    ))), (:call, :!, (:., :i, (:quote, #QuoteNode
                      :fixedpoint
                    )))), (:block,
                (:line, 2013, :none),
                (:call, :delete!, (:., :i, (:quote, #QuoteNode
                      :edges
                    )), :me),
                (:line, 2014, :none),
                (:||, (:., :i, (:quote, #QuoteNode
                      :inworkq
                    )), (:call, :push!, :workq, :i)),
                (:line, 2015, :none),
                (:(=), (:., :i, (:quote, #QuoteNode
                      :inworkq
                    )), true)
              ))
          )),
        (:line, 2018, :none),
        :nothing
      )),
    (:line, 2021, :none),
    (:function, (:call, :record_slot_type!, :id, (:(::), :vt, :ANY), :slottypes), (:block,
        (:line, 2022, :none),
        (:if, (:call, :(!==), :vt, :Bottom), (:block,
            (:line, 2023, :none),
            (:(=), :otherTy, (:ref, :slottypes, :id)),
            (:line, 2024, :none),
            (:if, (:call, :(===), :otherTy, :Bottom), (:block,
                (:line, 2025, :none),
                (:(=), (:ref, :slottypes, :id), :vt)
              ), (:block,
                (:line, 2026, :none),
                (:if, (:&&, (:call, :(!==), :otherTy, :Any), (:call, :!, (:call, :typeseq, :otherTy, :vt))), (:block,
                    (:line, 2027, :none),
                    (:(=), (:ref, :slottypes, :id), :Any)
                  ))
              ))
          ))
      )),
    (:line, 2032, :none),
    (:function, (:call, :eval_annotate, (:(::), :e, :ANY), (:(::), :vtypes, :ANY), (:(::), :sv, :InferenceState), :undefs, :pass), (:block,
        (:line, 2033, :none),
        (:if, (:call, :isa, :e, :Slot), (:block,
            (:line, 2034, :none),
            (:(=), :id, (:., (:(::), :e, :Slot), (:quote, #QuoteNode
                  :id
                ))),
            (:line, 2035, :none),
            (:(=), :s, (:ref, :vtypes, :id)),
            (:line, 2036, :none),
            (:(=), :vt, (:call, :widenconst, (:., :s, (:quote, #QuoteNode
                    :typ
                  )))),
            (:line, 2037, :none),
            (:if, (:call, :(==), :pass, 1), (:block,
                (:line, 2039, :none),
                (:if, (:., :s, (:quote, #QuoteNode
                      :undef
                    )), (:block,
                    (:line, 2040, :none),
                    (:(=), (:ref, :undefs, :id), true)
                  )),
                (:line, 2042, :none),
                (:call, :record_slot_type!, :id, :vt, (:., (:., :sv, (:quote, #QuoteNode
                        :linfo
                      )), (:quote, #QuoteNode
                      :slottypes
                    ))),
                (:line, 2043, :none),
                (:return, :e)
              )),
            (:line, 2046, :none),
            (:return, (:if, (:call, :(===), :vt, (:ref, (:., (:., :sv, (:quote, #QuoteNode
                          :linfo
                        )), (:quote, #QuoteNode
                        :slottypes
                      )), :id)), :e, (:call, :TypedSlot, :id, :vt)))
          )),
        (:line, 2049, :none),
        (:if, (:call, :!, (:call, :isa, :e, :Expr)), (:block,
            (:line, 2050, :none),
            (:return, :e)
          )),
        (:line, 2053, :none),
        (:(=), :e, (:(::), :e, :Expr)),
        (:line, 2054, :none),
        (:(=), :head, (:., :e, (:quote, #QuoteNode
              :head
            ))),
        (:line, 2055, :none),
        (:if, (:||, (:call, :is, :head, (:quote, #QuoteNode
                :line
              )), (:call, :is, :head, (:quote, #QuoteNode
                :const
              ))), (:block,
            (:line, 2056, :none),
            (:return, :e)
          ), (:block,
            (:line, 2057, :none),
            (:if, (:call, :is, :head, (:quote, #QuoteNode
                  :(=)
                )), (:block,
                (:line, 2058, :none),
                (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 2), (:call, :eval_annotate, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 2), :vtypes, :sv, :undefs, :pass)),
                (:line, 2059, :none),
                (:return, :e)
              ))
          )),
        (:line, 2061, :none),
        (:(=), :i0, (:if, (:call, :is, :head, (:quote, #QuoteNode
                :method
              )), 2, 1)),
        (:line, 2062, :none),
        (:for, (:(=), :i, (:(:), :i0, (:call, :length, (:., :e, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 2063, :none),
            (:(=), :subex, (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), :i)),
            (:line, 2064, :none),
            (:if, (:call, :!, (:||, (:call, :isa, :subex, :Number), (:call, :isa, :subex, :AbstractString))), (:block,
                (:line, 2065, :none),
                (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), :i), (:call, :eval_annotate, :subex, :vtypes, :sv, :undefs, :pass))
              ))
          )),
        (:line, 2068, :none),
        (:return, :e)
      )),
    (:line, 2071, :none),
    (:function, (:call, :expr_cannot_delete, (:(::), :ex, :Expr)), (:block,
        (:line, 2072, :none),
        (:(=), :head, (:., :ex, (:quote, #QuoteNode
              :head
            ))),
        (:line, 2073, :none),
        (:return, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                :inbounds
              )), (:||, (:call, :(===), :head, (:quote, #QuoteNode
                  :boundscheck
                )), (:||, (:call, :(===), :head, (:quote, #QuoteNode
                    :meta
                  )), (:call, :(===), :head, (:quote, #QuoteNode
                    :line
                  ))))))
      )),
    (:line, 2078, :none),
    (:function, (:call, :type_annotate!, (:(::), :linfo, :LambdaInfo), (:(::), :states, (:curly, :Array, :Any, 1)), (:(::), :sv, :ANY), :nargs), (:block,
        (:line, 2079, :none),
        (:(=), :nslots, (:call, :length, (:ref, :states, 1))),
        (:line, 2080, :none),
        (:(=), :nargs, (:., :linfo, (:quote, #QuoteNode
              :nargs
            ))),
        (:line, 2081, :none),
        (:for, (:(=), :i, (:(:), 1, :nargs)), (:block,
            (:line, 2082, :none),
            (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                    :slottypes
                  )), :i), (:call, :widenconst, (:., (:ref, (:ref, :states, 1), :i), (:quote, #QuoteNode
                    :typ
                  ))))
          )),
        (:line, 2084, :none),
        (:for, (:(=), :i, (:(:), (:call, :+, :nargs, 1), :nslots)), (:block,
            (:line, 2085, :none),
            (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                    :slottypes
                  )), :i), :Bottom)
          )),
        (:line, 2087, :none),
        (:(=), :undefs, (:call, :fill, false, :nslots)),
        (:line, 2088, :none),
        (:(=), :body, (:(::), (:., :linfo, (:quote, #QuoteNode
                :code
              )), (:curly, :Array, :Any, 1))),
        (:line, 2089, :none),
        (:(=), :nexpr, (:call, :length, :body)),
        (:line, 2090, :none),
        (:(=), :i, 1),
        (:line, 2091, :none),
        (:(=), :optimize, (:(::), (:., :sv, (:quote, #QuoteNode
                :optimize
              )), :Bool)),
        (:line, 2092, :none),
        (:while, (:call, :(<=), :i, :nexpr), (:block,
            (:line, 2093, :none),
            (:(=), :st_i, (:ref, :states, :i)),
            (:line, 2094, :none),
            (:(=), :expr, (:ref, :body, :i)),
            (:line, 2095, :none),
            (:if, (:call, :(!==), :st_i, (:tuple,)), (:block,
                (:line, 2097, :none),
                (:call, :eval_annotate, :expr, :st_i, :sv, :undefs, 1),
                (:line, 2098, :none),
                (:if, (:&&, (:call, :isa, :expr, :Expr), (:&&, (:call, :(==), (:., :expr, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :(=)
                        )), (:&&, (:call, :<, :i, :nexpr), (:&&, (:call, :isa, (:ref, (:., :expr, (:quote, #QuoteNode
                                  :args
                                )), 1), :Slot), (:call, :(!==), (:ref, :states, (:call, :+, :i, 1)), (:tuple,)))))), (:block,
                    (:line, 2101, :none),
                    (:(=), :id, (:., (:ref, (:., :expr, (:quote, #QuoteNode
                              :args
                            )), 1), (:quote, #QuoteNode
                          :id
                        ))),
                    (:line, 2102, :none),
                    (:call, :record_slot_type!, :id, (:call, :widenconst, (:., (:ref, (:ref, :states, (:call, :+, :i, 1)), :id), (:quote, #QuoteNode
                            :typ
                          ))), (:., :linfo, (:quote, #QuoteNode
                          :slottypes
                        )))
                  ))
              ), (:block,
                (:line, 2104, :none),
                (:if, :optimize, (:block,
                    (:line, 2105, :none),
                    (:if, (:||, (:&&, (:call, :isa, :expr, :Expr), (:call, :expr_cannot_delete, (:(::), :expr, :Expr))), (:call, :isa, :expr, :LineNumberNode)), (:block,
                        (:line, 2107, :none),
                        (:+=, :i, 1),
                        (:line, 2108, :none),
                        (:continue,)
                      )),
                    (:line, 2112, :none),
                    (:call, :deleteat!, :body, :i),
                    (:line, 2113, :none),
                    (:call, :deleteat!, :states, :i),
                    (:line, 2114, :none),
                    (:-=, :nexpr, 1),
                    (:line, 2115, :none),
                    (:continue,)
                  ))
              )),
            (:line, 2117, :none),
            (:+=, :i, 1)
          )),
        (:line, 2119, :none),
        (:for, (:(=), :i, (:(:), 1, :nexpr)), (:block,
            (:line, 2120, :none),
            (:(=), :st_i, (:ref, :states, :i)),
            (:line, 2121, :none),
            (:if, (:call, :(!==), :st_i, (:tuple,)), (:block,
                (:line, 2122, :none),
                (:(=), (:ref, :body, :i), (:call, :eval_annotate, (:ref, :body, :i), :st_i, :sv, :undefs, 2))
              ))
          )),
        (:line, 2127, :none),
        (:for, (:(=), :i, (:(:), 1, :nslots)), (:block,
            (:line, 2128, :none),
            (:if, (:ref, :undefs, :i), (:block,
                (:line, 2129, :none),
                (:|=, (:ref, (:., :linfo, (:quote, #QuoteNode
                        :slotflags
                      )), :i), :Slot_UsedUndef)
              ))
          )),
        (:line, 2132, :none),
        :nothing
      )),
    (:line, 2136, :none),
    (:(=), (:call, :_widen_all_consts, (:(::), :x, :ANY)), (:block,
        (:line, 2136, :none),
        :x
      )),
    (:line, 2137, :none),
    (:(=), (:call, :_widen_all_consts, (:(::), :x, :TypedSlot)), (:block,
        (:line, 2137, :none),
        (:call, :TypedSlot, (:., :x, (:quote, #QuoteNode
              :id
            )), (:call, :widenconst, (:., :x, (:quote, #QuoteNode
                :typ
              ))))
      )),
    (:line, 2138, :none),
    (:function, (:call, :_widen_all_consts, (:(::), :x, :Expr)), (:block,
        (:line, 2139, :none),
        (:(=), (:., :x, (:quote, #QuoteNode
              :typ
            )), (:call, :widenconst, (:., :x, (:quote, #QuoteNode
                :typ
              )))),
        (:line, 2140, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :x, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 2141, :none),
            (:(=), (:ref, (:., :x, (:quote, #QuoteNode
                    :args
                  )), :i), (:call, :_widen_all_consts, (:ref, (:., :x, (:quote, #QuoteNode
                      :args
                    )), :i)))
          )),
        (:line, 2143, :none),
        :x
      )),
    (:line, 2145, :none),
    (:function, (:call, :widen_all_consts!, (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 2146, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                    :ssavaluetypes
                  ))))), (:block,
            (:line, 2147, :none),
            (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                    :ssavaluetypes
                  )), :i), (:call, :widenconst, (:ref, (:., :linfo, (:quote, #QuoteNode
                      :ssavaluetypes
                    )), :i)))
          )),
        (:line, 2149, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                    :code
                  ))))), (:block,
            (:line, 2150, :none),
            (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                    :code
                  )), :i), (:call, :_widen_all_consts, (:ref, (:., :linfo, (:quote, #QuoteNode
                      :code
                    )), :i)))
          )),
        (:line, 2152, :none),
        :linfo
      )),
    (:line, 2157, :none),
    (:function, (:call, :substitute!, (:(::), :e, :ANY), :na, :argexprs, :spvals, :offset), (:block,
        (:line, 2158, :none),
        (:if, (:call, :isa, :e, :Slot), (:block,
            (:line, 2159, :none),
            (:if, (:comparison, 1, :(<=), (:., :e, (:quote, #QuoteNode
                    :id
                  )), :(<=), :na), (:block,
                (:line, 2160, :none),
                (:(=), :ae, (:ref, :argexprs, (:., :e, (:quote, #QuoteNode
                        :id
                      )))),
                (:line, 2161, :none),
                (:if, (:&&, (:call, :isa, :e, :TypedSlot), (:call, :isa, :ae, :Slot)), (:block,
                    (:line, 2162, :none),
                    (:return, (:call, :TypedSlot, (:., :ae, (:quote, #QuoteNode
                            :id
                          )), (:., :e, (:quote, #QuoteNode
                            :typ
                          ))))
                  )),
                (:line, 2164, :none),
                (:return, :ae)
              )),
            (:line, 2166, :none),
            (:if, (:call, :isa, :e, :SlotNumber), (:block,
                (:line, 2167, :none),
                (:return, (:call, :SlotNumber, (:call, :+, (:., :e, (:quote, #QuoteNode
                          :id
                        )), :offset)))
              ), (:block,
                (:line, 2169, :none),
                (:return, (:call, :TypedSlot, (:call, :+, (:., :e, (:quote, #QuoteNode
                          :id
                        )), :offset), (:., :e, (:quote, #QuoteNode
                        :typ
                      ))))
              ))
          )),
        (:line, 2172, :none),
        (:if, (:call, :isa, :e, :NewvarNode), (:block,
            (:line, 2173, :none),
            (:return, (:call, :NewvarNode, (:call, :substitute!, (:., :e, (:quote, #QuoteNode
                      :slot
                    )), :na, :argexprs, :spvals, :offset)))
          )),
        (:line, 2175, :none),
        (:if, (:call, :isa, :e, :Expr), (:block,
            (:line, 2176, :none),
            (:(=), :e, (:(::), :e, :Expr)),
            (:line, 2177, :none),
            (:if, (:call, :(===), (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :static_parameter
                )), (:block,
                (:line, 2178, :none),
                (:return, (:ref, :spvals, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 1)))
              ), (:block,
                (:line, 2179, :none),
                (:if, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :line
                    )), (:block,
                    (:line, 2180, :none),
                    (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :e, (:quote, #QuoteNode
                                :args
                              ))))), (:block,
                        (:line, 2181, :none),
                        (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                                :args
                              )), :i), (:call, :substitute!, (:ref, (:., :e, (:quote, #QuoteNode
                                  :args
                                )), :i), :na, :argexprs, :spvals, :offset))
                      ))
                  ))
              ))
          )),
        (:line, 2185, :none),
        (:return, :e)
      )),
    (:line, 2189, :none),
    (:function, (:call, :occurs_more, (:(::), :e, :ANY), :pred, :n), (:block,
        (:line, 2190, :none),
        (:if, (:call, :isa, :e, :Expr), (:block,
            (:line, 2191, :none),
            (:(=), :e, (:(::), :e, :Expr)),
            (:line, 2192, :none),
            (:&&, (:call, :(===), (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :line
                )), (:return, 0)),
            (:line, 2193, :none),
            (:(=), :c, 0),
            (:line, 2194, :none),
            (:for, (:(=), :a, (:., :e, (:quote, #QuoteNode
                    :args
                  ))), (:block,
                (:line, 2195, :none),
                (:+=, :c, (:call, :occurs_more, :a, :pred, :n)),
                (:line, 2196, :none),
                (:if, (:call, :>, :c, :n), (:block,
                    (:line, 2197, :none),
                    (:return, :c)
                  ))
              )),
            (:line, 2200, :none),
            (:return, :c)
          )),
        (:line, 2202, :none),
        (:if, (:call, :pred, :e), (:block,
            (:line, 2203, :none),
            (:return, 1)
          )),
        (:line, 2205, :none),
        (:return, 0)
      )),
    (:line, 2208, :none),
    (:function, (:call, :exprtype, (:(::), :x, :ANY), (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 2209, :none),
        (:if, (:call, :isa, :x, :Expr), (:block,
            (:line, 2210, :none),
            (:return, (:., (:(::), :x, :Expr), (:quote, #QuoteNode
                  :typ
                )))
          ), (:block,
            (:line, 2211, :none),
            (:if, (:call, :isa, :x, :SlotNumber), (:block,
                (:line, 2212, :none),
                (:return, (:ref, (:., :linfo, (:quote, #QuoteNode
                        :slottypes
                      )), (:., :x, (:quote, #QuoteNode
                        :id
                      ))))
              ), (:block,
                (:line, 2213, :none),
                (:if, (:call, :isa, :x, :TypedSlot), (:block,
                    (:line, 2214, :none),
                    (:return, (:., (:(::), :x, :Slot), (:quote, #QuoteNode
                          :typ
                        )))
                  ), (:block,
                    (:line, 2215, :none),
                    (:if, (:call, :isa, :x, :SSAValue), (:block,
                        (:line, 2216, :none),
                        (:return, (:call, :abstract_eval_ssavalue, (:(::), :x, :SSAValue), :linfo))
                      ), (:block,
                        (:line, 2217, :none),
                        (:if, (:call, :isa, :x, :Symbol), (:block,
                            (:line, 2218, :none),
                            (:(=), :mod, (:if, (:call, :isdefined, :linfo, (:quote, #QuoteNode
                                    :def
                                  )), (:., (:., :linfo, (:quote, #QuoteNode
                                      :def
                                    )), (:quote, #QuoteNode
                                    :module
                                  )), (:call, :current_module))),
                            (:line, 2219, :none),
                            (:return, (:call, :abstract_eval_global, :mod, (:(::), :x, :Symbol)))
                          ), (:block,
                            (:line, 2220, :none),
                            (:if, (:call, :isa, :x, :QuoteNode), (:block,
                                (:line, 2221, :none),
                                (:return, (:call, :abstract_eval_constant, (:., (:(::), :x, :QuoteNode), (:quote, #QuoteNode
                                        :value
                                      ))))
                              ), (:block,
                                (:line, 2222, :none),
                                (:if, (:call, :isa, :x, :GlobalRef), (:block,
                                    (:line, 2223, :none),
                                    (:return, (:call, :abstract_eval_global, (:., :x, (:quote, #QuoteNode
                                            :mod
                                          )), (:., (:(::), :x, :GlobalRef), (:quote, #QuoteNode
                                            :name
                                          ))))
                                  ), (:block,
                                    (:line, 2225, :none),
                                    (:return, (:call, :abstract_eval_constant, :x))
                                  ))
                              ))
                          ))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 2230, :none),
    (:const, (:(=), :_pure_builtins, (:ref, :Any, :tuple, :svec, :fieldtype, :apply_type, :is, :isa, :typeof))),
    (:line, 2233, :none),
    (:const, (:(=), :_pure_builtins_volatile, (:ref, :Any, :getfield, :arrayref))),
    (:line, 2235, :none),
    (:function, (:call, :is_pure_builtin, (:(::), :f, :ANY)), (:block,
        (:line, 2236, :none),
        (:if, (:call, :contains_is, :_pure_builtins, :f), (:block,
            (:line, 2237, :none),
            (:return, true)
          )),
        (:line, 2239, :none),
        (:if, (:call, :contains_is, :_pure_builtins_volatile, :f), (:block,
            (:line, 2240, :none),
            (:return, true)
          )),
        (:line, 2242, :none),
        (:if, (:call, :isa, :f, :IntrinsicFunction), (:block,
            (:line, 2243, :none),
            (:if, (:call, :!, (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                        :pointerref
                      ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                          :pointerset
                        ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                            :ccall
                          ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                              :llvmcall
                            ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                :checked_trunc_sint
                              ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                  :checked_trunc_uint
                                ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                    :checked_fptosi
                                  ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                      :checked_fptoui
                                    ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                        :checked_sadd_int
                                      ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                          :checked_uadd_int
                                        ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                            :checked_ssub_int
                                          ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                              :checked_usub_int
                                            ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                :checked_smul_int
                                              ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                  :checked_umul_int
                                                ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                    :checked_sdiv_int
                                                  ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                      :checked_udiv_int
                                                    ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                        :checked_srem_int
                                                      ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                          :checked_urem_int
                                                        ))), (:||, (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                            :check_top_bit
                                                          ))), (:call, :(===), :f, (:., :Intrinsics, (:quote, #QuoteNode
                                                            :sqrt_llvm
                                                          ))))))))))))))))))))))), (:block,
                (:line, 2263, :none),
                (:return, true)
              ))
          )),
        (:line, 2266, :none),
        (:return, false)
      )),
    (:line, 2269, :none),
    (:function, (:call, :statement_effect_free, (:(::), :e, :ANY), (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 2270, :none),
        (:if, (:call, :isa, :e, :Expr), (:block,
            (:line, 2271, :none),
            (:if, (:call, :(===), (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :(=)
                )), (:block,
                (:line, 2272, :none),
                (:return, (:&&, (:call, :!, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                              :args
                            )), 1), :GlobalRef)), (:call, :effect_free, (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), 2), :linfo, false)))
              ), (:block,
                (:line, 2273, :none),
                (:if, (:call, :(===), (:., :e, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :gotoifnot
                    )), (:block,
                    (:line, 2274, :none),
                    (:return, (:call, :effect_free, (:ref, (:., :e, (:quote, #QuoteNode
                              :args
                            )), 1), :linfo, false))
                  ))
              ))
          ), (:block,
            (:line, 2276, :none),
            (:if, (:||, (:call, :isa, :e, :LabelNode), (:call, :isa, :e, :GotoNode)), (:block,
                (:line, 2277, :none),
                (:return, true)
              ))
          )),
        (:line, 2279, :none),
        (:return, (:call, :effect_free, :e, :linfo, false))
      )),
    (:line, 2285, :none),
    (:function, (:call, :effect_free, (:(::), :e, :ANY), (:(::), :linfo, :LambdaInfo), (:(::), :allow_volatile, :Bool)), (:block,
        (:line, 2286, :none),
        (:if, (:call, :isa, :e, :GlobalRef), (:block,
            (:line, 2287, :none),
            (:return, (:&&, (:call, :isdefined, (:., :e, (:quote, #QuoteNode
                      :mod
                    )), (:., :e, (:quote, #QuoteNode
                      :name
                    ))), (:||, :allow_volatile, (:call, :isconst, (:., :e, (:quote, #QuoteNode
                        :mod
                      )), (:., :e, (:quote, #QuoteNode
                        :name
                      ))))))
          ), (:block,
            (:line, 2288, :none),
            (:if, (:call, :isa, :e, :Symbol), (:block,
                (:line, 2289, :none),
                (:return, :allow_volatile)
              ), (:block,
                (:line, 2290, :none),
                (:if, (:call, :isa, :e, :Expr), (:block,
                    (:line, 2291, :none),
                    (:(=), :e, (:(::), :e, :Expr)),
                    (:line, 2292, :none),
                    (:(=), :head, (:., :e, (:quote, #QuoteNode
                          :head
                        ))),
                    (:line, 2293, :none),
                    (:if, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                            :static_parameter
                          )), (:||, (:call, :(===), :head, (:quote, #QuoteNode
                              :meta
                            )), (:||, (:call, :(===), :head, (:quote, #QuoteNode
                                :line
                              )), (:||, (:call, :(===), :head, (:quote, #QuoteNode
                                  :inbounds
                                )), (:call, :(===), :head, (:quote, #QuoteNode
                                  :boundscheck
                                )))))), (:block,
                        (:line, 2295, :none),
                        (:return, true)
                      )),
                    (:line, 2297, :none),
                    (:(=), :ea, (:., :e, (:quote, #QuoteNode
                          :args
                        ))),
                    (:line, 2298, :none),
                    (:if, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                            :call
                          )), (:&&, (:call, :!, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                                    :args
                                  )), 1), :SSAValue)), (:call, :!, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                                    :args
                                  )), 1), :Slot)))), (:block,
                        (:line, 2299, :none),
                        (:if, (:call, :is_known_call_p, :e, :is_pure_builtin, :linfo), (:block,
                            (:line, 2300, :none),
                            (:if, (:call, :!, :allow_volatile), (:block,
                                (:line, 2301, :none),
                                (:if, (:||, (:call, :is_known_call, :e, :arrayref, :linfo), (:call, :is_known_call, :e, :arraylen, :linfo)), (:block,
                                    (:line, 2302, :none),
                                    (:return, false)
                                  ), (:block,
                                    (:line, 2303, :none),
                                    (:if, (:call, :is_known_call, :e, :getfield, :linfo), (:block,
                                        (:line, 2304, :none),
                                        (:(=), :et, (:call, :exprtype, :e, :linfo)),
                                        (:line, 2305, :none),
                                        (:if, (:&&, (:call, :!, (:call, :isa, :et, :Const)), (:call, :!, (:&&, (:call, :isType, :et), (:call, :isleaftype, :et)))), (:block,
                                            (:line, 2307, :none),
                                            (:(=), :a, (:ref, :ea, 2)),
                                            (:line, 2308, :none),
                                            (:(=), :typ, (:call, :widenconst, (:call, :exprtype, :a, :linfo))),
                                            (:line, 2309, :none),
                                            (:if, (:||, (:call, :!, (:call, :isa, :typ, :DataType)), (:||, (:., :typ, (:quote, #QuoteNode
                                                      :mutable
                                                    )), (:., :typ, (:quote, #QuoteNode
                                                      :abstract
                                                    )))), (:block,
                                                (:line, 2310, :none),
                                                (:return, false)
                                              ))
                                          ))
                                      ))
                                  ))
                              ))
                          ), (:block,
                            (:line, 2317, :none),
                            (:return, false)
                          ))
                      ), (:block,
                        (:line, 2319, :none),
                        (:if, (:call, :(===), :head, (:quote, #QuoteNode
                              :new
                            )), (:block,
                            (:line, 2320, :none),
                            (:if, (:call, :!, :allow_volatile), (:block,
                                (:line, 2321, :none),
                                (:(=), :a, (:ref, :ea, 1)),
                                (:line, 2322, :none),
                                (:(=), :typ, (:call, :widenconst, (:call, :exprtype, :a, :linfo))),
                                (:line, 2323, :none),
                                (:if, (:||, (:call, :!, (:call, :isType, :typ)), (:||, (:call, :!, (:call, :isa, (:ref, (:., (:(::), :typ, :Type), (:quote, #QuoteNode
                                                :parameters
                                              )), 1), :DataType)), (:., (:(::), (:ref, (:., (:(::), :typ, :Type), (:quote, #QuoteNode
                                                :parameters
                                              )), 1), :DataType), (:quote, #QuoteNode
                                          :mutable
                                        )))), (:block,
                                    (:line, 2324, :none),
                                    (:return, false)
                                  ))
                              ))
                          ), (:block,
                            (:line, 2328, :none),
                            (:if, (:call, :(===), :head, (:quote, #QuoteNode
                                  :return
                                )), (:block,), (:block,
                                (:line, 2330, :none),
                                (:if, (:call, :(===), :head, (:quote, #QuoteNode
                                      :the_exception
                                    )), (:block,
                                    (:line, 2331, :none),
                                    (:return, :allow_volatile)
                                  ), (:block,
                                    (:line, 2333, :none),
                                    (:return, false)
                                  ))
                              ))
                          ))
                      )),
                    (:line, 2335, :none),
                    (:for, (:(=), :a, :ea), (:block,
                        (:line, 2336, :none),
                        (:if, (:call, :!, (:call, :effect_free, :a, :linfo, :allow_volatile)), (:block,
                            (:line, 2337, :none),
                            (:return, false)
                          ))
                      ))
                  ), (:block,
                    (:line, 2340, :none),
                    (:if, (:||, (:call, :isa, :e, :LabelNode), (:call, :isa, :e, :GotoNode)), (:block,
                        (:line, 2341, :none),
                        (:return, false)
                      ))
                  ))
              ))
          )),
        (:line, 2343, :none),
        (:return, true)
      )),
    (:line, 2349, :none),
    (:function, (:call, :inline_as_constant, (:(::), :val, :ANY), :argexprs, (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 2351, :none),
        (:(=), :stmts, (:ref, :Any)),
        (:line, 2352, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :argexprs))), (:block,
            (:line, 2353, :none),
            (:(=), :arg, (:ref, :argexprs, :i)),
            (:line, 2354, :none),
            (:if, (:call, :!, (:call, :effect_free, :arg, :linfo, false)), (:block,
                (:line, 2355, :none),
                (:call, :push!, :stmts, :arg)
              ))
          )),
        (:line, 2358, :none),
        (:return, (:tuple, (:call, :QuoteNode, :val), :stmts))
      )),
    (:line, 2361, :none),
    (:function, (:call, :countunionsplit, (:(::), :atypes, (:curly, :Vector, :Any))), (:block,
        (:line, 2362, :none),
        (:(=), :nu, 1),
        (:line, 2363, :none),
        (:for, (:(=), :ti, :atypes), (:block,
            (:line, 2364, :none),
            (:if, (:call, :isa, :ti, :Union), (:block,
                (:line, 2365, :none),
                (:*=, :nu, (:call, :length, (:., (:(::), :ti, :Union), (:quote, #QuoteNode
                        :types
                      ))))
              ))
          )),
        (:line, 2368, :none),
        (:return, :nu)
      )),
    (:line, 2376, :none),
    (:function, (:call, :inlineable, (:(::), :f, :ANY), (:(::), :ft, :ANY), (:(::), :e, :Expr), (:(::), :atypes, (:curly, :Vector, :Any)), (:(::), :sv, :InferenceState), (:(::), :enclosing, :LambdaInfo)), (:block,
        (:line, 2377, :none),
        (:(=), :argexprs, (:., :e, (:quote, #QuoteNode
              :args
            ))),
        (:line, 2379, :none),
        (:if, (:&&, (:||, (:call, :is, :f, :typeassert), (:call, :⊑, :ft, (:call, :typeof, :typeassert))), (:call, :(==), (:call, :length, :atypes), 3)), (:block,
            (:line, 2381, :none),
            (:if, (:&&, (:call, :isType, (:ref, :atypes, 3)), (:&&, (:call, :isleaftype, (:ref, :atypes, 3)), (:call, :⊑, (:ref, :atypes, 2), (:ref, (:., (:ref, :atypes, 3), (:quote, #QuoteNode
                          :parameters
                        )), 1)))), (:block,
                (:line, 2383, :none),
                (:return, (:tuple, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 2), (:tuple,)))
              ))
          )),
        (:line, 2386, :none),
        (:if, (:&&, (:call, :(==), (:call, :length, :atypes), 3), (:call, :is, :f, :unbox)), (:block,
            (:line, 2387, :none),
            (:(=), :at3, (:call, :widenconst, (:ref, :atypes, 3))),
            (:line, 2388, :none),
            (:if, (:&&, (:call, :isa, :at3, :DataType), (:&&, (:call, :!, (:., :at3, (:quote, #QuoteNode
                        :mutable
                      ))), (:&&, (:call, :(!=), (:., :at3, (:quote, #QuoteNode
                          :layout
                        )), :C_NULL), (:call, :datatype_pointerfree, :at3)))), (:block,
                (:line, 2390, :none),
                (:return, (:tuple, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 3), (:tuple,)))
              ))
          )),
        (:line, 2393, :none),
        (:(=), :topmod, (:call, :_topmod, :sv)),
        (:line, 2395, :none),
        (:if, (:., :sv, (:quote, #QuoteNode
              :inlining
            )), (:block,
            (:line, 2396, :none),
            (:if, (:&&, (:call, :isType, (:., :e, (:quote, #QuoteNode
                      :typ
                    ))), (:call, :!, (:call, :has_typevars, (:ref, (:., (:., :e, (:quote, #QuoteNode
                            :typ
                          )), (:quote, #QuoteNode
                          :parameters
                        )), 1), true))), (:block,
                (:line, 2397, :none),
                (:if, (:||, (:call, :is, :f, :apply_type), (:||, (:call, :is, :f, :fieldtype), (:||, (:call, :is, :f, :typeof), (:||, (:call, :istopfunction, :topmod, :f, (:quote, #QuoteNode
                              :typejoin
                            )), (:call, :istopfunction, :topmod, :f, (:quote, #QuoteNode
                              :promote_type
                            )))))), (:block,
                    (:line, 2401, :none),
                    (:if, (:||, (:call, :<, (:call, :length, :argexprs), 2), (:call, :effect_free, (:ref, :argexprs, 2), :enclosing, true)), (:block,
                        (:line, 2402, :none),
                        (:return, (:tuple, (:ref, (:., (:., :e, (:quote, #QuoteNode
                                    :typ
                                  )), (:quote, #QuoteNode
                                  :parameters
                                )), 1), (:tuple,)))
                      ), (:block,
                        (:line, 2404, :none),
                        (:return, (:tuple, (:ref, (:., (:., :e, (:quote, #QuoteNode
                                    :typ
                                  )), (:quote, #QuoteNode
                                  :parameters
                                )), 1), (:ref, :Any, (:ref, :argexprs, 2))))
                      ))
                  ))
              )),
            (:line, 2408, :none),
            (:if, (:&&, (:call, :istopfunction, :topmod, :f, (:quote, #QuoteNode
                    :isbits
                  )), (:&&, (:call, :(==), (:call, :length, :atypes), 2), (:&&, (:call, :isType, (:ref, :atypes, 2)), (:&&, (:call, :effect_free, (:ref, :argexprs, 2), :enclosing, true), (:call, :isleaftype, (:ref, (:., (:ref, :atypes, 2), (:quote, #QuoteNode
                              :parameters
                            )), 1)))))), (:block,
                (:line, 2410, :none),
                (:return, (:tuple, (:call, :isbits, (:ref, (:., (:ref, :atypes, 2), (:quote, #QuoteNode
                            :parameters
                          )), 1)), (:tuple,)))
              )),
            (:line, 2412, :none),
            (:if, (:&&, (:call, :is, :f, (:., :Core, (:quote, #QuoteNode
                      :kwfunc
                    ))), (:&&, (:call, :(==), (:call, :length, :argexprs), 2), (:call, :isa, (:., :e, (:quote, #QuoteNode
                        :typ
                      )), :Const))), (:block,
                (:line, 2413, :none),
                (:if, (:call, :effect_free, (:ref, :argexprs, 2), :enclosing, true), (:block,
                    (:line, 2414, :none),
                    (:return, (:tuple, (:., (:., :e, (:quote, #QuoteNode
                              :typ
                            )), (:quote, #QuoteNode
                            :val
                          )), (:tuple,)))
                  ), (:block,
                    (:line, 2416, :none),
                    (:return, (:tuple, (:., (:., :e, (:quote, #QuoteNode
                              :typ
                            )), (:quote, #QuoteNode
                            :val
                          )), (:ref, :Any, (:ref, :argexprs, 2))))
                  ))
              ))
          )),
        (:line, 2420, :none),
        (:if, (:||, (:call, :isa, :f, :IntrinsicFunction), (:||, (:call, :⊑, :ft, :IntrinsicFunction), (:||, (:call, :isa, :f, :Builtin), (:call, :⊑, :ft, :Builtin)))), (:block,
            (:line, 2422, :none),
            (:return, :NF)
          )),
        (:line, 2425, :none),
        (:local, (:(=), :atype_unlimited, (:call, :argtypes_to_type, :atypes))),
        (:line, 2426, :none),
        (:function, (:call, :invoke_NF), (:block,
            (:line, 2428, :none),
            (:local, (:(=), :nu, (:call, :countunionsplit, :atypes))),
            (:line, 2429, :none),
            (:&&, (:call, :>, :nu, :MAX_UNION_SPLITTING), (:return, :NF)),
            (:line, 2431, :none),
            (:if, (:call, :>, :nu, 1), (:block,
                (:line, 2432, :none),
                (:local, (:(=), :spec_hit, :nothing)),
                (:line, 2433, :none),
                (:local, (:(=), :spec_miss, :nothing)),
                (:line, 2434, :none),
                (:local, (:(=), :error_label, :nothing)),
                (:line, 2435, :none),
                (:local, (:(=), :linfo_var, (:call, :add_slot!, :enclosing, :LambdaInfo, false))),
                (:line, 2436, :none),
                (:local, (:(=), :ex, (:call, :copy, :e))),
                (:line, 2437, :none),
                (:local, (:(=), :stmts, (:vect,))),
                (:line, 2438, :none),
                (:local, (:(=), :arg_hoisted, false)),
                (:line, 2439, :none),
                (:for, (:(=), :i, (:(:), (:call, :length, :atypes), -1, 1)), (:block,
                    (:line, 2439, :none),
                    (:local, :i),
                    (:line, 2440, :none),
                    (:local, (:(=), :ti, (:ref, :atypes, :i))),
                    (:line, 2441, :none),
                    (:if, (:||, :arg_hoisted, (:call, :isa, :ti, :Union)), (:block,
                        (:line, 2442, :none),
                        (:(=), :aei, (:ref, (:., :ex, (:quote, #QuoteNode
                                :args
                              )), :i)),
                        (:line, 2443, :none),
                        (:if, (:call, :!, (:call, :effect_free, :aei, :enclosing, false)), (:block,
                            (:line, 2444, :none),
                            (:(=), :arg_hoisted, true),
                            (:line, 2445, :none),
                            (:(=), :newvar, (:call, :newvar!, :sv, :ti)),
                            (:line, 2446, :none),
                            (:call, :insert!, :stmts, 1, (:call, :Expr, (:quote, #QuoteNode
                                  :(=)
                                ), :newvar, :aei)),
                            (:line, 2447, :none),
                            (:(=), (:ref, (:., :ex, (:quote, #QuoteNode
                                    :args
                                  )), :i), :newvar)
                          ))
                      ))
                  )),
                (:line, 2451, :none),
                (:function, (:call, :splitunion, (:(::), :atypes, (:curly, :Vector, :Any)), (:(::), :i, :Int)), (:block,
                    (:line, 2452, :none),
                    (:if, (:call, :(==), :i, 0), (:block,
                        (:line, 2453, :none),
                        (:local, (:(=), :sig, (:call, :argtypes_to_type, :atypes))),
                        (:line, 2454, :none),
                        (:local, (:(=), :li, (:ccall, (:quote, #QuoteNode
                                :jl_get_spec_lambda
                              ), :Any, (:tuple, :Any), :sig))),
                        (:line, 2455, :none),
                        (:&&, (:call, :(===), :li, :nothing), (:return, false)),
                        (:line, 2456, :none),
                        (:local, (:(=), :stmt, (:vect,))),
                        (:line, 2457, :none),
                        (:call, :push!, :stmt, (:call, :Expr, (:quote, #QuoteNode
                              :(=)
                            ), :linfo_var, :li)),
                        (:line, 2458, :none),
                        (:&&, (:call, :(===), :spec_hit, :nothing), (:(=), :spec_hit, (:call, :genlabel, :sv))),
                        (:line, 2459, :none),
                        (:call, :push!, :stmt, (:call, :GotoNode, (:., :spec_hit, (:quote, #QuoteNode
                                :label
                              )))),
                        (:line, 2460, :none),
                        (:return, :stmt)
                      ), (:block,
                        (:line, 2462, :none),
                        (:local, (:(=), :ti, (:ref, :atypes, :i))),
                        (:line, 2463, :none),
                        (:if, (:call, :isa, :ti, :Union), (:block,
                            (:line, 2464, :none),
                            (:local, (:(=), :all, true)),
                            (:line, 2465, :none),
                            (:local, (:(=), :stmts, (:vect,))),
                            (:line, 2466, :none),
                            (:local, (:(=), :aei, (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), :i))),
                            (:line, 2467, :none),
                            (:for, (:(=), :ty, (:., (:(::), :ti, :Union), (:quote, #QuoteNode
                                    :types
                                  ))), (:block,
                                (:line, 2467, :none),
                                (:local, :ty),
                                (:line, 2468, :none),
                                (:(=), (:ref, :atypes, :i), :ty),
                                (:line, 2469, :none),
                                (:local, (:(=), :match, (:call, :splitunion, :atypes, (:call, :-, :i, 1)))),
                                (:line, 2470, :none),
                                (:if, (:call, :(!==), :match, false), (:block,
                                    (:line, 2471, :none),
                                    (:(=), :after, (:call, :genlabel, :sv)),
                                    (:line, 2472, :none),
                                    (:call, :unshift!, :match, (:call, :Expr, (:quote, #QuoteNode
                                          :gotoifnot
                                        ), (:call, :Expr, (:quote, #QuoteNode
                                            :call
                                          ), (:call, :GlobalRef, :Core, (:quote, #QuoteNode
                                              :isa
                                            )), :aei, :ty), (:., :after, (:quote, #QuoteNode
                                            :label
                                          )))),
                                    (:line, 2473, :none),
                                    (:call, :append!, :stmts, :match),
                                    (:line, 2474, :none),
                                    (:call, :push!, :stmts, :after)
                                  ), (:block,
                                    (:line, 2476, :none),
                                    (:(=), :all, false)
                                  ))
                              )),
                            (:line, 2479, :none),
                            (:if, (:&&, :UNION_SPLIT_MISMATCH_ERROR, :all), (:block,
                                (:line, 2480, :none),
                                (:&&, (:call, :(===), :error_label, :nothing), (:(=), :error_label, (:call, :genlabel, :sv))),
                                (:line, 2481, :none),
                                (:call, :push!, :stmts, (:call, :GotoNode, (:., :error_label, (:quote, #QuoteNode
                                        :label
                                      ))))
                              ), (:block,
                                (:line, 2483, :none),
                                (:&&, (:call, :(===), :spec_miss, :nothing), (:(=), :spec_miss, (:call, :genlabel, :sv))),
                                (:line, 2484, :none),
                                (:call, :push!, :stmts, (:call, :GotoNode, (:., :spec_miss, (:quote, #QuoteNode
                                        :label
                                      ))))
                              )),
                            (:line, 2486, :none),
                            (:(=), (:ref, :atypes, :i), :ti),
                            (:line, 2487, :none),
                            (:return, (:if, (:call, :isempty, :stmts), false, :stmts))
                          ), (:block,
                            (:line, 2489, :none),
                            (:return, (:call, :splitunion, :atypes, (:call, :-, :i, 1)))
                          ))
                      ))
                  )),
                (:line, 2493, :none),
                (:local, (:(=), :match, (:call, :splitunion, :atypes, (:call, :length, :atypes)))),
                (:line, 2494, :none),
                (:if, (:&&, (:call, :(!==), :match, false), (:call, :(!==), :spec_hit, :nothing)), (:block,
                    (:line, 2495, :none),
                    (:call, :append!, :stmts, :match),
                    (:line, 2496, :none),
                    (:if, (:call, :(!==), :error_label, :nothing), (:block,
                        (:line, 2497, :none),
                        (:call, :push!, :stmts, :error_label),
                        (:line, 2498, :none),
                        (:call, :push!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                              :call
                            ), (:call, :GlobalRef, (:call, :_topmod, (:., :sv, (:quote, #QuoteNode
                                    :mod
                                  ))), (:quote, #QuoteNode
                                :error
                              )), "error in type inference due to #265"))
                      )),
                    (:line, 2500, :none),
                    (:local, :ret_var, :merge),
                    (:line, 2501, :none),
                    (:if, (:call, :(!==), :spec_miss, :nothing), (:block,
                        (:line, 2502, :none),
                        (:(=), :ret_var, (:call, :add_slot!, :enclosing, (:., :ex, (:quote, #QuoteNode
                                :typ
                              )), false)),
                        (:line, 2503, :none),
                        (:(=), :merge, (:call, :genlabel, :sv)),
                        (:line, 2504, :none),
                        (:call, :push!, :stmts, :spec_miss),
                        (:line, 2505, :none),
                        (:call, :push!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                              :(=)
                            ), :ret_var, :ex)),
                        (:line, 2506, :none),
                        (:call, :push!, :stmts, (:call, :GotoNode, (:., :merge, (:quote, #QuoteNode
                                :label
                              ))))
                      ), (:block,
                        (:line, 2508, :none),
                        (:(=), :ret_var, (:call, :newvar!, :sv, (:., :ex, (:quote, #QuoteNode
                                :typ
                              ))))
                      )),
                    (:line, 2510, :none),
                    (:call, :push!, :stmts, :spec_hit),
                    (:line, 2511, :none),
                    (:(=), :ex, (:call, :copy, :ex)),
                    (:line, 2512, :none),
                    (:(=), (:., :ex, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :invoke
                      )),
                    (:line, 2513, :none),
                    (:call, :unshift!, (:., :ex, (:quote, #QuoteNode
                          :args
                        )), :linfo_var),
                    (:line, 2514, :none),
                    (:call, :push!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                          :(=)
                        ), :ret_var, :ex)),
                    (:line, 2515, :none),
                    (:if, (:call, :(!==), :spec_miss, :nothing), (:block,
                        (:line, 2516, :none),
                        (:call, :push!, :stmts, :merge)
                      )),
                    (:line, 2519, :none),
                    (:return, (:tuple, :ret_var, :stmts))
                  ))
              ), (:block,
                (:line, 2522, :none),
                (:local, (:(=), :cache_linfo, (:ccall, (:quote, #QuoteNode
                        :jl_get_spec_lambda
                      ), :Any, (:tuple, :Any), :atype_unlimited))),
                (:line, 2523, :none),
                (:&&, (:call, :(===), :cache_linfo, :nothing), (:return, :NF)),
                (:line, 2524, :none),
                (:(=), (:., :e, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :invoke
                  )),
                (:line, 2525, :none),
                (:call, :unshift!, (:., :e, (:quote, #QuoteNode
                      :args
                    )), :cache_linfo),
                (:line, 2526, :none),
                (:return, :e)
              )),
            (:line, 2528, :none),
            (:return, :NF)
          )),
        (:line, 2530, :none),
        (:if, (:call, :!, (:., :sv, (:quote, #QuoteNode
                :inlining
              ))), (:block,
            (:line, 2531, :none),
            (:return, (:call, :invoke_NF))
          )),
        (:line, 2534, :none),
        (:if, (:call, :>, (:call, :-, (:call, :length, (:., :atype_unlimited, (:quote, #QuoteNode
                    :parameters
                  ))), 1), :MAX_TUPLETYPE_LEN), (:block,
            (:line, 2535, :none),
            (:(=), :atype, (:call, :limit_tuple_type, :atype_unlimited))
          ), (:block,
            (:line, 2537, :none),
            (:(=), :atype, :atype_unlimited)
          )),
        (:line, 2539, :none),
        (:(=), :meth, (:call, :_methods_by_ftype, :atype, 1)),
        (:line, 2540, :none),
        (:if, (:||, (:call, :(===), :meth, false), (:call, :(!=), (:call, :length, :meth), 1)), (:block,
            (:line, 2541, :none),
            (:return, (:call, :invoke_NF))
          )),
        (:line, 2543, :none),
        (:(=), :meth, (:(::), (:ref, :meth, 1), :SimpleVector)),
        (:line, 2544, :none),
        (:(=), :metharg, (:(::), (:ref, :meth, 1), :Type)),
        (:line, 2545, :none),
        (:(=), :methsp, (:ref, :meth, 2)),
        (:line, 2546, :none),
        (:(=), :method, (:(::), (:ref, :meth, 3), :Method)),
        (:line, 2548, :none),
        (:if, (:&&, (:call, :isa, :f, (:call, :widenconst, :ft)), (:&&, (:call, :!, (:., :method, (:quote, #QuoteNode
                    :isstaged
                  ))), (:&&, (:||, (:., (:., :method, (:quote, #QuoteNode
                        :lambda_template
                      )), (:quote, #QuoteNode
                      :pure
                    )), (:call, :(===), :f, :return_type)), (:||, (:call, :isType, (:., :e, (:quote, #QuoteNode
                        :typ
                      ))), (:call, :isa, (:., :e, (:quote, #QuoteNode
                        :typ
                      )), :Const))))), (:block,
            (:line, 2550, :none),
            (:if, (:call, :isType, (:., :e, (:quote, #QuoteNode
                    :typ
                  ))), (:block,
                (:line, 2551, :none),
                (:if, (:call, :!, (:call, :has_typevars, (:ref, (:., (:., :e, (:quote, #QuoteNode
                              :typ
                            )), (:quote, #QuoteNode
                            :parameters
                          )), 1))), (:block,
                    (:line, 2552, :none),
                    (:return, (:call, :inline_as_constant, (:ref, (:., (:., :e, (:quote, #QuoteNode
                                :typ
                              )), (:quote, #QuoteNode
                              :parameters
                            )), 1), :argexprs, :enclosing))
                  ))
              ), (:block,
                (:line, 2555, :none),
                (:call, :assert, (:call, :isa, (:., :e, (:quote, #QuoteNode
                        :typ
                      )), :Const)),
                (:line, 2556, :none),
                (:return, (:call, :inline_as_constant, (:., (:., :e, (:quote, #QuoteNode
                          :typ
                        )), (:quote, #QuoteNode
                        :val
                      )), :argexprs, :enclosing))
              ))
          )),
        (:line, 2560, :none),
        (:(=), :methsig, (:., :method, (:quote, #QuoteNode
              :sig
            ))),
        (:line, 2561, :none),
        (:if, (:call, :!, (:<:, :atype, :metharg)), (:block,
            (:line, 2562, :none),
            (:return, (:call, :invoke_NF))
          )),
        (:line, 2565, :none),
        (:(=), :na, (:., (:., :method, (:quote, #QuoteNode
                :lambda_template
              )), (:quote, #QuoteNode
              :nargs
            ))),
        (:line, 2567, :none),
        (:(=), :isva, false),
        (:line, 2568, :none),
        (:if, (:&&, (:call, :>, :na, 0), (:., (:., :method, (:quote, #QuoteNode
                  :lambda_template
                )), (:quote, #QuoteNode
                :isva
              ))), (:block,
            (:line, 2569, :none),
            (:macrocall, Symbol("@assert"), (:call, :(>=), (:call, :length, :argexprs), (:call, :-, :na, 1))),
            (:line, 2571, :none),
            (:(=), :vararg, (:call, :mk_tuplecall, (:ref, :argexprs, (:(:), :na, :end)), :sv)),
            (:line, 2572, :none),
            (:(=), :argexprs, (:ref, :Any, (:..., (:ref, :argexprs, (:(:), 1, (:call, :-, :na, 1)))), :vararg)),
            (:line, 2573, :none),
            (:(=), :isva, true)
          ), (:block,
            (:line, 2574, :none),
            (:if, (:call, :(!=), :na, (:call, :length, :argexprs)), (:block,
                (:line, 2579, :none),
                (:return, :NF)
              ))
          )),
        (:line, 2582, :none),
        (:macrocall, Symbol("@assert"), (:call, :(==), :na, (:call, :length, :argexprs))),
        (:line, 2584, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :methsp))), (:block,
            (:line, 2585, :none),
            (:(=), :si, (:ref, :methsp, :i)),
            (:line, 2586, :none),
            (:&&, (:call, :isa, :si, :TypeVar), (:return, :NF))
          )),
        (:line, 2589, :none),
        (:(=), (:tuple, :linfo, :ty, :inferred), (:call, :typeinf, :method, :metharg, :methsp, false)),
        (:line, 2590, :none),
        (:if, (:||, (:call, :(===), :linfo, :nothing), (:call, :!, :inferred)), (:block,
            (:line, 2591, :none),
            (:return, (:call, :invoke_NF))
          )),
        (:line, 2593, :none),
        (:if, (:&&, (:call, :(!==), :linfo, :nothing), (:call, :(==), (:., :linfo, (:quote, #QuoteNode
                  :jlcall_api
                )), 2)), (:block,
            (:line, 2595, :none),
            (:return, (:call, :inline_as_constant, (:., :linfo, (:quote, #QuoteNode
                    :constval
                  )), :argexprs, :enclosing))
          ), (:block,
            (:line, 2596, :none),
            (:if, (:&&, (:call, :(!==), :linfo, :nothing), (:call, :!, (:., :linfo, (:quote, #QuoteNode
                      :inlineable
                    )))), (:block,
                (:line, 2597, :none),
                (:return, (:call, :invoke_NF))
              ), (:block,
                (:line, 2598, :none),
                (:if, (:||, (:call, :(===), :linfo, :nothing), (:call, :(===), (:., :linfo, (:quote, #QuoteNode
                          :code
                        )), :nothing)), (:block,
                    (:line, 2599, :none),
                    (:(=), (:tuple, :linfo, :ty, :inferred), (:call, :typeinf, :method, :metharg, :methsp, true))
                  ))
              ))
          )),
        (:line, 2601, :none),
        (:if, (:||, (:call, :(===), :linfo, :nothing), (:||, (:call, :!, :inferred), (:||, (:call, :!, (:., :linfo, (:quote, #QuoteNode
                      :inlineable
                    ))), (:call, :(===), (:(=), :ast, (:., :linfo, (:quote, #QuoteNode
                        :code
                      ))), :nothing)))), (:block,
            (:line, 2602, :none),
            (:return, (:call, :invoke_NF))
          )),
        (:line, 2605, :none),
        (:(=), :spvals, (:ref, :Any)),
        (:line, 2606, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :methsp))), (:block,
            (:line, 2607, :none),
            (:call, :push!, :spvals, (:ref, :methsp, :i))
          )),
        (:line, 2609, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :spvals))), (:block,
            (:line, 2610, :none),
            (:(=), :si, (:ref, :spvals, :i)),
            (:line, 2611, :none),
            (:if, (:||, (:call, :isa, :si, :Symbol), (:||, (:call, :isa, :si, :SSAValue), (:call, :isa, :si, :Slot))), (:block,
                (:line, 2612, :none),
                (:(=), (:ref, :spvals, :i), (:call, :QuoteNode, :si))
              ))
          )),
        (:line, 2616, :none),
        (:(=), :methargs, (:., :metharg, (:quote, #QuoteNode
              :parameters
            ))),
        (:line, 2617, :none),
        (:(=), :nm, (:call, :length, :methargs)),
        (:line, 2619, :none),
        (:if, (:call, :!, (:call, :isa, :ast, (:curly, :Array, :Any, 1))), (:block,
            (:line, 2620, :none),
            (:(=), :ast, (:ccall, (:quote, #QuoteNode
                  :jl_uncompress_ast
                ), :Any, (:tuple, :Any, :Any), :linfo, :ast))
          ), (:block,
            (:line, 2622, :none),
            (:(=), :ast, (:call, :copy_exprargs, :ast))
          )),
        (:line, 2624, :none),
        (:(=), :ast, (:(::), :ast, (:curly, :Array, :Any, 1))),
        (:line, 2626, :none),
        (:(=), :body, (:call, :Expr, (:quote, #QuoteNode
              :block
            ))),
        (:line, 2627, :none),
        (:(=), (:., :body, (:quote, #QuoteNode
              :args
            )), :ast),
        (:line, 2628, :none),
        (:(=), (:tuple, :propagate_inbounds, :_), (:call, :popmeta!, :body, (:quote, #QuoteNode
              :propagate_inbounds
            ))),
        (:line, 2631, :none),
        (:(=), :stmts, (:ref, :Any)),
        (:line, 2632, :none),
        (:(=), :prelude_stmts, (:ref, :Any)),
        (:line, 2633, :none),
        (:(=), :stmts_free, true),
        (:line, 2635, :none),
        (:for, (:(=), :i, (:(:), :na, -1, 1)), (:block,
            (:line, 2637, :none),
            (:(=), :aei, (:ref, :argexprs, :i)),
            (:line, 2638, :none),
            (:(=), :aeitype, (:(=), :argtype, (:call, :widenconst, (:call, :exprtype, :aei, :enclosing)))),
            (:line, 2643, :none),
            (:(=), :affect_free, :stmts_free),
            (:line, 2644, :none),
            (:(=), :occ, 0),
            (:line, 2645, :none),
            (:for, (:(=), :j, (:(:), (:call, :length, (:., :body, (:quote, #QuoteNode
                        :args
                      ))), -1, 1)), (:block,
                (:line, 2646, :none),
                (:(=), :b, (:ref, (:., :body, (:quote, #QuoteNode
                        :args
                      )), :j)),
                (:line, 2647, :none),
                (:if, (:call, :<, :occ, 6), (:block,
                    (:line, 2648, :none),
                    (:+=, :occ, (:call, :occurs_more, :b, (:->, :x, (:block,
                            (:line, 2648, :none),
                            (:&&, (:call, :isa, :x, :Slot), (:call, :(==), (:., :x, (:quote, #QuoteNode
                                    :id
                                  )), :i))
                          )), 6))
                  )),
                (:line, 2650, :none),
                (:if, (:&&, (:call, :>, :occ, 0), (:&&, :affect_free, (:call, :!, (:call, :effect_free, :b, :linfo, true)))), (:block,
                    (:line, 2652, :none),
                    (:(=), :affect_free, false)
                  )),
                (:line, 2654, :none),
                (:if, (:&&, (:call, :>, :occ, 5), (:call, :!, :affect_free)), (:block,
                    (:line, 2655, :none),
                    (:break,)
                  ))
              )),
            (:line, 2658, :none),
            (:(=), :free, (:call, :effect_free, :aei, :enclosing, true)),
            (:line, 2659, :none),
            (:if, (:||, (:&&, (:call, :(==), :occ, 0), (:call, :is, :aeitype, :Bottom)), (:||, (:&&, (:call, :>, :occ, 1), (:call, :!, (:call, :inline_worthy, :aei, (:call, :*, :occ, 2000)))), (:||, (:&&, :affect_free, (:call, :!, :free)), (:&&, (:call, :!, :affect_free), (:call, :!, (:call, :effect_free, :aei, :enclosing, false)))))), (:block,
                (:line, 2661, :none),
                (:if, (:call, :(!=), :occ, 0), (:block,
                    (:line, 2662, :none),
                    (:(=), :vnew, (:call, :newvar!, :sv, :aeitype)),
                    (:line, 2663, :none),
                    (:(=), (:ref, :argexprs, :i), :vnew),
                    (:line, 2664, :none),
                    (:call, :unshift!, :prelude_stmts, (:call, :Expr, (:quote, #QuoteNode
                          :(=)
                        ), :vnew, :aei)),
                    (:line, 2665, :none),
                    (:&=, :stmts_free, :free)
                  ), (:block,
                    (:line, 2666, :none),
                    (:if, (:&&, (:call, :!, :free), (:call, :!, (:call, :isType, :aeitype))), (:block,
                        (:line, 2667, :none),
                        (:call, :unshift!, :prelude_stmts, :aei),
                        (:line, 2668, :none),
                        (:(=), :stmts_free, false)
                      ))
                  ))
              ))
          )),
        (:line, 2674, :none),
        (:(=), :ssavalue_types, (:., :linfo, (:quote, #QuoteNode
              :ssavaluetypes
            ))),
        (:line, 2675, :none),
        (:if, (:call, :!, (:call, :isempty, :ssavalue_types)), (:block,
            (:line, 2676, :none),
            (:(=), :incr, (:call, :length, (:., (:., :sv, (:quote, #QuoteNode
                      :linfo
                    )), (:quote, #QuoteNode
                    :ssavaluetypes
                  )))),
            (:line, 2677, :none),
            (:if, (:call, :(!=), :incr, 0), (:block,
                (:line, 2678, :none),
                (:(=), :body, (:call, :ssavalue_increment, :body, :incr))
              )),
            (:line, 2680, :none),
            (:call, :append!, (:., (:., :sv, (:quote, #QuoteNode
                    :linfo
                  )), (:quote, #QuoteNode
                  :ssavaluetypes
                )), :ssavalue_types)
          )),
        (:line, 2684, :none),
        (:(=), :body, (:call, :substitute!, :body, :na, :argexprs, :spvals, (:call, :-, (:call, :length, (:., :enclosing, (:quote, #QuoteNode
                    :slotnames
                  ))), :na))),
        (:line, 2685, :none),
        (:call, :append!, (:., :enclosing, (:quote, #QuoteNode
              :slotnames
            )), (:ref, (:., :linfo, (:quote, #QuoteNode
                :slotnames
              )), (:(:), (:call, :+, :na, 1), :end))),
        (:line, 2686, :none),
        (:call, :append!, (:., :enclosing, (:quote, #QuoteNode
              :slottypes
            )), (:ref, (:., :linfo, (:quote, #QuoteNode
                :slottypes
              )), (:(:), (:call, :+, :na, 1), :end))),
        (:line, 2687, :none),
        (:call, :append!, (:., :enclosing, (:quote, #QuoteNode
              :slotflags
            )), (:ref, (:., :linfo, (:quote, #QuoteNode
                :slotflags
              )), (:(:), (:call, :+, :na, 1), :end))),
        (:line, 2691, :none),
        (:(=), :newlabels, (:call, :zeros, :Int, (:call, :+, (:call, :label_counter, (:., :body, (:quote, #QuoteNode
                    :args
                  ))), 1))),
        (:line, 2692, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :body, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 2693, :none),
            (:(=), :a, (:ref, (:., :body, (:quote, #QuoteNode
                    :args
                  )), :i)),
            (:line, 2694, :none),
            (:if, (:call, :isa, :a, :LabelNode), (:block,
                (:line, 2695, :none),
                (:(=), :a, (:(::), :a, :LabelNode)),
                (:line, 2696, :none),
                (:(=), :newlabel, (:call, :genlabel, :sv)),
                (:line, 2697, :none),
                (:(=), (:ref, :newlabels, (:call, :+, (:., :a, (:quote, #QuoteNode
                          :label
                        )), 1)), (:., :newlabel, (:quote, #QuoteNode
                      :label
                    ))),
                (:line, 2698, :none),
                (:(=), (:ref, (:., :body, (:quote, #QuoteNode
                        :args
                      )), :i), :newlabel)
              ))
          )),
        (:line, 2701, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :body, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 2702, :none),
            (:(=), :a, (:ref, (:., :body, (:quote, #QuoteNode
                    :args
                  )), :i)),
            (:line, 2703, :none),
            (:if, (:call, :isa, :a, :GotoNode), (:block,
                (:line, 2704, :none),
                (:(=), :a, (:(::), :a, :GotoNode)),
                (:line, 2705, :none),
                (:(=), (:ref, (:., :body, (:quote, #QuoteNode
                        :args
                      )), :i), (:call, :GotoNode, (:ref, :newlabels, (:call, :+, (:., :a, (:quote, #QuoteNode
                            :label
                          )), 1))))
              ), (:block,
                (:line, 2706, :none),
                (:if, (:call, :isa, :a, :Expr), (:block,
                    (:line, 2707, :none),
                    (:(=), :a, (:(::), :a, :Expr)),
                    (:line, 2708, :none),
                    (:if, (:call, :(===), (:., :a, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :enter
                        )), (:block,
                        (:line, 2709, :none),
                        (:(=), (:ref, (:., :a, (:quote, #QuoteNode
                                :args
                              )), 1), (:ref, :newlabels, (:call, :+, (:ref, (:., :a, (:quote, #QuoteNode
                                    :args
                                  )), 1), 1)))
                      ), (:block,
                        (:line, 2710, :none),
                        (:if, (:call, :(===), (:., :a, (:quote, #QuoteNode
                                :head
                              )), (:quote, #QuoteNode
                              :gotoifnot
                            )), (:block,
                            (:line, 2711, :none),
                            (:(=), (:ref, (:., :a, (:quote, #QuoteNode
                                    :args
                                  )), 2), (:ref, :newlabels, (:call, :+, (:ref, (:., :a, (:quote, #QuoteNode
                                        :args
                                      )), 2), 1)))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 2717, :none),
        (:(=), :retstmt, (:call, :genlabel, :sv)),
        (:line, 2718, :none),
        (:(=), :rettype, (:., :linfo, (:quote, #QuoteNode
              :rettype
            ))),
        (:line, 2719, :none),
        (:local, :retval),
        (:line, 2720, :none),
        (:(=), :multiret, false),
        (:line, 2721, :none),
        (:(=), :lastexpr, (:call, :pop!, (:., :body, (:quote, #QuoteNode
                :args
              )))),
        (:line, 2722, :none),
        (:if, (:call, :isa, :lastexpr, :LabelNode), (:block,
            (:line, 2723, :none),
            (:call, :push!, (:., :body, (:quote, #QuoteNode
                  :args
                )), :lastexpr),
            (:line, 2724, :none),
            (:call, :push!, (:., :body, (:quote, #QuoteNode
                  :args
                )), (:call, :Expr, (:quote, #QuoteNode
                  :call
                ), (:call, :GlobalRef, (:call, :_topmod, (:., :sv, (:quote, #QuoteNode
                        :mod
                      ))), (:quote, #QuoteNode
                    :error
                  )), "fatal error in type inference")),
            (:line, 2725, :none),
            (:(=), :lastexpr, :nothing)
          ), (:block,
            (:line, 2726, :none),
            (:if, (:call, :!, (:&&, (:call, :isa, :lastexpr, :Expr), (:call, :(===), (:., :lastexpr, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :return
                    )))), (:block,
                (:line, 2728, :none),
                (:call, :push!, (:., :body, (:quote, #QuoteNode
                      :args
                    )), :lastexpr),
                (:line, 2729, :none),
                (:(=), :lastexpr, :nothing)
              ))
          )),
        (:line, 2731, :none),
        (:for, (:(=), :a, (:., :body, (:quote, #QuoteNode
                :args
              ))), (:block,
            (:line, 2732, :none),
            (:call, :push!, :stmts, :a),
            (:line, 2733, :none),
            (:if, (:call, :isa, :a, :Expr), (:block,
                (:line, 2734, :none),
                (:(=), :a, (:(::), :a, :Expr)),
                (:line, 2735, :none),
                (:if, (:call, :(===), (:., :a, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :return
                    )), (:block,
                    (:line, 2736, :none),
                    (:if, (:call, :!, :multiret), (:block,
                        (:line, 2738, :none),
                        (:(=), :retval, (:call, :add_slot!, :enclosing, :rettype, false))
                      )),
                    (:line, 2740, :none),
                    (:(=), :multiret, true),
                    (:line, 2741, :none),
                    (:call, :unshift!, (:., :a, (:quote, #QuoteNode
                          :args
                        )), :retval),
                    (:line, 2742, :none),
                    (:(=), (:., :a, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :(=)
                      )),
                    (:line, 2743, :none),
                    (:call, :push!, :stmts, (:call, :GotoNode, (:., :retstmt, (:quote, #QuoteNode
                            :label
                          ))))
                  ))
              ))
          )),
        (:line, 2748, :none),
        (:if, :multiret, (:block,
            (:line, 2749, :none),
            (:if, (:call, :(!==), :lastexpr, :nothing), (:block,
                (:line, 2750, :none),
                (:call, :unshift!, (:., :lastexpr, (:quote, #QuoteNode
                      :args
                    )), :retval),
                (:line, 2751, :none),
                (:(=), (:., :lastexpr, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :(=)
                  )),
                (:line, 2752, :none),
                (:call, :push!, :stmts, :lastexpr)
              )),
            (:line, 2754, :none),
            (:call, :push!, :stmts, :retstmt),
            (:line, 2755, :none),
            (:(=), :expr, :retval)
          ), (:block,
            (:line, 2758, :none),
            (:if, (:call, :(===), :lastexpr, :nothing), (:block,
                (:line, 2759, :none),
                (:(=), :expr, :nothing)
              ), (:block,
                (:line, 2761, :none),
                (:(=), :expr, (:ref, (:., :lastexpr, (:quote, #QuoteNode
                        :args
                      )), 1))
              ))
          )),
        (:line, 2765, :none),
        (:if, (:call, :!, (:call, :isempty, :stmts)), (:block,
            (:line, 2766, :none),
            (:if, (:call, :all, (:->, :stmt, (:block,
                    (:line, 2766, :none),
                    (:||, (:&&, (:call, :isa, :stmt, :Expr), (:call, :(===), (:., :stmt, (:quote, #QuoteNode
                              :head
                            )), (:quote, #QuoteNode
                            :line
                          ))), (:||, (:call, :isa, :stmt, :LineNumberNode), (:call, :(===), :stmt, :nothing)))
                  )), :stmts), (:block,
                (:line, 2768, :none),
                (:call, :empty!, :stmts)
              ), (:block,
                (:line, 2770, :none),
                (:local, (:(=), (:(::), :line, :Int), (:., (:., :linfo, (:quote, #QuoteNode
                          :def
                        )), (:quote, #QuoteNode
                        :line
                      )))),
                (:line, 2771, :none),
                (:if, (:call, :isa, (:ref, :stmts, 1), :LineNumberNode), (:block,
                    (:line, 2772, :none),
                    (:(=), :line, (:., (:call, :shift!, :stmts), (:quote, #QuoteNode
                          :line
                        )))
                  )),
                (:line, 2774, :none),
                (:call, :unshift!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                      :meta
                    ), (:quote, #QuoteNode
                      :push_loc
                    ), (:., (:., :linfo, (:quote, #QuoteNode
                          :def
                        )), (:quote, #QuoteNode
                        :file
                      )), (:., (:., :linfo, (:quote, #QuoteNode
                          :def
                        )), (:quote, #QuoteNode
                        :name
                      )), :line)),
                (:line, 2775, :none),
                (:&&, (:call, :isa, (:ref, :stmts, :end), :LineNumberNode), (:call, :pop!, :stmts)),
                (:line, 2776, :none),
                (:call, :push!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                      :meta
                    ), (:quote, #QuoteNode
                      :pop_loc
                    )))
              ))
          )),
        (:line, 2779, :none),
        (:if, (:&&, (:call, :!, (:call, :isempty, :stmts)), (:call, :!, :propagate_inbounds)), (:block,
            (:line, 2781, :none),
            (:(=), (:tuple, :s_1, :s_end), (:tuple, (:ref, :stmts, 1), (:ref, :stmts, :end))),
            (:line, 2782, :none),
            (:(=), :i, 2),
            (:line, 2783, :none),
            (:while, (:&&, (:call, :>, (:call, :length, :stmts), :i), (:||, (:&&, (:call, :isa, :s_1, :Expr), (:call, :(===), (:., :s_1, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :line
                      ))), (:call, :isa, :s_1, :LineNumberNode))), (:block,
                (:line, 2784, :none),
                (:(=), :s_1, (:ref, :stmts, :i)),
                (:line, 2785, :none),
                (:+=, :i, 1)
              )),
            (:line, 2787, :none),
            (:if, (:&&, (:call, :isa, :s_1, :Expr), (:&&, (:call, :(===), (:., :s_1, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :inbounds
                    )), (:&&, (:call, :(===), (:ref, (:., :s_1, (:quote, #QuoteNode
                            :args
                          )), 1), false), (:&&, (:call, :isa, :s_end, :Expr), (:&&, (:call, :(===), (:., :s_end, (:quote, #QuoteNode
                              :head
                            )), (:quote, #QuoteNode
                            :inbounds
                          )), (:call, :(===), (:ref, (:., :s_end, (:quote, #QuoteNode
                                :args
                              )), 1), (:quote, #QuoteNode
                            :pop
                          ))))))), (:block,), (:block,
                (:line, 2791, :none),
                (:call, :unshift!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                      :inbounds
                    ), false)),
                (:line, 2792, :none),
                (:call, :push!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                      :inbounds
                    ), (:quote, #QuoteNode
                      :pop
                    )))
              ))
          )),
        (:line, 2796, :none),
        (:if, (:call, :isa, :expr, :Expr), (:block,
            (:line, 2797, :none),
            (:(=), :old_t, (:., :e, (:quote, #QuoteNode
                  :typ
                ))),
            (:line, 2798, :none),
            (:if, (:call, :⊑, :old_t, (:., :expr, (:quote, #QuoteNode
                    :typ
                  ))), (:block,
                (:line, 2799, :none),
                (:(=), (:., :expr, (:quote, #QuoteNode
                      :typ
                    )), :old_t)
              ))
          )),
        (:line, 2802, :none),
        (:if, (:call, :!, (:call, :isempty, :prelude_stmts)), (:block,
            (:line, 2803, :none),
            (:(=), :stmts, (:call, :append!, :prelude_stmts, :stmts))
          )),
        (:line, 2805, :none),
        (:return, (:tuple, :expr, :stmts))
      )),
    (:line, 2808, :none),
    (:(=), (:call, :inline_worthy, (:(::), :body, :ANY), (:(::), :cost, :Integer)), (:block,
        (:line, 2808, :none),
        true
      )),
    (:line, 2811, :none),
    (:function, (:call, :inline_ignore, (:(::), :ex, :ANY)), (:block,
        (:line, 2812, :none),
        (:||, (:call, :isa, :ex, :LineNumberNode), (:||, (:call, :(===), :ex, :nothing), (:&&, (:call, :isa, :ex, :Expr), (:||, (:call, :(===), (:., (:(::), :ex, :Expr), (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :line
                  )), (:call, :(===), (:., (:(::), :ex, :Expr), (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :meta
                  ))))))
      )),
    (:line, 2818, :none),
    (:function, (:call, :inline_worthy, (:(::), :body, :Expr), (:kw, (:(::), :cost, :Integer), 1000)), (:block,
        (:line, 2819, :none),
        (:if, (:ref, (:call, :popmeta!, :body, (:quote, #QuoteNode
                :noinline
              )), 1), (:block,
            (:line, 2820, :none),
            (:return, false)
          )),
        (:line, 2822, :none),
        (:(=), :symlim, (:call, :+, 1000, (:call, :÷, 5000000, :cost))),
        (:line, 2823, :none),
        (:(=), :nstmt, 0),
        (:line, 2824, :none),
        (:for, (:(=), :stmt, (:., :body, (:quote, #QuoteNode
                :args
              ))), (:block,
            (:line, 2825, :none),
            (:if, (:call, :!, (:call, :inline_ignore, :stmt)), (:block,
                (:line, 2826, :none),
                (:+=, :nstmt, 1)
              ))
          )),
        (:line, 2829, :none),
        (:if, (:call, :<, :nstmt, (:call, :÷, (:call, :+, :symlim, 500), 1000)), (:block,
            (:line, 2830, :none),
            (:*=, :symlim, 16),
            (:line, 2831, :none),
            (:÷=, :symlim, 1000),
            (:line, 2832, :none),
            (:if, (:call, :<, (:call, :occurs_more, :body, (:->, :e, (:block,
                      (:line, 2832, :none),
                      (:call, :!, (:call, :inline_ignore, :e))
                    )), :symlim), :symlim), (:block,
                (:line, 2833, :none),
                (:return, true)
              ))
          )),
        (:line, 2836, :none),
        (:return, false)
      )),
    (:line, 2839, :none),
    (:(=), (:call, :ssavalue_increment, (:(::), :body, :ANY), :incr), (:block,
        (:line, 2839, :none),
        :body
      )),
    (:line, 2840, :none),
    (:(=), (:call, :ssavalue_increment, (:(::), :body, :SSAValue), :incr), (:block,
        (:line, 2840, :none),
        (:call, :SSAValue, (:call, :+, (:., :body, (:quote, #QuoteNode
                :id
              )), :incr))
      )),
    (:line, 2841, :none),
    (:function, (:call, :ssavalue_increment, (:(::), :body, :Expr), :incr), (:block,
        (:line, 2842, :none),
        (:if, (:call, :(===), (:., :body, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :line
            )), (:block,
            (:line, 2843, :none),
            (:return, :body)
          )),
        (:line, 2845, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :body, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 2846, :none),
            (:(=), (:ref, (:., :body, (:quote, #QuoteNode
                    :args
                  )), :i), (:call, :ssavalue_increment, (:ref, (:., :body, (:quote, #QuoteNode
                      :args
                    )), :i), :incr))
          )),
        (:line, 2848, :none),
        (:return, :body)
      )),
    (:line, 2851, :none),
    (:const, (:(=), :top_getfield, (:call, :GlobalRef, :Core, (:quote, #QuoteNode
            :getfield
          )))),
    (:line, 2852, :none),
    (:const, (:(=), :top_tuple, (:call, :GlobalRef, :Core, (:quote, #QuoteNode
            :tuple
          )))),
    (:line, 2854, :none),
    (:function, (:call, :mk_getfield, :texpr, :i, :T), (:block,
        (:line, 2855, :none),
        (:(=), :e, (:call, :Expr, (:quote, #QuoteNode
              :call
            ), :top_getfield, :texpr, :i)),
        (:line, 2856, :none),
        (:(=), (:., :e, (:quote, #QuoteNode
              :typ
            )), :T),
        (:line, 2857, :none),
        :e
      )),
    (:line, 2860, :none),
    (:function, (:call, :mk_tuplecall, :args, (:(::), :sv, :InferenceState)), (:block,
        (:line, 2861, :none),
        (:(=), :e, (:call, :Expr, (:quote, #QuoteNode
              :call
            ), :top_tuple, (:..., :args))),
        (:line, 2862, :none),
        (:(=), (:., :e, (:quote, #QuoteNode
              :typ
            )), (:call, :tuple_tfunc, (:curly, :Tuple, (:..., (:typed_comprehension, :Any, (:generator, (:call, :widenconst, (:call, :exprtype, :x, (:., :sv, (:quote, #QuoteNode
                            :linfo
                          )))), (:(=), :x, :args))))))),
        (:line, 2863, :none),
        (:return, :e)
      )),
    (:line, 2866, :none),
    (:function, (:call, :inlining_pass!, (:(::), :linfo, :LambdaInfo), (:(::), :sv, :InferenceState)), (:block,
        (:line, 2867, :none),
        (:(=), :eargs, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 2868, :none),
        (:(=), :i, 1),
        (:line, 2869, :none),
        (:while, (:call, :(<=), :i, (:call, :length, :eargs)), (:block,
            (:line, 2870, :none),
            (:(=), :ei, (:ref, :eargs, :i)),
            (:line, 2871, :none),
            (:if, (:call, :isa, :ei, :Expr), (:block,
                (:line, 2872, :none),
                (:(=), :res, (:call, :inlining_pass, :ei, :sv, :linfo)),
                (:line, 2873, :none),
                (:(=), (:ref, :eargs, :i), (:ref, :res, 1)),
                (:line, 2874, :none),
                (:if, (:call, :isa, (:ref, :res, 2), :Array), (:block,
                    (:line, 2875, :none),
                    (:(=), :sts, (:(::), (:ref, :res, 2), (:curly, :Array, :Any, 1))),
                    (:line, 2876, :none),
                    (:for, (:(=), :j, (:(:), 1, (:call, :length, :sts))), (:block,
                        (:line, 2877, :none),
                        (:call, :insert!, :eargs, :i, (:ref, :sts, :j)),
                        (:line, 2878, :none),
                        (:+=, :i, 1)
                      ))
                  ))
              )),
            (:line, 2882, :none),
            (:+=, :i, 1)
          ))
      )),
    (:line, 2886, :none),
    (:const, (:(=), :corenumtype, (:curly, :Union, :Int32, :Int64, :Float32, :Float64))),
    (:line, 2888, :none),
    (:function, (:call, :inlining_pass, (:(::), :e, :Expr), :sv, :linfo), (:block,
        (:line, 2889, :none),
        (:if, (:call, :(===), (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :method
            )), (:block,
            (:line, 2891, :none),
            (:return, (:tuple, :e, (:tuple,)))
          )),
        (:line, 2893, :none),
        (:(=), :eargs, (:., :e, (:quote, #QuoteNode
              :args
            ))),
        (:line, 2894, :none),
        (:if, (:call, :<, (:call, :length, :eargs), 1), (:block,
            (:line, 2895, :none),
            (:return, (:tuple, :e, (:tuple,)))
          )),
        (:line, 2897, :none),
        (:(=), :stmts, (:vect,)),
        (:line, 2898, :none),
        (:(=), :arg1, (:ref, :eargs, 1)),
        (:line, 2902, :none),
        (:if, (:call, :is_known_call, :e, (:., (:., :Core, (:quote, #QuoteNode
                  :Intrinsics
                )), (:quote, #QuoteNode
                :ccall
              )), :linfo), (:block,
            (:line, 2904, :none),
            (:(=), :i0, 4),
            (:line, 2905, :none),
            (:(=), :isccall, true)
          ), (:block,
            (:line, 2906, :none),
            (:if, (:call, :is_known_call, :e, (:., (:., :Core, (:quote, #QuoteNode
                      :Intrinsics
                    )), (:quote, #QuoteNode
                    :llvmcall
                  )), :linfo), (:block,
                (:line, 2907, :none),
                (:(=), :i0, 5),
                (:line, 2908, :none),
                (:(=), :isccall, false)
              ), (:block,
                (:line, 2910, :none),
                (:(=), :i0, 1),
                (:line, 2911, :none),
                (:(=), :isccall, false)
              ))
          )),
        (:line, 2913, :none),
        (:(=), :has_stmts, false),
        (:line, 2914, :none),
        (:for, (:(=), :_i, (:(:), (:call, :length, :eargs), -1, :i0)), (:block,
            (:line, 2915, :none),
            (:(=), :i, (:if, (:&&, :isccall, (:call, :(==), :_i, 4)), 2, :_i)),
            (:line, 2916, :none),
            (:(=), :ei, (:ref, :eargs, :i)),
            (:line, 2917, :none),
            (:if, (:call, :isa, :ei, :Expr), (:block,
                (:line, 2918, :none),
                (:(=), :ei, (:(::), :ei, :Expr)),
                (:line, 2919, :none),
                (:if, (:call, :(===), (:., :ei, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :&
                    )), (:block,
                    (:line, 2920, :none),
                    (:(=), :argloc, (:., :ei, (:quote, #QuoteNode
                          :args
                        ))),
                    (:line, 2921, :none),
                    (:(=), :i, 1),
                    (:line, 2922, :none),
                    (:(=), :ei, (:ref, :argloc, 1)),
                    (:line, 2923, :none),
                    (:if, (:call, :!, (:call, :isa, :ei, :Expr)), (:block,
                        (:line, 2924, :none),
                        (:continue,)
                      )),
                    (:line, 2926, :none),
                    (:(=), :ei, (:(::), :ei, :Expr))
                  ), (:block,
                    (:line, 2928, :none),
                    (:(=), :argloc, :eargs)
                  )),
                (:line, 2930, :none),
                (:(=), :res, (:call, :inlining_pass, :ei, :sv, :linfo)),
                (:line, 2931, :none),
                (:(=), :res1, (:ref, :res, 1)),
                (:line, 2932, :none),
                (:if, (:&&, :has_stmts, (:call, :!, (:call, :effect_free, :res1, :linfo, false))), (:block,
                    (:line, 2933, :none),
                    (:(=), :restype, (:call, :exprtype, :res1, :linfo)),
                    (:line, 2934, :none),
                    (:(=), :vnew, (:call, :newvar!, :sv, :restype)),
                    (:line, 2935, :none),
                    (:(=), (:ref, :argloc, :i), :vnew),
                    (:line, 2936, :none),
                    (:call, :unshift!, :stmts, (:call, :Expr, (:quote, #QuoteNode
                          :(=)
                        ), :vnew, :res1))
                  ), (:block,
                    (:line, 2938, :none),
                    (:(=), (:ref, :argloc, :i), :res1)
                  )),
                (:line, 2940, :none),
                (:if, (:call, :isa, (:ref, :res, 2), :Array), (:block,
                    (:line, 2941, :none),
                    (:(=), :res2, (:(::), (:ref, :res, 2), (:curly, :Array, :Any, 1))),
                    (:line, 2942, :none),
                    (:if, (:call, :!, (:call, :isempty, :res2)), (:block,
                        (:line, 2943, :none),
                        (:call, :prepend!, :stmts, :res2),
                        (:line, 2944, :none),
                        (:if, (:call, :!, :has_stmts), (:block,
                            (:line, 2945, :none),
                            (:for, (:(=), :stmt, :res2), (:block,
                                (:line, 2946, :none),
                                (:if, (:call, :!, (:call, :effect_free, :stmt, :linfo, true)), (:block,
                                    (:line, 2947, :none),
                                    (:(=), :has_stmts, true)
                                  ))
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 2955, :none),
        (:if, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :call
            )), (:block,
            (:line, 2956, :none),
            (:return, (:tuple, :e, :stmts))
          )),
        (:line, 2958, :none),
        (:if, :isccall, (:block,
            (:line, 2959, :none),
            (:(=), :le, (:call, :length, :eargs)),
            (:line, 2960, :none),
            (:for, (:(=), :i, (:(:), 5, 2, (:call, :-, :le, 1))), (:block,
                (:line, 2961, :none),
                (:if, (:call, :(===), (:ref, :eargs, :i), (:ref, :eargs, (:call, :+, :i, 1))), (:block,
                    (:line, 2962, :none),
                    (:(=), (:ref, :eargs, (:call, :+, :i, 1)), 0)
                  ))
              ))
          )),
        (:line, 2967, :none),
        (:(=), :ft, (:call, :exprtype, :arg1, :linfo)),
        (:line, 2968, :none),
        (:if, (:call, :isa, :ft, :Const), (:block,
            (:line, 2969, :none),
            (:(=), :f, (:., :ft, (:quote, #QuoteNode
                  :val
                )))
          ), (:block,
            (:line, 2971, :none),
            (:(=), :f, :nothing),
            (:line, 2972, :none),
            (:if, (:call, :!, (:||, (:call, :isleaftype, :ft), (:<:, :ft, :Type))), (:block,
                (:line, 2973, :none),
                (:return, (:tuple, :e, :stmts))
              ))
          )),
        (:line, 2977, :none),
        (:if, (:., :sv, (:quote, #QuoteNode
              :inlining
            )), (:block,
            (:line, 2978, :none),
            (:if, (:&&, (:call, :isdefined, :Main, (:quote, #QuoteNode
                    :Base
                  )), (:&&, (:||, (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :^
                        )), (:call, :is, :f, (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :^
                          )))), (:&&, (:call, :isdefined, (:., :Main, (:quote, #QuoteNode
                            :Base
                          )), (:quote, #QuoteNode
                          :.^
                        )), (:call, :is, :f, (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :.^
                          ))))), (:call, :(==), (:call, :length, (:., :e, (:quote, #QuoteNode
                          :args
                        ))), 3))), (:block,
                (:line, 2983, :none),
                (:(=), :a2, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 3)),
                (:line, 2984, :none),
                (:if, (:||, (:call, :isa, :a2, :Symbol), (:||, (:call, :isa, :a2, :Slot), (:call, :isa, :a2, :SSAValue))), (:block,
                    (:line, 2985, :none),
                    (:(=), :ta2, (:call, :exprtype, :a2, :linfo)),
                    (:line, 2986, :none),
                    (:if, (:call, :isa, :ta2, :Const), (:block,
                        (:line, 2987, :none),
                        (:(=), :a2, (:., :ta2, (:quote, #QuoteNode
                              :val
                            )))
                      ))
                  )),
                (:line, 2991, :none),
                (:(=), :square, (:||, (:call, :(===), :a2, (:call, :Int32, 2)), (:call, :(===), :a2, (:call, :Int64, 2)))),
                (:line, 2992, :none),
                (:(=), :triple, (:||, (:call, :(===), :a2, (:call, :Int32, 3)), (:call, :(===), :a2, (:call, :Int64, 3)))),
                (:line, 2993, :none),
                (:if, (:||, :square, :triple), (:block,
                    (:line, 2994, :none),
                    (:(=), :a1, (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), 2)),
                    (:line, 2995, :none),
                    (:(=), :basenumtype, (:curly, :Union, :corenumtype, (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :Complex64
                          )), (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :Complex128
                          )), (:., (:., :Main, (:quote, #QuoteNode
                              :Base
                            )), (:quote, #QuoteNode
                            :Rational
                          )))),
                    (:line, 2996, :none),
                    (:if, (:||, (:call, :isa, :a1, :basenumtype), (:&&, (:||, (:call, :isa, :a1, :Symbol), (:||, (:call, :isa, :a1, :Slot), (:call, :isa, :a1, :SSAValue))), (:call, :⊑, (:call, :exprtype, :a1, :linfo), :basenumtype))), (:block,
                        (:line, 2998, :none),
                        (:if, :square, (:block,
                            (:line, 2999, :none),
                            (:(=), (:., :e, (:quote, #QuoteNode
                                  :args
                                )), (:ref, :Any, (:call, :GlobalRef, (:., :Main, (:quote, #QuoteNode
                                      :Base
                                    )), (:quote, #QuoteNode
                                    :*
                                  )), :a1, :a1)),
                            (:line, 3000, :none),
                            (:(=), :res, (:call, :inlining_pass, :e, :sv, :linfo))
                          ), (:block,
                            (:line, 3002, :none),
                            (:(=), (:., :e, (:quote, #QuoteNode
                                  :args
                                )), (:ref, :Any, (:call, :GlobalRef, (:., :Main, (:quote, #QuoteNode
                                      :Base
                                    )), (:quote, #QuoteNode
                                    :*
                                  )), (:call, :Expr, (:quote, #QuoteNode
                                    :call
                                  ), (:call, :GlobalRef, (:., :Main, (:quote, #QuoteNode
                                        :Base
                                      )), (:quote, #QuoteNode
                                      :*
                                    )), :a1, :a1), :a1)),
                            (:line, 3003, :none),
                            (:(=), :res, (:call, :inlining_pass, :e, :sv, :linfo))
                          )),
                        (:line, 3005, :none),
                        (:if, (:call, :isa, :res, :Tuple), (:block,
                            (:line, 3006, :none),
                            (:if, (:&&, (:call, :isa, (:ref, :res, 2), :Array), (:call, :!, (:call, :isempty, (:ref, :res, 2)))), (:block,
                                (:line, 3007, :none),
                                (:call, :append!, :stmts, (:ref, :res, 2))
                              )),
                            (:line, 3009, :none),
                            (:(=), :res, (:ref, :res, 1))
                          )),
                        (:line, 3011, :none),
                        (:return, (:tuple, :res, :stmts))
                      ))
                  ))
              ))
          )),
        (:line, 3017, :none),
        (:for, (:(=), :ninline, (:(:), 1, 100)), (:block,
            (:line, 3018, :none),
            (:(=), :ata, (:call, (:curly, :Vector, :Any), (:call, :length, (:., :e, (:quote, #QuoteNode
                      :args
                    ))))),
            (:line, 3019, :none),
            (:(=), (:ref, :ata, 1), :ft),
            (:line, 3020, :none),
            (:for, (:(=), :i, (:(:), 2, (:call, :length, (:., :e, (:quote, #QuoteNode
                        :args
                      ))))), (:block,
                (:line, 3021, :none),
                (:(=), :a, (:call, :exprtype, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), :i), :linfo)),
                (:line, 3022, :none),
                (:&&, (:||, (:call, :(===), :a, :Bottom), (:call, :isvarargtype, :a)), (:return, (:tuple, :e, :stmts))),
                (:line, 3023, :none),
                (:(=), (:ref, :ata, :i), :a)
              )),
            (:line, 3025, :none),
            (:(=), :res, (:call, :inlineable, :f, :ft, :e, :ata, :sv, :linfo)),
            (:line, 3026, :none),
            (:if, (:call, :isa, :res, :Tuple), (:block,
                (:line, 3027, :none),
                (:if, (:&&, (:call, :isa, (:ref, :res, 2), :Array), (:call, :!, (:call, :isempty, (:ref, :res, 2)))), (:block,
                    (:line, 3028, :none),
                    (:call, :append!, :stmts, (:ref, :res, 2))
                  )),
                (:line, 3030, :none),
                (:(=), :res, (:ref, :res, 1))
              )),
            (:line, 3033, :none),
            (:if, (:call, :!, (:call, :is, :res, :NF)), (:block,
                (:line, 3036, :none),
                (:if, (:&&, (:call, :isa, :res, :Expr), (:call, :is_known_call, :res, :_apply, :linfo)), (:block,
                    (:line, 3037, :none),
                    (:(=), :e, (:(::), :res, :Expr)),
                    (:line, 3038, :none),
                    (:(=), :f, :_apply),
                    (:line, 3038, :none),
                    (:(=), :ft, (:call, :abstract_eval_constant, :f))
                  ), (:block,
                    (:line, 3040, :none),
                    (:return, (:tuple, :res, :stmts))
                  ))
              )),
            (:line, 3044, :none),
            (:if, (:call, :is, :f, :_apply), (:block,
                (:line, 3045, :none),
                (:(=), :na, (:call, :length, (:., :e, (:quote, #QuoteNode
                        :args
                      )))),
                (:line, 3046, :none),
                (:(=), :newargs, (:call, (:curly, :Vector, :Any), (:call, :-, :na, 2))),
                (:line, 3047, :none),
                (:for, (:(=), :i, (:(:), 3, :na)), (:block,
                    (:line, 3048, :none),
                    (:(=), :aarg, (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), :i)),
                    (:line, 3049, :none),
                    (:(=), :t, (:call, :widenconst, (:call, :exprtype, :aarg, :linfo))),
                    (:line, 3050, :none),
                    (:if, (:&&, (:call, :isa, :aarg, :Expr), (:||, (:call, :is_known_call, :aarg, :tuple, :linfo), (:call, :is_known_call, :aarg, :svec, :linfo))), (:block,
                        (:line, 3052, :none),
                        (:(=), (:ref, :newargs, (:call, :-, :i, 2)), (:ref, (:., :aarg, (:quote, #QuoteNode
                                :args
                              )), (:(:), 2, :end)))
                      ), (:block,
                        (:line, 3053, :none),
                        (:if, (:call, :isa, :aarg, :Tuple), (:block,
                            (:line, 3054, :none),
                            (:(=), (:ref, :newargs, (:call, :-, :i, 2)), (:typed_comprehension, :Any, (:generator, (:call, :QuoteNode, :x), (:(=), :x, :aarg))))
                          ), (:block,
                            (:line, 3055, :none),
                            (:if, (:&&, (:call, :isa, :t, :DataType), (:&&, (:call, :(===), (:., :t, (:quote, #QuoteNode
                                        :name
                                      )), (:., :Tuple, (:quote, #QuoteNode
                                        :name
                                      ))), (:&&, (:call, :!, (:call, :isvatuple, :t)), (:&&, (:call, :effect_free, :aarg, :linfo, true), (:call, :(<=), (:call, :length, (:., :t, (:quote, #QuoteNode
                                              :parameters
                                            ))), :MAX_TUPLE_SPLAT))))), (:block,
                                (:line, 3058, :none),
                                (:(=), :tp, (:., :t, (:quote, #QuoteNode
                                      :parameters
                                    ))),
                                (:line, 3059, :none),
                                (:(=), (:ref, :newargs, (:call, :-, :i, 2)), (:typed_comprehension, :Any, (:generator, (:call, :mk_getfield, :aarg, :j, (:ref, :tp, :j)), (:(=), :j, (:(:), 1, (:call, :length, :tp))))))
                              ), (:block,
                                (:line, 3062, :none),
                                (:return, (:tuple, :e, :stmts))
                              ))
                          ))
                      ))
                  )),
                (:line, 3065, :none),
                (:(=), (:., :e, (:quote, #QuoteNode
                      :args
                    )), (:vcat, (:ref, :Any, (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), 2)), (:..., :newargs))),
                (:line, 3068, :none),
                (:(=), :ft, (:call, :exprtype, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 1), :linfo)),
                (:line, 3069, :none),
                (:if, (:call, :isa, :ft, :Const), (:block,
                    (:line, 3070, :none),
                    (:(=), :f, (:., :ft, (:quote, #QuoteNode
                          :val
                        )))
                  ), (:block,
                    (:line, 3072, :none),
                    (:(=), :f, :nothing),
                    (:line, 3073, :none),
                    (:if, (:call, :!, (:||, (:call, :isleaftype, :ft), (:<:, :ft, :Type))), (:block,
                        (:line, 3074, :none),
                        (:return, (:tuple, :e, :stmts))
                      ))
                  ))
              ), (:block,
                (:line, 3078, :none),
                (:return, (:tuple, :e, :stmts))
              ))
          )),
        (:line, 3081, :none),
        (:return, (:tuple, :e, :stmts))
      )),
    (:line, 3084, :none),
    (:const, (:(=), :compiler_temp_sym, (:call, :Symbol, "#temp#"))),
    (:line, 3086, :none),
    (:function, (:call, :add_slot!, (:(::), :linfo, :LambdaInfo), :typ, :is_sa, (:kw, :name, :compiler_temp_sym)), (:block,
        (:line, 3087, :none),
        (:(=), :id, (:call, :+, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                  :slotnames
                ))), 1)),
        (:line, 3088, :none),
        (:call, :push!, (:., :linfo, (:quote, #QuoteNode
              :slotnames
            )), :name),
        (:line, 3089, :none),
        (:call, :push!, (:., :linfo, (:quote, #QuoteNode
              :slottypes
            )), :typ),
        (:line, 3090, :none),
        (:call, :push!, (:., :linfo, (:quote, #QuoteNode
              :slotflags
            )), (:call, :+, :Slot_Assigned, (:call, :*, :is_sa, :Slot_AssignedOnce))),
        (:line, 3091, :none),
        (:return, (:call, :SlotNumber, :id))
      )),
    (:line, 3094, :none),
    (:function, (:call, :is_known_call, (:(::), :e, :Expr), (:(::), :func, :ANY), (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 3095, :none),
        (:if, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :call
            )), (:block,
            (:line, 3096, :none),
            (:return, false)
          )),
        (:line, 3098, :none),
        (:(=), :f, (:call, :exprtype, (:ref, (:., :e, (:quote, #QuoteNode
                  :args
                )), 1), :linfo)),
        (:line, 3099, :none),
        (:return, (:&&, (:call, :isa, :f, :Const), (:call, :(===), (:., :f, (:quote, #QuoteNode
                  :val
                )), :func)))
      )),
    (:line, 3102, :none),
    (:function, (:call, :is_known_call_p, (:(::), :e, :Expr), (:(::), :pred, :ANY), (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 3103, :none),
        (:if, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :call
            )), (:block,
            (:line, 3104, :none),
            (:return, false)
          )),
        (:line, 3106, :none),
        (:(=), :f, (:call, :exprtype, (:ref, (:., :e, (:quote, #QuoteNode
                  :args
                )), 1), :linfo)),
        (:line, 3107, :none),
        (:return, (:&&, (:call, :isa, :f, :Const), (:call, :pred, (:., :f, (:quote, #QuoteNode
                  :val
                )))))
      )),
    (:line, 3110, :none),
    (:function, (:call, :delete_var!, :linfo, :id, :T), (:block,
        (:line, 3111, :none),
        (:call, :filter!, (:->, :x, (:block,
              (:line, 3111, :none),
              (:call, :!, (:&&, (:call, :isa, :x, :Expr), (:&&, (:||, (:call, :(===), (:., :x, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :(=)
                        )), (:call, :(===), (:., :x, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :const
                        ))), (:&&, (:call, :isa, (:ref, (:., :x, (:quote, #QuoteNode
                              :args
                            )), 1), :T), (:call, :(==), (:., (:ref, (:., :x, (:quote, #QuoteNode
                                :args
                              )), 1), (:quote, #QuoteNode
                            :id
                          )), :id)))))
            )), (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3114, :none),
        :linfo
      )),
    (:line, 3117, :none),
    (:function, (:call, :slot_replace!, (:(::), :linfo, :LambdaInfo), :id, :rhs, :T), (:block,
        (:line, 3118, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :linfo, (:quote, #QuoteNode
                    :code
                  ))))), (:block,
            (:line, 3119, :none),
            (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                    :code
                  )), :i), (:call, :_slot_replace!, (:ref, (:., :linfo, (:quote, #QuoteNode
                      :code
                    )), :i), :id, :rhs, :T))
          )),
        (:line, 3121, :none),
        :linfo
      )),
    (:line, 3124, :none),
    (:function, (:call, :_slot_replace!, :e, :id, :rhs, :T), (:block,
        (:line, 3125, :none),
        (:if, (:&&, (:call, :isa, :e, :T), (:call, :(==), (:., :e, (:quote, #QuoteNode
                  :id
                )), :id)), (:block,
            (:line, 3126, :none),
            (:return, :rhs)
          )),
        (:line, 3128, :none),
        (:if, (:call, :isa, :e, :Expr), (:block,
            (:line, 3129, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :e, (:quote, #QuoteNode
                        :args
                      ))))), (:block,
                (:line, 3130, :none),
                (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), :i), (:call, :_slot_replace!, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), :i), :id, :rhs, :T))
              ))
          )),
        (:line, 3133, :none),
        (:return, :e)
      )),
    (:line, 3136, :none),
    (:(=), (:call, :occurs_undef, (:(::), :var, :Int), :expr, :flags), (:block,
        (:line, 3136, :none),
        (:&&, (:call, :(!=), (:call, :&, (:ref, :flags, :var), :Slot_UsedUndef), 0), (:call, :>, (:call, :occurs_more, :expr, (:->, :e, (:block,
                  (:line, 3137, :none),
                  (:&&, (:call, :isa, :e, :Slot), (:call, :(==), (:., :e, (:quote, #QuoteNode
                          :id
                        )), :var))
                )), 0), 0))
      )),
    (:line, 3139, :none),
    (:(=), (:call, :is_argument, :linfo, :v), (:block,
        (:line, 3139, :none),
        (:&&, (:call, :isa, :v, :Slot), (:call, :(<=), (:., :v, (:quote, #QuoteNode
                :id
              )), (:., :linfo, (:quote, #QuoteNode
                :nargs
              ))))
      )),
    (:line, 3144, :none),
    (:function, (:call, :remove_redundant_temp_vars, :linfo, :sa, :T), (:block,
        (:line, 3145, :none),
        (:(=), :flags, (:., :linfo, (:quote, #QuoteNode
              :slotflags
            ))),
        (:line, 3146, :none),
        (:(=), :ssavalue_types, (:., :linfo, (:quote, #QuoteNode
              :ssavaluetypes
            ))),
        (:line, 3147, :none),
        (:(=), :bexpr, (:call, :Expr, (:quote, #QuoteNode
              :block
            ))),
        (:line, 3147, :none),
        (:(=), (:., :bexpr, (:quote, #QuoteNode
              :args
            )), (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3148, :none),
        (:for, (:(=), (:tuple, :v, :init), :sa), (:block,
            (:line, 3149, :none),
            (:if, (:&&, (:call, :isa, :init, :Slot), (:call, :is_argument, :linfo, (:(::), :init, :Slot))), (:block,
                (:line, 3153, :none),
                (:if, (:||, (:call, :(===), :T, :SSAValue), (:call, :!, (:call, :occurs_undef, :v, :bexpr, :flags))), (:block,
                    (:line, 3159, :none),
                    (:(=), :ityp, (:if, (:call, :isa, :init, :TypedSlot), (:., :init, (:quote, #QuoteNode
                            :typ
                          )), (:ref, (:., :linfo, (:quote, #QuoteNode
                              :slottypes
                            )), (:., :init, (:quote, #QuoteNode
                              :id
                            ))))),
                    (:line, 3160, :none),
                    (:if, (:call, :⊑, :ityp, (:if, (:call, :(===), :T, :SSAValue), (:ref, :ssavalue_types, (:call, :+, :v, 1)), (:ref, (:., :linfo, (:quote, #QuoteNode
                                :slottypes
                              )), :v))), (:block,
                        (:line, 3161, :none),
                        (:call, :delete_var!, :linfo, :v, :T),
                        (:line, 3162, :none),
                        (:call, :slot_replace!, :linfo, :v, :init, :T)
                      ))
                  ))
              ))
          )),
        (:line, 3167, :none),
        :linfo
      )),
    (:line, 3171, :none),
    (:function, (:call, :find_sa_vars, (:(::), :linfo, :LambdaInfo)), (:block,
        (:line, 3172, :none),
        (:(=), :body, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3173, :none),
        (:(=), :av, (:call, :ObjectIdDict)),
        (:line, 3174, :none),
        (:(=), :av2, (:call, :ObjectIdDict)),
        (:line, 3175, :none),
        (:(=), :gss, (:call, :ObjectIdDict)),
        (:line, 3176, :none),
        (:(=), :nargs, (:., :linfo, (:quote, #QuoteNode
              :nargs
            ))),
        (:line, 3177, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :body))), (:block,
            (:line, 3178, :none),
            (:(=), :e, (:ref, :body, :i)),
            (:line, 3179, :none),
            (:if, (:&&, (:call, :isa, :e, :Expr), (:call, :is, (:., :e, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :(=)
                  ))), (:block,
                (:line, 3180, :none),
                (:(=), :lhs, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 1)),
                (:line, 3181, :none),
                (:if, (:call, :isa, :lhs, :SSAValue), (:block,
                    (:line, 3182, :none),
                    (:(=), (:ref, :gss, (:., :lhs, (:quote, #QuoteNode
                            :id
                          ))), (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), 2))
                  ), (:block,
                    (:line, 3183, :none),
                    (:if, (:call, :isa, :lhs, :Slot), (:block,
                        (:line, 3184, :none),
                        (:(=), :id, (:., :lhs, (:quote, #QuoteNode
                              :id
                            ))),
                        (:line, 3185, :none),
                        (:if, (:call, :>, :id, :nargs), (:block,
                            (:line, 3186, :none),
                            (:if, (:call, :!, (:call, :haskey, :av, :id)), (:block,
                                (:line, 3187, :none),
                                (:(=), (:ref, :av, :id), (:ref, (:., :e, (:quote, #QuoteNode
                                        :args
                                      )), 2))
                              ), (:block,
                                (:line, 3189, :none),
                                (:(=), (:ref, :av2, :id), true)
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 3195, :none),
        (:call, :filter!, (:->, (:tuple, :id, :_), (:block,
              (:line, 3195, :none),
              (:call, :!, (:call, :haskey, :av2, :id))
            )), :av),
        (:line, 3196, :none),
        (:tuple, :av, :gss)
      )),
    (:line, 3199, :none),
    (:(=), (:call, :symequal, (:(::), :x, :SSAValue), (:(::), :y, :SSAValue)), (:block,
        (:line, 3199, :none),
        (:call, :is, (:., :x, (:quote, #QuoteNode
              :id
            )), (:., :y, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 3200, :none),
    (:(=), (:call, :symequal, (:(::), :x, :Slot), (:(::), :y, :Slot)), (:block,
        (:line, 3200, :none),
        (:call, :is, (:., :x, (:quote, #QuoteNode
              :id
            )), (:., :y, (:quote, #QuoteNode
              :id
            )))
      )),
    (:line, 3201, :none),
    (:(=), (:call, :symequal, (:(::), :x, :ANY), (:(::), :y, :ANY)), (:block,
        (:line, 3201, :none),
        (:call, :is, :x, :y)
      )),
    (:line, 3203, :none),
    (:function, (:call, :occurs_outside_getfield, (:(::), :linfo, :LambdaInfo), (:(::), :e, :ANY), (:(::), :sym, :ANY), (:(::), :sv, :InferenceState), :field_count, :field_names), (:block,
        (:line, 3205, :none),
        (:if, (:||, (:call, :(===), :e, :sym), (:&&, (:call, :isa, :e, :Slot), (:&&, (:call, :isa, :sym, :Slot), (:call, :(==), (:., (:(::), :e, :Slot), (:quote, #QuoteNode
                      :id
                    )), (:., (:(::), :sym, :Slot), (:quote, #QuoteNode
                      :id
                    )))))), (:block,
            (:line, 3206, :none),
            (:return, true)
          )),
        (:line, 3208, :none),
        (:if, (:call, :isa, :e, :Expr), (:block,
            (:line, 3209, :none),
            (:(=), :e, (:(::), :e, :Expr)),
            (:line, 3210, :none),
            (:if, (:&&, (:call, :is_known_call, :e, :getfield, :linfo), (:call, :symequal, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 2), :sym)), (:block,
                (:line, 3211, :none),
                (:(=), :idx, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 3)),
                (:line, 3212, :none),
                (:if, (:&&, (:call, :isa, :idx, :QuoteNode), (:call, :in, (:., :idx, (:quote, #QuoteNode
                          :value
                        )), :field_names)), (:block,
                    (:line, 3213, :none),
                    (:return, false)
                  )),
                (:line, 3215, :none),
                (:if, (:&&, (:call, :isa, :idx, :Int), (:comparison, 1, :(<=), :idx, :(<=), :field_count)), (:block,
                    (:line, 3216, :none),
                    (:return, false)
                  )),
                (:line, 3218, :none),
                (:return, true)
              )),
            (:line, 3220, :none),
            (:if, (:call, :is, (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :(=)
                )), (:block,
                (:line, 3221, :none),
                (:return, (:call, :occurs_outside_getfield, :linfo, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 2), :sym, :sv, :field_count, :field_names))
              ), (:block,
                (:line, 3224, :none),
                (:if, (:&&, (:call, :(===), (:., :e, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :block
                      )), (:&&, (:call, :isa, :sym, :Slot), (:call, :(==), (:call, :&, (:ref, (:., :linfo, (:quote, #QuoteNode
                                :slotflags
                              )), (:., (:(::), :sym, :Slot), (:quote, #QuoteNode
                                :id
                              ))), :Slot_UsedUndef), 0))), (:block,
                    (:line, 3226, :none),
                    (:(=), :ignore_void, true)
                  ), (:block,
                    (:line, 3228, :none),
                    (:(=), :ignore_void, false)
                  )),
                (:line, 3230, :none),
                (:for, (:(=), :a, (:., :e, (:quote, #QuoteNode
                        :args
                      ))), (:block,
                    (:line, 3231, :none),
                    (:if, (:&&, :ignore_void, (:&&, (:call, :isa, :a, :Slot), (:call, :(==), (:., (:(::), :a, :Slot), (:quote, #QuoteNode
                                :id
                              )), (:., (:(::), :sym, :Slot), (:quote, #QuoteNode
                                :id
                              ))))), (:block,
                        (:line, 3232, :none),
                        (:continue,)
                      )),
                    (:line, 3234, :none),
                    (:if, (:call, :occurs_outside_getfield, :linfo, :a, :sym, :sv, :field_count, :field_names), (:block,
                        (:line, 3235, :none),
                        (:return, true)
                      ))
                  ))
              ))
          )),
        (:line, 3240, :none),
        (:return, false)
      )),
    (:line, 3245, :none),
    (:function, (:call, :inbounds_meta_elim_pass!, (:(::), :code, (:curly, :Array, :Any, 1))), (:block,
        (:line, 3246, :none),
        (:if, (:call, :(==), (:call, :findfirst, (:->, :x, (:block,
                  (:line, 3246, :none),
                  (:&&, (:call, :isa, :x, :Expr), (:||, (:&&, (:call, :(===), (:., :x, (:quote, #QuoteNode
                              :head
                            )), (:quote, #QuoteNode
                            :inbounds
                          )), (:call, :(===), (:ref, (:., :x, (:quote, #QuoteNode
                                :args
                              )), 1), true)), (:call, :(===), (:., :x, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :boundscheck
                        ))))
                )), :code), 0), (:block,
            (:line, 3249, :none),
            (:call, :filter!, (:->, :x, (:block,
                  (:line, 3249, :none),
                  (:call, :!, (:&&, (:call, :isa, :x, :Expr), (:call, :(===), (:., :x, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :inbounds
                        ))))
                )), :code)
          ))
      )),
    (:line, 3255, :none),
    (:function, (:call, :getfield_elim_pass!, (:(::), :linfo, :LambdaInfo), :sv), (:block,
        (:line, 3256, :none),
        (:(=), :body, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3257, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :body))), (:block,
            (:line, 3258, :none),
            (:(=), (:ref, :body, :i), (:call, :_getfield_elim_pass!, (:ref, :body, :i), :sv))
          ))
      )),
    (:line, 3262, :none),
    (:function, (:call, :_getfield_elim_pass!, (:(::), :e, :Expr), :sv), (:block,
        (:line, 3263, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :e, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 3264, :none),
            (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), :i), (:call, :_getfield_elim_pass!, (:ref, (:., :e, (:quote, #QuoteNode
                      :args
                    )), :i), :sv))
          )),
        (:line, 3266, :none),
        (:if, (:&&, (:call, :is_known_call, :e, :getfield, (:., :sv, (:quote, #QuoteNode
                  :linfo
                ))), (:&&, (:call, :(==), (:call, :length, (:., :e, (:quote, #QuoteNode
                      :args
                    ))), 3), (:||, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 3), :Int), (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 3), :QuoteNode)))), (:block,
            (:line, 3268, :none),
            (:(=), :e1, (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 3269, :none),
            (:(=), :j, (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), 3)),
            (:line, 3270, :none),
            (:if, (:call, :isa, :e1, :Expr), (:block,
                (:line, 3271, :none),
                (:(=), :alloc, (:call, :is_allocation, :e1, :sv)),
                (:line, 3272, :none),
                (:if, (:call, :!, (:call, :is, :alloc, false)), (:block,
                    (:line, 3273, :none),
                    (:(=), (:tuple, :flen, :fnames), :alloc),
                    (:line, 3274, :none),
                    (:if, (:call, :isa, :j, :QuoteNode), (:block,
                        (:line, 3275, :none),
                        (:(=), :j, (:call, :findfirst, :fnames, (:., :j, (:quote, #QuoteNode
                                :value
                              ))))
                      )),
                    (:line, 3277, :none),
                    (:if, (:comparison, 1, :(<=), :j, :(<=), :flen), (:block,
                        (:line, 3278, :none),
                        (:(=), :ok, true),
                        (:line, 3279, :none),
                        (:for, (:(=), :k, (:(:), 2, (:call, :length, (:., :e1, (:quote, #QuoteNode
                                    :args
                                  ))))), (:block,
                            (:line, 3280, :none),
                            (:&&, (:call, :(==), :k, (:call, :+, :j, 1)), (:continue,)),
                            (:line, 3281, :none),
                            (:if, (:call, :!, (:call, :effect_free, (:ref, (:., :e1, (:quote, #QuoteNode
                                        :args
                                      )), :k), (:., :sv, (:quote, #QuoteNode
                                      :linfo
                                    )), true)), (:block,
                                (:line, 3282, :none),
                                (:(=), :ok, false),
                                (:line, 3282, :none),
                                (:break,)
                              ))
                          )),
                        (:line, 3285, :none),
                        (:if, :ok, (:block,
                            (:line, 3286, :none),
                            (:return, (:ref, (:., :e1, (:quote, #QuoteNode
                                    :args
                                  )), (:call, :+, :j, 1)))
                          ))
                      ))
                  ))
              ), (:block,
                (:line, 3290, :none),
                (:if, (:&&, (:call, :isa, :e1, :Tuple), (:&&, (:call, :isa, :j, :Int), (:comparison, 1, :(<=), :j, :(<=), (:call, :length, :e1)))), (:block,
                    (:line, 3291, :none),
                    (:(=), :e1j, (:ref, :e1, :j)),
                    (:line, 3292, :none),
                    (:if, (:call, :!, (:||, (:call, :isa, :e1j, :Number), (:||, (:call, :isa, :e1j, :AbstractString), (:||, (:call, :isa, :e1j, :Tuple), (:call, :isa, :e1j, :Type))))), (:block,
                        (:line, 3294, :none),
                        (:(=), :e1j, (:call, :QuoteNode, :e1j))
                      )),
                    (:line, 3296, :none),
                    (:return, :e1j)
                  ), (:block,
                    (:line, 3297, :none),
                    (:if, (:&&, (:call, :isa, :e1, :QuoteNode), (:&&, (:call, :isa, (:., :e1, (:quote, #QuoteNode
                                :value
                              )), :Tuple), (:&&, (:call, :isa, :j, :Int), (:comparison, 1, :(<=), :j, :(<=), (:call, :length, (:., :e1, (:quote, #QuoteNode
                                    :value
                                  ))))))), (:block,
                        (:line, 3298, :none),
                        (:return, (:call, :QuoteNode, (:ref, (:., :e1, (:quote, #QuoteNode
                                  :value
                                )), :j)))
                      ))
                  ))
              ))
          )),
        (:line, 3301, :none),
        (:return, :e)
      )),
    (:line, 3304, :none),
    (:(=), (:call, :_getfield_elim_pass!, (:(::), :e, :ANY), :sv), (:block,
        (:line, 3304, :none),
        :e
      )),
    (:line, 3309, :none),
    (:function, (:call, :is_allocation, (:(::), :e, :ANY), (:(::), :sv, :InferenceState)), (:block,
        (:line, 3310, :none),
        (:||, (:call, :isa, :e, :Expr), (:return, false)),
        (:line, 3311, :none),
        (:if, (:call, :is_known_call, :e, :tuple, (:., :sv, (:quote, #QuoteNode
                :linfo
              ))), (:block,
            (:line, 3312, :none),
            (:return, (:tuple, (:call, :-, (:call, :length, (:., :e, (:quote, #QuoteNode
                        :args
                      ))), 1), (:tuple,)))
          ), (:block,
            (:line, 3313, :none),
            (:if, (:call, :(===), (:., :e, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :new
                )), (:block,
                (:line, 3314, :none),
                (:(=), :typ, (:call, :widenconst, (:call, :exprtype, :e, (:., :sv, (:quote, #QuoteNode
                          :linfo
                        ))))),
                (:line, 3315, :none),
                (:if, (:call, :isleaftype, :typ), (:block,
                    (:line, 3316, :none),
                    (:macrocall, Symbol("@assert"), (:call, :isa, :typ, :DataType)),
                    (:line, 3317, :none),
                    (:(=), :nf, (:call, :-, (:call, :length, (:., :e, (:quote, #QuoteNode
                              :args
                            ))), 1)),
                    (:line, 3318, :none),
                    (:(=), :names, (:call, :fieldnames, :typ)),
                    (:line, 3319, :none),
                    (:macrocall, Symbol("@assert"), (:call, :(<=), :nf, (:call, :nfields, :typ))),
                    (:line, 3320, :none),
                    (:if, (:call, :<, :nf, (:call, :nfields, :typ)), (:block,
                        (:line, 3324, :none),
                        (:(=), :names, (:ref, :names, (:(:), 1, :nf)))
                      )),
                    (:line, 3326, :none),
                    (:return, (:tuple, :nf, :names))
                  ))
              ))
          )),
        (:line, 3329, :none),
        false
      )),
    (:line, 3333, :none),
    (:function, (:call, :gotoifnot_elim_pass!, (:(::), :linfo, :LambdaInfo), (:(::), :sv, :InferenceState)), (:block,
        (:line, 3334, :none),
        (:(=), :body, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3335, :none),
        (:(=), :i, 1),
        (:line, 3336, :none),
        (:while, (:call, :<, :i, (:call, :length, :body)), (:block,
            (:line, 3337, :none),
            (:(=), :expr, (:ref, :body, :i)),
            (:line, 3338, :none),
            (:+=, :i, 1),
            (:line, 3339, :none),
            (:||, (:call, :isa, :expr, :Expr), (:continue,)),
            (:line, 3340, :none),
            (:(=), :expr, (:(::), :expr, :Expr)),
            (:line, 3341, :none),
            (:||, (:call, :(===), (:., :expr, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :gotoifnot
                )), (:continue,)),
            (:line, 3342, :none),
            (:(=), :cond, (:ref, (:., :expr, (:quote, #QuoteNode
                    :args
                  )), 1)),
            (:line, 3343, :none),
            (:(=), :condt, (:call, :exprtype, :cond, :linfo)),
            (:line, 3344, :none),
            (:||, (:call, :isa, :condt, :Const), (:continue,)),
            (:line, 3345, :none),
            (:(=), :val, (:., (:(::), :condt, :Const), (:quote, #QuoteNode
                  :val
                ))),
            (:line, 3349, :none),
            (:if, (:call, :isa, :val, :Bool), (:block,
                (:line, 3351, :none),
                (:(=), (:ref, :body, (:call, :-, :i, 1)), :cond),
                (:line, 3352, :none),
                (:if, (:call, :(===), :val, false), (:block,
                    (:line, 3353, :none),
                    (:call, :insert!, :body, :i, (:call, :GotoNode, (:ref, (:., :expr, (:quote, #QuoteNode
                              :args
                            )), 2))),
                    (:line, 3354, :none),
                    (:+=, :i, 1)
                  ))
              ))
          ))
      )),
    (:line, 3362, :none),
    (:function, (:call, :alloc_elim_pass!, (:(::), :linfo, :LambdaInfo), (:(::), :sv, :InferenceState)), (:block,
        (:line, 3363, :none),
        (:(=), :body, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3364, :none),
        (:(=), :bexpr, (:call, :Expr, (:quote, #QuoteNode
              :block
            ))),
        (:line, 3364, :none),
        (:(=), (:., :bexpr, (:quote, #QuoteNode
              :args
            )), :body),
        (:line, 3365, :none),
        (:(=), (:tuple, :vs, :gs), (:call, :find_sa_vars, :linfo)),
        (:line, 3366, :none),
        (:call, :remove_redundant_temp_vars, :linfo, :vs, :Slot),
        (:line, 3367, :none),
        (:call, :remove_redundant_temp_vars, :linfo, :gs, :SSAValue),
        (:line, 3368, :none),
        (:(=), :i, 1),
        (:line, 3369, :none),
        (:while, (:call, :<, :i, (:call, :length, :body)), (:block,
            (:line, 3370, :none),
            (:(=), :e, (:ref, :body, :i)),
            (:line, 3371, :none),
            (:if, (:call, :!, (:call, :isa, :e, :Expr)), (:block,
                (:line, 3372, :none),
                (:+=, :i, 1),
                (:line, 3373, :none),
                (:continue,)
              )),
            (:line, 3375, :none),
            (:(=), :e, (:(::), :e, :Expr)),
            (:line, 3376, :none),
            (:if, (:&&, (:call, :(===), (:., :e, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :(=)
                  )), (:||, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                          :args
                        )), 1), :SSAValue), (:&&, (:call, :isa, (:ref, (:., :e, (:quote, #QuoteNode
                            :args
                          )), 1), :Slot), (:call, :haskey, :vs, (:., (:ref, (:., :e, (:quote, #QuoteNode
                              :args
                            )), 1), (:quote, #QuoteNode
                          :id
                        )))))), (:block,
                (:line, 3378, :none),
                (:(=), :var, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 1)),
                (:line, 3379, :none),
                (:(=), :rhs, (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), 2)),
                (:line, 3381, :none),
                (:(=), :is_ssa, (:||, (:call, :isa, :var, :SSAValue), (:call, :(==), (:call, :&, (:ref, (:., :linfo, (:quote, #QuoteNode
                              :slotflags
                            )), (:., (:(::), :var, :Slot), (:quote, #QuoteNode
                              :id
                            ))), :Slot_UsedUndef), 0)))
              ), (:block,
                (:line, 3384, :none),
                (:(=), :var, :nothing),
                (:line, 3385, :none),
                (:(=), :rhs, :e),
                (:line, 3386, :none),
                (:(=), :is_ssa, false)
              )),
            (:line, 3388, :none),
            (:(=), :alloc, (:call, :is_allocation, :rhs, :sv)),
            (:line, 3389, :none),
            (:if, (:call, :(!==), :alloc, false), (:block,
                (:line, 3390, :none),
                (:(=), (:tuple, :nv, :field_names), :alloc),
                (:line, 3391, :none),
                (:(=), :tup, (:., :rhs, (:quote, #QuoteNode
                      :args
                    ))),
                (:line, 3394, :none),
                (:if, (:&&, (:call, :(!==), :var, :nothing), (:call, :occurs_outside_getfield, :linfo, :bexpr, :var, :sv, :nv, :field_names)), (:block,
                    (:line, 3396, :none),
                    (:+=, :i, 1),
                    (:line, 3397, :none),
                    (:continue,)
                  )),
                (:line, 3400, :none),
                (:call, :deleteat!, :body, :i),
                (:line, 3402, :none),
                (:(=), :n_ins, 0),
                (:line, 3403, :none),
                (:if, (:call, :(===), :var, :nothing), (:block,
                    (:line, 3404, :none),
                    (:for, (:(=), :j, (:(:), 1, :nv)), (:block,
                        (:line, 3405, :none),
                        (:(=), :tupelt, (:ref, :tup, (:call, :+, :j, 1))),
                        (:line, 3406, :none),
                        (:if, (:call, :!, (:||, (:call, :isa, :tupelt, :Number), (:||, (:call, :isa, :tupelt, :AbstractString), (:||, (:call, :isa, :tupelt, :QuoteNode), (:call, :isa, :tupelt, :SSAValue))))), (:block,
                            (:line, 3408, :none),
                            (:call, :insert!, :body, (:call, :+, :i, :n_ins), :tupelt),
                            (:line, 3409, :none),
                            (:+=, :n_ins, 1)
                          ))
                      ))
                  ), (:block,
                    (:line, 3413, :none),
                    (:(=), :vals, (:call, (:curly, :Vector, :Any), :nv)),
                    (:line, 3414, :none),
                    (:local, (:(::), :new_slots, (:curly, :Vector, :Int))),
                    (:line, 3415, :none),
                    (:if, (:call, :!, :is_ssa), (:block,
                        (:line, 3416, :none),
                        (:(=), :new_slots, (:call, (:curly, :Vector, :Int), :nv))
                      )),
                    (:line, 3418, :none),
                    (:for, (:(=), :j, (:(:), 1, :nv)), (:block,
                        (:line, 3419, :none),
                        (:(=), :tupelt, (:ref, :tup, (:call, :+, :j, 1))),
                        (:line, 3422, :none),
                        (:if, (:&&, :is_ssa, (:||, (:call, :isa, :tupelt, :Number), (:||, (:call, :isa, :tupelt, :AbstractString), (:||, (:call, :isa, :tupelt, :QuoteNode), (:call, :isa, :tupelt, :SSAValue))))), (:block,
                            (:line, 3425, :none),
                            (:(=), (:ref, :vals, :j), :tupelt)
                          ), (:block,
                            (:line, 3427, :none),
                            (:(=), :elty, (:call, :exprtype, :tupelt, :linfo)),
                            (:line, 3428, :none),
                            (:if, :is_ssa, (:block,
                                (:line, 3429, :none),
                                (:(=), :tmpv, (:call, :newvar!, :sv, :elty))
                              ), (:block,
                                (:line, 3431, :none),
                                (:(=), :var, (:(::), :var, :Slot)),
                                (:line, 3432, :none),
                                (:(=), :tmpv, (:call, :add_slot!, :linfo, :elty, false, (:ref, (:., :linfo, (:quote, #QuoteNode
                                          :slotnames
                                        )), (:., :var, (:quote, #QuoteNode
                                          :id
                                        ))))),
                                (:line, 3434, :none),
                                (:(=), :slot_id, (:., :tmpv, (:quote, #QuoteNode
                                      :id
                                    ))),
                                (:line, 3435, :none),
                                (:(=), (:ref, :new_slots, :j), :slot_id),
                                (:line, 3436, :none),
                                (:|=, (:ref, (:., :linfo, (:quote, #QuoteNode
                                        :slotflags
                                      )), :slot_id), :Slot_UsedUndef)
                              )),
                            (:line, 3438, :none),
                            (:(=), :tmp, (:call, :Expr, (:quote, #QuoteNode
                                  :(=)
                                ), :tmpv, :tupelt)),
                            (:line, 3439, :none),
                            (:call, :insert!, :body, (:call, :+, :i, :n_ins), :tmp),
                            (:line, 3440, :none),
                            (:(=), (:ref, :vals, :j), :tmpv),
                            (:line, 3441, :none),
                            (:+=, :n_ins, 1)
                          ))
                      )),
                    (:line, 3444, :none),
                    (:call, :replace_getfield!, :linfo, :bexpr, :var, :vals, :field_names, :sv),
                    (:line, 3445, :none),
                    (:if, (:call, :!, :is_ssa), (:block,
                        (:line, 3446, :none),
                        (:+=, :i, (:call, :replace_newvar_node!, :body, (:., (:(::), :var, :Slot), (:quote, #QuoteNode
                                :id
                              )), :new_slots, :i))
                      ), (:block,
                        (:line, 3448, :none),
                        (:if, (:call, :isa, :var, :Slot), (:block,
                            (:line, 3451, :none),
                            (:-=, :i, (:call, :delete_void_use!, :body, (:(::), :var, :Slot), :i))
                          ))
                      ))
                  ))
              ), (:block,
                (:line, 3459, :none),
                (:+=, :i, 1)
              ))
          ))
      )),
    (:line, 3465, :none),
    (:function, (:call, :replace_newvar_node!, :body, :orig, :new_slots, :i0), (:block,
        (:line, 3466, :none),
        (:(=), :nvars, (:call, :length, :new_slots)),
        (:line, 3467, :none),
        (:&&, (:call, :(==), :nvars, 0), (:return, 0)),
        (:line, 3468, :none),
        (:(=), :narg, (:call, :length, :body)),
        (:line, 3469, :none),
        (:(=), :i, 1),
        (:line, 3470, :none),
        (:(=), :nins, 0),
        (:line, 3471, :none),
        (:(=), :newvars, (:comprehension, (:generator, (:call, :NewvarNode, (:call, :SlotNumber, :id)), (:(=), :id, :new_slots)))),
        (:line, 3472, :none),
        (:while, (:call, :(<=), :i, :narg), (:block,
            (:line, 3473, :none),
            (:(=), :a, (:ref, :body, :i)),
            (:line, 3474, :none),
            (:if, (:&&, (:call, :isa, :a, :NewvarNode), (:call, :(==), (:., (:., (:(::), :a, :NewvarNode), (:quote, #QuoteNode
                        :slot
                      )), (:quote, #QuoteNode
                      :id
                    )), :orig)), (:block,
                (:line, 3475, :none),
                (:call, :splice!, :body, :i, :newvars),
                (:line, 3476, :none),
                (:if, (:call, :<, (:call, :-, :i, :nins), :i0), (:block,
                    (:line, 3477, :none),
                    (:+=, :nins, (:call, :-, :nvars, 1))
                  )),
                (:line, 3479, :none),
                (:+=, :narg, (:call, :-, :nvars, 1)),
                (:line, 3480, :none),
                (:+=, :i, :nvars)
              ), (:block,
                (:line, 3482, :none),
                (:+=, :i, 1)
              ))
          )),
        (:line, 3485, :none),
        (:return, :nins)
      )),
    (:line, 3489, :none),
    (:function, (:call, :delete_void_use!, :body, (:(::), :var, :Slot), :i0), (:block,
        (:line, 3490, :none),
        (:(=), :narg, (:call, :length, :body)),
        (:line, 3491, :none),
        (:(=), :i, 1),
        (:line, 3492, :none),
        (:(=), :ndel, 0),
        (:line, 3493, :none),
        (:while, (:call, :(<=), :i, :narg), (:block,
            (:line, 3494, :none),
            (:(=), :a, (:ref, :body, :i)),
            (:line, 3495, :none),
            (:if, (:&&, (:call, :isa, :a, :Slot), (:call, :(==), (:., (:(::), :a, :Slot), (:quote, #QuoteNode
                      :id
                    )), (:., :var, (:quote, #QuoteNode
                      :id
                    )))), (:block,
                (:line, 3496, :none),
                (:call, :deleteat!, :body, :i),
                (:line, 3497, :none),
                (:if, (:call, :<, (:call, :+, :i, :ndel), :i0), (:block,
                    (:line, 3498, :none),
                    (:+=, :ndel, 1)
                  )),
                (:line, 3500, :none),
                (:-=, :narg, 1)
              ), (:block,
                (:line, 3502, :none),
                (:+=, :i, 1)
              ))
          )),
        (:line, 3505, :none),
        :ndel
      )),
    (:line, 3508, :none),
    (:function, (:call, :replace_getfield!, (:(::), :linfo, :LambdaInfo), (:(::), :e, :Expr), :tupname, :vals, :field_names, :sv), (:block,
        (:line, 3509, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :e, (:quote, #QuoteNode
                    :args
                  ))))), (:block,
            (:line, 3510, :none),
            (:(=), :a, (:ref, (:., :e, (:quote, #QuoteNode
                    :args
                  )), :i)),
            (:line, 3511, :none),
            (:if, (:&&, (:call, :isa, :a, :Expr), (:&&, (:call, :is_known_call, :a, :getfield, :linfo), (:call, :symequal, (:ref, (:., :a, (:quote, #QuoteNode
                          :args
                        )), 2), :tupname))), (:block,
                (:line, 3513, :none),
                (:(=), :idx, (:if, (:call, :isa, (:ref, (:., :a, (:quote, #QuoteNode
                            :args
                          )), 3), :Int), (:block,
                      (:line, 3514, :none),
                      (:ref, (:., :a, (:quote, #QuoteNode
                            :args
                          )), 3)
                    ), (:block,
                      (:line, 3516, :none),
                      (:macrocall, Symbol("@assert"), (:call, :isa, (:ref, (:., :a, (:quote, #QuoteNode
                                :args
                              )), 3), :QuoteNode)),
                      (:line, 3517, :none),
                      (:call, :findfirst, :field_names, (:., (:ref, (:., :a, (:quote, #QuoteNode
                                :args
                              )), 3), (:quote, #QuoteNode
                            :value
                          )))
                    ))),
                (:line, 3519, :none),
                (:macrocall, Symbol("@assert"), (:call, :>, :idx, 0)),
                (:line, 3520, :none),
                (:(=), :val, (:ref, :vals, :idx)),
                (:line, 3523, :none),
                (:if, (:call, :isa, :val, :Slot), (:block,
                    (:line, 3524, :none),
                    (:(=), :val, (:(::), :val, :Slot)),
                    (:line, 3525, :none),
                    (:(=), :valtyp, (:if, (:call, :isa, :val, :TypedSlot), (:., :val, (:quote, #QuoteNode
                            :typ
                          )), (:ref, (:., :linfo, (:quote, #QuoteNode
                              :slottypes
                            )), (:., :val, (:quote, #QuoteNode
                              :id
                            ))))),
                    (:line, 3526, :none),
                    (:if, (:&&, (:call, :⊑, (:., :a, (:quote, #QuoteNode
                              :typ
                            )), :valtyp), (:call, :!, (:call, :⊑, :valtyp, (:., :a, (:quote, #QuoteNode
                                :typ
                              ))))), (:block,
                        (:line, 3527, :none),
                        (:if, (:call, :isa, :val, :TypedSlot), (:block,
                            (:line, 3528, :none),
                            (:(=), :val, (:call, :TypedSlot, (:., :val, (:quote, #QuoteNode
                                    :id
                                  )), (:., :a, (:quote, #QuoteNode
                                    :typ
                                  ))))
                          )),
                        (:line, 3530, :none),
                        (:(=), (:ref, (:., :linfo, (:quote, #QuoteNode
                                :slottypes
                              )), (:., :val, (:quote, #QuoteNode
                                :id
                              ))), (:call, :widenconst, (:., :a, (:quote, #QuoteNode
                                :typ
                              ))))
                      ))
                  ), (:block,
                    (:line, 3532, :none),
                    (:if, (:call, :isa, :val, :SSAValue), (:block,
                        (:line, 3533, :none),
                        (:(=), :val, (:(::), :val, :SSAValue)),
                        (:line, 3534, :none),
                        (:(=), :typ, (:call, :exprtype, :val, :linfo)),
                        (:line, 3535, :none),
                        (:if, (:&&, (:call, :⊑, (:., :a, (:quote, #QuoteNode
                                  :typ
                                )), :typ), (:call, :!, (:call, :⊑, :typ, (:., :a, (:quote, #QuoteNode
                                    :typ
                                  ))))), (:block,
                            (:line, 3536, :none),
                            (:(=), (:ref, (:., (:., :sv, (:quote, #QuoteNode
                                      :linfo
                                    )), (:quote, #QuoteNode
                                    :ssavaluetypes
                                  )), (:call, :+, (:., :val, (:quote, #QuoteNode
                                      :id
                                    )), 1)), (:., :a, (:quote, #QuoteNode
                                  :typ
                                )))
                          ))
                      ))
                  )),
                (:line, 3539, :none),
                (:(=), (:ref, (:., :e, (:quote, #QuoteNode
                        :args
                      )), :i), :val)
              ), (:block,
                (:line, 3540, :none),
                (:if, (:call, :isa, :a, :Expr), (:block,
                    (:line, 3541, :none),
                    (:call, :replace_getfield!, :linfo, (:(::), :a, :Expr), :tupname, :vals, :field_names, :sv)
                  ))
              ))
          ))
      )),
    (:line, 3547, :none),
    (:function, (:call, :reindex_labels!, (:(::), :linfo, :LambdaInfo), (:(::), :sv, :InferenceState)), (:block,
        (:line, 3548, :none),
        (:(=), :body, (:., :linfo, (:quote, #QuoteNode
              :code
            ))),
        (:line, 3549, :none),
        (:(=), :mapping, (:call, :zeros, :Int, (:., :sv, (:quote, #QuoteNode
                :label_counter
              )))),
        (:line, 3550, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :body))), (:block,
            (:line, 3551, :none),
            (:(=), :el, (:ref, :body, :i)),
            (:line, 3552, :none),
            (:if, (:call, :isa, :el, :LabelNode), (:block,
                (:line, 3553, :none),
                (:(=), (:ref, :mapping, (:., :el, (:quote, #QuoteNode
                        :label
                      ))), :i),
                (:line, 3554, :none),
                (:(=), (:ref, :body, :i), (:call, :LabelNode, :i))
              ))
          )),
        (:line, 3557, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :body))), (:block,
            (:line, 3558, :none),
            (:(=), :el, (:ref, :body, :i)),
            (:line, 3564, :none),
            (:if, (:call, :isa, :el, :GotoNode), (:block,
                (:line, 3565, :none),
                (:(=), :labelnum, (:ref, :mapping, (:., :el, (:quote, #QuoteNode
                        :label
                      )))),
                (:line, 3566, :none),
                (:macrocall, Symbol("@assert"), (:call, :(!==), :labelnum, 0)),
                (:line, 3567, :none),
                (:(=), (:ref, :body, :i), (:call, :GotoNode, :labelnum))
              ), (:block,
                (:line, 3568, :none),
                (:if, (:call, :isa, :el, :Expr), (:block,
                    (:line, 3569, :none),
                    (:(=), :el, (:(::), :el, :Expr)),
                    (:line, 3570, :none),
                    (:if, (:call, :(===), (:., :el, (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :gotoifnot
                        )), (:block,
                        (:line, 3571, :none),
                        (:(=), :labelnum, (:ref, :mapping, (:ref, (:., :el, (:quote, #QuoteNode
                                  :args
                                )), 2))),
                        (:line, 3572, :none),
                        (:if, (:call, :(!==), :labelnum, 0), (:block,
                            (:line, 3573, :none),
                            (:(=), (:ref, (:., :el, (:quote, #QuoteNode
                                    :args
                                  )), 2), (:ref, :mapping, (:ref, (:., :el, (:quote, #QuoteNode
                                      :args
                                    )), 2)))
                          ), (:block,
                            (:line, 3576, :none),
                            (:(=), (:ref, :body, :i), (:ref, (:., :el, (:quote, #QuoteNode
                                    :args
                                  )), 1))
                          ))
                      ), (:block,
                        (:line, 3578, :none),
                        (:if, (:call, :(===), (:., :el, (:quote, #QuoteNode
                                :head
                              )), (:quote, #QuoteNode
                              :enter
                            )), (:block,
                            (:line, 3579, :none),
                            (:(=), :labelnum, (:ref, :mapping, (:ref, (:., :el, (:quote, #QuoteNode
                                      :args
                                    )), 1))),
                            (:line, 3580, :none),
                            (:macrocall, Symbol("@assert"), (:call, :(!==), :labelnum, 0)),
                            (:line, 3581, :none),
                            (:(=), (:ref, (:., :el, (:quote, #QuoteNode
                                    :args
                                  )), 1), :labelnum)
                          ))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 3587, :none),
    (:function, (:call, :return_type, (:(::), :f, :ANY), (:(::), :t, :ANY)), (:block,
        (:line, 3588, :none),
        (:(=), :rt, (:curly, :Union)),
        (:line, 3589, :none),
        (:for, (:(=), :m, (:call, :_methods, :f, :t, -1)), (:block,
            (:line, 3590, :none),
            (:(=), (:tuple, :_, :ty, :inferred), (:call, :typeinf, (:ref, :m, 3), (:ref, :m, 1), (:ref, :m, 2), false)),
            (:line, 3591, :none),
            (:&&, (:call, :!, :inferred), (:return, :Any)),
            (:line, 3592, :none),
            (:(=), :rt, (:call, :tmerge, :rt, :ty)),
            (:line, 3593, :none),
            (:&&, (:call, :(===), :rt, :Any), (:break,))
          )),
        (:line, 3595, :none),
        (:return, :rt)
      )),
    (:line, 3603, :none),
    (:for, (:(=), :m, (:call, :_methods_by_ftype, (:curly, :Tuple, (:call, :typeof, :typeinf_loop), (:curly, :Vararg, :Any)), 10)), (:block,
        (:line, 3604, :none),
        (:call, :typeinf, (:ref, :m, 3), (:ref, :m, 1), (:ref, :m, 2), true)
      )),
    (:line, 3606, :none),
    (:for, (:(=), :m, (:call, :_methods_by_ftype, (:curly, :Tuple, (:call, :typeof, :typeinf_edge), (:curly, :Vararg, :Any)), 10)), (:block,
        (:line, 3607, :none),
        (:call, :typeinf, (:ref, :m, 3), (:ref, :m, 1), (:ref, :m, 2), true)
      ))
  ))