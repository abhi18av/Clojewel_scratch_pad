(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :Random, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:using, :Base, :dSFMT),
        (:line, 6, :none),
        (:toplevel, (:using, :Base, :GMP, :GMP_VERSION), (:using, :Base, :GMP, :Limb)),
        (:line, 7, :none),
        (:toplevel, (:import, :Base, :copymutable), (:import, :Base, :copy), (:import, :Base, :copy!), (:import, :Base, :(==))),
        (:line, 9, :none),
        (:export, :srand, :rand, :rand!, :randn, :randn!, :randexp, :randexp!, :bitrand, :randstring, :randsubseq, :randsubseq!, :shuffle, :shuffle!, :randperm, :randcycle, :AbstractRNG, :MersenneTwister, :RandomDevice, :GLOBAL_RNG, :randjump),
        (:line, 22, :none),
        (:abstract, :AbstractRNG),
        (:line, 24, :none),
        (:abstract, :FloatInterval),
        (:line, 25, :none),
        (:type, true, (:<:, :CloseOpen, :FloatInterval), (:block,
            (:line, 25, :none)
          )),
        (:line, 26, :none),
        (:type, true, (:<:, :Close1Open2, :FloatInterval), (:block,
            (:line, 26, :none)
          )),
        (:line, 31, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 32, :none),
            (:type, false, (:<:, :RandomDevice, :AbstractRNG), (:block,
                (:line, 33, :none),
                (:(::), :buffer, (:curly, :Vector, :UInt128)),
                (:line, 35, :none),
                (:(=), (:call, :RandomDevice), (:block,
                    (:line, 35, :none),
                    (:call, :new, (:call, (:curly, :Array, :UInt128), 1))
                  ))
              )),
            (:line, 38, :none),
            (:function, (:call, (:curly, :rand, (:<:, :T, (:curly, :Union, :Bool, (:., :Base, (:quote, #QuoteNode
                          :BitInteger
                        ))))), (:(::), :rd, :RandomDevice), (:(::), (:curly, :Type, :T))), (:block,
                (:line, 39, :none),
                (:call, :win32_SystemFunction036!, (:., :rd, (:quote, #QuoteNode
                      :buffer
                    ))),
                (:line, 40, :none),
                (:macrocall, Symbol("@inbounds"), (:return, (:call, :%, (:ref, (:., :rd, (:quote, #QuoteNode
                            :buffer
                          )), 1), :T)))
              )),
            (:line, 43, :none),
            (:(=), (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Bool, (:., :Base, (:quote, #QuoteNode
                          :BitInteger
                        ))))), (:(::), :rd, :RandomDevice), (:(::), :A, (:curly, :Array, :T))), (:block,
                (:line, 43, :none),
                (:block,
                  (:call, :win32_SystemFunction036!, :A),
                  :A
                )
              ))
          ), (:block,
            (:line, 45, :none),
            (:type, false, (:<:, :RandomDevice, :AbstractRNG), (:block,
                (:line, 46, :none),
                (:(::), :file, :IOStream),
                (:line, 47, :none),
                (:(::), :unlimited, :Bool),
                (:line, 49, :none),
                (:(=), (:call, :RandomDevice, (:kw, (:(::), :unlimited, :Bool), true)), (:block,
                    (:line, 49, :none),
                    (:call, :new, (:call, :open, (:if, :unlimited, "/dev/urandom", "/dev/random")), :unlimited)
                  ))
              )),
            (:line, 52, :none),
            (:(=), (:call, (:curly, :rand, (:<:, :T, (:curly, :Union, :Bool, (:., :Base, (:quote, #QuoteNode
                          :BitInteger
                        ))))), (:(::), :rd, :RandomDevice), (:(::), (:curly, :Type, :T))), (:block,
                (:line, 52, :none),
                (:call, :read, (:., :rd, (:quote, #QuoteNode
                      :file
                    )), :T)
              )),
            (:line, 53, :none),
            (:(=), (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Bool, (:., :Base, (:quote, #QuoteNode
                          :BitInteger
                        ))))), (:(::), :rd, :RandomDevice), (:(::), :A, (:curly, :Array, :T))), (:block,
                (:line, 53, :none),
                (:call, :read!, (:., :rd, (:quote, #QuoteNode
                      :file
                    )), :A)
              ))
          )),
        (:line, 56, :none),
        (:(=), (:call, :rand, (:(::), :rng, :RandomDevice), (:(::), (:curly, :Type, :Close1Open2))), (:block,
            (:line, 56, :none),
            (:call, :reinterpret, :Float64, (:call, :|, 0x3ff0000000000000, (:call, :&, (:call, :rand, :rng, :UInt64), 0x000fffffffffffff)))
          )),
        (:line, 59, :none),
        (:(=), (:call, :rand, (:(::), :rng, :RandomDevice), (:(::), (:curly, :Type, :CloseOpen))), (:block,
            (:line, 59, :none),
            (:call, :-, (:call, :rand, :rng, :Close1Open2), 1.0)
          )),
        (:line, 64, :none),
        (:const, (:(=), :MTCacheLength, (:call, :dsfmt_get_min_array_size))),
        (:line, 66, :none),
        (:type, true, (:<:, :MersenneTwister, :AbstractRNG), (:block,
            (:line, 67, :none),
            (:(::), :seed, (:curly, :Vector, :UInt32)),
            (:line, 68, :none),
            (:(::), :state, :DSFMT_state),
            (:line, 69, :none),
            (:(::), :vals, (:curly, :Vector, :Float64)),
            (:line, 70, :none),
            (:(::), :idx, :Int),
            (:line, 72, :none),
            (:function, (:call, :MersenneTwister, :seed, :state, :vals, :idx), (:block,
                (:line, 73, :none),
                (:||, (:&&, (:call, :(==), (:call, :length, :vals), :MTCacheLength), (:comparison, 0, :(<=), :idx, :(<=), :MTCacheLength)), (:call, :throw, (:call, :DomainError))),
                (:line, 74, :none),
                (:call, :new, :seed, :state, :vals, :idx)
              ))
          )),
        (:line, 78, :none),
        (:(=), (:call, :MersenneTwister, (:(::), :seed, (:curly, :Vector, :UInt32)), (:(::), :state, :DSFMT_state)), (:block,
            (:line, 78, :none),
            (:call, :MersenneTwister, :seed, :state, (:call, :zeros, :Float64, :MTCacheLength), :MTCacheLength)
          )),
        (:line, 81, :none),
        (:(=), (:call, :MersenneTwister, (:kw, :seed, 0)), (:block,
            (:line, 81, :none),
            (:call, :srand, (:call, :MersenneTwister, (:call, (:curly, :Vector, :UInt32)), (:call, :DSFMT_state)), :seed)
          )),
        (:line, 83, :none),
        (:function, (:call, :copy!, (:(::), :dst, :MersenneTwister), (:(::), :src, :MersenneTwister)), (:block,
            (:line, 84, :none),
            (:call, :copy!, (:call, :resize!, (:., :dst, (:quote, #QuoteNode
                    :seed
                  )), (:call, :length, (:., :src, (:quote, #QuoteNode
                      :seed
                    )))), (:., :src, (:quote, #QuoteNode
                  :seed
                ))),
            (:line, 85, :none),
            (:call, :copy!, (:., :dst, (:quote, #QuoteNode
                  :state
                )), (:., :src, (:quote, #QuoteNode
                  :state
                ))),
            (:line, 86, :none),
            (:call, :copy!, (:., :dst, (:quote, #QuoteNode
                  :vals
                )), (:., :src, (:quote, #QuoteNode
                  :vals
                ))),
            (:line, 87, :none),
            (:(=), (:., :dst, (:quote, #QuoteNode
                  :idx
                )), (:., :src, (:quote, #QuoteNode
                  :idx
                ))),
            (:line, 88, :none),
            :dst
          )),
        (:line, 91, :none),
        (:(=), (:call, :copy, (:(::), :src, :MersenneTwister)), (:block,
            (:line, 91, :none),
            (:call, :MersenneTwister, (:call, :copy, (:., :src, (:quote, #QuoteNode
                    :seed
                  ))), (:call, :copy, (:., :src, (:quote, #QuoteNode
                    :state
                  ))), (:call, :copy, (:., :src, (:quote, #QuoteNode
                    :vals
                  ))), (:., :src, (:quote, #QuoteNode
                  :idx
                )))
          )),
        (:line, 94, :none),
        (:(=), (:call, :(==), (:(::), :r1, :MersenneTwister), (:(::), :r2, :MersenneTwister)), (:block,
            (:line, 94, :none),
            (:&&, (:call, :(==), (:., :r1, (:quote, #QuoteNode
                    :seed
                  )), (:., :r2, (:quote, #QuoteNode
                    :seed
                  ))), (:&&, (:call, :(==), (:., :r1, (:quote, #QuoteNode
                      :state
                    )), (:., :r2, (:quote, #QuoteNode
                      :state
                    ))), (:&&, (:call, :isequal, (:., :r1, (:quote, #QuoteNode
                        :vals
                      )), (:., :r2, (:quote, #QuoteNode
                        :vals
                      ))), (:call, :(==), (:., :r1, (:quote, #QuoteNode
                        :idx
                      )), (:., :r2, (:quote, #QuoteNode
                        :idx
                      ))))))
          )),
        (:line, 100, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mt_avail, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 100, :none),
              (:call, :-, :MTCacheLength, (:., :r, (:quote, #QuoteNode
                    :idx
                  )))
            ))),
        (:line, 101, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mt_empty, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 101, :none),
              (:call, :(==), (:., :r, (:quote, #QuoteNode
                    :idx
                  )), :MTCacheLength)
            ))),
        (:line, 102, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mt_setfull!, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 102, :none),
              (:(=), (:., :r, (:quote, #QuoteNode
                    :idx
                  )), 0)
            ))),
        (:line, 103, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mt_setempty!, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 103, :none),
              (:(=), (:., :r, (:quote, #QuoteNode
                    :idx
                  )), :MTCacheLength)
            ))),
        (:line, 104, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mt_pop!, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 104, :none),
              (:macrocall, Symbol("@inbounds"), (:return, (:ref, (:., :r, (:quote, #QuoteNode
                        :vals
                      )), (:+=, (:., :r, (:quote, #QuoteNode
                          :idx
                        )), 1))))
            ))),
        (:line, 106, :none),
        (:function, (:call, :gen_rand, (:(::), :r, :MersenneTwister)), (:block,
            (:line, 107, :none),
            (:call, :dsfmt_fill_array_close1_open2!, (:., :r, (:quote, #QuoteNode
                  :state
                )), (:call, :pointer, (:., :r, (:quote, #QuoteNode
                    :vals
                  ))), (:call, :length, (:., :r, (:quote, #QuoteNode
                    :vals
                  )))),
            (:line, 108, :none),
            (:call, :mt_setfull!, :r)
          )),
        (:line, 111, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :reserve_1, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 111, :none),
              (:&&, (:call, :mt_empty, :r), (:call, :gen_rand, :r))
            ))),
        (:line, 114, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :reserve, (:(::), :r, :MersenneTwister), (:(::), :n, :Int)), (:block,
              (:line, 114, :none),
              (:&&, (:call, :<, (:call, :mt_avail, :r), :n), (:call, :gen_rand, :r))
            ))),
        (:line, 117, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_inbounds, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :Close1Open2))), (:block,
              (:line, 117, :none),
              (:call, :mt_pop!, :r)
            ))),
        (:line, 118, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_inbounds, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :CloseOpen))), (:block,
              (:line, 118, :none),
              (:call, :-, (:call, :rand_inbounds, :r, :Close1Open2), 1.0)
            ))),
        (:line, 119, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_inbounds, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 119, :none),
              (:call, :rand_inbounds, :r, :CloseOpen)
            ))),
        (:line, 122, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, (:curly, :rand, (:<:, :I, :FloatInterval)), (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :I))), (:block,
              (:line, 122, :none),
              (:block,
                (:call, :reserve_1, :r),
                (:call, :rand_inbounds, :r, :I)
              )
            ))),
        (:line, 124, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_ui52_raw_inbounds, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 124, :none),
              (:call, :reinterpret, :UInt64, (:call, :rand_inbounds, :r, :Close1Open2))
            ))),
        (:line, 125, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_ui52_raw, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 125, :none),
              (:block,
                (:call, :reserve_1, :r),
                (:call, :rand_ui52_raw_inbounds, :r)
              )
            ))),
        (:line, 126, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_ui2x52_raw, (:(::), :r, :MersenneTwister)), (:block,
              (:line, 126, :none),
              (:call, :|, (:call, :<<, (:call, :%, (:call, :rand_ui52_raw, :r), :UInt128), 64), (:call, :rand_ui52_raw, :r))
            ))),
        (:line, 128, :none),
        (:function, (:call, :srand, (:(::), :r, :MersenneTwister), (:(::), :seed, (:curly, :Vector, :UInt32))), (:block,
            (:line, 129, :none),
            (:call, :copy!, (:call, :resize!, (:., :r, (:quote, #QuoteNode
                    :seed
                  )), (:call, :length, :seed)), :seed),
            (:line, 130, :none),
            (:call, :dsfmt_init_by_array, (:., :r, (:quote, #QuoteNode
                  :state
                )), (:., :r, (:quote, #QuoteNode
                  :seed
                ))),
            (:line, 131, :none),
            (:call, :mt_setempty!, :r),
            (:line, 132, :none),
            (:return, :r)
          )),
        (:line, 136, :none),
        (:function, (:call, :randjump, (:(::), :mt, :MersenneTwister), (:(::), :jumps, :Integer), (:(::), :jumppoly, :AbstractString)), (:block,
            (:line, 137, :none),
            (:(=), :mts, (:ref, :MersenneTwister)),
            (:line, 138, :none),
            (:call, :push!, :mts, :mt),
            (:line, 139, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :-, :jumps, 1))), (:block,
                (:line, 140, :none),
                (:(=), :cmt, (:ref, :mts, :end)),
                (:line, 141, :none),
                (:call, :push!, :mts, (:call, :MersenneTwister, (:., :cmt, (:quote, #QuoteNode
                        :seed
                      )), (:call, (:., :dSFMT, (:quote, #QuoteNode
                          :dsfmt_jump
                        )), (:., :cmt, (:quote, #QuoteNode
                          :state
                        )), :jumppoly)))
              )),
            (:line, 143, :none),
            (:return, :mts)
          )),
        (:line, 145, :none),
        (:(=), (:call, :randjump, (:(::), :r, :MersenneTwister), (:(::), :jumps, :Integer)), (:block,
            (:line, 145, :none),
            (:call, :randjump, :r, :jumps, (:., :dSFMT, (:quote, #QuoteNode
                  :JPOLY1e21
                )))
          )),
        (:line, 149, :none),
        (:function, (:call, :__init__), (:block,
            (:line, 150, :none),
            (:try, (:block,
                (:line, 151, :none),
                (:call, :srand)
              ), :ex, (:block,
                (:line, 153, :none),
                (:call, (:., :Base, (:quote, #QuoteNode
                      :showerror_nostdio
                    )), :ex, "WARNING: Error during initialization of module Random")
              ))
          )),
        (:line, 162, :none),
        (:function, (:call, :make_seed), (:block,
            (:line, 163, :none),
            (:try, (:block,
                (:line, 164, :none),
                (:return, (:call, :rand, (:call, :RandomDevice), :UInt32, 4))
              ), false, (:block,
                (:line, 166, :none),
                (:call, :println, :STDERR, "Entropy pool not available to seed RNG; using ad-hoc entropy sources."),
                (:line, 167, :none),
                (:(=), :seed, (:call, :reinterpret, :UInt64, (:call, :time))),
                (:line, 168, :none),
                (:(=), :seed, (:call, :hash, :seed, (:call, :UInt64, (:call, :getpid)))),
                (:line, 169, :none),
                (:try, (:block,
                    (:line, 170, :none),
                    (:(=), :seed, (:call, :hash, :seed, (:call, :parse, :UInt64, (:ref, (:call, :readstring, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "ifconfig"), (:macrocall, Symbol("@cmd"), "sha1sum"))), (:(:), 1, 40)), 16)))
                  ), false, (:block,)),
                (:line, 172, :none),
                (:return, (:call, :make_seed, :seed))
              ))
          )),
        (:line, 176, :none),
        (:function, (:call, :make_seed, (:(::), :n, :Integer)), (:block,
            (:line, 177, :none),
            (:&&, (:call, :<, :n, 0), (:call, :throw, (:call, :DomainError))),
            (:line, 178, :none),
            (:(=), :seed, (:ref, :UInt32)),
            (:line, 179, :none),
            (:while, true, (:block,
                (:line, 180, :none),
                (:call, :push!, :seed, (:call, :&, :n, 0xffffffff)),
                (:line, 181, :none),
                (:>>=, :n, 32),
                (:line, 182, :none),
                (:if, (:call, :(==), :n, 0), (:block,
                    (:line, 183, :none),
                    (:return, :seed)
                  ))
              ))
          )),
        (:line, 188, :none),
        (:function, (:call, :make_seed, (:(::), :filename, :AbstractString), (:(::), :n, :Integer)), (:block,
            (:line, 189, :none),
            (:call, :read!, :filename, (:call, (:curly, :Array, :UInt32), (:call, :Int, :n)))
          )),
        (:line, 194, :none),
        (:(=), (:call, :srand, (:(::), :r, :MersenneTwister)), (:block,
            (:line, 194, :none),
            (:call, :srand, :r, (:call, :make_seed))
          )),
        (:line, 195, :none),
        (:(=), (:call, :srand, (:(::), :r, :MersenneTwister), (:(::), :n, :Integer)), (:block,
            (:line, 195, :none),
            (:call, :srand, :r, (:call, :make_seed, :n))
          )),
        (:line, 196, :none),
        (:(=), (:call, :srand, (:(::), :r, :MersenneTwister), (:(::), :filename, :AbstractString), (:kw, (:(::), :n, :Integer), 4)), (:block,
            (:line, 196, :none),
            (:call, :srand, :r, (:call, :make_seed, :filename, :n))
          )),
        (:line, 199, :none),
        (:function, (:call, :dsfmt_gv_srand), (:block,
            (:line, 201, :none),
            (:call, :dsfmt_gv_init_by_array, (:call, :+, (:., :GLOBAL_RNG, (:quote, #QuoteNode
                    :seed
                  )), (:call, :UInt32, 1))),
            (:line, 202, :none),
            (:return, :GLOBAL_RNG)
          )),
        (:line, 205, :none),
        (:function, (:call, :srand), (:block,
            (:line, 206, :none),
            (:call, :srand, :GLOBAL_RNG),
            (:line, 207, :none),
            (:call, :dsfmt_gv_srand)
          )),
        (:line, 210, :none),
        (:function, (:call, :srand, (:(::), :seed, (:curly, :Union, :Integer, (:curly, :Vector, :UInt32)))), (:block,
            (:line, 211, :none),
            (:call, :srand, :GLOBAL_RNG, :seed),
            (:line, 212, :none),
            (:call, :dsfmt_gv_srand)
          )),
        (:line, 215, :none),
        (:function, (:call, :srand, (:(::), :filename, :AbstractString), (:kw, (:(::), :n, :Integer), 4)), (:block,
            (:line, 216, :none),
            (:call, :srand, :GLOBAL_RNG, :filename, :n),
            (:line, 217, :none),
            (:call, :dsfmt_gv_srand)
          )),
        (:line, 222, :none),
        (:const, (:(=), :GLOBAL_RNG, (:call, :MersenneTwister))),
        (:line, 223, :none),
        (:(=), (:call, :globalRNG), (:block,
            (:line, 223, :none),
            :GLOBAL_RNG
          )),
        (:line, 227, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand), (:block,
              (:line, 227, :none),
              (:call, :rand, :GLOBAL_RNG, :CloseOpen)
            ))),
        (:line, 228, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand, (:(::), :T, :Type)), (:block,
              (:line, 228, :none),
              (:call, :rand, :GLOBAL_RNG, :T)
            ))),
        (:line, 229, :none),
        (:(=), (:call, :rand, (:(::), :dims, :Dims)), (:block,
            (:line, 229, :none),
            (:call, :rand, :GLOBAL_RNG, :dims)
          )),
        (:line, 230, :none),
        (:(=), (:call, :rand, (:..., (:(::), :dims, :Integer))), (:block,
            (:line, 230, :none),
            (:call, :rand, (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims))
          )),
        (:line, 231, :none),
        (:(=), (:call, :rand, (:(::), :T, :Type), (:(::), :dims, :Dims)), (:block,
            (:line, 231, :none),
            (:call, :rand, :GLOBAL_RNG, :T, :dims)
          )),
        (:line, 232, :none),
        (:(=), (:call, :rand, (:(::), :T, :Type), (:(::), :d1, :Integer), (:..., (:(::), :dims, :Integer))), (:block,
            (:line, 232, :none),
            (:call, :rand, :T, (:call, :tuple, (:call, :Int, :d1), (:..., (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims))))
          )),
        (:line, 233, :none),
        (:(=), (:call, :rand!, (:(::), :A, :AbstractArray)), (:block,
            (:line, 233, :none),
            (:call, :rand!, :GLOBAL_RNG, :A)
          )),
        (:line, 235, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractArray)), (:block,
            (:line, 235, :none),
            (:call, :rand, :GLOBAL_RNG, :r)
          )),
        (:line, 236, :none),
        (:(=), (:call, :rand!, (:(::), :A, :AbstractArray), (:(::), :r, :AbstractArray)), (:block,
            (:line, 236, :none),
            (:call, :rand!, :GLOBAL_RNG, :A, :r)
          )),
        (:line, 238, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractArray), (:(::), :dims, :Dims)), (:block,
            (:line, 238, :none),
            (:call, :rand, :GLOBAL_RNG, :r, :dims)
          )),
        (:line, 239, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractArray), (:..., (:(::), :dims, :Integer))), (:block,
            (:line, 239, :none),
            (:call, :rand, :GLOBAL_RNG, :r, (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims))
          )),
        (:line, 243, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand, (:(::), :r, :AbstractRNG)), (:block,
              (:line, 243, :none),
              (:call, :rand, :r, :CloseOpen)
            ))),
        (:line, 246, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand, (:(::), :r, (:curly, :Union, :RandomDevice, :MersenneTwister)), (:(::), (:curly, :Type, :Float64))), (:block,
              (:line, 246, :none),
              (:call, :rand, :r, :CloseOpen)
            ))),
        (:line, 248, :none),
        (:(=), (:call, :rand_ui10_raw, (:(::), :r, :MersenneTwister)), (:block,
            (:line, 248, :none),
            (:call, :rand_ui52_raw, :r)
          )),
        (:line, 249, :none),
        (:(=), (:call, :rand_ui23_raw, (:(::), :r, :MersenneTwister)), (:block,
            (:line, 249, :none),
            (:call, :rand_ui52_raw, :r)
          )),
        (:line, 250, :none),
        (:(=), (:call, :rand_ui10_raw, (:(::), :r, :AbstractRNG)), (:block,
            (:line, 250, :none),
            (:call, :rand, :r, :UInt16)
          )),
        (:line, 251, :none),
        (:(=), (:call, :rand_ui23_raw, (:(::), :r, :AbstractRNG)), (:block,
            (:line, 251, :none),
            (:call, :rand, :r, :UInt32)
          )),
        (:line, 253, :none),
        (:(=), (:call, :rand, (:(::), :r, (:curly, :Union, :RandomDevice, :MersenneTwister)), (:(::), (:curly, :Type, :Float16))), (:block,
            (:line, 253, :none),
            (:call, :Float16, (:call, :-, (:call, :reinterpret, :Float32, (:call, :|, (:call, :&, (:call, :<<, (:call, :%, (:call, :rand_ui10_raw, :r), :UInt32), 13), 0x007fe000), 0x3f800000)), 1))
          )),
        (:line, 256, :none),
        (:(=), (:call, :rand, (:(::), :r, (:curly, :Union, :RandomDevice, :MersenneTwister)), (:(::), (:curly, :Type, :Float32))), (:block,
            (:line, 256, :none),
            (:call, :-, (:call, :reinterpret, :Float32, (:call, :|, (:call, :&, (:call, :%, (:call, :rand_ui23_raw, :r), :UInt32), 0x007fffff), 0x3f800000)), 1)
          )),
        (:line, 262, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_ui52_raw, (:(::), :r, :AbstractRNG)), (:block,
              (:line, 262, :none),
              (:call, :reinterpret, :UInt64, (:call, :rand, :r, :Close1Open2))
            ))),
        (:line, 263, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :rand_ui52, (:(::), :r, :AbstractRNG)), (:block,
              (:line, 263, :none),
              (:call, :&, (:call, :rand_ui52_raw, :r), 0x000fffffffffffff)
            ))),
        (:line, 267, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, (:curly, :rand, (:<:, :T, (:curly, :Union, :Bool, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32))), (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :T))), (:block,
              (:line, 267, :none),
              (:call, :%, (:call, :rand_ui52_raw, :r), :T)
            ))),
        (:line, 269, :none),
        (:function, (:call, :rand, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :UInt64))), (:block,
            (:line, 270, :none),
            (:call, :reserve, :r, 2),
            (:line, 271, :none),
            (:call, :$, (:call, :<<, (:call, :rand_ui52_raw_inbounds, :r), 32), (:call, :rand_ui52_raw_inbounds, :r))
          )),
        (:line, 274, :none),
        (:function, (:call, :rand, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :UInt128))), (:block,
            (:line, 275, :none),
            (:call, :reserve, :r, 3),
            (:line, 276, :none),
            (:call, :$, (:call, :$, (:call, :<<, (:call, :%, (:call, :rand_ui52_raw_inbounds, :r), :UInt128), 96), (:call, :<<, (:call, :%, (:call, :rand_ui52_raw_inbounds, :r), :UInt128), 48)), (:call, :rand_ui52_raw_inbounds, :r))
          )),
        (:line, 281, :none),
        (:(=), (:call, :rand, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :Int64))), (:block,
            (:line, 281, :none),
            (:call, :reinterpret, :Int64, (:call, :rand, :r, :UInt64))
          )),
        (:line, 282, :none),
        (:(=), (:call, :rand, (:(::), :r, :MersenneTwister), (:(::), (:curly, :Type, :Int128))), (:block,
            (:line, 282, :none),
            (:call, :reinterpret, :Int128, (:call, :rand, :r, :UInt128))
          )),
        (:line, 286, :none),
        (:(=), (:call, (:curly, :rand, (:<:, :T, :Real)), (:(::), :r, :AbstractRNG), (:(::), (:curly, :Type, (:curly, :Complex, :T)))), (:block,
            (:line, 286, :none),
            (:call, :complex, (:call, :rand, :r, :T), (:call, :rand, :r, :T))
          )),
        (:line, 290, :none),
        (:function, (:call, :rand, (:(::), :r, :AbstractRNG), (:(::), (:curly, :Type, :Char))), (:block,
            (:line, 291, :none),
            (:(=), :c, (:call, :rand, :r, (:(:), 0x00000000, 0x0010f7ff))),
            (:line, 292, :none),
            (:if, (:call, :<, :c, 0xd800), (:call, :Char, :c), (:call, :Char, (:call, :+, :c, 0x0800)))
          )),
        (:line, 297, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractRNG), (:(::), :dims, :Dims)), (:block,
            (:line, 297, :none),
            (:call, :rand, :r, :Float64, :dims)
          )),
        (:line, 298, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractRNG), (:..., (:(::), :dims, :Integer))), (:block,
            (:line, 298, :none),
            (:call, :rand, :r, (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims))
          )),
        (:line, 300, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractRNG), (:(::), :T, :Type), (:(::), :dims, :Dims)), (:block,
            (:line, 300, :none),
            (:call, :rand!, :r, (:call, (:curly, :Array, :T), :dims))
          )),
        (:line, 301, :none),
        (:(=), (:call, :rand, (:(::), :r, :AbstractRNG), (:(::), :T, :Type), (:(::), :d1, :Integer), (:..., (:(::), :dims, :Integer))), (:block,
            (:line, 301, :none),
            (:call, :rand, :r, :T, (:call, :tuple, (:call, :Int, :d1), (:..., (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims))))
          )),
        (:line, 306, :none),
        (:function, (:call, (:curly, :rand!, :T), (:(::), :r, :AbstractRNG), (:(::), :A, (:curly, :AbstractArray, :T))), (:block,
            (:line, 307, :none),
            (:for, (:(=), :i, (:call, :eachindex, :A)), (:block,
                (:line, 308, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :rand, :r, :T)))
              )),
            (:line, 310, :none),
            :A
          )),
        (:line, 315, :none),
        (:function, (:call, (:curly, :rand_AbstractArray_Float64!, (:<:, :I, :FloatInterval)), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :AbstractArray, :Float64)), (:kw, :n, (:call, :length, :A)), (:kw, (:(::), (:curly, :Type, :I)), :CloseOpen)), (:block,
            (:line, 320, :none),
            (:(=), :m, 0),
            (:line, 321, :none),
            (:while, (:call, :<, :m, :n), (:block,
                (:line, 322, :none),
                (:(=), :s, (:call, :mt_avail, :r)),
                (:line, 323, :none),
                (:if, (:call, :(==), :s, 0), (:block,
                    (:line, 324, :none),
                    (:call, :gen_rand, :r),
                    (:line, 325, :none),
                    (:(=), :s, (:call, :mt_avail, :r))
                  )),
                (:line, 327, :none),
                (:(=), :m2, (:call, :min, :n, (:call, :+, :m, :s))),
                (:line, 328, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :m, 1), :m2)), (:block,
                    (:line, 329, :none),
                    (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :rand_inbounds, :r, :I)))
                  )),
                (:line, 331, :none),
                (:(=), :m, :m2)
              )),
            (:line, 333, :none),
            :A
          )),
        (:line, 336, :none),
        (:(=), (:call, :rand!, (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :AbstractArray, :Float64))), (:block,
            (:line, 336, :none),
            (:call, :rand_AbstractArray_Float64!, :r, :A)
          )),
        (:line, 338, :none),
        (:(=), (:call, :fill_array!, (:(::), :s, :DSFMT_state), (:(::), :A, (:curly, :Ptr, :Float64)), (:(::), :n, :Int), (:(::), (:curly, :Type, :CloseOpen))), (:block,
            (:line, 338, :none),
            (:call, :dsfmt_fill_array_close_open!, :s, :A, :n)
          )),
        (:line, 339, :none),
        (:(=), (:call, :fill_array!, (:(::), :s, :DSFMT_state), (:(::), :A, (:curly, :Ptr, :Float64)), (:(::), :n, :Int), (:(::), (:curly, :Type, :Close1Open2))), (:block,
            (:line, 339, :none),
            (:call, :dsfmt_fill_array_close1_open2!, :s, :A, :n)
          )),
        (:line, 341, :none),
        (:function, (:call, (:curly, :rand!, (:<:, :I, :FloatInterval)), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :Float64)), (:kw, (:(::), :n, :Int), (:call, :length, :A)), (:kw, (:(::), (:curly, :Type, :I)), :CloseOpen)), (:block,
            (:line, 348, :none),
            (:if, (:call, :>, :n, (:call, :length, :A)), (:block,
                (:line, 349, :none),
                (:call, :throw, (:call, :BoundsError, :A, :n))
              )),
            (:line, 351, :none),
            (:(=), :n2, (:call, :*, (:call, :÷, (:call, :-, :n, 2), 2), 2)),
            (:line, 352, :none),
            (:if, (:call, :<, :n2, (:call, :dsfmt_get_min_array_size)), (:block,
                (:line, 353, :none),
                (:call, :rand_AbstractArray_Float64!, :r, :A, :n, :I)
              ), (:block,
                (:line, 355, :none),
                (:(=), :pA, (:call, :pointer, :A)),
                (:line, 356, :none),
                (:(=), :align, (:call, :%, (:call, :Csize_t, :pA), 16)),
                (:line, 357, :none),
                (:if, (:call, :>, :align, 0), (:block,
                    (:line, 358, :none),
                    (:(=), :pA2, (:call, :-, (:call, :+, :pA, 16), :align)),
                    (:line, 359, :none),
                    (:call, :fill_array!, (:., :r, (:quote, #QuoteNode
                          :state
                        )), :pA2, :n2, :I),
                    (:line, 360, :none),
                    (:call, :unsafe_copy!, :pA, :pA2, :n2)
                  ), (:block,
                    (:line, 362, :none),
                    (:call, :fill_array!, (:., :r, (:quote, #QuoteNode
                          :state
                        )), :pA, :n2, :I)
                  )),
                (:line, 364, :none),
                (:for, (:(=), :i, (:(:), (:call, :+, :n2, 1), :n)), (:block,
                    (:line, 365, :none),
                    (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :rand, :r, :I)))
                  ))
              )),
            (:line, 368, :none),
            :A
          )),
        (:line, 371, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mask128, (:(::), :u, :UInt128), (:(::), (:curly, :Type, :Float16))), (:block,
              (:line, 371, :none),
              (:call, :|, (:call, :&, :u, (:macrocall, Symbol("@uint128_str"), "0x03ff03ff03ff03ff03ff03ff03ff03ff")), (:macrocall, Symbol("@uint128_str"), "0x3c003c003c003c003c003c003c003c00"))
            ))),
        (:line, 372, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :mask128, (:(::), :u, :UInt128), (:(::), (:curly, :Type, :Float32))), (:block,
              (:line, 372, :none),
              (:call, :|, (:call, :&, :u, (:macrocall, Symbol("@uint128_str"), "0x007fffff007fffff007fffff007fffff")), (:macrocall, Symbol("@uint128_str"), "0x3f8000003f8000003f8000003f800000"))
            ))),
        (:line, 374, :none),
        (:function, (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Float16, :Float32))), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :T)), (:(::), (:curly, :Type, :Close1Open2))), (:block,
            (:line, 375, :none),
            (:(=), :n, (:call, :length, :A)),
            (:line, 376, :none),
            (:(=), :n128, (:call, :÷, (:call, :*, :n, (:call, :sizeof, :T)), 16)),
            (:line, 377, :none),
            (:call, :rand!, :r, (:call, :unsafe_wrap, :Array, (:call, :convert, (:curly, :Ptr, :Float64), (:call, :pointer, :A)), (:call, :*, 2, :n128)), (:call, :*, 2, :n128), :Close1Open2),
            (:line, 378, :none),
            (:(=), :A128, (:call, :unsafe_wrap, :Array, (:call, :convert, (:curly, :Ptr, :UInt128), (:call, :pointer, :A)), :n128)),
            (:line, 379, :none),
            (:macrocall, Symbol("@inbounds"), (:for, (:(=), :i, (:(:), 1, :n128)), (:block,
                  (:line, 380, :none),
                  (:(=), :u, (:ref, :A128, :i)),
                  (:line, 381, :none),
                  (:$=, :u, (:call, :<<, :u, 26)),
                  (:line, 390, :none),
                  (:(=), (:ref, :A128, :i), (:call, :mask128, :u, :T))
                ))),
            (:line, 392, :none),
            (:for, (:(=), :i, (:(:), (:call, :+, (:call, :÷, (:call, :*, 16, :n128), (:call, :sizeof, :T)), 1), :n)), (:block,
                (:line, 393, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :+, (:call, :rand, :r, :T), (:call, :one, :T))))
              )),
            (:line, 395, :none),
            :A
          )),
        (:line, 398, :none),
        (:function, (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Float16, :Float32))), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :T)), (:(::), (:curly, :Type, :CloseOpen))), (:block,
            (:line, 399, :none),
            (:call, :rand!, :r, :A, :Close1Open2),
            (:line, 400, :none),
            (:(=), :I32, (:call, :one, :Float32)),
            (:line, 401, :none),
            (:for, (:(=), :i, (:call, :eachindex, :A)), (:block,
                (:line, 402, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :T, (:call, :-, (:call, :Float32, (:ref, :A, :i)), :I32))))
              )),
            (:line, 404, :none),
            :A
          )),
        (:line, 407, :none),
        (:(=), (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Float16, :Float32))), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :T))), (:block,
            (:line, 407, :none),
            (:call, :rand!, :r, :A, :CloseOpen)
          )),
        (:line, 410, :none),
        (:function, (:call, :rand!, (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :UInt128)), (:kw, (:(::), :n, :Int), (:call, :length, :A))), (:block,
            (:line, 411, :none),
            (:if, (:call, :>, :n, (:call, :length, :A)), (:block,
                (:line, 412, :none),
                (:call, :throw, (:call, :BoundsError, :A, :n))
              )),
            (:line, 414, :none),
            (:(=), :Af, (:call, :unsafe_wrap, :Array, (:call, :convert, (:curly, :Ptr, :Float64), (:call, :pointer, :A)), (:call, :*, 2, :n))),
            (:line, 415, :none),
            (:(=), :i, :n),
            (:line, 416, :none),
            (:while, true, (:block,
                (:line, 417, :none),
                (:call, :rand!, :r, :Af, (:call, :*, 2, :i), :Close1Open2),
                (:line, 418, :none),
                (:&&, (:call, :<, :n, 5), (:break,)),
                (:line, 419, :none),
                (:(=), :i, 0),
                (:line, 420, :none),
                (:macrocall, Symbol("@inbounds"), (:while, (:call, :(>=), (:call, :-, :n, :i), 5), (:block,
                      (:line, 421, :none),
                      (:(=), :u, (:ref, :A, (:+=, :i, 1))),
                      (:line, 422, :none),
                      (:$=, (:ref, :A, :n), (:call, :<<, :u, 48)),
                      (:line, 423, :none),
                      (:$=, (:ref, :A, (:-=, :n, 1)), (:call, :<<, :u, 36)),
                      (:line, 424, :none),
                      (:$=, (:ref, :A, (:-=, :n, 1)), (:call, :<<, :u, 24)),
                      (:line, 425, :none),
                      (:$=, (:ref, :A, (:-=, :n, 1)), (:call, :<<, :u, 12)),
                      (:line, 426, :none),
                      (:-=, :n, 1)
                    )))
              )),
            (:line, 429, :none),
            (:if, (:call, :>, :n, 0), (:block,
                (:line, 430, :none),
                (:(=), :u, (:call, :rand_ui2x52_raw, :r)),
                (:line, 431, :none),
                (:for, (:(=), :i, (:(:), 1, :n)), (:block,
                    (:line, 432, :none),
                    (:macrocall, Symbol("@inbounds"), (:$=, (:ref, :A, :i), (:call, :<<, :u, (:call, :*, 12, :i))))
                  ))
              )),
            (:line, 435, :none),
            :A
          )),
        (:line, 438, :none),
        (:function, (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Int8, :UInt8, :Int16, :UInt16, :Int32, :UInt32, :Int64, :UInt64, :Int128))), (:(::), :r, :MersenneTwister), (:(::), :A, (:curly, :Array, :T))), (:block,
            (:line, 439, :none),
            (:(=), :n, (:call, :length, :A)),
            (:line, 440, :none),
            (:(=), :n128, (:call, :÷, (:call, :*, :n, (:call, :sizeof, :T)), 16)),
            (:line, 441, :none),
            (:call, :rand!, :r, (:call, :unsafe_wrap, :Array, (:call, :convert, (:curly, :Ptr, :UInt128), (:call, :pointer, :A)), :n128)),
            (:line, 442, :none),
            (:for, (:(=), :i, (:(:), (:call, :+, (:call, :÷, (:call, :*, 16, :n128), (:call, :sizeof, :T)), 1), :n)), (:block,
                (:line, 443, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :rand, :r, :T)))
              )),
            (:line, 445, :none),
            :A
          )),
        (:line, 451, :none),
        (:(=), (:call, :rem_knuth, (:(::), :a, :UInt), (:(::), :b, :UInt)), (:block,
            (:line, 451, :none),
            (:call, :+, (:call, :%, :a, (:call, :+, :b, (:call, :(==), :b, 0))), (:call, :*, :a, (:call, :(==), :b, 0)))
          )),
        (:line, 452, :none),
        (:(=), (:call, (:curly, :rem_knuth, (:<:, :T, :Unsigned)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
            (:line, 452, :none),
            (:if, (:call, :(!=), :b, 0), (:call, :%, :a, :b), :a)
          )),
        (:line, 457, :none),
        (:(=), (:call, (:curly, :maxmultiple, (:<:, :T, :Unsigned)), (:(::), :k, :T)), (:block,
            (:line, 457, :none),
            (:(::), (:call, :-, (:call, :+, (:call, :*, (:call, :div, (:call, :+, (:call, :-, (:call, :typemax, :T), :k), (:call, :one, :k)), (:call, :+, :k, (:call, :(==), :k, 0))), :k), :k), (:call, :one, :k)), :T)
          )),
        (:line, 460, :none),
        (:(=), (:call, :maxmultiplemix, (:(::), :k, :UInt64)), (:block,
            (:line, 460, :none),
            (:if, (:call, :(!=), (:call, :>>, :k, 32), 0), (:block,
                (:line, 460, :none),
                (:call, :maxmultiple, :k)
              ), (:block,
                (:line, 460, :none),
                (:(::), (:call, :-, (:call, :*, (:call, :div, 0x0000000100000000, (:call, :+, :k, (:call, :(==), :k, 0))), :k), (:call, :one, :k)), :UInt64)
              ))
          )),
        (:line, 462, :none),
        (:abstract, :RangeGenerator),
        (:line, 464, :none),
        (:type, false, (:<:, (:curly, :RangeGeneratorInt, (:<:, :T, :Integer), (:<:, :U, :Unsigned)), :RangeGenerator), (:block,
            (:line, 465, :none),
            (:(::), :a, :T),
            (:line, 466, :none),
            (:(::), :k, :U),
            (:line, 467, :none),
            (:(::), :u, :U)
          )),
        (:line, 470, :none),
        (:(=), (:call, (:curly, :RangeGeneratorInt, :T, (:<:, :U, (:curly, :Union, :UInt32, :UInt128))), (:(::), :a, :T), (:(::), :k, :U)), (:block,
            (:line, 470, :none),
            (:call, (:curly, :RangeGeneratorInt, :T, :U), :a, :k, (:call, :maxmultiple, :k))
          )),
        (:line, 472, :none),
        (:(=), (:call, (:curly, :RangeGeneratorInt, :T), (:(::), :a, :T), (:(::), :k, :UInt64)), (:block,
            (:line, 472, :none),
            (:call, (:curly, :RangeGeneratorInt, :T, :UInt64), :a, :k, (:call, :maxmultiplemix, :k))
          )),
        (:line, 474, :none),
        (:(=), (:call, (:curly, :RangeGenerator, (:<:, :T, :Unsigned)), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
            (:line, 474, :none),
            (:block,
              (:line, 475, :none),
              (:if, (:call, :isempty, :r), (:block,
                  (:line, 476, :none),
                  (:call, :throw, (:call, :ArgumentError, "range must be non-empty"))
                )),
              (:line, 478, :none),
              (:call, :RangeGeneratorInt, (:call, :first, :r), (:call, :+, (:call, :-, (:call, :last, :r), (:call, :first, :r)), (:call, :one, :T)))
            )
          )),
        (:line, 482, :none),
        (:for, (:(=), (:tuple, :T, :U), (:vect, (:tuple, :UInt8, :UInt32), (:tuple, :UInt16, :UInt32), (:tuple, :Int8, :UInt32), (:tuple, :Int16, :UInt32), (:tuple, :Int32, :UInt32), (:tuple, :Int64, :UInt64), (:tuple, :Int128, :UInt128), (:tuple, :Bool, :UInt32))), (:block,
            (:line, 486, :none),
            (:macrocall, Symbol("@eval"), (:(=), (:call, :RangeGenerator, (:(::), :r, (:curly, :UnitRange, (:$, :T)))), (:block,
                  (:line, 486, :none),
                  (:block,
                    (:line, 487, :none),
                    (:if, (:call, :isempty, :r), (:block,
                        (:line, 488, :none),
                        (:call, :throw, (:call, :ArgumentError, "range must be non-empty"))
                      )),
                    (:line, 490, :none),
                    (:call, :RangeGeneratorInt, (:call, :first, :r), (:call, :convert, (:$, :U), (:call, :+, (:call, :unsigned, (:call, :-, (:call, :last, :r), (:call, :first, :r))), (:call, :one, (:$, :U)))))
                  )
                )))
          )),
        (:line, 494, :none),
        (:if, (:call, :(>=), (:., :GMP_VERSION, (:quote, #QuoteNode
                :major
              )), 6), (:block,
            (:line, 495, :none),
            (:type, false, (:<:, :RangeGeneratorBigInt, :RangeGenerator), (:block,
                (:line, 496, :none),
                (:(::), :a, :BigInt),
                (:line, 497, :none),
                (:(::), :m, :BigInt),
                (:line, 498, :none),
                (:(::), :nlimbs, :Int),
                (:line, 499, :none),
                (:(::), :mask, :Limb)
              ))
          ), (:block,
            (:line, 503, :none),
            (:type, false, (:<:, :RangeGeneratorBigInt, :RangeGenerator), (:block,
                (:line, 504, :none),
                (:(::), :a, :BigInt),
                (:line, 505, :none),
                (:(::), :m, :BigInt),
                (:line, 506, :none),
                (:(::), :limbs, (:curly, :Vector, :Limb)),
                (:line, 507, :none),
                (:(::), :mask, :Limb),
                (:line, 509, :none),
                (:(=), (:call, :RangeGeneratorBigInt, :a, :m, :nlimbs, :mask), (:block,
                    (:line, 509, :none),
                    (:call, :new, :a, :m, (:call, (:curly, :Array, :Limb), :nlimbs), :mask)
                  ))
              ))
          )),
        (:line, 514, :none),
        (:function, (:call, :RangeGenerator, (:(::), :r, (:curly, :UnitRange, :BigInt))), (:block,
            (:line, 515, :none),
            (:(=), :m, (:call, :-, (:call, :last, :r), (:call, :first, :r))),
            (:line, 516, :none),
            (:&&, (:call, :<, :m, 0), (:call, :throw, (:call, :ArgumentError, "range must be non-empty"))),
            (:line, 517, :none),
            (:(=), :nd, (:call, :ndigits, :m, 2)),
            (:line, 518, :none),
            (:(=), (:tuple, :nlimbs, :highbits), (:call, :divrem, :nd, (:call, :*, 8, (:call, :sizeof, :Limb)))),
            (:line, 519, :none),
            (:&&, (:call, :>, :highbits, 0), (:+=, :nlimbs, 1)),
            (:line, 520, :none),
            (:(=), :mask, (:if, (:call, :(==), :highbits, 0), (:call, :~, (:call, :zero, :Limb)), (:call, :-, (:call, :<<, (:call, :one, :Limb), :highbits), (:call, :one, :Limb)))),
            (:line, 521, :none),
            (:return, (:call, :RangeGeneratorBigInt, (:call, :first, :r), :m, :nlimbs, :mask))
          )),
        (:line, 527, :none),
        (:function, (:call, (:curly, :rand, (:<:, :T, (:curly, :Union, :UInt64, :Int64))), (:(::), :rng, :AbstractRNG), (:(::), :g, (:curly, :RangeGeneratorInt, :T, :UInt64))), (:block,
            (:line, 528, :none),
            (:local, (:(::), :x, :UInt64)),
            (:line, 529, :none),
            (:if, (:call, :(==), (:call, :>>, (:call, :-, (:., :g, (:quote, #QuoteNode
                        :k
                      )), 1), 32), 0), (:block,
                (:line, 530, :none),
                (:(=), :x, (:call, :rand, :rng, :UInt32)),
                (:line, 531, :none),
                (:while, (:call, :>, :x, (:., :g, (:quote, #QuoteNode
                        :u
                      ))), (:block,
                    (:line, 532, :none),
                    (:(=), :x, (:call, :rand, :rng, :UInt32))
                  ))
              ), (:block,
                (:line, 535, :none),
                (:(=), :x, (:call, :rand, :rng, :UInt64)),
                (:line, 536, :none),
                (:while, (:call, :>, :x, (:., :g, (:quote, #QuoteNode
                        :u
                      ))), (:block,
                    (:line, 537, :none),
                    (:(=), :x, (:call, :rand, :rng, :UInt64))
                  ))
              )),
            (:line, 540, :none),
            (:return, (:call, :reinterpret, :T, (:call, :+, (:call, :reinterpret, :UInt64, (:., :g, (:quote, #QuoteNode
                        :a
                      ))), (:call, :rem_knuth, :x, (:., :g, (:quote, #QuoteNode
                        :k
                      ))))))
          )),
        (:line, 543, :none),
        (:function, (:call, (:curly, :rand, (:<:, :T, :Integer), (:<:, :U, :Unsigned)), (:(::), :rng, :AbstractRNG), (:(::), :g, (:curly, :RangeGeneratorInt, :T, :U))), (:block,
            (:line, 544, :none),
            (:(=), :x, (:call, :rand, :rng, :U)),
            (:line, 545, :none),
            (:while, (:call, :>, :x, (:., :g, (:quote, #QuoteNode
                    :u
                  ))), (:block,
                (:line, 546, :none),
                (:(=), :x, (:call, :rand, :rng, :U))
              )),
            (:line, 548, :none),
            (:call, :%, (:call, :+, (:call, :unsigned, (:., :g, (:quote, #QuoteNode
                      :a
                    ))), (:call, :rem_knuth, :x, (:., :g, (:quote, #QuoteNode
                      :k
                    )))), :T)
          )),
        (:line, 551, :none),
        (:if, (:call, :(>=), (:., :GMP_VERSION, (:quote, #QuoteNode
                :major
              )), 6), (:block,
            (:line, 553, :none),
            (:function, (:call, :rand, (:(::), :rng, :AbstractRNG), (:(::), :g, :RangeGeneratorBigInt)), (:block,
                (:line, 554, :none),
                (:(=), :x, (:call, :BigInt)),
                (:line, 555, :none),
                (:while, true, (:block,
                    (:line, 557, :none),
                    (:(=), :xd, (:ccall, (:tuple, (:quote, #QuoteNode
                            :__gmpz_limbs_write
                          ), (:quote, #QuoteNode
                            :libgmp
                          )), (:curly, :Ptr, :Limb), (:tuple, (:curly, :Ptr, :BigInt), :Clong), (:&, :x), (:., :g, (:quote, #QuoteNode
                            :nlimbs
                          )))),
                    (:line, 558, :none),
                    (:(=), :limbs, (:call, :unsafe_wrap, :Array, :xd, (:., :g, (:quote, #QuoteNode
                            :nlimbs
                          )))),
                    (:line, 559, :none),
                    (:call, :rand!, :rng, :limbs),
                    (:line, 560, :none),
                    (:&=, (:ref, :limbs, :end), (:., :g, (:quote, #QuoteNode
                          :mask
                        ))),
                    (:line, 561, :none),
                    (:ccall, (:tuple, (:quote, #QuoteNode
                          :__gmpz_limbs_finish
                        ), (:quote, #QuoteNode
                          :libgmp
                        )), :Void, (:tuple, (:curly, :Ptr, :BigInt), :Clong), (:&, :x), (:., :g, (:quote, #QuoteNode
                          :nlimbs
                        ))),
                    (:line, 562, :none),
                    (:&&, (:call, :(<=), :x, (:., :g, (:quote, #QuoteNode
                            :m
                          ))), (:break,))
                  )),
                (:line, 564, :none),
                (:ccall, (:tuple, (:quote, #QuoteNode
                      :__gmpz_add
                    ), (:quote, #QuoteNode
                      :libgmp
                    )), :Void, (:tuple, (:curly, :Ptr, :BigInt), (:curly, :Ptr, :BigInt), (:curly, :Ptr, :BigInt)), (:&, :x), (:&, :x), (:&, (:., :g, (:quote, #QuoteNode
                        :a
                      )))),
                (:line, 565, :none),
                (:return, :x)
              ))
          ), (:block,
            (:line, 568, :none),
            (:function, (:call, :rand, (:(::), :rng, :AbstractRNG), (:(::), :g, :RangeGeneratorBigInt)), (:block,
                (:line, 569, :none),
                (:(=), :x, (:call, :BigInt)),
                (:line, 570, :none),
                (:while, true, (:block,
                    (:line, 571, :none),
                    (:call, :rand!, :rng, (:., :g, (:quote, #QuoteNode
                          :limbs
                        ))),
                    (:line, 572, :none),
                    (:&=, (:ref, (:., :g, (:quote, #QuoteNode
                            :limbs
                          )), :end), (:., :g, (:quote, #QuoteNode
                          :mask
                        ))),
                    (:line, 573, :none),
                    (:ccall, (:tuple, (:quote, #QuoteNode
                          :__gmpz_import
                        ), (:quote, #QuoteNode
                          :libgmp
                        )), :Void, (:tuple, (:curly, :Ptr, :BigInt), :Csize_t, :Cint, :Csize_t, :Cint, :Csize_t, (:curly, :Ptr, :Limb)), (:&, :x), (:call, :length, (:., :g, (:quote, #QuoteNode
                            :limbs
                          ))), -1, (:call, :sizeof, :Limb), 0, 0, (:., :g, (:quote, #QuoteNode
                          :limbs
                        ))),
                    (:line, 576, :none),
                    (:&&, (:call, :(<=), :x, (:., :g, (:quote, #QuoteNode
                            :m
                          ))), (:break,))
                  )),
                (:line, 578, :none),
                (:ccall, (:tuple, (:quote, #QuoteNode
                      :__gmpz_add
                    ), (:quote, #QuoteNode
                      :libgmp
                    )), :Void, (:tuple, (:curly, :Ptr, :BigInt), (:curly, :Ptr, :BigInt), (:curly, :Ptr, :BigInt)), (:&, :x), (:&, :x), (:&, (:., :g, (:quote, #QuoteNode
                        :a
                      )))),
                (:line, 579, :none),
                (:return, :x)
              ))
          )),
        (:line, 583, :none),
        (:(=), (:call, (:curly, :rand, (:<:, :T, (:curly, :Union, :Signed, :Unsigned, :BigInt, :Bool))), (:(::), :rng, :AbstractRNG), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
            (:line, 583, :none),
            (:call, :rand, :rng, (:call, :RangeGenerator, :r))
          )),
        (:line, 588, :none),
        (:(=), (:call, :rand, (:(::), :rng, :AbstractRNG), (:(::), :r, :AbstractArray)), (:block,
            (:line, 588, :none),
            (:macrocall, Symbol("@inbounds"), (:return, (:ref, :r, (:call, :rand, :rng, (:(:), 1, (:call, :length, :r))))))
          )),
        (:line, 590, :none),
        (:function, (:call, :rand!, (:(::), :rng, :AbstractRNG), (:(::), :A, :AbstractArray), (:(::), :g, :RangeGenerator)), (:block,
            (:line, 591, :none),
            (:for, (:(=), :i, (:call, :eachindex, :A)), (:block,
                (:line, 592, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, :rand, :rng, :g)))
              )),
            (:line, 594, :none),
            (:return, :A)
          )),
        (:line, 597, :none),
        (:(=), (:call, (:curly, :rand!, (:<:, :T, (:curly, :Union, :Signed, :Unsigned, :BigInt, :Bool, :Char))), (:(::), :rng, :AbstractRNG), (:(::), :A, :AbstractArray), (:(::), :r, (:curly, :UnitRange, :T))), (:block,
            (:line, 597, :none),
            (:call, :rand!, :rng, :A, (:call, :RangeGenerator, :r))
          )),
        (:line, 599, :none),
        (:function, (:call, :rand!, (:(::), :rng, :AbstractRNG), (:(::), :A, :AbstractArray), (:(::), :r, :AbstractArray)), (:block,
            (:line, 600, :none),
            (:(=), :g, (:call, :RangeGenerator, (:(:), 1, (:call, :length, :r)))),
            (:line, 601, :none),
            (:for, (:(=), :i, (:call, :eachindex, :A)), (:block,
                (:line, 602, :none),
                (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:ref, :r, (:call, :rand, :rng, :g))))
              )),
            (:line, 604, :none),
            (:return, :A)
          )),
        (:line, 607, :none),
        (:(=), (:call, (:curly, :rand, :T), (:(::), :rng, :AbstractRNG), (:(::), :r, (:curly, :AbstractArray, :T)), (:(::), :dims, :Dims)), (:block,
            (:line, 607, :none),
            (:call, :rand!, :rng, (:call, (:curly, :Array, :T), :dims), :r)
          )),
        (:line, 608, :none),
        (:(=), (:call, :rand, (:(::), :rng, :AbstractRNG), (:(::), :r, :AbstractArray), (:..., (:(::), :dims, :Int))), (:block,
            (:line, 608, :none),
            (:call, :rand, :rng, :r, :dims)
          )),
        (:line, 612, :none),
        (:function, (:call, :rand!, (:(::), :rng, :AbstractRNG), (:(::), :B, :BitArray)), (:block,
            (:line, 613, :none),
            (:&&, (:call, :isempty, :B), (:return, :B)),
            (:line, 614, :none),
            (:(=), :Bc, (:., :B, (:quote, #QuoteNode
                  :chunks
                ))),
            (:line, 615, :none),
            (:call, :rand!, :rng, :Bc),
            (:line, 616, :none),
            (:&=, (:ref, :Bc, :end), (:call, (:., :Base, (:quote, #QuoteNode
                    :_msk_end
                  )), :B)),
            (:line, 617, :none),
            (:return, :B)
          )),
        (:line, 620, :none),
        (:(=), (:call, :bitrand, (:(::), :r, :AbstractRNG), (:(::), :dims, :Dims)), (:block,
            (:line, 620, :none),
            (:call, :rand!, :r, (:call, :BitArray, :dims))
          )),
        (:line, 621, :none),
        (:(=), (:call, :bitrand, (:(::), :r, :AbstractRNG), (:..., (:(::), :dims, :Int))), (:block,
            (:line, 621, :none),
            (:call, :rand!, :r, (:call, :BitArray, :dims))
          )),
        (:line, 623, :none),
        (:(=), (:call, :bitrand, (:(::), :dims, :Dims)), (:block,
            (:line, 623, :none),
            (:call, :rand!, (:call, :BitArray, :dims))
          )),
        (:line, 624, :none),
        (:(=), (:call, :bitrand, (:..., (:(::), :dims, :Int))), (:block,
            (:line, 624, :none),
            (:call, :rand!, (:call, :BitArray, :dims))
          )),
        (:line, 633, :none),
        (:const, (:(=), :ki, (:ref, :UInt64, 0x0007799ec012f7b2, 0x0000000000000000, 0x0006045f4c7de363, 0x0006d1aa7d5ec0a5, 0x000728fb3f60f777, 0x0007592af4e9fbc0, 0x000777a5c0bf655d, 0x00078ca3857d2256, 0x00079bf6b0ffe58b, 0x0007a7a34ab092ad, 0x0007b0d2f20dd1cb, 0x0007b83d3aa9cb52, 0x0007be597614224d, 0x0007c3788631abe9, 0x0007c7d32bc192ee, 0x0007cb9263a6e86d, 0x0007ced483edfa84, 0x0007d1b07ac0fd39, 0x0007d437ef2da5fc, 0x0007d678b069aa6e, 0x0007d87db38c5c87, 0x0007da4fc6a9ba62, 0x0007dbf611b37f3b, 0x0007dd7674d0f286, 0x0007ded5ce8205f6, 0x0007e018307fb62b, 0x0007e141081bd124, 0x0007e2533d712de8, 0x0007e3514bbd7718, 0x0007e43d54944b52, 0x0007e5192f25ef42, 0x0007e5e67481118d, 0x0007e6a6897c1ce2, 0x0007e75aa6c7f64c, 0x0007e803df8ee498, 0x0007e8a326eb6272, 0x0007e93954717a28, 0x0007e9c727f8648f, 0x0007ea4d4cc85a3c, 0x0007eacc5c4907a9, 0x0007eb44e0474cf6, 0x0007ebb754e47419, 0x0007ec242a3d8474, 0x0007ec8bc5d69645, 0x0007ecee83d3d6e9, 0x0007ed4cb8082f45, 0x0007eda6aee0170f, 0x0007edfcae2dfe68, 0x0007ee4ef5dccd3e, 0x0007ee9dc08c394e, 0x0007eee9441a17c7, 0x0007ef31b21b4fb1, 0x0007ef773846a8a7, 0x0007efba00d35a17, 0x0007effa32ccf69f, 0x0007f037f25e1278, 0x0007f0736112d12c, 0x0007f0ac9e145c25, 0x0007f0e3c65e1fcc, 0x0007f118f4ed8e54, 0x0007f14c42ed0dc8, 0x0007f17dc7daa0c3, 0x0007f1ad99aac6a5, 0x0007f1dbcce80015, 0x0007f20874cf56bf, 0x0007f233a36a3b9a, 0x0007f25d69a604ad, 0x0007f285d7694a92, 0x0007f2acfba75e3b, 0x0007f2d2e4720909, 0x0007f2f79f09c344, 0x0007f31b37ec883b, 0x0007f33dbae36abc, 0x0007f35f330f08d5, 0x0007f37faaf2fa79, 0x0007f39f2c805380, 0x0007f3bdc11f4f1c, 0x0007f3db71b83850, 0x0007f3f846bba121, 0x0007f4144829f846, 0x0007f42f7d9a8b9d, 0x0007f449ee420432, 0x0007f463a0f8675e, 0x0007f47c9c3ea77b, 0x0007f494e643cd8e, 0x0007f4ac84e9c475, 0x0007f4c37dc9cd50, 0x0007f4d9d638a432, 0x0007f4ef934a5b6a, 0x0007f504b9d5f33d, 0x0007f5194e78b352, 0x0007f52d55994a96, 0x0007f540d36aba0c, 0x0007f553cbef0e77, 0x0007f56642f9ec8f, 0x0007f5783c32f31e, 0x0007f589bb17f609, 0x0007f59ac2ff1525, 0x0007f5ab5718b15a, 0x0007f5bb7a71427c, 0x0007f5cb2ff31009, 0x0007f5da7a67cebe, 0x0007f5e95c7a24e7, 0x0007f5f7d8b7171e, 0x0007f605f18f5ef4, 0x0007f613a958ad0a, 0x0007f621024ed7e9, 0x0007f62dfe94f8cb, 0x0007f63aa036777a, 0x0007f646e928065a, 0x0007f652db488f88, 0x0007f65e786213ff, 0x0007f669c22a7d8a, 0x0007f674ba446459, 0x0007f67f623fc8db, 0x0007f689bb9ac294, 0x0007f693c7c22481, 0x0007f69d881217a6, 0x0007f6a6fdd6ac36, 0x0007f6b02a4c61ee, 0x0007f6b90ea0a7f4, 0x0007f6c1abf254c0, 0x0007f6ca03521664, 0x0007f6d215c2db82, 0x0007f6d9e43a3559, 0x0007f6e16fa0b329, 0x0007f6e8b8d23729, 0x0007f6efc09e4569, 0x0007f6f687c84cbf, 0x0007f6fd0f07ea09, 0x0007f703570925e2, 0x0007f709606cad03, 0x0007f70f2bc8036f, 0x0007f714b9a5b292, 0x0007f71a0a85725d, 0x0007f71f1edc4d9e, 0x0007f723f714c179, 0x0007f728938ed843, 0x0007f72cf4a03fa0, 0x0007f7311a945a16, 0x0007f73505ac4bf8, 0x0007f738b61f03bd, 0x0007f73c2c193dc0, 0x0007f73f67bd835c, 0x0007f74269242559, 0x0007f745305b31a1, 0x0007f747bd666428, 0x0007f74a103f12ed, 0x0007f74c28d414f5, 0x0007f74e0709a42d, 0x0007f74faab939f9, 0x0007f75113b16657, 0x0007f75241b5a155, 0x0007f753347e16b8, 0x0007f753ebb76b7c, 0x0007f75467027d05, 0x0007f754a5f4199d, 0x0007f754a814b207, 0x0007f7546ce003ae, 0x0007f753f3c4bb29, 0x0007f7533c240e92, 0x0007f75245514f41, 0x0007f7510e91726c, 0x0007f74f971a9012, 0x0007f74dde135797, 0x0007f74be2927971, 0x0007f749a39e051c, 0x0007f747202aba8a, 0x0007f744571b4e3c, 0x0007f741473f9efe, 0x0007f73def53dc43, 0x0007f73a4dff9bff, 0x0007f73661d4deaf, 0x0007f732294f003f, 0x0007f72da2d19444, 0x0007f728cca72bda, 0x0007f723a5000367, 0x0007f71e29f09627, 0x0007f7185970156b, 0x0007f7123156c102, 0x0007f70baf5c1e2c, 0x0007f704d1150a23, 0x0007f6fd93f1a4e5, 0x0007f6f5f53b10b6, 0x0007f6edf211023e, 0x0007f6e587671ce9, 0x0007f6dcb2021679, 0x0007f6d36e749c64, 0x0007f6c9b91bf4c6, 0x0007f6bf8e1c541b, 0x0007f6b4e95ce015, 0x0007f6a9c68356ff, 0x0007f69e20ef5211, 0x0007f691f3b517eb, 0x0007f6853997f321, 0x0007f677ed03ff19, 0x0007f66a08075bdc, 0x0007f65b844ab75a, 0x0007f64c5b091860, 0x0007f63c8506d4bc, 0x0007f62bfa8798fe, 0x0007f61ab34364b0, 0x0007f608a65a599a, 0x0007f5f5ca4737e8, 0x0007f5e214d05b48, 0x0007f5cd7af7066e, 0x0007f5b7f0e4c2a1, 0x0007f5a169d68fcf, 0x0007f589d80596a5, 0x0007f5712c8d0174, 0x0007f557574c912b, 0x0007f53c46c77193, 0x0007f51fe7feb9f2, 0x0007f5022646ecfb, 0x0007f4e2eb17ab1d, 0x0007f4c21dd4a3d1, 0x0007f49fa38ea394, 0x0007f47b5ebb62eb, 0x0007f4552ee27473, 0x0007f42cf03d58f5, 0x0007f4027b48549f, 0x0007f3d5a44119df, 0x0007f3a63a8fb552, 0x0007f37408155100, 0x0007f33ed05b55ec, 0x0007f3064f9c183e, 0x0007f2ca399c7ba1, 0x0007f28a384bb940, 0x0007f245ea1b7a2b, 0x0007f1fcdffe8f1b, 0x0007f1ae9af758cd, 0x0007f15a8917f27e, 0x0007f10001ccaaab, 0x0007f09e413c418a, 0x0007f034627733d7, 0x0007efc15815b8d5, 0x0007ef43e2bf7f55, 0x0007eeba84e31dfe, 0x0007ee237294df89, 0x0007ed7c7c170141, 0x0007ecc2f0d95d3a, 0x0007ebf377a46782, 0x0007eb09d6deb285, 0x0007ea00a4f17808, 0x0007e8d0d3da63d6, 0x0007e771023b0fcf, 0x0007e5d46c2f08d8, 0x0007e3e937669691, 0x0007e195978f1176, 0x0007deb2c0e05c1c, 0x0007db0362002a19, 0x0007d6202c151439, 0x0007cf4b8f00a2cb, 0x0007c4fd24520efd, 0x0007b362fbf81816, 0x00078d2d25998e24))),
        (:line, 698, :none),
        (:const, (:(=), :wi, (:vect, 1.736725412160263e-15, 9.558660351455634e-17, 1.2708704834810623e-16, 1.4909740962495474e-16, 1.6658733631586268e-16, 1.8136120810119029e-16, 1.9429720153135588e-16, 2.0589500628482093e-16, 2.1646860576895422e-16, 2.2622940392218116e-16, 2.353271891404589e-16, 2.438723455742877e-16, 2.5194879829274225e-16, 2.5962199772528103e-16, 2.6694407473648285e-16, 2.7395729685142446e-16, 2.8069646002484804e-16, 2.871905890411393e-16, 2.9346417484728883e-16, 2.9953809336782113e-16, 3.054303000719244e-16, 3.111563633892157e-16, 3.1672988018581815e-16, 3.2216280350549905e-16, 3.274657040793975e-16, 3.326479811684171e-16, 3.377180341735323e-16, 3.4268340353119356e-16, 3.475508873172976e-16, 3.523266384600203e-16, 3.5701624633953494e-16, 3.616248057159834e-16, 3.661569752965354e-16, 3.7061702777236077e-16, 3.75008892787478e-16, 3.7933619401549554e-16, 3.836022812967728e-16, 3.8781025861250247e-16, 3.919630085325768e-16, 3.9606321366256378e-16, 4.001133755254669e-16, 4.041158312414333e-16, 4.080727683096045e-16, 4.119862377480744e-16, 4.1585816580828064e-16, 4.1969036444740733e-16, 4.234845407152071e-16, 4.272423051889976e-16, 4.309651795716294e-16, 4.346546035512876e-16, 4.383119410085457e-16, 4.4193848564470665e-16, 4.455354660957914e-16, 4.491040505882875e-16, 4.52645351185714e-16, 4.561604276690038e-16, 4.596502910884941e-16, 4.631159070208165e-16, 4.665581985600875e-16, 4.699780490694195e-16, 4.733763047158324e-16, 4.767537768090853e-16, 4.8011124396270155e-16, 4.834494540935008e-16, 4.867691262742209e-16, 4.900709524522994e-16, 4.933555990465414e-16, 4.966237084322178e-16, 4.998759003240909e-16, 5.031127730659319e-16, 5.0633490483427195e-16, 5.095428547633892e-16, 5.127371639978797e-16, 5.159183566785736e-16, 5.190869408670343e-16, 5.222434094134042e-16, 5.253882407719454e-16, 5.285218997682382e-16, 5.316448383216618e-16, 5.34757496126473e-16, 5.378603012945235e-16, 5.409536709623993e-16, 5.440380118655467e-16, 5.471137208817361e-16, 5.501811855460336e-16, 5.532407845392784e-16, 5.56292888151909e-16, 5.593378587248462e-16, 5.623760510690043e-16, 5.65407812864896e-16, 5.684334850436814e-16, 5.714534021509204e-16, 5.744678926941961e-16, 5.774772794756965e-16, 5.804818799107686e-16, 5.834820063333892e-16, 5.864779662894365e-16, 5.894700628185872e-16, 5.924585947256134e-16, 5.95443856841806e-16, 5.984261402772028e-16, 6.014057326642664e-16, 6.043829183936125e-16, 6.073579788423606e-16, 6.103311925956439e-16, 6.133028356617911e-16, 6.162731816816596e-16, 6.192425021325847e-16, 6.222110665273788e-16, 6.251791426088e-16, 6.281469965398895e-16, 6.311148930905604e-16, 6.34083095820806e-16, 6.370518672608815e-16, 6.400214690888025e-16, 6.429921623054896e-16, 6.459642074078832e-16, 6.489378645603397e-16, 6.519133937646159e-16, 6.548910550287415e-16, 6.578711085350741e-16, 6.608538148078259e-16, 6.638394348803506e-16, 6.668282304624746e-16, 6.698204641081558e-16, 6.728163993837531e-16, 6.758163010371901e-16, 6.78820435168298e-16, 6.818290694006254e-16, 6.848424730550038e-16, 6.878609173251664e-16, 6.908846754557169e-16, 6.939140229227569e-16, 6.969492376174829e-16, 6.999906000330764e-16, 7.030383934552151e-16, 7.060929041565482e-16, 7.091544215954873e-16, 7.122232386196779e-16, 7.152996516745303e-16, 7.183839610172063e-16, 7.214764709364707e-16, 7.245774899788387e-16, 7.276873311814693e-16, 7.308063123122743e-16, 7.339347561177405e-16, 7.370729905789831e-16, 7.4022134917658e-16, 7.433801711647648e-16, 7.465498018555889e-16, 7.497305929136979e-16, 7.529229026624058e-16, 7.561270964017922e-16, 7.5934354673958895e-16, 7.625726339356756e-16, 7.658147462610487e-16, 7.690702803721919e-16, 7.723396417018299e-16, 7.756232448671174e-16, 7.789215140963852e-16, 7.822348836756411e-16, 7.855637984161084e-16, 7.889087141441755e-16, 7.922700982152271e-16, 7.956484300529366e-16, 7.99044201715713e-16, 8.024579184921259e-16, 8.058900995272657e-16, 8.093412784821501e-16, 8.128120042284501e-16, 8.163028415809877e-16, 8.198143720706533e-16, 8.23347194760605e-16, 8.26901927108847e-16, 8.304792058805374e-16, 8.340796881136629e-16, 8.377040521420222e-16, 8.413529986798028e-16, 8.450272519724097e-16, 8.487275610186155e-16, 8.524547008695596e-16, 8.562094740106233e-16, 8.599927118327665e-16, 8.638052762005259e-16, 8.676480611245582e-16, 8.715219945473698e-16, 8.754280402517175e-16, 8.793671999021043e-16, 8.833405152308408e-16, 8.873490703813135e-16, 8.913939944224086e-16, 8.954764640495068e-16, 8.9959770648911e-16, 9.037590026260118e-16, 9.079616903740068e-16, 9.122071683134846e-16, 9.164968996219135e-16, 9.208324163262308e-16, 9.252153239095693e-16, 9.296473063086417e-16, 9.341301313425265e-16, 9.38665656618666e-16, 9.432558359676707e-16, 9.479027264651738e-16, 9.526084961066279e-16, 9.57375432209745e-16, 9.622059506294838e-16, 9.671026058823054e-16, 9.720681022901626e-16, 9.771053062707209e-16, 9.822172599190541e-16, 9.874071960480671e-16, 9.926785548807976e-16, 9.980350026183645e-16, 1.003480452143618e-15, 1.0090190861637457e-15, 1.0146553831467086e-15, 1.0203941464683124e-15, 1.0262405372613567e-15, 1.0322001115486456e-15, 1.03827886235154e-15, 1.044483267600047e-15, 1.0508203448355195e-15, 1.057297713900989e-15, 1.06392366906768e-15, 1.0707072623632994e-15, 1.0776584002668106e-15, 1.0847879564403425e-15, 1.0921079038149563e-15, 1.0996314701785628e-15, 1.1073733224935752e-15, 1.1153497865853155e-15, 1.1235791107110833e-15, 1.1320817840164846e-15, 1.140880924258278e-15, 1.1500027537839792e-15, 1.159477189144919e-15, 1.169338578691096e-15, 1.17962663529558e-15, 1.190387629928289e-15, 1.2016759392543819e-15, 1.2135560818666897e-15, 1.2261054417450561e-15, 1.2394179789163251e-15, 1.2536093926602567e-15, 1.268824481425501e-15, 1.2852479319096109e-15, 1.3031206634689985e-15, 1.3227655770195326e-15, 1.3446300925011171e-15, 1.3693606835128518e-15, 1.397943667277524e-15, 1.4319989869661328e-15, 1.4744848603597596e-15, 1.5317872741611144e-15, 1.6227698675312968e-15))),
        (:line, 785, :none),
        (:const, (:(=), :fi, (:vect, 1.0, 0.9771017012676708, 0.959879091800106, 0.9451989534422991, 0.9320600759592299, 0.9199915050393465, 0.9087264400521303, 0.898095921898343, 0.8879846607558328, 0.8783096558089168, 0.8690086880368565, 0.8600336211963311, 0.8513462584586775, 0.8429156531122037, 0.834716292986883, 0.8267268339462209, 0.8189291916037019, 0.8113078743126557, 0.8038494831709638, 0.7965423304229584, 0.789376143566024, 0.782341832654802, 0.7754313049811866, 0.7686373157984857, 0.7619533468367948, 0.7553735065070957, 0.7488924472191564, 0.7425052963401506, 0.7362075981268621, 0.7299952645614757, 0.7238645334686297, 0.7178119326307215, 0.711834248878248, 0.7059285013327538, 0.7000919181365112, 0.6943219161261163, 0.6886160830046714, 0.6829721616449943, 0.6773880362187731, 0.6718617198970817, 0.6663913439087498, 0.6609751477766628, 0.6556114705796969, 0.6502987431108164, 0.645035480820822, 0.6398202774530561, 0.6346517992876233, 0.6295287799248362, 0.6244500155470261, 0.619414360605834, 0.6144207238889134, 0.6094680649257731, 0.6045553906974673, 0.5996817526191248, 0.5948462437679869, 0.5900479963328255, 0.5852861792633709, 0.5805599961007903, 0.5758686829723532, 0.5712115067352527, 0.5665877632561639, 0.5619967758145239, 0.5574378936187655, 0.5529104904258318, 0.5484139632552654, 0.5439477311900258, 0.5395112342569516, 0.5351039323804572, 0.5307253044036615, 0.526374847171684, 0.5220520746723214, 0.5177565172297559, 0.5134877207473265, 0.5092452459957476, 0.5050286679434679, 0.5008375751261483, 0.4966715690524893, 0.49253026364386815, 0.4884132847054576, 0.4843202694266829, 0.4802508659090464, 0.4762047327195055, 0.47218153846772976, 0.4681809614056932, 0.4642026890481739, 0.4602464178128425, 0.4563118526787161, 0.45239870686184824, 0.44850670150720273, 0.4446355653957391, 0.44078503466580377, 0.43695485254798533, 0.4331447691126521, 0.42935454102944126, 0.4255839313380218, 0.42183270922949573, 0.41810064983784795, 0.4143875340408909, 0.410693148270188, 0.40701728432947315, 0.4033597392211143, 0.399720314980197, 0.39609881851583223, 0.3924950614593154, 0.38890886001878855, 0.38534003484007706, 0.38178841087339344, 0.37825381724561896, 0.37473608713789086, 0.3712350576682392, 0.36775056977903225, 0.3642824681290037, 0.36083060098964775, 0.3573948201457802, 0.35397498080007656, 0.3505709414814059, 0.3471825639567935, 0.34380971314685055, 0.34045225704452164, 0.3371100666370059, 0.33378301583071823, 0.3304709813791634, 0.3271738428136013, 0.32389148237639104, 0.3206237849569053, 0.3173706380299135, 0.31413193159633707, 0.31090755812628634, 0.3076974125042919, 0.3045013919766498, 0.3013193961008029, 0.2981513266966853, 0.29499708779996164, 0.291856585617095, 0.2887297284821827, 0.2856164268155016, 0.2825165930837074, 0.2794301417616377, 0.2763569892956681, 0.2732970540685769, 0.2702502563658752, 0.26721651834356114, 0.2641957639972608, 0.2611879191327208, 0.2581929113376189, 0.2552106699546617, 0.2522411260559419, 0.24928421241852824, 0.24633986350126363, 0.24340801542275012, 0.2404886059405004, 0.23758157443123795, 0.2346868618723299, 0.23180441082433859, 0.22893416541468023, 0.2260760713223802, 0.22323007576391746, 0.22039612748015194, 0.21757417672433113, 0.21476417525117358, 0.21196607630703015, 0.209179834621125, 0.20640540639788071, 0.20364274931033485, 0.20089182249465656, 0.1981525865457751, 0.19542500351413428, 0.19270903690358912, 0.19000465167046496, 0.18731181422380025, 0.18463049242679927, 0.18196065559952254, 0.17930227452284767, 0.176655321443735, 0.17401977008183875, 0.17139559563750595, 0.1687827748012115, 0.16618128576448205, 0.1635911082323657, 0.16101222343751107, 0.1584446141559243, 0.1558882647244792, 0.15334316106026283, 0.15080929068184568, 0.14828664273257453, 0.14577520800599403, 0.1432749789735134, 0.1407859498144447, 0.1383081164485507, 0.13584147657125373, 0.13338602969166913, 0.1309417771736443, 0.12850872227999952, 0.12608687022018586, 0.12367622820159654, 0.12127680548479021, 0.11888861344290998, 0.1165116656256108, 0.11414597782783835, 0.111791568163838, 0.10944845714681163, 0.10711666777468364, 0.1047962256224869, 0.10248715894193508, 0.10018949876880981, 0.09790327903886228, 0.09562853671300882, 0.09336531191269086, 0.09111364806637363, 0.08887359206827579, 0.08664519445055796, 0.08442850957035337, 0.08222359581320286, 0.08003051581466306, 0.07784933670209604, 0.07568013035892707, 0.07352297371398127, 0.07137794905889037, 0.06924514439700677, 0.0671246538277885, 0.06501657797124284, 0.06292102443775811, 0.060838108349539864, 0.05876795292093376, 0.0567106901062029, 0.054666461324888914, 0.052635418276792176, 0.05061772386094776, 0.04861355321586852, 0.04662309490193037, 0.04464655225129444, 0.04268414491647443, 0.04073611065594093, 0.03880270740452611, 0.036884215688567284, 0.034980941461716084, 0.03309321945857852, 0.031221417191920245, 0.029365939758133314, 0.027527235669603082, 0.025705804008548896, 0.023902203305795882, 0.022117062707308864, 0.020351096230044517, 0.018605121275724643, 0.016880083152543166, 0.015177088307935325, 0.01349745060173988, 0.011842757857907888, 0.010214971439701471, 0.008616582769398732, 0.007050875471373227, 0.005522403299250997, 0.0040379725933630305, 0.0026090727461021627, 0.0012602859304985975))),
        (:line, 874, :none),
        (:const, (:(=), :ke, (:ref, :UInt64, 0x000e290a13924be3, 0x0000000000000000, 0x0009beadebce18bf, 0x000c377ac71f9e08, 0x000d4ddb99075857, 0x000de893fb8ca23e, 0x000e4a8e87c4328d, 0x000e8dff16ae1cb9, 0x000ebf2deab58c59, 0x000ee49a6e8b9638, 0x000f0204efd64ee4, 0x000f19bdb8ea3c1b, 0x000f2d458bbe5bd1, 0x000f3da104b78236, 0x000f4b86d784571f, 0x000f577ad8a7784f, 0x000f61de83da32ab, 0x000f6afb7843cce7, 0x000f730a57372b44, 0x000f7a37651b0e68, 0x000f80a5bb6eea52, 0x000f867189d3cb5b, 0x000f8bb1b4f8fbbd, 0x000f9079062292b8, 0x000f94d70ca8d43a, 0x000f98d8c7dcaa99, 0x000f9c8928abe083, 0x000f9ff175b734a6, 0x000fa319996bc47d, 0x000fa6085f8e9d07, 0x000fa8c3a62e1991, 0x000fab5084e1f660, 0x000fadb36c84cccb, 0x000faff041086846, 0x000fb20a6ea22bb9, 0x000fb404fb42cb3c, 0x000fb5e295158173, 0x000fb7a59e99727a, 0x000fb95038c8789d, 0x000fbae44ba684eb, 0x000fbc638d822e60, 0x000fbdcf89209ffa, 0x000fbf29a303cfc5, 0x000fc0731df1089c, 0x000fc1ad1ed6c8b1, 0x000fc2d8b02b5c89, 0x000fc3f6c4d92131, 0x000fc5083ac9ba7d, 0x000fc60ddd1e9cd6, 0x000fc7086622e825, 0x000fc7f881009f0b, 0x000fc8decb41ac70, 0x000fc9bbd623d7ec, 0x000fca9027c5b26d, 0x000fcb5c3c319c49, 0x000fcc20864b4449, 0x000fccdd70a35d40, 0x000fcd935e34bf80, 0x000fce42ab0db8bd, 0x000fceebace7ec01, 0x000fcf8eb3b0d0e7, 0x000fd02c0a049b60, 0x000fd0c3f59d199c, 0x000fd156b7b5e27e, 0x000fd1e48d670341, 0x000fd26daff73551, 0x000fd2f2552684be, 0x000fd372af7233c1, 0x000fd3eeee528f62, 0x000fd4673e73543a, 0x000fd4dbc9e72ff7, 0x000fd54cb856dc2c, 0x000fd5ba2f2c4119, 0x000fd62451ba02c2, 0x000fd68b415fcff4, 0x000fd6ef1dabc160, 0x000fd75004790eb6, 0x000fd7ae120c583f, 0x000fd809612dbd09, 0x000fd8620b40effa, 0x000fd8b8285b78fd, 0x000fd90bcf594b1d, 0x000fd95d15efd425, 0x000fd9ac10bfa70c, 0x000fd9f8d364df06, 0x000fda437086566b, 0x000fda8bf9e3c9fe, 0x000fdad28062fed5, 0x000fdb17141bff2c, 0x000fdb59c4648085, 0x000fdb9a9fda83cc, 0x000fdbd9b46e3ed4, 0x000fdc170f6b5d04, 0x000fdc52bd81a3fb, 0x000fdc8ccacd07ba, 0x000fdcc542dd3902, 0x000fdcfc30bcb793, 0x000fdd319ef77143, 0x000fdd6597a0f60b, 0x000fdd98245a48a2, 0x000fddc94e575271, 0x000fddf91e64014f, 0x000fde279ce914ca, 0x000fde54d1f0a06a, 0x000fde80c52a47cf, 0x000fdeab7def394e, 0x000fded50345eb35, 0x000fdefd5be59fa0, 0x000fdf248e39b26f, 0x000fdf4aa064b4af, 0x000fdf6f98435894, 0x000fdf937b6f30ba, 0x000fdfb64f414571, 0x000fdfd818d48262, 0x000fdff8dd07fed8, 0x000fe018a08122c4, 0x000fe03767adaa59, 0x000fe05536c58a13, 0x000fe07211ccb4c5, 0x000fe08dfc94c532, 0x000fe0a8fabe8ca1, 0x000fe0c30fbb87a5, 0x000fe0dc3ecf3a5a, 0x000fe0f48b107521, 0x000fe10bf76a82ef, 0x000fe122869e41ff, 0x000fe1383b4327e1, 0x000fe14d17c83187, 0x000fe1611e74c023, 0x000fe1745169635a, 0x000fe186b2a09176, 0x000fe19843ef4e07, 0x000fe1a90705bf63, 0x000fe1b8fd6fb37c, 0x000fe1c828951443, 0x000fe1d689ba4bfd, 0x000fe1e4220099a4, 0x000fe1f0f26655a0, 0x000fe1fcfbc726d4, 0x000fe2083edc2830, 0x000fe212bc3bfeb4, 0x000fe21c745adfe3, 0x000fe225678a8895, 0x000fe22d95fa23f4, 0x000fe234ffb62282, 0x000fe23ba4a800d9, 0x000fe2418495fddc, 0x000fe2469f22bffb, 0x000fe24af3cce90d, 0x000fe24e81ee9858, 0x000fe25148bcda19, 0x000fe253474703fe, 0x000fe2547c75fdc6, 0x000fe254e70b754f, 0x000fe25485a0fd1a, 0x000fe25356a71450, 0x000fe2515864173a, 0x000fe24e88f316f1, 0x000fe24ae64296fa, 0x000fe2466e132f60, 0x000fe2411df611bd, 0x000fe23af34b6f73, 0x000fe233eb40bf41, 0x000fe22c02cee01b, 0x000fe22336b81710, 0x000fe2198385e5cc, 0x000fe20ee586b707, 0x000fe20358cb5dfb, 0x000fe1f6d92465b1, 0x000fe1e9621f2c9e, 0x000fe1daef02c8da, 0x000fe1cb7accb0a6, 0x000fe1bb002d22c9, 0x000fe1a9798349b8, 0x000fe196e0d9140c, 0x000fe1832fdebc44, 0x000fe16e5fe5f931, 0x000fe15869dccfcf, 0x000fe1414647fe78, 0x000fe128ed3cf8b2, 0x000fe10f565b69cf, 0x000fe0f478c633ab, 0x000fe0d84b1bdd9e, 0x000fe0bac36e6688, 0x000fe09bd73a6b5b, 0x000fe07b7b5d920a, 0x000fe059a40c26d2, 0x000fe03644c5d7f8, 0x000fe011504979b2, 0x000fdfeab887b95c, 0x000fdfc26e94a447, 0x000fdf986297e305, 0x000fdf6c83bb8663, 0x000fdf3ec0193eed, 0x000fdf0f04a5d30a, 0x000fdedd3d1aa204, 0x000fdea953dcfc13, 0x000fde7331e3100d, 0x000fde3abe9626f2, 0x000fddffdfb1dbd5, 0x000fddc2791ff351, 0x000fdd826cd068c6, 0x000fdd3f9a8d3856, 0x000fdcf9dfc95b0c, 0x000fdcb1176a55fe, 0x000fdc65198ba50b, 0x000fdc15bb3b2daa, 0x000fdbc2ce2dc4ae, 0x000fdb6c206aaaca, 0x000fdb117becb4a1, 0x000fdab2a6379bf0, 0x000fda4f5fdfb4e9, 0x000fd9e76401f3a3, 0x000fd97a67a9ce1f, 0x000fd90819221429, 0x000fd8901f2d4b02, 0x000fd812182170e1, 0x000fd78d98e23cd3, 0x000fd7022bb3f082, 0x000fd66f4edf96b9, 0x000fd5d473200305, 0x000fd530f9ccff94, 0x000fd48432b7b351, 0x000fd3cd59a8469e, 0x000fd30b9368f90a, 0x000fd23dea45f500, 0x000fd16349e2e04a, 0x000fd07a7a3ef98a, 0x000fcf8219b5df05, 0x000fce7895bcfcde, 0x000fcd5c220ad5e2, 0x000fcc2aadbc17dc, 0x000fcae1d5e81fbc, 0x000fc97ed4e778f9, 0x000fc7fe6d4d720e, 0x000fc65ccf39c2fc, 0x000fc4957623cb03, 0x000fc2a2fc826dc7, 0x000fc07ee19b01cd, 0x000fbe213c1cf493, 0x000fbb8051ac1566, 0x000fb890078d120e, 0x000fb5411a5b9a95, 0x000fb18000547133, 0x000fad334827f1e2, 0x000fa839276708b9, 0x000fa263b32e37ed, 0x000f9b72d1c52cd1, 0x000f930a1a281a05, 0x000f889f023d820a, 0x000f7b577d2be5f3, 0x000f69c650c40a8f, 0x000f51530f0916d8, 0x000f2cb0e3c5933e, 0x000eeefb15d605d8, 0x000e6da6ecf27460))),
        (:line, 940, :none),
        (:const, (:(=), :we, (:vect, 1.9311480126418366e-15, 1.417802848791083e-17, 2.3278824993382448e-17, 3.048783024706432e-17, 3.666569771447488e-17, 4.217930218928973e-17, 4.7222561556862764e-17, 5.191191544621788e-17, 5.632347108395505e-17, 6.051008260642765e-17, 6.45101650967275e-17, 6.835264680370054e-17, 7.205993957468905e-17, 7.564981553739298e-17, 7.913664396195106e-17, 8.253223556351893e-17, 8.584643616885051e-17, 8.908755486564743e-17, 9.226267962966372e-17, 9.537791450529272e-17, 9.843856087455926e-17, 1.0144925809006294e-16, 1.0441409405585343e-16, 1.0733669323436384e-16, 1.102202874567019e-16, 1.1306777346479334e-16, 1.1588176009705533e-16, 1.1866460730417886e-16, 1.214184586569436e-16, 1.2414526862326387e-16, 1.2684682560606153e-16, 1.2952477151912284e-16, 1.321806185153881e-16, 1.3481576335745444e-16, 1.3743149982367625e-16, 1.400290294680786e-16, 1.4260947099321287e-16, 1.4517386844829297e-16, 1.4772319842763584e-16, 1.5025837641447456e-16, 1.5278026239101652e-16, 1.5528966581595696e-16, 1.577873500545958e-16, 1.602740363335091e-16, 1.6275040728083524e-16, 1.6521711010420076e-16, 1.6767475945078279e-16, 1.7012393998770646e-16, 1.7256520873568226e-16, 1.7499909718432365e-16, 1.7742611321380505e-16, 1.7984674284430714e-16, 1.8226145183195818e-16, 1.8467068712763576e-16, 1.8707487821298258e-16, 1.89474438326259e-16, 1.9186976558915995e-16, 1.9426124404443042e-16, 1.9664924461299023e-16, 1.9903412597830144e-16, 2.0141623540485899e-16, 2.0379590949693882e-16, 2.061734749030844e-16, 2.085492489712377e-16, 2.1092354035891528e-16, 2.1329664960238294e-16, 2.156688696483897e-16, 2.180404863516701e-16, 2.2041177894111562e-16, 2.227830204572395e-16, 2.251544781633135e-16, 2.2752641393233694e-16, 2.2989908461180186e-16, 2.3227274236804366e-16, 2.3464763501180916e-16, 2.370240063065339e-16, 2.3940209626069303e-16, 2.417821414054771e-16, 2.4416437505894123e-16, 2.4654902757768304e-16, 2.489363265970225e-16, 2.513264972605797e-16, 2.537197624400795e-16, 2.561163429461499e-16, 2.585164577308239e-16, 2.6092032408240577e-16, 2.633281578133145e-16, 2.657401734414762e-16, 2.681565843657999e-16, 2.705776030362351e-16, 2.7300344111887955e-16, 2.754343096565762e-16, 2.778704192254128e-16, 2.803119800875143e-16, 2.8275920234049704e-16, 2.852122960639331e-16, 2.8767147146315804e-16, 2.9013693901073754e-16, 2.9260890958589514e-16, 2.9508759461219033e-16, 2.975732061937252e-16, 3.000659572501474e-16, 3.025660616507079e-16, 3.050737343476251e-16, 3.075891915089994e-16, 3.1011265065151543e-16, 3.126443307731675e-16, 3.1518445248623523e-16, 3.1773323815073683e-16, 3.2029091200858335e-16, 3.2285770031865573e-16, 3.254338314930261e-16, 3.280195362345436e-16, 3.306150476760074e-16, 3.332206015211484e-16, 3.3583643618764577e-16, 3.3846279295240445e-16, 3.4109991609932597e-16, 3.4374805306980633e-16, 3.4640745461620167e-16, 3.490783749585068e-16, 3.517610719444983e-16, 3.544558072136013e-16, 3.571628463647465e-16, 3.5988245912849274e-16, 3.626149195437003e-16, 3.6536050613905045e-16, 3.6811950211971757e-16, 3.708921955595139e-16, 3.7367887959883854e-16, 3.764798526487784e-16, 3.7929541860172334e-16, 3.821258870488753e-16, 3.8497157350504876e-16, 3.878327996411799e-16, 3.9070989352498183e-16, 3.936031898702075e-16, 3.965130302950038e-16, 3.994397635898684e-16, 4.0238374599574693e-16, 4.0534534149283966e-16, 4.0832492210071775e-16, 4.1132286819038357e-16, 4.143395688089474e-16, 4.1737542201763194e-16, 4.2043083524385856e-16, 4.235062256482152e-16, 4.266020205071558e-16, 4.2971865761233266e-16, 4.3285658568752094e-16, 4.360162648241568e-16, 4.3919816693657415e-16, 4.424027762380992e-16, 4.456305897392361e-16, 4.488821177692617e-16, 4.521578845226347e-16, 4.554584286317242e-16, 4.587843037674623e-16, 4.621360792696427e-16, 4.655143408087069e-16, 4.689196910809916e-16, 4.723527505395548e-16, 4.758141581628553e-16, 4.793045722637247e-16, 4.828246713412587e-16, 4.863751549784512e-16, 4.89956744788614e-16, 4.935701854138577e-16, 4.972162455791703e-16, 5.008957192059114e-16, 5.046094265888434e-16, 5.083582156411624e-16, 5.121429632123542e-16, 5.159645764841062e-16, 5.198239944499494e-16, 5.237221894847848e-16, 5.276601690109886e-16, 5.31638977268369e-16, 5.35659697195905e-16, 5.397234524338978e-16, 5.438314094559637e-16, 5.47984779841163e-16, 5.521848226975234e-16, 5.564328472492872e-16, 5.607302156013967e-16, 5.650783456960506e-16, 5.694787144776348e-16, 5.739328612839635e-16, 5.784423914835991e-16, 5.830089803810586e-16, 5.876343774140057e-16, 5.923204106690931e-16, 5.970689917460091e-16, 6.018821210025236e-16, 6.067618932170007e-16, 6.117105037089722e-16, 6.16730254963062e-16, 6.218235638068533e-16, 6.269929691993326e-16, 6.322411406934211e-16, 6.375708876439426e-16, 6.429851692413595e-16, 6.484871054618903e-16, 6.540799890364481e-16, 6.597672985544566e-16, 6.655527128343343e-16, 6.714401267106488e-16, 6.77433668409101e-16, 6.835377187051274e-16, 6.897569320906848e-16, 6.960962602074885e-16, 7.025609778445959e-16, 7.091567118449584e-16, 7.158894733208553e-16, 7.227656936438121e-16, 7.297922647529085e-16, 7.369765844191243e-16, 7.443266072160415e-16, 7.518509020832513e-16, 7.595587175337749e-16, 7.674600557578427e-16, 7.755657571215791e-16, 7.838875968622858e-16, 7.92438396157355e-16, 8.012321502113083e-16, 8.102841765913146e-16, 8.196112877806125e-16, 8.292319928581809e-16, 8.391667344146798e-16, 8.49438168364877e-16, 8.600714963334941e-16, 8.710948629387904e-16, 8.82539833807214e-16, 8.944419748519865e-16, 9.068415597131669e-16, 9.197844409811865e-16, 9.333231329422952e-16, 9.475181706524984e-16, 9.624398345658476e-16, 9.78170365478442e-16, 9.94806847238388e-16, 1.012465014428832e-15, 1.0312843657756166e-15, 1.051435160404455e-15, 1.0731281954224043e-15, 1.0966288068517408e-15, 1.122277490935032e-15, 1.1505212963006663e-15, 1.1819635283304206e-15, 1.2174462832361815e-15, 1.2581958069755114e-15, 1.3060984107128082e-15, 1.3642786158057857e-15, 1.4384889932178723e-15, 1.5412190700064194e-15, 1.7091034077168055e-15))),
        (:line, 1027, :none),
        (:const, (:(=), :fe, (:vect, 1.0, 0.9381436808621747, 0.9004699299257465, 0.8717043323812036, 0.8477855006239896, 0.8269932966430503, 0.8084216515230084, 0.7915276369724956, 0.7759568520401156, 0.7614633888498963, 0.7478686219851951, 0.7350380924314235, 0.722867659593572, 0.711274760805076, 0.7001926550827882, 0.689566496117078, 0.6793505722647654, 0.6695063167319247, 0.6600008410789997, 0.6508058334145711, 0.6418967164272661, 0.6332519942143661, 0.624852738703666, 0.6166821809152077, 0.608725382079622, 0.6009689663652322, 0.5934009016917334, 0.586010318477268, 0.578787358602845, 0.5717230486648258, 0.5648091929124002, 0.5580382822625874, 0.5514034165406413, 0.5448982376724396, 0.5385168720028619, 0.5322538802630433, 0.5261042139836197, 0.5200631773682336, 0.5141263938147486, 0.5082897764106429, 0.5025495018413477, 0.49690198724154955, 0.49134386959403253, 0.4858719873418849, 0.4804833639304542, 0.4751751930373774, 0.46994482528396, 0.4647897562504262, 0.4597076156421377, 0.4546961574746155, 0.449753251162755, 0.4448768734145485, 0.4400651008423539, 0.4353161032156366, 0.43062813728845883, 0.42599954114303434, 0.4214287289976166, 0.4169141864330029, 0.4124544659971612, 0.4080481831520324, 0.4036940125305303, 0.3993906844752311, 0.39513698183329016, 0.3909317369847971, 0.38677382908413765, 0.38266218149600983, 0.3785957594095808, 0.37457356761590216, 0.370594648435146, 0.36665807978151416, 0.3627629733548178, 0.3589084729487498, 0.35509375286678746, 0.35131801643748334, 0.347580494621637, 0.3438804447045024, 0.34021714906678, 0.3365899140286776, 0.332998068761809, 0.3294409642641363, 0.3259179723935562, 0.32242848495608917, 0.31897191284495724, 0.31554768522712895, 0.31215524877417955, 0.3087940669345602, 0.30546361924459026, 0.3021634006756935, 0.2988929210155818, 0.2956517042812612, 0.2924392881618926, 0.28925522348967775, 0.2860990737370768, 0.28297041453878075, 0.2798688332369729, 0.27679392844851736, 0.27374530965280297, 0.27072259679906, 0.2677254199320448, 0.2647534188350622, 0.261806242689363, 0.25888354974901623, 0.2559850070304154, 0.25311029001562946, 0.2502590823688623, 0.24743107566532763, 0.2446259691318921, 0.24184346939887721, 0.23908329026244918, 0.23634515245705964, 0.23362878343743335, 0.2309339171696274, 0.2282602939307167, 0.22560766011668407, 0.2229757680581202, 0.2203643758433595, 0.21777324714870053, 0.21520215107537868, 0.21265086199297828, 0.21011915938898826, 0.20760682772422204, 0.2051136562938377, 0.20263943909370902, 0.20018397469191127, 0.19774706610509887, 0.19532852067956322, 0.19292814997677135, 0.1905457696631954, 0.18818119940425432, 0.1858342627621971, 0.18350478709776746, 0.1811926034754963, 0.1788975465724783, 0.17661945459049488, 0.1743581691713535, 0.17211353531532006, 0.16988540130252766, 0.1676736186172502, 0.165478041874936, 0.16329852875190182, 0.16113493991759203, 0.1589871389693142, 0.15685499236936523, 0.15473836938446808, 0.15263714202744286, 0.1505511850010399, 0.1484803756438668, 0.14642459387834494, 0.14438372216063478, 0.1423576454324722, 0.14034625107486245, 0.1383494288635802, 0.13636707092642886, 0.13439907170221363, 0.13244532790138752, 0.13050573846833077, 0.12858020454522817, 0.12666862943751067, 0.12477091858083096, 0.12288697950954514, 0.12101672182667483, 0.11916005717532768, 0.11731689921155557, 0.11548716357863353, 0.11367076788274431, 0.1118676316700563, 0.11007767640518538, 0.1083008254510338, 0.10653700405000166, 0.10478613930657017, 0.10304816017125772, 0.10132299742595363, 0.09961058367063713, 0.0979108533114922, 0.0962237425504328, 0.09454918937605586, 0.09288713355604354, 0.09123751663104016, 0.08960028191003286, 0.08797537446727022, 0.08636274114075691, 0.08476233053236812, 0.08317409300963238, 0.08159798070923742, 0.0800339475423199, 0.07848194920160642, 0.0769419431704805, 0.07541388873405841, 0.07389774699236475, 0.07239348087570874, 0.07090105516237183, 0.06942043649872875, 0.0679515934219366, 0.06649449638533977, 0.06504911778675375, 0.06361543199980733, 0.062193415408540995, 0.06078304644547963, 0.059384305633420266, 0.05799717563120066, 0.05662164128374288, 0.05525768967669704, 0.05390531019604609, 0.05256449459307169, 0.05123523705512628, 0.04991753428270637, 0.0486113855733795, 0.04731679291318155, 0.04603376107617517, 0.04476229773294328, 0.04350241356888818, 0.042254122413316234, 0.04101744138041482, 0.039792391023374125, 0.03857899550307486, 0.03737728277295936, 0.03618728478193142, 0.03500903769739741, 0.03384258215087433, 0.032687963508959535, 0.03154523217289361, 0.030414443910466604, 0.029295660224637393, 0.028188948763978636, 0.0270943837809558, 0.026012046645134217, 0.024942026419731783, 0.02388442051155817, 0.02283933540638524, 0.02180688750428358, 0.020787204072578117, 0.019780424338009743, 0.01878670074469603, 0.01780620041091136, 0.016839106826039948, 0.015885621839973163, 0.014945968011691148, 0.014020391403181938, 0.013109164931254991, 0.012212592426255381, 0.011331013597834597, 0.010464810181029979, 0.00961441364250221, 0.008780314985808975, 0.00796307743801704, 0.007163353183634984, 0.006381905937319179, 0.005619642207205483, 0.004877655983542392, 0.004157295120833795, 0.003460264777836904, 0.002788798793574076, 0.0021459677437189063, 0.0015362997803015724, 0.0009672692823271745, 0.00045413435384149677))),
        (:line, 1116, :none),
        (:const, (:(=), :ziggurat_nor_r, 3.654152885361009)),
        (:line, 1117, :none),
        (:const, (:(=), :ziggurat_nor_inv_r, (:call, :inv, :ziggurat_nor_r))),
        (:line, 1118, :none),
        (:const, (:(=), :ziggurat_exp_r, 7.69711747013105)),
        (:line, 1120, :none),
        (:macrocall, :(Core.@doc), "    randn([rng], [T=Float64], [dims...])\n\nGenerate a normally-distributed random number of type `T` with mean 0 and standard deviation 1.\nOptionally generate an array of normally-distributed random numbers.\nThe `Base` module currently provides an implementation for the types\n`Float16`, `Float32`, and `Float64` (the default).\n", (:macrocall, Symbol("@inline"), (:function, (:call, :randn, (:kw, (:(::), :rng, :AbstractRNG), :GLOBAL_RNG)), (:block,
                (:line, 1129, :none),
                (:macrocall, Symbol("@inbounds"), (:block,
                    (:line, 1130, :none),
                    (:(=), :r, (:call, :rand_ui52, :rng)),
                    (:line, 1131, :none),
                    (:(=), :rabs, (:call, :Int64, (:call, :>>, :r, 1))),
                    (:line, 1132, :none),
                    (:(=), :idx, (:call, :&, :rabs, 0xff)),
                    (:line, 1133, :none),
                    (:(=), :x, (:call, :*, (:call, :ifelse, (:call, :%, :r, :Bool), (:call, :-, :rabs), :rabs), (:ref, :wi, (:call, :+, :idx, 1)))),
                    (:line, 1134, :none),
                    (:&&, (:call, :<, :rabs, (:ref, :ki, (:call, :+, :idx, 1))), (:return, :x)),
                    (:line, 1135, :none),
                    (:return, (:call, :randn_unlikely, :rng, :idx, :rabs, :x))
                  ))
              )))),
        (:line, 1140, :none),
        (:function, (:call, :randn_unlikely, :rng, :idx, :rabs, :x), (:block,
            (:line, 1141, :none),
            (:macrocall, Symbol("@inbounds"), (:if, (:call, :(==), :idx, 0), (:block,
                  (:line, 1142, :none),
                  (:while, true, (:block,
                      (:line, 1143, :none),
                      (:(=), :xx, (:call, :*, (:call, :-, :ziggurat_nor_inv_r), (:call, :log, (:call, :rand, :rng)))),
                      (:line, 1144, :none),
                      (:(=), :yy, (:call, :-, (:call, :log, (:call, :rand, :rng)))),
                      (:line, 1145, :none),
                      (:&&, (:call, :>, (:call, :+, :yy, :yy), (:call, :*, :xx, :xx)), (:return, (:if, (:call, :%, (:call, :>>, :rabs, 8), :Bool), (:call, :-, (:call, :-, :ziggurat_nor_r), :xx), (:call, :+, :ziggurat_nor_r, :xx))))
                    ))
                ), (:block,
                  (:line, 1147, :none),
                  (:if, (:call, :<, (:call, :+, (:call, :*, (:call, :-, (:ref, :fi, :idx), (:ref, :fi, (:call, :+, :idx, 1))), (:call, :rand, :rng)), (:ref, :fi, (:call, :+, :idx, 1))), (:call, :exp, (:call, :*, -0.5, :x, :x))), (:block,
                      (:line, 1148, :none),
                      (:return, :x)
                    ), (:block,
                      (:line, 1150, :none),
                      (:return, (:call, :randn, :rng))
                    ))
                )))
          )),
        (:line, 1154, :none),
        (:macrocall, :(Core.@doc), "    randexp([rng], [T=Float64], [dims...])\n\nGenerate a random number of type `T` according to the exponential distribution with scale 1.\nOptionally generate an array of such random numbers.\nThe `Base` module currently provides an implementation for the types\n`Float16`, `Float32`, and `Float64` (the default).\n", (:macrocall, Symbol("@inline"), (:function, (:call, :randexp, (:kw, (:(::), :rng, :AbstractRNG), :GLOBAL_RNG)), (:block,
                (:line, 1163, :none),
                (:macrocall, Symbol("@inbounds"), (:block,
                    (:line, 1164, :none),
                    (:(=), :ri, (:call, :rand_ui52, :rng)),
                    (:line, 1165, :none),
                    (:(=), :idx, (:call, :&, :ri, 0xff)),
                    (:line, 1166, :none),
                    (:(=), :x, (:call, :*, :ri, (:ref, :we, (:call, :+, :idx, 1)))),
                    (:line, 1167, :none),
                    (:&&, (:call, :<, :ri, (:ref, :ke, (:call, :+, :idx, 1))), (:return, :x)),
                    (:line, 1168, :none),
                    (:return, (:call, :randexp_unlikely, :rng, :idx, :x))
                  ))
              )))),
        (:line, 1172, :none),
        (:function, (:call, :randexp_unlikely, :rng, :idx, :x), (:block,
            (:line, 1173, :none),
            (:macrocall, Symbol("@inbounds"), (:if, (:call, :(==), :idx, 0), (:block,
                  (:line, 1174, :none),
                  (:return, (:call, :-, :ziggurat_exp_r, (:call, :log, (:call, :rand, :rng))))
                ), (:block,
                  (:line, 1175, :none),
                  (:if, (:call, :<, (:call, :+, (:call, :*, (:call, :-, (:ref, :fe, :idx), (:ref, :fe, (:call, :+, :idx, 1))), (:call, :rand, :rng)), (:ref, :fe, (:call, :+, :idx, 1))), (:call, :exp, (:call, :-, :x))), (:block,
                      (:line, 1176, :none),
                      (:return, :x)
                    ), (:block,
                      (:line, 1178, :none),
                      (:return, (:call, :randexp, :rng))
                    ))
                )))
          )),
        (:line, 1182, :none),
        (:macrocall, :(Core.@doc), "    randn!([rng], A::AbstractArray) -> A\n\nFill the array `A` with normally-distributed (mean 0, standard deviation 1) random numbers.\nAlso see the `rand` function.\n", (:function, :randn!)),
        (:line, 1190, :none),
        (:macrocall, :(Core.@doc), "    randexp!([rng], A::AbstractArray) -> A\n\nFill the array `A` with random numbers following the exponential distribution (with scale 1).\n", (:function, :randexp!)),
        (:line, 1197, :none),
        (:let, (:block,
            (:line, 1198, :none),
            (:for, (:(=), :randfun, (:vect, (:quote, #QuoteNode
                    :randn
                  ), (:quote, #QuoteNode
                    :randexp
                  ))), (:block,
                (:line, 1199, :none),
                (:(=), :randfun!, (:call, :Symbol, :randfun, (:quote, #QuoteNode
                      :!
                    ))),
                (:line, 1200, :none),
                (:macrocall, Symbol("@eval"), (:block,
                    (:line, 1202, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), (:<:, :T, (:$, :Floats))), (:(::), :rng, :AbstractRNG), (:(::), (:curly, :Type, :T))), (:block,
                        (:line, 1202, :none),
                        (:call, :convert, :T, (:call, (:$, :randfun), :rng))
                      )),
                    (:line, 1203, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), :T), (:(::), (:curly, :Type, :T))), (:block,
                        (:line, 1203, :none),
                        (:call, (:$, :randfun), :GLOBAL_RNG, :T)
                      )),
                    (:line, 1206, :none),
                    (:function, (:call, (:curly, (:$, :randfun!), :T), (:(::), :rng, :AbstractRNG), (:(::), :A, (:curly, :AbstractArray, :T))), (:block,
                        (:line, 1207, :none),
                        (:for, (:(=), :i, (:call, :eachindex, :A)), (:block,
                            (:line, 1208, :none),
                            (:macrocall, Symbol("@inbounds"), (:(=), (:ref, :A, :i), (:call, (:$, :randfun), :rng, :T)))
                          )),
                        (:line, 1210, :none),
                        :A
                      )),
                    (:line, 1213, :none),
                    (:(=), (:call, (:$, :randfun!), (:(::), :A, :AbstractArray)), (:block,
                        (:line, 1213, :none),
                        (:call, (:$, :randfun!), :GLOBAL_RNG, :A)
                      )),
                    (:line, 1216, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), :T), (:(::), :rng, :AbstractRNG), (:(::), (:curly, :Type, :T)), (:(::), :dims, :Dims)), (:block,
                        (:line, 1216, :none),
                        (:call, (:$, :randfun!), :rng, (:call, (:curly, :Array, :T), :dims))
                      )),
                    (:line, 1218, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), :T), (:(::), :rng, :AbstractRNG), (:(::), (:curly, :Type, :T)), (:(::), :dim1, :Integer), (:..., (:(::), :dims, :Integer))), (:block,
                        (:line, 1218, :none),
                        (:call, (:$, :randfun!), :rng, (:call, (:curly, :Array, :T), :dim1, (:..., :dims)))
                      )),
                    (:line, 1219, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), :T), (:(::), (:curly, :Type, :T)), (:(::), :dims, :Dims)), (:block,
                        (:line, 1219, :none),
                        (:call, (:$, :randfun), :GLOBAL_RNG, :T, :dims)
                      )),
                    (:line, 1220, :none),
                    (:(=), (:call, (:curly, (:$, :randfun), :T), (:(::), (:curly, :Type, :T)), (:..., (:(::), :dims, :Integer))), (:block,
                        (:line, 1220, :none),
                        (:call, (:$, :randfun), :GLOBAL_RNG, :T, (:..., :dims))
                      )),
                    (:line, 1221, :none),
                    (:(=), (:call, (:$, :randfun), (:(::), :rng, :AbstractRNG), (:(::), :dims, :Dims)), (:block,
                        (:line, 1221, :none),
                        (:call, (:$, :randfun), :rng, :Float64, :dims)
                      )),
                    (:line, 1222, :none),
                    (:(=), (:call, (:$, :randfun), (:(::), :rng, :AbstractRNG), (:..., (:(::), :dims, :Integer))), (:block,
                        (:line, 1222, :none),
                        (:call, (:$, :randfun), :rng, :Float64, (:..., :dims))
                      )),
                    (:line, 1223, :none),
                    (:(=), (:call, (:$, :randfun), (:(::), :dims, :Dims)), (:block,
                        (:line, 1223, :none),
                        (:call, (:$, :randfun), :GLOBAL_RNG, :Float64, :dims)
                      )),
                    (:line, 1224, :none),
                    (:(=), (:call, (:$, :randfun), (:..., (:(::), :dims, :Integer))), (:block,
                        (:line, 1224, :none),
                        (:call, (:$, :randfun), :GLOBAL_RNG, :Float64, (:..., :dims))
                      ))
                  ))
              ))
          ), (:(=), :Floats, (:curly, :Union, :Float16, :Float32, :Float64))),
        (:line, 1231, :none),
        (:type, false, :UUID, (:block,
            (:line, 1232, :none),
            (:(::), :value, :UInt128),
            (:line, 1234, :none),
            (:(=), (:call, :UUID, (:(::), :u, :UInt128)), (:block,
                (:line, 1234, :none),
                (:call, :new, :u)
              ))
          )),
        (:line, 1237, :none),
        (:macrocall, :(Core.@doc), "    uuid1([rng::AbstractRNG]) -> UUID\n\nGenerates a version 1 (time-based) universally unique identifier (UUID), as specified\nby RFC 4122. Note that the Node ID is randomly generated (does not identify the host)\naccording to section 4.5 of the RFC.\n", (:function, (:call, :uuid1, (:kw, (:(::), :rng, :AbstractRNG), :GLOBAL_RNG)), (:block,
              (:line, 1245, :none),
              (:(=), :u, (:call, :rand, :rng, :UInt128)),
              (:line, 1248, :none),
              (:&=, :u, (:macrocall, Symbol("@uint128_str"), "0x00000000000000003fffffffffffffff")),
              (:line, 1251, :none),
              (:|=, :u, (:macrocall, Symbol("@uint128_str"), "0x00000000000010000000010000000000")),
              (:line, 1255, :none),
              (:(=), :timestamp, (:call, :+, (:call, :round, :UInt64, (:call, :*, (:call, :time), 1.0e7)), 0x01b21dd213814000)),
              (:line, 1256, :none),
              (:(=), :ts_low, (:call, :&, :timestamp, (:call, :typemax, :UInt32))),
              (:line, 1257, :none),
              (:(=), :ts_mid, (:call, :&, (:call, :>>, :timestamp, 32), (:call, :typemax, :UInt16))),
              (:line, 1258, :none),
              (:(=), :ts_hi, (:call, :&, (:call, :>>, :timestamp, 48), 0x0fff)),
              (:line, 1260, :none),
              (:|=, :u, (:call, :<<, (:call, :UInt128, :ts_low), 96)),
              (:line, 1261, :none),
              (:|=, :u, (:call, :<<, (:call, :UInt128, :ts_mid), 80)),
              (:line, 1262, :none),
              (:|=, :u, (:call, :<<, (:call, :UInt128, :ts_hi), 64)),
              (:line, 1264, :none),
              (:call, :UUID, :u)
            ))),
        (:line, 1267, :none),
        (:macrocall, :(Core.@doc), "    uuid4([rng::AbstractRNG]) -> UUID\n\nGenerates a version 4 (random or pseudo-random) universally unique identifier (UUID),\nas specified by RFC 4122.\n", (:function, (:call, :uuid4, (:kw, (:(::), :rng, :AbstractRNG), :GLOBAL_RNG)), (:block,
              (:line, 1274, :none),
              (:(=), :u, (:call, :rand, :rng, :UInt128)),
              (:line, 1275, :none),
              (:&=, :u, (:macrocall, Symbol("@uint128_str"), "0xffffffffffff0fff3fffffffffffffff")),
              (:line, 1276, :none),
              (:|=, :u, (:macrocall, Symbol("@uint128_str"), "0x00000000000040008000000000000000")),
              (:line, 1277, :none),
              (:call, :UUID, :u)
            ))),
        (:line, 1280, :none),
        (:macrocall, :(Core.@doc), "    uuid_version(u::UUID) -> Integer\n\nInspects the given UUID and returns its version (see RFC 4122).\n", (:function, (:call, :uuid_version, (:(::), :u, :UUID)), (:block,
              (:line, 1286, :none),
              (:call, :Int, (:call, :&, (:call, :>>, (:., :u, (:quote, #QuoteNode
                        :value
                      )), 76), 0x0f))
            ))),
        (:line, 1289, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :convert
              )), (:(::), (:curly, :Type, :UInt128)), (:(::), :u, :UUID)), (:block,
            (:line, 1289, :none),
            (:., :u, (:quote, #QuoteNode
                :value
              ))
          )),
        (:line, 1291, :none),
        (:function, (:call, (:., :Base, (:quote, #QuoteNode
                :convert
              )), (:(::), (:curly, :Type, :UUID)), (:(::), :s, :AbstractString)), (:block,
            (:line, 1292, :none),
            (:(=), :s, (:call, :lowercase, :s)),
            (:line, 1294, :none),
            (:if, (:call, :!, (:call, :ismatch, (:macrocall, Symbol("@r_str"), "^[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}\$"), :s)), (:block,
                (:line, 1295, :none),
                (:call, :throw, (:call, :ArgumentError, "Malformed UUID string"))
              )),
            (:line, 1298, :none),
            (:(=), :u, (:call, :UInt128, 0)),
            (:line, 1299, :none),
            (:for, (:(=), :i, (:vcat, (:(:), 1, 8), (:(:), 10, 13), (:(:), 15, 18), (:(:), 20, 23), (:(:), 25, 36))), (:block,
                (:line, 1300, :none),
                (:<<=, :u, 4),
                (:line, 1301, :none),
                (:(=), :d, (:call, :-, (:ref, :s, :i), '0')),
                (:line, 1302, :none),
                (:|=, :u, (:call, :&, 0x0f, (:call, :-, :d, (:call, :*, 39, (:call, :>, :d, 9)))))
              )),
            (:line, 1304, :none),
            (:return, (:call, :UUID, :u))
          )),
        (:line, 1307, :none),
        (:function, (:call, (:., :Base, (:quote, #QuoteNode
                :repr
              )), (:(::), :u, :UUID)), (:block,
            (:line, 1308, :none),
            (:(=), :u, (:., :u, (:quote, #QuoteNode
                  :value
                ))),
            (:line, 1309, :none),
            (:(=), :a, (:call, (:curly, :Array, :UInt8), 36)),
            (:line, 1310, :none),
            (:for, (:(=), :i, (:vcat, (:(:), 36, -1, 25), (:(:), 23, -1, 20), (:(:), 18, -1, 15), (:(:), 13, -1, 10), (:(:), 8, -1, 1))), (:block,
                (:line, 1311, :none),
                (:(=), :d, (:call, :&, :u, 0x0f)),
                (:line, 1312, :none),
                (:(=), (:ref, :a, :i), (:call, :+, '0', :d, (:call, :*, 39, (:call, :>, :d, 9)))),
                (:line, 1313, :none),
                (:>>=, :u, 4)
              )),
            (:line, 1315, :none),
            (:(=), (:ref, :a, (:vect, 24, 19, 14, 9)), '-'),
            (:line, 1317, :none),
            (:return, (:call, :String, :a))
          )),
        (:line, 1320, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :show
              )), (:(::), :io, :IO), (:(::), :u, :UUID)), (:block,
            (:line, 1320, :none),
            (:call, :write, :io, (:call, (:., :Base, (:quote, #QuoteNode
                    :repr
                  )), :u))
          )),
        (:line, 1323, :none),
        (:let, (:block,
            (:line, 1324, :none),
            (:global, :randstring),
            (:line, 1325, :none),
            (:(=), (:call, :randstring, (:(::), :r, :AbstractRNG), (:(::), :n, :Int)), (:block,
                (:line, 1325, :none),
                (:call, :String, (:ref, :b, (:call, :rand, :r, (:(:), 1, (:call, :length, :b)), :n)))
              )),
            (:line, 1326, :none),
            (:(=), (:call, :randstring, (:(::), :r, :AbstractRNG)), (:block,
                (:line, 1326, :none),
                (:call, :randstring, :r, 8)
              )),
            (:line, 1327, :none),
            (:(=), (:call, :randstring, (:(::), :n, :Int)), (:block,
                (:line, 1327, :none),
                (:call, :randstring, :GLOBAL_RNG, :n)
              )),
            (:line, 1328, :none),
            (:(=), (:call, :randstring), (:block,
                (:line, 1328, :none),
                (:call, :randstring, :GLOBAL_RNG)
              ))
          ), (:(=), :b, (:typed_vcat, :UInt8, (:(:), '0', '9'), (:(:), 'A', 'Z'), (:(:), 'a', 'z')))),
        (:line, 1336, :none),
        (:function, (:call, :randsubseq!, (:(::), :r, :AbstractRNG), (:(::), :S, :AbstractArray), (:(::), :A, :AbstractArray), (:(::), :p, :Real)), (:block,
            (:line, 1337, :none),
            (:||, (:comparison, 0, :(<=), :p, :(<=), 1), (:call, :throw, (:call, :ArgumentError, (:string, "probability ", :p, " not in [0,1]")))),
            (:line, 1338, :none),
            (:(=), :n, (:call, :length, :A)),
            (:line, 1339, :none),
            (:&&, (:call, :(==), :p, 1), (:return, (:call, :copy!, (:call, :resize!, :S, :n), :A))),
            (:line, 1340, :none),
            (:call, :empty!, :S),
            (:line, 1341, :none),
            (:&&, (:call, :(==), :p, 0), (:return, :S)),
            (:line, 1342, :none),
            (:(=), :nexpected, (:call, :*, :p, (:call, :length, :A))),
            (:line, 1343, :none),
            (:call, :sizehint!, :S, (:call, :round, :Int, (:call, :+, :nexpected, (:call, :*, 5, (:call, :sqrt, :nexpected))))),
            (:line, 1344, :none),
            (:if, (:call, :>, :p, 0.15), (:block,
                (:line, 1345, :none),
                (:for, (:(=), :i, (:(:), 1, :n)), (:block,
                    (:line, 1346, :none),
                    (:&&, (:call, :(<=), (:call, :rand, :r), :p), (:call, :push!, :S, (:ref, :A, :i)))
                  ))
              ), (:block,
                (:line, 1357, :none),
                (:(=), :L, (:call, :/, -1, (:call, :log1p, (:call, :-, :p)))),
                (:line, 1358, :none),
                (:(=), :i, 0),
                (:line, 1359, :none),
                (:while, true, (:block,
                    (:line, 1360, :none),
                    (:(=), :s, (:call, :*, (:call, :randexp, :r), :L)),
                    (:line, 1361, :none),
                    (:&&, (:call, :(>=), :s, (:call, :-, :n, :i)), (:return, :S)),
                    (:line, 1362, :none),
                    (:call, :push!, :S, (:ref, :A, (:+=, :i, (:call, :ceil, :Int, :s))))
                  ))
              )),
            (:line, 1368, :none),
            (:return, :S)
          )),
        (:line, 1370, :none),
        (:(=), (:call, :randsubseq!, (:(::), :S, :AbstractArray), (:(::), :A, :AbstractArray), (:(::), :p, :Real)), (:block,
            (:line, 1370, :none),
            (:call, :randsubseq!, :GLOBAL_RNG, :S, :A, :p)
          )),
        (:line, 1372, :none),
        (:(=), (:call, (:curly, :randsubseq, :T), (:(::), :r, :AbstractRNG), (:(::), :A, (:curly, :AbstractArray, :T)), (:(::), :p, :Real)), (:block,
            (:line, 1372, :none),
            (:call, :randsubseq!, :r, (:ref, :T), :A, :p)
          )),
        (:line, 1373, :none),
        (:(=), (:call, :randsubseq, (:(::), :A, :AbstractArray), (:(::), :p, :Real)), (:block,
            (:line, 1373, :none),
            (:call, :randsubseq, :GLOBAL_RNG, :A, :p)
          )),
        (:line, 1375, :none),
        (:macrocall, :(Core.@doc), "Return a random `Int` (masked with `mask`) in ``[0, n)``, when `n <= 2^52`.", (:macrocall, Symbol("@inline"), (:function, (:call, :rand_lt, (:(::), :r, :AbstractRNG), (:(::), :n, :Int), (:kw, (:(::), :mask, :Int), (:call, :-, (:call, :nextpow2, :n), 1))), (:block,
                (:line, 1379, :none),
                (:while, true, (:block,
                    (:line, 1380, :none),
                    (:(=), :x, (:call, :&, (:call, :%, (:call, :rand_ui52_raw, :r), :Int), :mask)),
                    (:line, 1381, :none),
                    (:&&, (:call, :<, :x, :n), (:return, :x))
                  ))
              )))),
        (:line, 1385, :none),
        (:function, (:call, :shuffle!, (:(::), :r, :AbstractRNG), (:(::), :a, :AbstractVector)), (:block,
            (:line, 1386, :none),
            (:(=), :n, (:call, :length, :a)),
            (:line, 1387, :none),
            (:macrocall, Symbol("@assert"), (:call, :(<=), :n, (:call, :^, (:call, :Int64, 2), 52))),
            (:line, 1388, :none),
            (:(=), :mask, (:call, :-, (:call, :nextpow2, :n), 1)),
            (:line, 1389, :none),
            (:for, (:(=), :i, (:(:), :n, -1, 2)), (:block,
                (:line, 1390, :none),
                (:&&, (:call, :(==), (:call, :>>, :mask, 1), :i), (:>>=, :mask, 1)),
                (:line, 1391, :none),
                (:(=), :j, (:call, :+, 1, (:call, :rand_lt, :r, :i, :mask))),
                (:line, 1392, :none),
                (:(=), (:tuple, (:ref, :a, :i), (:ref, :a, :j)), (:tuple, (:ref, :a, :j), (:ref, :a, :i)))
              )),
            (:line, 1394, :none),
            (:return, :a)
          )),
        (:line, 1397, :none),
        (:(=), (:call, :shuffle!, (:(::), :a, :AbstractVector)), (:block,
            (:line, 1397, :none),
            (:call, :shuffle!, :GLOBAL_RNG, :a)
          )),
        (:line, 1399, :none),
        (:(=), (:call, :shuffle, (:(::), :r, :AbstractRNG), (:(::), :a, :AbstractVector)), (:block,
            (:line, 1399, :none),
            (:call, :shuffle!, :r, (:call, :copymutable, :a))
          )),
        (:line, 1400, :none),
        (:(=), (:call, :shuffle, (:(::), :a, :AbstractVector)), (:block,
            (:line, 1400, :none),
            (:call, :shuffle, :GLOBAL_RNG, :a)
          )),
        (:line, 1402, :none),
        (:function, (:call, :randperm, (:(::), :r, :AbstractRNG), (:(::), :n, :Integer)), (:block,
            (:line, 1403, :none),
            (:(=), :a, (:call, (:curly, :Array, (:call, :typeof, :n)), :n)),
            (:line, 1404, :none),
            (:macrocall, Symbol("@assert"), (:call, :(<=), :n, (:call, :^, (:call, :Int64, 2), 52))),
            (:line, 1405, :none),
            (:if, (:call, :(==), :n, 0), (:block,
                (:line, 1406, :none),
                (:return, :a)
              )),
            (:line, 1408, :none),
            (:(=), (:ref, :a, 1), 1),
            (:line, 1409, :none),
            (:(=), :mask, 3),
            (:line, 1410, :none),
            (:macrocall, Symbol("@inbounds"), (:for, (:(=), :i, (:(:), 2, (:call, :Int, :n))), (:block,
                  (:line, 1411, :none),
                  (:(=), :j, (:call, :+, 1, (:call, :rand_lt, :r, :i, :mask))),
                  (:line, 1412, :none),
                  (:if, (:call, :(!=), :i, :j), (:block,
                      (:line, 1413, :none),
                      (:(=), (:ref, :a, :i), (:ref, :a, :j))
                    )),
                  (:line, 1415, :none),
                  (:(=), (:ref, :a, :j), :i),
                  (:line, 1416, :none),
                  (:&&, (:call, :(==), :i, (:call, :+, 1, :mask)), (:(=), :mask, (:call, :+, (:call, :*, 2, :mask), 1)))
                ))),
            (:line, 1418, :none),
            (:return, :a)
          )),
        (:line, 1420, :none),
        (:(=), (:call, :randperm, (:(::), :n, :Integer)), (:block,
            (:line, 1420, :none),
            (:call, :randperm, :GLOBAL_RNG, :n)
          )),
        (:line, 1422, :none),
        (:function, (:call, :randcycle, (:(::), :r, :AbstractRNG), (:(::), :n, :Integer)), (:block,
            (:line, 1423, :none),
            (:(=), :a, (:call, (:curly, :Array, (:call, :typeof, :n)), :n)),
            (:line, 1424, :none),
            (:&&, (:call, :(==), :n, 0), (:return, :a)),
            (:line, 1425, :none),
            (:macrocall, Symbol("@assert"), (:call, :(<=), :n, (:call, :^, (:call, :Int64, 2), 52))),
            (:line, 1426, :none),
            (:(=), (:ref, :a, 1), 1),
            (:line, 1427, :none),
            (:(=), :mask, 3),
            (:line, 1428, :none),
            (:macrocall, Symbol("@inbounds"), (:for, (:(=), :i, (:(:), 2, (:call, :Int, :n))), (:block,
                  (:line, 1429, :none),
                  (:(=), :j, (:call, :+, 1, (:call, :rand_lt, :r, (:call, :-, :i, 1), :mask))),
                  (:line, 1430, :none),
                  (:(=), (:ref, :a, :i), (:ref, :a, :j)),
                  (:line, 1431, :none),
                  (:(=), (:ref, :a, :j), :i),
                  (:line, 1432, :none),
                  (:&&, (:call, :(==), :i, (:call, :+, 1, :mask)), (:(=), :mask, (:call, :+, (:call, :*, 2, :mask), 1)))
                ))),
            (:line, 1434, :none),
            (:return, :a)
          )),
        (:line, 1436, :none),
        (:(=), (:call, :randcycle, (:(::), :n, :Integer)), (:block,
            (:line, 1436, :none),
            (:call, :randcycle, :GLOBAL_RNG, :n)
          ))
      ))
  ))