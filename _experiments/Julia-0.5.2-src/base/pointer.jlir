(:quote, (:block,
    (:line, 5, :none),
    "    C_NULL\n\nThe C null pointer constant, sometimes used when calling external code.\n",
    (:line, 10, :none),
    (:const, (:(=), :C_NULL, (:call, :box, (:curly, :Ptr, :Void), 0))),
    (:line, 13, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Int, :UInt))), (:(::), (:curly, :Type, :T)), (:(::), :x, :Ptr)), (:block,
        (:line, 13, :none),
        (:call, :box, :T, (:call, :unbox, (:curly, :Ptr, :Void), :x))
      )),
    (:line, 14, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, :Ptr)), (:block,
        (:line, 14, :none),
        (:call, :convert, :T, (:call, :convert, :UInt, :x))
      )),
    (:line, 17, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :x, :UInt)), (:block,
        (:line, 17, :none),
        (:call, :box, (:curly, :Ptr, :T), (:call, :unbox, :UInt, (:call, :UInt, :x)))
      )),
    (:line, 18, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :x, :Int)), (:block,
        (:line, 18, :none),
        (:call, :box, (:curly, :Ptr, :T), (:call, :unbox, :Int, (:call, :Int, :x)))
      )),
    (:line, 21, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :p, (:curly, :Ptr, :T))), (:block,
        (:line, 21, :none),
        :p
      )),
    (:line, 22, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :p, :Ptr)), (:block,
        (:line, 22, :none),
        (:call, :box, (:curly, :Ptr, :T), (:call, :unbox, (:curly, :Ptr, :Void), :p))
      )),
    (:line, 25, :none),
    (:(=), (:call, :unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :UInt8))), (:(::), :x, :Symbol)), (:block,
        (:line, 25, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_symbol_name
          ), (:curly, :Ptr, :UInt8), (:tuple, :Any), :x)
      )),
    (:line, 26, :none),
    (:(=), (:call, :unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :Int8))), (:(::), :x, :Symbol)), (:block,
        (:line, 26, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_symbol_name
          ), (:curly, :Ptr, :Int8), (:tuple, :Any), :x)
      )),
    (:line, 27, :none),
    (:(=), (:call, :unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :UInt8))), (:(::), :s, :String)), (:block,
        (:line, 27, :none),
        (:call, :unsafe_convert, (:curly, :Ptr, :UInt8), (:., :s, (:quote, #QuoteNode
              :data
            )))
      )),
    (:line, 28, :none),
    (:(=), (:call, :unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :Int8))), (:(::), :s, :String)), (:block,
        (:line, 28, :none),
        (:call, :convert, (:curly, :Ptr, :Int8), (:call, :unsafe_convert, (:curly, :Ptr, :UInt8), (:., :s, (:quote, #QuoteNode
                :data
              ))))
      )),
    (:line, 30, :none),
    (:(=), (:call, :cconvert, (:(::), (:curly, :Type, (:curly, :Ptr, :UInt8))), (:(::), :s, :AbstractString)), (:block,
        (:line, 30, :none),
        (:call, :String, :s)
      )),
    (:line, 31, :none),
    (:(=), (:call, :cconvert, (:(::), (:curly, :Type, (:curly, :Ptr, :Int8))), (:(::), :s, :AbstractString)), (:block,
        (:line, 31, :none),
        (:call, :String, :s)
      )),
    (:line, 33, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :a, (:curly, :Array, :T))), (:block,
        (:line, 33, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_array_ptr
          ), (:curly, :Ptr, :T), (:tuple, :Any), :a)
      )),
    (:line, 34, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :S, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :S))), (:(::), :a, (:curly, :AbstractArray, :T))), (:block,
        (:line, 34, :none),
        (:call, :convert, (:curly, :Ptr, :S), (:call, :unsafe_convert, (:curly, :Ptr, :T), :a))
      )),
    (:line, 35, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :a, (:curly, :AbstractArray, :T))), (:block,
        (:line, 35, :none),
        (:call, :error, (:string, "conversion to pointer not defined for ", (:call, :typeof, :a)))
      )),
    (:line, 38, :none),
    "    unsafe_wrap(Array, pointer::Ptr{T}, dims, own=false)\n\nWrap a Julia `Array` object around the data at the address given by `pointer`,\nwithout making a copy.  The pointer element type `T` determines the array\nelement type. `dims` is either an integer (for a 1d array) or a tuple of the array dimensions.\n`own` optionally specifies whether Julia should take ownership of the memory,\ncalling `free` on the pointer when the array is no longer referenced.\n\nThis function is labelled \"unsafe\" because it will crash if `pointer` is not\na valid memory address to data of the requested length.\n",
    (:line, 50, :none),
    (:function, (:call, (:curly, :unsafe_wrap, :T, :N), (:(::), (:curly, :Union, (:curly, :Type, :Array), (:curly, :Type, (:curly, :Array, :T)), (:curly, :Type, (:curly, :Array, :T, :N)))), (:(::), :p, (:curly, :Ptr, :T)), (:(::), :dims, (:curly, :NTuple, :N, :Int)), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 52, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_ptr_to_array
          ), (:curly, :Array, :T, :N), (:tuple, :Any, (:curly, :Ptr, :Void), :Any, :Int32), (:curly, :Array, :T, :N), :p, :dims, :own)
      )),
    (:line, 55, :none),
    (:function, (:call, (:curly, :unsafe_wrap, :T), (:(::), (:curly, :Union, (:curly, :Type, :Array), (:curly, :Type, (:curly, :Array, :T)), (:curly, :Type, (:curly, :Array, :T, 1)))), (:(::), :p, (:curly, :Ptr, :T)), (:(::), :d, :Integer), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 57, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_ptr_to_array_1d
          ), (:curly, :Vector, :T), (:tuple, :Any, (:curly, :Ptr, :Void), :Csize_t, :Cint), (:curly, :Array, :T, 1), :p, :d, :own)
      )),
    (:line, 60, :none),
    (:(=), (:call, (:curly, :unsafe_wrap, :N, (:<:, :I, :Integer)), (:(::), :Atype, :Type), (:(::), :p, :Ptr), (:(::), :dims, (:curly, :NTuple, :N, :I)), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 60, :none),
        (:call, :unsafe_wrap, :Atype, :p, (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :dims), :own)
      )),
    (:line, 63, :none),
    (:(=), (:call, :unsafe_load, (:(::), :p, :Ptr), (:kw, (:(::), :i, :Integer), 1)), (:block,
        (:line, 63, :none),
        (:call, :pointerref, :p, (:call, :Int, :i), 1)
      )),
    (:line, 64, :none),
    (:(=), (:call, :unsafe_store!, (:(::), :p, (:curly, :Ptr, :Any)), (:(::), :x, :ANY), (:kw, (:(::), :i, :Integer), 1)), (:block,
        (:line, 64, :none),
        (:call, :pointerset, :p, :x, (:call, :Int, :i), 1)
      )),
    (:line, 65, :none),
    (:(=), (:call, (:curly, :unsafe_store!, :T), (:(::), :p, (:curly, :Ptr, :T)), :x, (:kw, (:(::), :i, :Integer), 1)), (:block,
        (:line, 65, :none),
        (:call, :pointerset, :p, (:call, :convert, :T, :x), (:call, :Int, :i), 1)
      )),
    (:line, 69, :none),
    "    unsafe_wrap(String, p::Ptr{UInt8}, [length,] own=false)\n\nWrap a pointer `p` to an array of bytes in a `String` object,\ninterpreting the bytes as UTF-8 encoded characters *without making a\ncopy*. The optional `length` argument indicates the length in bytes of\nthe pointer's data; if it is omitted, the data is assumed to be\nNUL-terminated.  The `own` argument optionally specifies whether Julia\nshould take ownership of the memory, calling `free` on the pointer\nwhen the array is no longer referenced.\n\nThis function is labelled \"unsafe\" because it will crash if `p` is not\na valid memory address to data of the requested length.\n\nSee also [`unsafe_string`](:func:`unsafe_string`), which takes a pointer\nand makes a copy of the data.\n",
    (:line, 86, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, (:curly, :Union, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :Int8))), (:(::), :len, :Integer), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 86, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_array_to_string
          ), (:curly, :Ref, :String), (:tuple, :Any), (:ccall, (:quote, #QuoteNode
              :jl_ptr_to_array_1d
            ), (:curly, :Vector, :UInt8), (:tuple, :Any, (:curly, :Ptr, :UInt8), :Csize_t, :Cint), (:curly, :Vector, :UInt8), :p, :len, :own))
      )),
    (:line, 90, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, (:curly, :Union, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :Int8))), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 90, :none),
        (:call, :unsafe_wrap, :String, :p, (:ccall, (:quote, #QuoteNode
              :strlen
            ), :Csize_t, (:tuple, (:curly, :Ptr, :UInt8)), :p), :own)
      )),
    (:line, 94, :none),
    (:(=), (:call, :unsafe_pointer_to_objref, (:(::), :x, :Ptr)), (:block,
        (:line, 94, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_value_ptr
          ), :Any, (:tuple, (:curly, :Ptr, :Void)), :x)
      )),
    (:line, 95, :none),
    (:(=), (:call, :pointer_from_objref, (:(::), :x, :ANY)), (:block,
        (:line, 95, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_value_ptr
          ), (:curly, :Ptr, :Void), (:tuple, :Any), :x)
      )),
    (:line, 96, :none),
    (:(=), (:call, :data_pointer_from_objref, (:(::), :x, :ANY)), (:block,
        (:line, 96, :none),
        (:(::), (:call, :pointer_from_objref, :x), (:curly, :Ptr, :Void))
      )),
    (:line, 98, :none),
    (:(=), (:call, (:curly, :eltype, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T)))), (:block,
        (:line, 98, :none),
        :T
      )),
    (:line, 102, :none),
    (:(=), (:call, :(==), (:(::), :x, :Ptr), (:(::), :y, :Ptr)), (:block,
        (:line, 102, :none),
        (:call, :(==), (:call, :UInt, :x), (:call, :UInt, :y))
      )),
    (:line, 103, :none),
    (:(=), (:call, :isless, (:(::), :x, :Ptr), (:(::), :y, :Ptr)), (:block,
        (:line, 103, :none),
        (:call, :isless, (:call, :UInt, :x), (:call, :UInt, :y))
      )),
    (:line, 104, :none),
    (:(=), (:call, :-, (:(::), :x, :Ptr), (:(::), :y, :Ptr)), (:block,
        (:line, 104, :none),
        (:call, :-, (:call, :UInt, :x), (:call, :UInt, :y))
      )),
    (:line, 106, :none),
    (:(=), (:call, :+, (:(::), :x, :Ptr), (:(::), :y, :Integer)), (:block,
        (:line, 106, :none),
        (:call, :oftype, :x, (:call, :+, (:call, :UInt, :x), (:call, :%, (:call, :%, :y, :UInt), :UInt)))
      )),
    (:line, 107, :none),
    (:(=), (:call, :-, (:(::), :x, :Ptr), (:(::), :y, :Integer)), (:block,
        (:line, 107, :none),
        (:call, :oftype, :x, (:call, :-, (:call, :UInt, :x), (:call, :%, (:call, :%, :y, :UInt), :UInt)))
      )),
    (:line, 108, :none),
    (:(=), (:call, :+, (:(::), :x, :Integer), (:(::), :y, :Ptr)), (:block,
        (:line, 108, :none),
        (:call, :+, :y, :x)
      ))
  ))