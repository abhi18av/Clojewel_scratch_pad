(:quote, (:block,
    (:line, 5, :none),
    (:call, :include, "pcre.jl"),
    (:line, 7, :none),
    (:const, (:(=), :DEFAULT_COMPILER_OPTS, (:call, :|, (:call, :|, (:., :PCRE, (:quote, #QuoteNode
                :UTF
              )), (:., :PCRE, (:quote, #QuoteNode
                :NO_UTF_CHECK
              ))), (:., :PCRE, (:quote, #QuoteNode
              :ALT_BSUX
            ))))),
    (:line, 8, :none),
    (:const, (:(=), :DEFAULT_MATCH_OPTS, (:., :PCRE, (:quote, #QuoteNode
            :NO_UTF_CHECK
          )))),
    (:line, 10, :none),
    (:type, true, :Regex, (:block,
        (:line, 11, :none),
        (:(::), :pattern, :String),
        (:line, 12, :none),
        (:(::), :compile_options, :UInt32),
        (:line, 13, :none),
        (:(::), :match_options, :UInt32),
        (:line, 14, :none),
        (:(::), :regex, (:curly, :Ptr, :Void)),
        (:line, 15, :none),
        (:(::), :extra, (:curly, :Ptr, :Void)),
        (:line, 16, :none),
        (:(::), :ovec, (:curly, :Vector, :Csize_t)),
        (:line, 17, :none),
        (:(::), :match_data, (:curly, :Ptr, :Void)),
        (:line, 19, :none),
        (:function, (:call, :Regex, (:(::), :pattern, :AbstractString), (:(::), :compile_options, :Integer), (:(::), :match_options, :Integer)), (:block,
            (:line, 21, :none),
            (:(=), :pattern, (:call, :String, :pattern)),
            (:line, 22, :none),
            (:(=), :compile_options, (:call, :UInt32, :compile_options)),
            (:line, 23, :none),
            (:(=), :match_options, (:call, :UInt32, :match_options)),
            (:line, 24, :none),
            (:if, (:call, :(!=), (:call, :&, :compile_options, (:call, :~, (:., :PCRE, (:quote, #QuoteNode
                        :COMPILE_MASK
                      )))), 0), (:block,
                (:line, 25, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "invalid regex compile options: ", :compile_options)))
              )),
            (:line, 27, :none),
            (:if, (:call, :(!=), (:call, :&, :match_options, (:call, :~, (:., :PCRE, (:quote, #QuoteNode
                        :EXECUTE_MASK
                      )))), 0), (:block,
                (:line, 28, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "invalid regex match options: ", :match_options)))
              )),
            (:line, 30, :none),
            (:(=), :re, (:call, :compile, (:call, :new, :pattern, :compile_options, :match_options, :C_NULL, :C_NULL, (:ref, :Csize_t), :C_NULL))),
            (:line, 32, :none),
            (:call, :finalizer, :re, (:->, :re, (:block,
                  (:line, 32, :none),
                  (:block,
                    (:line, 33, :none),
                    (:||, (:call, :(==), (:., :re, (:quote, #QuoteNode
                            :regex
                          )), :C_NULL), (:call, (:., :PCRE, (:quote, #QuoteNode
                            :free_re
                          )), (:., :re, (:quote, #QuoteNode
                            :regex
                          )))),
                    (:line, 34, :none),
                    (:||, (:call, :(==), (:., :re, (:quote, #QuoteNode
                            :match_data
                          )), :C_NULL), (:call, (:., :PCRE, (:quote, #QuoteNode
                            :free_match_data
                          )), (:., :re, (:quote, #QuoteNode
                            :match_data
                          ))))
                  )
                ))),
            (:line, 36, :none),
            :re
          ))
      )),
    (:line, 40, :none),
    (:function, (:call, :Regex, (:(::), :pattern, :AbstractString), (:(::), :flags, :AbstractString)), (:block,
        (:line, 41, :none),
        (:(=), :options, :DEFAULT_COMPILER_OPTS),
        (:line, 42, :none),
        (:for, (:(=), :f, :flags), (:block,
            (:line, 43, :none),
            (:|=, :options, (:if, (:call, :(==), :f, 'i'), (:., :PCRE, (:quote, #QuoteNode
                    :CASELESS
                  )), (:if, (:call, :(==), :f, 'm'), (:., :PCRE, (:quote, #QuoteNode
                      :MULTILINE
                    )), (:if, (:call, :(==), :f, 's'), (:., :PCRE, (:quote, #QuoteNode
                        :DOTALL
                      )), (:if, (:call, :(==), :f, 'x'), (:., :PCRE, (:quote, #QuoteNode
                          :EXTENDED
                        )), (:call, :throw, (:call, :ArgumentError, (:string, "unknown regex flag: ", :f))))))))
          )),
        (:line, 49, :none),
        (:call, :Regex, :pattern, :options, :DEFAULT_MATCH_OPTS)
      )),
    (:line, 51, :none),
    (:(=), (:call, :Regex, (:(::), :pattern, :AbstractString)), (:block,
        (:line, 51, :none),
        (:call, :Regex, :pattern, :DEFAULT_COMPILER_OPTS, :DEFAULT_MATCH_OPTS)
      )),
    (:line, 53, :none),
    (:function, (:call, :compile, (:(::), :regex, :Regex)), (:block,
        (:line, 54, :none),
        (:if, (:call, :(==), (:., :regex, (:quote, #QuoteNode
                :regex
              )), :C_NULL), (:block,
            (:line, 55, :none),
            (:(=), (:., :regex, (:quote, #QuoteNode
                  :regex
                )), (:call, (:., :PCRE, (:quote, #QuoteNode
                    :compile
                  )), (:., :regex, (:quote, #QuoteNode
                    :pattern
                  )), (:., :regex, (:quote, #QuoteNode
                    :compile_options
                  )))),
            (:line, 56, :none),
            (:call, (:., :PCRE, (:quote, #QuoteNode
                  :jit_compile
                )), (:., :regex, (:quote, #QuoteNode
                  :regex
                ))),
            (:line, 57, :none),
            (:(=), (:., :regex, (:quote, #QuoteNode
                  :match_data
                )), (:call, (:., :PCRE, (:quote, #QuoteNode
                    :create_match_data
                  )), (:., :regex, (:quote, #QuoteNode
                    :regex
                  )))),
            (:line, 58, :none),
            (:(=), (:., :regex, (:quote, #QuoteNode
                  :ovec
                )), (:call, (:., :PCRE, (:quote, #QuoteNode
                    :get_ovec
                  )), (:., :regex, (:quote, #QuoteNode
                    :match_data
                  ))))
          )),
        (:line, 60, :none),
        :regex
      )),
    (:line, 63, :none),
    "    @r_str -> Regex\n\nConstruct a regex, such as `r\"^[a-z]*\$\"`. The regex also accepts one or more flags, listed\nafter the ending quote, to change its behaviour:\n\n- `i` enables case-insensitive matching\n- `m` treats the `^` and `\$` tokens as matching the start and end of individual lines, as\n  opposed to the whole string.\n- `s` allows the `.` modifier to match newlines.\n- `x` enables \"comment mode\": whitespace is enabled except when escaped with `\\`, and `#`\n  is treated as starting a comment.\n\nFor example, this regex has all three flags enabled:\n\n```julia\njulia> match(r\"a+.*b+.*?d\$\"ism, \"Goodbye,\\nOh, angry,\\nBad world\\n\")\nRegexMatch(\"angry,\\nBad world\")\n```\n",
    (:line, 83, :none),
    (:macro, (:call, :r_str, :pattern, (:..., :flags)), (:block,
        (:line, 83, :none),
        (:call, :Regex, :pattern, (:..., :flags))
      )),
    (:line, 85, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :re, :Regex)), (:block,
        (:line, 86, :none),
        (:(=), :imsx, (:call, :|, (:call, :|, (:call, :|, (:., :PCRE, (:quote, #QuoteNode
                    :CASELESS
                  )), (:., :PCRE, (:quote, #QuoteNode
                    :MULTILINE
                  ))), (:., :PCRE, (:quote, #QuoteNode
                  :DOTALL
                ))), (:., :PCRE, (:quote, #QuoteNode
                :EXTENDED
              )))),
        (:line, 87, :none),
        (:(=), :opts, (:., :re, (:quote, #QuoteNode
              :compile_options
            ))),
        (:line, 88, :none),
        (:if, (:call, :(==), (:call, :&, :opts, (:call, :~, :imsx)), :DEFAULT_COMPILER_OPTS), (:block,
            (:line, 89, :none),
            (:call, :print, :io, 'r'),
            (:line, 90, :none),
            (:call, :print_quoted_literal, :io, (:., :re, (:quote, #QuoteNode
                  :pattern
                ))),
            (:line, 91, :none),
            (:if, (:call, :(!=), (:call, :&, :opts, (:., :PCRE, (:quote, #QuoteNode
                      :CASELESS
                    ))), 0), (:block,
                (:line, 91, :none),
                (:call, :print, :io, 'i')
              )),
            (:line, 92, :none),
            (:if, (:call, :(!=), (:call, :&, :opts, (:., :PCRE, (:quote, #QuoteNode
                      :MULTILINE
                    ))), 0), (:block,
                (:line, 92, :none),
                (:call, :print, :io, 'm')
              )),
            (:line, 93, :none),
            (:if, (:call, :(!=), (:call, :&, :opts, (:., :PCRE, (:quote, #QuoteNode
                      :DOTALL
                    ))), 0), (:block,
                (:line, 93, :none),
                (:call, :print, :io, 's')
              )),
            (:line, 94, :none),
            (:if, (:call, :(!=), (:call, :&, :opts, (:., :PCRE, (:quote, #QuoteNode
                      :EXTENDED
                    ))), 0), (:block,
                (:line, 94, :none),
                (:call, :print, :io, 'x')
              ))
          ), (:block,
            (:line, 96, :none),
            (:call, :print, :io, "Regex("),
            (:line, 97, :none),
            (:call, :show, :io, (:., :re, (:quote, #QuoteNode
                  :pattern
                ))),
            (:line, 98, :none),
            (:call, :print, :io, ','),
            (:line, 99, :none),
            (:call, :show, :io, :opts),
            (:line, 100, :none),
            (:call, :print, :io, ')')
          ))
      )),
    (:line, 107, :none),
    (:type, false, :RegexMatch, (:block,
        (:line, 108, :none),
        (:(::), :match, (:curly, :SubString, :String)),
        (:line, 109, :none),
        (:(::), :captures, (:curly, :Vector, (:curly, :Union, :Void, (:curly, :SubString, :String)))),
        (:line, 110, :none),
        (:(::), :offset, :Int),
        (:line, 111, :none),
        (:(::), :offsets, (:curly, :Vector, :Int)),
        (:line, 112, :none),
        (:(::), :regex, :Regex)
      )),
    (:line, 115, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :m, :RegexMatch)), (:block,
        (:line, 116, :none),
        (:call, :print, :io, "RegexMatch("),
        (:line, 117, :none),
        (:call, :show, :io, (:., :m, (:quote, #QuoteNode
              :match
            ))),
        (:line, 118, :none),
        (:(=), :idx_to_capture_name, (:call, (:., :PCRE, (:quote, #QuoteNode
                :capture_names
              )), (:., (:., :m, (:quote, #QuoteNode
                  :regex
                )), (:quote, #QuoteNode
                :regex
              )))),
        (:line, 119, :none),
        (:if, (:call, :!, (:call, :isempty, (:., :m, (:quote, #QuoteNode
                  :captures
                )))), (:block,
            (:line, 120, :none),
            (:call, :print, :io, ", "),
            (:line, 121, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, (:., :m, (:quote, #QuoteNode
                        :captures
                      ))))), (:block,
                (:line, 124, :none),
                (:(=), :capture_name, (:call, :get, :idx_to_capture_name, :i, :i)),
                (:line, 125, :none),
                (:call, :print, :io, :capture_name, "="),
                (:line, 126, :none),
                (:call, :show, :io, (:ref, (:., :m, (:quote, #QuoteNode
                        :captures
                      )), :i)),
                (:line, 127, :none),
                (:if, (:call, :<, :i, (:call, :length, (:., :m, (:quote, #QuoteNode
                          :captures
                        )))), (:block,
                    (:line, 128, :none),
                    (:call, :print, :io, ", ")
                  ))
              ))
          )),
        (:line, 132, :none),
        (:call, :print, :io, ")")
      )),
    (:line, 136, :none),
    (:(=), (:call, :getindex, (:(::), :m, :RegexMatch), (:(::), :idx, :Integer)), (:block,
        (:line, 136, :none),
        (:ref, (:., :m, (:quote, #QuoteNode
              :captures
            )), :idx)
      )),
    (:line, 137, :none),
    (:function, (:call, :getindex, (:(::), :m, :RegexMatch), (:(::), :name, :Symbol)), (:block,
        (:line, 138, :none),
        (:(=), :idx, (:call, (:., :PCRE, (:quote, #QuoteNode
                :substring_number_from_name
              )), (:., (:., :m, (:quote, #QuoteNode
                  :regex
                )), (:quote, #QuoteNode
                :regex
              )), :name)),
        (:line, 139, :none),
        (:&&, (:call, :(<=), :idx, 0), (:call, :error, (:string, "no capture group named ", :name, " found in regex"))),
        (:line, 140, :none),
        (:ref, :m, :idx)
      )),
    (:line, 142, :none),
    (:(=), (:call, :getindex, (:(::), :m, :RegexMatch), (:(::), :name, :AbstractString)), (:block,
        (:line, 142, :none),
        (:ref, :m, (:call, :Symbol, :name))
      )),
    (:line, 144, :none),
    (:function, (:call, :ismatch, (:(::), :r, :Regex), (:(::), :s, :AbstractString), (:kw, (:(::), :offset, :Integer), 0)), (:block,
        (:line, 145, :none),
        (:call, :compile, :r),
        (:line, 146, :none),
        (:return, (:call, (:., :PCRE, (:quote, #QuoteNode
                :exec
              )), (:., :r, (:quote, #QuoteNode
                :regex
              )), (:call, :String, :s), :offset, (:., :r, (:quote, #QuoteNode
                :match_options
              )), (:., :r, (:quote, #QuoteNode
                :match_data
              ))))
      )),
    (:line, 150, :none),
    (:function, (:call, :ismatch, (:(::), :r, :Regex), (:(::), :s, :SubString), (:kw, (:(::), :offset, :Integer), 0)), (:block,
        (:line, 151, :none),
        (:call, :compile, :r),
        (:line, 152, :none),
        (:return, (:call, (:., :PCRE, (:quote, #QuoteNode
                :exec
              )), (:., :r, (:quote, #QuoteNode
                :regex
              )), :s, :offset, (:., :r, (:quote, #QuoteNode
                :match_options
              )), (:., :r, (:quote, #QuoteNode
                :match_data
              ))))
      )),
    (:line, 156, :none),
    (:(=), (:call, (:(::), :r, :Regex), :s), (:block,
        (:line, 156, :none),
        (:call, :ismatch, :r, :s)
      )),
    (:line, 158, :none),
    (:function, (:call, :match, (:(::), :re, :Regex), (:(::), :str, (:curly, :Union, (:curly, :SubString, :String), :String)), (:(::), :idx, :Integer), (:kw, (:(::), :add_opts, :UInt32), (:call, :UInt32, 0))), (:block,
        (:line, 159, :none),
        (:call, :compile, :re),
        (:line, 160, :none),
        (:(=), :opts, (:call, :|, (:., :re, (:quote, #QuoteNode
                :match_options
              )), :add_opts)),
        (:line, 161, :none),
        (:if, (:call, :!, (:call, (:., :PCRE, (:quote, #QuoteNode
                  :exec
                )), (:., :re, (:quote, #QuoteNode
                  :regex
                )), :str, (:call, :-, :idx, 1), :opts, (:., :re, (:quote, #QuoteNode
                  :match_data
                )))), (:block,
            (:line, 162, :none),
            (:return, :nothing)
          )),
        (:line, 164, :none),
        (:(=), :ovec, (:., :re, (:quote, #QuoteNode
              :ovec
            ))),
        (:line, 165, :none),
        (:(=), :n, (:call, :-, (:call, :div, (:call, :length, :ovec), 2), 1)),
        (:line, 166, :none),
        (:(=), :mat, (:call, :SubString, :str, (:call, :+, (:ref, :ovec, 1), 1), (:ref, :ovec, 2))),
        (:line, 167, :none),
        (:(=), :cap, (:typed_comprehension, (:curly, :Union, :Void, (:curly, :SubString, :String)), (:generator, (:if, (:call, :(==), (:ref, :ovec, (:call, :+, (:call, :*, 2, :i), 1)), (:., :PCRE, (:quote, #QuoteNode
                      :UNSET
                    ))), :nothing, (:call, :SubString, :str, (:call, :+, (:ref, :ovec, (:call, :+, (:call, :*, 2, :i), 1)), 1), (:ref, :ovec, (:call, :+, (:call, :*, 2, :i), 2)))), (:(=), :i, (:(:), 1, :n))))),
        (:line, 169, :none),
        (:(=), :off, (:typed_comprehension, :Int, (:generator, (:call, :+, (:ref, :ovec, (:call, :+, (:call, :*, 2, :i), 1)), 1), (:(=), :i, (:(:), 1, :n))))),
        (:line, 170, :none),
        (:call, :RegexMatch, :mat, :cap, (:call, :+, (:ref, :ovec, 1), 1), :off, :re)
      )),
    (:line, 173, :none),
    (:(=), (:call, :match, (:(::), :r, :Regex), (:(::), :s, :AbstractString)), (:block,
        (:line, 173, :none),
        (:call, :match, :r, :s, (:call, :start, :s))
      )),
    (:line, 174, :none),
    (:(=), (:call, :match, (:(::), :r, :Regex), (:(::), :s, :AbstractString), (:(::), :i, :Integer)), (:block,
        (:line, 174, :none),
        (:call, :throw, (:call, :ArgumentError, "regex matching is only available for the String type; use String(s) to convert"))
      )),
    (:line, 178, :none),
    (:function, (:call, :matchall, (:(::), :re, :Regex), (:(::), :str, :String), (:kw, (:(::), :overlap, :Bool), false)), (:block,
        (:line, 179, :none),
        (:(=), :regex, (:., (:call, :compile, :re), (:quote, #QuoteNode
              :regex
            ))),
        (:line, 180, :none),
        (:(=), :n, (:call, :length, (:., :str, (:quote, #QuoteNode
                :data
              )))),
        (:line, 181, :none),
        (:(=), :matches, (:ref, (:curly, :SubString, :String))),
        (:line, 182, :none),
        (:(=), :offset, (:call, :UInt32, 0)),
        (:line, 183, :none),
        (:(=), :opts, (:., :re, (:quote, #QuoteNode
              :match_options
            ))),
        (:line, 184, :none),
        (:(=), :opts_nonempty, (:call, :|, (:call, :|, :opts, (:., :PCRE, (:quote, #QuoteNode
                  :ANCHORED
                ))), (:., :PCRE, (:quote, #QuoteNode
                :NOTEMPTY_ATSTART
              )))),
        (:line, 185, :none),
        (:(=), :prevempty, false),
        (:line, 186, :none),
        (:(=), :ovec, (:., :re, (:quote, #QuoteNode
              :ovec
            ))),
        (:line, 187, :none),
        (:while, true, (:block,
            (:line, 188, :none),
            (:(=), :result, (:call, (:., :PCRE, (:quote, #QuoteNode
                    :exec
                  )), :regex, :str, :offset, (:if, :prevempty, :opts_nonempty, :opts), (:., :re, (:quote, #QuoteNode
                    :match_data
                  )))),
            (:line, 189, :none),
            (:if, (:call, :!, :result), (:block,
                (:line, 190, :none),
                (:if, (:&&, :prevempty, (:call, :<, :offset, :n)), (:block,
                    (:line, 191, :none),
                    (:(=), :offset, (:call, :UInt32, (:call, :-, (:call, :nextind, :str, (:call, :+, :offset, 1)), 1))),
                    (:line, 192, :none),
                    (:(=), :prevempty, false),
                    (:line, 193, :none),
                    (:continue,)
                  ), (:block,
                    (:line, 195, :none),
                    (:break,)
                  ))
              )),
            (:line, 199, :none),
            (:call, :push!, :matches, (:call, :SubString, :str, (:call, :+, (:ref, :ovec, 1), 1), (:ref, :ovec, 2))),
            (:line, 200, :none),
            (:(=), :prevempty, (:call, :(==), :offset, (:ref, :ovec, 2))),
            (:line, 201, :none),
            (:if, :overlap, (:block,
                (:line, 202, :none),
                (:if, (:call, :!, :prevempty), (:block,
                    (:line, 203, :none),
                    (:(=), :offset, (:call, :UInt32, (:call, :+, (:ref, :ovec, 1), 1)))
                  ))
              ), (:block,
                (:line, 206, :none),
                (:(=), :offset, (:ref, :ovec, 2))
              ))
          )),
        (:line, 209, :none),
        :matches
      )),
    (:line, 212, :none),
    (:(=), (:call, :matchall, (:(::), :re, :Regex), (:(::), :str, :SubString), (:kw, (:(::), :overlap, :Bool), false)), (:block,
        (:line, 212, :none),
        (:call, :matchall, :re, (:call, :String, :str), :overlap)
      )),
    (:line, 215, :none),
    (:function, (:call, :search, (:(::), :str, (:curly, :Union, :String, :SubString)), (:(::), :re, :Regex), (:(::), :idx, :Integer)), (:block,
        (:line, 216, :none),
        (:if, (:call, :>, :idx, (:call, :nextind, :str, (:call, :endof, :str))), (:block,
            (:line, 217, :none),
            (:call, :throw, (:call, :BoundsError))
          )),
        (:line, 219, :none),
        (:(=), :opts, (:., :re, (:quote, #QuoteNode
              :match_options
            ))),
        (:line, 220, :none),
        (:call, :compile, :re),
        (:line, 221, :none),
        (:if, (:call, (:., :PCRE, (:quote, #QuoteNode
                :exec
              )), (:., :re, (:quote, #QuoteNode
                :regex
              )), :str, (:call, :-, :idx, 1), :opts, (:., :re, (:quote, #QuoteNode
                :match_data
              ))), (:(:), (:call, :+, (:call, :Int, (:ref, (:., :re, (:quote, #QuoteNode
                      :ovec
                    )), 1)), 1), (:call, :prevind, :str, (:call, :+, (:call, :Int, (:ref, (:., :re, (:quote, #QuoteNode
                        :ovec
                      )), 2)), 1))), (:(:), 0, -1))
      )),
    (:line, 224, :none),
    (:(=), (:call, :search, (:(::), :s, :AbstractString), (:(::), :r, :Regex), (:(::), :idx, :Integer)), (:block,
        (:line, 224, :none),
        (:call, :throw, (:call, :ArgumentError, "regex search is only available for the String type; use String(s) to convert"))
      )),
    (:line, 227, :none),
    (:(=), (:call, :search, (:(::), :s, :AbstractString), (:(::), :r, :Regex)), (:block,
        (:line, 227, :none),
        (:call, :search, :s, :r, (:call, :start, :s))
      )),
    (:line, 229, :none),
    (:type, false, (:<:, (:curly, :SubstitutionString, (:<:, :T, :AbstractString)), :AbstractString), (:block,
        (:line, 230, :none),
        (:(::), :string, :T)
      )),
    (:line, 233, :none),
    (:(=), (:call, :endof, (:(::), :s, :SubstitutionString)), (:block,
        (:line, 233, :none),
        (:call, :endof, (:., :s, (:quote, #QuoteNode
              :string
            )))
      )),
    (:line, 234, :none),
    (:(=), (:call, :next, (:(::), :s, :SubstitutionString), (:(::), :idx, :Int)), (:block,
        (:line, 234, :none),
        (:call, :next, (:., :s, (:quote, #QuoteNode
              :string
            )), :idx)
      )),
    (:line, 235, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :s, :SubstitutionString)), (:block,
        (:line, 236, :none),
        (:call, :print, :io, "s"),
        (:line, 237, :none),
        (:call, :show, :io, (:., :s, (:quote, #QuoteNode
              :string
            )))
      )),
    (:line, 240, :none),
    (:macro, (:call, :s_str, :string), (:block,
        (:line, 240, :none),
        (:call, :SubstitutionString, :string)
      )),
    (:line, 242, :none),
    (:(=), (:call, :replace_err, :repl), (:block,
        (:line, 242, :none),
        (:call, :error, (:string, "Bad replacement string: ", :repl))
      )),
    (:line, 244, :none),
    (:function, (:call, :_write_capture, :io, :re, :group), (:block,
        (:line, 245, :none),
        (:(=), :len, (:call, (:., :PCRE, (:quote, #QuoteNode
                :substring_length_bynumber
              )), (:., :re, (:quote, #QuoteNode
                :match_data
              )), :group)),
        (:line, 246, :none),
        (:call, :ensureroom, :io, (:call, :+, :len, 1)),
        (:line, 247, :none),
        (:call, (:., :PCRE, (:quote, #QuoteNode
              :substring_copy_bynumber
            )), (:., :re, (:quote, #QuoteNode
              :match_data
            )), :group, (:call, :pointer, (:., :io, (:quote, #QuoteNode
                :data
              )), (:., :io, (:quote, #QuoteNode
                :ptr
              ))), (:call, :+, :len, 1)),
        (:line, 249, :none),
        (:+=, (:., :io, (:quote, #QuoteNode
              :ptr
            )), :len),
        (:line, 250, :none),
        (:(=), (:., :io, (:quote, #QuoteNode
              :size
            )), (:call, :max, (:., :io, (:quote, #QuoteNode
                :size
              )), (:call, :-, (:., :io, (:quote, #QuoteNode
                  :ptr
                )), 1)))
      )),
    (:line, 253, :none),
    (:function, (:call, :_replace, :io, (:(::), :repl_s, :SubstitutionString), :str, :r, :re), (:block,
        (:line, 254, :none),
        (:const, (:(=), :SUB_CHAR, '\\')),
        (:line, 255, :none),
        (:const, (:(=), :GROUP_CHAR, 'g')),
        (:line, 256, :none),
        (:const, (:(=), :LBRACKET, '<')),
        (:line, 257, :none),
        (:const, (:(=), :RBRACKET, '>')),
        (:line, 258, :none),
        (:(=), :repl, (:., :repl_s, (:quote, #QuoteNode
              :string
            ))),
        (:line, 259, :none),
        (:(=), :i, (:call, :start, :repl)),
        (:line, 260, :none),
        (:(=), :e, (:call, :endof, :repl)),
        (:line, 261, :none),
        (:while, (:call, :(<=), :i, :e), (:block,
            (:line, 262, :none),
            (:if, (:call, :(==), (:ref, :repl, :i), :SUB_CHAR), (:block,
                (:line, 263, :none),
                (:(=), :next_i, (:call, :nextind, :repl, :i)),
                (:line, 264, :none),
                (:&&, (:call, :>, :next_i, :e), (:call, :replace_err, :repl)),
                (:line, 265, :none),
                (:if, (:call, :(==), (:ref, :repl, :next_i), :SUB_CHAR), (:block,
                    (:line, 266, :none),
                    (:call, :write, :io, :SUB_CHAR),
                    (:line, 267, :none),
                    (:(=), :i, (:call, :nextind, :repl, :next_i))
                  ), (:block,
                    (:line, 268, :none),
                    (:if, (:call, :isnumber, (:ref, :repl, :next_i)), (:block,
                        (:line, 269, :none),
                        (:(=), :group, (:call, :parse, :Int, (:ref, :repl, :next_i))),
                        (:line, 270, :none),
                        (:(=), :i, (:call, :nextind, :repl, :next_i)),
                        (:line, 271, :none),
                        (:while, (:call, :(<=), :i, :e), (:block,
                            (:line, 272, :none),
                            (:if, (:call, :isnumber, (:ref, :repl, :i)), (:block,
                                (:line, 273, :none),
                                (:(=), :group, (:call, :+, (:call, :*, 10, :group), (:call, :parse, :Int, (:ref, :repl, :i)))),
                                (:line, 274, :none),
                                (:(=), :i, (:call, :nextind, :repl, :i))
                              ), (:block,
                                (:line, 276, :none),
                                (:break,)
                              ))
                          )),
                        (:line, 279, :none),
                        (:call, :_write_capture, :io, :re, :group)
                      ), (:block,
                        (:line, 280, :none),
                        (:if, (:call, :(==), (:ref, :repl, :next_i), :GROUP_CHAR), (:block,
                            (:line, 281, :none),
                            (:(=), :i, (:call, :nextind, :repl, :next_i)),
                            (:line, 282, :none),
                            (:if, (:||, (:call, :>, :i, :e), (:call, :(!=), (:ref, :repl, :i), :LBRACKET)), (:block,
                                (:line, 283, :none),
                                (:call, :replace_err, :repl)
                              )),
                            (:line, 285, :none),
                            (:(=), :i, (:call, :nextind, :repl, :i)),
                            (:line, 286, :none),
                            (:&&, (:call, :>, :i, :e), (:call, :replace_err, :repl)),
                            (:line, 287, :none),
                            (:(=), :groupstart, :i),
                            (:line, 288, :none),
                            (:while, (:call, :(!=), (:ref, :repl, :i), :RBRACKET), (:block,
                                (:line, 289, :none),
                                (:(=), :i, (:call, :nextind, :repl, :i)),
                                (:line, 290, :none),
                                (:&&, (:call, :>, :i, :e), (:call, :replace_err, :repl))
                              )),
                            (:line, 293, :none),
                            (:(=), :groupname, (:call, :SubString, :repl, :groupstart, (:call, :prevind, :repl, :i))),
                            (:line, 294, :none),
                            (:if, (:call, :isnumber, :groupname), (:block,
                                (:line, 295, :none),
                                (:call, :_write_capture, :io, :re, (:call, :parse, :Int, :groupname))
                              ), (:block,
                                (:line, 297, :none),
                                (:(=), :group, (:call, (:., :PCRE, (:quote, #QuoteNode
                                        :substring_number_from_name
                                      )), (:., :re, (:quote, #QuoteNode
                                        :regex
                                      )), :groupname)),
                                (:line, 298, :none),
                                (:&&, (:call, :<, :group, 0), (:call, :replace_err, (:string, "Group ", :groupname, " not found in regex ", :re))),
                                (:line, 299, :none),
                                (:call, :_write_capture, :io, :re, :group)
                              )),
                            (:line, 301, :none),
                            (:(=), :i, (:call, :nextind, :repl, :i))
                          ), (:block,
                            (:line, 303, :none),
                            (:call, :replace_err, :repl)
                          ))
                      ))
                  ))
              ), (:block,
                (:line, 306, :none),
                (:call, :write, :io, (:ref, :repl, :i)),
                (:line, 307, :none),
                (:(=), :i, (:call, :nextind, :repl, :i))
              ))
          ))
      )),
    (:line, 312, :none),
    (:type, false, :RegexMatchIterator, (:block,
        (:line, 313, :none),
        (:(::), :regex, :Regex),
        (:line, 314, :none),
        (:(::), :string, :String),
        (:line, 315, :none),
        (:(::), :overlap, :Bool),
        (:line, 317, :none),
        (:function, (:call, :RegexMatchIterator, (:(::), :regex, :Regex), (:(::), :string, :AbstractString), (:kw, (:(::), :ovr, :Bool), false)), (:block,
            (:line, 318, :none),
            (:call, :new, :regex, :string, :ovr)
          ))
      )),
    (:line, 321, :none),
    (:(=), (:call, :compile, (:(::), :itr, :RegexMatchIterator)), (:block,
        (:line, 321, :none),
        (:block,
          (:call, :compile, (:., :itr, (:quote, #QuoteNode
                :regex
              ))),
          :itr
        )
      )),
    (:line, 322, :none),
    (:(=), (:call, :eltype, (:(::), (:curly, :Type, :RegexMatchIterator))), (:block,
        (:line, 322, :none),
        :RegexMatch
      )),
    (:line, 323, :none),
    (:(=), (:call, :start, (:(::), :itr, :RegexMatchIterator)), (:block,
        (:line, 323, :none),
        (:call, :match, (:., :itr, (:quote, #QuoteNode
              :regex
            )), (:., :itr, (:quote, #QuoteNode
              :string
            )), 1, (:call, :UInt32, 0))
      )),
    (:line, 324, :none),
    (:(=), (:call, :done, (:(::), :itr, :RegexMatchIterator), :prev_match), (:block,
        (:line, 324, :none),
        (:call, :(===), :prev_match, :nothing)
      )),
    (:line, 325, :none),
    (:(=), (:call, :iteratorsize, (:(::), (:curly, :Type, :RegexMatchIterator))), (:block,
        (:line, 325, :none),
        (:call, :SizeUnknown)
      )),
    (:line, 328, :none),
    (:function, (:call, :next, (:(::), :itr, :RegexMatchIterator), :prev_match), (:block,
        (:line, 329, :none),
        (:(=), :prevempty, (:call, :isempty, (:., :prev_match, (:quote, #QuoteNode
                :match
              )))),
        (:line, 331, :none),
        (:if, (:., :itr, (:quote, #QuoteNode
              :overlap
            )), (:block,
            (:line, 332, :none),
            (:if, (:call, :!, :prevempty), (:block,
                (:line, 333, :none),
                (:(=), :offset, (:call, :nextind, (:., :itr, (:quote, #QuoteNode
                        :string
                      )), (:., :prev_match, (:quote, #QuoteNode
                        :offset
                      ))))
              ), (:block,
                (:line, 335, :none),
                (:(=), :offset, (:., :prev_match, (:quote, #QuoteNode
                      :offset
                    )))
              ))
          ), (:block,
            (:line, 338, :none),
            (:(=), :offset, (:call, :+, (:., :prev_match, (:quote, #QuoteNode
                    :offset
                  )), (:call, :endof, (:., :prev_match, (:quote, #QuoteNode
                      :match
                    )))))
          )),
        (:line, 341, :none),
        (:(=), :opts_nonempty, (:call, :UInt32, (:call, :|, (:., :PCRE, (:quote, #QuoteNode
                  :ANCHORED
                )), (:., :PCRE, (:quote, #QuoteNode
                  :NOTEMPTY_ATSTART
                ))))),
        (:line, 342, :none),
        (:while, true, (:block,
            (:line, 343, :none),
            (:(=), :mat, (:call, :match, (:., :itr, (:quote, #QuoteNode
                    :regex
                  )), (:., :itr, (:quote, #QuoteNode
                    :string
                  )), :offset, (:if, :prevempty, :opts_nonempty, (:call, :UInt32, 0)))),
            (:line, 346, :none),
            (:if, (:call, :(===), :mat, :nothing), (:block,
                (:line, 347, :none),
                (:if, (:&&, :prevempty, (:call, :(<=), :offset, (:call, :length, (:., (:., :itr, (:quote, #QuoteNode
                              :string
                            )), (:quote, #QuoteNode
                            :data
                          ))))), (:block,
                    (:line, 348, :none),
                    (:(=), :offset, (:call, :nextind, (:., :itr, (:quote, #QuoteNode
                            :string
                          )), :offset)),
                    (:line, 349, :none),
                    (:(=), :prevempty, false),
                    (:line, 350, :none),
                    (:continue,)
                  ), (:block,
                    (:line, 352, :none),
                    (:break,)
                  ))
              ), (:block,
                (:line, 355, :none),
                (:return, (:tuple, :prev_match, :mat))
              ))
          )),
        (:line, 358, :none),
        (:tuple, :prev_match, :nothing)
      )),
    (:line, 361, :none),
    (:function, (:call, :eachmatch, (:(::), :re, :Regex), (:(::), :str, :AbstractString), (:(::), :ovr, :Bool)), (:block,
        (:line, 362, :none),
        (:call, :RegexMatchIterator, :re, :str, :ovr)
      )),
    (:line, 365, :none),
    (:(=), (:call, :eachmatch, (:(::), :re, :Regex), (:(::), :str, :AbstractString)), (:block,
        (:line, 365, :none),
        (:call, :RegexMatchIterator, :re, :str)
      )),
    (:line, 369, :none),
    (:function, (:call, :(==), (:(::), :a, :Regex), (:(::), :b, :Regex)), (:block,
        (:line, 370, :none),
        (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                :pattern
              )), (:., :b, (:quote, #QuoteNode
                :pattern
              ))), (:&&, (:call, :(==), (:., :a, (:quote, #QuoteNode
                  :compile_options
                )), (:., :b, (:quote, #QuoteNode
                  :compile_options
                ))), (:call, :(==), (:., :a, (:quote, #QuoteNode
                  :match_options
                )), (:., :b, (:quote, #QuoteNode
                  :match_options
                )))))
      )),
    (:line, 374, :none),
    (:const, (:(=), :hashre_seed, (:if, (:call, :(===), :UInt, :UInt64), 0x67e195eb8555e72d, 0xe32373e4))),
    (:line, 375, :none),
    (:function, (:call, :hash, (:(::), :r, :Regex), (:(::), :h, :UInt)), (:block,
        (:line, 376, :none),
        (:+=, :h, :hashre_seed),
        (:line, 377, :none),
        (:(=), :h, (:call, :hash, (:., :r, (:quote, #QuoteNode
                :pattern
              )), :h)),
        (:line, 378, :none),
        (:(=), :h, (:call, :hash, (:., :r, (:quote, #QuoteNode
                :compile_options
              )), :h)),
        (:line, 379, :none),
        (:(=), :h, (:call, :hash, (:., :r, (:quote, #QuoteNode
                :match_options
              )), :h))
      ))
  ))