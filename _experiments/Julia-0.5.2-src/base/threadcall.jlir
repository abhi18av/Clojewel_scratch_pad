(:quote, (:block,
    (:line, 3, :none),
    (:const, (:(=), :max_ccall_threads, (:call, :parse, :Int, (:call, :get, :ENV, "UV_THREADPOOL_SIZE", "4")))),
    (:line, 4, :none),
    (:const, (:(=), :thread_notifiers, (:comprehension, (:generator, (:call, (:curly, :Nullable, :Condition)), (:(=), :i, (:(:), 1, :max_ccall_threads)))))),
    (:line, 5, :none),
    (:const, (:(=), :threadcall_restrictor, (:call, :Semaphore, :max_ccall_threads))),
    (:line, 7, :none),
    (:function, (:call, :notify_fun, :idx), (:block,
        (:line, 8, :none),
        (:global, :thread_notifiers),
        (:line, 9, :none),
        (:call, :notify, (:call, :get, (:ref, :thread_notifiers, :idx))),
        (:line, 10, :none),
        (:return, nothing)
      )),
    (:line, 13, :none),
    (:function, (:call, :init_threadcall), (:block,
        (:line, 14, :none),
        (:global, (:(=), :c_notify_fun, (:call, :cfunction, :notify_fun, :Void, (:tuple, :Cint))))
      )),
    (:line, 17, :none),
    "    @threadcall((cfunc, clib), rettype, (argtypes...), argvals...)\n\nThe `@threadcall` macro is called in the same way as `ccall` but does the work\nin a different thread. This is useful when you want to call a blocking C\nfunction without causing the main `julia` thread to become blocked. Concurrency\nis limited by size of the libuv thread pool, which defaults to 4 threads but\ncan be increased by setting the `UV_THREADPOOL_SIZE` environment variable and\nrestarting the `julia` process.\n\nNote that the called function should never call back into Julia.\n",
    (:line, 29, :none),
    (:macro, (:call, :threadcall, :f, :rettype, :argtypes, (:..., :argvals)), (:block,
        (:line, 31, :none),
        (:||, (:&&, (:call, :isa, :argtypes, :Expr), (:call, :(==), (:., :argtypes, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :tuple
              ))), (:call, :error, "threadcall: argument types must be a tuple")),
        (:line, 33, :none),
        (:||, (:call, :(==), (:call, :length, (:., :argtypes, (:quote, #QuoteNode
                  :args
                ))), (:call, :length, :argvals)), (:call, :error, "threadcall: wrong number of arguments to C function")),
        (:line, 37, :none),
        (:(=), :f, (:call, :esc, :f)),
        (:line, 38, :none),
        (:(=), :rettype, (:call, :esc, :rettype)),
        (:line, 39, :none),
        (:(=), :argtypes, (:call, :map, :esc, (:., :argtypes, (:quote, #QuoteNode
                :args
              )))),
        (:line, 40, :none),
        (:(=), :argvals, (:call, :map, :esc, :argvals)),
        (:line, 43, :none),
        (:(=), :wrapper, (:quote, (:function, (:call, :wrapper, (:(::), :args_ptr, (:curly, :Ptr, :Void)), (:(::), :retval_ptr, (:curly, :Ptr, :Void))), (:block,
                (:line, 44, :none),
                (:(=), :p, :args_ptr)
              )))),
        (:line, 46, :none),
        (:(=), :body, (:., (:ref, (:., :wrapper, (:quote, #QuoteNode
                  :args
                )), 2), (:quote, #QuoteNode
              :args
            ))),
        (:line, 47, :none),
        (:(=), :args, (:ref, :Symbol)),
        (:line, 48, :none),
        (:for, (:(=), (:tuple, :i, :T), (:call, :enumerate, :argtypes)), (:block,
            (:line, 49, :none),
            (:(=), :arg, (:call, :Symbol, "arg", :i)),
            (:line, 50, :none),
            (:call, :push!, :body, (:quote, (:(=), (:$, :arg), (:call, :unsafe_load, (:call, :convert, (:curly, :Ptr, (:$, :T)), :p))))),
            (:line, 51, :none),
            (:call, :push!, :body, (:quote, (:+=, :p, (:call, :sizeof, (:$, :T))))),
            (:line, 52, :none),
            (:call, :push!, :args, :arg)
          )),
        (:line, 54, :none),
        (:call, :push!, :body, (:quote, (:(=), :ret, (:ccall, (:$, :f), (:$, :rettype), (:tuple, (:$, (:tuple, (:..., :argtypes)))), (:$, (:tuple, (:..., :args))))))),
        (:line, 55, :none),
        (:call, :push!, :body, (:quote, (:call, :unsafe_store!, (:call, :convert, (:curly, :Ptr, (:$, :rettype)), :retval_ptr), :ret))),
        (:line, 56, :none),
        (:call, :push!, :body, (:quote, (:return, (:call, :sizeof, (:$, :rettype))))),
        (:line, 59, :none),
        (:quote, (:let, (:block,
              (:line, 60, :none),
              (:$, :wrapper),
              (:line, 61, :none),
              (:call, :do_threadcall, :wrapper, (:$, :rettype), (:ref, :Any, (:$, (:tuple, (:..., :argtypes)))), (:ref, :Any, (:$, (:tuple, (:..., :argvals)))))
            )))
      )),
    (:line, 65, :none),
    (:function, (:call, :do_threadcall, (:(::), :wrapper, :Function), (:(::), :rettype, :Type), (:(::), :argtypes, :Vector), (:(::), :argvals, :Vector)), (:block,
        (:line, 67, :none),
        (:(=), :fun_ptr, (:call, :cfunction, :wrapper, :Int, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)))),
        (:line, 70, :none),
        (:(=), :roots, (:ref, :Any)),
        (:line, 71, :none),
        (:(=), :args_size, (:if, (:call, :isempty, :argtypes), 0, (:call, :sum, :sizeof, :argtypes))),
        (:line, 72, :none),
        (:(=), :args_arr, (:call, (:curly, :Array, :UInt8), :args_size)),
        (:line, 73, :none),
        (:(=), :ptr, (:call, :pointer, :args_arr)),
        (:line, 74, :none),
        (:for, (:(=), (:tuple, :T, :x), (:call, :zip, :argtypes, :argvals)), (:block,
            (:line, 75, :none),
            (:(=), :y, (:call, :cconvert, :T, :x)),
            (:line, 76, :none),
            (:call, :push!, :roots, :y),
            (:line, 77, :none),
            (:call, :unsafe_store!, (:call, :convert, (:curly, :Ptr, :T), :ptr), (:call, :unsafe_convert, :T, :y)),
            (:line, 78, :none),
            (:+=, :ptr, (:call, :sizeof, :T))
          )),
        (:line, 82, :none),
        (:(=), :ret_arr, (:call, (:curly, :Array, :UInt8), (:call, :sizeof, :rettype))),
        (:line, 85, :none),
        (:call, :acquire, :threadcall_restrictor),
        (:line, 86, :none),
        (:(=), :idx, (:call, :findfirst, :isnull, :thread_notifiers)),
        (:line, 87, :none),
        (:(=), (:ref, :thread_notifiers, :idx), (:call, (:curly, :Nullable, :Condition), (:call, :Condition))),
        (:line, 90, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_queue_work
          ), :Void, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :UInt8), (:curly, :Ptr, :UInt8), (:curly, :Ptr, :Void), :Cint), :fun_ptr, :args_arr, :ret_arr, :c_notify_fun, :idx),
        (:line, 95, :none),
        (:call, :wait, (:call, :get, (:ref, :thread_notifiers, :idx))),
        (:line, 96, :none),
        (:(=), (:ref, :thread_notifiers, :idx), (:call, (:curly, :Nullable, :Condition))),
        (:line, 97, :none),
        (:call, :release, :threadcall_restrictor),
        (:line, 99, :none),
        (:call, :unsafe_load, (:call, :convert, (:curly, :Ptr, :rettype), (:call, :pointer, :ret_arr)))
      ))
  ))