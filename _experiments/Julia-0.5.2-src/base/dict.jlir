(:quote, (:block,
    (:line, 5, :none),
    (:const, (:(=), :secret_table_token, (:quote, #QuoteNode
          :__c782dbf1cf4d6a2e5e3865d7e95634f2e09b5902__
        ))),
    (:line, 7, :none),
    (:(=), (:call, :haskey, (:(::), :d, :Associative), :k), (:block,
        (:line, 7, :none),
        (:call, :in, :k, (:call, :keys, :d))
      )),
    (:line, 9, :none),
    (:function, (:call, :in, (:(::), :p, :Pair), (:(::), :a, :Associative), (:kw, :valcmp, :(==))), (:block,
        (:line, 10, :none),
        (:(=), :v, (:call, :get, :a, (:ref, :p, 1), :secret_table_token)),
        (:line, 11, :none),
        (:if, (:call, :!, (:call, :is, :v, :secret_table_token)), (:block,
            (:line, 12, :none),
            (:&&, (:call, :valcmp, :v, (:ref, :p, 2)), (:return, true))
          )),
        (:line, 14, :none),
        (:return, false)
      )),
    (:line, 17, :none),
    (:function, (:call, :in, :p, (:(::), :a, :Associative)), (:block,
        (:line, 18, :none),
        (:call, :error, "Associative collections only contain Pairs;\nEither look for e.g. A=>B instead, or use the `keys` or `values`\nfunction if you are looking for a key or value respectively.")
      )),
    (:line, 23, :none),
    (:function, (:call, :summary, (:(::), :t, :Associative)), (:block,
        (:line, 24, :none),
        (:(=), :n, (:call, :length, :t)),
        (:line, 25, :none),
        (:return, (:call, :string, (:call, :typeof, :t), " with ", :n, (:if, (:call, :(==), :n, 1), " entry", " entries")))
      )),
    (:line, 28, :none),
    (:function, (:call, :_truncate_at_width_or_chars, :str, :width, (:kw, :chars, ""), (:kw, :truncmark, "…")), (:block,
        (:line, 29, :none),
        (:(=), :truncwidth, (:call, :strwidth, :truncmark)),
        (:line, 30, :none),
        (:&&, (:||, (:call, :(<=), :width, 0), (:call, :<, :width, :truncwidth)), (:return, "")),
        (:line, 32, :none),
        (:(=), :wid, (:(=), :truncidx, (:(=), :lastidx, 0))),
        (:line, 33, :none),
        (:(=), :idx, (:call, :start, :str)),
        (:line, 34, :none),
        (:while, (:call, :!, (:call, :done, :str, :idx)), (:block,
            (:line, 35, :none),
            (:(=), :lastidx, :idx),
            (:line, 36, :none),
            (:(=), (:tuple, :c, :idx), (:call, :next, :str, :idx)),
            (:line, 37, :none),
            (:+=, :wid, (:call, :charwidth, :c)),
            (:line, 38, :none),
            (:&&, (:call, :(>=), :wid, (:call, :-, :width, :truncwidth)), (:&&, (:call, :(==), :truncidx, 0), (:(=), :truncidx, :lastidx))),
            (:line, 39, :none),
            (:&&, (:||, (:call, :(>=), :wid, :width), (:call, :in, :c, :chars)), (:break,))
          )),
        (:line, 42, :none),
        (:&&, (:call, :(!=), :lastidx, 0), (:&&, (:call, :in, (:ref, :str, :lastidx), :chars), (:(=), :lastidx, (:call, :prevind, :str, :lastidx)))),
        (:line, 43, :none),
        (:&&, (:call, :(==), :truncidx, 0), (:(=), :truncidx, :lastidx)),
        (:line, 44, :none),
        (:if, (:call, :<, :lastidx, (:call, :endof, :str)), (:block,
            (:line, 45, :none),
            (:return, (:call, :String, (:call, :*, (:call, :SubString, :str, 1, :truncidx), :truncmark)))
          ), (:block,
            (:line, 47, :none),
            (:return, (:call, :String, :str))
          ))
      )),
    (:line, 51, :none),
    (:function, (:call, (:curly, :show, :K, :V), (:(::), :io, :IO), (:(::), :t, (:curly, :Associative, :K, :V))), (:block,
        (:line, 52, :none),
        (:(=), :recur_io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                :SHOWN_SET
              ), :t))),
        (:line, 53, :none),
        (:(=), (:(::), :limit, :Bool), (:call, :get, :io, (:quote, #QuoteNode
              :limit
            ), false)),
        (:line, 54, :none),
        (:if, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                :compact
              ))), (:block,
            (:line, 55, :none),
            (:(=), :recur_io, (:call, :IOContext, :recur_io, (:(=>), (:quote, #QuoteNode
                    :compact
                  ), true)))
          )),
        (:line, 59, :none),
        (:if, (:call, :isempty, :t), (:block,
            (:line, 60, :none),
            (:call, :print, :io, (:call, :typeof, :t), "()")
          ), (:block,
            (:line, 62, :none),
            (:if, (:&&, (:call, :isleaftype, :K), (:call, :isleaftype, :V)), (:block,
                (:line, 63, :none),
                (:call, :print, :io, (:., (:call, :typeof, :t), (:quote, #QuoteNode
                      :name
                    )))
              ), (:block,
                (:line, 65, :none),
                (:call, :print, :io, (:call, :typeof, :t))
              )),
            (:line, 67, :none),
            (:call, :print, :io, '('),
            (:line, 68, :none),
            (:if, (:call, :!, (:call, :show_circular, :io, :t)), (:block,
                (:line, 69, :none),
                (:(=), :first, true),
                (:line, 70, :none),
                (:(=), :n, 0),
                (:line, 71, :none),
                (:for, (:(=), :pair, :t), (:block,
                    (:line, 72, :none),
                    (:||, :first, (:call, :print, :io, ',')),
                    (:line, 73, :none),
                    (:(=), :first, false),
                    (:line, 74, :none),
                    (:call, :show, :recur_io, :pair),
                    (:line, 75, :none),
                    (:+=, :n, 1),
                    (:line, 76, :none),
                    (:&&, :limit, (:&&, (:call, :(>=), :n, 10), (:block,
                          (:call, :print, :io, "…"),
                          (:break,)
                        )))
                  ))
              )),
            (:line, 79, :none),
            (:call, :print, :io, ')')
          ))
      )),
    (:line, 83, :none),
    (:type, false, (:curly, :KeyIterator, (:<:, :T, :Associative)), (:block,
        (:line, 84, :none),
        (:(::), :dict, :T)
      )),
    (:line, 86, :none),
    (:type, false, (:curly, :ValueIterator, (:<:, :T, :Associative)), (:block,
        (:line, 87, :none),
        (:(::), :dict, :T)
      )),
    (:line, 90, :none),
    (:(=), (:call, (:curly, :summary, (:<:, :T, (:curly, :Union, :KeyIterator, :ValueIterator))), (:(::), :iter, :T)), (:block,
        (:line, 90, :none),
        (:call, :string, (:., :T, (:quote, #QuoteNode
              :name
            )), " for a ", (:call, :summary, (:., :iter, (:quote, #QuoteNode
                :dict
              ))))
      )),
    (:line, 93, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :iter, (:curly, :Union, :KeyIterator, :ValueIterator))), (:block,
        (:line, 93, :none),
        (:call, :show, :io, (:call, :collect, :iter))
      )),
    (:line, 95, :none),
    (:(=), (:call, :length, (:(::), :v, (:curly, :Union, :KeyIterator, :ValueIterator))), (:block,
        (:line, 95, :none),
        (:call, :length, (:., :v, (:quote, #QuoteNode
              :dict
            )))
      )),
    (:line, 96, :none),
    (:(=), (:call, :isempty, (:(::), :v, (:curly, :Union, :KeyIterator, :ValueIterator))), (:block,
        (:line, 96, :none),
        (:call, :isempty, (:., :v, (:quote, #QuoteNode
              :dict
            )))
      )),
    (:line, 97, :none),
    (:(=), (:call, (:curly, :_tt1, :A, :B), (:(::), (:curly, :Type, (:curly, :Pair, :A, :B)))), (:block,
        (:line, 97, :none),
        :A
      )),
    (:line, 98, :none),
    (:(=), (:call, (:curly, :_tt2, :A, :B), (:(::), (:curly, :Type, (:curly, :Pair, :A, :B)))), (:block,
        (:line, 98, :none),
        :B
      )),
    (:line, 99, :none),
    (:(=), (:call, (:curly, :eltype, :D), (:(::), (:curly, :Type, (:curly, :KeyIterator, :D)))), (:block,
        (:line, 99, :none),
        (:call, :_tt1, (:call, :eltype, :D))
      )),
    (:line, 100, :none),
    (:(=), (:call, (:curly, :eltype, :D), (:(::), (:curly, :Type, (:curly, :ValueIterator, :D)))), (:block,
        (:line, 100, :none),
        (:call, :_tt2, (:call, :eltype, :D))
      )),
    (:line, 102, :none),
    (:(=), (:call, :start, (:(::), :v, (:curly, :Union, :KeyIterator, :ValueIterator))), (:block,
        (:line, 102, :none),
        (:call, :start, (:., :v, (:quote, #QuoteNode
              :dict
            )))
      )),
    (:line, 103, :none),
    (:(=), (:call, :done, (:(::), :v, (:curly, :Union, :KeyIterator, :ValueIterator)), :state), (:block,
        (:line, 103, :none),
        (:call, :done, (:., :v, (:quote, #QuoteNode
              :dict
            )), :state)
      )),
    (:line, 105, :none),
    (:function, (:call, :next, (:(::), :v, :KeyIterator), :state), (:block,
        (:line, 106, :none),
        (:(=), :n, (:call, :next, (:., :v, (:quote, #QuoteNode
                :dict
              )), :state)),
        (:line, 107, :none),
        (:tuple, (:ref, (:ref, :n, 1), 1), (:ref, :n, 2))
      )),
    (:line, 110, :none),
    (:function, (:call, :next, (:(::), :v, :ValueIterator), :state), (:block,
        (:line, 111, :none),
        (:(=), :n, (:call, :next, (:., :v, (:quote, #QuoteNode
                :dict
              )), :state)),
        (:line, 112, :none),
        (:tuple, (:ref, (:ref, :n, 1), 2), (:ref, :n, 2))
      )),
    (:line, 115, :none),
    (:(=), (:call, :in, :k, (:(::), :v, :KeyIterator)), (:block,
        (:line, 115, :none),
        (:call, :!, (:call, :is, (:call, :get, (:., :v, (:quote, #QuoteNode
                  :dict
                )), :k, :secret_table_token), :secret_table_token))
      )),
    (:line, 118, :none),
    (:(=), (:call, :keys, (:(::), :a, :Associative)), (:block,
        (:line, 118, :none),
        (:call, :KeyIterator, :a)
      )),
    (:line, 119, :none),
    (:(=), (:call, :eachindex, (:(::), :a, :Associative)), (:block,
        (:line, 119, :none),
        (:call, :KeyIterator, :a)
      )),
    (:line, 120, :none),
    (:(=), (:call, :values, (:(::), :a, :Associative)), (:block,
        (:line, 120, :none),
        (:call, :ValueIterator, :a)
      )),
    (:line, 122, :none),
    (:function, (:call, :copy, (:(::), :a, :Associative)), (:block,
        (:line, 123, :none),
        (:(=), :b, (:call, :similar, :a)),
        (:line, 124, :none),
        (:for, (:(=), (:tuple, :k, :v), :a), (:block,
            (:line, 125, :none),
            (:(=), (:ref, :b, :k), :v)
          )),
        (:line, 127, :none),
        (:return, :b)
      )),
    (:line, 130, :none),
    (:function, (:call, :merge!, (:(::), :d, :Associative), (:..., (:(::), :others, :Associative))), (:block,
        (:line, 131, :none),
        (:for, (:(=), :other, :others), (:block,
            (:line, 132, :none),
            (:for, (:(=), (:tuple, :k, :v), :other), (:block,
                (:line, 133, :none),
                (:(=), (:ref, :d, :k), :v)
              ))
          )),
        (:line, 136, :none),
        (:return, :d)
      )),
    (:line, 141, :none),
    (:function, (:call, :copy!, (:(::), :dest, (:curly, :Union, :Associative, :AbstractSet)), :src), (:block,
        (:line, 142, :none),
        (:for, (:(=), :x, :src), (:block,
            (:line, 143, :none),
            (:call, :push!, :dest, :x)
          )),
        (:line, 145, :none),
        (:return, :dest)
      )),
    (:line, 148, :none),
    (:(=), (:call, (:curly, :keytype, :K, :V), (:(::), (:curly, :Type, (:curly, :Associative, :K, :V)))), (:block,
        (:line, 148, :none),
        :K
      )),
    (:line, 149, :none),
    (:(=), (:call, :keytype, (:(::), :a, :Associative)), (:block,
        (:line, 149, :none),
        (:call, :keytype, (:call, :typeof, :a))
      )),
    (:line, 150, :none),
    (:(=), (:call, (:curly, :keytype, (:<:, :A, :Associative)), (:(::), (:curly, :Type, :A))), (:block,
        (:line, 150, :none),
        (:call, :keytype, (:call, :supertype, :A))
      )),
    (:line, 151, :none),
    (:(=), (:call, (:curly, :valtype, :K, :V), (:(::), (:curly, :Type, (:curly, :Associative, :K, :V)))), (:block,
        (:line, 151, :none),
        :V
      )),
    (:line, 152, :none),
    (:(=), (:call, (:curly, :valtype, (:<:, :A, :Associative)), (:(::), (:curly, :Type, :A))), (:block,
        (:line, 152, :none),
        (:call, :valtype, (:call, :supertype, :A))
      )),
    (:line, 153, :none),
    (:(=), (:call, :valtype, (:(::), :a, :Associative)), (:block,
        (:line, 153, :none),
        (:call, :valtype, (:call, :typeof, :a))
      )),
    (:line, 154, :none),
    (:function, (:call, :merge, (:(::), :d, :Associative), (:..., (:(::), :others, :Associative))), (:block,
        (:line, 155, :none),
        (:(=), (:tuple, :K, :V), (:tuple, (:call, :keytype, :d), (:call, :valtype, :d))),
        (:line, 156, :none),
        (:for, (:(=), :other, :others), (:block,
            (:line, 157, :none),
            (:(=), :K, (:call, :promote_type, :K, (:call, :keytype, :other))),
            (:line, 158, :none),
            (:(=), :V, (:call, :promote_type, :V, (:call, :valtype, :other)))
          )),
        (:line, 160, :none),
        (:call, :merge!, (:call, (:curly, :Dict, :K, :V)), :d, (:..., :others))
      )),
    (:line, 163, :none),
    (:function, (:call, :filter!, :f, (:(::), :d, :Associative)), (:block,
        (:line, 164, :none),
        (:(=), :badkeys, (:call, (:curly, :Array, (:call, :keytype, :d)), 0)),
        (:line, 165, :none),
        (:for, (:(=), (:tuple, :k, :v), :d), (:block,
            (:line, 168, :none),
            (:||, (:call, :f, :k, :v), (:call, :push!, :badkeys, :k))
          )),
        (:line, 170, :none),
        (:for, (:(=), :k, :badkeys), (:block,
            (:line, 171, :none),
            (:call, :delete!, :d, :k)
          )),
        (:line, 173, :none),
        (:return, :d)
      )),
    (:line, 175, :none),
    (:function, (:call, :filter, :f, (:(::), :d, :Associative)), (:block,
        (:line, 177, :none),
        (:(=), :df, (:call, :similar, :d)),
        (:line, 178, :none),
        (:for, (:(=), (:tuple, :k, :v), :d), (:block,
            (:line, 179, :none),
            (:if, (:call, :f, :k, :v), (:block,
                (:line, 180, :none),
                (:(=), (:ref, :df, :k), :v)
              ))
          )),
        (:line, 183, :none),
        (:return, :df)
      )),
    (:line, 186, :none),
    (:(=), (:call, (:curly, :eltype, :K, :V), (:(::), (:curly, :Type, (:curly, :Associative, :K, :V)))), (:block,
        (:line, 186, :none),
        (:curly, :Pair, :K, :V)
      )),
    (:line, 188, :none),
    (:function, (:call, :isequal, (:(::), :l, :Associative), (:(::), :r, :Associative)), (:block,
        (:line, 189, :none),
        (:&&, (:call, :(===), :l, :r), (:return, true)),
        (:line, 190, :none),
        (:if, (:call, :(!=), (:call, :isa, :l, :ObjectIdDict), (:call, :isa, :r, :ObjectIdDict)), (:block,
            (:line, 191, :none),
            (:return, false)
          )),
        (:line, 193, :none),
        (:if, (:call, :(!=), (:call, :length, :l), (:call, :length, :r)), (:block,
            (:line, 193, :none),
            (:return, false)
          )),
        (:line, 194, :none),
        (:for, (:(=), :pair, :l), (:block,
            (:line, 195, :none),
            (:if, (:call, :!, (:call, :in, :pair, :r, :isequal)), (:block,
                (:line, 196, :none),
                (:return, false)
              ))
          )),
        (:line, 199, :none),
        true
      )),
    (:line, 202, :none),
    (:function, (:call, :(==), (:(::), :l, :Associative), (:(::), :r, :Associative)), (:block,
        (:line, 203, :none),
        (:&&, (:call, :(===), :l, :r), (:return, true)),
        (:line, 204, :none),
        (:if, (:call, :(!=), (:call, :isa, :l, :ObjectIdDict), (:call, :isa, :r, :ObjectIdDict)), (:block,
            (:line, 205, :none),
            (:return, false)
          )),
        (:line, 207, :none),
        (:if, (:call, :(!=), (:call, :length, :l), (:call, :length, :r)), (:block,
            (:line, 207, :none),
            (:return, false)
          )),
        (:line, 208, :none),
        (:for, (:(=), :pair, :l), (:block,
            (:line, 209, :none),
            (:if, (:call, :!, (:call, :in, :pair, :r, :(==))), (:block,
                (:line, 210, :none),
                (:return, false)
              ))
          )),
        (:line, 213, :none),
        true
      )),
    (:line, 216, :none),
    (:const, (:(=), :hasha_seed, (:if, (:call, :(===), :UInt, :UInt64), 0x6d35bb51952d5539, 0x952d5539))),
    (:line, 217, :none),
    (:function, (:call, :hash, (:(::), :a, :Associative), (:(::), :h, :UInt)), (:block,
        (:line, 218, :none),
        (:(=), :h, (:call, :hash, :hasha_seed, :h)),
        (:line, 219, :none),
        (:for, (:(=), (:tuple, :k, :v), :a), (:block,
            (:line, 220, :none),
            (:$=, :h, (:call, :hash, :k, (:call, :hash, :v)))
          )),
        (:line, 222, :none),
        (:return, :h)
      )),
    (:line, 227, :none),
    (:(=), (:call, :_tablesz, (:(::), :x, :Integer)), (:block,
        (:line, 227, :none),
        (:if, (:call, :<, :x, 16), 16, (:call, :<<, (:call, :one, :x), (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, (:call, :-, :x, 1)))))
      )),
    (:line, 229, :none),
    (:function, (:call, :getindex, (:(::), :t, :Associative), :key), (:block,
        (:line, 230, :none),
        (:(=), :v, (:call, :get, :t, :key, :secret_table_token)),
        (:line, 231, :none),
        (:if, (:call, :is, :v, :secret_table_token), (:block,
            (:line, 232, :none),
            (:call, :throw, (:call, :KeyError, :key))
          )),
        (:line, 234, :none),
        (:return, :v)
      )),
    (:line, 239, :none),
    (:(=), (:call, :getindex, (:(::), :t, :Associative), :k1, :k2, (:..., :ks)), (:block,
        (:line, 239, :none),
        (:call, :getindex, :t, (:call, :tuple, :k1, :k2, (:..., :ks)))
      )),
    (:line, 240, :none),
    (:(=), (:call, :setindex!, (:(::), :t, :Associative), :v, :k1, :k2, (:..., :ks)), (:block,
        (:line, 240, :none),
        (:call, :setindex!, :t, :v, (:call, :tuple, :k1, :k2, (:..., :ks)))
      )),
    (:line, 242, :none),
    (:(=), (:call, :push!, (:(::), :t, :Associative), (:(::), :p, :Pair)), (:block,
        (:line, 242, :none),
        (:call, :setindex!, :t, (:., :p, (:quote, #QuoteNode
              :second
            )), (:., :p, (:quote, #QuoteNode
              :first
            )))
      )),
    (:line, 243, :none),
    (:(=), (:call, :push!, (:(::), :t, :Associative), (:(::), :p, :Pair), (:(::), :q, :Pair)), (:block,
        (:line, 243, :none),
        (:call, :push!, (:call, :push!, :t, :p), :q)
      )),
    (:line, 244, :none),
    (:(=), (:call, :push!, (:(::), :t, :Associative), (:(::), :p, :Pair), (:(::), :q, :Pair), (:..., (:(::), :r, :Pair))), (:block,
        (:line, 244, :none),
        (:call, :push!, (:call, :push!, (:call, :push!, :t, :p), :q), (:..., :r))
      )),
    (:line, 248, :none),
    (:type, true, (:<:, :ObjectIdDict, (:curly, :Associative, :Any, :Any)), (:block,
        (:line, 249, :none),
        (:(::), :ht, (:curly, :Vector, :Any)),
        (:line, 250, :none),
        (:(::), :ndel, :Int),
        (:line, 251, :none),
        (:(=), (:call, :ObjectIdDict), (:block,
            (:line, 251, :none),
            (:call, :new, (:call, (:curly, :Vector, :Any), 32), 0)
          )),
        (:line, 253, :none),
        (:function, (:call, :ObjectIdDict, :itr), (:block,
            (:line, 254, :none),
            (:(=), :d, (:call, :ObjectIdDict)),
            (:line, 255, :none),
            (:for, (:(=), (:tuple, :k, :v), :itr), (:block,
                (:line, 255, :none),
                (:(=), (:ref, :d, :k), :v)
              )),
            (:line, 256, :none),
            :d
          )),
        (:line, 259, :none),
        (:function, (:call, :ObjectIdDict, (:..., (:(::), :pairs, :Pair))), (:block,
            (:line, 260, :none),
            (:(=), :d, (:call, :ObjectIdDict)),
            (:line, 261, :none),
            (:for, (:(=), (:tuple, :k, :v), :pairs), (:block,
                (:line, 261, :none),
                (:(=), (:ref, :d, :k), :v)
              )),
            (:line, 262, :none),
            :d
          )),
        (:line, 265, :none),
        (:(=), (:call, :ObjectIdDict, (:(::), :o, :ObjectIdDict)), (:block,
            (:line, 265, :none),
            (:call, :new, (:call, :copy, (:., :o, (:quote, #QuoteNode
                    :ht
                  ))))
          ))
      )),
    (:line, 268, :none),
    (:(=), (:call, :similar, (:(::), :d, :ObjectIdDict)), (:block,
        (:line, 268, :none),
        (:call, :ObjectIdDict)
      )),
    (:line, 270, :none),
    (:function, (:call, :rehash!, (:(::), :t, :ObjectIdDict), (:kw, :newsz, (:call, :length, (:., :t, (:quote, #QuoteNode
                :ht
              ))))), (:block,
        (:line, 271, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :ht
            )), (:ccall, (:quote, #QuoteNode
              :jl_idtable_rehash
            ), :Any, (:tuple, :Any, :Csize_t), (:., :t, (:quote, #QuoteNode
                :ht
              )), :newsz)),
        (:line, 272, :none),
        :t
      )),
    (:line, 275, :none),
    (:function, (:call, :setindex!, (:(::), :t, :ObjectIdDict), (:(::), :v, :ANY), (:(::), :k, :ANY)), (:block,
        (:line, 276, :none),
        (:if, (:call, :(>=), (:., :t, (:quote, #QuoteNode
                :ndel
              )), (:call, :>>, (:call, :*, 3, (:call, :length, (:., :t, (:quote, #QuoteNode
                      :ht
                    )))), 2)), (:block,
            (:line, 277, :none),
            (:call, :rehash!, :t, (:call, :max, (:call, :>>, (:call, :length, (:., :t, (:quote, #QuoteNode
                        :ht
                      ))), 1), 32)),
            (:line, 278, :none),
            (:(=), (:., :t, (:quote, #QuoteNode
                  :ndel
                )), 0)
          )),
        (:line, 280, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :ht
            )), (:ccall, (:quote, #QuoteNode
              :jl_eqtable_put
            ), (:curly, :Array, :Any, 1), (:tuple, :Any, :Any, :Any), (:., :t, (:quote, #QuoteNode
                :ht
              )), :k, :v)),
        (:line, 281, :none),
        (:return, :t)
      )),
    (:line, 284, :none),
    (:(=), (:call, :get, (:(::), :t, :ObjectIdDict), (:(::), :key, :ANY), (:(::), :default, :ANY)), (:block,
        (:line, 284, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_eqtable_get
          ), :Any, (:tuple, :Any, :Any, :Any), (:., :t, (:quote, #QuoteNode
              :ht
            )), :key, :default)
      )),
    (:line, 287, :none),
    (:function, (:call, :pop!, (:(::), :t, :ObjectIdDict), (:(::), :key, :ANY), (:(::), :default, :ANY)), (:block,
        (:line, 288, :none),
        (:(=), :val, (:ccall, (:quote, #QuoteNode
              :jl_eqtable_pop
            ), :Any, (:tuple, :Any, :Any, :Any), (:., :t, (:quote, #QuoteNode
                :ht
              )), :key, :default)),
        (:line, 290, :none),
        (:||, (:call, :(===), :val, :default), (:+=, (:., :t, (:quote, #QuoteNode
                :ndel
              )), 1)),
        (:line, 291, :none),
        (:return, :val)
      )),
    (:line, 294, :none),
    (:function, (:call, :pop!, (:(::), :t, :ObjectIdDict), (:(::), :key, :ANY)), (:block,
        (:line, 295, :none),
        (:(=), :val, (:call, :pop!, :t, :key, :secret_table_token)),
        (:line, 296, :none),
        (:if, (:call, :!, (:call, :is, :val, :secret_table_token)), :val, (:call, :throw, (:call, :KeyError, :key)))
      )),
    (:line, 299, :none),
    (:function, (:call, :delete!, (:(::), :t, :ObjectIdDict), (:(::), :key, :ANY)), (:block,
        (:line, 300, :none),
        (:call, :pop!, :t, :key, :secret_table_token),
        (:line, 301, :none),
        :t
      )),
    (:line, 304, :none),
    (:(=), (:call, :empty!, (:(::), :t, :ObjectIdDict)), (:block,
        (:line, 304, :none),
        (:block,
          (:(=), (:., :t, (:quote, #QuoteNode
                :ht
              )), (:call, (:curly, :Vector, :Any), (:call, :length, (:., :t, (:quote, #QuoteNode
                    :ht
                  ))))),
          (:(=), (:., :t, (:quote, #QuoteNode
                :ndel
              )), 0),
          :t
        )
      )),
    (:line, 306, :none),
    (:(=), (:call, :_oidd_nextind, :a, :i), (:block,
        (:line, 306, :none),
        (:call, :reinterpret, :Int, (:ccall, (:quote, #QuoteNode
              :jl_eqtable_nextind
            ), :Csize_t, (:tuple, :Any, :Csize_t), :a, :i))
      )),
    (:line, 308, :none),
    (:(=), (:call, :start, (:(::), :t, :ObjectIdDict)), (:block,
        (:line, 308, :none),
        (:call, :_oidd_nextind, (:., :t, (:quote, #QuoteNode
              :ht
            )), 0)
      )),
    (:line, 309, :none),
    (:(=), (:call, :done, (:(::), :t, :ObjectIdDict), :i), (:block,
        (:line, 309, :none),
        (:call, :(==), :i, -1)
      )),
    (:line, 310, :none),
    (:(=), (:call, :next, (:(::), :t, :ObjectIdDict), :i), (:block,
        (:line, 310, :none),
        (:tuple, (:call, (:curly, :Pair, :Any, :Any), (:ref, (:., :t, (:quote, #QuoteNode
                  :ht
                )), (:call, :+, :i, 1)), (:ref, (:., :t, (:quote, #QuoteNode
                  :ht
                )), (:call, :+, :i, 2))), (:call, :_oidd_nextind, (:., :t, (:quote, #QuoteNode
                :ht
              )), (:call, :+, :i, 2)))
      )),
    (:line, 312, :none),
    (:function, (:call, :length, (:(::), :d, :ObjectIdDict)), (:block,
        (:line, 313, :none),
        (:(=), :n, 0),
        (:line, 314, :none),
        (:for, (:(=), :pair, :d), (:block,
            (:line, 315, :none),
            (:+=, :n, 1)
          )),
        (:line, 317, :none),
        :n
      )),
    (:line, 320, :none),
    (:(=), (:call, :copy, (:(::), :o, :ObjectIdDict)), (:block,
        (:line, 320, :none),
        (:call, :ObjectIdDict, :o)
      )),
    (:line, 322, :none),
    (:(=), (:call, :get!, (:(::), :o, :ObjectIdDict), :key, :default), (:block,
        (:line, 322, :none),
        (:(=), (:ref, :o, :key), (:call, :get, :o, :key, :default))
      )),
    (:line, 324, :none),
    (:abstract, :AbstractSerializer),
    (:line, 329, :none),
    (:const, (:global, (:(=), :maxallowedprobe, 16))),
    (:line, 330, :none),
    (:const, (:global, (:(=), :maxprobeshift, 6))),
    (:line, 332, :none),
    (:type, true, (:<:, (:curly, :Dict, :K, :V), (:curly, :Associative, :K, :V)), (:block,
        (:line, 333, :none),
        (:(::), :slots, (:curly, :Array, :UInt8, 1)),
        (:line, 334, :none),
        (:(::), :keys, (:curly, :Array, :K, 1)),
        (:line, 335, :none),
        (:(::), :vals, (:curly, :Array, :V, 1)),
        (:line, 336, :none),
        (:(::), :ndel, :Int),
        (:line, 337, :none),
        (:(::), :count, :Int),
        (:line, 338, :none),
        (:(::), :age, :UInt),
        (:line, 339, :none),
        (:(::), :idxfloor, :Int),
        (:line, 340, :none),
        (:(::), :maxprobe, :Int),
        (:line, 342, :none),
        (:function, (:call, :Dict), (:block,
            (:line, 343, :none),
            (:(=), :n, 16),
            (:line, 344, :none),
            (:call, :new, (:call, :zeros, :UInt8, :n), (:call, (:curly, :Array, :K, 1), :n), (:call, (:curly, :Array, :V, 1), :n), 0, 0, 0, 1, 0)
          )),
        (:line, 346, :none),
        (:function, (:call, :Dict, :kv), (:block,
            (:line, 347, :none),
            (:(=), :h, (:call, (:curly, :Dict, :K, :V))),
            (:line, 348, :none),
            (:for, (:(=), (:tuple, :k, :v), :kv), (:block,
                (:line, 349, :none),
                (:(=), (:ref, :h, :k), :v)
              )),
            (:line, 351, :none),
            (:return, :h)
          )),
        (:line, 353, :none),
        (:(=), (:call, :Dict, (:(::), :p, :Pair)), (:block,
            (:line, 353, :none),
            (:call, :setindex!, (:call, (:curly, :Dict, :K, :V)), (:., :p, (:quote, #QuoteNode
                  :second
                )), (:., :p, (:quote, #QuoteNode
                  :first
                )))
          )),
        (:line, 354, :none),
        (:function, (:call, :Dict, (:..., (:(::), :ps, :Pair))), (:block,
            (:line, 355, :none),
            (:(=), :h, (:call, (:curly, :Dict, :K, :V))),
            (:line, 356, :none),
            (:call, :sizehint!, :h, (:call, :length, :ps)),
            (:line, 357, :none),
            (:for, (:(=), :p, :ps), (:block,
                (:line, 358, :none),
                (:(=), (:ref, :h, (:., :p, (:quote, #QuoteNode
                        :first
                      ))), (:., :p, (:quote, #QuoteNode
                      :second
                    )))
              )),
            (:line, 360, :none),
            (:return, :h)
          )),
        (:line, 362, :none),
        (:function, (:call, :Dict, (:(::), :d, (:curly, :Dict, :K, :V))), (:block,
            (:line, 363, :none),
            (:if, (:call, :>, (:., :d, (:quote, #QuoteNode
                    :ndel
                  )), 0), (:block,
                (:line, 364, :none),
                (:call, :rehash!, :d)
              )),
            (:line, 366, :none),
            (:macrocall, Symbol("@assert"), (:call, :(==), (:., :d, (:quote, #QuoteNode
                    :ndel
                  )), 0)),
            (:line, 367, :none),
            (:call, :new, (:call, :copy, (:., :d, (:quote, #QuoteNode
                    :slots
                  ))), (:call, :copy, (:., :d, (:quote, #QuoteNode
                    :keys
                  ))), (:call, :copy, (:., :d, (:quote, #QuoteNode
                    :vals
                  ))), 0, (:., :d, (:quote, #QuoteNode
                  :count
                )), (:., :d, (:quote, #QuoteNode
                  :age
                )), (:., :d, (:quote, #QuoteNode
                  :idxfloor
                )), (:., :d, (:quote, #QuoteNode
                  :maxprobe
                )))
          ))
      )),
    (:line, 371, :none),
    (:(=), (:call, :Dict), (:block,
        (:line, 371, :none),
        (:call, (:curly, :Dict, :Any, :Any))
      )),
    (:line, 372, :none),
    (:(=), (:call, :Dict, (:(::), :kv, (:curly, :Tuple))), (:block,
        (:line, 372, :none),
        (:call, :Dict)
      )),
    (:line, 373, :none),
    (:(=), (:call, :copy, (:(::), :d, :Dict)), (:block,
        (:line, 373, :none),
        (:call, :Dict, :d)
      )),
    (:line, 375, :none),
    (:const, (:(=), :AnyDict, (:curly, :Dict, :Any, :Any))),
    (:line, 377, :none),
    (:(=), (:call, (:curly, :Dict, :K, :V), (:..., (:(::), :ps, (:curly, :Pair, :K, :V)))), (:block,
        (:line, 377, :none),
        (:call, (:curly, :Dict, :K, :V), :ps)
      )),
    (:line, 378, :none),
    (:(=), (:call, (:curly, :Dict, :K), (:..., (:(::), :ps, (:curly, :Pair, :K)))), (:block,
        (:line, 378, :none),
        (:call, (:curly, :Dict, :K, :Any), :ps)
      )),
    (:line, 379, :none),
    (:(=), (:call, (:curly, :Dict, :V), (:..., (:(::), :ps, (:curly, :Pair, (:call, :TypeVar, (:quote, #QuoteNode
                  :K
                )), :V)))), (:block,
        (:line, 379, :none),
        (:call, (:curly, :Dict, :Any, :V), :ps)
      )),
    (:line, 380, :none),
    (:(=), (:call, :Dict, (:..., (:(::), :ps, :Pair))), (:block,
        (:line, 380, :none),
        (:call, (:curly, :Dict, :Any, :Any), :ps)
      )),
    (:line, 382, :none),
    (:function, (:call, :Dict, :kv), (:block,
        (:line, 383, :none),
        (:try, (:block,
            (:line, 384, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :dict_with_eltype
                )), :kv, (:call, :eltype, :kv))
          ), :e, (:block,
            (:line, 386, :none),
            (:if, (:||, (:call, :any, (:->, :x, (:block,
                      (:line, 386, :none),
                      (:call, :isempty, (:call, :methods, :x, (:tuple, (:call, :typeof, :kv))))
                    )), (:vect, :start, :next, :done)), (:call, :!, (:call, :all, (:->, :x, (:block,
                        (:line, 387, :none),
                        (:call, :isa, :x, (:curly, :Union, :Tuple, :Pair))
                      )), :kv))), (:block,
                (:line, 388, :none),
                (:call, :throw, (:call, :ArgumentError, "Dict(kv): kv needs to be an iterator of tuples or pairs"))
              ), (:block,
                (:line, 390, :none),
                (:call, :rethrow, :e)
              ))
          ))
      )),
    (:line, 395, :none),
    (:typealias, (:curly, :TP, :K, :V), (:curly, :Union, (:curly, :Type, (:curly, :Tuple, :K, :V)), (:curly, :Type, (:curly, :Pair, :K, :V)))),
    (:line, 397, :none),
    (:(=), (:call, (:curly, :dict_with_eltype, :K, :V), :kv, (:(::), (:curly, :TP, :K, :V))), (:block,
        (:line, 397, :none),
        (:call, (:curly, :Dict, :K, :V), :kv)
      )),
    (:line, 398, :none),
    (:(=), (:call, (:curly, :dict_with_eltype, :K, :V), (:(::), :kv, :Generator), (:(::), (:curly, :TP, :K, :V))), (:block,
        (:line, 398, :none),
        (:call, (:curly, :Dict, :K, :V), :kv)
      )),
    (:line, 399, :none),
    (:(=), (:call, (:curly, :dict_with_eltype, :K, :V), (:(::), (:curly, :Type, (:curly, :Pair, :K, :V)))), (:block,
        (:line, 399, :none),
        (:call, (:curly, :Dict, :K, :V))
      )),
    (:line, 400, :none),
    (:(=), (:call, :dict_with_eltype, (:(::), :Type)), (:block,
        (:line, 400, :none),
        (:call, :Dict)
      )),
    (:line, 401, :none),
    (:(=), (:call, :dict_with_eltype, :kv, :t), (:block,
        (:line, 401, :none),
        (:call, :grow_to!, (:call, :dict_with_eltype, (:call, :_default_eltype, (:call, :typeof, :kv))), :kv)
      )),
    (:line, 402, :none),
    (:function, (:call, :dict_with_eltype, (:(::), :kv, :Generator), :t), (:block,
        (:line, 403, :none),
        (:(=), :T, (:call, :_default_eltype, (:call, :typeof, :kv))),
        (:line, 404, :none),
        (:if, (:&&, (:<:, :T, (:curly, :Union, :Pair, (:curly, :NTuple, 2))), (:call, :isleaftype, :T)), (:block,
            (:line, 405, :none),
            (:return, (:call, :dict_with_eltype, :kv, :T))
          )),
        (:line, 407, :none),
        (:return, (:call, :grow_to!, (:call, :dict_with_eltype, :T), :kv))
      )),
    (:line, 412, :none),
    (:function, (:call, :grow_to!, (:(::), :dest, :Associative), :itr), (:block,
        (:line, 413, :none),
        (:(=), :out, (:call, :grow_to!, (:call, :similar, :dest, (:curly, :Pair, (:curly, :Union), (:curly, :Union))), :itr, (:call, :start, :itr))),
        (:line, 414, :none),
        (:return, (:if, (:call, :isempty, :out), :dest, :out))
      )),
    (:line, 417, :none),
    (:function, (:call, (:curly, :grow_to!, :K, :V), (:(::), :dest, (:curly, :Associative, :K, :V)), :itr, :st), (:block,
        (:line, 418, :none),
        (:while, (:call, :!, (:call, :done, :itr, :st)), (:block,
            (:line, 419, :none),
            (:(=), (:tuple, (:tuple, :k, :v), :st), (:call, :next, :itr, :st)),
            (:line, 420, :none),
            (:if, (:&&, (:call, :isa, :k, :K), (:call, :isa, :v, :V)), (:block,
                (:line, 421, :none),
                (:(=), (:ref, :dest, :k), :v)
              ), (:block,
                (:line, 423, :none),
                (:(=), :new, (:call, :similar, :dest, (:curly, :Pair, (:call, :typejoin, :K, (:call, :typeof, :k)), (:call, :typejoin, :V, (:call, :typeof, :v))))),
                (:line, 424, :none),
                (:call, :copy!, :new, :dest),
                (:line, 425, :none),
                (:(=), (:ref, :new, :k), :v),
                (:line, 426, :none),
                (:return, (:call, :grow_to!, :new, :itr, :st))
              ))
          )),
        (:line, 429, :none),
        (:return, :dest)
      )),
    (:line, 432, :none),
    (:(=), (:call, (:curly, :similar, :K, :V), (:(::), :d, (:curly, :Dict, :K, :V))), (:block,
        (:line, 432, :none),
        (:call, (:curly, :Dict, :K, :V))
      )),
    (:line, 433, :none),
    (:(=), (:call, (:curly, :similar, :K, :V), (:(::), :d, :Dict), (:(::), (:curly, :Type, (:curly, :Pair, :K, :V)))), (:block,
        (:line, 433, :none),
        (:call, (:curly, :Dict, :K, :V))
      )),
    (:line, 436, :none),
    (:function, (:call, (:curly, :convert, :K, :V), (:(::), (:curly, :Type, (:curly, :Dict, :K, :V))), (:(::), :d, :Associative)), (:block,
        (:line, 437, :none),
        (:(=), :h, (:call, (:curly, :Dict, :K, :V))),
        (:line, 438, :none),
        (:for, (:(=), (:tuple, :k, :v), :d), (:block,
            (:line, 439, :none),
            (:(=), :ck, (:call, :convert, :K, :k)),
            (:line, 440, :none),
            (:if, (:call, :!, (:call, :haskey, :h, :ck)), (:block,
                (:line, 441, :none),
                (:(=), (:ref, :h, :ck), (:call, :convert, :V, :v))
              ), (:block,
                (:line, 443, :none),
                (:call, :error, "key collision during dictionary conversion")
              ))
          )),
        (:line, 446, :none),
        (:return, :h)
      )),
    (:line, 448, :none),
    (:(=), (:call, (:curly, :convert, :K, :V), (:(::), (:curly, :Type, (:curly, :Dict, :K, :V))), (:(::), :d, (:curly, :Dict, :K, :V))), (:block,
        (:line, 448, :none),
        :d
      )),
    (:line, 450, :none),
    (:(=), (:call, :hashindex, :key, :sz), (:block,
        (:line, 450, :none),
        (:(::), (:call, :+, (:call, :&, (:call, :%, (:call, :hash, :key), :Int), (:call, :-, :sz, 1)), 1), :Int)
      )),
    (:line, 452, :none),
    (:(=), (:call, :isslotempty, (:(::), :h, :Dict), (:(::), :i, :Int)), (:block,
        (:line, 452, :none),
        (:call, :(==), (:ref, (:., :h, (:quote, #QuoteNode
                :slots
              )), :i), 0x00)
      )),
    (:line, 453, :none),
    (:(=), (:call, :isslotfilled, (:(::), :h, :Dict), (:(::), :i, :Int)), (:block,
        (:line, 453, :none),
        (:call, :(==), (:ref, (:., :h, (:quote, #QuoteNode
                :slots
              )), :i), 0x01)
      )),
    (:line, 454, :none),
    (:(=), (:call, :isslotmissing, (:(::), :h, :Dict), (:(::), :i, :Int)), (:block,
        (:line, 454, :none),
        (:call, :(==), (:ref, (:., :h, (:quote, #QuoteNode
                :slots
              )), :i), 0x02)
      )),
    (:line, 456, :none),
    (:function, (:call, (:curly, :rehash!, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), (:kw, :newsz, (:call, :length, (:., :h, (:quote, #QuoteNode
                :keys
              ))))), (:block,
        (:line, 457, :none),
        (:(=), :olds, (:., :h, (:quote, #QuoteNode
              :slots
            ))),
        (:line, 458, :none),
        (:(=), :oldk, (:., :h, (:quote, #QuoteNode
              :keys
            ))),
        (:line, 459, :none),
        (:(=), :oldv, (:., :h, (:quote, #QuoteNode
              :vals
            ))),
        (:line, 460, :none),
        (:(=), :sz, (:call, :length, :olds)),
        (:line, 461, :none),
        (:(=), :newsz, (:call, :_tablesz, :newsz)),
        (:line, 462, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :age
            )), 1),
        (:line, 463, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :idxfloor
            )), 1),
        (:line, 464, :none),
        (:if, (:call, :(==), (:., :h, (:quote, #QuoteNode
                :count
              )), 0), (:block,
            (:line, 465, :none),
            (:call, :resize!, (:., :h, (:quote, #QuoteNode
                  :slots
                )), :newsz),
            (:line, 466, :none),
            (:call, :fill!, (:., :h, (:quote, #QuoteNode
                  :slots
                )), 0),
            (:line, 467, :none),
            (:call, :resize!, (:., :h, (:quote, #QuoteNode
                  :keys
                )), :newsz),
            (:line, 468, :none),
            (:call, :resize!, (:., :h, (:quote, #QuoteNode
                  :vals
                )), :newsz),
            (:line, 469, :none),
            (:(=), (:., :h, (:quote, #QuoteNode
                  :ndel
                )), 0),
            (:line, 470, :none),
            (:return, :h)
          )),
        (:line, 473, :none),
        (:(=), :slots, (:call, :zeros, :UInt8, :newsz)),
        (:line, 474, :none),
        (:(=), :keys, (:call, (:curly, :Array, :K, 1), :newsz)),
        (:line, 475, :none),
        (:(=), :vals, (:call, (:curly, :Array, :V, 1), :newsz)),
        (:line, 476, :none),
        (:(=), :age0, (:., :h, (:quote, #QuoteNode
              :age
            ))),
        (:line, 477, :none),
        (:(=), :count, 0),
        (:line, 478, :none),
        (:(=), :maxprobe, (:., :h, (:quote, #QuoteNode
              :maxprobe
            ))),
        (:line, 480, :none),
        (:for, (:(=), :i, (:(:), 1, :sz)), (:block,
            (:line, 481, :none),
            (:if, (:call, :(==), (:ref, :olds, :i), 0x01), (:block,
                (:line, 482, :none),
                (:(=), :k, (:ref, :oldk, :i)),
                (:line, 483, :none),
                (:(=), :v, (:ref, :oldv, :i)),
                (:line, 484, :none),
                (:(=), :index0, (:(=), :index, (:call, :hashindex, :k, :newsz))),
                (:line, 485, :none),
                (:while, (:call, :(!=), (:ref, :slots, :index), 0), (:block,
                    (:line, 486, :none),
                    (:(=), :index, (:call, :+, (:call, :&, :index, (:call, :-, :newsz, 1)), 1))
                  )),
                (:line, 488, :none),
                (:(=), :probe, (:call, :&, (:call, :-, :index, :index0), (:call, :-, :newsz, 1))),
                (:line, 489, :none),
                (:&&, (:call, :>, :probe, :maxprobe), (:(=), :maxprobe, :probe)),
                (:line, 490, :none),
                (:(=), (:ref, :slots, :index), 0x01),
                (:line, 491, :none),
                (:(=), (:ref, :keys, :index), :k),
                (:line, 492, :none),
                (:(=), (:ref, :vals, :index), :v),
                (:line, 493, :none),
                (:+=, :count, 1),
                (:line, 495, :none),
                (:if, (:call, :(!=), (:., :h, (:quote, #QuoteNode
                        :age
                      )), :age0), (:block,
                    (:line, 497, :none),
                    (:return, (:call, :rehash!, :h, :newsz))
                  ))
              ))
          )),
        (:line, 502, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :slots
            )), :slots),
        (:line, 503, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :keys
            )), :keys),
        (:line, 504, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :vals
            )), :vals),
        (:line, 505, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :count
            )), :count),
        (:line, 506, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :ndel
            )), 0),
        (:line, 507, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :maxprobe
            )), :maxprobe),
        (:line, 508, :none),
        (:macrocall, Symbol("@assert"), (:call, :(==), (:., :h, (:quote, #QuoteNode
                :age
              )), :age0)),
        (:line, 510, :none),
        (:return, :h)
      )),
    (:line, 513, :none),
    (:function, (:call, :sizehint!, (:(::), :d, :Dict), :newsz), (:block,
        (:line, 514, :none),
        (:(=), :oldsz, (:call, :length, (:., :d, (:quote, #QuoteNode
                :slots
              )))),
        (:line, 515, :none),
        (:if, (:call, :(<=), :newsz, :oldsz), (:block,
            (:line, 519, :none),
            (:return, :d)
          )),
        (:line, 522, :none),
        (:(=), :newsz, (:call, :max, :newsz, (:call, :>>, (:call, :*, :oldsz, 5), 2))),
        (:line, 523, :none),
        (:call, :rehash!, :d, :newsz)
      )),
    (:line, 526, :none),
    (:function, (:call, (:curly, :empty!, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V))), (:block,
        (:line, 527, :none),
        (:call, :fill!, (:., :h, (:quote, #QuoteNode
              :slots
            )), 0x00),
        (:line, 528, :none),
        (:(=), :sz, (:call, :length, (:., :h, (:quote, #QuoteNode
                :slots
              )))),
        (:line, 529, :none),
        (:call, :empty!, (:., :h, (:quote, #QuoteNode
              :keys
            ))),
        (:line, 530, :none),
        (:call, :empty!, (:., :h, (:quote, #QuoteNode
              :vals
            ))),
        (:line, 531, :none),
        (:call, :resize!, (:., :h, (:quote, #QuoteNode
              :keys
            )), :sz),
        (:line, 532, :none),
        (:call, :resize!, (:., :h, (:quote, #QuoteNode
              :vals
            )), :sz),
        (:line, 533, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :ndel
            )), 0),
        (:line, 534, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :count
            )), 0),
        (:line, 535, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :age
            )), 1),
        (:line, 536, :none),
        (:(=), (:., :h, (:quote, #QuoteNode
              :idxfloor
            )), 1),
        (:line, 537, :none),
        (:return, :h)
      )),
    (:line, 541, :none),
    (:function, (:call, (:curly, :ht_keyindex, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key), (:block,
        (:line, 542, :none),
        (:(=), :sz, (:call, :length, (:., :h, (:quote, #QuoteNode
                :keys
              )))),
        (:line, 543, :none),
        (:(=), :iter, 0),
        (:line, 544, :none),
        (:(=), :maxprobe, (:., :h, (:quote, #QuoteNode
              :maxprobe
            ))),
        (:line, 545, :none),
        (:(=), :index, (:call, :hashindex, :key, :sz)),
        (:line, 546, :none),
        (:(=), :keys, (:., :h, (:quote, #QuoteNode
              :keys
            ))),
        (:line, 548, :none),
        (:while, true, (:block,
            (:line, 549, :none),
            (:if, (:call, :isslotempty, :h, :index), (:block,
                (:line, 550, :none),
                (:break,)
              )),
            (:line, 552, :none),
            (:if, (:&&, (:call, :!, (:call, :isslotmissing, :h, :index)), (:||, (:call, :(===), :key, (:ref, :keys, :index)), (:call, :isequal, :key, (:ref, :keys, :index)))), (:block,
                (:line, 553, :none),
                (:return, :index)
              )),
            (:line, 556, :none),
            (:(=), :index, (:call, :+, (:call, :&, :index, (:call, :-, :sz, 1)), 1)),
            (:line, 557, :none),
            (:+=, :iter, 1),
            (:line, 558, :none),
            (:&&, (:call, :>, :iter, :maxprobe), (:break,))
          )),
        (:line, 560, :none),
        (:return, -1)
      )),
    (:line, 566, :none),
    (:function, (:call, (:curly, :ht_keyindex2, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key), (:block,
        (:line, 567, :none),
        (:(=), :age0, (:., :h, (:quote, #QuoteNode
              :age
            ))),
        (:line, 568, :none),
        (:(=), :sz, (:call, :length, (:., :h, (:quote, #QuoteNode
                :keys
              )))),
        (:line, 569, :none),
        (:(=), :iter, 0),
        (:line, 570, :none),
        (:(=), :maxprobe, (:., :h, (:quote, #QuoteNode
              :maxprobe
            ))),
        (:line, 571, :none),
        (:(=), :index, (:call, :hashindex, :key, :sz)),
        (:line, 572, :none),
        (:(=), :avail, 0),
        (:line, 573, :none),
        (:(=), :keys, (:., :h, (:quote, #QuoteNode
              :keys
            ))),
        (:line, 575, :none),
        (:while, true, (:block,
            (:line, 576, :none),
            (:if, (:call, :isslotempty, :h, :index), (:block,
                (:line, 577, :none),
                (:if, (:call, :<, :avail, 0), (:block,
                    (:line, 578, :none),
                    (:return, :avail)
                  )),
                (:line, 580, :none),
                (:return, (:call, :-, :index))
              )),
            (:line, 583, :none),
            (:if, (:call, :isslotmissing, :h, :index), (:block,
                (:line, 584, :none),
                (:if, (:call, :(==), :avail, 0), (:block,
                    (:line, 587, :none),
                    (:(=), :avail, (:call, :-, :index))
                  ))
              ), (:block,
                (:line, 589, :none),
                (:if, (:||, (:call, :(===), :key, (:ref, :keys, :index)), (:call, :isequal, :key, (:ref, :keys, :index))), (:block,
                    (:line, 590, :none),
                    (:return, :index)
                  ))
              )),
            (:line, 593, :none),
            (:(=), :index, (:call, :+, (:call, :&, :index, (:call, :-, :sz, 1)), 1)),
            (:line, 594, :none),
            (:+=, :iter, 1),
            (:line, 595, :none),
            (:&&, (:call, :>, :iter, :maxprobe), (:break,))
          )),
        (:line, 598, :none),
        (:&&, (:call, :<, :avail, 0), (:return, :avail)),
        (:line, 600, :none),
        (:(=), :maxallowed, (:call, :max, :maxallowedprobe, (:call, :>>, :sz, :maxprobeshift))),
        (:line, 602, :none),
        (:while, (:call, :<, :iter, :maxallowed), (:block,
            (:line, 603, :none),
            (:if, (:call, :!, (:call, :isslotfilled, :h, :index)), (:block,
                (:line, 604, :none),
                (:(=), (:., :h, (:quote, #QuoteNode
                      :maxprobe
                    )), :iter),
                (:line, 605, :none),
                (:return, (:call, :-, :index))
              )),
            (:line, 607, :none),
            (:(=), :index, (:call, :+, (:call, :&, :index, (:call, :-, :sz, 1)), 1)),
            (:line, 608, :none),
            (:+=, :iter, 1)
          )),
        (:line, 611, :none),
        (:call, :rehash!, :h, (:if, (:call, :>, (:., :h, (:quote, #QuoteNode
                  :count
                )), 64000), (:call, :*, :sz, 2), (:call, :*, :sz, 4))),
        (:line, 613, :none),
        (:return, (:call, :ht_keyindex2, :h, :key))
      )),
    (:line, 616, :none),
    (:function, (:call, :_setindex!, (:(::), :h, :Dict), :v, :key, :index), (:block,
        (:line, 617, :none),
        (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                :slots
              )), :index), 0x01),
        (:line, 618, :none),
        (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                :keys
              )), :index), :key),
        (:line, 619, :none),
        (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                :vals
              )), :index), :v),
        (:line, 620, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :count
            )), 1),
        (:line, 621, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :age
            )), 1),
        (:line, 622, :none),
        (:if, (:call, :<, :index, (:., :h, (:quote, #QuoteNode
                :idxfloor
              ))), (:block,
            (:line, 623, :none),
            (:(=), (:., :h, (:quote, #QuoteNode
                  :idxfloor
                )), :index)
          )),
        (:line, 626, :none),
        (:(=), :sz, (:call, :length, (:., :h, (:quote, #QuoteNode
                :keys
              )))),
        (:line, 628, :none),
        (:if, (:||, (:call, :(>=), (:., :h, (:quote, #QuoteNode
                  :ndel
                )), (:call, :>>, (:call, :*, 3, :sz), 2)), (:call, :>, (:call, :*, (:., :h, (:quote, #QuoteNode
                    :count
                  )), 3), (:call, :*, :sz, 2))), (:block,
            (:line, 630, :none),
            (:call, :rehash!, :h, (:if, (:call, :>, (:., :h, (:quote, #QuoteNode
                      :count
                    )), 64000), (:call, :*, (:., :h, (:quote, #QuoteNode
                      :count
                    )), 2), (:call, :*, (:., :h, (:quote, #QuoteNode
                      :count
                    )), 4)))
          ))
      )),
    (:line, 634, :none),
    (:function, (:call, (:curly, :setindex!, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :v0, :key0), (:block,
        (:line, 635, :none),
        (:(=), :key, (:call, :convert, :K, :key0)),
        (:line, 636, :none),
        (:if, (:call, :!, (:call, :isequal, :key, :key0)), (:block,
            (:line, 637, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, :key0, " is not a valid key for type ", :K)))
          )),
        (:line, 639, :none),
        (:call, :setindex!, :h, :v0, :key)
      )),
    (:line, 642, :none),
    (:function, (:call, (:curly, :setindex!, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :v0, (:(::), :key, :K)), (:block,
        (:line, 643, :none),
        (:(=), :v, (:call, :convert, :V, :v0)),
        (:line, 644, :none),
        (:(=), :index, (:call, :ht_keyindex2, :h, :key)),
        (:line, 646, :none),
        (:if, (:call, :>, :index, 0), (:block,
            (:line, 647, :none),
            (:+=, (:., :h, (:quote, #QuoteNode
                  :age
                )), 1),
            (:line, 648, :none),
            (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                    :keys
                  )), :index), :key),
            (:line, 649, :none),
            (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                    :vals
                  )), :index), :v)
          ), (:block,
            (:line, 651, :none),
            (:call, :_setindex!, :h, :v, :key, (:call, :-, :index))
          )),
        (:line, 654, :none),
        (:return, :h)
      )),
    (:line, 657, :none),
    (:(=), (:call, (:curly, :get!, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key0, :default), (:block,
        (:line, 657, :none),
        (:call, :get!, (:->, (:tuple,), (:block,
              (:line, 657, :none),
              :default
            )), :h, :key0)
      )),
    (:line, 658, :none),
    (:function, (:call, (:curly, :get!, :K, :V), (:(::), :default, :Callable), (:(::), :h, (:curly, :Dict, :K, :V)), :key0), (:block,
        (:line, 659, :none),
        (:(=), :key, (:call, :convert, :K, :key0)),
        (:line, 660, :none),
        (:if, (:call, :!, (:call, :isequal, :key, :key0)), (:block,
            (:line, 661, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, :key0, " is not a valid key for type ", :K)))
          )),
        (:line, 663, :none),
        (:return, (:call, :get!, :default, :h, :key))
      )),
    (:line, 666, :none),
    (:function, (:call, (:curly, :get!, :K, :V), (:(::), :default, :Callable), (:(::), :h, (:curly, :Dict, :K, :V)), (:(::), :key, :K)), (:block,
        (:line, 667, :none),
        (:(=), :index, (:call, :ht_keyindex2, :h, :key)),
        (:line, 669, :none),
        (:&&, (:call, :>, :index, 0), (:return, (:ref, (:., :h, (:quote, #QuoteNode
                  :vals
                )), :index))),
        (:line, 671, :none),
        (:(=), :age0, (:., :h, (:quote, #QuoteNode
              :age
            ))),
        (:line, 672, :none),
        (:(=), :v, (:call, :convert, :V, (:call, :default))),
        (:line, 673, :none),
        (:if, (:call, :(!=), (:., :h, (:quote, #QuoteNode
                :age
              )), :age0), (:block,
            (:line, 674, :none),
            (:(=), :index, (:call, :ht_keyindex2, :h, :key))
          )),
        (:line, 676, :none),
        (:if, (:call, :>, :index, 0), (:block,
            (:line, 677, :none),
            (:+=, (:., :h, (:quote, #QuoteNode
                  :age
                )), 1),
            (:line, 678, :none),
            (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                    :keys
                  )), :index), :key),
            (:line, 679, :none),
            (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                    :vals
                  )), :index), :v)
          ), (:block,
            (:line, 681, :none),
            (:call, :_setindex!, :h, :v, :key, (:call, :-, :index))
          )),
        (:line, 683, :none),
        (:return, :v)
      )),
    (:line, 688, :none),
    (:macro, (:call, :get!, :h, :key0, :default), (:block,
        (:line, 689, :none),
        (:return, (:quote, (:block,
              (:line, 690, :none),
              (:call, :get!, (:->, (:tuple,), (:block,
                    (:line, 690, :none),
                    (:$, (:call, :esc, :default))
                  )), (:$, (:call, :esc, :h)), (:$, (:call, :esc, :key0)))
            )))
      )),
    (:line, 695, :none),
    (:function, (:call, (:curly, :getindex, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key), (:block,
        (:line, 696, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 697, :none),
        (:return, (:if, (:call, :<, :index, 0), (:call, :throw, (:call, :KeyError, :key)), (:(::), (:ref, (:., :h, (:quote, #QuoteNode
                    :vals
                  )), :index), :V)))
      )),
    (:line, 700, :none),
    (:function, (:call, (:curly, :get, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key, :default), (:block,
        (:line, 701, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 702, :none),
        (:return, (:if, (:call, :<, :index, 0), :default, (:(::), (:ref, (:., :h, (:quote, #QuoteNode
                    :vals
                  )), :index), :V)))
      )),
    (:line, 705, :none),
    (:function, (:call, (:curly, :get, :K, :V), (:(::), :default, :Callable), (:(::), :h, (:curly, :Dict, :K, :V)), :key), (:block,
        (:line, 706, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 707, :none),
        (:return, (:if, (:call, :<, :index, 0), (:call, :default), (:(::), (:ref, (:., :h, (:quote, #QuoteNode
                    :vals
                  )), :index), :V)))
      )),
    (:line, 710, :none),
    (:(=), (:call, :haskey, (:(::), :h, :Dict), :key), (:block,
        (:line, 710, :none),
        (:call, :(>=), (:call, :ht_keyindex, :h, :key), 0)
      )),
    (:line, 711, :none),
    (:(=), (:call, (:curly, :in, (:<:, :T, :Dict)), :key, (:(::), :v, (:curly, :KeyIterator, :T))), (:block,
        (:line, 711, :none),
        (:call, :(>=), (:call, :ht_keyindex, (:., :v, (:quote, #QuoteNode
                :dict
              )), :key), 0)
      )),
    (:line, 713, :none),
    (:function, (:call, (:curly, :getkey, :K, :V), (:(::), :h, (:curly, :Dict, :K, :V)), :key, :default), (:block,
        (:line, 714, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 715, :none),
        (:return, (:if, (:call, :<, :index, 0), :default, (:(::), (:ref, (:., :h, (:quote, #QuoteNode
                    :keys
                  )), :index), :K)))
      )),
    (:line, 718, :none),
    (:function, (:call, :_pop!, (:(::), :h, :Dict), :index), (:block,
        (:line, 719, :none),
        (:(=), :val, (:ref, (:., :h, (:quote, #QuoteNode
                :vals
              )), :index)),
        (:line, 720, :none),
        (:call, :_delete!, :h, :index),
        (:line, 721, :none),
        (:return, :val)
      )),
    (:line, 724, :none),
    (:function, (:call, :pop!, (:(::), :h, :Dict), :key), (:block,
        (:line, 725, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 726, :none),
        (:return, (:if, (:call, :>, :index, 0), (:call, :_pop!, :h, :index), (:call, :throw, (:call, :KeyError, :key))))
      )),
    (:line, 729, :none),
    (:function, (:call, :pop!, (:(::), :h, :Dict), :key, :default), (:block,
        (:line, 730, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 731, :none),
        (:return, (:if, (:call, :>, :index, 0), (:call, :_pop!, :h, :index), :default))
      )),
    (:line, 734, :none),
    (:function, (:call, :_delete!, (:(::), :h, :Dict), :index), (:block,
        (:line, 735, :none),
        (:(=), (:ref, (:., :h, (:quote, #QuoteNode
                :slots
              )), :index), 0x02),
        (:line, 736, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_arrayunset
          ), :Void, (:tuple, :Any, :UInt), (:., :h, (:quote, #QuoteNode
              :keys
            )), (:call, :-, :index, 1)),
        (:line, 737, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_arrayunset
          ), :Void, (:tuple, :Any, :UInt), (:., :h, (:quote, #QuoteNode
              :vals
            )), (:call, :-, :index, 1)),
        (:line, 738, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :ndel
            )), 1),
        (:line, 739, :none),
        (:-=, (:., :h, (:quote, #QuoteNode
              :count
            )), 1),
        (:line, 740, :none),
        (:+=, (:., :h, (:quote, #QuoteNode
              :age
            )), 1),
        (:line, 741, :none),
        (:return, :h)
      )),
    (:line, 744, :none),
    (:function, (:call, :delete!, (:(::), :h, :Dict), :key), (:block,
        (:line, 745, :none),
        (:(=), :index, (:call, :ht_keyindex, :h, :key)),
        (:line, 746, :none),
        (:if, (:call, :>, :index, 0), (:block,
            (:line, 747, :none),
            (:call, :_delete!, :h, :index)
          )),
        (:line, 749, :none),
        (:return, :h)
      )),
    (:line, 752, :none),
    (:function, (:call, :skip_deleted, (:(::), :h, :Dict), :i), (:block,
        (:line, 753, :none),
        (:(=), :L, (:call, :length, (:., :h, (:quote, #QuoteNode
                :slots
              )))),
        (:line, 754, :none),
        (:while, (:&&, (:call, :(<=), :i, :L), (:call, :!, (:call, :isslotfilled, :h, :i))), (:block,
            (:line, 755, :none),
            (:+=, :i, 1)
          )),
        (:line, 757, :none),
        (:return, :i)
      )),
    (:line, 760, :none),
    (:function, (:call, :start, (:(::), :t, :Dict)), (:block,
        (:line, 761, :none),
        (:(=), :i, (:call, :skip_deleted, :t, (:., :t, (:quote, #QuoteNode
                :idxfloor
              )))),
        (:line, 762, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :idxfloor
            )), :i),
        (:line, 763, :none),
        (:return, :i)
      )),
    (:line, 765, :none),
    (:(=), (:call, :done, (:(::), :t, :Dict), :i), (:block,
        (:line, 765, :none),
        (:call, :>, :i, (:call, :length, (:., :t, (:quote, #QuoteNode
                :vals
              ))))
      )),
    (:line, 766, :none),
    (:(=), (:call, (:curly, :next, :K, :V), (:(::), :t, (:curly, :Dict, :K, :V)), :i), (:block,
        (:line, 766, :none),
        (:tuple, (:call, (:curly, :Pair, :K, :V), (:ref, (:., :t, (:quote, #QuoteNode
                  :keys
                )), :i), (:ref, (:., :t, (:quote, #QuoteNode
                  :vals
                )), :i)), (:call, :skip_deleted, :t, (:call, :+, :i, 1)))
      )),
    (:line, 768, :none),
    (:(=), (:call, :isempty, (:(::), :t, :Dict)), (:block,
        (:line, 768, :none),
        (:call, :(==), (:., :t, (:quote, #QuoteNode
              :count
            )), 0)
      )),
    (:line, 769, :none),
    (:(=), (:call, :length, (:(::), :t, :Dict)), (:block,
        (:line, 769, :none),
        (:., :t, (:quote, #QuoteNode
            :count
          ))
      )),
    (:line, 771, :none),
    (:(=), (:call, (:curly, :next, (:<:, :T, :Dict)), (:(::), :v, (:curly, :KeyIterator, :T)), :i), (:block,
        (:line, 771, :none),
        (:tuple, (:ref, (:., (:., :v, (:quote, #QuoteNode
                  :dict
                )), (:quote, #QuoteNode
                :keys
              )), :i), (:call, :skip_deleted, (:., :v, (:quote, #QuoteNode
                :dict
              )), (:call, :+, :i, 1)))
      )),
    (:line, 772, :none),
    (:(=), (:call, (:curly, :next, (:<:, :T, :Dict)), (:(::), :v, (:curly, :ValueIterator, :T)), :i), (:block,
        (:line, 772, :none),
        (:tuple, (:ref, (:., (:., :v, (:quote, #QuoteNode
                  :dict
                )), (:quote, #QuoteNode
                :vals
              )), :i), (:call, :skip_deleted, (:., :v, (:quote, #QuoteNode
                :dict
              )), (:call, :+, :i, 1)))
      )),
    (:line, 776, :none),
    (:function, (:call, :filter!, :f, (:(::), :d, (:curly, :Union, :ObjectIdDict, :Dict))), (:block,
        (:line, 777, :none),
        (:for, (:(=), (:tuple, :k, :v), :d), (:block,
            (:line, 778, :none),
            (:if, (:call, :!, (:call, :f, :k, :v)), (:block,
                (:line, 779, :none),
                (:call, :delete!, :d, :k)
              ))
          )),
        (:line, 782, :none),
        (:return, :d)
      )),
    (:line, 785, :none),
    (:type, false, (:<:, (:curly, :ImmutableDict, :K, :V), (:curly, :Associative, :K, :V)), (:block,
        (:line, 786, :none),
        (:(::), :parent, (:curly, :ImmutableDict, :K, :V)),
        (:line, 787, :none),
        (:(::), :key, :K),
        (:line, 788, :none),
        (:(::), :value, :V),
        (:line, 789, :none),
        (:(=), (:call, :ImmutableDict), (:block,
            (:line, 789, :none),
            (:call, :new)
          )),
        (:line, 790, :none),
        (:(=), (:call, :ImmutableDict, :key, :value), (:block,
            (:line, 790, :none),
            (:block,
              (:(=), :empty, (:call, :new)),
              (:call, :new, :empty, :key, :value)
            )
          )),
        (:line, 791, :none),
        (:(=), (:call, :ImmutableDict, (:(::), :parent, :ImmutableDict), :key, :value), (:block,
            (:line, 791, :none),
            (:call, :new, :parent, :key, :value)
          ))
      )),
    (:line, 794, :none),
    "    ImmutableDict\n\nImmutableDict is a Dictionary implemented as an immutable linked list,\nwhich is optimal for small dictionaries that are constructed over many individual insertions\nNote that it is not possible to remove a value, although it can be partially overridden and hidden\nby inserting a new value with the same key\n\n    ImmutableDict(KV::Pair)\n\nCreate a new entry in the Immutable Dictionary for the key => value pair\n\n - use `(key => value) in dict` to see if this particular combination is in the properties set\n - use `get(dict, key, default)` to retrieve the most recent value for a particular key\n\n",
    (:line, 810, :none),
    :ImmutableDict,
    (:line, 811, :none),
    (:(=), (:call, (:curly, :ImmutableDict, :K, :V), (:(::), :KV, (:curly, :Pair, :K, :V))), (:block,
        (:line, 811, :none),
        (:call, (:curly, :ImmutableDict, :K, :V), (:ref, :KV, 1), (:ref, :KV, 2))
      )),
    (:line, 812, :none),
    (:(=), (:call, (:curly, :ImmutableDict, :K, :V), (:(::), :t, (:curly, :ImmutableDict, :K, :V)), (:(::), :KV, :Pair)), (:block,
        (:line, 812, :none),
        (:call, (:curly, :ImmutableDict, :K, :V), :t, (:ref, :KV, 1), (:ref, :KV, 2))
      )),
    (:line, 814, :none),
    (:function, (:call, :in, (:(::), :key_value, :Pair), (:(::), :dict, :ImmutableDict), (:kw, :valcmp, :(==))), (:block,
        (:line, 815, :none),
        (:(=), (:tuple, :key, :value), :key_value),
        (:line, 816, :none),
        (:while, (:call, :isdefined, :dict, (:quote, #QuoteNode
              :parent
            )), (:block,
            (:line, 817, :none),
            (:if, (:call, :(==), (:., :dict, (:quote, #QuoteNode
                    :key
                  )), :key), (:block,
                (:line, 818, :none),
                (:&&, (:call, :valcmp, :value, (:., :dict, (:quote, #QuoteNode
                        :value
                      ))), (:return, true))
              )),
            (:line, 820, :none),
            (:(=), :dict, (:., :dict, (:quote, #QuoteNode
                  :parent
                )))
          )),
        (:line, 822, :none),
        (:return, false)
      )),
    (:line, 825, :none),
    (:function, (:call, :haskey, (:(::), :dict, :ImmutableDict), :key), (:block,
        (:line, 826, :none),
        (:while, (:call, :isdefined, :dict, (:quote, #QuoteNode
              :parent
            )), (:block,
            (:line, 827, :none),
            (:&&, (:call, :(==), (:., :dict, (:quote, #QuoteNode
                    :key
                  )), :key), (:return, true)),
            (:line, 828, :none),
            (:(=), :dict, (:., :dict, (:quote, #QuoteNode
                  :parent
                )))
          )),
        (:line, 830, :none),
        (:return, false)
      )),
    (:line, 833, :none),
    (:function, (:call, :getindex, (:(::), :dict, :ImmutableDict), :key), (:block,
        (:line, 834, :none),
        (:while, (:call, :isdefined, :dict, (:quote, #QuoteNode
              :parent
            )), (:block,
            (:line, 835, :none),
            (:&&, (:call, :(==), (:., :dict, (:quote, #QuoteNode
                    :key
                  )), :key), (:return, (:., :dict, (:quote, #QuoteNode
                    :value
                  )))),
            (:line, 836, :none),
            (:(=), :dict, (:., :dict, (:quote, #QuoteNode
                  :parent
                )))
          )),
        (:line, 838, :none),
        (:call, :throw, (:call, :KeyError, :key))
      )),
    (:line, 840, :none),
    (:function, (:call, :get, (:(::), :dict, :ImmutableDict), :key, :default), (:block,
        (:line, 841, :none),
        (:while, (:call, :isdefined, :dict, (:quote, #QuoteNode
              :parent
            )), (:block,
            (:line, 842, :none),
            (:&&, (:call, :(==), (:., :dict, (:quote, #QuoteNode
                    :key
                  )), :key), (:return, (:., :dict, (:quote, #QuoteNode
                    :value
                  )))),
            (:line, 843, :none),
            (:(=), :dict, (:., :dict, (:quote, #QuoteNode
                  :parent
                )))
          )),
        (:line, 845, :none),
        (:return, :default)
      )),
    (:line, 849, :none),
    (:(=), (:call, :start, (:(::), :t, :ImmutableDict)), (:block,
        (:line, 849, :none),
        :t
      )),
    (:line, 850, :none),
    (:(=), (:call, (:curly, :next, :K, :V), (:(::), (:curly, :ImmutableDict, :K, :V)), :t), (:block,
        (:line, 850, :none),
        (:tuple, (:call, (:curly, :Pair, :K, :V), (:., :t, (:quote, #QuoteNode
                :key
              )), (:., :t, (:quote, #QuoteNode
                :value
              ))), (:., :t, (:quote, #QuoteNode
              :parent
            )))
      )),
    (:line, 851, :none),
    (:(=), (:call, :done, (:(::), :ImmutableDict), :t), (:block,
        (:line, 851, :none),
        (:call, :!, (:call, :isdefined, :t, (:quote, #QuoteNode
              :parent
            )))
      )),
    (:line, 852, :none),
    (:(=), (:call, :length, (:(::), :t, :ImmutableDict)), (:block,
        (:line, 852, :none),
        (:call, :count, (:->, :x, (:block,
              (:line, 852, :none),
              1
            )), :t)
      )),
    (:line, 853, :none),
    (:(=), (:call, :isempty, (:(::), :t, :ImmutableDict)), (:block,
        (:line, 853, :none),
        (:call, :done, :t, (:call, :start, :t))
      )),
    (:line, 854, :none),
    (:function, (:call, :similar, (:(::), :t, :ImmutableDict)), (:block,
        (:line, 855, :none),
        (:while, (:call, :isdefined, :t, (:quote, #QuoteNode
              :parent
            )), (:block,
            (:line, 856, :none),
            (:(=), :t, (:., :t, (:quote, #QuoteNode
                  :parent
                )))
          )),
        (:line, 858, :none),
        (:return, :t)
      )),
    (:line, 861, :none),
    (:(=), (:call, (:curly, :_similar_for, (:<:, :P, :Pair)), (:(::), :c, :Dict), (:(::), (:curly, :Type, :P)), :itr, :isz), (:block,
        (:line, 861, :none),
        (:call, :similar, :c, :P)
      )),
    (:line, 862, :none),
    (:(=), (:call, :_similar_for, (:(::), :c, :Associative), :T, :itr, :isz), (:block,
        (:line, 862, :none),
        (:call, :throw, (:call, :ArgumentError, "for Associatives, similar requires an element type of Pair;\n  if calling map, consider a comprehension instead"))
      ))
  ))