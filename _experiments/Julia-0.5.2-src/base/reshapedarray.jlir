(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :MultiplicativeInverses, :SignedMultiplicativeInverse),
    (:line, 5, :none),
    (:type, false, (:<:, (:curly, :ReshapedArray, :T, :N, (:<:, :P, :AbstractArray), (:<:, :MI, (:curly, :Tuple, (:curly, :Vararg, (:curly, :SignedMultiplicativeInverse, :Int))))), (:curly, :AbstractArray, :T, :N)), (:block,
        (:line, 6, :none),
        (:(::), :parent, :P),
        (:line, 7, :none),
        (:(::), :dims, (:curly, :NTuple, :N, :Int)),
        (:line, 8, :none),
        (:(::), :mi, :MI)
      )),
    (:line, 10, :none),
    (:(=), (:call, (:curly, :ReshapedArray, :T, :N), (:(::), :parent, (:curly, :AbstractArray, :T)), (:(::), :dims, (:curly, :NTuple, :N, :Int)), :mi), (:block,
        (:line, 10, :none),
        (:call, (:curly, :ReshapedArray, :T, :N, (:call, :typeof, :parent), (:call, :typeof, :mi)), :parent, :dims, :mi)
      )),
    (:line, 13, :none),
    (:typealias, (:curly, :ReshapedArrayLF, :T, :N, (:<:, :P, :AbstractArray)), (:curly, :ReshapedArray, :T, :N, :P, (:curly, :Tuple))),
    (:line, 16, :none),
    (:type, false, (:curly, :ReshapedArrayIterator, :I, :M), (:block,
        (:line, 17, :none),
        (:(::), :iter, :I),
        (:line, 18, :none),
        (:(::), :mi, (:curly, :NTuple, :M, (:curly, :SignedMultiplicativeInverse, :Int)))
      )),
    (:line, 20, :none),
    (:(=), (:call, :ReshapedArrayIterator, (:(::), :A, :ReshapedArray)), (:block,
        (:line, 20, :none),
        (:call, :_rs_iterator, (:call, :parent, :A), (:., :A, (:quote, #QuoteNode
              :mi
            )))
      )),
    (:line, 21, :none),
    (:function, (:call, (:curly, :_rs_iterator, :M), :P, (:(::), :mi, (:curly, :NTuple, :M))), (:block,
        (:line, 22, :none),
        (:(=), :iter, (:call, :eachindex, :P)),
        (:line, 23, :none),
        (:call, (:curly, :ReshapedArrayIterator, (:call, :typeof, :iter), :M), :iter, :mi)
      )),
    (:line, 26, :none),
    (:type, false, (:curly, :ReshapedIndex, :T), (:block,
        (:line, 27, :none),
        (:(::), :parentindex, :T)
      )),
    (:line, 31, :none),
    (:(=), (:call, :start, (:(::), :R, :ReshapedArrayIterator)), (:block,
        (:line, 31, :none),
        (:call, :start, (:., :R, (:quote, #QuoteNode
              :iter
            )))
      )),
    (:line, 32, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :done, (:(::), :R, :ReshapedArrayIterator), :i), (:block,
          (:line, 32, :none),
          (:call, :done, (:., :R, (:quote, #QuoteNode
                :iter
              )), :i)
        ))),
    (:line, 33, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :next, (:(::), :R, :ReshapedArrayIterator), :i), (:block,
          (:line, 34, :none),
          (:(=), (:tuple, :item, :inext), (:call, :next, (:., :R, (:quote, #QuoteNode
                  :iter
                )), :i)),
          (:line, 35, :none),
          (:tuple, (:call, :ReshapedIndex, :item), :inext)
        ))),
    (:line, 37, :none),
    (:(=), (:call, :length, (:(::), :R, :ReshapedArrayIterator)), (:block,
        (:line, 37, :none),
        (:call, :length, (:., :R, (:quote, #QuoteNode
              :iter
            )))
      )),
    (:line, 39, :none),
    (:(=), (:call, :reshape, (:(::), :parent, :AbstractArray), (:..., (:(::), :dims, :IntOrInd))), (:block,
        (:line, 39, :none),
        (:call, :reshape, :parent, :dims)
      )),
    (:line, 40, :none),
    (:(=), (:call, :reshape, (:(::), :parent, :AbstractArray), (:(::), :shp, :NeedsShaping)), (:block,
        (:line, 40, :none),
        (:call, :reshape, :parent, (:call, :to_shape, :shp))
      )),
    (:line, 41, :none),
    (:(=), (:call, :reshape, (:(::), :parent, :AbstractArray), (:(::), :dims, :Dims)), (:block,
        (:line, 41, :none),
        (:call, :_reshape, :parent, :dims)
      )),
    (:line, 43, :none),
    (:(=), (:call, (:curly, :reshape, :T, :N), (:(::), :parent, (:curly, :AbstractArray, :T, :N)), (:(::), :ndims, (:curly, :Type, (:curly, :Val, :N)))), (:block,
        (:line, 43, :none),
        :parent
      )),
    (:line, 44, :none),
    (:function, (:call, (:curly, :reshape, :T, :AN, :N), (:(::), :parent, (:curly, :AbstractArray, :T, :AN)), (:(::), :ndims, (:curly, :Type, (:curly, :Val, :N)))), (:block,
        (:line, 45, :none),
        (:call, :reshape, :parent, (:call, :rdims, (:tuple,), (:call, :indices, :parent), (:curly, :Val, :N)))
      )),
    (:line, 50, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :rdims, :N), (:(::), :out, (:curly, :NTuple, :N)), (:(::), :inds, (:curly, :Tuple)), (:(::), (:curly, :Type, (:curly, :Val, :N)))), (:block,
          (:line, 50, :none),
          :out
        ))),
    (:line, 51, :none),
    (:macrocall, Symbol("@pure"), (:function, (:call, (:curly, :rdims, :N), (:(::), :out, (:curly, :NTuple, :N)), (:(::), :inds, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any))), (:(::), (:curly, :Type, (:curly, :Val, :N)))), (:block,
          (:line, 52, :none),
          (:(=), :l, (:call, :*, (:call, :length, (:call, :last, :out)), (:call, :prod, (:call, :map, :length, :inds)))),
          (:line, 53, :none),
          (:tuple, (:..., (:call, :front, :out)), (:call, :OneTo, :l))
        ))),
    (:line, 55, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :rdims, :N), (:(::), :out, :Tuple), (:(::), :inds, (:curly, :Tuple)), (:(::), (:curly, :Type, (:curly, :Val, :N)))), (:block,
          (:line, 55, :none),
          (:call, :rdims, (:tuple, (:..., :out), (:call, :OneTo, 1)), (:tuple,), (:curly, :Val, :N))
        ))),
    (:line, 56, :none),
    (:macrocall, Symbol("@pure"), (:(=), (:call, (:curly, :rdims, :N), (:(::), :out, :Tuple), (:(::), :inds, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any))), (:(::), (:curly, :Type, (:curly, :Val, :N)))), (:block,
          (:line, 56, :none),
          (:call, :rdims, (:tuple, (:..., :out), (:call, :first, :inds)), (:call, :tail, :inds), (:curly, :Val, :N))
        ))),
    (:line, 59, :none),
    (:(=), (:call, :_reshape, (:(::), :parent, :Vector), (:(::), :dims, (:curly, :Dims, 1))), (:block,
        (:line, 59, :none),
        :parent
      )),
    (:line, 60, :none),
    (:(=), (:call, :_reshape, (:(::), :parent, :Array), (:(::), :dims, (:curly, :Dims, 1))), (:block,
        (:line, 60, :none),
        (:call, :reshape, :parent, :dims)
      )),
    (:line, 61, :none),
    (:(=), (:call, :_reshape, (:(::), :parent, :Array), (:(::), :dims, :Dims)), (:block,
        (:line, 61, :none),
        (:call, :reshape, :parent, :dims)
      )),
    (:line, 64, :none),
    (:function, (:call, :_reshape, (:(::), :v, :AbstractVector), (:(::), :dims, (:curly, :Dims, 1))), (:block,
        (:line, 65, :none),
        (:(=), :len, (:ref, :dims, 1)),
        (:line, 66, :none),
        (:||, (:call, :(==), :len, (:call, :length, :v)), (:call, :throw, (:call, :DimensionMismatch, (:string, "parent has ", (:call, :length, :v), " elements, which is incompatible with length ", :len)))),
        (:line, 67, :none),
        :v
      )),
    (:line, 70, :none),
    (:function, (:call, :_reshape, (:(::), :parent, :AbstractArray), (:(::), :dims, :Dims)), (:block,
        (:line, 71, :none),
        (:(=), :n, (:call, :_length, :parent)),
        (:line, 72, :none),
        (:||, (:call, :(==), (:call, :prod, :dims), :n), (:call, :throw, (:call, :DimensionMismatch, (:string, "parent has ", :n, " elements, which is incompatible with size ", :dims)))),
        (:line, 73, :none),
        (:call, :__reshape, (:tuple, :parent, (:call, :linearindexing, :parent)), :dims)
      )),
    (:line, 77, :none),
    (:(=), (:call, (:curly, :_reshape, :T), (:(::), :v, (:curly, :ReshapedArray, :T, 1)), (:(::), :dims, (:curly, :Dims, 1))), (:block,
        (:line, 77, :none),
        (:call, :_reshape, (:., :v, (:quote, #QuoteNode
              :parent
            )), :dims)
      )),
    (:line, 78, :none),
    (:(=), (:call, :_reshape, (:(::), :R, :ReshapedArray), (:(::), :dims, :Dims)), (:block,
        (:line, 78, :none),
        (:call, :_reshape, (:., :R, (:quote, #QuoteNode
              :parent
            )), :dims)
      )),
    (:line, 80, :none),
    (:function, (:call, :__reshape, (:(::), :p, (:curly, :Tuple, :AbstractArray, :LinearSlow)), (:(::), :dims, :Dims)), (:block,
        (:line, 81, :none),
        (:(=), :parent, (:ref, :p, 1)),
        (:line, 82, :none),
        (:(=), :strds, (:call, :front, (:call, :size_strides, :parent))),
        (:line, 83, :none),
        (:(=), :strds1, (:call, :map, (:->, :s, (:block,
                (:line, 83, :none),
                (:call, :max, 1, :s)
              )), :strds)),
        (:line, 84, :none),
        (:(=), :mi, (:call, :map, :SignedMultiplicativeInverse, :strds1)),
        (:line, 85, :none),
        (:call, :ReshapedArray, :parent, :dims, (:call, :reverse, :mi))
      )),
    (:line, 88, :none),
    (:function, (:call, :__reshape, (:(::), :p, (:curly, :Tuple, :AbstractArray, :LinearFast)), (:(::), :dims, :Dims)), (:block,
        (:line, 89, :none),
        (:(=), :parent, (:ref, :p, 1)),
        (:line, 90, :none),
        (:call, :ReshapedArray, :parent, :dims, (:tuple,))
      )),
    (:line, 93, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :size_strides, (:(::), :A, :AbstractArray)), (:block,
          (:line, 93, :none),
          (:call, :tail, (:call, :size_strides, (:tuple, 1), (:..., (:call, :size, :A))))
        ))),
    (:line, 94, :none),
    (:(=), (:call, :size_strides, (:(::), :out, :Tuple)), (:block,
        (:line, 94, :none),
        :out
      )),
    (:line, 95, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :size_strides, :out, :s, (:..., :sz)), (:block,
          (:line, 95, :none),
          (:call, :size_strides, (:tuple, (:..., :out), (:call, :*, (:ref, :out, :end), :s)), (:..., :sz))
        ))),
    (:line, 97, :none),
    (:(=), (:call, :size, (:(::), :A, :ReshapedArray)), (:block,
        (:line, 97, :none),
        (:., :A, (:quote, #QuoteNode
            :dims
          ))
      )),
    (:line, 98, :none),
    (:(=), (:call, :similar, (:(::), :A, :ReshapedArray), (:(::), :eltype, :Type), (:(::), :dims, :Dims)), (:block,
        (:line, 98, :none),
        (:call, :similar, (:call, :parent, :A), :eltype, :dims)
      )),
    (:line, 99, :none),
    (:(=), (:call, (:curly, :linearindexing, (:<:, :R, :ReshapedArrayLF)), (:(::), (:curly, :Type, :R))), (:block,
        (:line, 99, :none),
        (:call, :LinearFast)
      )),
    (:line, 100, :none),
    (:(=), (:call, :parent, (:(::), :A, :ReshapedArray)), (:block,
        (:line, 100, :none),
        (:., :A, (:quote, #QuoteNode
            :parent
          ))
      )),
    (:line, 101, :none),
    (:(=), (:call, :parentindexes, (:(::), :A, :ReshapedArray)), (:block,
        (:line, 101, :none),
        (:call, :map, (:->, :s, (:block,
              (:line, 101, :none),
              (:(:), 1, :s)
            )), (:call, :size, (:call, :parent, :A)))
      )),
    (:line, 102, :none),
    (:(=), (:call, (:curly, :reinterpret, :T), (:(::), (:curly, :Type, :T)), (:(::), :A, :ReshapedArray), (:(::), :dims, :Dims)), (:block,
        (:line, 102, :none),
        (:call, :reinterpret, :T, (:call, :parent, :A), :dims)
      )),
    (:line, 104, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :ind2sub_rs, (:(::), (:curly, :Tuple)), (:(::), :i, :Int)), (:block,
          (:line, 104, :none),
          :i
        ))),
    (:line, 105, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :ind2sub_rs, :strds, :i), (:block,
          (:line, 105, :none),
          (:call, :ind2sub_rs, (:tuple,), :strds, (:call, :-, :i, 1))
        ))),
    (:line, 106, :none),
    (:macrocall, Symbol("@inline"), (:(=), (:call, :ind2sub_rs, :out, (:(::), (:curly, :Tuple)), :ind), (:block,
          (:line, 106, :none),
          (:tuple, (:call, :+, :ind, 1), (:..., :out))
        ))),
    (:line, 107, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :ind2sub_rs, :out, :strds, :ind), (:block,
          (:line, 108, :none),
          (:(=), (:tuple, :d, :r), (:call, :divrem, :ind, (:ref, :strds, 1))),
          (:line, 109, :none),
          (:call, :ind2sub_rs, (:tuple, (:call, :+, :d, 1), (:..., :out)), (:call, :tail, :strds), :r)
        ))),
    (:line, 112, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :getindex, (:(::), :A, :ReshapedArrayLF), (:(::), :index, :Int)), (:block,
          (:line, 113, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, :index)),
          (:line, 114, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), :ret, (:ref, (:call, :parent, :A), :index))),
          (:line, 115, :none),
          :ret
        ))),
    (:line, 117, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :getindex, (:(::), :A, :ReshapedArray), (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 118, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, (:..., :indexes))),
          (:line, 119, :none),
          (:call, :_unsafe_getindex, :A, (:..., :indexes))
        ))),
    (:line, 121, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :getindex, (:(::), :A, :ReshapedArray), (:(::), :index, :ReshapedIndex)), (:block,
          (:line, 122, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, (:call, :parent, :A), (:., :index, (:quote, #QuoteNode
                  :parentindex
                )))),
          (:line, 123, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), :ret, (:ref, (:call, :parent, :A), (:., :index, (:quote, #QuoteNode
                    :parentindex
                  ))))),
          (:line, 124, :none),
          :ret
        ))),
    (:line, 127, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :_unsafe_getindex, (:(::), :A, :ReshapedArray), (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 128, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), :ret, (:ref, (:call, :parent, :A), (:..., (:call, :ind2sub_rs, (:., :A, (:quote, #QuoteNode
                        :mi
                      )), (:call, :sub2ind, (:call, :size, :A), (:..., :indexes))))))),
          (:line, 129, :none),
          :ret
        ))),
    (:line, 131, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :_unsafe_getindex, (:(::), :A, :ReshapedArrayLF), (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 132, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), :ret, (:ref, (:call, :parent, :A), (:call, :sub2ind, (:call, :size, :A), (:..., :indexes))))),
          (:line, 133, :none),
          :ret
        ))),
    (:line, 136, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :setindex!, (:(::), :A, :ReshapedArrayLF), :val, (:(::), :index, :Int)), (:block,
          (:line, 137, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, :index)),
          (:line, 138, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:call, :parent, :A), :index), :val)),
          (:line, 139, :none),
          :val
        ))),
    (:line, 141, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :setindex!, (:(::), :A, :ReshapedArray), :val, (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 142, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :A, (:..., :indexes))),
          (:line, 143, :none),
          (:call, :_unsafe_setindex!, :A, :val, (:..., :indexes))
        ))),
    (:line, 145, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :setindex!, (:(::), :A, :ReshapedArray), :val, (:(::), :index, :ReshapedIndex)), (:block,
          (:line, 146, :none),
          (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, (:call, :parent, :A), (:., :index, (:quote, #QuoteNode
                  :parentindex
                )))),
          (:line, 147, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:call, :parent, :A), (:., :index, (:quote, #QuoteNode
                    :parentindex
                  ))), :val)),
          (:line, 148, :none),
          :val
        ))),
    (:line, 151, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :_unsafe_setindex!, (:(::), :A, :ReshapedArray), :val, (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 152, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:call, :parent, :A), (:..., (:call, :ind2sub_rs, (:., :A, (:quote, #QuoteNode
                        :mi
                      )), (:call, :sub2ind, (:call, :size, :A), (:..., :indexes))))), :val)),
          (:line, 153, :none),
          :val
        ))),
    (:line, 155, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :_unsafe_setindex!, (:(::), :A, :ReshapedArrayLF), :val, (:..., (:(::), :indexes, :Int))), (:block,
          (:line, 156, :none),
          (:macrocall, Symbol("@inbounds"), (:(=), (:ref, (:call, :parent, :A), (:call, :sub2ind, (:call, :size, :A), (:..., :indexes))), :val)),
          (:line, 157, :none),
          :val
        ))),
    (:line, 161, :none),
    (:typealias, (:curly, :ReshapedRange, :T, :N, (:<:, :A, :Range)), (:curly, :ReshapedArray, :T, :N, :A, (:curly, :Tuple))),
    (:line, 162, :none),
    (:(=), (:call, :setindex!, (:(::), :A, :ReshapedRange), :val, (:(::), :index, :Int)), (:block,
        (:line, 162, :none),
        (:call, :_rs_setindex!_err)
      )),
    (:line, 163, :none),
    (:(=), (:call, :setindex!, (:(::), :A, :ReshapedRange), :val, (:..., (:(::), :indexes, :Int))), (:block,
        (:line, 163, :none),
        (:call, :_rs_setindex!_err)
      )),
    (:line, 164, :none),
    (:(=), (:call, :setindex!, (:(::), :A, :ReshapedRange), :val, (:(::), :index, :ReshapedIndex)), (:block,
        (:line, 164, :none),
        (:call, :_rs_setindex!_err)
      )),
    (:line, 166, :none),
    (:(=), (:call, :_rs_setindex!_err), (:block,
        (:line, 166, :none),
        (:call, :error, "indexed assignment fails for a reshaped range; consider calling collect")
      )),
    (:line, 168, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :a, (:curly, :ReshapedArray, :T))), (:block,
        (:line, 168, :none),
        (:call, :unsafe_convert, (:curly, :Ptr, :T), (:call, :parent, :a))
      ))
  ))