(:quote, (:block,
    (:line, 5, :none),
    (:toplevel, (:import, :Core, :Intrinsics, :cglobal), (:import, :Core, :Intrinsics, :box)),
    (:line, 7, :none),
    (:(=), (:call, :cfunction, (:(::), :f, :Function), :r, :a), (:block,
        (:line, 7, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_function_ptr
          ), (:curly, :Ptr, :Void), (:tuple, :Any, :Any, :Any), :f, :r, :a)
      )),
    (:line, 9, :none),
    "    Ptr{T}\n\nA memory address referring to data of type `T`.  However, there is no guarantee that the\nmemory is actually valid, or that it actually represents data of the specified type.\n",
    (:line, 15, :none),
    :Ptr,
    (:line, 17, :none),
    "    Ref{T}\n\nAn object that safely references data of type `T`. This type is guaranteed to point to\nvalid, Julia-allocated memory of the correct type. The underlying data is protected from\nfreeing by the garbage collector as long as the `Ref` itself is referenced.\n\nWhen passed as a `ccall` argument (either as a `Ptr` or `Ref` type), a `Ref` object will be\nconverted to a native pointer to the data it references.\n\nThere is no invalid (NULL) `Ref`.\n",
    (:line, 29, :none),
    :Ref,
    (:line, 31, :none),
    (:if, (:ccall, (:quote, #QuoteNode
          :jl_is_char_signed
        ), (:curly, :Ref, :Bool), (:tuple,)), (:block,
        (:line, 32, :none),
        (:typealias, :Cchar, :Int8)
      ), (:block,
        (:line, 34, :none),
        (:typealias, :Cchar, :UInt8)
      )),
    (:line, 36, :none),
    "    Cchar\n\nEquivalent to the native `char` c-type.\n",
    (:line, 41, :none),
    :Cchar,
    (:line, 43, :none),
    "    Cuchar\n\nEquivalent to the native `unsigned char` c-type (`UInt8`).\n",
    (:line, 48, :none),
    (:typealias, :Cuchar, :UInt8),
    (:line, 49, :none),
    "    Cshort\n\nEquivalent to the native `signed short` c-type (`Int16`).\n",
    (:line, 54, :none),
    (:typealias, :Cshort, :Int16),
    (:line, 55, :none),
    "    Cushort\n\nEquivalent to the native `unsigned short` c-type (`UInt16`).\n",
    (:line, 60, :none),
    (:typealias, :Cushort, :UInt16),
    (:line, 61, :none),
    "    Cint\n\nEquivalent to the native `signed int` c-type (`Int32`).\n",
    (:line, 66, :none),
    (:typealias, :Cint, :Int32),
    (:line, 67, :none),
    "    Cuint\n\nEquivalent to the native `unsigned int` c-type (`UInt32`).\n",
    (:line, 72, :none),
    (:typealias, :Cuint, :UInt32),
    (:line, 73, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 74, :none),
        (:typealias, :Clong, :Int32),
        (:line, 75, :none),
        (:typealias, :Culong, :UInt32),
        (:line, 76, :none),
        (:typealias, :Cwchar_t, :UInt16)
      ), (:block,
        (:line, 78, :none),
        (:typealias, :Clong, :Int),
        (:line, 79, :none),
        (:typealias, :Culong, :UInt),
        (:line, 80, :none),
        (:typealias, :Cwchar_t, :Int32)
      )),
    (:line, 82, :none),
    "    Clong\n\nEquivalent to the native `signed long` c-type.\n",
    (:line, 87, :none),
    :Clong,
    (:line, 88, :none),
    "    Culong\n\nEquivalent to the native `unsigned long` c-type.\n",
    (:line, 93, :none),
    :Culong,
    (:line, 94, :none),
    "    Cwchar_t\n\nEquivalent to the native `wchar_t` c-type (`Int32`).\n",
    (:line, 99, :none),
    :Cwchar_t,
    (:line, 101, :none),
    "    Cptrdiff_t\n\nEquivalent to the native `ptrdiff_t` c-type (`Int`).\n",
    (:line, 106, :none),
    (:typealias, :Cptrdiff_t, :Int),
    (:line, 107, :none),
    "    Csize_t\n\nEquivalent to the native `size_t` c-type (`UInt`).\n",
    (:line, 112, :none),
    (:typealias, :Csize_t, :UInt),
    (:line, 113, :none),
    "    Cssize_t\n\nEquivalent to the native `ssize_t` c-type.\n",
    (:line, 118, :none),
    (:typealias, :Cssize_t, :Int),
    (:line, 119, :none),
    "    Cintmax_t\n\nEquivalent to the native `intmax_t` c-type (`Int64`).\n",
    (:line, 124, :none),
    (:typealias, :Cintmax_t, :Int64),
    (:line, 125, :none),
    "    Cuintmax_t\n\nEquivalent to the native `uintmax_t` c-type (`UInt64`).\n",
    (:line, 130, :none),
    (:typealias, :Cuintmax_t, :UInt64),
    (:line, 131, :none),
    "    Clonglong\n\nEquivalent to the native `signed long long` c-type (`Int64`).\n",
    (:line, 136, :none),
    (:typealias, :Clonglong, :Int64),
    (:line, 137, :none),
    "    Culonglong\n\nEquivalent to the native `unsigned long long` c-type (`UInt64`).\n",
    (:line, 142, :none),
    (:typealias, :Culonglong, :UInt64),
    (:line, 143, :none),
    "    Cfloat\n\nEquivalent to the native `float` c-type (`Float32`).\n",
    (:line, 148, :none),
    (:typealias, :Cfloat, :Float32),
    (:line, 149, :none),
    "    Cdouble\n\nEquivalent to the native `double` c-type (`Float64`).\n",
    (:line, 154, :none),
    (:typealias, :Cdouble, :Float64),
    (:line, 156, :none),
    (:if, (:call, :!, (:call, :is_windows)), (:block,
        (:line, 157, :none),
        (:const, (:(=), :sizeof_mode_t, (:ccall, (:quote, #QuoteNode
                :jl_sizeof_mode_t
              ), :Cint, (:tuple,)))),
        (:line, 158, :none),
        (:if, (:call, :(==), :sizeof_mode_t, 2), (:block,
            (:line, 159, :none),
            (:typealias, :Cmode_t, :Int16)
          ), (:block,
            (:line, 160, :none),
            (:if, (:call, :(==), :sizeof_mode_t, 4), (:block,
                (:line, 161, :none),
                (:typealias, :Cmode_t, :Int32)
              ), (:block,
                (:line, 162, :none),
                (:if, (:call, :(==), :sizeof_mode_t, 8), (:block,
                    (:line, 163, :none),
                    (:typealias, :Cmode_t, :Int64)
                  ))
              ))
          ))
      )),
    (:line, 168, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Int8, :UInt8))), (:(::), (:curly, :Type, :Cstring)), (:(::), :p, (:curly, :Ptr, :T))), (:block,
        (:line, 168, :none),
        (:call, :box, :Cstring, :p)
      )),
    (:line, 169, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Cwstring)), (:(::), :p, (:curly, :Ptr, :Cwchar_t))), (:block,
        (:line, 169, :none),
        (:call, :box, :Cwstring, :p)
      )),
    (:line, 170, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Int8, :UInt8))), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), (:(::), :p, :Cstring)), (:block,
        (:line, 170, :none),
        (:call, :box, (:curly, :Ptr, :T), :p)
      )),
    (:line, 171, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, (:curly, :Ptr, :Cwchar_t))), (:(::), :p, :Cwstring)), (:block,
        (:line, 171, :none),
        (:call, :box, (:curly, :Ptr, :Cwchar_t), :p)
      )),
    (:line, 174, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Union, :Cstring, :Cwstring))), (:(::), (:curly, :Type, :T)), (:(::), :p, (:curly, :Ptr, :Void))), (:block,
        (:line, 174, :none),
        (:call, :box, :T, :p)
      )),
    (:line, 176, :none),
    (:(=), (:call, :pointer, (:(::), :p, :Cstring)), (:block,
        (:line, 176, :none),
        (:call, :convert, (:curly, :Ptr, :UInt8), :p)
      )),
    (:line, 177, :none),
    (:(=), (:call, :pointer, (:(::), :p, :Cwstring)), (:block,
        (:line, 177, :none),
        (:call, :convert, (:curly, :Ptr, :Cwchar_t), :p)
      )),
    (:line, 180, :none),
    (:(=), (:call, :(==), (:(::), :x, (:curly, :Union, :Cstring, :Cwstring)), (:(::), :y, :Ptr)), (:block,
        (:line, 180, :none),
        (:call, :(==), (:call, :pointer, :x), :y)
      )),
    (:line, 181, :none),
    (:(=), (:call, :(==), (:(::), :x, :Ptr), (:(::), :y, (:curly, :Union, :Cstring, :Cwstring))), (:block,
        (:line, 181, :none),
        (:call, :(==), :x, (:call, :pointer, :y))
      )),
    (:line, 184, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, :Cstring), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 184, :none),
        (:call, :unsafe_wrap, :String, (:call, :convert, (:curly, :Ptr, :UInt8), :p), :own)
      )),
    (:line, 185, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, :Cstring), (:(::), :len, :Integer), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 185, :none),
        (:call, :unsafe_wrap, :String, (:call, :convert, (:curly, :Ptr, :UInt8), :p), :len, :own)
      )),
    (:line, 187, :none),
    (:(=), (:call, :unsafe_string, (:(::), :s, :Cstring)), (:block,
        (:line, 187, :none),
        (:call, :unsafe_string, (:call, :convert, (:curly, :Ptr, :UInt8), :s))
      )),
    (:line, 190, :none),
    (:(=), (:call, :cconvert, (:(::), (:curly, :Type, :Cstring)), (:(::), :s, :String)), (:block,
        (:line, 190, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_array_cconvert_cstring
          ), (:curly, :Ref, (:curly, :Vector, :UInt8)), (:tuple, (:curly, :Vector, :UInt8)), (:., :s, (:quote, #QuoteNode
              :data
            )))
      )),
    (:line, 193, :none),
    (:(=), (:call, :cconvert, (:(::), (:curly, :Type, :Cstring)), (:(::), :s, :AbstractString)), (:block,
        (:line, 193, :none),
        (:call, :cconvert, :Cstring, (:(::), (:call, :String, :s), :String))
      )),
    (:line, 196, :none),
    (:function, (:call, :cconvert, (:(::), (:curly, :Type, :Cwstring)), (:(::), :s, :AbstractString)), (:block,
        (:line, 197, :none),
        (:(=), :v, (:call, :transcode, :Cwchar_t, (:., (:call, :String, :s), (:quote, #QuoteNode
                :data
              )))),
        (:line, 198, :none),
        (:||, (:&&, (:call, :!, (:call, :isempty, :v)), (:call, :(==), (:ref, :v, :end), 0)), (:call, :push!, :v, 0)),
        (:line, 199, :none),
        (:return, :v)
      )),
    (:line, 202, :none),
    (:(=), (:call, :eltype, (:(::), (:curly, :Type, :Cstring))), (:block,
        (:line, 202, :none),
        :UInt8
      )),
    (:line, 203, :none),
    (:(=), (:call, :eltype, (:(::), (:curly, :Type, :Cwstring))), (:block,
        (:line, 203, :none),
        :Cwchar_t
      )),
    (:line, 205, :none),
    (:(=), (:call, :containsnul, (:(::), :p, :Ptr), :len), (:block,
        (:line, 205, :none),
        (:call, :(!=), :C_NULL, (:ccall, (:quote, #QuoteNode
              :memchr
            ), (:curly, :Ptr, :Cchar), (:tuple, (:curly, :Ptr, :Cchar), :Cint, :Csize_t), :p, 0, :len))
      )),
    (:line, 207, :none),
    (:(=), (:call, :containsnul, (:(::), :s, :String)), (:block,
        (:line, 207, :none),
        (:call, :containsnul, (:call, :unsafe_convert, (:curly, :Ptr, :Cchar), :s), (:call, :sizeof, :s))
      )),
    (:line, 208, :none),
    (:(=), (:call, :containsnul, (:(::), :s, :AbstractString)), (:block,
        (:line, 208, :none),
        (:call, :in, '\0', :s)
      )),
    (:line, 210, :none),
    (:function, (:call, :unsafe_convert, (:(::), (:curly, :Type, :Cstring)), (:(::), :s, (:curly, :Vector, :UInt8))), (:block,
        (:line, 211, :none),
        (:(=), :p, (:call, :unsafe_convert, (:curly, :Ptr, :Cchar), :s)),
        (:line, 212, :none),
        (:&&, (:call, :containsnul, :p, (:call, :sizeof, :s)), (:call, :throw, (:call, :ArgumentError, (:string, "embedded NULs are not allowed in C strings: ", (:call, :repr, :s))))),
        (:line, 214, :none),
        (:return, (:call, :Cstring, :p))
      )),
    (:line, 217, :none),
    (:function, (:call, :unsafe_convert, (:(::), (:curly, :Type, :Cwstring)), (:(::), :v, (:curly, :Vector, :Cwchar_t))), (:block,
        (:line, 218, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :-, (:call, :length, :v), 1))), (:block,
            (:line, 219, :none),
            (:&&, (:call, :(==), (:ref, :v, :i), 0), (:call, :throw, (:call, :ArgumentError, (:string, "embedded NULs are not allowed in C strings: ", (:call, :repr, :v)))))
          )),
        (:line, 222, :none),
        (:||, (:call, :(==), (:ref, :v, :end), 0), (:call, :throw, (:call, :ArgumentError, (:string, "C string data must be NUL terminated: ", (:call, :repr, :v))))),
        (:line, 224, :none),
        (:(=), :p, (:call, :unsafe_convert, (:curly, :Ptr, :Cwchar_t), :v)),
        (:line, 225, :none),
        (:return, (:call, :Cwstring, :p))
      )),
    (:line, 229, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Cstring)), (:(::), :s, :Symbol)), (:block,
        (:line, 229, :none),
        (:call, :Cstring, (:call, :unsafe_convert, (:curly, :Ptr, :Cchar), :s))
      )),
    (:line, 231, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 232, :none),
        "    Base.cwstring(s)\n\nConverts a string `s` to a NUL-terminated `Vector{Cwchar_t}`, suitable for passing to C\nfunctions expecting a `Ptr{Cwchar_t}`. The main advantage of using this over the implicit\nconversion provided by `Cwstring` is if the function is called multiple times with the\nsame argument.\n\nThis is only available on Windows.\n",
        (:line, 242, :none),
        (:function, (:call, :cwstring, (:(::), :s, :AbstractString)), (:block,
            (:line, 243, :none),
            (:(=), :bytes, (:., (:call, :String, :s), (:quote, #QuoteNode
                  :data
                ))),
            (:line, 244, :none),
            (:&&, (:call, :in, 0, :bytes), (:call, :throw, (:call, :ArgumentError, (:string, "embedded NULs are not allowed in C strings: ", (:call, :repr, :s))))),
            (:line, 245, :none),
            (:return, (:call, :push!, (:call, :transcode, :UInt16, :bytes), 0))
          ))
      )),
    (:line, 252, :none),
    "    transcode(T, src)\n\nConvert string data between Unicode encodings. `src` is either a\n`String` or a `Vector{UIntXX}` of UTF-XX code units, where\n`XX` is 8, 16, or 32. `T` indicates the encoding of the return value:\n`String` to return a (UTF-8 encoded) `String` or `UIntXX`\nto return a `Vector{UIntXX}` of UTF-`XX` data.   (The alias `Cwchar_t`\ncan also be used as the integer type, for converting `wchar_t*` strings\nused by external C libraries.)\n\nThe `transcode` function succeeds as long as the input data can be\nreasonably represented in the target encoding; it always succeeds for\nconversions between UTF-XX encodings, even for invalid Unicode data.\n\nOnly conversion to/from UTF-8 is currently supported.\n",
    (:line, 269, :none),
    (:function, :transcode),
    (:line, 271, :none),
    (:(=), (:call, (:curly, :transcode, (:<:, :T, (:curly, :Union, :UInt8, :UInt16, :UInt32, :Int32))), (:(::), (:curly, :Type, :T)), (:(::), :src, (:curly, :Vector, :T))), (:block,
        (:line, 271, :none),
        :src
      )),
    (:line, 272, :none),
    (:(=), (:call, (:curly, :transcode, (:<:, :T, (:curly, :Union, :Int32, :UInt32))), (:(::), (:curly, :Type, :T)), (:(::), :src, :String)), (:block,
        (:line, 272, :none),
        (:typed_comprehension, :T, (:generator, (:call, :T, :c), (:(=), :c, :src)))
      )),
    (:line, 273, :none),
    (:(=), (:call, (:curly, :transcode, (:<:, :T, (:curly, :Union, :Int32, :UInt32))), (:(::), (:curly, :Type, :T)), (:(::), :src, (:curly, :Vector, :UInt8))), (:block,
        (:line, 273, :none),
        (:call, :transcode, :T, (:call, :String, :src))
      )),
    (:line, 274, :none),
    (:function, (:call, (:curly, :transcode, (:<:, :S, (:curly, :Union, :Int32, :UInt32))), (:(::), (:curly, :Type, :UInt8)), (:(::), :src, (:curly, :Vector, :S))), (:block,
        (:line, 275, :none),
        (:(=), :buf, (:call, :IOBuffer)),
        (:line, 276, :none),
        (:for, (:(=), :c, :src), (:block,
            (:line, 276, :none),
            (:call, :print, :buf, (:call, :Char, :c))
          )),
        (:line, 277, :none),
        (:call, :takebuf_array, :buf)
      )),
    (:line, 279, :none),
    (:(=), (:call, :transcode, (:(::), (:curly, :Type, :String)), (:(::), :src, :String)), (:block,
        (:line, 279, :none),
        :src
      )),
    (:line, 280, :none),
    (:(=), (:call, :transcode, :T, (:(::), :src, :String)), (:block,
        (:line, 280, :none),
        (:call, :transcode, :T, (:., :src, (:quote, #QuoteNode
              :data
            )))
      )),
    (:line, 281, :none),
    (:(=), (:call, :transcode, (:(::), (:curly, :Type, :String)), :src), (:block,
        (:line, 281, :none),
        (:call, :String, (:call, :transcode, :UInt8, :src))
      )),
    (:line, 283, :none),
    (:function, (:call, :transcode, (:(::), (:curly, :Type, :UInt16)), (:(::), :src, (:curly, :Vector, :UInt8))), (:block,
        (:line, 284, :none),
        (:(=), :dst, (:ref, :UInt16)),
        (:line, 285, :none),
        (:(=), (:tuple, :i, :n), (:tuple, 1, (:call, :length, :src))),
        (:line, 286, :none),
        (:||, (:call, :>, :n, 0), (:return, :dst)),
        (:line, 287, :none),
        (:call, :sizehint!, :dst, (:call, :*, 2, :n)),
        (:line, 288, :none),
        (:(=), :a, (:ref, :src, 1)),
        (:line, 289, :none),
        (:while, true, (:block,
            (:line, 290, :none),
            (:if, (:&&, (:call, :<, :i, :n), (:comparison, -64, :(<=), (:call, :%, :a, :Int8), :(<=), -12)), (:block,
                (:line, 291, :none),
                (:(=), :b, (:ref, :src, (:+=, :i, 1))),
                (:line, 292, :none),
                (:if, (:||, (:call, :(<=), -64, (:call, :%, :b, :Int8)), (:&&, (:call, :(==), :a, 0xf4), (:call, :<, 0x8f, :b))), (:block,
                    (:line, 294, :none),
                    (:call, :push!, :dst, :a),
                    (:line, 295, :none),
                    (:(=), :a, :b),
                    (:line, 295, :none),
                    (:continue,)
                  ), (:block,
                    (:line, 296, :none),
                    (:if, (:call, :<, :a, 0xe0), (:block,
                        (:line, 297, :none),
                        (:call, :push!, :dst, (:call, :$, (:call, :$, 0x3080, (:call, :<<, (:call, :UInt16, :a), 6)), :b))
                      ), (:block,
                        (:line, 298, :none),
                        (:if, (:call, :<, :i, :n), (:block,
                            (:line, 299, :none),
                            (:(=), :c, (:ref, :src, (:+=, :i, 1))),
                            (:line, 300, :none),
                            (:if, (:call, :(<=), -64, (:call, :%, :c, :Int8)), (:block,
                                (:line, 301, :none),
                                (:call, :push!, :dst, :a, :b),
                                (:line, 302, :none),
                                (:(=), :a, :c),
                                (:line, 302, :none),
                                (:continue,)
                              ), (:block,
                                (:line, 303, :none),
                                (:if, (:call, :<, :a, 0xf0), (:block,
                                    (:line, 304, :none),
                                    (:call, :push!, :dst, (:call, :$, (:call, :$, (:call, :$, 0x2080, (:call, :<<, (:call, :UInt16, :a), 12)), (:call, :<<, (:call, :UInt16, :b), 6)), :c))
                                  ), (:block,
                                    (:line, 305, :none),
                                    (:if, (:call, :<, :i, :n), (:block,
                                        (:line, 306, :none),
                                        (:(=), :d, (:ref, :src, (:+=, :i, 1))),
                                        (:line, 307, :none),
                                        (:if, (:call, :(<=), -64, (:call, :%, :d, :Int8)), (:block,
                                            (:line, 308, :none),
                                            (:call, :push!, :dst, :a, :b, :c),
                                            (:line, 309, :none),
                                            (:(=), :a, :d),
                                            (:line, 309, :none),
                                            (:continue,)
                                          ), (:block,
                                            (:line, 310, :none),
                                            (:if, (:&&, (:call, :(==), :a, 0xf0), (:call, :<, :b, 0x90)), (:block,
                                                (:line, 311, :none),
                                                (:call, :push!, :dst, (:call, :$, (:call, :$, (:call, :$, 0x2080, (:call, :<<, (:call, :UInt16, :b), 12)), (:call, :<<, (:call, :UInt16, :c), 6)), :d))
                                              ), (:block,
                                                (:line, 313, :none),
                                                (:call, :push!, :dst, (:call, :+, 0xe5b8, (:call, :<<, (:call, :UInt16, :a), 8), (:call, :<<, (:call, :UInt16, :b), 2), (:call, :>>, :c, 4)), (:call, :$, (:call, :$, 0xdc80, (:call, :<<, (:call, :UInt16, (:call, :&, :c, 0x0f)), 6)), :d))
                                              ))
                                          ))
                                      ), (:block,
                                        (:line, 317, :none),
                                        (:call, :push!, :dst, :a, :b, :c),
                                        (:line, 318, :none),
                                        (:break,)
                                      ))
                                  ))
                              ))
                          ), (:block,
                            (:line, 321, :none),
                            (:call, :push!, :dst, :a, :b),
                            (:line, 322, :none),
                            (:break,)
                          ))
                      ))
                  ))
              ), (:block,
                (:line, 325, :none),
                (:call, :push!, :dst, :a)
              )),
            (:line, 327, :none),
            (:||, (:call, :<, :i, :n), (:break,)),
            (:line, 328, :none),
            (:(=), :a, (:ref, :src, (:+=, :i, 1)))
          )),
        (:line, 330, :none),
        (:return, :dst)
      )),
    (:line, 333, :none),
    (:function, (:call, :transcode, (:(::), (:curly, :Type, :UInt8)), (:(::), :src, (:curly, :Vector, :UInt16))), (:block,
        (:line, 334, :none),
        (:(=), :n, (:call, :length, :src)),
        (:line, 335, :none),
        (:&&, (:call, :(==), :n, 0), (:return, (:ref, :UInt8))),
        (:line, 343, :none),
        (:(=), :a, (:ref, :src, 1)),
        (:line, 344, :none),
        (:(=), (:tuple, :i, :m), (:tuple, 1, 0)),
        (:line, 345, :none),
        (:while, true, (:block,
            (:line, 346, :none),
            (:if, (:call, :<, :a, 0x80), (:block,
                (:line, 347, :none),
                (:+=, :m, 1)
              ), (:block,
                (:line, 348, :none),
                (:if, (:call, :<, :a, 0x0800), (:block,
                    (:line, 349, :none),
                    (:+=, :m, 2)
                  ), (:block,
                    (:line, 350, :none),
                    (:if, (:&&, (:call, :(==), (:call, :&, :a, 0xfc00), 0xd800), (:call, :<, :i, (:call, :length, :src))), (:block,
                        (:line, 351, :none),
                        (:(=), :b, (:ref, :src, (:+=, :i, 1))),
                        (:line, 352, :none),
                        (:if, (:call, :(==), (:call, :&, :b, 0xfc00), 0xdc00), (:block,
                            (:line, 353, :none),
                            (:+=, :m, 4)
                          ), (:block,
                            (:line, 355, :none),
                            (:+=, :m, 3),
                            (:line, 356, :none),
                            (:(=), :a, :b),
                            (:line, 356, :none),
                            (:continue,)
                          ))
                      ), (:block,
                        (:line, 361, :none),
                        (:+=, :m, 3)
                      ))
                  ))
              )),
            (:line, 363, :none),
            (:||, (:call, :<, :i, :n), (:break,)),
            (:line, 364, :none),
            (:(=), :a, (:ref, :src, (:+=, :i, 1)))
          )),
        (:line, 367, :none),
        (:(=), :dst, (:call, (:curly, :Array, :UInt8), :m)),
        (:line, 368, :none),
        (:(=), :a, (:ref, :src, 1)),
        (:line, 369, :none),
        (:(=), (:tuple, :i, :j), (:tuple, 1, 0)),
        (:line, 370, :none),
        (:while, true, (:block,
            (:line, 371, :none),
            (:if, (:call, :<, :a, 0x80), (:block,
                (:line, 372, :none),
                (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :%, :a, :UInt8))
              ), (:block,
                (:line, 373, :none),
                (:if, (:call, :<, :a, 0x0800), (:block,
                    (:line, 374, :none),
                    (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0xc0, (:call, :%, (:call, :>>, :a, 6), :UInt8))),
                    (:line, 375, :none),
                    (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, :a, :UInt8), 0x3f)))
                  ), (:block,
                    (:line, 376, :none),
                    (:if, (:&&, (:call, :(==), (:call, :&, :a, 0xfc00), 0xd800), (:call, :<, :i, :n)), (:block,
                        (:line, 377, :none),
                        (:(=), :b, (:ref, :src, (:+=, :i, 1))),
                        (:line, 378, :none),
                        (:if, (:call, :(==), (:call, :&, :b, 0xfc00), 0xdc00), (:block,
                            (:line, 380, :none),
                            (:+=, :a, 0x2840),
                            (:line, 381, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0xf0, (:call, :%, (:call, :>>, :a, 8), :UInt8))),
                            (:line, 382, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :>>, (:call, :%, :a, :UInt8), 2))),
                            (:line, 383, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :$, 0xf0, (:call, :$, (:call, :&, (:call, :<<, (:call, :%, :a, :UInt8), 4), 0x3f), (:call, :%, (:call, :>>, :b, 6), :UInt8)))),
                            (:line, 384, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, :b, :UInt8), 0x3f)))
                          ), (:block,
                            (:line, 386, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0xe0, (:call, :%, (:call, :>>, :a, 12), :UInt8))),
                            (:line, 387, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, (:call, :>>, :a, 6), :UInt8), 0x3f))),
                            (:line, 388, :none),
                            (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, :a, :UInt8), 0x3f))),
                            (:line, 389, :none),
                            (:(=), :a, :b),
                            (:line, 389, :none),
                            (:continue,)
                          ))
                      ), (:block,
                        (:line, 394, :none),
                        (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0xe0, (:call, :%, (:call, :>>, :a, 12), :UInt8))),
                        (:line, 395, :none),
                        (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, (:call, :>>, :a, 6), :UInt8), 0x3f))),
                        (:line, 396, :none),
                        (:(=), (:ref, :dst, (:+=, :j, 1)), (:call, :|, 0x80, (:call, :&, (:call, :%, :a, :UInt8), 0x3f)))
                      ))
                  ))
              )),
            (:line, 398, :none),
            (:||, (:call, :<, :i, :n), (:break,)),
            (:line, 399, :none),
            (:(=), :a, (:ref, :src, (:+=, :i, 1)))
          )),
        (:line, 401, :none),
        (:return, :dst)
      )),
    (:line, 411, :none),
    (:(=), (:call, :sigatomic_begin), (:block,
        (:line, 411, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_sigatomic_begin
          ), :Void, (:tuple,))
      )),
    (:line, 412, :none),
    (:(=), (:call, :sigatomic_end), (:block,
        (:line, 412, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_sigatomic_end
          ), :Void, (:tuple,))
      )),
    (:line, 414, :none),
    "    disable_sigint(f::Function)\n\nDisable Ctrl-C handler during execution of a function on the current task,\nfor calling external code that may call julia code that is not interrupt safe.\nIntended to be called using `do` block syntax as follows:\n\n    disable_sigint() do\n        # interrupt-unsafe code\n        ...\n    end\n\nThis is not needed on worker threads (`Threads.threadid() != 1`) since the\n`InterruptException` will only be delivered to the master thread.\nExternal functions that do not call julia code or julia runtime\nautomatically disable sigint during their execution.\n",
    (:line, 431, :none),
    (:function, (:call, :disable_sigint, (:(::), :f, :Function)), (:block,
        (:line, 432, :none),
        (:call, :sigatomic_begin),
        (:line, 433, :none),
        (:(=), :res, (:call, :f)),
        (:line, 435, :none),
        (:call, :sigatomic_end),
        (:line, 436, :none),
        :res
      )),
    (:line, 439, :none),
    "    reenable_sigint(f::Function)\n\nRe-enable Ctrl-C handler during execution of a function.\nTemporarily reverses the effect of `disable_sigint`.\n",
    (:line, 445, :none),
    (:function, (:call, :reenable_sigint, (:(::), :f, :Function)), (:block,
        (:line, 446, :none),
        (:call, :sigatomic_end),
        (:line, 447, :none),
        (:(=), :res, (:call, :f)),
        (:line, 449, :none),
        (:call, :sigatomic_begin),
        (:line, 450, :none),
        :res
      )),
    (:line, 453, :none),
    (:function, (:call, :ccallable, (:(::), :f, :Function), (:(::), :rt, :Type), (:(::), :argt, :Type), (:kw, (:(::), :name, (:curly, :Union, :AbstractString, :Symbol)), (:call, :string, :f))), (:block,
        (:line, 454, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_extern_c
          ), :Void, (:tuple, :Any, :Any, :Any, :Cstring), :f, :rt, :argt, :name)
      )),
    (:line, 457, :none),
    (:macro, (:call, :ccallable, :rt, :def), (:block,
        (:line, 458, :none),
        (:if, (:&&, (:call, :isa, :def, :Expr), (:||, (:call, :(===), (:., :def, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :(=)
                )), (:call, :(===), (:., :def, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :function
                )))), (:block,
            (:line, 459, :none),
            (:(=), :sig, (:ref, (:., :def, (:quote, #QuoteNode
                    :args
                  )), 1)),
            (:line, 460, :none),
            (:if, (:call, :(===), (:., :sig, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :call
                )), (:block,
                (:line, 461, :none),
                (:(=), :name, (:ref, (:., :sig, (:quote, #QuoteNode
                        :args
                      )), 1)),
                (:line, 462, :none),
                (:(=), :at, (:call, :map, (:->, (:tuple, :a), (:block,
                        (:line, 463, :none),
                        (:if, (:&&, (:call, :isa, :a, :Expr), (:call, :(===), (:., :a, (:quote, #QuoteNode
                                  :head
                                )), (:quote, #QuoteNode
                                :(::)
                              ))), (:block,
                            (:line, 464, :none),
                            (:ref, (:., :a, (:quote, #QuoteNode
                                  :args
                                )), 2)
                          ), (:block,
                            (:line, 466, :none),
                            (:quote, #QuoteNode
                              :Any
                            )
                          ))
                      )), (:ref, (:., :sig, (:quote, #QuoteNode
                          :args
                        )), (:(:), 2, :end)))),
                (:line, 469, :none),
                (:return, (:quote, (:block,
                      (:line, 470, :none),
                      (:$, (:call, :esc, :def)),
                      (:line, 471, :none),
                      (:call, :ccallable, (:$, (:call, :esc, :name)), (:$, (:call, :esc, :rt)), (:$, (:call, :Expr, (:quote, #QuoteNode
                              :curly
                            ), (:quote, #QuoteNode
                              :Tuple
                            ), (:..., (:call, :map, :esc, :at)))), (:$, (:call, :string, :name)))
                    )))
              ))
          )),
        (:line, 475, :none),
        (:call, :error, "expected method definition in @ccallable")
      ))
  ))