(:quote, (:block,
    (:line, 5, :none),
    (:function, (:call, (:curly, :gcd, (:<:, :T, :Integer)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 6, :none),
        (:while, (:call, :(!=), :b, 0), (:block,
            (:line, 7, :none),
            (:(=), :t, :b),
            (:line, 8, :none),
            (:(=), :b, (:call, :rem, :a, :b)),
            (:line, 9, :none),
            (:(=), :a, :t)
          )),
        (:line, 11, :none),
        (:call, :checked_abs, :a)
      )),
    (:line, 16, :none),
    (:function, (:call, (:curly, :gcd, (:<:, :T, (:curly, :Union, :Int64, :UInt64, :Int128, :UInt128))), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 17, :none),
        (:&&, (:call, :(==), :a, 0), (:return, (:call, :abs, :b))),
        (:line, 18, :none),
        (:&&, (:call, :(==), :b, 0), (:return, (:call, :abs, :a))),
        (:line, 19, :none),
        (:(=), :za, (:call, :trailing_zeros, :a)),
        (:line, 20, :none),
        (:(=), :zb, (:call, :trailing_zeros, :b)),
        (:line, 21, :none),
        (:(=), :k, (:call, :min, :za, :zb)),
        (:line, 22, :none),
        (:(=), :u, (:call, :unsigned, (:call, :abs, (:call, :>>, :a, :za)))),
        (:line, 23, :none),
        (:(=), :v, (:call, :unsigned, (:call, :abs, (:call, :>>, :b, :zb)))),
        (:line, 24, :none),
        (:while, (:call, :(!=), :u, :v), (:block,
            (:line, 25, :none),
            (:if, (:call, :>, :u, :v), (:block,
                (:line, 26, :none),
                (:(=), (:tuple, :u, :v), (:tuple, :v, :u))
              )),
            (:line, 28, :none),
            (:-=, :v, :u),
            (:line, 29, :none),
            (:>>=, :v, (:call, :trailing_zeros, :v))
          )),
        (:line, 31, :none),
        (:(=), :r, (:call, :<<, :u, :k)),
        (:line, 33, :none),
        (:&&, (:call, :>, :r, (:call, :typemax, :T)), (:call, :throw, (:call, :OverflowError))),
        (:line, 34, :none),
        (:call, :%, :r, :T)
      )),
    (:line, 38, :none),
    (:(=), (:call, (:curly, :lcm, (:<:, :T, :Integer)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 38, :none),
        (:if, (:call, :(==), :a, 0), :a, (:call, :checked_abs, (:call, :*, :a, (:call, :div, :b, (:call, :gcd, :b, :a)))))
      )),
    (:line, 40, :none),
    (:(=), (:call, :gcd, (:(::), :a, :Integer)), (:block,
        (:line, 40, :none),
        :a
      )),
    (:line, 41, :none),
    (:(=), (:call, :lcm, (:(::), :a, :Integer)), (:block,
        (:line, 41, :none),
        :a
      )),
    (:line, 42, :none),
    (:(=), (:call, :gcd, (:(::), :a, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 42, :none),
        (:call, :gcd, (:..., (:call, :promote, :a, :b)))
      )),
    (:line, 43, :none),
    (:(=), (:call, :lcm, (:(::), :a, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 43, :none),
        (:call, :lcm, (:..., (:call, :promote, :a, :b)))
      )),
    (:line, 44, :none),
    (:(=), (:call, :gcd, (:(::), :a, :Integer), (:..., (:(::), :b, :Integer))), (:block,
        (:line, 44, :none),
        (:call, :gcd, :a, (:call, :gcd, (:..., :b)))
      )),
    (:line, 45, :none),
    (:(=), (:call, :lcm, (:(::), :a, :Integer), (:..., (:(::), :b, :Integer))), (:block,
        (:line, 45, :none),
        (:call, :lcm, :a, (:call, :lcm, (:..., :b)))
      )),
    (:line, 47, :none),
    (:(=), (:call, (:curly, :gcd, (:<:, :T, :Integer)), (:(::), :abc, (:curly, :AbstractArray, :T))), (:block,
        (:line, 47, :none),
        (:call, :reduce, :gcd, :abc)
      )),
    (:line, 48, :none),
    (:(=), (:call, (:curly, :lcm, (:<:, :T, :Integer)), (:(::), :abc, (:curly, :AbstractArray, :T))), (:block,
        (:line, 48, :none),
        (:call, :reduce, :lcm, :abc)
      )),
    (:line, 51, :none),
    "    gcdx(x,y)\n\nComputes the greatest common (positive) divisor of `x` and `y` and their Bézout\ncoefficients, i.e. the integer coefficients `u` and `v` that satisfy\n``ux+vy = d = gcd(x,y)``. ``gcdx(x,y)`` returns ``(d,u,v)``.\n\n```jldoctest\njulia> gcdx(12, 42)\n(6,-3,1)\n```\n\n```jldoctest\njulia> gcdx(240, 46)\n(2,-9,47)\n```\n\n!!! note\n    Bézout coefficients are *not* uniquely defined. `gcdx` returns the minimal\n    Bézout coefficients that are computed by the extended Euclidean algorithm.\n    (Ref: D. Knuth, TAoCP, 2/e, p. 325, Algorithm X.)\n    For signed integers, these coefficients `u` and `v` are minimal in\n    the sense that ``|u| < |y/d|`` and ``|v| < |x/d|``. Furthermore,\n    the signs of `u` and `v` are chosen so that `d` is positive.\n    For unsigned integers, the coefficients `u` and `v` might be near\n    their `typemax`, and the identity then holds only via the unsigned\n    integers' modulo arithmetic.\n",
    (:line, 79, :none),
    (:function, (:call, (:curly, :gcdx, (:<:, :T, :Integer)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 81, :none),
        (:(=), (:tuple, :s0, :s1), (:tuple, (:call, :one, :T), (:call, :zero, :T))),
        (:line, 82, :none),
        (:(=), (:tuple, :t0, :t1), (:tuple, :s1, :s0)),
        (:line, 84, :none),
        (:while, (:call, :(!=), :b, 0), (:block,
            (:line, 85, :none),
            (:(=), :q, (:call, :div, :a, :b)),
            (:line, 86, :none),
            (:(=), (:tuple, :a, :b), (:tuple, :b, (:call, :rem, :a, :b))),
            (:line, 87, :none),
            (:(=), (:tuple, :s0, :s1), (:tuple, :s1, (:call, :-, :s0, (:call, :*, :q, :s1)))),
            (:line, 88, :none),
            (:(=), (:tuple, :t0, :t1), (:tuple, :t1, (:call, :-, :t0, (:call, :*, :q, :t1))))
          )),
        (:line, 90, :none),
        (:if, (:call, :<, :a, 0), (:tuple, (:call, :-, :a), (:call, :-, :s0), (:call, :-, :t0)), (:tuple, :a, :s0, :t0))
      )),
    (:line, 92, :none),
    (:(=), (:call, :gcdx, (:(::), :a, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 92, :none),
        (:call, :gcdx, (:..., (:call, :promote, :a, :b)))
      )),
    (:line, 95, :none),
    (:function, (:call, (:curly, :invmod, (:<:, :T, :Integer)), (:(::), :n, :T), (:(::), :m, :T)), (:block,
        (:line, 96, :none),
        (:(=), (:tuple, :g, :x, :y), (:call, :gcdx, :n, :m)),
        (:line, 97, :none),
        (:&&, (:||, (:call, :(!=), :g, 1), (:call, :(==), :m, 0)), (:call, :throw, (:call, :DomainError))),
        (:line, 100, :none),
        (:(=), :r, (:call, :mod, (:call, :+, :x, :m), :m)),
        (:line, 102, :none),
        :r
      )),
    (:line, 104, :none),
    (:(=), (:call, :invmod, (:(::), :n, :Integer), (:(::), :m, :Integer)), (:block,
        (:line, 104, :none),
        (:call, :invmod, (:..., (:call, :promote, :n, :m)))
      )),
    (:line, 107, :none),
    (:(=), (:call, :to_power_type, (:(::), :x, :Number)), (:block,
        (:line, 107, :none),
        (:call, :oftype, (:call, :*, :x, :x), :x)
      )),
    (:line, 108, :none),
    (:(=), (:call, :to_power_type, :x), (:block,
        (:line, 108, :none),
        :x
      )),
    (:line, 109, :none),
    (:function, (:call, :power_by_squaring, :x_, (:(::), :p, :Integer)), (:block,
        (:line, 110, :none),
        (:(=), :x, (:call, :to_power_type, :x_)),
        (:line, 111, :none),
        (:if, (:call, :(==), :p, 1), (:block,
            (:line, 112, :none),
            (:return, (:call, :copy, :x))
          ), (:block,
            (:line, 113, :none),
            (:if, (:call, :(==), :p, 0), (:block,
                (:line, 114, :none),
                (:return, (:call, :one, :x))
              ), (:block,
                (:line, 115, :none),
                (:if, (:call, :(==), :p, 2), (:block,
                    (:line, 116, :none),
                    (:return, (:call, :*, :x, :x))
                  ), (:block,
                    (:line, 117, :none),
                    (:if, (:call, :<, :p, 0), (:block,
                        (:line, 118, :none),
                        (:call, :throw, (:call, :DomainError))
                      ))
                  ))
              ))
          )),
        (:line, 120, :none),
        (:(=), :t, (:call, :+, (:call, :trailing_zeros, :p), 1)),
        (:line, 121, :none),
        (:>>=, :p, :t),
        (:line, 122, :none),
        (:while, (:call, :>, (:-=, :t, 1), 0), (:block,
            (:line, 123, :none),
            (:*=, :x, :x)
          )),
        (:line, 125, :none),
        (:(=), :y, :x),
        (:line, 126, :none),
        (:while, (:call, :>, :p, 0), (:block,
            (:line, 127, :none),
            (:(=), :t, (:call, :+, (:call, :trailing_zeros, :p), 1)),
            (:line, 128, :none),
            (:>>=, :p, :t),
            (:line, 129, :none),
            (:while, (:call, :(>=), (:-=, :t, 1), 0), (:block,
                (:line, 130, :none),
                (:*=, :x, :x)
              )),
            (:line, 132, :none),
            (:*=, :y, :x)
          )),
        (:line, 134, :none),
        (:return, :y)
      )),
    (:line, 136, :none),
    (:(=), (:call, :power_by_squaring, (:(::), :x, :Bool), (:(::), :p, :Unsigned)), (:block,
        (:line, 136, :none),
        (:call, :|, (:call, :(==), :p, 0), :x)
      )),
    (:line, 137, :none),
    (:function, (:call, :power_by_squaring, (:(::), :x, :Bool), (:(::), :p, :Integer)), (:block,
        (:line, 138, :none),
        (:&&, (:call, :<, :p, 0), (:call, :throw, (:call, :DomainError))),
        (:line, 139, :none),
        (:return, (:call, :|, (:call, :(==), :p, 0), :x))
      )),
    (:line, 142, :none),
    (:(=), (:call, (:curly, :^, (:<:, :T, :Integer)), (:(::), :x, :T), (:(::), :p, :T)), (:block,
        (:line, 142, :none),
        (:call, :power_by_squaring, :x, :p)
      )),
    (:line, 143, :none),
    (:(=), (:call, :^, (:(::), :x, :Number), (:(::), :p, :Integer)), (:block,
        (:line, 143, :none),
        (:call, :power_by_squaring, :x, :p)
      )),
    (:line, 144, :none),
    (:(=), (:call, :^, :x, (:(::), :p, :Integer)), (:block,
        (:line, 144, :none),
        (:call, :power_by_squaring, :x, :p)
      )),
    (:line, 147, :none),
    (:function, (:call, (:curly, :powermod, (:<:, :T, :Integer)), (:(::), :x, :Integer), (:(::), :p, :Integer), (:(::), :m, :T)), (:block,
        (:line, 148, :none),
        (:&&, (:call, :<, :p, 0), (:return, (:call, :powermod, (:call, :invmod, :x, :m), (:call, :-, :p), :m))),
        (:line, 149, :none),
        (:&&, (:call, :(==), :p, 0), (:return, (:call, :mod, (:call, :one, :m), :m))),
        (:line, 150, :none),
        (:&&, (:||, (:call, :(==), :m, 1), (:call, :(==), :m, -1)), (:return, (:call, :zero, :m))),
        (:line, 151, :none),
        (:(=), :b, (:call, :oftype, :m, (:call, :mod, :x, :m))),
        (:line, 153, :none),
        (:(=), :t, (:call, :prevpow2, :p)),
        (:line, 154, :none),
        (:local, (:(::), :r, :T)),
        (:line, 155, :none),
        (:(=), :r, 1),
        (:line, 156, :none),
        (:while, true, (:block,
            (:line, 157, :none),
            (:if, (:call, :(>=), :p, :t), (:block,
                (:line, 158, :none),
                (:(=), :r, (:call, :mod, (:call, :widemul, :r, :b), :m)),
                (:line, 159, :none),
                (:-=, :p, :t)
              )),
            (:line, 161, :none),
            (:>>>=, :t, 1),
            (:line, 162, :none),
            (:&&, (:call, :(<=), :t, 0), (:break,)),
            (:line, 163, :none),
            (:(=), :r, (:call, :mod, (:call, :widemul, :r, :r), :m))
          )),
        (:line, 165, :none),
        (:return, :r)
      )),
    (:line, 169, :none),
    (:(=), (:call, :powermod, (:(::), :x, :Integer), (:(::), :p, :Integer), (:(::), :m, (:curly, :Union, :Int128, :UInt128))), (:block,
        (:line, 169, :none),
        (:call, :oftype, :m, (:call, :powermod, :x, :p, (:call, :big, :m)))
      )),
    (:line, 172, :none),
    (:(=), (:call, :nextpow2, (:(::), :x, :Unsigned)), (:block,
        (:line, 172, :none),
        (:call, :<<, (:call, :one, :x), (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, (:call, :-, :x, (:call, :one, :x)))))
      )),
    (:line, 173, :none),
    (:(=), (:call, :nextpow2, (:(::), :x, :Integer)), (:block,
        (:line, 173, :none),
        (:call, :reinterpret, (:call, :typeof, :x), (:if, (:call, :<, :x, 0), (:call, :-, (:call, :nextpow2, (:call, :unsigned, (:call, :-, :x)))), (:call, :nextpow2, (:call, :unsigned, :x))))
      )),
    (:line, 175, :none),
    (:(=), (:call, :prevpow2, (:(::), :x, :Unsigned)), (:block,
        (:line, 175, :none),
        (:call, :<<, (:call, :one, :x), (:call, :unsigned, (:call, :-, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x)), 1)))
      )),
    (:line, 176, :none),
    (:(=), (:call, :prevpow2, (:(::), :x, :Integer)), (:block,
        (:line, 176, :none),
        (:call, :reinterpret, (:call, :typeof, :x), (:if, (:call, :<, :x, 0), (:call, :-, (:call, :prevpow2, (:call, :unsigned, (:call, :-, :x)))), (:call, :prevpow2, (:call, :unsigned, :x))))
      )),
    (:line, 178, :none),
    (:(=), (:call, :ispow2, (:(::), :x, :Integer)), (:block,
        (:line, 178, :none),
        (:&&, (:call, :>, :x, 0), (:call, :(==), (:call, :count_ones, :x), 1))
      )),
    (:line, 181, :none),
    (:function, (:call, :nextpow, (:(::), :a, :Real), (:(::), :x, :Real)), (:block,
        (:line, 182, :none),
        (:&&, (:||, (:call, :(<=), :a, 1), (:call, :(<=), :x, 0)), (:call, :throw, (:call, :DomainError))),
        (:line, 183, :none),
        (:&&, (:call, :(<=), :x, 1), (:return, (:call, :one, :a))),
        (:line, 184, :none),
        (:(=), :n, (:call, :ceil, :Integer, (:call, :log, :a, :x))),
        (:line, 185, :none),
        (:(=), :p, (:call, :^, :a, (:call, :-, :n, 1))),
        (:line, 187, :none),
        (:if, (:call, :(>=), :p, :x), :p, (:call, :^, :a, :n))
      )),
    (:line, 190, :none),
    (:function, (:call, :prevpow, (:(::), :a, :Real), (:(::), :x, :Real)), (:block,
        (:line, 191, :none),
        (:&&, (:||, (:call, :(<=), :a, 1), (:call, :<, :x, 1)), (:call, :throw, (:call, :DomainError))),
        (:line, 192, :none),
        (:(=), :n, (:call, :floor, :Integer, (:call, :log, :a, :x))),
        (:line, 193, :none),
        (:(=), :p, (:call, :^, :a, (:call, :+, :n, 1))),
        (:line, 194, :none),
        (:if, (:call, :(<=), :p, :x), :p, (:call, :^, :a, :n))
      )),
    (:line, 198, :none),
    (:const, (:(=), :powers_of_ten, (:vect, 0x0000000000000001, 0x000000000000000a, 0x0000000000000064, 0x00000000000003e8, 0x0000000000002710, 0x00000000000186a0, 0x00000000000f4240, 0x0000000000989680, 0x0000000005f5e100, 0x000000003b9aca00, 0x00000002540be400, 0x000000174876e800, 0x000000e8d4a51000, 0x000009184e72a000, 0x00005af3107a4000, 0x00038d7ea4c68000, 0x002386f26fc10000, 0x016345785d8a0000, 0x0de0b6b3a7640000, 0x8ac7230489e80000))),
    (:line, 205, :none),
    (:function, (:call, :ndigits0z, (:(::), :x, (:curly, :Union, :UInt8, :UInt16, :UInt32, :UInt64))), (:block,
        (:line, 206, :none),
        (:(=), :lz, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x))),
        (:line, 207, :none),
        (:(=), :nd, (:call, :+, (:call, :>>, (:call, :*, 1233, :lz), 12), 1)),
        (:line, 208, :none),
        (:-=, :nd, (:call, :<, :x, (:ref, :powers_of_ten, :nd)))
      )),
    (:line, 210, :none),
    (:function, (:call, :ndigits0z, (:(::), :x, :UInt128)), (:block,
        (:line, 211, :none),
        (:(=), :n, 0),
        (:line, 212, :none),
        (:while, (:call, :>, :x, 0x8ac7230489e80000), (:block,
            (:line, 213, :none),
            (:(=), :x, (:call, :div, :x, 0x8ac7230489e80000)),
            (:line, 214, :none),
            (:+=, :n, 19)
          )),
        (:line, 216, :none),
        (:return, (:call, :+, :n, (:call, :ndigits0z, (:call, :UInt64, :x))))
      )),
    (:line, 218, :none),
    (:(=), (:call, :ndigits0z, (:(::), :x, :Integer)), (:block,
        (:line, 218, :none),
        (:call, :ndigits0z, (:call, :unsigned, (:call, :abs, :x)))
      )),
    (:line, 220, :none),
    (:const, (:(=), :ndigits_max_mul, (:if, (:call, :(==), (:call, (:., :Core, (:quote, #QuoteNode
                  :sizeof
                )), :Int), 4), 69000000, 290000000000000000))),
    (:line, 222, :none),
    (:function, (:call, :ndigits0znb, (:(::), :n, :Signed), (:(::), :b, :Int)), (:block,
        (:line, 223, :none),
        (:(=), :d, 0),
        (:line, 224, :none),
        (:while, (:call, :(!=), :n, 0), (:block,
            (:line, 225, :none),
            (:(=), :n, (:call, :cld, :n, :b)),
            (:line, 226, :none),
            (:+=, :d, 1)
          )),
        (:line, 228, :none),
        (:return, :d)
      )),
    (:line, 231, :none),
    (:function, (:call, :ndigits0z, (:(::), :n, :Unsigned), (:(::), :b, :Int)), (:block,
        (:line, 232, :none),
        (:(=), :d, 0),
        (:line, 233, :none),
        (:if, (:call, :<, :b, 0), (:block,
            (:line, 234, :none),
            (:(=), :d, (:call, :ndigits0znb, (:call, :signed, :n), :b))
          ), (:block,
            (:line, 236, :none),
            (:&&, (:call, :(==), :b, 2), (:return, (:call, :-, (:call, :<<, (:call, :sizeof, :n), 3), (:call, :leading_zeros, :n)))),
            (:line, 237, :none),
            (:&&, (:call, :(==), :b, 8), (:return, (:call, :div, (:call, :+, (:call, :-, (:call, :<<, (:call, :sizeof, :n), 3), (:call, :leading_zeros, :n)), 2), 3))),
            (:line, 238, :none),
            (:&&, (:call, :(==), :b, 16), (:return, (:call, :-, (:call, :<<, (:call, :sizeof, :n), 1), (:call, :>>, (:call, :leading_zeros, :n), 2)))),
            (:line, 239, :none),
            (:&&, (:call, :(==), :b, 10), (:return, (:call, :ndigits0z, :n))),
            (:line, 240, :none),
            (:while, (:call, :<, :ndigits_max_mul, :n), (:block,
                (:line, 241, :none),
                (:(=), :n, (:call, :div, :n, :b)),
                (:line, 242, :none),
                (:+=, :d, 1)
              )),
            (:line, 244, :none),
            (:(=), :m, 1),
            (:line, 245, :none),
            (:while, (:call, :(<=), :m, :n), (:block,
                (:line, 246, :none),
                (:*=, :m, :b),
                (:line, 247, :none),
                (:+=, :d, 1)
              ))
          )),
        (:line, 250, :none),
        (:return, :d)
      )),
    (:line, 252, :none),
    (:(=), (:call, :ndigits0z, (:(::), :x, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 252, :none),
        (:call, :ndigits0z, (:call, :unsigned, (:call, :abs, :x)), (:call, :Int, :b))
      )),
    (:line, 254, :none),
    (:(=), (:call, :ndigitsnb, (:(::), :x, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 254, :none),
        (:if, (:call, :(==), :x, 0), 1, (:call, :ndigits0znb, :x, :b))
      )),
    (:line, 256, :none),
    (:(=), (:call, :ndigits, (:(::), :x, :Unsigned), (:(::), :b, :Integer)), (:block,
        (:line, 256, :none),
        (:if, (:call, :(==), :x, 0), 1, (:call, :ndigits0z, :x, (:call, :Int, :b)))
      )),
    (:line, 257, :none),
    (:(=), (:call, :ndigits, (:(::), :x, :Unsigned)), (:block,
        (:line, 257, :none),
        (:if, (:call, :(==), :x, 0), 1, (:call, :ndigits0z, :x))
      )),
    (:line, 259, :none),
    (:(=), (:call, :ndigits, (:(::), :x, :Integer), (:(::), :b, :Integer)), (:block,
        (:line, 259, :none),
        (:if, (:call, :(>=), :b, 0), (:call, :ndigits, (:call, :unsigned, (:call, :abs, :x)), (:call, :Int, :b)), (:call, :ndigitsnb, :x, :b))
      )),
    (:line, 260, :none),
    (:(=), (:call, :ndigits, (:(::), :x, :Integer)), (:block,
        (:line, 260, :none),
        (:call, :ndigits, (:call, :unsigned, (:call, :abs, :x)))
      )),
    (:line, 264, :none),
    (:(=), (:call, :string, (:(::), :x, (:curly, :Union, :Int8, :Int16, :Int32, :Int64, :Int128))), (:block,
        (:line, 264, :none),
        (:call, :dec, :x)
      )),
    (:line, 266, :none),
    (:function, (:call, :bin, (:(::), :x, :Unsigned), (:(::), :pad, :Int), (:(::), :neg, :Bool)), (:block,
        (:line, 267, :none),
        (:(=), :i, (:call, :+, :neg, (:call, :max, :pad, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x))))),
        (:line, 268, :none),
        (:(=), :a, (:call, (:curly, :Array, :UInt8), :i)),
        (:line, 269, :none),
        (:while, (:call, :>, :i, :neg), (:block,
            (:line, 270, :none),
            (:(=), (:ref, :a, :i), (:call, :+, '0', (:call, :&, :x, 0x01))),
            (:line, 271, :none),
            (:>>=, :x, 1),
            (:line, 272, :none),
            (:-=, :i, 1)
          )),
        (:line, 274, :none),
        (:if, :neg, (:block,
            (:line, 274, :none),
            (:(=), (:ref, :a, 1), '-')
          )),
        (:line, 275, :none),
        (:call, :String, :a)
      )),
    (:line, 278, :none),
    (:function, (:call, :oct, (:(::), :x, :Unsigned), (:(::), :pad, :Int), (:(::), :neg, :Bool)), (:block,
        (:line, 279, :none),
        (:(=), :i, (:call, :+, :neg, (:call, :max, :pad, (:call, :div, (:call, :+, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 3), (:call, :leading_zeros, :x)), 2), 3)))),
        (:line, 280, :none),
        (:(=), :a, (:call, (:curly, :Array, :UInt8), :i)),
        (:line, 281, :none),
        (:while, (:call, :>, :i, :neg), (:block,
            (:line, 282, :none),
            (:(=), (:ref, :a, :i), (:call, :+, '0', (:call, :&, :x, 0x07))),
            (:line, 283, :none),
            (:>>=, :x, 3),
            (:line, 284, :none),
            (:-=, :i, 1)
          )),
        (:line, 286, :none),
        (:if, :neg, (:block,
            (:line, 286, :none),
            (:(=), (:ref, :a, 1), '-')
          )),
        (:line, 287, :none),
        (:call, :String, :a)
      )),
    (:line, 290, :none),
    (:function, (:call, :dec, (:(::), :x, :Unsigned), (:(::), :pad, :Int), (:(::), :neg, :Bool)), (:block,
        (:line, 291, :none),
        (:(=), :i, (:call, :+, :neg, (:call, :max, :pad, (:call, :ndigits0z, :x)))),
        (:line, 292, :none),
        (:(=), :a, (:call, (:curly, :Array, :UInt8), :i)),
        (:line, 293, :none),
        (:while, (:call, :>, :i, :neg), (:block,
            (:line, 294, :none),
            (:(=), (:ref, :a, :i), (:call, :+, '0', (:call, :rem, :x, 10))),
            (:line, 295, :none),
            (:(=), :x, (:call, :oftype, :x, (:call, :div, :x, 10))),
            (:line, 296, :none),
            (:-=, :i, 1)
          )),
        (:line, 298, :none),
        (:if, :neg, (:block,
            (:line, 298, :none),
            (:(=), (:ref, :a, 1), '-')
          )),
        (:line, 299, :none),
        (:call, :String, :a)
      )),
    (:line, 302, :none),
    (:function, (:call, :hex, (:(::), :x, :Unsigned), (:(::), :pad, :Int), (:(::), :neg, :Bool)), (:block,
        (:line, 303, :none),
        (:(=), :i, (:call, :+, :neg, (:call, :max, :pad, (:call, :-, (:call, :<<, (:call, :sizeof, :x), 1), (:call, :>>, (:call, :leading_zeros, :x), 2))))),
        (:line, 304, :none),
        (:(=), :a, (:call, (:curly, :Array, :UInt8), :i)),
        (:line, 305, :none),
        (:while, (:call, :>, :i, :neg), (:block,
            (:line, 306, :none),
            (:(=), :d, (:call, :&, :x, 0x0f)),
            (:line, 307, :none),
            (:(=), (:ref, :a, :i), (:call, :+, '0', :d, (:call, :*, 39, (:call, :>, :d, 9)))),
            (:line, 308, :none),
            (:>>=, :x, 4),
            (:line, 309, :none),
            (:-=, :i, 1)
          )),
        (:line, 311, :none),
        (:if, :neg, (:block,
            (:line, 311, :none),
            (:(=), (:ref, :a, 1), '-')
          )),
        (:line, 312, :none),
        (:call, :String, :a)
      )),
    (:line, 315, :none),
    (:(=), (:call, :num2hex, (:(::), :n, :Integer)), (:block,
        (:line, 315, :none),
        (:call, :hex, :n, (:call, :*, (:call, :sizeof, :n), 2))
      )),
    (:line, 317, :none),
    (:const, (:(=), :base36digits, (:vcat, (:(:), '0', '9'), (:(:), 'a', 'z')))),
    (:line, 318, :none),
    (:const, (:(=), :base62digits, (:vcat, (:(:), '0', '9'), (:(:), 'A', 'Z'), (:(:), 'a', 'z')))),
    (:line, 320, :none),
    (:function, (:call, :base, (:(::), :b, :Int), (:(::), :x, :Unsigned), (:(::), :pad, :Int), (:(::), :neg, :Bool)), (:block,
        (:line, 321, :none),
        (:||, (:comparison, 2, :(<=), :b, :(<=), 62), (:call, :throw, (:call, :ArgumentError, (:string, "base must be 2 ≤ base ≤ 62, got ", :b)))),
        (:line, 322, :none),
        (:(=), :digits, (:if, (:call, :(<=), :b, 36), :base36digits, :base62digits)),
        (:line, 323, :none),
        (:(=), :i, (:call, :+, :neg, (:call, :max, :pad, (:call, :ndigits0z, :x, :b)))),
        (:line, 324, :none),
        (:(=), :a, (:call, (:curly, :Array, :UInt8), :i)),
        (:line, 325, :none),
        (:while, (:call, :>, :i, :neg), (:block,
            (:line, 326, :none),
            (:(=), (:ref, :a, :i), (:ref, :digits, (:call, :+, 1, (:call, :rem, :x, :b)))),
            (:line, 327, :none),
            (:(=), :x, (:call, :div, :x, :b)),
            (:line, 328, :none),
            (:-=, :i, 1)
          )),
        (:line, 330, :none),
        (:if, :neg, (:block,
            (:line, 330, :none),
            (:(=), (:ref, :a, 1), '-')
          )),
        (:line, 331, :none),
        (:call, :String, :a)
      )),
    (:line, 333, :none),
    (:(=), (:call, :base, (:(::), :b, :Integer), (:(::), :n, :Integer), (:kw, (:(::), :pad, :Integer), 1)), (:block,
        (:line, 333, :none),
        (:call, :base, (:call, :Int, :b), (:call, :unsigned, (:call, :abs, :n)), :pad, (:call, :<, :n, 0))
      )),
    (:line, 335, :none),
    (:for, (:(=), :sym, (:tuple, (:quote, #QuoteNode
            :bin
          ), (:quote, #QuoteNode
            :oct
          ), (:quote, #QuoteNode
            :dec
          ), (:quote, #QuoteNode
            :hex
          ))), (:block,
        (:line, 336, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 337, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Unsigned), (:(::), :p, :Int)), (:block,
                (:line, 337, :none),
                (:call, (:$, :sym), :x, :p, false)
              )),
            (:line, 338, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Unsigned)), (:block,
                (:line, 338, :none),
                (:call, (:$, :sym), :x, 1, false)
              )),
            (:line, 339, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Char), (:(::), :p, :Int)), (:block,
                (:line, 339, :none),
                (:call, (:$, :sym), (:call, :unsigned, :x), :p, false)
              )),
            (:line, 340, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Char)), (:block,
                (:line, 340, :none),
                (:call, (:$, :sym), (:call, :unsigned, :x), 1, false)
              )),
            (:line, 341, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Integer), (:(::), :p, :Int)), (:block,
                (:line, 341, :none),
                (:call, (:$, :sym), (:call, :unsigned, (:call, :abs, :x)), :p, (:call, :<, :x, 0))
              )),
            (:line, 342, :none),
            (:(=), (:call, (:$, :sym), (:(::), :x, :Integer)), (:block,
                (:line, 342, :none),
                (:call, (:$, :sym), (:call, :unsigned, (:call, :abs, :x)), 1, (:call, :<, :x, 0))
              ))
          ))
      )),
    (:line, 346, :none),
    (:(=), (:call, :bits, (:(::), :x, (:curly, :Union, :Bool, :Int8, :UInt8))), (:block,
        (:line, 346, :none),
        (:call, :bin, (:call, :reinterpret, :UInt8, :x), 8)
      )),
    (:line, 347, :none),
    (:(=), (:call, :bits, (:(::), :x, (:curly, :Union, :Int16, :UInt16, :Float16))), (:block,
        (:line, 347, :none),
        (:call, :bin, (:call, :reinterpret, :UInt16, :x), 16)
      )),
    (:line, 348, :none),
    (:(=), (:call, :bits, (:(::), :x, (:curly, :Union, :Char, :Int32, :UInt32, :Float32))), (:block,
        (:line, 348, :none),
        (:call, :bin, (:call, :reinterpret, :UInt32, :x), 32)
      )),
    (:line, 349, :none),
    (:(=), (:call, :bits, (:(::), :x, (:curly, :Union, :Int64, :UInt64, :Float64))), (:block,
        (:line, 349, :none),
        (:call, :bin, (:call, :reinterpret, :UInt64, :x), 64)
      )),
    (:line, 350, :none),
    (:(=), (:call, :bits, (:(::), :x, (:curly, :Union, :Int128, :UInt128))), (:block,
        (:line, 350, :none),
        (:call, :bin, (:call, :reinterpret, :UInt128, :x), 128)
      )),
    (:line, 352, :none),
    (:(=), (:call, (:curly, :digits, (:<:, :T, :Integer)), (:(::), :n, :Integer), (:kw, (:(::), :base, :T), 10), (:kw, (:(::), :pad, :Integer), 1)), (:block,
        (:line, 352, :none),
        (:call, :digits, :T, :n, :base, :pad)
      )),
    (:line, 354, :none),
    (:function, (:call, (:curly, :digits, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :n, :Integer), (:kw, (:(::), :base, :Integer), 10), (:kw, (:(::), :pad, :Integer), 1)), (:block,
        (:line, 355, :none),
        (:||, (:call, :(<=), 2, :base), (:call, :throw, (:call, :ArgumentError, (:string, "base must be ≥ 2, got ", :base)))),
        (:line, 356, :none),
        (:call, :digits!, (:call, :zeros, :T, (:call, :max, :pad, (:call, :ndigits0z, :n, :base))), :n, :base)
      )),
    (:line, 359, :none),
    (:function, (:call, (:curly, :digits!, (:<:, :T, :Integer)), (:(::), :a, (:curly, :AbstractArray, :T, 1)), (:(::), :n, :Integer), (:kw, (:(::), :base, :Integer), 10)), (:block,
        (:line, 360, :none),
        (:||, (:call, :(<=), 2, :base), (:call, :throw, (:call, :ArgumentError, (:string, "base must be ≥ 2, got ", :base)))),
        (:line, 361, :none),
        (:||, (:call, :(<=), (:call, :-, :base, 1), (:call, :typemax, :T)), (:call, :throw, (:call, :ArgumentError, (:string, "type ", :T, " too small for base ", :base)))),
        (:line, 362, :none),
        (:for, (:(=), :i, (:call, :eachindex, :a)), (:block,
            (:line, 363, :none),
            (:(=), (:ref, :a, :i), (:call, :rem, :n, :base)),
            (:line, 364, :none),
            (:(=), :n, (:call, :div, :n, :base))
          )),
        (:line, 366, :none),
        (:return, :a)
      )),
    (:line, 369, :none),
    (:(=), (:call, :isqrt, (:(::), :x, :Integer)), (:block,
        (:line, 369, :none),
        (:call, :oftype, :x, (:call, :trunc, (:call, :sqrt, :x)))
      )),
    (:line, 371, :none),
    (:function, (:call, :isqrt, (:(::), :x, (:curly, :Union, :Int64, :UInt64, :Int128, :UInt128))), (:block,
        (:line, 372, :none),
        (:&&, (:call, :(==), :x, 0), (:return, :x)),
        (:line, 373, :none),
        (:(=), :s, (:call, :oftype, :x, (:call, :trunc, (:call, :sqrt, :x)))),
        (:line, 376, :none),
        (:(=), :s, (:call, :>>, (:call, :+, :s, (:call, :div, :x, :s)), 1)),
        (:line, 377, :none),
        (:if, (:call, :>, (:call, :*, :s, :s), :x), (:call, :-, :s, 1), :s)
      )),
    (:line, 380, :none),
    (:function, (:call, :factorial, (:(::), :n, :Integer)), (:block,
        (:line, 381, :none),
        (:&&, (:call, :<, :n, 0), (:call, :throw, (:call, :DomainError))),
        (:line, 382, :none),
        (:local, (:(::), :f, (:call, :typeof, (:call, :*, :n, :n))), (:(::), :i, (:call, :typeof, (:call, :*, :n, :n)))),
        (:line, 383, :none),
        (:(=), :f, 1),
        (:line, 384, :none),
        (:for, (:(=), :i, (:(:), 2, :n)), (:block,
            (:line, 385, :none),
            (:*=, :f, :i)
          )),
        (:line, 387, :none),
        (:return, :f)
      )),
    (:line, 390, :none),
    (:function, (:call, (:curly, :binomial, (:<:, :T, :Integer)), (:(::), :n, :T), (:(::), :k, :T)), (:block,
        (:line, 391, :none),
        (:&&, (:call, :<, :k, 0), (:return, (:call, :zero, :T))),
        (:line, 392, :none),
        (:(=), :sgn, (:call, :one, :T)),
        (:line, 393, :none),
        (:if, (:call, :<, :n, 0), (:block,
            (:line, 394, :none),
            (:(=), :n, (:call, :-, (:call, :+, (:call, :-, :n), :k), 1)),
            (:line, 395, :none),
            (:if, (:call, :isodd, :k), (:block,
                (:line, 396, :none),
                (:(=), :sgn, (:call, :-, :sgn))
              ))
          )),
        (:line, 399, :none),
        (:&&, (:call, :>, :k, :n), (:return, (:call, :zero, :T))),
        (:line, 400, :none),
        (:&&, (:||, (:call, :(==), :k, 0), (:call, :(==), :k, :n)), (:return, :sgn)),
        (:line, 401, :none),
        (:&&, (:call, :(==), :k, 1), (:return, (:call, :*, :sgn, :n))),
        (:line, 402, :none),
        (:if, (:call, :>, :k, (:call, :>>, :n, 1)), (:block,
            (:line, 403, :none),
            (:(=), :k, (:call, :-, :n, :k))
          )),
        (:line, 405, :none),
        (:(=), (:(::), :x, :T), (:(=), :nn, (:call, :+, (:call, :-, :n, :k), 1))),
        (:line, 406, :none),
        (:+=, :nn, 1),
        (:line, 407, :none),
        (:(=), :rr, 2),
        (:line, 408, :none),
        (:while, (:call, :(<=), :rr, :k), (:block,
            (:line, 409, :none),
            (:(=), :xt, (:call, :div, (:call, :widemul, :x, :nn), :rr)),
            (:line, 410, :none),
            (:(=), :x, :xt),
            (:line, 411, :none),
            (:||, (:call, :(==), :x, :xt), (:call, :throw, (:call, :OverflowError))),
            (:line, 412, :none),
            (:+=, :rr, 1),
            (:line, 413, :none),
            (:+=, :nn, 1)
          )),
        (:line, 415, :none),
        (:call, :convert, :T, (:call, :copysign, :x, :sgn))
      ))
  ))