(:quote, (:block,
    (:line, 5, :none),
    (:(=), (:call, :isinteger, (:(::), :x, :AbstractArray)), (:block,
        (:line, 5, :none),
        (:call, :all, :isinteger, :x)
      )),
    (:line, 6, :none),
    (:(=), (:call, (:curly, :isinteger, (:<:, :T, :Integer), :n), (:(::), :x, (:curly, :AbstractArray, :T, :n))), (:block,
        (:line, 6, :none),
        true
      )),
    (:line, 7, :none),
    (:(=), (:call, :isreal, (:(::), :x, :AbstractArray)), (:block,
        (:line, 7, :none),
        (:call, :all, :isreal, :x)
      )),
    (:line, 8, :none),
    (:(=), (:call, (:curly, :isreal, (:<:, :T, :Real), :n), (:(::), :x, (:curly, :AbstractArray, :T, :n))), (:block,
        (:line, 8, :none),
        true
      )),
    (:line, 9, :none),
    (:(=), (:call, :ctranspose, (:(::), :a, :AbstractArray)), (:block,
        (:line, 9, :none),
        (:call, :error, (:string, "ctranspose not implemented for ", (:call, :typeof, :a), ". Consider adding parentheses, e.g. A*(B*C') instead of A*B*C' to avoid explicit calculation of the transposed matrix."))
      )),
    (:line, 10, :none),
    (:(=), (:call, :transpose, (:(::), :a, :AbstractArray)), (:block,
        (:line, 10, :none),
        (:call, :error, (:string, "transpose not implemented for ", (:call, :typeof, :a), ". Consider adding parentheses, e.g. A*(B*C.') instead of A*B*C' to avoid explicit calculation of the transposed matrix."))
      )),
    (:line, 14, :none),
    "    vec(a::AbstractArray) -> Vector\n\nReshape array `a` as a one-dimensional column vector.\n\n```jldoctest\njulia> a = [1 2 3; 4 5 6]\n2×3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n\njulia> vec(a)\n6-element Array{Int64,1}:\n 1\n 4\n 2\n 5\n 3\n 6\n```\n",
    (:line, 35, :none),
    (:(=), (:call, :vec, (:(::), :a, :AbstractArray)), (:block,
        (:line, 35, :none),
        (:call, :reshape, :a, (:call, :_length, :a))
      )),
    (:line, 36, :none),
    (:(=), (:call, :vec, (:(::), :a, :AbstractVector)), (:block,
        (:line, 36, :none),
        :a
      )),
    (:line, 38, :none),
    (:(=), (:call, :_sub, (:(::), (:curly, :Tuple)), (:(::), (:curly, :Tuple))), (:block,
        (:line, 38, :none),
        (:tuple,)
      )),
    (:line, 39, :none),
    (:(=), (:call, :_sub, (:(::), :t, :Tuple), (:(::), (:curly, :Tuple))), (:block,
        (:line, 39, :none),
        :t
      )),
    (:line, 40, :none),
    (:(=), (:call, :_sub, (:(::), :t, :Tuple), (:(::), :s, :Tuple)), (:block,
        (:line, 40, :none),
        (:call, :_sub, (:call, :tail, :t), (:call, :tail, :s))
      )),
    (:line, 42, :none),
    "    squeeze(A, dims)\n\nRemove the dimensions specified by `dims` from array `A`.\nElements of `dims` must be unique and within the range `1:ndims(A)`.\n`size(A,i)` must equal 1 for all `i` in `dims`.\n\n```jldoctest\njulia> a = reshape(collect(1:4),(2,2,1,1))\n2×2×1×1 Array{Int64,4}:\n[:, :, 1, 1] =\n 1  3\n 2  4\n\njulia> squeeze(a,3)\n2×2×1 Array{Int64,3}:\n[:, :, 1] =\n 1  3\n 2  4\n```\n",
    (:line, 63, :none),
    (:function, (:call, :squeeze, (:(::), :A, :AbstractArray), (:(::), :dims, :Dims)), (:block,
        (:line, 64, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :dims))), (:block,
            (:line, 65, :none),
            (:||, (:comparison, 1, :(<=), (:ref, :dims, :i), :(<=), (:call, :ndims, :A)), (:call, :throw, (:call, :ArgumentError, "squeezed dims must be in range 1:ndims(A)"))),
            (:line, 66, :none),
            (:||, (:call, :(==), (:call, :size, :A, (:ref, :dims, :i)), 1), (:call, :throw, (:call, :ArgumentError, "squeezed dims must all be size 1"))),
            (:line, 67, :none),
            (:for, (:(=), :j, (:(:), 1, (:call, :-, :i, 1))), (:block,
                (:line, 68, :none),
                (:&&, (:call, :(==), (:ref, :dims, :j), (:ref, :dims, :i)), (:call, :throw, (:call, :ArgumentError, "squeezed dims must be unique")))
              ))
          )),
        (:line, 71, :none),
        (:(=), :d, (:tuple,)),
        (:line, 72, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :ndims, :A))), (:block,
            (:line, 73, :none),
            (:if, (:call, :!, (:call, :in, :i, :dims)), (:block,
                (:line, 74, :none),
                (:(=), :d, (:call, :tuple, (:..., :d), (:call, :size, :A, :i)))
              ))
          )),
        (:line, 77, :none),
        (:call, :reshape, :A, (:(::), :d, (:call, :typeof, (:call, :_sub, (:call, :size, :A), :dims))))
      )),
    (:line, 80, :none),
    (:(=), (:call, :squeeze, (:(::), :A, :AbstractArray), (:(::), :dim, :Integer)), (:block,
        (:line, 80, :none),
        (:call, :squeeze, :A, (:tuple, (:call, :Int, :dim)))
      )),
    (:line, 85, :none),
    (:(=), (:call, (:curly, :conj, (:<:, :T, :Real)), (:(::), :x, (:curly, :AbstractArray, :T))), (:block,
        (:line, 85, :none),
        :x
      )),
    (:line, 86, :none),
    (:(=), (:call, (:curly, :conj!, (:<:, :T, :Real)), (:(::), :x, (:curly, :AbstractArray, :T))), (:block,
        (:line, 86, :none),
        :x
      )),
    (:line, 88, :none),
    (:(=), (:call, (:curly, :real, (:<:, :T, :Real)), (:(::), :x, (:curly, :AbstractArray, :T))), (:block,
        (:line, 88, :none),
        :x
      )),
    (:line, 89, :none),
    (:(=), (:call, (:curly, :imag, (:<:, :T, :Real)), (:(::), :x, (:curly, :AbstractArray, :T))), (:block,
        (:line, 89, :none),
        (:call, :zero, :x)
      )),
    (:line, 91, :none),
    (:(=), (:call, (:curly, :+, (:<:, :T, :Number)), (:(::), :x, (:curly, :AbstractArray, :T))), (:block,
        (:line, 91, :none),
        :x
      )),
    (:line, 92, :none),
    (:(=), (:call, (:curly, :*, (:<:, :T, :Number)), (:(::), :x, (:curly, :AbstractArray, :T, 2))), (:block,
        (:line, 92, :none),
        :x
      )),
    (:line, 96, :none),
    (:(=), (:call, :*, (:(::), :A, :Number), (:(::), :B, :AbstractArray)), (:block,
        (:line, 96, :none),
        (:call, :.*, :A, :B)
      )),
    (:line, 97, :none),
    (:(=), (:call, :*, (:(::), :A, :AbstractArray), (:(::), :B, :Number)), (:block,
        (:line, 97, :none),
        (:call, :.*, :A, :B)
      )),
    (:line, 99, :none),
    (:(=), (:call, :/, (:(::), :A, :AbstractArray), (:(::), :B, :Number)), (:block,
        (:line, 99, :none),
        (:call, :./, :A, :B)
      )),
    (:line, 101, :none),
    (:(=), (:call, :\, (:(::), :A, :Number), (:(::), :B, :AbstractArray)), (:block,
        (:line, 101, :none),
        (:call, :./, :B, :A)
      )),
    (:line, 104, :none),
    (:function, (:call, :slicedim, (:(::), :A, :AbstractArray), (:(::), :d, :Integer), :i), (:block,
        (:line, 105, :none),
        (:||, (:call, :(>=), :d, 1), (:call, :throw, (:call, :ArgumentError, "dimension must be ≥ 1"))),
        (:line, 106, :none),
        (:(=), :nd, (:call, :ndims, :A)),
        (:line, 107, :none),
        (:&&, (:call, :>, :d, :nd), (:||, (:call, :(==), :i, 1), (:call, :throw_boundserror, :A, (:tuple, (:..., (:call, :ntuple, (:->, :k, (:block,
                        (:line, 107, :none),
                        (:call, :Colon)
                      )), :nd)), (:..., (:call, :ntuple, (:->, :k, (:block,
                        (:line, 107, :none),
                        1
                      )), (:call, :-, (:call, :-, :d, 1), :nd))), :i)))),
        (:line, 108, :none),
        (:ref, :A, (:..., (:generator, (:if, (:call, :(==), :n, :d), :i, (:call, :indices, :A, :n)), (:(=), :n, (:(:), 1, :nd)))))
      )),
    (:line, 111, :none),
    (:function, (:call, :flipdim, (:(::), :A, :AbstractVector), (:(::), :d, :Integer)), (:block,
        (:line, 112, :none),
        (:||, (:call, :(==), :d, 1), (:call, :throw, (:call, :ArgumentError, "dimension to flip must be 1"))),
        (:line, 113, :none),
        (:call, :reverse, :A)
      )),
    (:line, 116, :none),
    "    flipdim(A, d)\n\nReverse `A` in dimension `d`.\n\n```jldoctest\njulia> b = [1 2; 3 4]\n2×2 Array{Int64,2}:\n 1  2\n 3  4\n\njulia> flipdim(b,2)\n2×2 Array{Int64,2}:\n 2  1\n 4  3\n```\n",
    (:line, 133, :none),
    (:function, (:call, :flipdim, (:(::), :A, :AbstractArray), (:(::), :d, :Integer)), (:block,
        (:line, 134, :none),
        (:(=), :nd, (:call, :ndims, :A)),
        (:line, 135, :none),
        (:||, (:comparison, 1, :≤, :d, :≤, :nd), (:call, :throw, (:call, :ArgumentError, (:string, "dimension ", :d, " is not 1 ≤ ", :d, " ≤ ", :nd)))),
        (:line, 136, :none),
        (:if, (:call, :isempty, :A), (:block,
            (:line, 137, :none),
            (:return, (:call, :copy, :A))
          )),
        (:line, 139, :none),
        (:(=), :inds, (:call, :indices, :A)),
        (:line, 140, :none),
        (:(=), :B, (:call, :similar, :A)),
        (:line, 141, :none),
        (:(=), :nnd, 0),
        (:line, 142, :none),
        (:for, (:(=), :i, (:(:), 1, :nd)), (:block,
            (:line, 143, :none),
            (:+=, :nnd, (:call, :Int, (:||, (:call, :(==), (:call, :length, (:ref, :inds, :i)), 1), (:call, :(==), :i, :d))))
          )),
        (:line, 145, :none),
        (:(=), :indsd, (:ref, :inds, :d)),
        (:line, 146, :none),
        (:(=), :sd, (:call, :+, (:call, :first, :indsd), (:call, :last, :indsd))),
        (:line, 147, :none),
        (:if, (:call, :(==), :nnd, :nd), (:block,
            (:line, 149, :none),
            (:for, (:(=), :i, :indsd), (:block,
                (:line, 150, :none),
                (:(=), (:ref, :B, :i), (:ref, :A, (:call, :-, :sd, :i)))
              )),
            (:line, 152, :none),
            (:return, :B)
          )),
        (:line, 154, :none),
        (:(=), :alli, (:comprehension, (:generator, (:call, :indices, :B, :n), (:(=), :n, (:(:), 1, :nd))))),
        (:line, 155, :none),
        (:for, (:(=), :i, :indsd), (:block,
            (:line, 156, :none),
            (:(=), (:ref, :B, (:..., (:comprehension, (:generator, (:if, (:call, :(==), :n, :d), (:call, :-, :sd, :i), (:ref, :alli, :n)), (:(=), :n, (:(:), 1, :nd)))))), (:call, :slicedim, :A, :d, :i))
          )),
        (:line, 158, :none),
        (:return, :B)
      )),
    (:line, 161, :none),
    (:function, (:call, :circshift, (:(::), :a, :AbstractArray), (:(::), :shiftamt, :Real)), (:block,
        (:line, 162, :none),
        (:call, :circshift!, (:call, :similar, :a), :a, (:tuple, (:call, :Integer, :shiftamt)))
      )),
    (:line, 164, :none),
    (:(=), (:call, :circshift, (:(::), :a, :AbstractArray), (:(::), :shiftamt, :DimsInteger)), (:block,
        (:line, 164, :none),
        (:call, :circshift!, (:call, :similar, :a), :a, :shiftamt)
      )),
    (:line, 165, :none),
    "    circshift(A, shifts)\n\nCircularly shift the data in an array. The second argument is a vector giving the amount to\nshift in each dimension.\n\n```jldoctest\njulia> b = reshape(collect(1:16), (4,4))\n4×4 Array{Int64,2}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\njulia> circshift(b, (0,2))\n4×4 Array{Int64,2}:\n  9  13  1  5\n 10  14  2  6\n 11  15  3  7\n 12  16  4  8\n\njulia> circshift(b, (-1,0))\n4×4 Array{Int64,2}:\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n 1  5   9  13\n```\n",
    (:line, 194, :none),
    (:function, (:call, :circshift, (:(::), :a, :AbstractArray), :shiftamt), (:block,
        (:line, 195, :none),
        (:call, :circshift!, (:call, :similar, :a), :a, (:call, :map, :Integer, (:tuple, (:..., :shiftamt))))
      )),
    (:line, 199, :none),
    (:function, (:call, (:curly, :cumsum_kbn, (:<:, :T, :AbstractFloat)), (:(::), :v, (:curly, :AbstractVector, :T))), (:block,
        (:line, 200, :none),
        (:(=), :r, (:call, :similar, :v)),
        (:line, 201, :none),
        (:if, (:call, :isempty, :v), (:block,
            (:line, 201, :none),
            (:return, :r)
          )),
        (:line, 203, :none),
        (:(=), :inds, (:call, :indices, :v, 1)),
        (:line, 204, :none),
        (:(=), :i1, (:call, :first, :inds)),
        (:line, 205, :none),
        (:(=), :s, (:(=), (:ref, :r, :i1), (:ref, :v, :i1))),
        (:line, 206, :none),
        (:(=), :c, (:call, :zero, :T)),
        (:line, 207, :none),
        (:for, (:(=), :i, (:(:), (:call, :+, :i1, 1), (:call, :last, :inds))), (:block,
            (:line, 208, :none),
            (:(=), :vi, (:ref, :v, :i)),
            (:line, 209, :none),
            (:(=), :t, (:call, :+, :s, :vi)),
            (:line, 210, :none),
            (:if, (:call, :(>=), (:call, :abs, :s), (:call, :abs, :vi)), (:block,
                (:line, 211, :none),
                (:+=, :c, (:call, :+, (:call, :-, :s, :t), :vi))
              ), (:block,
                (:line, 213, :none),
                (:+=, :c, (:call, :+, (:call, :-, :vi, :t), :s))
              )),
            (:line, 215, :none),
            (:(=), :s, :t),
            (:line, 216, :none),
            (:(=), (:ref, :r, :i), (:call, :+, :s, :c))
          )),
        (:line, 218, :none),
        (:return, :r)
      )),
    (:line, 223, :none),
    (:function, (:call, (:curly, :cumsum_kbn, (:<:, :T, :AbstractFloat)), (:(::), :A, (:curly, :AbstractArray, :T)), (:kw, (:(::), :axis, :Integer), 1)), (:block,
        (:line, 224, :none),
        (:(=), :dimsA, (:call, :size, :A)),
        (:line, 225, :none),
        (:(=), :ndimsA, (:call, :ndims, :A)),
        (:line, 226, :none),
        (:(=), :axis_size, (:ref, :dimsA, :axis)),
        (:line, 227, :none),
        (:(=), :axis_stride, 1),
        (:line, 228, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :-, :axis, 1))), (:block,
            (:line, 229, :none),
            (:*=, :axis_stride, (:call, :size, :A, :i))
          )),
        (:line, 232, :none),
        (:if, (:call, :(<=), :axis_size, 1), (:block,
            (:line, 233, :none),
            (:return, :A)
          )),
        (:line, 236, :none),
        (:(=), :B, (:call, :similar, :A)),
        (:line, 237, :none),
        (:(=), :C, (:call, :similar, :A)),
        (:line, 239, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :A))), (:block,
            (:line, 240, :none),
            (:if, (:call, :(==), (:call, :%, (:call, :div, (:call, :-, :i, 1), :axis_stride), :axis_size), 0), (:block,
                (:line, 241, :none),
                (:(=), (:ref, :B, :i), (:ref, :A, :i)),
                (:line, 242, :none),
                (:(=), (:ref, :C, :i), (:call, :zero, :T))
              ), (:block,
                (:line, 244, :none),
                (:(=), :s, (:ref, :B, (:call, :-, :i, :axis_stride))),
                (:line, 245, :none),
                (:(=), :Ai, (:ref, :A, :i)),
                (:line, 246, :none),
                (:(=), (:ref, :B, :i), (:(=), :t, (:call, :+, :s, :Ai))),
                (:line, 247, :none),
                (:if, (:call, :(>=), (:call, :abs, :s), (:call, :abs, :Ai)), (:block,
                    (:line, 248, :none),
                    (:(=), (:ref, :C, :i), (:call, :+, (:ref, :C, (:call, :-, :i, :axis_stride)), (:call, :+, (:call, :-, :s, :t), :Ai)))
                  ), (:block,
                    (:line, 250, :none),
                    (:(=), (:ref, :C, :i), (:call, :+, (:ref, :C, (:call, :-, :i, :axis_stride)), (:call, :+, (:call, :-, :Ai, :t), :s)))
                  ))
              ))
          )),
        (:line, 255, :none),
        (:return, (:call, :+, :B, :C))
      )),
    (:line, 260, :none),
    (:function, (:call, :ipermutedims, (:(::), :A, :AbstractArray), :perm), (:block,
        (:line, 261, :none),
        (:(=), :iperm, (:call, (:curly, :Array, :Int), (:call, :length, :perm))),
        (:line, 262, :none),
        (:for, (:(=), (:tuple, :i, :p), (:call, :enumerate, :perm)), (:block,
            (:line, 263, :none),
            (:(=), (:ref, :iperm, :p), :i)
          )),
        (:line, 265, :none),
        (:return, (:call, :permutedims, :A, :iperm))
      )),
    (:line, 270, :none),
    (:function, (:call, :repmat, (:(::), :a, :AbstractVecOrMat), (:(::), :m, :Int), (:kw, (:(::), :n, :Int), 1)), (:block,
        (:line, 271, :none),
        (:(=), (:tuple, :o, :p), (:tuple, (:call, :size, :a, 1), (:call, :size, :a, 2))),
        (:line, 272, :none),
        (:(=), :b, (:call, :similar, :a, (:call, :*, :o, :m), (:call, :*, :p, :n))),
        (:line, 273, :none),
        (:for, (:(=), :j, (:(:), 1, :n)), (:block,
            (:line, 274, :none),
            (:(=), :d, (:call, :+, (:call, :*, (:call, :-, :j, 1), :p), 1)),
            (:line, 275, :none),
            (:(=), :R, (:(:), :d, (:call, :-, (:call, :+, :d, :p), 1))),
            (:line, 276, :none),
            (:for, (:(=), :i, (:(:), 1, :m)), (:block,
                (:line, 277, :none),
                (:(=), :c, (:call, :+, (:call, :*, (:call, :-, :i, 1), :o), 1)),
                (:line, 278, :none),
                (:(=), (:ref, :b, (:(:), :c, (:call, :-, (:call, :+, :c, :o), 1)), :R), :a)
              ))
          )),
        (:line, 281, :none),
        (:return, :b)
      )),
    (:line, 284, :none),
    (:function, (:call, :repmat, (:(::), :a, :AbstractVector), (:(::), :m, :Int)), (:block,
        (:line, 285, :none),
        (:(=), :o, (:call, :length, :a)),
        (:line, 286, :none),
        (:(=), :b, (:call, :similar, :a, (:call, :*, :o, :m))),
        (:line, 287, :none),
        (:for, (:(=), :i, (:(:), 1, :m)), (:block,
            (:line, 288, :none),
            (:(=), :c, (:call, :+, (:call, :*, (:call, :-, :i, 1), :o), 1)),
            (:line, 289, :none),
            (:(=), (:ref, :b, (:(:), :c, (:call, :-, (:call, :+, :c, :o), 1))), :a)
          )),
        (:line, 291, :none),
        (:return, :b)
      )),
    (:line, 294, :none),
    "    repeat(A::AbstractArray; inner=ntuple(x->1, ndims(A)), outer=ntuple(x->1, ndims(A)))\n\nConstruct an array by repeating the entries of `A`. The i-th element of `inner` specifies\nthe number of times that the individual entries of the i-th dimension of `A` should be\nrepeated. The i-th element of `outer` specifies the number of times that a slice along the\ni-th dimension of `A` should be repeated. If `inner` or `outer` are omitted, no repetition\nis performed.\n\n```jldoctest\njulia> repeat(1:2, inner=2)\n4-element Array{Int64,1}:\n 1\n 1\n 2\n 2\n\njulia> repeat(1:2, outer=2)\n4-element Array{Int64,1}:\n 1\n 2\n 1\n 2\n\njulia> repeat([1 2; 3 4], inner=(2, 1), outer=(1, 3))\n4×6 Array{Int64,2}:\n 1  2  1  2  1  2\n 1  2  1  2  1  2\n 3  4  3  4  3  4\n 3  4  3  4  3  4\n```\n",
    (:line, 326, :none),
    (:function, (:call, :repeat, (:parameters, (:kw, :inner, (:call, :ntuple, (:->, :x, (:block,
                  (:line, 327, :none),
                  1
                )), (:call, :ndims, :A))), (:kw, :outer, (:call, :ntuple, (:->, :x, (:block,
                  (:line, 328, :none),
                  1
                )), (:call, :ndims, :A)))), (:(::), :A, :AbstractArray)), (:block,
        (:line, 329, :none),
        (:(=), :ndims_in, (:call, :ndims, :A)),
        (:line, 330, :none),
        (:(=), :length_inner, (:call, :length, :inner)),
        (:line, 331, :none),
        (:(=), :length_outer, (:call, :length, :outer)),
        (:line, 333, :none),
        (:||, (:call, :(>=), :length_inner, :ndims_in), (:call, :throw, (:call, :ArgumentError, (:string, "number of inner repetitions (", (:call, :length, :inner), ") cannot be less than number of dimensions of input (", (:call, :ndims, :A), ")")))),
        (:line, 334, :none),
        (:||, (:call, :(>=), :length_outer, :ndims_in), (:call, :throw, (:call, :ArgumentError, (:string, "number of outer repetitions (", (:call, :length, :outer), ") cannot be less than number of dimensions of input (", (:call, :ndims, :A), ")")))),
        (:line, 336, :none),
        (:(=), :ndims_out, (:call, :max, :ndims_in, :length_inner, :length_outer)),
        (:line, 338, :none),
        (:(=), :inner, (:call, :vcat, (:call, :collect, :inner), (:call, :ones, :Int, (:call, :-, :ndims_out, :length_inner)))),
        (:line, 339, :none),
        (:(=), :outer, (:call, :vcat, (:call, :collect, :outer), (:call, :ones, :Int, (:call, :-, :ndims_out, :length_outer)))),
        (:line, 341, :none),
        (:(=), :size_in, (:call, :size, :A)),
        (:line, 342, :none),
        (:(=), :size_out, (:(::), (:call, :ntuple, (:->, :i, (:block,
                  (:line, 342, :none),
                  (:call, :*, (:ref, :inner, :i), (:call, :size, :A, :i), (:ref, :outer, :i))
                )), :ndims_out), :Dims)),
        (:line, 343, :none),
        (:(=), :inner_size_out, (:(::), (:call, :ntuple, (:->, :i, (:block,
                  (:line, 343, :none),
                  (:call, :*, (:ref, :inner, :i), (:call, :size, :A, :i))
                )), :ndims_out), :Dims)),
        (:line, 345, :none),
        (:(=), :indices_in, (:call, (:curly, :Vector, :Int), :ndims_in)),
        (:line, 346, :none),
        (:(=), :indices_out, (:call, (:curly, :Vector, :Int), :ndims_out)),
        (:line, 348, :none),
        (:(=), :length_out, (:call, :prod, :size_out)),
        (:line, 349, :none),
        (:(=), :R, (:call, :similar, :A, :size_out)),
        (:line, 351, :none),
        (:for, (:(=), :index_out, (:(:), 1, :length_out)), (:block,
            (:line, 352, :none),
            (:call, :ind2sub!, :indices_out, :size_out, :index_out),
            (:line, 353, :none),
            (:for, (:(=), :t, (:(:), 1, :ndims_in)), (:block,
                (:line, 355, :none),
                (:(=), (:ref, :indices_in, :t), (:call, :mod1, (:ref, :indices_out, :t), (:ref, :inner_size_out, :t))),
                (:line, 357, :none),
                (:(=), (:ref, :indices_in, :t), (:call, :fld1, (:ref, :indices_in, :t), (:ref, :inner, :t)))
              )),
            (:line, 359, :none),
            (:(=), :index_in, (:call, :sub2ind, :size_in, (:..., :indices_in))),
            (:line, 360, :none),
            (:(=), (:ref, :R, :index_out), (:ref, :A, :index_in))
          )),
        (:line, 363, :none),
        (:return, :R)
      ))
  ))