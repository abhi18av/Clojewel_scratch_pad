(:quote, (:block,
    (:line, 3, :none),
    (:typealias, :Callable, (:curly, :Union, :Function, :DataType)),
    (:line, 5, :none),
    (:const, (:(=), :Bottom, (:curly, :Union))),
    (:line, 7, :none),
    (:abstract, (:curly, :AbstractSet, :T)),
    (:line, 8, :none),
    (:abstract, (:curly, :Associative, :K, :V)),
    (:line, 12, :none),
    (:macro, (:call, :_inline_meta), (:block,
        (:line, 13, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :inline
          ))
      )),
    (:line, 15, :none),
    (:macro, (:call, :_noinline_meta), (:block,
        (:line, 16, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :noinline
          ))
      )),
    (:line, 18, :none),
    (:macro, (:call, :_pure_meta), (:block,
        (:line, 19, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :pure
          ))
      )),
    (:line, 22, :none),
    (:macro, (:call, :_propagate_inbounds_meta), (:block,
        (:line, 23, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :inline
          ), (:quote, #QuoteNode
            :propagate_inbounds
          ))
      )),
    (:line, 26, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), (:block,
        (:line, 26, :none),
        :x
      )),
    (:line, 28, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, (:curly, :Tuple))), (:(::), (:curly, :Tuple))), (:block,
        (:line, 28, :none),
        (:tuple,)
      )),
    (:line, 29, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Tuple)), (:(::), :x, :Tuple)), (:block,
        (:line, 29, :none),
        :x
      )),
    (:line, 30, :none),
    (:(=), (:call, (:curly, :convert, :T), (:(::), (:curly, :Type, (:curly, :Tuple, (:curly, :Vararg, :T)))), (:(::), :x, :Tuple)), (:block,
        (:line, 30, :none),
        (:call, :cnvt_all, :T, (:..., :x))
      )),
    (:line, 31, :none),
    (:(=), (:call, :cnvt_all, :T), (:block,
        (:line, 31, :none),
        (:tuple,)
      )),
    (:line, 32, :none),
    (:(=), (:call, :cnvt_all, :T, :x, (:..., :rest)), (:block,
        (:line, 32, :none),
        (:call, :tuple, (:call, :convert, :T, :x), (:..., (:call, :cnvt_all, :T, (:..., :rest))))
      )),
    (:line, 34, :none),
    (:macro, (:call, :generated, :f), (:block,
        (:line, 35, :none),
        (:||, (:call, :isa, :f, :Expr), (:call, :error, "invalid syntax; @generated must be used with a function definition")),
        (:line, 36, :none),
        (:if, (:||, (:call, :is, (:., :f, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :function
              )), (:&&, (:call, :isdefined, (:quote, #QuoteNode
                  :length
                )), (:&&, (:call, :is, (:., :f, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :(=)
                  )), (:&&, (:call, :(==), (:call, :length, (:., :f, (:quote, #QuoteNode
                          :args
                        ))), 2), (:call, :(==), (:., (:ref, (:., :f, (:quote, #QuoteNode
                            :args
                          )), 1), (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :call
                    )))))), (:block,
            (:line, 37, :none),
            (:(=), (:., :f, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :stagedfunction
              )),
            (:line, 38, :none),
            (:return, (:call, :Expr, (:quote, #QuoteNode
                  :escape
                ), :f))
          ), (:block,
            (:line, 40, :none),
            (:call, :error, "invalid syntax; @generated must be used with a function definition")
          ))
      )),
    (:line, 44, :none),
    (:(=), (:call, :argtail, :x, (:..., :rest)), (:block,
        (:line, 44, :none),
        :rest
      )),
    (:line, 45, :none),
    (:(=), (:call, :tail, (:(::), :x, :Tuple)), (:block,
        (:line, 45, :none),
        (:call, :argtail, (:..., :x))
      )),
    (:line, 47, :none),
    (:(=), (:call, :tuple_type_head, (:(::), :T, :TypeConstructor)), (:block,
        (:line, 47, :none),
        (:call, :tuple_type_head, (:., :T, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 48, :none),
    (:function, (:call, :tuple_type_head, (:(::), :T, :DataType)), (:block,
        (:line, 49, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 50, :none),
        (:||, (:call, :(===), (:., :T, (:quote, #QuoteNode
                :name
              )), (:., :Tuple, (:quote, #QuoteNode
                :name
              ))), (:call, :throw, (:call, :MethodError, :tuple_type_head, (:tuple, :T)))),
        (:line, 51, :none),
        (:return, (:ref, (:., :T, (:quote, #QuoteNode
                :parameters
              )), 1))
      )),
    (:line, 53, :none),
    (:(=), (:call, :tuple_type_tail, (:(::), :T, :TypeConstructor)), (:block,
        (:line, 53, :none),
        (:call, :tuple_type_tail, (:., :T, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 54, :none),
    (:function, (:call, :tuple_type_tail, (:(::), :T, :DataType)), (:block,
        (:line, 55, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 56, :none),
        (:||, (:call, :(===), (:., :T, (:quote, #QuoteNode
                :name
              )), (:., :Tuple, (:quote, #QuoteNode
                :name
              ))), (:call, :throw, (:call, :MethodError, :tuple_type_tail, (:tuple, :T)))),
        (:line, 57, :none),
        (:if, (:&&, (:call, :isvatuple, :T), (:call, :(==), (:call, :length, (:., :T, (:quote, #QuoteNode
                    :parameters
                  ))), 1)), (:block,
            (:line, 58, :none),
            (:return, :T)
          )),
        (:line, 60, :none),
        (:return, (:curly, :Tuple, (:..., (:call, :argtail, (:..., (:., :T, (:quote, #QuoteNode
                      :parameters
                    )))))))
      )),
    (:line, 63, :none),
    (:(=), (:call, :isvarargtype, (:(::), :t, :ANY)), (:block,
        (:line, 63, :none),
        (:&&, (:call, :isa, :t, :DataType), (:call, :is, (:., (:(::), :t, :DataType), (:quote, #QuoteNode
                :name
              )), (:., :Vararg, (:quote, #QuoteNode
                :name
              ))))
      )),
    (:line, 64, :none),
    (:(=), (:call, :isvatuple, (:(::), :t, :DataType)), (:block,
        (:line, 64, :none),
        (:block,
          (:(=), :n, (:call, :length, (:., :t, (:quote, #QuoteNode
                  :parameters
                )))),
          (:&&, (:call, :>, :n, 0), (:call, :isvarargtype, (:ref, (:., :t, (:quote, #QuoteNode
                    :parameters
                  )), :n)))
        )
      )),
    (:line, 65, :none),
    (:(=), (:call, :unwrapva, (:(::), :t, :ANY)), (:block,
        (:line, 65, :none),
        (:if, (:call, :isvarargtype, :t), (:ref, (:., :t, (:quote, #QuoteNode
                :parameters
              )), 1), :t)
      )),
    (:line, 67, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 67, :none),
        (:call, :tuple, (:call, :convert, (:call, :tuple_type_head, :T), (:ref, :x, 1)), (:..., (:call, :convert, (:call, :tuple_type_tail, :T), (:call, :tail, :x))))
      )),
    (:line, 69, :none),
    (:(=), (:call, (:curly, :convert, (:<:, :T, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), (:block,
        (:line, 69, :none),
        :x
      )),
    (:line, 71, :none),
    (:(=), (:call, :oftype, :x, :c), (:block,
        (:line, 71, :none),
        (:call, :convert, (:call, :typeof, :x), :c)
      )),
    (:line, 73, :none),
    (:(=), (:call, :unsigned, (:(::), :x, :Int)), (:block,
        (:line, 73, :none),
        (:call, :reinterpret, :UInt, :x)
      )),
    (:line, 74, :none),
    (:(=), (:call, :signed, (:(::), :x, :UInt)), (:block,
        (:line, 74, :none),
        (:call, :reinterpret, :Int, :x)
      )),
    (:line, 77, :none),
    (:(=), (:call, (:curly, :ptr_arg_cconvert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), :x), (:block,
        (:line, 77, :none),
        (:call, :cconvert, :T, :x)
      )),
    (:line, 78, :none),
    (:(=), (:call, (:curly, :ptr_arg_unsafe_convert, :T), (:(::), (:curly, :Type, (:curly, :Ptr, :T))), :x), (:block,
        (:line, 78, :none),
        (:call, :unsafe_convert, :T, :x)
      )),
    (:line, 79, :none),
    (:(=), (:call, :ptr_arg_unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :Void))), :x), (:block,
        (:line, 79, :none),
        :x
      )),
    (:line, 81, :none),
    (:(=), (:call, :cconvert, (:(::), :T, :Type), :x), (:block,
        (:line, 81, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 82, :none),
    (:(=), (:call, (:curly, :cconvert, (:<:, :P, :Ptr)), (:(::), (:curly, :Type, :P)), :x), (:block,
        (:line, 82, :none),
        :x
      )),
    (:line, 83, :none),
    (:(=), (:call, (:curly, :unsafe_convert, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), (:block,
        (:line, 83, :none),
        :x
      )),
    (:line, 84, :none),
    (:(=), (:call, (:curly, :unsafe_convert, (:<:, :P, :Ptr)), (:(::), (:curly, :Type, :P)), (:(::), :x, :Ptr)), (:block,
        (:line, 84, :none),
        (:call, :convert, :P, :x)
      )),
    (:line, 86, :none),
    (:(=), (:call, (:curly, :reinterpret, :T), (:(::), (:curly, :Type, :T)), :x), (:block,
        (:line, 86, :none),
        (:call, :box, :T, :x)
      )),
    (:line, 88, :none),
    (:(=), (:call, :sizeof, :x), (:block,
        (:line, 88, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :sizeof
            )), :x)
      )),
    (:line, 90, :none),
    (:function, (:call, :append_any, (:..., :xs)), (:block,
        (:line, 94, :none),
        (:(=), :out, (:call, (:curly, :Array, :Any), 4)),
        (:line, 95, :none),
        (:(=), :l, 4),
        (:line, 96, :none),
        (:(=), :i, 1),
        (:line, 97, :none),
        (:for, (:(=), :x, :xs), (:block,
            (:line, 98, :none),
            (:for, (:(=), :y, :x), (:block,
                (:line, 99, :none),
                (:if, (:call, :>, :i, :l), (:block,
                    (:line, 100, :none),
                    (:ccall, (:quote, #QuoteNode
                        :jl_array_grow_end
                      ), :Void, (:tuple, :Any, :UInt), :out, 16),
                    (:line, 101, :none),
                    (:+=, :l, 16)
                  )),
                (:line, 103, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :arrayset
                    )), :out, :y, :i),
                (:line, 104, :none),
                (:+=, :i, 1)
              ))
          )),
        (:line, 107, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_array_del_end
          ), :Void, (:tuple, :Any, :UInt), :out, (:call, :+, (:call, :-, :l, :i), 1)),
        (:line, 108, :none),
        :out
      )),
    (:line, 112, :none),
    (:(=), (:call, :setindex!, (:(::), :A, (:curly, :Array, :Any)), (:(::), :x, :ANY), (:(::), :i, :Int)), (:block,
        (:line, 112, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :arrayset
            )), :A, :x, :i)
      )),
    (:line, 114, :none),
    (:function, (:call, :length_checked_equal, (:..., :args)), (:block,
        (:line, 115, :none),
        (:(=), :n, (:call, :length, (:ref, :args, 1))),
        (:line, 116, :none),
        (:for, (:(=), :i, (:(:), 2, (:call, :length, :args))), (:block,
            (:line, 117, :none),
            (:if, (:call, :(!=), (:call, :length, (:ref, :args, :i)), :n), (:block,
                (:line, 118, :none),
                (:call, :error, "argument dimensions must match")
              ))
          )),
        (:line, 121, :none),
        :n
      )),
    (:line, 124, :none),
    (:(=), (:call, :map, (:(::), :f, :Function), (:(::), :a, (:curly, :Array, :Any, 1))), (:block,
        (:line, 124, :none),
        (:typed_comprehension, :Any, (:generator, (:call, :f, (:ref, :a, :i)), (:(=), :i, (:(:), 1, (:call, :length, :a)))))
      )),
    (:line, 126, :none),
    (:function, (:call, :precompile, (:(::), :f, :ANY), (:(::), :args, :Tuple)), (:block,
        (:line, 127, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_compile_hint
            ), :Cint, (:tuple, :Any), (:curly, :Tuple, (:call, (:., :Core, (:quote, #QuoteNode
                    :Typeof
                  )), :f), (:..., :args))), 0)
      )),
    (:line, 130, :none),
    (:function, (:call, :precompile, (:(::), :argt, :Type)), (:block,
        (:line, 131, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_compile_hint
            ), :Cint, (:tuple, :Any), :argt), 0)
      )),
    (:line, 134, :none),
    (:(=), (:call, :esc, (:(::), :e, :ANY)), (:block,
        (:line, 134, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :escape
          ), :e)
      )),
    (:line, 136, :none),
    (:macro, (:call, :boundscheck, :blk), (:block,
        (:line, 138, :none),
        (:quote, (:block,
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :boundscheck
                ), true)),
            (:$, (:call, :esc, :blk)),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :boundscheck
                ), (:quote, #QuoteNode
                  :pop
                )))
          ))
      )),
    (:line, 143, :none),
    (:macro, (:call, :inbounds, :blk), (:block,
        (:line, 144, :none),
        (:quote, (:block,
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :inbounds
                ), true)),
            (:$, (:call, :esc, :blk)),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :inbounds
                ), (:quote, #QuoteNode
                  :pop
                )))
          ))
      )),
    (:line, 149, :none),
    (:macro, (:call, :label, (:(::), :name, :Symbol)), (:block,
        (:line, 150, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :symboliclabel
          ), :name)
      )),
    (:line, 153, :none),
    (:macro, (:call, :goto, (:(::), :name, :Symbol)), (:block,
        (:line, 154, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :symbolicgoto
          ), :name)
      )),
    (:line, 159, :none),
    (:function, (:call, :getindex, (:(::), :v, :SimpleVector), (:(::), :i, :Int)), (:block,
        (:line, 160, :none),
        (:if, (:call, :!, (:comparison, 1, :(<=), :i, :(<=), (:call, :length, :v))), (:block,
            (:line, 161, :none),
            (:call, :throw, (:call, :BoundsError, :v, :i))
          )),
        (:line, 163, :none),
        (:(=), :x, (:call, :unsafe_load, (:call, :+, (:call, :convert, (:curly, :Ptr, (:curly, :Ptr, :Void)), (:call, :data_pointer_from_objref, :v)), (:call, :*, :i, (:call, :sizeof, :Ptr))))),
        (:line, 164, :none),
        (:&&, (:call, :(==), :x, :C_NULL), (:call, :throw, (:call, :UndefRefError))),
        (:line, 165, :none),
        (:return, (:call, :unsafe_pointer_to_objref, :x))
      )),
    (:line, 168, :none),
    (:(=), (:call, :length, (:(::), :v, :SimpleVector)), (:block,
        (:line, 168, :none),
        (:., :v, (:quote, #QuoteNode
            :length
          ))
      )),
    (:line, 169, :none),
    (:(=), (:call, :endof, (:(::), :v, :SimpleVector)), (:block,
        (:line, 169, :none),
        (:., :v, (:quote, #QuoteNode
            :length
          ))
      )),
    (:line, 170, :none),
    (:(=), (:call, :start, (:(::), :v, :SimpleVector)), (:block,
        (:line, 170, :none),
        1
      )),
    (:line, 171, :none),
    (:(=), (:call, :next, (:(::), :v, :SimpleVector), :i), (:block,
        (:line, 171, :none),
        (:tuple, (:ref, :v, :i), (:call, :+, :i, 1))
      )),
    (:line, 172, :none),
    (:(=), (:call, :done, (:(::), :v, :SimpleVector), :i), (:block,
        (:line, 172, :none),
        (:call, :>, :i, (:., :v, (:quote, #QuoteNode
              :length
            )))
      )),
    (:line, 173, :none),
    (:(=), (:call, :isempty, (:(::), :v, :SimpleVector)), (:block,
        (:line, 173, :none),
        (:call, :(==), (:., :v, (:quote, #QuoteNode
              :length
            )), 0)
      )),
    (:line, 174, :none),
    (:(=), (:call, :indices, (:(::), :v, :SimpleVector)), (:block,
        (:line, 174, :none),
        (:tuple, (:call, :OneTo, (:call, :length, :v)))
      )),
    (:line, 175, :none),
    (:(=), (:call, :linearindices, (:(::), :v, :SimpleVector)), (:block,
        (:line, 175, :none),
        (:call, :indices, :v, 1)
      )),
    (:line, 176, :none),
    (:(=), (:call, :indices, (:(::), :v, :SimpleVector), :d), (:block,
        (:line, 176, :none),
        (:if, (:call, :(<=), :d, 1), (:ref, (:call, :indices, :v), :d), (:call, :OneTo, 1))
      )),
    (:line, 178, :none),
    (:function, (:call, :(==), (:(::), :v1, :SimpleVector), (:(::), :v2, :SimpleVector)), (:block,
        (:line, 179, :none),
        (:||, (:call, :(==), (:call, :length, :v1), (:call, :length, :v2)), (:return, false)),
        (:line, 180, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :v1))), (:block,
            (:line, 181, :none),
            (:||, (:call, :(==), (:ref, :v1, :i), (:ref, :v2, :i)), (:return, false))
          )),
        (:line, 183, :none),
        (:return, true)
      )),
    (:line, 186, :none),
    (:(=), (:call, :map, :f, (:(::), :v, :SimpleVector)), (:block,
        (:line, 186, :none),
        (:typed_comprehension, :Any, (:generator, (:call, :f, (:ref, :v, :i)), (:(=), :i, (:(:), 1, (:call, :length, :v)))))
      )),
    (:line, 188, :none),
    (:(=), (:call, :getindex, (:(::), :v, :SimpleVector), (:(::), :I, :AbstractArray)), (:block,
        (:line, 188, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :svec
            )), (:..., (:typed_comprehension, :Any, (:generator, (:ref, :v, :i), (:(=), :i, :I)))))
      )),
    (:line, 190, :none),
    "    isassigned(array, i) -> Bool\n\nTests whether the given array has a value associated with index `i`. Returns `false`\nif the index is out of bounds, or has an undefined reference.\n",
    (:line, 196, :none),
    (:function, :isassigned),
    (:line, 198, :none),
    (:function, (:call, :isassigned, (:(::), :v, :SimpleVector), (:(::), :i, :Int)), (:block,
        (:line, 199, :none),
        (:||, (:comparison, 1, :(<=), :i, :(<=), (:call, :length, :v)), (:return, false)),
        (:line, 200, :none),
        (:(=), :x, (:call, :unsafe_load, (:call, :+, (:call, :convert, (:curly, :Ptr, (:curly, :Ptr, :Void)), (:call, :data_pointer_from_objref, :v)), (:call, :*, :i, (:call, :sizeof, :Ptr))))),
        (:line, 201, :none),
        (:return, (:call, :(!=), :x, :C_NULL))
      )),
    (:line, 205, :none),
    (:type, false, :Colon, (:block,
        (:line, 206, :none)
      )),
    (:line, 207, :none),
    (:const, (:(=), :(:), (:call, :Colon))),
    (:line, 210, :none),
    (:type, false, (:curly, :Val, :T), (:block,
        (:line, 211, :none)
      )),
    (:line, 214, :none),
    (:function, (:call, :vector_any, (:..., (:(::), :xs, :ANY))), (:block,
        (:line, 215, :none),
        (:(=), :n, (:call, :length, :xs)),
        (:line, 216, :none),
        (:(=), :a, (:call, (:curly, :Array, :Any), :n)),
        (:line, 217, :none),
        (:macrocall, Symbol("@inbounds"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 218, :none),
              (:call, (:., :Core, (:quote, #QuoteNode
                    :arrayset
                  )), :a, (:ref, :xs, :i), :i)
            ))),
        (:line, 220, :none),
        :a
      ))
  ))