(:quote, (:block,
    (:line, 3, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :s, :Symbol)), (:block,
        (:line, 3, :none),
        (:block,
          (:call, :write, :io, :s),
          :nothing
        )
      )),
    (:line, 5, :none),
    "    IOContext\n\nIOContext provides a mechanism for passing output configuration settings among `show` methods.\n\nIn short, it is an immutable dictionary that is a subclass of `IO`. It supports standard\ndictionary operations such as `getindex`, and can also be used as an I/O stream.\n",
    (:line, 13, :none),
    (:type, false, (:<:, (:curly, :IOContext, (:<:, :IO_t, :IO)), :AbstractPipe), (:block,
        (:line, 14, :none),
        (:(::), :io, :IO_t),
        (:line, 15, :none),
        (:(::), :dict, (:curly, :ImmutableDict, :Symbol, :Any)),
        (:line, 16, :none),
        (:function, (:call, :IOContext, (:(::), :io, :IO_t), (:(::), :dict, (:curly, :ImmutableDict, :Symbol, :Any))), (:block,
            (:line, 17, :none),
            (:call, :assert, (:call, :!, (:<:, :IO_t, :IOContext))),
            (:line, 18, :none),
            (:return, (:call, :new, :io, :dict))
          ))
      )),
    (:line, 22, :none),
    "    IOContext(io::IO; properties...)\n\nThe same as `IOContext(io::IO, KV::Pair)`, but accepting properties as keyword arguments.\n",
    (:line, 27, :none),
    (:(=), (:call, :IOContext, (:parameters, (:..., :kws)), (:(::), :io, :IO)), (:block,
        (:line, 27, :none),
        (:call, :IOContext, (:parameters, (:..., :kws)), (:call, :IOContext, :io, (:call, (:curly, :ImmutableDict, :Symbol, :Any))))
      )),
    (:line, 28, :none),
    (:function, (:call, :IOContext, (:parameters, (:..., :kws)), (:(::), :io, :IOContext)), (:block,
        (:line, 29, :none),
        (:for, (:(=), (:tuple, :k, :v), :kws), (:block,
            (:line, 30, :none),
            (:(=), :io, (:call, :IOContext, :io, :k, :v))
          )),
        (:line, 32, :none),
        :io
      )),
    (:line, 35, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IOContext), (:(::), :dict, :ImmutableDict)), (:block,
        (:line, 35, :none),
        (:call, (:call, :typeof, :io), (:., :io, (:quote, #QuoteNode
              :io
            )), :dict)
      )),
    (:line, 36, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IO), (:(::), :dict, :ImmutableDict)), (:block,
        (:line, 36, :none),
        (:call, (:curly, :IOContext, (:call, :typeof, :io)), :io, :dict)
      )),
    (:line, 38, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IO), :key, :value), (:block,
        (:line, 38, :none),
        (:call, :IOContext, :io, (:call, (:curly, :ImmutableDict, :Symbol, :Any), :key, :value))
      )),
    (:line, 39, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IOContext), :key, :value), (:block,
        (:line, 39, :none),
        (:call, :IOContext, :io, (:call, (:curly, :ImmutableDict, :Symbol, :Any), (:., :io, (:quote, #QuoteNode
                :dict
              )), :key, :value))
      )),
    (:line, 41, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IO), (:(::), :context, :IO)), (:block,
        (:line, 41, :none),
        (:call, :IOContext, :io)
      )),
    (:line, 43, :none),
    "    IOContext(io::IO, context::IOContext)\n\nCreate an `IOContext` that wraps an alternate `IO` but inherits the properties of `context`.\n",
    (:line, 48, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IO), (:(::), :context, :IOContext)), (:block,
        (:line, 48, :none),
        (:call, :IOContext, :io, (:., :context, (:quote, #QuoteNode
              :dict
            )))
      )),
    (:line, 50, :none),
    "    IOContext(io::IO, KV::Pair)\n\nCreate an `IOContext` that wraps a given stream, adding the specified `key=>value` pair to\nthe properties of that stream (note that `io` can itself be an `IOContext`).\n\n - use `(key => value) in dict` to see if this particular combination is in the properties set\n - use `get(dict, key, default)` to retrieve the most recent value for a particular key\n\nThe following properties are in common use:\n\n - `:compact`: Boolean specifying that small values should be printed more compactly, e.g.\n   that numbers should be printed with fewer digits. This is set when printing array\n   elements.\n - `:limit`: Boolean specifying that containers should be truncated, e.g. showing `â€¦` in\n   place of most elements.\n - `:displaysize`: A `Tuple{Int,Int}` giving the size in rows and columns to use for text\n   output. This can be used to override the display size for called functions, but to\n   get the size of the screen use the `displaysize` function.\n",
    (:line, 70, :none),
    (:(=), (:call, :IOContext, (:(::), :io, :IO), (:(::), :KV, :Pair)), (:block,
        (:line, 70, :none),
        (:call, :IOContext, :io, (:ref, :KV, 1), (:ref, :KV, 2))
      )),
    (:line, 72, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :ctx, :IOContext)), (:block,
        (:line, 72, :none),
        (:block,
          (:call, :print, :io, "IOContext("),
          (:call, :show, :io, (:., :ctx, (:quote, #QuoteNode
                :io
              ))),
          (:call, :print, :io, ")")
        )
      )),
    (:line, 74, :none),
    (:(=), (:call, :pipe_reader, (:(::), :io, :IOContext)), (:block,
        (:line, 74, :none),
        (:., :io, (:quote, #QuoteNode
            :io
          ))
      )),
    (:line, 75, :none),
    (:(=), (:call, :pipe_writer, (:(::), :io, :IOContext)), (:block,
        (:line, 75, :none),
        (:., :io, (:quote, #QuoteNode
            :io
          ))
      )),
    (:line, 76, :none),
    (:(=), (:call, :lock, (:(::), :io, :IOContext)), (:block,
        (:line, 76, :none),
        (:call, :lock, (:., :io, (:quote, #QuoteNode
              :io
            )))
      )),
    (:line, 77, :none),
    (:(=), (:call, :unlock, (:(::), :io, :IOContext)), (:block,
        (:line, 77, :none),
        (:call, :unlock, (:., :io, (:quote, #QuoteNode
              :io
            )))
      )),
    (:line, 79, :none),
    (:(=), (:call, :in, (:(::), :key_value, :Pair), (:(::), :io, :IOContext)), (:block,
        (:line, 79, :none),
        (:call, :in, :key_value, (:., :io, (:quote, #QuoteNode
              :dict
            )), :is)
      )),
    (:line, 80, :none),
    (:(=), (:call, :in, (:(::), :key_value, :Pair), (:(::), :io, :IO)), (:block,
        (:line, 80, :none),
        false
      )),
    (:line, 81, :none),
    (:(=), (:call, :haskey, (:(::), :io, :IOContext), :key), (:block,
        (:line, 81, :none),
        (:call, :haskey, (:., :io, (:quote, #QuoteNode
              :dict
            )), :key)
      )),
    (:line, 82, :none),
    (:(=), (:call, :haskey, (:(::), :io, :IO), :key), (:block,
        (:line, 82, :none),
        false
      )),
    (:line, 83, :none),
    (:(=), (:call, :getindex, (:(::), :io, :IOContext), :key), (:block,
        (:line, 83, :none),
        (:call, :getindex, (:., :io, (:quote, #QuoteNode
              :dict
            )), :key)
      )),
    (:line, 84, :none),
    (:(=), (:call, :getindex, (:(::), :io, :IO), :key), (:block,
        (:line, 84, :none),
        (:call, :throw, (:call, :KeyError, :key))
      )),
    (:line, 85, :none),
    (:(=), :_limit_output, :nothing),
    (:line, 86, :none),
    (:function, (:call, :get, (:(::), :io, :IOContext), :key, :default), (:block,
        (:line, 87, :none),
        (:if, (:&&, (:call, :(===), :key, (:quote, #QuoteNode
                :limit
              )), (:call, :(!==), :_limit_output, :nothing)), (:block,
            (:line, 88, :none),
            (:(=), :default, (:(::), :_limit_output, :Bool))
          )),
        (:line, 90, :none),
        (:call, :get, (:., :io, (:quote, #QuoteNode
              :dict
            )), :key, :default)
      )),
    (:line, 92, :none),
    (:function, (:call, :get, (:(::), :io, :IO), :key, :default), (:block,
        (:line, 93, :none),
        (:if, (:&&, (:call, :(===), :key, (:quote, #QuoteNode
                :limit
              )), (:call, :(!==), :_limit_output, :nothing)), (:block,
            (:line, 94, :none),
            (:return, (:(::), :_limit_output, :Bool))
          )),
        (:line, 96, :none),
        :default
      )),
    (:line, 99, :none),
    (:(=), (:call, :displaysize, (:(::), :io, :IOContext)), (:block,
        (:line, 99, :none),
        (:if, (:call, :haskey, :io, (:quote, #QuoteNode
              :displaysize
            )), (:ref, :io, (:quote, #QuoteNode
              :displaysize
            )), (:call, :displaysize, (:., :io, (:quote, #QuoteNode
                :io
              ))))
      )),
    (:line, 101, :none),
    (:(=), (:call, :show_circular, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
        (:line, 101, :none),
        false
      )),
    (:line, 102, :none),
    (:function, (:call, :show_circular, (:(::), :io, :IOContext), (:(::), :x, :ANY)), (:block,
        (:line, 103, :none),
        (:(=), :d, 1),
        (:line, 104, :none),
        (:for, (:(=), (:tuple, :k, :v), (:., :io, (:quote, #QuoteNode
                :dict
              ))), (:block,
            (:line, 105, :none),
            (:if, (:call, :(===), :k, (:quote, #QuoteNode
                  :SHOWN_SET
                )), (:block,
                (:line, 106, :none),
                (:if, (:call, :(===), :v, :x), (:block,
                    (:line, 107, :none),
                    (:call, :print, :io, (:string, "#= circular reference @-", :d, " =#")),
                    (:line, 108, :none),
                    (:return, true)
                  )),
                (:line, 110, :none),
                (:+=, :d, 1)
              ))
          )),
        (:line, 113, :none),
        (:return, false)
      )),
    (:line, 116, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
        (:line, 116, :none),
        (:call, :show_default, :io, :x)
      )),
    (:line, 117, :none),
    (:function, (:call, :show_default, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
        (:line, 118, :none),
        (:(=), :t, (:(::), (:call, :typeof, :x), :DataType)),
        (:line, 119, :none),
        (:call, :show, :io, :t),
        (:line, 120, :none),
        (:call, :print, :io, '('),
        (:line, 121, :none),
        (:(=), :nf, (:call, :nfields, :t)),
        (:line, 122, :none),
        (:if, (:||, (:call, :(!=), :nf, 0), (:call, :(==), (:., :t, (:quote, #QuoteNode
                  :size
                )), 0)), (:block,
            (:line, 123, :none),
            (:if, (:call, :!, (:call, :show_circular, :io, :x)), (:block,
                (:line, 124, :none),
                (:(=), :recur_io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                        :SHOWN_SET
                      ), :x))),
                (:line, 125, :none),
                (:for, (:(=), :i, (:(:), 1, :nf)), (:block,
                    (:line, 126, :none),
                    (:(=), :f, (:call, :fieldname, :t, :i)),
                    (:line, 127, :none),
                    (:if, (:call, :!, (:call, :isdefined, :x, :f)), (:block,
                        (:line, 128, :none),
                        (:call, :print, :io, :undef_ref_str)
                      ), (:block,
                        (:line, 130, :none),
                        (:call, :show, :recur_io, (:call, :getfield, :x, :f))
                      )),
                    (:line, 132, :none),
                    (:if, (:call, :<, :i, :nf), (:block,
                        (:line, 133, :none),
                        (:call, :print, :io, ',')
                      ))
                  ))
              ))
          ), (:block,
            (:line, 138, :none),
            (:(=), :nb, (:., :t, (:quote, #QuoteNode
                  :size
                ))),
            (:line, 139, :none),
            (:call, :print, :io, "0x"),
            (:line, 140, :none),
            (:(=), :p, (:call, :data_pointer_from_objref, :x)),
            (:line, 141, :none),
            (:for, (:(=), :i, (:(:), (:call, :-, :nb, 1), -1, 0)), (:block,
                (:line, 142, :none),
                (:call, :print, :io, (:call, :hex, (:call, :unsafe_load, (:call, :convert, (:curly, :Ptr, :UInt8), (:call, :+, :p, :i))), 2))
              ))
          )),
        (:line, 145, :none),
        (:call, :print, :io, ')')
      )),
    (:line, 149, :none),
    (:function, (:call, :is_exported_from_stdlib, (:(::), :name, :Symbol), (:(::), :mod, :Module)), (:block,
        (:line, 150, :none),
        (:&&, (:call, :!, (:call, :isdefined, :mod, :name)), (:return, false)),
        (:line, 151, :none),
        (:(=), :orig, (:call, :getfield, :mod, :name)),
        (:line, 152, :none),
        (:while, (:call, :!, (:||, (:call, :(===), :mod, :Base), (:call, :(===), :mod, :Core))), (:block,
            (:line, 153, :none),
            (:(=), :parent, (:call, :module_parent, :mod)),
            (:line, 154, :none),
            (:if, (:||, (:call, :(===), :mod, :Main), (:||, (:call, :(===), :mod, :parent), (:call, :(===), :parent, :Main))), (:block,
                (:line, 155, :none),
                (:return, false)
              )),
            (:line, 157, :none),
            (:(=), :mod, :parent)
          )),
        (:line, 159, :none),
        (:return, (:&&, (:call, :isexported, :mod, :name), (:&&, (:call, :isdefined, :mod, :name), (:call, :(===), (:call, :getfield, :mod, :name), :orig))))
      )),
    (:line, 162, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :f, :Function)), (:block,
        (:line, 163, :none),
        (:(=), :ft, (:call, :typeof, :f)),
        (:line, 164, :none),
        (:(=), :mt, (:., (:., :ft, (:quote, #QuoteNode
                :name
              )), (:quote, #QuoteNode
              :mt
            ))),
        (:line, 165, :none),
        (:if, (:||, (:call, :!, (:call, :isdefined, :mt, (:quote, #QuoteNode
                  :module
                ))), (:||, (:call, :is_exported_from_stdlib, (:., :mt, (:quote, #QuoteNode
                    :name
                  )), (:., :mt, (:quote, #QuoteNode
                    :module
                  ))), (:call, :(===), (:., :mt, (:quote, #QuoteNode
                    :module
                  )), :Main))), (:block,
            (:line, 166, :none),
            (:call, :print, :io, (:., :mt, (:quote, #QuoteNode
                  :name
                )))
          ), (:block,
            (:line, 168, :none),
            (:call, :print, :io, (:., :mt, (:quote, #QuoteNode
                  :module
                )), ".", (:., :mt, (:quote, #QuoteNode
                  :name
                )))
          ))
      )),
    (:line, 172, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :x, (:., :Core, (:quote, #QuoteNode
              :IntrinsicFunction
            )))), (:block,
        (:line, 173, :none),
        (:call, :print, :io, "(intrinsic function #", (:call, :box, :Int32, (:call, :unbox, (:., :Core, (:quote, #QuoteNode
                  :IntrinsicFunction
                )), :x)), ")")
      )),
    (:line, 176, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :x, :Union)), (:block,
        (:line, 177, :none),
        (:call, :print, :io, "Union"),
        (:line, 178, :none),
        (:(=), :sorted_types, (:call, :sort!, (:parameters, (:kw, :by, :string)), (:call, :collect, (:., :x, (:quote, #QuoteNode
                  :types
                ))))),
        (:line, 179, :none),
        (:call, :show_comma_array, :io, :sorted_types, '{', '}')
      )),
    (:line, 182, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :x, :TypeConstructor)), (:block,
        (:line, 182, :none),
        (:call, :show, :io, (:., :x, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 184, :none),
    (:function, (:call, :show_type_parameter, (:(::), :io, :IO), (:(::), :p, :ANY), (:(::), :has_tvar_env, :Bool)), (:block,
        (:line, 185, :none),
        (:if, :has_tvar_env, (:block,
            (:line, 186, :none),
            (:call, :show, :io, :p)
          ), (:block,
            (:line, 188, :none),
            (:call, :show, (:call, :IOContext, :io, (:quote, #QuoteNode
                  :tvar_env
                ), true), :p)
          ))
      )),
    (:line, 192, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :x, :DataType)), (:block,
        (:line, 192, :none),
        (:call, :show_datatype, :io, :x)
      )),
    (:line, 193, :none),
    (:function, (:call, :show_datatype, (:(::), :io, :IO), (:(::), :x, :DataType)), (:block,
        (:line, 194, :none),
        (:call, :show, :io, (:., :x, (:quote, #QuoteNode
              :name
            ))),
        (:line, 197, :none),
        (:(=), :has_tvar_env, (:call, :(!==), (:call, :get, :io, (:quote, #QuoteNode
                :tvar_env
              ), false), false)),
        (:line, 198, :none),
        (:if, (:&&, (:||, (:call, :!, (:call, :isempty, (:., :x, (:quote, #QuoteNode
                      :parameters
                    )))), (:call, :(===), (:., :x, (:quote, #QuoteNode
                    :name
                  )), (:., :Tuple, (:quote, #QuoteNode
                    :name
                  )))), (:&&, (:call, :(!==), :x, :Tuple), (:call, :!, (:&&, :has_tvar_env, (:call, :(===), (:., (:., :x, (:quote, #QuoteNode
                          :name
                        )), (:quote, #QuoteNode
                        :primary
                      )), :x))))), (:block,
            (:line, 204, :none),
            (:call, :print, :io, '{'),
            (:line, 205, :none),
            (:(=), :n, (:call, :length, (:., :x, (:quote, #QuoteNode
                    :parameters
                  )))),
            (:line, 206, :none),
            (:for, (:(=), (:tuple, :i, :p), (:call, :enumerate, (:., :x, (:quote, #QuoteNode
                      :parameters
                    )))), (:block,
                (:line, 207, :none),
                (:call, :show_type_parameter, :io, :p, :has_tvar_env),
                (:line, 208, :none),
                (:&&, (:call, :<, :i, :n), (:call, :print, :io, ','))
              )),
            (:line, 210, :none),
            (:call, :print, :io, '}')
          ))
      )),
    (:line, 214, :none),
    (:macro, (:call, :show, (:..., :exs)), (:block,
        (:line, 215, :none),
        (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
              :block
            ))),
        (:line, 216, :none),
        (:for, (:(=), :ex, :exs), (:block,
            (:line, 217, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:call, :println, (:$, (:call, :*, (:call, :sprint, :show_unquoted, :ex), " = ")), (:call, :repr, (:block,
                      (:line, 218, :none),
                      (:(=), :value, (:$, (:call, :esc, :ex)))
                    )))))
          )),
        (:line, 220, :none),
        (:if, (:call, :!, (:call, :isempty, :exs)), (:block,
            (:line, 220, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, #QuoteNode
                :value
              ))
          )),
        (:line, 221, :none),
        (:return, :blk)
      )),
    (:line, 224, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :tn, :TypeName)), (:block,
        (:line, 225, :none),
        (:if, (:||, (:call, :is_exported_from_stdlib, (:., :tn, (:quote, #QuoteNode
                  :name
                )), (:., :tn, (:quote, #QuoteNode
                  :module
                ))), (:call, :(===), (:., :tn, (:quote, #QuoteNode
                  :module
                )), :Main)), (:block,
            (:line, 226, :none),
            (:call, :print, :io, (:., :tn, (:quote, #QuoteNode
                  :name
                )))
          ), (:block,
            (:line, 228, :none),
            (:call, :print, :io, (:., :tn, (:quote, #QuoteNode
                  :module
                )), '.', (:., :tn, (:quote, #QuoteNode
                  :name
                )))
          ))
      )),
    (:line, 232, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :Void)), (:block,
        (:line, 232, :none),
        (:call, :print, :io, "nothing")
      )),
    (:line, 233, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :b, :Bool)), (:block,
        (:line, 233, :none),
        (:call, :print, :io, (:if, :b, "true", "false"))
      )),
    (:line, 234, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :n, :Signed)), (:block,
        (:line, 234, :none),
        (:block,
          (:call, :write, :io, (:call, :dec, :n)),
          :nothing
        )
      )),
    (:line, 235, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :n, :Unsigned)), (:block,
        (:line, 235, :none),
        (:call, :print, :io, "0x", (:call, :hex, :n, (:call, :<<, (:call, :sizeof, :n), 1)))
      )),
    (:line, 236, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :n, :Unsigned)), (:block,
        (:line, 236, :none),
        (:call, :print, :io, (:call, :dec, :n))
      )),
    (:line, 238, :none),
    (:(=), (:call, (:curly, :show, :T), (:(::), :io, :IO), (:(::), :p, (:curly, :Ptr, :T))), (:block,
        (:line, 238, :none),
        (:call, :print, :io, (:call, :typeof, :p), (:string, " @0x", (:call, :hex, (:call, :UInt, :p), (:call, :>>, (:., :Sys, (:quote, #QuoteNode
                    :WORD_SIZE
                  )), 2))))
      )),
    (:line, 240, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :p, :Pair)), (:block,
        (:line, 241, :none),
        (:if, (:||, (:call, :(!=), (:call, :typeof, (:., :p, (:quote, #QuoteNode
                    :first
                  ))), (:ref, (:., (:call, :typeof, :p), (:quote, #QuoteNode
                    :parameters
                  )), 1)), (:call, :(!=), (:call, :typeof, (:., :p, (:quote, #QuoteNode
                    :second
                  ))), (:ref, (:., (:call, :typeof, :p), (:quote, #QuoteNode
                    :parameters
                  )), 2))), (:block,
            (:line, 243, :none),
            (:return, (:call, :show_default, :io, :p))
          )),
        (:line, 246, :none),
        (:&&, (:call, :isa, (:., :p, (:quote, #QuoteNode
                :first
              )), :Pair), (:call, :print, :io, "(")),
        (:line, 247, :none),
        (:call, :show, :io, (:., :p, (:quote, #QuoteNode
              :first
            ))),
        (:line, 248, :none),
        (:&&, (:call, :isa, (:., :p, (:quote, #QuoteNode
                :first
              )), :Pair), (:call, :print, :io, ")")),
        (:line, 249, :none),
        (:call, :print, :io, "=>"),
        (:line, 250, :none),
        (:&&, (:call, :isa, (:., :p, (:quote, #QuoteNode
                :second
              )), :Pair), (:call, :print, :io, "(")),
        (:line, 251, :none),
        (:call, :show, :io, (:., :p, (:quote, #QuoteNode
              :second
            ))),
        (:line, 252, :none),
        (:&&, (:call, :isa, (:., :p, (:quote, #QuoteNode
                :second
              )), :Pair), (:call, :print, :io, ")")),
        (:line, 253, :none),
        :nothing
      )),
    (:line, 256, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :m, :Module)), (:block,
        (:line, 257, :none),
        (:if, (:call, :is, :m, :Main), (:block,
            (:line, 258, :none),
            (:call, :print, :io, "Main")
          ), (:block,
            (:line, 260, :none),
            (:call, :print, :io, (:call, :join, (:call, :fullname, :m), "."))
          ))
      )),
    (:line, 264, :none),
    (:function, (:call, :lambdainfo_slotnames, (:(::), :l, :LambdaInfo)), (:block,
        (:line, 265, :none),
        (:(=), :slotnames, (:., :l, (:quote, #QuoteNode
              :slotnames
            ))),
        (:line, 266, :none),
        (:||, (:call, :isa, :slotnames, :Array), (:return, (:ref, :String))),
        (:line, 267, :none),
        (:(=), :names, (:call, (:curly, :Dict, :String, :Int))),
        (:line, 268, :none),
        (:(=), :printnames, (:call, (:curly, :Vector, :String), (:call, :length, :slotnames))),
        (:line, 269, :none),
        (:for, (:(=), :i, (:call, :eachindex, :slotnames)), (:block,
            (:line, 270, :none),
            (:(=), :name, (:call, :string, (:ref, :slotnames, :i))),
            (:line, 271, :none),
            (:(=), :idx, (:call, :get!, :names, :name, :i)),
            (:line, 272, :none),
            (:if, (:call, :(!=), :idx, :i), (:block,
                (:line, 273, :none),
                (:(=), :printname, (:string, :name, "@_", :i)),
                (:line, 274, :none),
                (:&&, (:call, :>, :idx, 0), (:(=), (:ref, :printnames, :idx), (:string, :name, "@_", :idx))),
                (:line, 275, :none),
                (:(=), (:ref, :names, :name), 0)
              ), (:block,
                (:line, 277, :none),
                (:(=), :printname, :name)
              )),
            (:line, 279, :none),
            (:(=), (:ref, :printnames, :i), :printname)
          )),
        (:line, 281, :none),
        (:return, :printnames)
      )),
    (:line, 284, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :l, :LambdaInfo)), (:block,
        (:line, 285, :none),
        (:if, (:call, :isdefined, :l, (:quote, #QuoteNode
              :def
            )), (:block,
            (:line, 286, :none),
            (:if, (:call, :(===), :l, (:., (:., :l, (:quote, #QuoteNode
                      :def
                    )), (:quote, #QuoteNode
                    :lambda_template
                  ))), (:block,
                (:line, 287, :none),
                (:call, :print, :io, "LambdaInfo template for "),
                (:line, 288, :none),
                (:call, :show, :io, (:., :l, (:quote, #QuoteNode
                      :def
                    )))
              ), (:block,
                (:line, 290, :none),
                (:call, :print, :io, "LambdaInfo for "),
                (:line, 291, :none),
                (:call, :show_lambda_types, :io, :l)
              ))
          ), (:block,
            (:line, 294, :none),
            (:call, :print, :io, "Toplevel LambdaInfo thunk")
          ))
      )),
    (:line, 298, :none),
    (:function, (:call, :show_delim_array, (:(::), :io, :IO), (:(::), :itr, (:curly, :Union, :AbstractArray, :SimpleVector)), :op, :delim, :cl, :delim_one, (:kw, :i1, (:call, :first, (:call, :linearindices, :itr))), (:kw, :l, (:call, :last, (:call, :linearindices, :itr)))), (:block,
        (:line, 300, :none),
        (:call, :print, :io, :op),
        (:line, 301, :none),
        (:if, (:call, :!, (:call, :show_circular, :io, :itr)), (:block,
            (:line, 302, :none),
            (:(=), :recur_io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :SHOWN_SET
                  ), :itr))),
            (:line, 303, :none),
            (:if, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                    :compact
                  ))), (:block,
                (:line, 304, :none),
                (:(=), :recur_io, (:call, :IOContext, :recur_io, (:(=>), (:quote, #QuoteNode
                        :compact
                      ), true)))
              )),
            (:line, 306, :none),
            (:(=), :newline, true),
            (:line, 307, :none),
            (:(=), :first, true),
            (:line, 308, :none),
            (:(=), :i, :i1),
            (:line, 309, :none),
            (:if, (:call, :(>=), :l, :i1), (:block,
                (:line, 310, :none),
                (:while, true, (:block,
                    (:line, 311, :none),
                    (:if, (:call, :!, (:call, :isassigned, :itr, :i)), (:block,
                        (:line, 312, :none),
                        (:call, :print, :io, :undef_ref_str),
                        (:line, 313, :none),
                        (:(=), :multiline, false)
                      ), (:block,
                        (:line, 315, :none),
                        (:(=), :x, (:ref, :itr, :i)),
                        (:line, 316, :none),
                        (:(=), :multiline, (:&&, (:call, :isa, :x, :AbstractArray), (:&&, (:call, :>, (:call, :ndims, :x), 1), (:call, :!, (:call, :isempty, :x))))),
                        (:line, 317, :none),
                        (:&&, :newline, (:&&, :multiline, (:call, :println, :io))),
                        (:line, 318, :none),
                        (:call, :show, :recur_io, :x)
                      )),
                    (:line, 320, :none),
                    (:+=, :i, 1),
                    (:line, 321, :none),
                    (:if, (:call, :>, :i, :l), (:block,
                        (:line, 322, :none),
                        (:&&, :delim_one, (:&&, :first, (:call, :print, :io, :delim))),
                        (:line, 323, :none),
                        (:break,)
                      )),
                    (:line, 325, :none),
                    (:(=), :first, false),
                    (:line, 326, :none),
                    (:call, :print, :io, :delim),
                    (:line, 327, :none),
                    (:if, :multiline, (:block,
                        (:line, 328, :none),
                        (:call, :println, :io),
                        (:line, 328, :none),
                        (:call, :println, :io),
                        (:line, 329, :none),
                        (:(=), :newline, false)
                      ), (:block,
                        (:line, 331, :none),
                        (:(=), :newline, true)
                      ))
                  ))
              ))
          )),
        (:line, 336, :none),
        (:call, :print, :io, :cl)
      )),
    (:line, 339, :none),
    (:function, (:call, :show_delim_array, (:(::), :io, :IO), :itr, :op, :delim, :cl, :delim_one, (:kw, :i1, 1), (:kw, :n, (:call, :typemax, :Int))), (:block,
        (:line, 340, :none),
        (:call, :print, :io, :op),
        (:line, 341, :none),
        (:if, (:call, :!, (:call, :show_circular, :io, :itr)), (:block,
            (:line, 342, :none),
            (:(=), :recur_io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :SHOWN_SET
                  ), :itr))),
            (:line, 343, :none),
            (:(=), :state, (:call, :start, :itr)),
            (:line, 344, :none),
            (:(=), :newline, true),
            (:line, 345, :none),
            (:(=), :first, true),
            (:line, 346, :none),
            (:while, (:&&, (:call, :>, :i1, 1), (:call, :!, (:call, :done, :itr, :state))), (:block,
                (:line, 347, :none),
                (:(=), (:tuple, :_, :state), (:call, :next, :itr, :state)),
                (:line, 348, :none),
                (:-=, :i1, 1)
              )),
            (:line, 350, :none),
            (:if, (:call, :!, (:call, :done, :itr, :state)), (:block,
                (:line, 351, :none),
                (:while, true, (:block,
                    (:line, 352, :none),
                    (:(=), (:tuple, :x, :state), (:call, :next, :itr, :state)),
                    (:line, 353, :none),
                    (:(=), :multiline, (:&&, (:call, :isa, :x, :AbstractArray), (:&&, (:call, :>, (:call, :ndims, :x), 1), (:call, :!, (:call, :isempty, :x))))),
                    (:line, 354, :none),
                    (:&&, :newline, (:&&, :multiline, (:call, :println, :io))),
                    (:line, 355, :none),
                    (:call, :show, :recur_io, :x),
                    (:line, 356, :none),
                    (:+=, :i1, 1),
                    (:line, 357, :none),
                    (:if, (:||, (:call, :done, :itr, :state), (:call, :>, :i1, :n)), (:block,
                        (:line, 358, :none),
                        (:&&, :delim_one, (:&&, :first, (:call, :print, :io, :delim))),
                        (:line, 359, :none),
                        (:break,)
                      )),
                    (:line, 361, :none),
                    (:(=), :first, false),
                    (:line, 362, :none),
                    (:call, :print, :io, :delim),
                    (:line, 363, :none),
                    (:if, :multiline, (:block,
                        (:line, 364, :none),
                        (:call, :println, :io),
                        (:line, 364, :none),
                        (:call, :println, :io),
                        (:line, 365, :none),
                        (:(=), :newline, false)
                      ), (:block,
                        (:line, 367, :none),
                        (:(=), :newline, true)
                      ))
                  ))
              ))
          )),
        (:line, 372, :none),
        (:call, :print, :io, :cl)
      )),
    (:line, 375, :none),
    (:(=), (:call, :show_comma_array, (:(::), :io, :IO), :itr, :o, :c), (:block,
        (:line, 375, :none),
        (:call, :show_delim_array, :io, :itr, :o, ',', :c, false)
      )),
    (:line, 376, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :t, :Tuple)), (:block,
        (:line, 376, :none),
        (:call, :show_delim_array, :io, :t, '(', ',', ')', true)
      )),
    (:line, 377, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :v, :SimpleVector)), (:block,
        (:line, 377, :none),
        (:call, :show_delim_array, :io, :v, "svec(", ',', ')', false)
      )),
    (:line, 379, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :s, :Symbol)), (:block,
        (:line, 379, :none),
        (:call, :show_unquoted_quote_expr, :io, :s, 0, 0)
      )),
    (:line, 405, :none),
    (:typealias, :ExprNode, (:curly, :Union, :Expr, :QuoteNode, :Slot, :LineNumberNode, :LabelNode, :GotoNode, :GlobalRef)),
    (:line, 410, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :ex, :ExprNode)), (:block,
        (:line, 410, :none),
        (:block,
          (:call, :show_unquoted, :io, :ex, 0, -1),
          :nothing
        )
      )),
    (:line, 411, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :ex, :ExprNode)), (:block,
        (:line, 411, :none),
        (:call, :show_unquoted_quote_expr, :io, :ex, 0, -1)
      )),
    (:line, 412, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), :ex), (:block,
        (:line, 412, :none),
        (:call, :show_unquoted, :io, :ex, 0, 0)
      )),
    (:line, 413, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), :ex, (:(::), :indent, :Int)), (:block,
        (:line, 413, :none),
        (:call, :show_unquoted, :io, :ex, :indent, 0)
      )),
    (:line, 414, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), :ex, (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 414, :none),
        (:call, :show, :io, :ex)
      )),
    (:line, 418, :none),
    (:const, (:(=), :indent_width, 4)),
    (:line, 419, :none),
    (:const, (:(=), :quoted_syms, (:call, (:curly, :Set, :Symbol), (:vect, (:quote, #QuoteNode
              :(:)
            ), (:quote, #QuoteNode
              :(::)
            ), (:quote, #QuoteNode
              :(:=)
            ), (:quote, #QuoteNode
              :(=)
            ), (:quote, #QuoteNode
              :(==)
            ), (:quote, #QuoteNode
              :(!=)
            ), (:quote, #QuoteNode
              :(===)
            ), (:quote, #QuoteNode
              :(!==)
            ), (:quote, #QuoteNode
              :(=>)
            ), (:quote, #QuoteNode
              :(>=)
            ), (:quote, #QuoteNode
              :(<=)
            ))))),
    (:line, 420, :none),
    (:const, (:(=), :uni_ops, (:call, (:curly, :Set, :Symbol), (:vect, (:quote, #QuoteNode
              :+
            ), (:quote, #QuoteNode
              :-
            ), (:quote, #QuoteNode
              :!
            ), (:quote, #QuoteNode
              :Â¬
            ), (:quote, #QuoteNode
              :~
            ), (:quote, #QuoteNode
              :<:
            ), (:quote, #QuoteNode
              :>:
            ), (:quote, #QuoteNode
              :âˆš
            ), (:quote, #QuoteNode
              :âˆ›
            ), (:quote, #QuoteNode
              :âˆœ
            ))))),
    (:line, 421, :none),
    (:const, (:(=), :expr_infix_wide, (:call, (:curly, :Set, :Symbol), (:vect, (:quote, #QuoteNode
              :(=)
            ), (:quote, #QuoteNode
              :+=
            ), (:quote, #QuoteNode
              :-=
            ), (:quote, #QuoteNode
              :*=
            ), (:quote, #QuoteNode
              :/=
            ), (:quote, #QuoteNode
              :\=
            ), (:quote, #QuoteNode
              :^=
            ), (:quote, #QuoteNode
              :&=
            ), (:quote, #QuoteNode
              :|=
            ), (:quote, #QuoteNode
              :Ã·=
            ), (:quote, #QuoteNode
              :%=
            ), (:quote, #QuoteNode
              :>>>=
            ), (:quote, #QuoteNode
              :>>=
            ), (:quote, #QuoteNode
              :<<=
            ), (:quote, #QuoteNode
              :.=
            ), (:quote, #QuoteNode
              :.+=
            ), (:quote, #QuoteNode
              :.-=
            ), (:quote, #QuoteNode
              :.*=
            ), (:quote, #QuoteNode
              :./=
            ), (:quote, #QuoteNode
              :.\=
            ), (:quote, #QuoteNode
              :.^=
            ), (:quote, #QuoteNode
              :.&=
            ), (:quote, #QuoteNode
              :.|=
            ), (:quote, #QuoteNode
              :.Ã·=
            ), (:quote, #QuoteNode
              :.%=
            ), (:quote, #QuoteNode
              :.>>>=
            ), (:quote, #QuoteNode
              :.>>=
            ), (:quote, #QuoteNode
              :.<<=
            ), (:quote, #QuoteNode
              :&&
            ), (:quote, #QuoteNode
              :||
            ), (:quote, #QuoteNode
              :<:
            ), (:quote, #QuoteNode
              :(=>)
            ), (:quote, #QuoteNode
              :$=
            ))))),
    (:line, 425, :none),
    (:const, (:(=), :expr_infix, (:call, (:curly, :Set, :Symbol), (:vect, (:quote, #QuoteNode
              :(:)
            ), (:quote, #QuoteNode
              :->
            ), (:call, :Symbol, "::"))))),
    (:line, 426, :none),
    (:const, (:(=), :expr_infix_any, (:call, :union, :expr_infix, :expr_infix_wide))),
    (:line, 427, :none),
    (:const, (:(=), :all_ops, (:call, :union, :quoted_syms, :uni_ops, :expr_infix_any))),
    (:line, 428, :none),
    (:const, (:(=), :expr_calls, (:call, :Dict, (:(=>), (:quote, #QuoteNode
              :call
            ), (:tuple, '(', ')')), (:(=>), (:quote, #QuoteNode
              :calldecl
            ), (:tuple, '(', ')')), (:(=>), (:quote, #QuoteNode
              :ref
            ), (:tuple, '[', ']')), (:(=>), (:quote, #QuoteNode
              :curly
            ), (:tuple, '{', '}')), (:(=>), (:quote, #QuoteNode
              :.
            ), (:tuple, '(', ')'))))),
    (:line, 430, :none),
    (:const, (:(=), :expr_parens, (:call, :Dict, (:(=>), (:quote, #QuoteNode
              :tuple
            ), (:tuple, '(', ')')), (:(=>), (:quote, #QuoteNode
              :vcat
            ), (:tuple, '[', ']')), (:(=>), (:quote, #QuoteNode
              :hcat
            ), (:tuple, '[', ']')), (:(=>), (:quote, #QuoteNode
              :row
            ), (:tuple, '[', ']')), (:(=>), (:quote, #QuoteNode
              :vect
            ), (:tuple, '[', ']'))))),
    (:line, 435, :none),
    (:(=), (:call, :is_id_start_char, (:(::), :c, :Char)), (:block,
        (:line, 435, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_id_start_char
            ), :Cint, (:tuple, :UInt32), :c), 0)
      )),
    (:line, 436, :none),
    (:(=), (:call, :is_id_char, (:(::), :c, :Char)), (:block,
        (:line, 436, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_id_char
            ), :Cint, (:tuple, :UInt32), :c), 0)
      )),
    (:line, 437, :none),
    (:function, (:call, :isidentifier, (:(::), :s, :AbstractString)), (:block,
        (:line, 438, :none),
        (:(=), :i, (:call, :start, :s)),
        (:line, 439, :none),
        (:&&, (:call, :done, :s, :i), (:return, false)),
        (:line, 440, :none),
        (:(=), (:tuple, :c, :i), (:call, :next, :s, :i)),
        (:line, 441, :none),
        (:||, (:call, :is_id_start_char, :c), (:return, false)),
        (:line, 442, :none),
        (:while, (:call, :!, (:call, :done, :s, :i)), (:block,
            (:line, 443, :none),
            (:(=), (:tuple, :c, :i), (:call, :next, :s, :i)),
            (:line, 444, :none),
            (:||, (:call, :is_id_char, :c), (:return, false))
          )),
        (:line, 446, :none),
        (:return, true)
      )),
    (:line, 448, :none),
    (:(=), (:call, :isidentifier, (:(::), :s, :Symbol)), (:block,
        (:line, 448, :none),
        (:call, :isidentifier, (:call, :string, :s))
      )),
    (:line, 450, :none),
    (:(=), (:call, :isoperator, (:(::), :s, :Symbol)), (:block,
        (:line, 450, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_is_operator
            ), :Cint, (:tuple, :Cstring), :s), 0)
      )),
    (:line, 451, :none),
    (:(=), (:call, :operator_precedence, (:(::), :s, :Symbol)), (:block,
        (:line, 451, :none),
        (:call, :Int, (:ccall, (:quote, #QuoteNode
              :jl_operator_precedence
            ), :Cint, (:tuple, :Cstring), :s))
      )),
    (:line, 452, :none),
    (:(=), (:call, :operator_precedence, (:(::), :x, :Any)), (:block,
        (:line, 452, :none),
        0
      )),
    (:line, 453, :none),
    (:const, (:(=), :prec_power, (:call, :operator_precedence, (:quote, #QuoteNode
            :^
          )))),
    (:line, 454, :none),
    (:const, (:(=), :prec_decl, (:call, :operator_precedence, (:quote, #QuoteNode
            :(::)
          )))),
    (:line, 456, :none),
    (:(=), (:call, :is_expr, :ex, (:(::), :head, :Symbol)), (:block,
        (:line, 456, :none),
        (:&&, (:call, :isa, :ex, :Expr), (:call, :(==), (:., :ex, (:quote, #QuoteNode
                :head
              )), :head))
      )),
    (:line, 457, :none),
    (:(=), (:call, :is_expr, :ex, (:(::), :head, :Symbol), (:(::), :n, :Int)), (:block,
        (:line, 457, :none),
        (:&&, (:call, :is_expr, :ex, :head), (:call, :(==), (:call, :length, (:., :ex, (:quote, #QuoteNode
                  :args
                ))), :n))
      )),
    (:line, 459, :none),
    (:(=), (:call, :is_linenumber, (:(::), :ex, :LineNumberNode)), (:block,
        (:line, 459, :none),
        true
      )),
    (:line, 460, :none),
    (:(=), (:call, :is_linenumber, (:(::), :ex, :Expr)), (:block,
        (:line, 460, :none),
        (:call, :(==), (:., :ex, (:quote, #QuoteNode
              :head
            )), (:quote, #QuoteNode
            :line
          ))
      )),
    (:line, 461, :none),
    (:(=), (:call, :is_linenumber, :ex), (:block,
        (:line, 461, :none),
        false
      )),
    (:line, 463, :none),
    (:(=), (:call, :is_quoted, :ex), (:block,
        (:line, 463, :none),
        false
      )),
    (:line, 464, :none),
    (:(=), (:call, :is_quoted, (:(::), :ex, :QuoteNode)), (:block,
        (:line, 464, :none),
        true
      )),
    (:line, 465, :none),
    (:(=), (:call, :is_quoted, (:(::), :ex, :Expr)), (:block,
        (:line, 465, :none),
        (:||, (:call, :is_expr, :ex, (:quote, #QuoteNode
              :quote
            ), 1), (:call, :is_expr, :ex, (:quote, #QuoteNode
              :inert
            ), 1))
      )),
    (:line, 467, :none),
    (:(=), (:call, :unquoted, (:(::), :ex, :QuoteNode)), (:block,
        (:line, 467, :none),
        (:., :ex, (:quote, #QuoteNode
            :value
          ))
      )),
    (:line, 468, :none),
    (:(=), (:call, :unquoted, (:(::), :ex, :Expr)), (:block,
        (:line, 468, :none),
        (:ref, (:., :ex, (:quote, #QuoteNode
              :args
            )), 1)
      )),
    (:line, 470, :none),
    (:function, (:call, :is_intrinsic_expr, (:(::), :x, :ANY)), (:block,
        (:line, 471, :none),
        (:&&, (:call, :isa, :x, (:., :Core, (:quote, #QuoteNode
                :IntrinsicFunction
              ))), (:return, true)),
        (:line, 472, :none),
        (:if, (:call, :isa, :x, :GlobalRef), (:block,
            (:line, 473, :none),
            (:(=), :x, (:(::), :x, :GlobalRef)),
            (:line, 474, :none),
            (:return, (:&&, (:call, :isdefined, (:., :x, (:quote, #QuoteNode
                      :mod
                    )), (:., :x, (:quote, #QuoteNode
                      :name
                    ))), (:call, :isa, (:call, :getfield, (:., :x, (:quote, #QuoteNode
                        :mod
                      )), (:., :x, (:quote, #QuoteNode
                        :name
                      ))), (:., :Core, (:quote, #QuoteNode
                      :IntrinsicFunction
                    )))))
          ), (:block,
            (:line, 476, :none),
            (:if, (:call, :isa, :x, :Expr), (:block,
                (:line, 477, :none),
                (:return, (:call, :(===), (:., (:(::), :x, :Expr), (:quote, #QuoteNode
                        :typ
                      )), (:., :Core, (:quote, #QuoteNode
                        :IntrinsicFunction
                      ))))
              ))
          )),
        (:line, 479, :none),
        (:return, false)
      )),
    (:line, 484, :none),
    (:(=), (:call, :typeemphasize, (:(::), :io, :IO)), (:block,
        (:line, 484, :none),
        (:call, :(===), (:call, :get, :io, (:quote, #QuoteNode
              :TYPEEMPHASIZE
            ), false), true)
      )),
    (:line, 486, :none),
    (:const, (:(=), :indent_width, 4)),
    (:line, 488, :none),
    (:function, (:call, :show_expr_type, (:(::), :io, :IO), :ty, :emph), (:block,
        (:line, 489, :none),
        (:if, (:call, :is, :ty, :Function), (:block,
            (:line, 490, :none),
            (:call, :print, :io, "::F")
          ), (:block,
            (:line, 491, :none),
            (:if, (:call, :is, :ty, (:., :Core, (:quote, #QuoteNode
                    :IntrinsicFunction
                  ))), (:block,
                (:line, 492, :none),
                (:call, :print, :io, "::I")
              ), (:block,
                (:line, 494, :none),
                (:if, (:&&, :emph, (:||, (:call, :!, (:call, :isleaftype, :ty)), (:call, :(==), :ty, (:., :Core, (:quote, #QuoteNode
                            :Box
                          ))))), (:block,
                    (:line, 495, :none),
                    (:call, :emphasize, :io, (:string, "::", :ty))
                  ), (:block,
                    (:line, 497, :none),
                    (:call, :print, :io, (:string, "::", :ty))
                  ))
              ))
          ))
      )),
    (:line, 502, :none),
    (:(=), (:call, :emphasize, :io, (:(::), :str, :AbstractString)), (:block,
        (:line, 502, :none),
        (:if, :have_color, (:call, :print_with_color, (:quote, #QuoteNode
              :red
            ), :io, :str), (:call, :print, :io, (:call, :uppercase, :str)))
      )),
    (:line, 504, :none),
    (:(=), (:call, :show_linenumber, (:(::), :io, :IO), :line), (:block,
        (:line, 504, :none),
        (:call, :print, :io, " # line ", :line, ':')
      )),
    (:line, 505, :none),
    (:(=), (:call, :show_linenumber, (:(::), :io, :IO), :line, :file), (:block,
        (:line, 505, :none),
        (:call, :print, :io, " # ", :file, ", line ", :line, ':')
      )),
    (:line, 508, :none),
    (:function, (:call, :show_block, (:(::), :io, :IO), :head, (:(::), :args, :Vector), :body, (:(::), :indent, :Int)), (:block,
        (:line, 509, :none),
        (:call, :print, :io, :head, ' '),
        (:line, 510, :none),
        (:call, :show_list, :io, :args, ", ", :indent),
        (:line, 512, :none),
        (:(=), :ind, (:if, (:||, (:call, :is, :head, (:quote, #QuoteNode
                  :module
                )), (:call, :is, :head, (:quote, #QuoteNode
                  :baremodule
                ))), :indent, (:call, :+, :indent, :indent_width))),
        (:line, 513, :none),
        (:(=), :exs, (:if, (:||, (:call, :is_expr, :body, (:quote, #QuoteNode
                  :block
                )), (:call, :is_expr, :body, (:quote, #QuoteNode
                  :body
                ))), (:., :body, (:quote, #QuoteNode
                :args
              )), (:ref, :Any, :body))),
        (:line, 514, :none),
        (:for, (:(=), :ex, :exs), (:block,
            (:line, 515, :none),
            (:if, (:call, :!, (:call, :is_linenumber, :ex)), (:block,
                (:line, 515, :none),
                (:call, :print, :io, '\n', (:call, :^, " ", :ind))
              )),
            (:line, 516, :none),
            (:call, :show_unquoted, :io, :ex, :ind, -1)
          )),
        (:line, 518, :none),
        (:call, :print, :io, '\n', (:call, :^, " ", :indent))
      )),
    (:line, 520, :none),
    (:(=), (:call, :show_block, (:(::), :io, :IO), :head, :block, (:(::), :i, :Int)), (:block,
        (:line, 520, :none),
        (:call, :show_block, :io, :head, (:vect,), :block, :i)
      )),
    (:line, 521, :none),
    (:function, (:call, :show_block, (:(::), :io, :IO), :head, :arg, :block, (:(::), :i, :Int)), (:block,
        (:line, 522, :none),
        (:if, (:call, :is_expr, :arg, (:quote, #QuoteNode
              :block
            )), (:block,
            (:line, 523, :none),
            (:call, :show_block, :io, :head, (:., :arg, (:quote, #QuoteNode
                  :args
                )), :block, :i)
          ), (:block,
            (:line, 525, :none),
            (:call, :show_block, :io, :head, (:ref, :Any, :arg), :block, :i)
          ))
      )),
    (:line, 530, :none),
    (:function, (:call, :show_list, (:(::), :io, :IO), :items, :sep, (:(::), :indent, :Int), (:kw, (:(::), :prec, :Int), 0), (:kw, (:(::), :enclose_operators, :Bool), false)), (:block,
        (:line, 531, :none),
        (:(=), :n, (:call, :length, :items)),
        (:line, 532, :none),
        (:if, (:call, :(==), :n, 0), (:block,
            (:line, 532, :none),
            (:return, nothing)
          )),
        (:line, 533, :none),
        (:+=, :indent, :indent_width),
        (:line, 534, :none),
        (:(=), :first, true),
        (:line, 535, :none),
        (:for, (:(=), :item, :items), (:block,
            (:line, 536, :none),
            (:&&, (:call, :!, :first), (:call, :print, :io, :sep)),
            (:line, 537, :none),
            (:(=), :parens, (:&&, :enclose_operators, (:&&, (:call, :isa, :item, :Symbol), (:call, :isoperator, :item)))),
            (:line, 538, :none),
            (:&&, :parens, (:call, :print, :io, '(')),
            (:line, 539, :none),
            (:call, :show_unquoted, :io, :item, :indent, :prec),
            (:line, 540, :none),
            (:&&, :parens, (:call, :print, :io, ')')),
            (:line, 541, :none),
            (:(=), :first, false)
          ))
      )),
    (:line, 545, :none),
    (:function, (:call, :show_enclosed_list, (:(::), :io, :IO), :op, :items, :sep, :cl, :indent, (:kw, :prec, 0), (:kw, :encl_ops, false)), (:block,
        (:line, 546, :none),
        (:call, :print, :io, :op),
        (:line, 546, :none),
        (:call, :show_list, :io, :items, :sep, :indent, :prec, :encl_ops),
        (:line, 546, :none),
        (:call, :print, :io, :cl)
      )),
    (:line, 550, :none),
    (:function, (:call, :show_call, (:(::), :io, :IO), :head, :func, :func_args, :indent), (:block,
        (:line, 551, :none),
        (:(=), (:tuple, :op, :cl), (:ref, :expr_calls, :head)),
        (:line, 552, :none),
        (:if, (:||, (:call, :isa, :func, :Symbol), (:&&, (:call, :isa, :func, :Expr), (:||, (:call, :(==), (:., :func, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :.
                  )), (:call, :(==), (:., :func, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :curly
                  ))))), (:block,
            (:line, 554, :none),
            (:call, :show_unquoted, :io, :func, :indent)
          ), (:block,
            (:line, 556, :none),
            (:call, :print, :io, '('),
            (:line, 557, :none),
            (:call, :show_unquoted, :io, :func, :indent),
            (:line, 558, :none),
            (:call, :print, :io, ')')
          )),
        (:line, 560, :none),
        (:if, (:call, :(==), :head, (:quote, #QuoteNode
              :.
            )), (:block,
            (:line, 561, :none),
            (:call, :print, :io, '.')
          )),
        (:line, 563, :none),
        (:if, (:&&, (:call, :!, (:call, :isempty, :func_args)), (:&&, (:call, :isa, (:ref, :func_args, 1), :Expr), (:call, :(===), (:., (:ref, :func_args, 1), (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :parameters
                )))), (:block,
            (:line, 564, :none),
            (:call, :print, :io, :op),
            (:line, 565, :none),
            (:call, :show_list, :io, (:ref, :func_args, (:(:), 2, :end)), ',', :indent),
            (:line, 566, :none),
            (:call, :print, :io, "; "),
            (:line, 567, :none),
            (:call, :show_list, :io, (:., (:ref, :func_args, 1), (:quote, #QuoteNode
                  :args
                )), ',', :indent),
            (:line, 568, :none),
            (:call, :print, :io, :cl)
          ), (:block,
            (:line, 570, :none),
            (:call, :show_enclosed_list, :io, :op, :func_args, ",", :cl, :indent)
          ))
      )),
    (:line, 576, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :sym, :Symbol), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 576, :none),
        (:call, :print, :io, :sym)
      )),
    (:line, 577, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :LineNumberNode), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 577, :none),
        (:call, :show_linenumber, :io, (:., :ex, (:quote, #QuoteNode
              :line
            )))
      )),
    (:line, 578, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :LabelNode), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 578, :none),
        (:call, :print, :io, (:., :ex, (:quote, #QuoteNode
              :label
            )), ": ")
      )),
    (:line, 579, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :GotoNode), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 579, :none),
        (:call, :print, :io, "goto ", (:., :ex, (:quote, #QuoteNode
              :label
            )))
      )),
    (:line, 580, :none),
    (:(=), (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :GlobalRef), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 580, :none),
        (:call, :print, :io, (:., :ex, (:quote, #QuoteNode
              :mod
            )), '.', (:., :ex, (:quote, #QuoteNode
              :name
            )))
      )),
    (:line, 582, :none),
    (:function, (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :Slot), (:(::), :Int), (:(::), :Int)), (:block,
        (:line, 583, :none),
        (:(=), :typ, (:if, (:call, :isa, :ex, :TypedSlot), (:., :ex, (:quote, #QuoteNode
                :typ
              )), :Any)),
        (:line, 584, :none),
        (:(=), :slotid, (:., :ex, (:quote, #QuoteNode
              :id
            ))),
        (:line, 585, :none),
        (:(=), :li, (:call, :get, :io, (:quote, #QuoteNode
              :LAMBDAINFO
            ), false)),
        (:line, 586, :none),
        (:if, (:call, :isa, :li, :LambdaInfo), (:block,
            (:line, 587, :none),
            (:(=), :slottypes, (:., (:(::), :li, :LambdaInfo), (:quote, #QuoteNode
                  :slottypes
                ))),
            (:line, 588, :none),
            (:if, (:&&, (:call, :isa, :slottypes, :Array), (:call, :(<=), :slotid, (:call, :length, (:(::), :slottypes, :Array)))), (:block,
                (:line, 589, :none),
                (:(=), :slottype, (:ref, :slottypes, :slotid)),
                (:line, 591, :none),
                (:&&, (:<:, :slottype, :typ), (:(=), :typ, :slottype))
              ))
          )),
        (:line, 594, :none),
        (:(=), :slotnames, (:call, :get, :io, (:quote, #QuoteNode
              :LAMBDA_SLOTNAMES
            ), false)),
        (:line, 595, :none),
        (:if, (:&&, (:call, :isa, :slotnames, (:curly, :Vector, :String)), (:call, :(<=), :slotid, (:call, :length, (:(::), :slotnames, (:curly, :Vector, :String))))), (:block,
            (:line, 597, :none),
            (:call, :print, :io, (:ref, (:(::), :slotnames, (:curly, :Vector, :String)), :slotid))
          ), (:block,
            (:line, 599, :none),
            (:call, :print, :io, "_", :slotid)
          )),
        (:line, 601, :none),
        (:(=), :emphstate, (:call, :typeemphasize, :io)),
        (:line, 602, :none),
        (:if, (:||, :emphstate, (:&&, (:call, :(!==), :typ, :Any), (:call, :isa, :ex, :TypedSlot))), (:block,
            (:line, 603, :none),
            (:call, :show_expr_type, :io, :typ, :emphstate)
          ))
      )),
    (:line, 607, :none),
    (:function, (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :QuoteNode), (:(::), :indent, :Int), (:(::), :prec, :Int)), (:block,
        (:line, 608, :none),
        (:if, (:call, :isa, (:., :ex, (:quote, #QuoteNode
                :value
              )), :Symbol), (:block,
            (:line, 609, :none),
            (:call, :show_unquoted_quote_expr, :io, (:., :ex, (:quote, #QuoteNode
                  :value
                )), :indent, :prec)
          ), (:block,
            (:line, 611, :none),
            (:call, :print, :io, "\$(QuoteNode("),
            (:line, 612, :none),
            (:call, :show, :io, (:., :ex, (:quote, #QuoteNode
                  :value
                ))),
            (:line, 613, :none),
            (:call, :print, :io, "))")
          ))
      )),
    (:line, 617, :none),
    (:function, (:call, :show_unquoted_quote_expr, (:(::), :io, :IO), :value, (:(::), :indent, :Int), (:(::), :prec, :Int)), (:block,
        (:line, 618, :none),
        (:if, (:&&, (:call, :isa, :value, :Symbol), (:call, :!, (:call, :in, :value, :quoted_syms))), (:block,
            (:line, 619, :none),
            (:(=), :s, (:call, :string, :value)),
            (:line, 620, :none),
            (:if, (:||, (:call, :isidentifier, :s), (:call, :isoperator, :value)), (:block,
                (:line, 621, :none),
                (:call, :print, :io, ":"),
                (:line, 622, :none),
                (:call, :print, :io, :value)
              ), (:block,
                (:line, 624, :none),
                (:call, :print, :io, "Symbol(\"", (:call, :escape_string, :s), "\")")
              ))
          ), (:block,
            (:line, 627, :none),
            (:if, (:&&, (:call, :isa, :value, :Expr), (:call, :(===), (:., :value, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :block
                  ))), (:block,
                (:line, 628, :none),
                (:call, :show_block, :io, "quote", :value, :indent),
                (:line, 629, :none),
                (:call, :print, :io, "end")
              ), (:block,
                (:line, 631, :none),
                (:call, :print, :io, ":("),
                (:line, 632, :none),
                (:call, :show_unquoted, :io, :value, (:call, :+, :indent, :indent_width), -1),
                (:line, 633, :none),
                (:call, :print, :io, ")")
              ))
          ))
      )),
    (:line, 638, :none),
    (:function, (:call, :show_generator, :io, :ex, :indent), (:block,
        (:line, 639, :none),
        (:if, (:call, :(===), (:., :ex, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :flatten
            )), (:block,
            (:line, 640, :none),
            (:(=), :fg, :ex),
            (:line, 641, :none),
            (:(=), :ranges, (:ref, :Any)),
            (:line, 642, :none),
            (:while, (:&&, (:call, :isa, :fg, :Expr), (:call, :(===), (:., :fg, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :flatten
                  ))), (:block,
                (:line, 643, :none),
                (:call, :push!, :ranges, (:ref, (:., (:ref, (:., :fg, (:quote, #QuoteNode
                            :args
                          )), 1), (:quote, #QuoteNode
                        :args
                      )), 2)),
                (:line, 644, :none),
                (:(=), :fg, (:ref, (:., (:ref, (:., :fg, (:quote, #QuoteNode
                            :args
                          )), 1), (:quote, #QuoteNode
                        :args
                      )), 1))
              )),
            (:line, 646, :none),
            (:call, :push!, :ranges, (:ref, (:., :fg, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 647, :none),
            (:call, :show_unquoted, :io, (:ref, (:., :fg, (:quote, #QuoteNode
                    :args
                  )), 1), :indent),
            (:line, 648, :none),
            (:for, (:(=), :r, :ranges), (:block,
                (:line, 649, :none),
                (:call, :print, :io, " for "),
                (:line, 650, :none),
                (:call, :show_unquoted, :io, :r, :indent)
              ))
          ), (:block,
            (:line, 653, :none),
            (:call, :show_unquoted, :io, (:ref, (:., :ex, (:quote, #QuoteNode
                    :args
                  )), 1), :indent),
            (:line, 654, :none),
            (:call, :print, :io, " for "),
            (:line, 655, :none),
            (:call, :show_unquoted, :io, (:ref, (:., :ex, (:quote, #QuoteNode
                    :args
                  )), 2), :indent),
            (:line, 656, :none),
            (:for, (:(=), :i, (:(:), 3, (:call, :length, (:., :ex, (:quote, #QuoteNode
                        :args
                      ))))), (:block,
                (:line, 657, :none),
                (:call, :print, :io, ", "),
                (:line, 658, :none),
                (:call, :show_unquoted, :io, (:ref, (:., :ex, (:quote, #QuoteNode
                        :args
                      )), :i), :indent)
              ))
          ))
      )),
    (:line, 664, :none),
    (:function, (:call, :show_unquoted, (:(::), :io, :IO), (:(::), :ex, :Expr), (:(::), :indent, :Int), (:(::), :prec, :Int)), (:block,
        (:line, 665, :none),
        (:(=), (:tuple, :head, :args, :nargs), (:tuple, (:., :ex, (:quote, #QuoteNode
                :head
              )), (:., :ex, (:quote, #QuoteNode
                :args
              )), (:call, :length, (:., :ex, (:quote, #QuoteNode
                  :args
                ))))),
        (:line, 666, :none),
        (:(=), :emphstate, (:call, :typeemphasize, :io)),
        (:line, 667, :none),
        (:(=), :show_type, true),
        (:line, 668, :none),
        (:if, (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :(=)
              )), (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :line
                )), (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :boundscheck
                  )), (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :gotoifnot
                    )), (:call, :(==), (:., :ex, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :return
                    )))))), (:block,
            (:line, 672, :none),
            (:(=), :show_type, false)
          )),
        (:line, 674, :none),
        (:if, (:&&, (:call, :!, :emphstate), (:call, :(===), (:., :ex, (:quote, #QuoteNode
                  :typ
                )), :Any)), (:block,
            (:line, 675, :none),
            (:(=), :show_type, false)
          )),
        (:line, 678, :none),
        (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                :.
              )), (:call, :!, (:call, :is_expr, (:ref, :args, 2), (:quote, #QuoteNode
                  :tuple
                )))), (:block,
            (:line, 679, :none),
            (:call, :show_unquoted, :io, (:ref, :args, 1), (:call, :+, :indent, :indent_width)),
            (:line, 680, :none),
            (:call, :print, :io, '.'),
            (:line, 681, :none),
            (:if, (:call, :is_quoted, (:ref, :args, 2)), (:block,
                (:line, 682, :none),
                (:call, :show_unquoted, :io, (:call, :unquoted, (:ref, :args, 2)), (:call, :+, :indent, :indent_width))
              ), (:block,
                (:line, 684, :none),
                (:call, :print, :io, '('),
                (:line, 685, :none),
                (:call, :show_unquoted, :io, (:ref, :args, 2), (:call, :+, :indent, :indent_width)),
                (:line, 686, :none),
                (:call, :print, :io, ')')
              ))
          ), (:block,
            (:line, 690, :none),
            (:if, (:||, (:&&, (:call, :in, :head, :expr_infix_any), (:call, :(==), :nargs, 2)), (:&&, (:call, :is, :head, (:quote, #QuoteNode
                      :(:)
                    )), (:call, :(==), :nargs, 3))), (:block,
                (:line, 691, :none),
                (:(=), :func_prec, (:call, :operator_precedence, :head)),
                (:line, 692, :none),
                (:(=), :head_, (:if, (:call, :in, :head, :expr_infix_wide), (:string, " ", :head, " "), :head)),
                (:line, 693, :none),
                (:if, (:call, :(<=), :func_prec, :prec), (:block,
                    (:line, 694, :none),
                    (:call, :show_enclosed_list, :io, '(', :args, :head_, ')', :indent, :func_prec, true)
                  ), (:block,
                    (:line, 696, :none),
                    (:call, :show_list, :io, :args, :head_, :indent, :func_prec, true)
                  ))
              ), (:block,
                (:line, 700, :none),
                (:if, (:call, :haskey, :expr_parens, :head), (:block,
                    (:line, 701, :none),
                    (:(=), (:tuple, :op, :cl), (:ref, :expr_parens, :head)),
                    (:line, 702, :none),
                    (:if, (:call, :(===), :head, (:quote, #QuoteNode
                          :vcat
                        )), (:block,
                        (:line, 703, :none),
                        (:(=), :sep, ";")
                      ), (:block,
                        (:line, 704, :none),
                        (:if, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                                :hcat
                              )), (:call, :(===), :head, (:quote, #QuoteNode
                                :row
                              ))), (:block,
                            (:line, 705, :none),
                            (:(=), :sep, " ")
                          ), (:block,
                            (:line, 707, :none),
                            (:(=), :sep, ",")
                          ))
                      )),
                    (:line, 709, :none),
                    (:&&, (:call, :(!==), :head, (:quote, #QuoteNode
                          :row
                        )), (:call, :print, :io, :op)),
                    (:line, 710, :none),
                    (:call, :show_list, :io, :args, :sep, :indent),
                    (:line, 711, :none),
                    (:if, (:&&, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                              :tuple
                            )), (:call, :(===), :head, (:quote, #QuoteNode
                              :vcat
                            ))), (:call, :(==), :nargs, 1)), (:block,
                        (:line, 712, :none),
                        (:call, :print, :io, :sep)
                      )),
                    (:line, 714, :none),
                    (:&&, (:call, :(!==), :head, (:quote, #QuoteNode
                          :row
                        )), (:call, :print, :io, :cl))
                  ), (:block,
                    (:line, 717, :none),
                    (:if, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                            :call
                          )), (:call, :(>=), :nargs, 1)), (:block,
                        (:line, 718, :none),
                        (:(=), :func, (:ref, :args, 1)),
                        (:line, 719, :none),
                        (:(=), :fname, (:if, (:call, :isa, :func, :GlobalRef), (:., :func, (:quote, #QuoteNode
                                :name
                              )), :func)),
                        (:line, 720, :none),
                        (:(=), :func_prec, (:call, :operator_precedence, :fname)),
                        (:line, 721, :none),
                        (:if, (:||, (:call, :>, :func_prec, 0), (:call, :in, :fname, :uni_ops)), (:block,
                            (:line, 722, :none),
                            (:(=), :func, :fname)
                          )),
                        (:line, 724, :none),
                        (:(=), :func_args, (:ref, :args, (:(:), 2, :end))),
                        (:line, 726, :none),
                        (:if, (:||, (:call, :in, (:ref, (:., :ex, (:quote, #QuoteNode
                                    :args
                                  )), 1), (:tuple, (:call, :GlobalRef, :Base, (:quote, #QuoteNode
                                    :box
                                  )), (:quote, #QuoteNode
                                  :throw
                                ))), (:||, (:call, :ismodulecall, :ex), (:&&, (:call, :(===), (:., :ex, (:quote, #QuoteNode
                                      :typ
                                    )), :Any), (:call, :is_intrinsic_expr, (:ref, (:., :ex, (:quote, #QuoteNode
                                        :args
                                      )), 1))))), (:block,
                            (:line, 729, :none),
                            (:(=), :show_type, false)
                          )),
                        (:line, 731, :none),
                        (:if, :show_type, (:block,
                            (:line, 732, :none),
                            (:(=), :prec, :prec_decl)
                          )),
                        (:line, 736, :none),
                        (:if, (:&&, (:call, :(===), :func, (:quote, #QuoteNode
                                :*
                              )), (:&&, (:call, :(==), (:call, :length, :func_args), 2), (:&&, (:call, :isa, (:ref, :func_args, 1), :Real), (:call, :isa, (:ref, :func_args, 2), :Symbol)))), (:block,
                            (:line, 738, :none),
                            (:if, (:call, :(<=), :func_prec, :prec), (:block,
                                (:line, 739, :none),
                                (:call, :show_enclosed_list, :io, '(', :func_args, "", ')', :indent, :func_prec)
                              ), (:block,
                                (:line, 741, :none),
                                (:call, :show_list, :io, :func_args, "", :indent, :func_prec)
                              ))
                          ), (:block,
                            (:line, 745, :none),
                            (:if, (:&&, (:call, :isa, :func, :Symbol), (:&&, (:call, :in, :func, :uni_ops), (:call, :(==), (:call, :length, :func_args), 1))), (:block,
                                (:line, 746, :none),
                                (:call, :show_unquoted, :io, :func, :indent),
                                (:line, 747, :none),
                                (:if, (:||, (:call, :isa, (:ref, :func_args, 1), :Expr), (:call, :in, (:ref, :func_args, 1), :all_ops)), (:block,
                                    (:line, 748, :none),
                                    (:call, :show_enclosed_list, :io, '(', :func_args, ",", ')', :indent, :func_prec)
                                  ), (:block,
                                    (:line, 750, :none),
                                    (:call, :show_unquoted, :io, (:ref, :func_args, 1))
                                  ))
                              ), (:block,
                                (:line, 754, :none),
                                (:if, (:call, :>, :func_prec, 0), (:block,
                                    (:line, 755, :none),
                                    (:(=), :na, (:call, :length, :func_args)),
                                    (:line, 756, :none),
                                    (:if, (:&&, (:||, (:call, :(==), :na, 2), (:&&, (:call, :>, :na, 2), (:call, :in, :func, (:tuple, (:quote, #QuoteNode
                                                  :+
                                                ), (:quote, #QuoteNode
                                                  :++
                                                ), (:quote, #QuoteNode
                                                  :*
                                                ))))), (:call, :all, (:generator, (:||, (:call, :!, (:call, :isa, :a, :Expr)), (:call, :(!==), (:., :a, (:quote, #QuoteNode
                                                    :head
                                                  )), (:quote, #QuoteNode
                                                  :...
                                                ))), (:(=), :a, :func_args)))), (:block,
                                        (:line, 757, :none),
                                        (:(=), :sep, (:string, " ", :func, " ")),
                                        (:line, 758, :none),
                                        (:if, (:call, :(<=), :func_prec, :prec), (:block,
                                            (:line, 759, :none),
                                            (:call, :show_enclosed_list, :io, '(', :func_args, :sep, ')', :indent, :func_prec, true)
                                          ), (:block,
                                            (:line, 761, :none),
                                            (:call, :show_list, :io, :func_args, :sep, :indent, :func_prec, true)
                                          ))
                                      ), (:block,
                                        (:line, 763, :none),
                                        (:if, (:call, :(==), :na, 1), (:block,
                                            (:line, 765, :none),
                                            (:(=), (:tuple, :op, :cl), (:ref, :expr_calls, :head)),
                                            (:line, 766, :none),
                                            (:call, :print, :io, "("),
                                            (:line, 767, :none),
                                            (:call, :show_unquoted, :io, :func, :indent),
                                            (:line, 768, :none),
                                            (:call, :print, :io, ")"),
                                            (:line, 769, :none),
                                            (:call, :show_enclosed_list, :io, :op, :func_args, ",", :cl, :indent)
                                          ), (:block,
                                            (:line, 771, :none),
                                            (:call, :show_call, :io, :head, :func, :func_args, :indent)
                                          ))
                                      ))
                                  ), (:block,
                                    (:line, 776, :none),
                                    (:call, :show_call, :io, :head, :func, :func_args, :indent)
                                  ))
                              ))
                          ))
                      ), (:block,
                        (:line, 780, :none),
                        (:if, (:&&, (:call, :haskey, :expr_calls, :head), (:call, :(>=), :nargs, 1)), (:block,
                            (:line, 781, :none),
                            (:(=), :funcargslike, (:if, (:call, :(==), :head, (:quote, #QuoteNode
                                    :.
                                  )), (:., (:ref, (:., :ex, (:quote, #QuoteNode
                                        :args
                                      )), 2), (:quote, #QuoteNode
                                    :args
                                  )), (:ref, (:., :ex, (:quote, #QuoteNode
                                      :args
                                    )), (:(:), 2, :end)))),
                            (:line, 782, :none),
                            (:call, :show_call, :io, :head, (:ref, (:., :ex, (:quote, #QuoteNode
                                    :args
                                  )), 1), :funcargslike, :indent)
                          ), (:block,
                            (:line, 785, :none),
                            (:if, (:&&, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                                      :typed_comprehension
                                    )), (:call, :(===), :head, (:quote, #QuoteNode
                                      :typed_dict_comprehension
                                    ))), (:call, :(==), (:call, :length, :args), 2)), (:block,
                                (:line, 786, :none),
                                (:(=), :isdict, (:call, :(===), :head, (:quote, #QuoteNode
                                      :typed_dict_comprehension
                                    ))),
                                (:line, 787, :none),
                                (:&&, :isdict, (:call, :print, :io, '(')),
                                (:line, 788, :none),
                                (:call, :show_unquoted, :io, (:ref, :args, 1), :indent),
                                (:line, 789, :none),
                                (:&&, :isdict, (:call, :print, :io, ')')),
                                (:line, 790, :none),
                                (:call, :print, :io, '['),
                                (:line, 791, :none),
                                (:call, :show_generator, :io, (:ref, :args, 2), :indent),
                                (:line, 792, :none),
                                (:call, :print, :io, ']')
                              ), (:block,
                                (:line, 794, :none),
                                (:if, (:&&, (:||, (:call, :(===), :head, (:quote, #QuoteNode
                                          :comprehension
                                        )), (:call, :(===), :head, (:quote, #QuoteNode
                                          :dict_comprehension
                                        ))), (:call, :(==), (:call, :length, :args), 1)), (:block,
                                    (:line, 795, :none),
                                    (:call, :print, :io, '['),
                                    (:line, 796, :none),
                                    (:call, :show_generator, :io, (:ref, :args, 1), :indent),
                                    (:line, 797, :none),
                                    (:call, :print, :io, ']')
                                  ), (:block,
                                    (:line, 799, :none),
                                    (:if, (:||, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                                              :generator
                                            )), (:call, :(>=), (:call, :length, :args), 2)), (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                                              :flatten
                                            )), (:call, :(==), (:call, :length, :args), 1))), (:block,
                                        (:line, 800, :none),
                                        (:call, :print, :io, '('),
                                        (:line, 801, :none),
                                        (:call, :show_generator, :io, :ex, :indent),
                                        (:line, 802, :none),
                                        (:call, :print, :io, ')')
                                      ), (:block,
                                        (:line, 804, :none),
                                        (:if, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                                                :filter
                                              )), (:call, :(==), (:call, :length, :args), 2)), (:block,
                                            (:line, 805, :none),
                                            (:call, :show_unquoted, :io, (:ref, :args, 2), :indent),
                                            (:line, 806, :none),
                                            (:call, :print, :io, " if "),
                                            (:line, 807, :none),
                                            (:call, :show_unquoted, :io, (:ref, :args, 1), :indent)
                                          ), (:block,
                                            (:line, 809, :none),
                                            (:if, (:call, :is, :head, (:quote, #QuoteNode
                                                  :ccall
                                                )), (:block,
                                                (:line, 810, :none),
                                                (:call, :show_unquoted, :io, (:quote, #QuoteNode
                                                    :ccall
                                                  ), :indent),
                                                (:line, 811, :none),
                                                (:call, :show_enclosed_list, :io, '(', :args, ",", ')', :indent)
                                              ), (:block,
                                                (:line, 814, :none),
                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                        :comparison
                                                      )), (:&&, (:call, :(>=), :nargs, 3), (:call, :(==), (:call, :&, :nargs, 1), 1))), (:block,
                                                    (:line, 815, :none),
                                                    (:(=), :comp_prec, (:call, :minimum, :operator_precedence, (:ref, :args, (:(:), 2, 2, :end)))),
                                                    (:line, 816, :none),
                                                    (:if, (:call, :(<=), :comp_prec, :prec), (:block,
                                                        (:line, 817, :none),
                                                        (:call, :show_enclosed_list, :io, '(', :args, " ", ')', :indent, :comp_prec)
                                                      ), (:block,
                                                        (:line, 819, :none),
                                                        (:call, :show_list, :io, :args, " ", :indent, :comp_prec)
                                                      ))
                                                  ), (:block,
                                                    (:line, 824, :none),
                                                    (:if, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                                                            :function
                                                          )), (:&&, (:call, :(==), :nargs, 2), (:call, :is_expr, (:ref, :args, 1), (:quote, #QuoteNode
                                                              :call
                                                            )))), (:block,
                                                        (:line, 825, :none),
                                                        (:call, :show_block, :io, :head, (:call, :Expr, (:quote, #QuoteNode
                                                              :calldecl
                                                            ), (:..., (:., (:ref, :args, 1), (:quote, #QuoteNode
                                                                  :args
                                                                )))), (:ref, :args, 2), :indent),
                                                        (:line, 826, :none),
                                                        (:call, :print, :io, "end")
                                                      ), (:block,
                                                        (:line, 828, :none),
                                                        (:if, (:&&, (:call, :(===), :head, (:quote, #QuoteNode
                                                                :function
                                                              )), (:call, :(==), :nargs, 1)), (:block,
                                                            (:line, 829, :none),
                                                            (:call, :print, :io, "function ", (:ref, :args, 1), " end")
                                                          ), (:block,
                                                            (:line, 832, :none),
                                                            (:if, (:&&, (:call, :in, :head, (:tuple, (:quote, #QuoteNode
                                                                      :for
                                                                    ), (:quote, #QuoteNode
                                                                      :while
                                                                    ), (:quote, #QuoteNode
                                                                      :function
                                                                    ), (:quote, #QuoteNode
                                                                      :if
                                                                    ))), (:call, :(==), :nargs, 2)), (:block,
                                                                (:line, 833, :none),
                                                                (:call, :show_block, :io, :head, (:ref, :args, 1), (:ref, :args, 2), :indent),
                                                                (:line, 834, :none),
                                                                (:call, :print, :io, "end")
                                                              ), (:block,
                                                                (:line, 836, :none),
                                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                        :module
                                                                      )), (:&&, (:call, :(==), :nargs, 3), (:call, :isa, (:ref, :args, 1), :Bool))), (:block,
                                                                    (:line, 837, :none),
                                                                    (:call, :show_block, :io, (:if, (:ref, :args, 1), (:quote, #QuoteNode
                                                                          :module
                                                                        ), (:quote, #QuoteNode
                                                                          :baremodule
                                                                        )), (:ref, :args, 2), (:ref, :args, 3), :indent),
                                                                    (:line, 838, :none),
                                                                    (:call, :print, :io, "end")
                                                                  ), (:block,
                                                                    (:line, 841, :none),
                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                            :type
                                                                          )), (:call, :(==), :nargs, 3)), (:block,
                                                                        (:line, 842, :none),
                                                                        (:call, :show_block, :io, (:if, (:ref, :args, 1), (:quote, #QuoteNode
                                                                              :type
                                                                            ), (:quote, #QuoteNode
                                                                              :immutable
                                                                            )), (:ref, :args, 2), (:ref, :args, 3), :indent),
                                                                        (:line, 843, :none),
                                                                        (:call, :print, :io, "end")
                                                                      ), (:block,
                                                                        (:line, 845, :none),
                                                                        (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                :bitstype
                                                                              )), (:call, :(==), :nargs, 2)), (:block,
                                                                            (:line, 846, :none),
                                                                            (:call, :print, :io, "bitstype "),
                                                                            (:line, 847, :none),
                                                                            (:call, :show_list, :io, :args, ' ', :indent)
                                                                          ), (:block,
                                                                            (:line, 850, :none),
                                                                            (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                    :return
                                                                                  )), (:&&, (:call, :(==), :nargs, 1), (:call, :is, (:ref, :args, 1), :nothing))), (:block,
                                                                                (:line, 851, :none),
                                                                                (:call, :print, :io, :head)
                                                                              ), (:block,
                                                                                (:line, 854, :none),
                                                                                (:if, (:&&, (:call, :is, :head, (:call, :Symbol, "::")), (:call, :(==), :nargs, 1)), (:block,
                                                                                    (:line, 855, :none),
                                                                                    (:call, :print, :io, "::"),
                                                                                    (:line, 856, :none),
                                                                                    (:call, :show_unquoted, :io, (:ref, :args, 1), :indent)
                                                                                  ), (:block,
                                                                                    (:line, 860, :none),
                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                            :...
                                                                                          )), (:call, :(==), :nargs, 1)), (:block,
                                                                                        (:line, 861, :none),
                                                                                        (:call, :show_unquoted, :io, (:ref, :args, 1), :indent),
                                                                                        (:line, 862, :none),
                                                                                        (:call, :print, :io, "...")
                                                                                      ), (:block,
                                                                                        (:line, 864, :none),
                                                                                        (:if, (:&&, (:call, :(==), :nargs, 0), (:call, :in, :head, (:tuple, (:quote, #QuoteNode
                                                                                                  :break
                                                                                                ), (:quote, #QuoteNode
                                                                                                  :continue
                                                                                                )))), (:block,
                                                                                            (:line, 865, :none),
                                                                                            (:call, :print, :io, :head)
                                                                                          ), (:block,
                                                                                            (:line, 867, :none),
                                                                                            (:if, (:||, (:&&, (:call, :(==), :nargs, 1), (:call, :in, :head, (:tuple, (:quote, #QuoteNode
                                                                                                        :return
                                                                                                      ), (:quote, #QuoteNode
                                                                                                        :abstract
                                                                                                      ), (:quote, #QuoteNode
                                                                                                        :const
                                                                                                      )))), (:call, :in, :head, (:tuple, (:quote, #QuoteNode
                                                                                                      :local
                                                                                                    ), (:quote, #QuoteNode
                                                                                                      :global
                                                                                                    ), (:quote, #QuoteNode
                                                                                                      :export
                                                                                                    )))), (:block,
                                                                                                (:line, 869, :none),
                                                                                                (:call, :print, :io, :head, ' '),
                                                                                                (:line, 870, :none),
                                                                                                (:call, :show_list, :io, :args, ", ", :indent)
                                                                                              ), (:block,
                                                                                                (:line, 872, :none),
                                                                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                        :macrocall
                                                                                                      )), (:call, :(>=), :nargs, 1)), (:block,
                                                                                                    (:line, 874, :none),
                                                                                                    (:if, (:call, :(>=), :prec, 0), (:block,
                                                                                                        (:line, 875, :none),
                                                                                                        (:call, :show_call, :io, (:quote, #QuoteNode
                                                                                                            :call
                                                                                                          ), (:ref, (:., :ex, (:quote, #QuoteNode
                                                                                                                :args
                                                                                                              )), 1), (:ref, (:., :ex, (:quote, #QuoteNode
                                                                                                                :args
                                                                                                              )), (:(:), 2, :end)), :indent)
                                                                                                      ), (:block,
                                                                                                        (:line, 877, :none),
                                                                                                        (:call, :show_list, :io, :args, ' ', :indent)
                                                                                                      ))
                                                                                                  ), (:block,
                                                                                                    (:line, 880, :none),
                                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                            :typealias
                                                                                                          )), (:call, :(==), :nargs, 2)), (:block,
                                                                                                        (:line, 881, :none),
                                                                                                        (:call, :print, :io, "typealias "),
                                                                                                        (:line, 882, :none),
                                                                                                        (:call, :show_list, :io, :args, ' ', :indent)
                                                                                                      ), (:block,
                                                                                                        (:line, 884, :none),
                                                                                                        (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                :line
                                                                                                              )), (:comparison, 1, :(<=), :nargs, :(<=), 2)), (:block,
                                                                                                            (:line, 885, :none),
                                                                                                            (:call, :show_linenumber, :io, (:..., :args))
                                                                                                          ), (:block,
                                                                                                            (:line, 887, :none),
                                                                                                            (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                    :if
                                                                                                                  )), (:call, :(==), :nargs, 3)), (:block,
                                                                                                                (:line, 888, :none),
                                                                                                                (:call, :show_block, :io, "if", (:ref, :args, 1), (:ref, :args, 2), :indent),
                                                                                                                (:line, 889, :none),
                                                                                                                (:call, :show_block, :io, "else", (:ref, :args, 3), :indent),
                                                                                                                (:line, 890, :none),
                                                                                                                (:call, :print, :io, "end")
                                                                                                              ), (:block,
                                                                                                                (:line, 892, :none),
                                                                                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                        :try
                                                                                                                      )), (:comparison, 3, :(<=), :nargs, :(<=), 4)), (:block,
                                                                                                                    (:line, 893, :none),
                                                                                                                    (:call, :show_block, :io, "try", (:ref, :args, 1), :indent),
                                                                                                                    (:line, 894, :none),
                                                                                                                    (:if, (:call, :is_expr, (:ref, :args, 3), (:quote, #QuoteNode
                                                                                                                          :block
                                                                                                                        )), (:block,
                                                                                                                        (:line, 895, :none),
                                                                                                                        (:call, :show_block, :io, "catch", (:if, (:call, :is, (:ref, :args, 2), false), (:ref, :Any), (:ref, :args, 2)), (:ref, :args, 3), :indent)
                                                                                                                      )),
                                                                                                                    (:line, 897, :none),
                                                                                                                    (:if, (:&&, (:call, :(>=), :nargs, 4), (:call, :is_expr, (:ref, :args, 4), (:quote, #QuoteNode
                                                                                                                            :block
                                                                                                                          ))), (:block,
                                                                                                                        (:line, 898, :none),
                                                                                                                        (:call, :show_block, :io, "finally", (:ref, :Any), (:ref, :args, 4), :indent)
                                                                                                                      )),
                                                                                                                    (:line, 900, :none),
                                                                                                                    (:call, :print, :io, "end")
                                                                                                                  ), (:block,
                                                                                                                    (:line, 902, :none),
                                                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                            :let
                                                                                                                          )), (:call, :(>=), :nargs, 1)), (:block,
                                                                                                                        (:line, 903, :none),
                                                                                                                        (:call, :show_block, :io, "let", (:ref, :args, (:(:), 2, :end)), (:ref, :args, 1), :indent),
                                                                                                                        (:line, 903, :none),
                                                                                                                        (:call, :print, :io, "end")
                                                                                                                      ), (:block,
                                                                                                                        (:line, 905, :none),
                                                                                                                        (:if, (:||, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                :block
                                                                                                                              )), (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                :body
                                                                                                                              ))), (:block,
                                                                                                                            (:line, 906, :none),
                                                                                                                            (:call, :show_block, :io, "begin", :ex, :indent),
                                                                                                                            (:line, 906, :none),
                                                                                                                            (:call, :print, :io, "end")
                                                                                                                          ), (:block,
                                                                                                                            (:line, 908, :none),
                                                                                                                            (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                    :quote
                                                                                                                                  )), (:&&, (:call, :(==), :nargs, 1), (:call, :isa, (:ref, :args, 1), :Symbol))), (:block,
                                                                                                                                (:line, 909, :none),
                                                                                                                                (:call, :show_unquoted_quote_expr, :io, (:ref, :args, 1), :indent, 0)
                                                                                                                              ), (:block,
                                                                                                                                (:line, 911, :none),
                                                                                                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                        :gotoifnot
                                                                                                                                      )), (:call, :(==), :nargs, 2)), (:block,
                                                                                                                                    (:line, 912, :none),
                                                                                                                                    (:call, :print, :io, "unless "),
                                                                                                                                    (:line, 913, :none),
                                                                                                                                    (:call, :show_list, :io, :args, " goto ", :indent)
                                                                                                                                  ), (:block,
                                                                                                                                    (:line, 915, :none),
                                                                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                            :string
                                                                                                                                          )), (:&&, (:call, :(==), :nargs, 1), (:call, :isa, (:ref, :args, 1), :AbstractString))), (:block,
                                                                                                                                        (:line, 916, :none),
                                                                                                                                        (:call, :show, :io, (:ref, :args, 1))
                                                                                                                                      ), (:block,
                                                                                                                                        (:line, 918, :none),
                                                                                                                                        (:if, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                              :null
                                                                                                                                            )), (:block,
                                                                                                                                            (:line, 919, :none),
                                                                                                                                            (:call, :print, :io, "nothing")
                                                                                                                                          ), (:block,
                                                                                                                                            (:line, 921, :none),
                                                                                                                                            (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                    :kw
                                                                                                                                                  )), (:call, :(==), (:call, :length, :args), 2)), (:block,
                                                                                                                                                (:line, 922, :none),
                                                                                                                                                (:call, :show_unquoted, :io, (:ref, :args, 1), (:call, :+, :indent, :indent_width)),
                                                                                                                                                (:line, 923, :none),
                                                                                                                                                (:call, :print, :io, '='),
                                                                                                                                                (:line, 924, :none),
                                                                                                                                                (:call, :show_unquoted, :io, (:ref, :args, 2), (:call, :+, :indent, :indent_width))
                                                                                                                                              ), (:block,
                                                                                                                                                (:line, 926, :none),
                                                                                                                                                (:if, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                      :string
                                                                                                                                                    )), (:block,
                                                                                                                                                    (:line, 927, :none),
                                                                                                                                                    (:call, :print, :io, '"'),
                                                                                                                                                    (:line, 928, :none),
                                                                                                                                                    (:for, (:(=), :x, :args), (:block,
                                                                                                                                                        (:line, 929, :none),
                                                                                                                                                        (:if, (:call, :!, (:call, :isa, :x, :AbstractString)), (:block,
                                                                                                                                                            (:line, 930, :none),
                                                                                                                                                            (:call, :print, :io, "\$("),
                                                                                                                                                            (:line, 931, :none),
                                                                                                                                                            (:if, (:&&, (:call, :isa, :x, :Symbol), (:call, :!, (:call, :in, :x, :quoted_syms))), (:block,
                                                                                                                                                                (:line, 932, :none),
                                                                                                                                                                (:call, :print, :io, :x)
                                                                                                                                                              ), (:block,
                                                                                                                                                                (:line, 934, :none),
                                                                                                                                                                (:call, :show_unquoted, :io, :x)
                                                                                                                                                              )),
                                                                                                                                                            (:line, 936, :none),
                                                                                                                                                            (:call, :print, :io, ")")
                                                                                                                                                          ), (:block,
                                                                                                                                                            (:line, 938, :none),
                                                                                                                                                            (:call, :escape_string, :io, :x, "\"\$")
                                                                                                                                                          ))
                                                                                                                                                      )),
                                                                                                                                                    (:line, 941, :none),
                                                                                                                                                    (:call, :print, :io, '"')
                                                                                                                                                  ), (:block,
                                                                                                                                                    (:line, 943, :none),
                                                                                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                            :&
                                                                                                                                                          )), (:call, :(==), (:call, :length, :args), 1)), (:block,
                                                                                                                                                        (:line, 944, :none),
                                                                                                                                                        (:call, :print, :io, :head),
                                                                                                                                                        (:line, 945, :none),
                                                                                                                                                        (:(=), :a1, (:ref, :args, 1)),
                                                                                                                                                        (:line, 946, :none),
                                                                                                                                                        (:(=), :parens, (:||, (:&&, (:call, :isa, :a1, :Expr), (:call, :(!==), (:., :a1, (:quote, #QuoteNode
                                                                                                                                                                    :head
                                                                                                                                                                  )), (:quote, #QuoteNode
                                                                                                                                                                  :tuple
                                                                                                                                                                ))), (:&&, (:call, :isa, :a1, :Symbol), (:call, :isoperator, :a1)))),
                                                                                                                                                        (:line, 947, :none),
                                                                                                                                                        (:&&, :parens, (:call, :print, :io, "(")),
                                                                                                                                                        (:line, 948, :none),
                                                                                                                                                        (:call, :show_unquoted, :io, :a1),
                                                                                                                                                        (:line, 949, :none),
                                                                                                                                                        (:&&, :parens, (:call, :print, :io, ")"))
                                                                                                                                                      ), (:block,
                                                                                                                                                        (:line, 952, :none),
                                                                                                                                                        (:if, (:&&, (:||, (:call, :(===), :head, (:call, :Symbol, '\'')), (:call, :(===), :head, (:call, :Symbol, ".'"))), (:call, :(==), (:call, :length, :args), 1)), (:block,
                                                                                                                                                            (:line, 953, :none),
                                                                                                                                                            (:if, (:call, :isa, (:ref, :args, 1), :Symbol), (:block,
                                                                                                                                                                (:line, 954, :none),
                                                                                                                                                                (:call, :show_unquoted, :io, (:ref, :args, 1))
                                                                                                                                                              ), (:block,
                                                                                                                                                                (:line, 956, :none),
                                                                                                                                                                (:call, :print, :io, "("),
                                                                                                                                                                (:line, 957, :none),
                                                                                                                                                                (:call, :show_unquoted, :io, (:ref, :args, 1)),
                                                                                                                                                                (:line, 958, :none),
                                                                                                                                                                (:call, :print, :io, ")")
                                                                                                                                                              )),
                                                                                                                                                            (:line, 960, :none),
                                                                                                                                                            (:call, :print, :io, :head)
                                                                                                                                                          ), (:block,
                                                                                                                                                            (:line, 962, :none),
                                                                                                                                                            (:if, (:||, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                                    :import
                                                                                                                                                                  )), (:||, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                                      :importall
                                                                                                                                                                    )), (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                                      :using
                                                                                                                                                                    )))), (:block,
                                                                                                                                                                (:line, 963, :none),
                                                                                                                                                                (:call, :print, :io, :head),
                                                                                                                                                                (:line, 964, :none),
                                                                                                                                                                (:(=), :first, true),
                                                                                                                                                                (:line, 965, :none),
                                                                                                                                                                (:for, (:(=), :a, :args), (:block,
                                                                                                                                                                    (:line, 966, :none),
                                                                                                                                                                    (:if, :first, (:block,
                                                                                                                                                                        (:line, 967, :none),
                                                                                                                                                                        (:call, :print, :io, ' '),
                                                                                                                                                                        (:line, 968, :none),
                                                                                                                                                                        (:(=), :first, false)
                                                                                                                                                                      ), (:block,
                                                                                                                                                                        (:line, 970, :none),
                                                                                                                                                                        (:call, :print, :io, '.')
                                                                                                                                                                      )),
                                                                                                                                                                    (:line, 972, :none),
                                                                                                                                                                    (:if, (:call, :!, (:call, :is, :a, (:quote, #QuoteNode
                                                                                                                                                                            :.
                                                                                                                                                                          ))), (:block,
                                                                                                                                                                        (:line, 973, :none),
                                                                                                                                                                        (:call, :print, :io, :a)
                                                                                                                                                                      ))
                                                                                                                                                                  ))
                                                                                                                                                              ), (:block,
                                                                                                                                                                (:line, 976, :none),
                                                                                                                                                                (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                                        :meta
                                                                                                                                                                      )), (:&&, (:call, :(>=), (:call, :length, :args), 2), (:call, :(===), (:ref, :args, 1), (:quote, #QuoteNode
                                                                                                                                                                          :push_loc
                                                                                                                                                                        )))), (:block,
                                                                                                                                                                    (:line, 977, :none),
                                                                                                                                                                    (:call, :print, :io, "# meta: location ", (:call, :join, (:ref, :args, (:(:), 2, :end)), " ")),
                                                                                                                                                                    (:line, 978, :none),
                                                                                                                                                                    (:(=), :show_type, false)
                                                                                                                                                                  ), (:block,
                                                                                                                                                                    (:line, 979, :none),
                                                                                                                                                                    (:if, (:&&, (:call, :is, :head, (:quote, #QuoteNode
                                                                                                                                                                            :meta
                                                                                                                                                                          )), (:&&, (:call, :(==), (:call, :length, :args), 1), (:call, :(===), (:ref, :args, 1), (:quote, #QuoteNode
                                                                                                                                                                              :pop_loc
                                                                                                                                                                            )))), (:block,
                                                                                                                                                                        (:line, 980, :none),
                                                                                                                                                                        (:call, :print, :io, "# meta: pop location"),
                                                                                                                                                                        (:line, 981, :none),
                                                                                                                                                                        (:(=), :show_type, false)
                                                                                                                                                                      ), (:block,
                                                                                                                                                                        (:line, 984, :none),
                                                                                                                                                                        (:(=), :show_type, false),
                                                                                                                                                                        (:line, 985, :none),
                                                                                                                                                                        (:if, (:&&, :emphstate, (:&&, (:call, :(!==), (:., :ex, (:quote, #QuoteNode
                                                                                                                                                                                    :head
                                                                                                                                                                                  )), (:quote, #QuoteNode
                                                                                                                                                                                  :lambda
                                                                                                                                                                                )), (:call, :(!==), (:., :ex, (:quote, #QuoteNode
                                                                                                                                                                                    :head
                                                                                                                                                                                  )), (:quote, #QuoteNode
                                                                                                                                                                                  :method
                                                                                                                                                                                )))), (:block,
                                                                                                                                                                            (:line, 986, :none),
                                                                                                                                                                            (:(=), :io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                                                                                                                                                                                    :TYPEEMPHASIZE
                                                                                                                                                                                  ), false))),
                                                                                                                                                                            (:line, 987, :none),
                                                                                                                                                                            (:(=), :emphstate, false)
                                                                                                                                                                          )),
                                                                                                                                                                        (:line, 989, :none),
                                                                                                                                                                        (:call, :print, :io, "\$(Expr("),
                                                                                                                                                                        (:line, 990, :none),
                                                                                                                                                                        (:call, :show, :io, (:., :ex, (:quote, #QuoteNode
                                                                                                                                                                              :head
                                                                                                                                                                            ))),
                                                                                                                                                                        (:line, 991, :none),
                                                                                                                                                                        (:for, (:(=), :arg, :args), (:block,
                                                                                                                                                                            (:line, 992, :none),
                                                                                                                                                                            (:call, :print, :io, ", "),
                                                                                                                                                                            (:line, 993, :none),
                                                                                                                                                                            (:call, :show, :io, :arg)
                                                                                                                                                                          )),
                                                                                                                                                                        (:line, 995, :none),
                                                                                                                                                                        (:call, :print, :io, "))")
                                                                                                                                                                      ))
                                                                                                                                                                  ))
                                                                                                                                                              ))
                                                                                                                                                          ))
                                                                                                                                                      ))
                                                                                                                                                  ))
                                                                                                                                              ))
                                                                                                                                          ))
                                                                                                                                      ))
                                                                                                                                  ))
                                                                                                                              ))
                                                                                                                          ))
                                                                                                                      ))
                                                                                                                  ))
                                                                                                              ))
                                                                                                          ))
                                                                                                      ))
                                                                                                  ))
                                                                                              ))
                                                                                          ))
                                                                                      ))
                                                                                  ))
                                                                              ))
                                                                          ))
                                                                      ))
                                                                  ))
                                                              ))
                                                          ))
                                                      ))
                                                  ))
                                              ))
                                          ))
                                      ))
                                  ))
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 997, :none),
        (:&&, :show_type, (:call, :show_expr_type, :io, (:., :ex, (:quote, #QuoteNode
                :typ
              )), :emphstate)),
        (:line, 998, :none),
        :nothing
      )),
    (:line, 1001, :none),
    (:function, (:call, :show_lambda_types, (:(::), :io, :IO), (:(::), :li, :LambdaInfo)), (:block,
        (:line, 1003, :none),
        (:if, (:call, :(===), (:., :li, (:quote, #QuoteNode
                :specTypes
              )), :Tuple), (:block,
            (:line, 1004, :none),
            (:call, :print, :io, (:., (:., :li, (:quote, #QuoteNode
                    :def
                  )), (:quote, #QuoteNode
                  :name
                )), "(...)"),
            (:line, 1005, :none),
            (:return, nothing)
          )),
        (:line, 1008, :none),
        (:(=), :sig, (:., (:., :li, (:quote, #QuoteNode
                :specTypes
              )), (:quote, #QuoteNode
              :parameters
            ))),
        (:line, 1009, :none),
        (:(=), :ft, (:ref, :sig, 1)),
        (:line, 1010, :none),
        (:if, (:&&, (:<:, :ft, :Function), (:&&, (:call, :isempty, (:., :ft, (:quote, #QuoteNode
                    :parameters
                  ))), (:&&, (:call, :isdefined, (:., (:., :ft, (:quote, #QuoteNode
                        :name
                      )), (:quote, #QuoteNode
                      :module
                    )), (:., (:., (:., :ft, (:quote, #QuoteNode
                          :name
                        )), (:quote, #QuoteNode
                        :mt
                      )), (:quote, #QuoteNode
                      :name
                    ))), (:call, :(==), :ft, (:call, :typeof, (:call, :getfield, (:., (:., :ft, (:quote, #QuoteNode
                            :name
                          )), (:quote, #QuoteNode
                          :module
                        )), (:., (:., (:., :ft, (:quote, #QuoteNode
                              :name
                            )), (:quote, #QuoteNode
                            :mt
                          )), (:quote, #QuoteNode
                          :name
                        )))))))), (:block,
            (:line, 1013, :none),
            (:call, :print, :io, (:., (:., (:., :ft, (:quote, #QuoteNode
                      :name
                    )), (:quote, #QuoteNode
                    :mt
                  )), (:quote, #QuoteNode
                  :name
                )))
          ), (:block,
            (:line, 1014, :none),
            (:if, (:&&, (:call, :isa, :ft, :DataType), (:&&, (:call, :is, (:., :ft, (:quote, #QuoteNode
                        :name
                      )), (:., :Type, (:quote, #QuoteNode
                        :name
                      ))), (:call, :isleaftype, :ft))), (:block,
                (:line, 1015, :none),
                (:(=), :f, (:ref, (:., :ft, (:quote, #QuoteNode
                        :parameters
                      )), 1)),
                (:line, 1016, :none),
                (:call, :print, :io, :f)
              ), (:block,
                (:line, 1018, :none),
                (:call, :print, :io, "(::", :ft, ")")
              ))
          )),
        (:line, 1020, :none),
        (:(=), :first, true),
        (:line, 1021, :none),
        (:call, :print, :io, '('),
        (:line, 1022, :none),
        (:for, (:(=), :i, (:(:), 2, (:call, :length, :sig))), (:block,
            (:line, 1023, :none),
            (:||, :first, (:call, :print, :io, ", ")),
            (:line, 1024, :none),
            (:(=), :first, false),
            (:line, 1025, :none),
            (:call, :print, :io, "::", (:ref, :sig, :i))
          )),
        (:line, 1027, :none),
        (:call, :print, :io, ')'),
        (:line, 1028, :none),
        :nothing
      )),
    (:line, 1031, :none),
    (:function, (:call, :ismodulecall, (:(::), :ex, :Expr)), (:block,
        (:line, 1032, :none),
        (:return, (:&&, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :call
              )), (:&&, (:||, (:call, :(===), (:ref, (:., :ex, (:quote, #QuoteNode
                        :args
                      )), 1), (:call, :GlobalRef, :Base, (:quote, #QuoteNode
                      :getfield
                    ))), (:call, :(===), (:ref, (:., :ex, (:quote, #QuoteNode
                        :args
                      )), 1), (:call, :GlobalRef, :Core, (:quote, #QuoteNode
                      :getfield
                    )))), (:&&, (:call, :isa, (:ref, (:., :ex, (:quote, #QuoteNode
                        :args
                      )), 2), :Symbol), (:&&, (:call, :isdefined, (:call, :current_module), (:ref, (:., :ex, (:quote, #QuoteNode
                          :args
                        )), 2)), (:call, :isa, (:call, :getfield, (:call, :current_module), (:ref, (:., :ex, (:quote, #QuoteNode
                            :args
                          )), 2)), :Module))))))
      )),
    (:line, 1039, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :tv, :TypeVar)), (:block,
        (:line, 1049, :none),
        (:(=), :tvar_env, (:&&, (:call, :isa, :io, :IOContext), (:call, :get, :io, (:quote, #QuoteNode
                :tvar_env
              ), false))),
        (:line, 1050, :none),
        (:if, (:call, :isa, :tvar_env, (:curly, :Vector, :Any)), (:block,
            (:line, 1051, :none),
            (:(=), :have_env, true),
            (:line, 1052, :none),
            (:(=), :in_env, (:call, :in, :tv, (:(::), :tvar_env, (:curly, :Vector, :Any))))
          ), (:block,
            (:line, 1054, :none),
            (:(=), :have_env, false),
            (:line, 1055, :none),
            (:(=), :in_env, false)
          )),
        (:line, 1057, :none),
        (:if, (:&&, (:call, :!, :in_env), (:call, :!, (:call, :is, (:., :tv, (:quote, #QuoteNode
                    :lb
                  )), :Bottom))), (:block,
            (:line, 1058, :none),
            (:call, :show, :io, (:., :tv, (:quote, #QuoteNode
                  :lb
                ))),
            (:line, 1059, :none),
            (:call, :print, :io, "<:")
          )),
        (:line, 1061, :none),
        (:call, :write, :io, (:., :tv, (:quote, #QuoteNode
              :name
            ))),
        (:line, 1062, :none),
        (:if, (:if, :have_env, (:call, :!, :in_env), (:call, :!, (:call, :is, (:., :tv, (:quote, #QuoteNode
                    :ub
                  )), :Any))), (:block,
            (:line, 1063, :none),
            (:call, :print, :io, "<:"),
            (:line, 1064, :none),
            (:call, :show, :io, (:., :tv, (:quote, #QuoteNode
                  :ub
                )))
          )),
        (:line, 1066, :none),
        :nothing
      )),
    (:line, 1069, :none),
    (:function, (:call, :dump, (:(::), :io, :IO), (:(::), :x, :SimpleVector), (:(::), :n, :Int), :indent), (:block,
        (:line, 1070, :none),
        (:if, (:call, :isempty, :x), (:block,
            (:line, 1071, :none),
            (:call, :print, :io, "empty SimpleVector"),
            (:line, 1072, :none),
            (:return, nothing)
          )),
        (:line, 1074, :none),
        (:call, :print, :io, "SimpleVector"),
        (:line, 1075, :none),
        (:if, (:call, :>, :n, 0), (:block,
            (:line, 1076, :none),
            (:for, (:(=), :i, (:(:), 1, (:call, :length, :x))), (:block,
                (:line, 1077, :none),
                (:call, :println, :io),
                (:line, 1078, :none),
                (:call, :print, :io, :indent, "  ", :i, ": "),
                (:line, 1079, :none),
                (:if, (:call, :isassigned, :x, :i), (:block,
                    (:line, 1080, :none),
                    (:call, :dump, :io, (:ref, :x, :i), (:call, :-, :n, 1), (:call, :string, :indent, "  "))
                  ), (:block,
                    (:line, 1082, :none),
                    (:call, :print, :io, :undef_ref_str)
                  ))
              ))
          )),
        (:line, 1086, :none),
        :nothing
      )),
    (:line, 1089, :none),
    (:function, (:call, :dump, (:(::), :io, :IO), (:(::), :x, :ANY), (:(::), :n, :Int), :indent), (:block,
        (:line, 1090, :none),
        (:(=), :T, (:call, :typeof, :x)),
        (:line, 1091, :none),
        (:if, (:call, :isa, :x, :Function), (:block,
            (:line, 1092, :none),
            (:call, :print, :io, :x, " (function of type ", :T, ")")
          ), (:block,
            (:line, 1094, :none),
            (:call, :print, :io, :T)
          )),
        (:line, 1096, :none),
        (:if, (:call, :>, (:call, :nfields, :T), 0), (:block,
            (:line, 1097, :none),
            (:if, (:call, :>, :n, 0), (:block,
                (:line, 1098, :none),
                (:for, (:(=), :field, (:if, (:call, :isa, :x, :Tuple), (:(:), 1, (:call, :length, :x)), (:call, :fieldnames, :T))), (:block,
                    (:line, 1099, :none),
                    (:call, :println, :io),
                    (:line, 1100, :none),
                    (:call, :print, :io, :indent, "  ", :field, ": "),
                    (:line, 1101, :none),
                    (:if, (:call, :isdefined, :x, :field), (:block,
                        (:line, 1102, :none),
                        (:call, :dump, :io, (:call, :getfield, :x, :field), (:call, :-, :n, 1), (:call, :string, :indent, "  "))
                      ), (:block,
                        (:line, 1104, :none),
                        (:call, :print, :io, :undef_ref_str)
                      ))
                  ))
              ))
          ), (:block,
            (:line, 1109, :none),
            (:&&, (:call, :!, (:call, :isa, :x, :Function)), (:call, :print, :io, " ", :x))
          )),
        (:line, 1111, :none),
        :nothing
      )),
    (:line, 1114, :none),
    (:(=), (:call, :dump, (:(::), :io, :IO), (:(::), :x, :Module), (:(::), :n, :Int), :indent), (:block,
        (:line, 1114, :none),
        (:call, :print, :io, "Module ", :x)
      )),
    (:line, 1115, :none),
    (:(=), (:call, :dump, (:(::), :io, :IO), (:(::), :x, :String), (:(::), :n, :Int), :indent), (:block,
        (:line, 1115, :none),
        (:block,
          (:call, :print, :io, "String "),
          (:call, :show, :io, :x)
        )
      )),
    (:line, 1116, :none),
    (:(=), (:call, :dump, (:(::), :io, :IO), (:(::), :x, :Symbol), (:(::), :n, :Int), :indent), (:block,
        (:line, 1116, :none),
        (:call, :print, :io, (:call, :typeof, :x), " ", :x)
      )),
    (:line, 1117, :none),
    (:(=), (:call, :dump, (:(::), :io, :IO), (:(::), :x, :Union), (:(::), :n, :Int), :indent), (:block,
        (:line, 1117, :none),
        (:call, :print, :io, :x)
      )),
    (:line, 1119, :none),
    (:function, (:call, :dump_elts, (:(::), :io, :IO), (:(::), :x, :Array), (:(::), :n, :Int), :indent, :i0, :i1), (:block,
        (:line, 1120, :none),
        (:for, (:(=), :i, (:(:), :i0, :i1)), (:block,
            (:line, 1121, :none),
            (:call, :print, :io, :indent, "  ", :i, ": "),
            (:line, 1122, :none),
            (:if, (:call, :!, (:call, :isdefined, :x, :i)), (:block,
                (:line, 1123, :none),
                (:call, :print, :io, :undef_ref_str)
              ), (:block,
                (:line, 1125, :none),
                (:call, :dump, :io, (:ref, :x, :i), (:call, :-, :n, 1), (:call, :string, :indent, "  "))
              )),
            (:line, 1127, :none),
            (:&&, (:call, :<, :i, :i1), (:call, :println, :io))
          ))
      )),
    (:line, 1131, :none),
    (:function, (:call, :dump, (:(::), :io, :IO), (:(::), :x, :Array), (:(::), :n, :Int), :indent), (:block,
        (:line, 1132, :none),
        (:call, :print, :io, (:string, "Array{", (:call, :eltype, :x), "}(", (:call, :size, :x), ")")),
        (:line, 1133, :none),
        (:if, (:<:, (:call, :eltype, :x), :Number), (:block,
            (:line, 1134, :none),
            (:call, :print, :io, " "),
            (:line, 1135, :none),
            (:call, :show, :io, :x)
          ), (:block,
            (:line, 1137, :none),
            (:if, (:&&, (:call, :>, :n, 0), (:call, :!, (:call, :isempty, :x))), (:block,
                (:line, 1138, :none),
                (:call, :println, :io),
                (:line, 1139, :none),
                (:if, (:call, :get, :io, (:quote, #QuoteNode
                      :limit
                    ), false), (:block,
                    (:line, 1140, :none),
                    (:call, :dump_elts, :io, :x, :n, :indent, 1, (:if, (:call, :(<=), (:call, :length, :x), 10), (:call, :length, :x), 5)),
                    (:line, 1141, :none),
                    (:if, (:call, :>, (:call, :length, :x), 10), (:block,
                        (:line, 1142, :none),
                        (:call, :println, :io),
                        (:line, 1143, :none),
                        (:call, :println, :io, :indent, "  ..."),
                        (:line, 1144, :none),
                        (:call, :dump_elts, :io, :x, :n, :indent, (:call, :-, (:call, :length, :x), 4), (:call, :length, :x))
                      ))
                  ), (:block,
                    (:line, 1147, :none),
                    (:call, :dump_elts, :io, :x, :n, :indent, 1, (:call, :length, :x))
                  ))
              ))
          )),
        (:line, 1151, :none),
        :nothing
      )),
    (:line, 1155, :none),
    (:function, (:call, :dump, (:(::), :io, :IO), (:(::), :x, :DataType), (:(::), :n, :Int), :indent), (:block,
        (:line, 1156, :none),
        (:call, :print, :io, :x),
        (:line, 1157, :none),
        (:if, (:call, :(!==), :x, :Any), (:block,
            (:line, 1158, :none),
            (:call, :print, :io, " <: ", (:call, :supertype, :x))
          )),
        (:line, 1160, :none),
        (:if, (:call, :!, (:<:, :x, :Tuple)), (:block,
            (:line, 1161, :none),
            (:(=), :tvar_io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :tvar_env
                  ), (:ref, :Any, (:..., (:., :x, (:quote, #QuoteNode
                          :parameters
                        ))))))),
            (:line, 1162, :none),
            (:(=), :fields, (:call, :fieldnames, :x)),
            (:line, 1163, :none),
            (:if, (:call, :>, :n, 0), (:block,
                (:line, 1164, :none),
                (:for, (:(=), :idx, (:(:), 1, (:call, :length, :fields))), (:block,
                    (:line, 1165, :none),
                    (:call, :println, :io),
                    (:line, 1166, :none),
                    (:call, :print, :io, :indent, "  ", (:ref, :fields, :idx), "::"),
                    (:line, 1167, :none),
                    (:call, :print, :tvar_io, (:call, :fieldtype, :x, :idx))
                  ))
              ))
          )),
        (:line, 1171, :none),
        :nothing
      )),
    (:line, 1176, :none),
    (:function, (:call, :dumptype, (:(::), :io, :IO), (:(::), :x, :ANY), (:(::), :n, :Int), :indent), (:block,
        (:line, 1177, :none),
        (:call, :print, :io, :x),
        (:line, 1178, :none),
        (:&&, (:call, :(==), :n, 0), (:return, nothing)),
        (:line, 1179, :none),
        (:&&, (:call, :isa, :x, :DataType), (:&&, (:., :x, (:quote, #QuoteNode
                :abstract
              )), (:call, :dumpsubtypes, :io, :x, :Main, :n, :indent))),
        (:line, 1180, :none),
        :nothing
      )),
    (:line, 1183, :none),
    (:(=), (:call, :directsubtype, (:(::), :a, :DataType), (:(::), :b, :DataType)), (:block,
        (:line, 1183, :none),
        (:call, :(===), (:., (:call, :supertype, :a), (:quote, #QuoteNode
              :name
            )), (:., :b, (:quote, #QuoteNode
              :name
            )))
      )),
    (:line, 1184, :none),
    (:(=), (:call, :directsubtype, (:(::), :a, :TypeConstructor), (:(::), :b, :DataType)), (:block,
        (:line, 1184, :none),
        (:call, :directsubtype, (:., :a, (:quote, #QuoteNode
              :body
            )), :b)
      )),
    (:line, 1185, :none),
    (:(=), (:call, :directsubtype, (:(::), :a, :Union), (:(::), :b, :DataType)), (:block,
        (:line, 1185, :none),
        (:call, :any, (:->, :t, (:block,
              (:line, 1185, :none),
              (:call, :directsubtype, :t, :b)
            )), (:., :a, (:quote, #QuoteNode
              :types
            )))
      )),
    (:line, 1187, :none),
    (:(=), (:call, :directsubtype, :a, (:(::), :b, :DataType)), (:block,
        (:line, 1187, :none),
        false
      )),
    (:line, 1188, :none),
    (:function, (:call, :dumpsubtypes, (:(::), :io, :IO), (:(::), :x, :DataType), (:(::), :m, :Module), (:(::), :n, :Int), :indent), (:block,
        (:line, 1189, :none),
        (:for, (:(=), :s, (:call, :names, :m, true)), (:block,
            (:line, 1190, :none),
            (:if, (:&&, (:call, :isdefined, :m, :s), (:call, :!, (:call, :isdeprecated, :m, :s))), (:block,
                (:line, 1191, :none),
                (:(=), :t, (:call, :getfield, :m, :s)),
                (:line, 1192, :none),
                (:if, (:||, (:call, :(===), :t, :x), (:call, :(===), :t, :m)), (:block,
                    (:line, 1193, :none),
                    (:continue,)
                  ), (:block,
                    (:line, 1194, :none),
                    (:if, (:&&, (:call, :isa, :t, :Module), (:&&, (:call, :(===), (:call, :module_name, :t), :s), (:call, :(===), (:call, :module_parent, :t), :m))), (:block,
                        (:line, 1196, :none),
                        (:call, :dumpsubtypes, :io, :x, :t, :n, :indent)
                      ), (:block,
                        (:line, 1197, :none),
                        (:if, (:&&, (:call, :isa, :t, :TypeConstructor), (:call, :directsubtype, (:(::), :t, :TypeConstructor), :x)), (:block,
                            (:line, 1198, :none),
                            (:call, :println, :io),
                            (:line, 1199, :none),
                            (:call, :print, :io, :indent, "  ", :m, ".", :s),
                            (:line, 1200, :none),
                            (:||, (:call, :isempty, (:., :t, (:quote, #QuoteNode
                                    :parameters
                                  ))), (:call, :print, :io, "{", (:call, :join, (:., :t, (:quote, #QuoteNode
                                      :parameters
                                    )), ","), "}")),
                            (:line, 1201, :none),
                            (:call, :print, :io, " = ", :t)
                          ), (:block,
                            (:line, 1202, :none),
                            (:if, (:&&, (:call, :isa, :t, :Union), (:call, :directsubtype, (:(::), :t, :Union), :x)), (:block,
                                (:line, 1203, :none),
                                (:call, :println, :io),
                                (:line, 1204, :none),
                                (:call, :print, :io, :indent, "  ", :m, ".", :s, " = ", :t)
                              ), (:block,
                                (:line, 1205, :none),
                                (:if, (:&&, (:call, :isa, :t, :DataType), (:call, :directsubtype, (:(::), :t, :DataType), :x)), (:block,
                                    (:line, 1206, :none),
                                    (:call, :println, :io),
                                    (:line, 1207, :none),
                                    (:if, (:||, (:call, :(!==), (:., (:., :t, (:quote, #QuoteNode
                                                :name
                                              )), (:quote, #QuoteNode
                                              :module
                                            )), :m), (:call, :(!=), (:., (:., :t, (:quote, #QuoteNode
                                                :name
                                              )), (:quote, #QuoteNode
                                              :name
                                            )), :s)), (:block,
                                        (:line, 1209, :none),
                                        (:call, :print, :io, :indent, "  ", :m, ".", :s, " = ", :t)
                                      ), (:block,
                                        (:line, 1212, :none),
                                        (:call, :print, :io, :indent, "  "),
                                        (:line, 1213, :none),
                                        (:call, :dumptype, :io, :t, (:call, :-, :n, 1), (:call, :string, :indent, "  "))
                                      ))
                                  ))
                              ))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 1218, :none),
        :nothing
      )),
    (:line, 1224, :none),
    (:(=), (:call, :dump, (:parameters, (:kw, :maxdepth, 8)), (:(::), :io, :IO), (:(::), :x, :DataType)), (:block,
        (:line, 1224, :none),
        (:block,
          (:call, (:if, (:., :x, (:quote, #QuoteNode
                  :abstract
                )), :dumptype, :dump), :io, :x, :maxdepth, ""),
          (:call, :println, :io)
        )
      )),
    (:line, 1226, :none),
    (:(=), (:call, :dump, (:parameters, (:kw, :maxdepth, 8)), (:(::), :io, :IO), :arg), (:block,
        (:line, 1226, :none),
        (:block,
          (:call, :dump, :io, :arg, :maxdepth, ""),
          (:call, :println, :io)
        )
      )),
    (:line, 1227, :none),
    (:(=), (:call, :dump, (:parameters, (:kw, :maxdepth, 8)), :arg), (:block,
        (:line, 1227, :none),
        (:call, :dump, (:parameters, (:kw, :maxdepth, :maxdepth)), (:call, :IOContext, (:(::), :STDOUT, :IO), (:(=>), (:quote, #QuoteNode
                :limit
              ), true)), :arg)
      )),
    (:line, 1230, :none),
    "`alignment(X)` returns a tuple (left,right) showing how many characters are\nneeded on either side of an alignment feature such as a decimal point.\n",
    (:line, 1234, :none),
    (:(=), (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Any)), (:block,
        (:line, 1234, :none),
        (:tuple, 0, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))))
      )),
    (:line, 1235, :none),
    (:(=), (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Number)), (:block,
        (:line, 1235, :none),
        (:tuple, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))), 0)
      )),
    (:line, 1236, :none),
    "`alignment(42)` yields (2,0)",
    (:line, 1237, :none),
    (:(=), (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Integer)), (:block,
        (:line, 1237, :none),
        (:tuple, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))), 0)
      )),
    (:line, 1238, :none),
    "`alignment(4.23)` yields (1,3) for `4` and `.23`",
    (:line, 1239, :none),
    (:function, (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Real)), (:block,
        (:line, 1240, :none),
        (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(.*?)((?:[\\.eE].*)?)\$"), (:call, :sprint, 0, :show, :x, (:kw, :env, :io)))),
        (:line, 1241, :none),
        (:if, (:call, :(===), :m, :nothing), (:tuple, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))), 0), (:tuple, (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 1)), (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 2))))
      )),
    (:line, 1244, :none),
    "`alignment(1 + 10im)` yields (3,5) for `1 +` and `_10im` (plus sign on left, space on right)",
    (:line, 1245, :none),
    (:function, (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Complex)), (:block,
        (:line, 1246, :none),
        (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(.*[\\+\\-])(.*)\$"), (:call, :sprint, 0, :show, :x, (:kw, :env, :io)))),
        (:line, 1247, :none),
        (:if, (:call, :(===), :m, :nothing), (:tuple, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))), 0), (:tuple, (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 1)), (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 2))))
      )),
    (:line, 1250, :none),
    (:function, (:call, :alignment, (:(::), :io, :IO), (:(::), :x, :Rational)), (:block,
        (:line, 1251, :none),
        (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(.*?/)(/.*)\$"), (:call, :sprint, 0, :show, :x, (:kw, :env, :io)))),
        (:line, 1252, :none),
        (:if, (:call, :(===), :m, :nothing), (:tuple, (:call, :length, (:call, :sprint, 0, :show, :x, (:kw, :env, :io))), 0), (:tuple, (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 1)), (:call, :length, (:ref, (:., :m, (:quote, #QuoteNode
                    :captures
                  )), 2))))
      )),
    (:line, 1256, :none),
    (:const, (:(=), :undef_ref_str, "#undef")),
    (:line, 1257, :none),
    (:const, (:(=), :undef_ref_alignment, (:tuple, 3, 3))),
    (:line, 1259, :none),
    "`alignment(X, rows, cols, cols_if_complete, cols_otherwise, sep)` returns the\nalignment for specified parts of array `X`, returning the (left,right) info.\nIt will look in X's `rows`, `cols` (both lists of indices)\nand figure out what's needed to be fully aligned, for example looking all\nthe way down a column and finding out the maximum size of each element.\nParameter `sep::Integer` is number of spaces to put between elements.\n`cols_if_complete` and `cols_otherwise` indicate screen width to use.\nAlignment is reported as a vector of (left,right) tuples, one for each\ncolumn going across the screen.\n",
    (:line, 1270, :none),
    (:function, (:call, :alignment, (:(::), :io, :IO), (:(::), :X, :AbstractVecOrMat), (:(::), :rows, :AbstractVector), (:(::), :cols, :AbstractVector), (:(::), :cols_if_complete, :Integer), (:(::), :cols_otherwise, :Integer), (:(::), :sep, :Integer)), (:block,
        (:line, 1273, :none),
        (:(=), :a, (:ref, (:curly, :Tuple, :Int, :Int))),
        (:line, 1274, :none),
        (:for, (:(=), :j, :cols), (:block,
            (:line, 1275, :none),
            (:(=), :l, (:(=), :r, 0)),
            (:line, 1276, :none),
            (:for, (:(=), :i, :rows), (:block,
                (:line, 1277, :none),
                (:if, (:call, :isassigned, :X, :i, :j), (:block,
                    (:line, 1278, :none),
                    (:(=), :aij, (:call, :alignment, :io, (:ref, :X, :i, :j)))
                  ), (:block,
                    (:line, 1280, :none),
                    (:(=), :aij, :undef_ref_alignment)
                  )),
                (:line, 1282, :none),
                (:(=), :l, (:call, :max, :l, (:ref, :aij, 1))),
                (:line, 1283, :none),
                (:(=), :r, (:call, :max, :r, (:ref, :aij, 2)))
              )),
            (:line, 1285, :none),
            (:call, :push!, :a, (:tuple, :l, :r)),
            (:line, 1286, :none),
            (:if, (:&&, (:call, :>, (:call, :length, :a), 1), (:call, :(>=), (:call, :+, (:call, :sum, (:call, :map, :sum, :a)), (:call, :*, :sep, (:call, :length, :a))), :cols_if_complete)), (:block,
                (:line, 1287, :none),
                (:call, :pop!, :a),
                (:line, 1288, :none),
                (:break,)
              ))
          )),
        (:line, 1291, :none),
        (:if, (:comparison, 1, :<, (:call, :length, :a), :<, (:call, :length, (:call, :indices, :X, 2))), (:block,
            (:line, 1292, :none),
            (:while, (:call, :(>=), (:call, :+, (:call, :sum, (:call, :map, :sum, :a)), (:call, :*, :sep, (:call, :length, :a))), :cols_otherwise), (:block,
                (:line, 1293, :none),
                (:call, :pop!, :a)
              ))
          )),
        (:line, 1296, :none),
        (:return, :a)
      )),
    (:line, 1299, :none),
    "Unexported convenience function used in body of `replace_in_print_matrix`\nmethods. By default returns a string of the same width as original with a\ncentered cdot, used in printing of structural zeros of structured matrices.\nAccept keyword args `c` for alternate single character marker.\n",
    (:line, 1305, :none),
    (:function, (:call, :replace_with_centered_mark, (:parameters, (:kw, (:(::), :c, :Char), 'â‹…')), (:(::), :s, :AbstractString)), (:block,
        (:line, 1306, :none),
        (:(=), :N, (:call, :length, :s)),
        (:line, 1307, :none),
        (:return, (:call, :join, (:call, :setindex!, (:comprehension, (:generator, " ", (:(=), :i, (:(:), 1, :N)))), (:call, :string, :c), (:call, :ceil, :Int, (:call, :/, :N, 2)))))
      )),
    (:line, 1310, :none),
    "`print_matrix_row(io, X, A, i, cols, sep)` produces the aligned output for\na single matrix row X[i, cols] where the desired list of columns is given.\nThe corresponding alignment A is used, and the separation between elements\nis specified as string sep.\n`print_matrix_row` will also respect compact output for elements.\n",
    (:line, 1317, :none),
    (:function, (:call, :print_matrix_row, (:(::), :io, :IO), (:(::), :X, :AbstractVecOrMat), (:(::), :A, :Vector), (:(::), :i, :Integer), (:(::), :cols, :AbstractVector), (:(::), :sep, :AbstractString)), (:block,
        (:line, 1320, :none),
        (:||, (:call, :isempty, :A), (:||, (:call, :(==), (:call, :first, (:call, :indices, :cols, 1)), 1), (:call, :throw, (:call, :DimensionMismatch, (:string, "indices of cols (", (:call, :indices, :cols, 1), ") must start at 1"))))),
        (:line, 1321, :none),
        (:for, (:(=), :k, (:(:), 1, (:call, :length, :A))), (:block,
            (:line, 1322, :none),
            (:(=), :j, (:ref, :cols, :k)),
            (:line, 1323, :none),
            (:if, (:call, :isassigned, :X, (:call, :Int, :i), (:call, :Int, :j)), (:block,
                (:line, 1324, :none),
                (:(=), :x, (:ref, :X, :i, :j)),
                (:line, 1325, :none),
                (:(=), :a, (:call, :alignment, :io, :x)),
                (:line, 1326, :none),
                (:(=), :sx, (:call, :sprint, 0, :show, :x, (:kw, :env, :io)))
              ), (:block,
                (:line, 1328, :none),
                (:(=), :a, :undef_ref_alignment),
                (:line, 1329, :none),
                (:(=), :sx, :undef_ref_str)
              )),
            (:line, 1331, :none),
            (:(=), :l, (:call, :repeat, " ", (:call, :-, (:ref, (:ref, :A, :k), 1), (:ref, :a, 1)))),
            (:line, 1332, :none),
            (:(=), :r, (:call, :repeat, " ", (:call, :-, (:ref, (:ref, :A, :k), 2), (:ref, :a, 2)))),
            (:line, 1333, :none),
            (:(=), :prettysx, (:call, :replace_in_print_matrix, :X, :i, :j, :sx)),
            (:line, 1334, :none),
            (:call, :print, :io, :l, :prettysx, :r),
            (:line, 1335, :none),
            (:if, (:call, :<, :k, (:call, :length, :A)), (:block,
                (:line, 1335, :none),
                (:call, :print, :io, :sep)
              ))
          ))
      )),
    (:line, 1339, :none),
    "`print_matrix_vdots` is used to show a series of vertical ellipsis instead\nof a bunch of rows for long matrices. Not only is the string vdots shown\nbut it also repeated every M elements if desired.\n",
    (:line, 1344, :none),
    (:function, (:call, :print_matrix_vdots, (:(::), :io, :IO), (:(::), :vdots, :AbstractString), (:(::), :A, :Vector), (:(::), :sep, :AbstractString), (:(::), :M, :Integer), (:(::), :m, :Integer)), (:block,
        (:line, 1346, :none),
        (:for, (:(=), :k, (:(:), 1, (:call, :length, :A))), (:block,
            (:line, 1347, :none),
            (:(=), :w, (:call, :+, (:ref, (:ref, :A, :k), 1), (:ref, (:ref, :A, :k), 2))),
            (:line, 1348, :none),
            (:if, (:call, :(==), (:call, :%, :k, :M), :m), (:block,
                (:line, 1349, :none),
                (:(=), :l, (:call, :repeat, " ", (:call, :max, 0, (:call, :-, (:ref, (:ref, :A, :k), 1), (:call, :length, :vdots))))),
                (:line, 1350, :none),
                (:(=), :r, (:call, :repeat, " ", (:call, :max, 0, (:call, :-, (:call, :-, :w, (:call, :length, :vdots)), (:call, :length, :l))))),
                (:line, 1351, :none),
                (:call, :print, :io, :l, :vdots, :r)
              ), (:block,
                (:line, 1353, :none),
                (:call, :print, :io, (:call, :repeat, " ", :w))
              )),
            (:line, 1355, :none),
            (:if, (:call, :<, :k, (:call, :length, :A)), (:block,
                (:line, 1355, :none),
                (:call, :print, :io, :sep)
              ))
          ))
      )),
    (:line, 1359, :none),
    "    print_matrix(io::IO, mat, pre, sep, post, hdots, vdots, ddots, hmod, vmod)\n\nPrints a matrix with limited output size. If `io` sets `:limit` to true,\nthen only the corners of the matrix are printed, separated with vertical,\nhorizontal, and diagonal ellipses as appropriate.\nOptional arguments are string pre (printed before the matrix, e.g. an opening bracket)\nwhich will cause a corresponding same-size indent on following rows, and\nstring post (printed at the end of the last row of the matrix).\nAlso options to use different ellipsis characters hdots, vdots, ddots.\nThese are repeated every hmod or vmod elements.\n",
    (:line, 1371, :none),
    (:function, (:call, :print_matrix, (:(::), :io, :IO), (:(::), :X, :AbstractVecOrMat), (:kw, (:(::), :pre, :AbstractString), " "), (:kw, (:(::), :sep, :AbstractString), "  "), (:kw, (:(::), :post, :AbstractString), ""), (:kw, (:(::), :hdots, :AbstractString), "  â€¦  "), (:kw, (:(::), :vdots, :AbstractString), "â‹®"), (:kw, (:(::), :ddots, :AbstractString), "  â‹±  "), (:kw, (:(::), :hmod, :Integer), 5), (:kw, (:(::), :vmod, :Integer), 5)), (:block,
        (:line, 1379, :none),
        (:if, (:call, :!, (:call, :get, :io, (:quote, #QuoteNode
                :limit
              ), false)), (:block,
            (:line, 1380, :none),
            (:(=), :screenheight, (:(=), :screenwidth, (:call, :typemax, :Int)))
          ), (:block,
            (:line, 1382, :none),
            (:(=), :sz, (:call, :displaysize, :io)),
            (:line, 1383, :none),
            (:(=), (:tuple, :screenheight, :screenwidth), (:tuple, (:call, :-, (:ref, :sz, 1), 4), (:ref, :sz, 2)))
          )),
        (:line, 1385, :none),
        (:-=, :screenwidth, (:call, :+, (:call, :length, :pre), (:call, :length, :post))),
        (:line, 1386, :none),
        (:(=), :presp, (:call, :repeat, " ", (:call, :length, :pre))),
        (:line, 1387, :none),
        (:(=), :postsp, ""),
        (:line, 1388, :none),
        (:macrocall, Symbol("@assert"), (:call, :(==), (:call, :strwidth, :hdots), (:call, :strwidth, :ddots))),
        (:line, 1389, :none),
        (:(=), :sepsize, (:call, :length, :sep)),
        (:line, 1390, :none),
        (:(=), (:tuple, :inds1, :inds2), (:tuple, (:call, :indices, :X, 1), (:call, :indices, :X, 2))),
        (:line, 1391, :none),
        (:(=), (:tuple, :m, :n), (:tuple, (:call, :length, :inds1), (:call, :length, :inds2))),
        (:line, 1392, :none),
        (:(=), (:tuple, :rowsA, :colsA), (:tuple, (:call, :collect, :inds1), (:call, :collect, :inds2))),
        (:line, 1397, :none),
        (:(=), :halfheight, (:call, :div, :screenheight, 2)),
        (:line, 1398, :none),
        (:if, (:call, :>, :m, :screenheight), (:block,
            (:line, 1399, :none),
            (:(=), :rowsA, (:vcat, (:ref, :rowsA, (:(:), 1, :halfheight)), (:ref, :rowsA, (:(:), (:call, :+, (:call, :-, :m, (:call, :div, (:call, :-, :screenheight, 1), 2)), 1), :m))))
          )),
        (:line, 1403, :none),
        (:(=), :maxpossiblecols, (:call, :div, :screenwidth, (:call, :+, 1, :sepsize))),
        (:line, 1404, :none),
        (:if, (:call, :>, :n, :maxpossiblecols), (:block,
            (:line, 1405, :none),
            (:(=), :colsA, (:vcat, (:ref, :colsA, (:(:), 1, :maxpossiblecols)), (:ref, :colsA, (:(:), (:call, :+, (:call, :-, :n, :maxpossiblecols), 1), :n))))
          )),
        (:line, 1407, :none),
        (:(=), :A, (:call, :alignment, :io, :X, :rowsA, :colsA, :screenwidth, :screenwidth, :sepsize)),
        (:line, 1409, :none),
        (:if, (:call, :(<=), :m, :screenheight), (:block,
            (:line, 1410, :none),
            (:if, (:call, :(<=), :n, (:call, :length, :A)), (:block,
                (:line, 1411, :none),
                (:for, (:(=), :i, :rowsA), (:block,
                    (:line, 1412, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                    (:line, 1413, :none),
                    (:call, :print_matrix_row, :io, :X, :A, :i, :colsA, :sep),
                    (:line, 1414, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp)),
                    (:line, 1415, :none),
                    (:if, (:call, :(!=), :i, (:call, :last, :rowsA)), (:block,
                        (:line, 1415, :none),
                        (:call, :println, :io)
                      ))
                  ))
              ), (:block,
                (:line, 1418, :none),
                (:(=), :c, (:call, :+, (:call, :div, (:call, :+, (:call, :-, :screenwidth, (:call, :length, :hdots)), 1), 2), 1)),
                (:line, 1419, :none),
                (:(=), :Ralign, (:call, :reverse, (:call, :alignment, :io, :X, :rowsA, (:call, :reverse, :colsA), :c, :c, :sepsize))),
                (:line, 1420, :none),
                (:(=), :c, (:call, :-, (:call, :-, (:call, :-, :screenwidth, (:call, :sum, (:call, :map, :sum, :Ralign))), (:call, :*, (:call, :-, (:call, :length, :Ralign), 1), :sepsize)), (:call, :length, :hdots))),
                (:line, 1421, :none),
                (:(=), :Lalign, (:call, :alignment, :io, :X, :rowsA, :colsA, :c, :c, :sepsize)),
                (:line, 1422, :none),
                (:for, (:(=), :i, :rowsA), (:block,
                    (:line, 1423, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                    (:line, 1424, :none),
                    (:call, :print_matrix_row, :io, :X, :Lalign, :i, (:ref, :colsA, (:(:), 1, (:call, :length, :Lalign))), :sep),
                    (:line, 1425, :none),
                    (:call, :print, :io, (:if, (:call, :(==), (:call, :%, (:call, :-, :i, (:call, :first, :rowsA)), :hmod), 0), :hdots, (:call, :repeat, " ", (:call, :length, :hdots)))),
                    (:line, 1426, :none),
                    (:call, :print_matrix_row, :io, :X, :Ralign, :i, (:call, :+, (:call, :-, :n, (:call, :length, :Ralign)), :colsA), :sep),
                    (:line, 1427, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp)),
                    (:line, 1428, :none),
                    (:if, (:call, :(!=), :i, (:call, :last, :rowsA)), (:block,
                        (:line, 1428, :none),
                        (:call, :println, :io)
                      ))
                  ))
              ))
          ), (:block,
            (:line, 1432, :none),
            (:if, (:call, :(<=), :n, (:call, :length, :A)), (:block,
                (:line, 1433, :none),
                (:for, (:(=), :i, :rowsA), (:block,
                    (:line, 1434, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                    (:line, 1435, :none),
                    (:call, :print_matrix_row, :io, :X, :A, :i, :colsA, :sep),
                    (:line, 1436, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp)),
                    (:line, 1437, :none),
                    (:if, (:call, :(!=), :i, (:ref, :rowsA, :end)), (:block,
                        (:line, 1437, :none),
                        (:call, :println, :io)
                      )),
                    (:line, 1438, :none),
                    (:if, (:call, :(==), :i, (:ref, :rowsA, :halfheight)), (:block,
                        (:line, 1439, :none),
                        (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                        (:line, 1440, :none),
                        (:call, :print_matrix_vdots, :io, :vdots, :A, :sep, :vmod, 1),
                        (:line, 1441, :none),
                        (:call, :println, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp))
                      ))
                  ))
              ), (:block,
                (:line, 1445, :none),
                (:(=), :c, (:call, :+, (:call, :div, (:call, :+, (:call, :-, :screenwidth, (:call, :length, :hdots)), 1), 2), 1)),
                (:line, 1446, :none),
                (:(=), :Ralign, (:call, :reverse, (:call, :alignment, :io, :X, :rowsA, (:call, :reverse, :colsA), :c, :c, :sepsize))),
                (:line, 1447, :none),
                (:(=), :c, (:call, :-, (:call, :-, (:call, :-, :screenwidth, (:call, :sum, (:call, :map, :sum, :Ralign))), (:call, :*, (:call, :-, (:call, :length, :Ralign), 1), :sepsize)), (:call, :length, :hdots))),
                (:line, 1448, :none),
                (:(=), :Lalign, (:call, :alignment, :io, :X, :rowsA, :colsA, :c, :c, :sepsize)),
                (:line, 1449, :none),
                (:(=), :r, (:call, :mod, (:call, :+, (:call, :-, (:call, :length, :Ralign), :n), 1), :vmod)),
                (:line, 1450, :none),
                (:for, (:(=), :i, :rowsA), (:block,
                    (:line, 1451, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                    (:line, 1452, :none),
                    (:call, :print_matrix_row, :io, :X, :Lalign, :i, (:ref, :colsA, (:(:), 1, (:call, :length, :Lalign))), :sep),
                    (:line, 1453, :none),
                    (:call, :print, :io, (:if, (:call, :(==), (:call, :%, (:call, :-, :i, (:call, :first, :rowsA)), :hmod), 0), :hdots, (:call, :repeat, " ", (:call, :length, :hdots)))),
                    (:line, 1454, :none),
                    (:call, :print_matrix_row, :io, :X, :Ralign, :i, (:call, :+, (:call, :-, :n, (:call, :length, :Ralign)), :colsA), :sep),
                    (:line, 1455, :none),
                    (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp)),
                    (:line, 1456, :none),
                    (:if, (:call, :(!=), :i, (:ref, :rowsA, :end)), (:block,
                        (:line, 1456, :none),
                        (:call, :println, :io)
                      )),
                    (:line, 1457, :none),
                    (:if, (:call, :(==), :i, (:ref, :rowsA, :halfheight)), (:block,
                        (:line, 1458, :none),
                        (:call, :print, :io, (:if, (:call, :(==), :i, (:call, :first, :rowsA)), :pre, :presp)),
                        (:line, 1459, :none),
                        (:call, :print_matrix_vdots, :io, :vdots, :Lalign, :sep, :vmod, 1),
                        (:line, 1460, :none),
                        (:call, :print, :io, :ddots),
                        (:line, 1461, :none),
                        (:call, :print_matrix_vdots, :io, :vdots, :Ralign, :sep, :vmod, :r),
                        (:line, 1462, :none),
                        (:call, :println, :io, (:if, (:call, :(==), :i, (:call, :last, :rowsA)), :post, :postsp))
                      ))
                  ))
              ))
          ))
      )),
    (:line, 1469, :none),
    "    summary(x)\n\nReturn a string giving a brief description of a value. By default returns\n`string(typeof(x))`, e.g. `Int64`.\n\nFor arrays, returns a string of size and type info,\ne.g. `10-element Array{Int64,1}`.\n",
    (:line, 1478, :none),
    (:(=), (:call, :summary, :x), (:block,
        (:line, 1478, :none),
        (:call, :string, (:call, :typeof, :x))
      )),
    (:line, 1481, :none),
    (:(=), (:call, :dims2string, (:(::), :d, :Dims)), (:block,
        (:line, 1481, :none),
        (:if, (:call, :isempty, :d), "0-dimensional", (:if, (:call, :(==), (:call, :length, :d), 1), (:string, (:ref, :d, 1), "-element"), (:call, :join, (:call, :map, :string, :d), 'Ã—')))
      )),
    (:line, 1485, :none),
    (:(=), (:call, :inds2string, (:(::), :inds, :Indices)), (:block,
        (:line, 1485, :none),
        (:call, :join, (:call, :map, :string, :inds), 'Ã—')
      )),
    (:line, 1488, :none),
    (:(=), (:call, :summary, (:(::), :a, :AbstractArray)), (:block,
        (:line, 1488, :none),
        (:call, :_summary, :a, (:call, :indices, :a))
      )),
    (:line, 1489, :none),
    (:(=), (:call, :_summary, :a, (:(::), :inds, (:curly, :Tuple, (:curly, :Vararg, :OneTo)))), (:block,
        (:line, 1489, :none),
        (:call, :string, (:call, :dims2string, (:call, :map, :length, :inds)), " ", (:call, :typeof, :a))
      )),
    (:line, 1490, :none),
    (:(=), (:call, :_summary, :a, :inds), (:block,
        (:line, 1490, :none),
        (:call, :string, (:call, :typeof, :a), " with indices ", (:call, :inds2string, :inds))
      )),
    (:line, 1493, :none),
    (:function, (:call, :show_nd, (:(::), :io, :IO), (:(::), :a, :AbstractArray), :print_matrix, :label_slices), (:block,
        (:line, 1494, :none),
        (:(=), (:(::), :limit, :Bool), (:call, :get, :io, (:quote, #QuoteNode
              :limit
            ), false)),
        (:line, 1495, :none),
        (:if, (:call, :isempty, :a), (:block,
            (:line, 1496, :none),
            (:return, nothing)
          )),
        (:line, 1498, :none),
        (:(=), :tailinds, (:call, :tail, (:call, :tail, (:call, :indices, :a)))),
        (:line, 1499, :none),
        (:(=), :nd, (:call, :-, (:call, :ndims, :a), 2)),
        (:line, 1500, :none),
        (:for, (:(=), :I, (:call, :CartesianRange, :tailinds)), (:block,
            (:line, 1501, :none),
            (:(=), :idxs, (:., :I, (:quote, #QuoteNode
                  :I
                ))),
            (:line, 1502, :none),
            (:if, :limit, (:block,
                (:line, 1503, :none),
                (:for, (:(=), :i, (:(:), 1, :nd)), (:block,
                    (:line, 1504, :none),
                    (:(=), :ii, (:ref, :idxs, :i)),
                    (:line, 1505, :none),
                    (:(=), :ind, (:ref, :tailinds, :i)),
                    (:line, 1506, :none),
                    (:if, (:call, :>, (:call, :length, :ind), 10), (:block,
                        (:line, 1507, :none),
                        (:if, (:&&, (:call, :(==), :ii, (:ref, :ind, 4)), (:call, :all, (:->, :d, (:block,
                                  (:line, 1507, :none),
                                  (:call, :(==), (:ref, :idxs, :d), (:call, :first, (:ref, :tailinds, :d)))
                                )), (:(:), 1, (:call, :-, :i, 1)))), (:block,
                            (:line, 1508, :none),
                            (:for, (:(=), :j, (:(:), (:call, :+, :i, 1), :nd)), (:block,
                                (:line, 1509, :none),
                                (:(=), :szj, (:call, :size, :a, (:call, :+, :j, 2))),
                                (:line, 1510, :none),
                                (:(=), :indj, (:ref, :tailinds, :j)),
                                (:line, 1511, :none),
                                (:if, (:&&, (:call, :>, :szj, 10), (:comparison, (:call, :+, (:call, :first, :indj), 2), :<, (:ref, :idxs, :j), :(<=), (:call, :-, (:call, :last, :indj), 3))), (:block,
                                    (:line, 1512, :none),
                                    (:macrocall, Symbol("@goto"), :skip)
                                  ))
                              )),
                            (:line, 1516, :none),
                            (:call, :print, :io, "...\n\n"),
                            (:line, 1517, :none),
                            (:macrocall, Symbol("@goto"), :skip)
                          )),
                        (:line, 1519, :none),
                        (:if, (:comparison, (:ref, :ind, 3), :<, :ii, :(<=), (:ref, :ind, (:call, :-, :end, 3))), (:block,
                            (:line, 1520, :none),
                            (:macrocall, Symbol("@goto"), :skip)
                          ))
                      ))
                  ))
              )),
            (:line, 1525, :none),
            (:if, :label_slices, (:block,
                (:line, 1526, :none),
                (:call, :print, :io, "[:, :, "),
                (:line, 1527, :none),
                (:for, (:(=), :i, (:(:), 1, (:call, :-, :nd, 1))), (:block,
                    (:line, 1527, :none),
                    (:call, :print, :io, (:string, (:ref, :idxs, :i), ", "))
                  )),
                (:line, 1528, :none),
                (:call, :println, :io, (:ref, :idxs, :end), "] =")
              )),
            (:line, 1530, :none),
            (:(=), :slice, (:call, :view, :a, (:call, :indices, :a, 1), (:call, :indices, :a, 2), (:..., :idxs))),
            (:line, 1531, :none),
            (:call, :print_matrix, :io, :slice),
            (:line, 1532, :none),
            (:call, :print, :io, (:if, (:call, :(==), :idxs, (:call, :map, :last, :tailinds)), "", "\n\n")),
            (:line, 1533, :none),
            (:macrocall, Symbol("@label"), :skip)
          ))
      )),
    (:line, 1537, :none),
    "`print_matrix_repr(io, X)` prints matrix X with opening and closing square brackets.\n",
    (:line, 1540, :none),
    (:function, (:call, :print_matrix_repr, :io, (:(::), :X, :AbstractArray)), (:block,
        (:line, 1541, :none),
        (:(=), :limit, (:(::), (:call, :get, :io, (:quote, #QuoteNode
                :limit
              ), false), :Bool)),
        (:line, 1542, :none),
        (:(=), (:tuple, :compact, :prefix), (:call, :array_eltype_show_how, :X)),
        (:line, 1543, :none),
        (:if, (:&&, :compact, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                  :compact
                )))), (:block,
            (:line, 1544, :none),
            (:(=), :io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :compact
                  ), :compact)))
          )),
        (:line, 1546, :none),
        (:(=), (:tuple, :indr, :indc), (:tuple, (:call, :indices, :X, 1), (:call, :indices, :X, 2))),
        (:line, 1547, :none),
        (:(=), (:tuple, :nr, :nc), (:tuple, (:call, :length, :indr), (:call, :length, :indc))),
        (:line, 1548, :none),
        (:(=), (:tuple, :rdots, :cdots), (:tuple, false, false)),
        (:line, 1549, :none),
        (:(=), (:tuple, :rr1, :rr2), (:tuple, (:call, (:curly, :UnitRange, :Int), :indr), (:(:), 1, 0))),
        (:line, 1550, :none),
        (:(=), (:tuple, :cr1, :cr2), (:tuple, (:call, (:curly, :UnitRange, :Int), :indc), (:(:), 1, 0))),
        (:line, 1551, :none),
        (:if, :limit, (:block,
            (:line, 1552, :none),
            (:if, (:call, :>, :nr, 4), (:block,
                (:line, 1553, :none),
                (:(=), (:tuple, :rr1, :rr2), (:tuple, (:ref, :rr1, (:(:), 1, 2)), (:ref, :rr1, (:(:), (:call, :-, :nr, 1), :nr)))),
                (:line, 1554, :none),
                (:(=), :rdots, true)
              )),
            (:line, 1556, :none),
            (:if, (:call, :>, :nc, 4), (:block,
                (:line, 1557, :none),
                (:(=), (:tuple, :cr1, :cr2), (:tuple, (:ref, :cr1, (:(:), 1, 2)), (:ref, :cr1, (:(:), (:call, :-, :nc, 1), :nc)))),
                (:line, 1558, :none),
                (:(=), :cdots, true)
              ))
          )),
        (:line, 1561, :none),
        (:call, :print, :io, :prefix, "["),
        (:line, 1562, :none),
        (:for, (:(=), :rr, (:tuple, :rr1, :rr2)), (:block,
            (:line, 1563, :none),
            (:for, (:(=), :i, :rr), (:block,
                (:line, 1564, :none),
                (:for, (:(=), :cr, (:tuple, :cr1, :cr2)), (:block,
                    (:line, 1565, :none),
                    (:for, (:(=), :j, :cr), (:block,
                        (:line, 1566, :none),
                        (:&&, (:call, :>, :j, (:call, :first, :cr)), (:call, :print, :io, " ")),
                        (:line, 1567, :none),
                        (:if, (:call, :!, (:call, :isassigned, :X, :i, :j)), (:block,
                            (:line, 1568, :none),
                            (:call, :print, :io, :undef_ref_str)
                          ), (:block,
                            (:line, 1570, :none),
                            (:(=), :el, (:ref, :X, :i, :j)),
                            (:line, 1571, :none),
                            (:call, :show, :io, :el)
                          ))
                      )),
                    (:line, 1574, :none),
                    (:if, (:call, :(==), (:call, :last, :cr), (:call, :last, :indc)), (:block,
                        (:line, 1575, :none),
                        (:&&, (:call, :<, :i, (:call, :last, :indr)), (:call, :print, :io, "; "))
                      ), (:block,
                        (:line, 1576, :none),
                        (:if, :cdots, (:block,
                            (:line, 1577, :none),
                            (:call, :print, :io, " â€¦ ")
                          ))
                      ))
                  ))
              )),
            (:line, 1581, :none),
            (:&&, (:call, :(!=), (:call, :last, :rr), :nr), (:&&, :rdots, (:call, :print, :io, "â€¦ ; ")))
          )),
        (:line, 1583, :none),
        (:call, :print, :io, "]")
      )),
    (:line, 1586, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :X, :AbstractArray)), (:block,
        (:line, 1586, :none),
        (:call, :showarray, :io, :X, true)
      )),
    (:line, 1588, :none),
    (:function, (:call, :showarray, (:parameters, (:kw, :header, true)), (:(::), :io, :IO), (:(::), :X, :AbstractArray), (:kw, (:(::), :repr, :Bool), true)), (:block,
        (:line, 1589, :none),
        (:if, (:&&, :repr, (:call, :(==), (:call, :ndims, :X), 1)), (:block,
            (:line, 1590, :none),
            (:return, (:call, :show_vector, :io, :X, "[", "]"))
          )),
        (:line, 1592, :none),
        (:if, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                :compact
              ))), (:block,
            (:line, 1593, :none),
            (:(=), :io, (:call, :IOContext, :io, (:kw, :compact, true)))
          )),
        (:line, 1595, :none),
        (:if, (:&&, (:call, :!, :repr), (:&&, (:call, :get, :io, (:quote, #QuoteNode
                  :limit
                ), false), (:call, :(===), (:call, :eltype, :X), :Method))), (:block,
            (:line, 1597, :none),
            (:(=), :io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :limit
                  ), false)))
          )),
        (:line, 1599, :none),
        (:&&, (:&&, (:call, :!, :repr), :header), (:call, :print, :io, (:call, :summary, :X))),
        (:line, 1600, :none),
        (:if, (:call, :!, (:call, :isempty, :X)), (:block,
            (:line, 1601, :none),
            (:&&, (:&&, (:call, :!, :repr), :header), (:call, :println, :io, ":")),
            (:line, 1602, :none),
            (:if, (:call, :(==), (:call, :ndims, :X), 0), (:block,
                (:line, 1603, :none),
                (:if, (:call, :isassigned, :X), (:block,
                    (:line, 1604, :none),
                    (:return, (:call, :show, :io, (:ref, :X)))
                  ), (:block,
                    (:line, 1606, :none),
                    (:return, (:call, :print, :io, :undef_ref_str))
                  ))
              )),
            (:line, 1609, :none),
            (:if, :repr, (:block,
                (:line, 1610, :none),
                (:if, (:call, :(<=), (:call, :ndims, :X), 2), (:block,
                    (:line, 1611, :none),
                    (:call, :print_matrix_repr, :io, :X)
                  ), (:block,
                    (:line, 1613, :none),
                    (:call, :show_nd, :io, :X, :print_matrix_repr, false)
                  ))
              ), (:block,
                (:line, 1616, :none),
                (:(=), :punct, (:tuple, " ", "  ", "")),
                (:line, 1617, :none),
                (:if, (:call, :(<=), (:call, :ndims, :X), 2), (:block,
                    (:line, 1618, :none),
                    (:call, :print_matrix, :io, :X, (:..., :punct))
                  ), (:block,
                    (:line, 1620, :none),
                    (:call, :show_nd, :io, :X, (:->, (:tuple, :io, :slice), (:block,
                          (:line, 1621, :none),
                          (:call, :print_matrix, :io, :slice, (:..., :punct))
                        )), (:call, :!, :repr))
                  ))
              ))
          ))
      )),
    (:line, 1628, :none),
    (:(=), (:call, :showall, :x), (:block,
        (:line, 1628, :none),
        (:call, :showall, :STDOUT, :x)
      )),
    (:line, 1629, :none),
    (:function, (:call, :showall, (:(::), :io, :IO), :x), (:block,
        (:line, 1630, :none),
        (:if, (:call, :!, (:call, :get, :io, (:quote, #QuoteNode
                :limit
              ), false)), (:block,
            (:line, 1631, :none),
            (:call, :show, :io, :x)
          ), (:block,
            (:line, 1633, :none),
            (:call, :show, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :limit
                  ), false)), :x)
          ))
      )),
    (:line, 1637, :none),
    (:(=), (:call, :showcompact, :x), (:block,
        (:line, 1637, :none),
        (:call, :showcompact, :STDOUT, :x)
      )),
    (:line, 1638, :none),
    (:function, (:call, :showcompact, (:(::), :io, :IO), :x), (:block,
        (:line, 1639, :none),
        (:if, (:call, :get, :io, (:quote, #QuoteNode
              :compact
            ), false), (:block,
            (:line, 1640, :none),
            (:call, :show, :io, :x)
          ), (:block,
            (:line, 1642, :none),
            (:call, :show, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :compact
                  ), true)), :x)
          ))
      )),
    (:line, 1647, :none),
    (:function, (:call, :array_eltype_show_how, :X), (:block,
        (:line, 1648, :none),
        (:(=), :e, (:call, :eltype, :X)),
        (:line, 1649, :none),
        (:if, (:&&, (:call, :isa, :e, :DataType), (:call, :(===), :e, (:., (:., :e, (:quote, #QuoteNode
                    :name
                  )), (:quote, #QuoteNode
                  :primary
                )))), (:block,
            (:line, 1650, :none),
            (:(=), :str, (:call, :string, (:., :e, (:quote, #QuoteNode
                    :name
                  ))))
          ), (:block,
            (:line, 1652, :none),
            (:(=), :str, (:call, :string, :e))
          )),
        (:line, 1655, :none),
        (:tuple, (:call, :isleaftype, :e), (:if, (:&&, (:call, :!, (:call, :isempty, :X)), (:||, (:call, :(===), :e, :Float64), (:||, (:call, :(===), :e, :Int), (:call, :(===), :e, :Char)))), "", :str))
      )),
    (:line, 1658, :none),
    (:function, (:call, :show_vector, (:(::), :io, :IO), :v, :opn, :cls), (:block,
        (:line, 1659, :none),
        (:(=), (:tuple, :compact, :prefix), (:call, :array_eltype_show_how, :v)),
        (:line, 1660, :none),
        (:(=), :limited, (:call, :get, :io, (:quote, #QuoteNode
              :limit
            ), false)),
        (:line, 1661, :none),
        (:if, (:&&, :compact, (:call, :!, (:call, :haskey, :io, (:quote, #QuoteNode
                  :compact
                )))), (:block,
            (:line, 1662, :none),
            (:(=), :io, (:call, :IOContext, :io, (:(=>), (:quote, #QuoteNode
                    :compact
                  ), :compact)))
          )),
        (:line, 1664, :none),
        (:call, :print, :io, :prefix),
        (:line, 1665, :none),
        (:if, (:&&, :limited, (:call, :>, (:call, :_length, :v), 20)), (:block,
            (:line, 1666, :none),
            (:(=), :inds, (:call, :indices1, :v)),
            (:line, 1667, :none),
            (:call, :show_delim_array, :io, :v, :opn, ",", "", false, (:ref, :inds, 1), (:call, :+, (:ref, :inds, 1), 9)),
            (:line, 1668, :none),
            (:call, :print, :io, "  â€¦  "),
            (:line, 1669, :none),
            (:call, :show_delim_array, :io, :v, "", ",", :cls, false, (:ref, :inds, (:call, :-, :end, 9)), (:ref, :inds, :end))
          ), (:block,
            (:line, 1671, :none),
            (:call, :show_delim_array, :io, :v, :opn, ",", :cls, false)
          ))
      )),
    (:line, 1679, :none),
    (:function, (:call, :print_bit_chunk, (:(::), :io, :IO), (:(::), :c, :UInt64), (:kw, (:(::), :l, :Integer), 64)), (:block,
        (:line, 1680, :none),
        (:for, (:(=), :s, (:(:), 0, (:call, :-, :l, 1))), (:block,
            (:line, 1681, :none),
            (:(=), :d, (:call, :&, (:call, :>>>, :c, :s), 1)),
            (:line, 1682, :none),
            (:call, :print, :io, (:ref, "01", (:call, :+, :d, 1))),
            (:line, 1683, :none),
            (:if, (:call, :(==), (:call, :&, (:call, :+, :s, 1), 7), 0), (:block,
                (:line, 1684, :none),
                (:call, :print, :io, " ")
              ))
          ))
      )),
    (:line, 1689, :none),
    (:(=), (:call, :print_bit_chunk, (:(::), :c, :UInt64), (:(::), :l, :Integer)), (:block,
        (:line, 1689, :none),
        (:call, :print_bit_chunk, :STDOUT, :c, :l)
      )),
    (:line, 1690, :none),
    (:(=), (:call, :print_bit_chunk, (:(::), :c, :UInt64)), (:block,
        (:line, 1690, :none),
        (:call, :print_bit_chunk, :STDOUT, :c)
      )),
    (:line, 1692, :none),
    (:function, (:call, :bitshow, (:(::), :io, :IO), (:(::), :B, :BitArray)), (:block,
        (:line, 1693, :none),
        (:&&, (:call, :isempty, :B), (:return, nothing)),
        (:line, 1694, :none),
        (:(=), :Bc, (:., :B, (:quote, #QuoteNode
              :chunks
            ))),
        (:line, 1695, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :-, (:call, :length, :Bc), 1))), (:block,
            (:line, 1696, :none),
            (:call, :print_bit_chunk, :io, (:ref, :Bc, :i)),
            (:line, 1697, :none),
            (:call, :print, :io, ": ")
          )),
        (:line, 1699, :none),
        (:(=), :l, (:call, :+, (:call, :_mod64, (:call, :-, (:call, :length, :B), 1)), 1)),
        (:line, 1700, :none),
        (:call, :print_bit_chunk, :io, (:ref, :Bc, :end), :l)
      )),
    (:line, 1702, :none),
    (:(=), (:call, :bitshow, (:(::), :B, :BitArray)), (:block,
        (:line, 1702, :none),
        (:call, :bitshow, :STDOUT, :B)
      )),
    (:line, 1704, :none),
    (:(=), (:call, :bitstring, (:(::), :B, :BitArray)), (:block,
        (:line, 1704, :none),
        (:call, :sprint, :bitshow, :B)
      ))
  ))