(:quote, (:block,
    (:line, 4, :none),
    (:abstract, :IPAddr),
    (:line, 6, :none),
    (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
              :isless
            )), (:<:, :T, :IPAddr)), (:(::), :a, :T), (:(::), :b, :T)), (:block,
        (:line, 6, :none),
        (:call, :isless, (:., :a, (:quote, #QuoteNode
              :host
            )), (:., :b, (:quote, #QuoteNode
              :host
            )))
      )),
    (:line, 7, :none),
    (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
              :convert
            )), (:<:, :T, :Integer)), (:(::), :dt, (:curly, :Type, :T)), (:(::), :ip, :IPAddr)), (:block,
        (:line, 7, :none),
        (:call, :dt, (:., :ip, (:quote, #QuoteNode
              :host
            )))
      )),
    (:line, 9, :none),
    (:type, false, (:<:, :IPv4, :IPAddr), (:block,
        (:line, 10, :none),
        (:(::), :host, :UInt32),
        (:line, 11, :none),
        (:(=), (:call, :IPv4, (:(::), :host, :UInt32)), (:block,
            (:line, 11, :none),
            (:call, :new, :host)
          )),
        (:line, 12, :none),
        (:(=), (:call, :IPv4, (:(::), :a, :UInt8), (:(::), :b, :UInt8), (:(::), :c, :UInt8), (:(::), :d, :UInt8)), (:block,
            (:line, 12, :none),
            (:call, :new, (:call, :|, (:call, :|, (:call, :|, (:call, :<<, (:call, :UInt32, :a), 24), (:call, :<<, (:call, :UInt32, :b), 16)), (:call, :<<, (:call, :UInt32, :c), 8)), :d))
          )),
        (:line, 16, :none),
        (:function, (:call, :IPv4, (:(::), :a, :Integer), (:(::), :b, :Integer), (:(::), :c, :Integer), (:(::), :d, :Integer)), (:block,
            (:line, 17, :none),
            (:if, (:call, :!, (:&&, (:comparison, 0, :(<=), :a, :(<=), 255), (:&&, (:comparison, 0, :(<=), :b, :(<=), 255), (:&&, (:comparison, 0, :(<=), :c, :(<=), 255), (:comparison, 0, :(<=), :d, :(<=), 255))))), (:block,
                (:line, 18, :none),
                (:call, :throw, (:call, :ArgumentError, "IPv4 field out of range (must be 0-255)"))
              )),
            (:line, 20, :none),
            (:call, :IPv4, (:call, :UInt8, :a), (:call, :UInt8, :b), (:call, :UInt8, :c), (:call, :UInt8, :d))
          ))
      )),
    (:line, 24, :none),
    (:function, (:call, :IPv4, (:(::), :host, :Integer)), (:block,
        (:line, 25, :none),
        (:if, (:call, :<, :host, 0), (:block,
            (:line, 26, :none),
            (:call, :throw, (:call, :ArgumentError, "IPv4 address must be positive"))
          ), (:block,
            (:line, 27, :none),
            (:if, (:&&, (:call, :>, (:call, :typemax, (:call, :typeof, :host)), (:call, :typemax, :UInt32)), (:call, :>, :host, (:call, :typemax, :UInt32))), (:block,
                (:line, 28, :none),
                (:call, :throw, (:call, :ArgumentError, "IPv4 address must fit within 32 bits"))
              ), (:block,
                (:line, 30, :none),
                (:return, (:call, :IPv4, (:call, :UInt32, :host)))
              ))
          ))
      )),
    (:line, 35, :none),
    (:(=), (:call, :IPv4, (:(::), :str, :AbstractString)), (:block,
        (:line, 35, :none),
        (:call, :parse, :IPv4, :str)
      )),
    (:line, 37, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :ip, :IPv4)), (:block,
        (:line, 37, :none),
        (:call, :print, :io, "ip\"", :ip, "\"")
      )),
    (:line, 38, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :ip, :IPv4)), (:block,
        (:line, 38, :none),
        (:call, :print, :io, (:call, :dec, (:call, :>>, (:call, :&, (:., :ip, (:quote, #QuoteNode
                    :host
                  )), 0xff000000), 24)), ".", (:call, :dec, (:call, :>>, (:call, :&, (:., :ip, (:quote, #QuoteNode
                    :host
                  )), 0x00ff0000), 16)), ".", (:call, :dec, (:call, :>>, (:call, :&, (:., :ip, (:quote, #QuoteNode
                    :host
                  )), 0xff00), 8)), ".", (:call, :dec, (:call, :&, (:., :ip, (:quote, #QuoteNode
                  :host
                )), 0xff)))
      )),
    (:line, 43, :none),
    (:type, false, (:<:, :IPv6, :IPAddr), (:block,
        (:line, 44, :none),
        (:(::), :host, :UInt128),
        (:line, 45, :none),
        (:(=), (:call, :IPv6, (:(::), :host, :UInt128)), (:block,
            (:line, 45, :none),
            (:call, :new, :host)
          )),
        (:line, 46, :none),
        (:(=), (:call, :IPv6, (:(::), :a, :UInt16), (:(::), :b, :UInt16), (:(::), :c, :UInt16), (:(::), :d, :UInt16), (:(::), :e, :UInt16), (:(::), :f, :UInt16), (:(::), :g, :UInt16), (:(::), :h, :UInt16)), (:block,
            (:line, 46, :none),
            (:call, :new, (:call, :|, (:call, :|, (:call, :|, (:call, :|, (:call, :|, (:call, :|, (:call, :|, (:call, :<<, (:call, :UInt128, :a), (:call, :*, 7, 16)), (:call, :<<, (:call, :UInt128, :b), (:call, :*, 6, 16))), (:call, :<<, (:call, :UInt128, :c), (:call, :*, 5, 16))), (:call, :<<, (:call, :UInt128, :d), (:call, :*, 4, 16))), (:call, :<<, (:call, :UInt128, :e), (:call, :*, 3, 16))), (:call, :<<, (:call, :UInt128, :f), (:call, :*, 2, 16))), (:call, :<<, (:call, :UInt128, :g), (:call, :*, 1, 16))), :h))
          )),
        (:line, 55, :none),
        (:function, (:call, :IPv6, (:(::), :a, :Integer), (:(::), :b, :Integer), (:(::), :c, :Integer), (:(::), :d, :Integer), (:(::), :e, :Integer), (:(::), :f, :Integer), (:(::), :g, :Integer), (:(::), :h, :Integer)), (:block,
            (:line, 57, :none),
            (:if, (:call, :!, (:&&, (:comparison, 0, :(<=), :a, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :b, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :c, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :d, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :e, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :f, :(<=), 0xffff), (:&&, (:comparison, 0, :(<=), :g, :(<=), 0xffff), (:comparison, 0, :(<=), :h, :(<=), 0xffff))))))))), (:block,
                (:line, 59, :none),
                (:call, :throw, (:call, :ArgumentError, "IPv6 field out of range (must be 0-65535)"))
              )),
            (:line, 61, :none),
            (:call, :IPv6, (:call, :UInt16, :a), (:call, :UInt16, :b), (:call, :UInt16, :c), (:call, :UInt16, :d), (:call, :UInt16, :e), (:call, :UInt16, :f), (:call, :UInt16, :g), (:call, :UInt16, :h))
          ))
      )),
    (:line, 66, :none),
    (:function, (:call, :IPv6, (:(::), :host, :Integer)), (:block,
        (:line, 67, :none),
        (:if, (:call, :<, :host, 0), (:block,
            (:line, 68, :none),
            (:call, :throw, (:call, :ArgumentError, "IPv6 address must be positive"))
          ), (:block,
            (:line, 71, :none),
            (:if, (:&&, (:call, :>, (:call, :typemax, (:call, :typeof, :host)), (:call, :typemax, :UInt128)), (:call, :>, :host, (:call, :typemax, :UInt128))), (:block,
                (:line, 72, :none),
                (:call, :throw, (:call, :ArgumentError, "IPv6 address must fit within 128 bits"))
              ), (:block,
                (:line, 74, :none),
                (:return, (:call, :IPv6, (:call, :UInt128, :host)))
              ))
          ))
      )),
    (:line, 78, :none),
    (:(=), (:call, :IPv6, (:(::), :str, :AbstractString)), (:block,
        (:line, 78, :none),
        (:call, :parse, :IPv6, :str)
      )),
    (:line, 81, :none),
    (:(=), (:call, :print_ipv6_field, :io, (:(::), :field, :UInt16)), (:block,
        (:line, 81, :none),
        (:call, :print, :io, (:call, :hex, :field))
      )),
    (:line, 83, :none),
    (:(=), (:call, :print_ipv6_field, :io, :ip, :i), (:block,
        (:line, 83, :none),
        (:call, :print_ipv6_field, :io, (:call, :ipv6_field, :ip, :i))
      )),
    (:line, 84, :none),
    (:function, (:call, :ipv6_field, (:(::), :ip, :IPv6), :i), (:block,
        (:line, 85, :none),
        (:if, (:||, (:call, :<, :i, 0), (:call, :>, :i, 7)), (:block,
            (:line, 86, :none),
            (:call, :throw, (:call, :BoundsError))
          )),
        (:line, 88, :none),
        (:call, :UInt16, (:call, :>>, (:call, :&, (:., :ip, (:quote, #QuoteNode
                  :host
                )), (:call, :<<, (:call, :UInt128, 0xffff), (:call, :*, :i, 16))), (:call, :*, :i, 16)))
      )),
    (:line, 91, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :ip, :IPv6)), (:block,
        (:line, 91, :none),
        (:call, :print, :io, "ip\"", :ip, "\"")
      )),
    (:line, 94, :none),
    (:function, (:call, :print, (:(::), :io, :IO), (:(::), :ip, :IPv6)), (:block,
        (:line, 95, :none),
        (:(=), :i, 8),
        (:line, 96, :none),
        (:(=), :m, 0),
        (:line, 97, :none),
        (:(=), :longest_sub_i, -1),
        (:line, 98, :none),
        (:while, (:call, :(!=), :i, 0), (:block,
            (:line, 99, :none),
            (:-=, :i, 1),
            (:line, 100, :none),
            (:(=), :field, (:call, :ipv6_field, :ip, :i)),
            (:line, 101, :none),
            (:if, (:&&, (:call, :(==), :field, 0), (:call, :(==), :longest_sub_i, -1)), (:block,
                (:line, 103, :none),
                (:(=), (:tuple, :longest_sub_i, :j, :m, :c), (:tuple, :i, :i, 1, 1)),
                (:line, 104, :none),
                (:while, (:call, :(!=), :j, 0), (:block,
                    (:line, 105, :none),
                    (:-=, :j, 1),
                    (:line, 106, :none),
                    (:if, (:call, :(==), (:call, :ipv6_field, :ip, :j), 0), (:block,
                        (:line, 107, :none),
                        (:+=, :c, 1)
                      ), (:block,
                        (:line, 109, :none),
                        (:(=), :c, 0)
                      )),
                    (:line, 111, :none),
                    (:if, (:call, :>, :c, :m), (:block,
                        (:line, 112, :none),
                        (:if, (:call, :(!=), (:call, :+, :j, :c), (:call, :+, :longest_sub_i, 1)), (:block,
                            (:line, 113, :none),
                            (:(=), :longest_sub_i, (:call, :-, (:call, :+, :j, :c), 1))
                          )),
                        (:line, 115, :none),
                        (:(=), :m, :c)
                      ))
                  )),
                (:line, 119, :none),
                (:if, (:call, :(==), :m, 1), (:block,
                    (:line, 120, :none),
                    (:(=), :longest_sub_i, 9)
                  ))
              )),
            (:line, 123, :none),
            (:if, (:call, :(==), :i, :longest_sub_i), (:block,
                (:line, 124, :none),
                (:call, :print, :io, ":"),
                (:line, 125, :none),
                (:-=, :i, (:call, :-, :m, 1)),
                (:line, 126, :none),
                (:if, (:call, :(==), :i, 0), (:block,
                    (:line, 127, :none),
                    (:call, :print, :io, ":"),
                    (:line, 128, :none),
                    (:break,)
                  ))
              ), (:block,
                (:line, 131, :none),
                (:if, (:call, :(!=), :i, 7), (:block,
                    (:line, 132, :none),
                    (:call, :print, :io, ":")
                  )),
                (:line, 134, :none),
                (:call, :print_ipv6_field, :io, :field)
              ))
          ))
      )),
    (:line, 141, :none),
    (:function, (:call, :parse, (:(::), (:curly, :Type, :IPv4)), (:(::), :str, :AbstractString)), (:block,
        (:line, 142, :none),
        (:(=), :fields, (:call, :split, :str, '.')),
        (:line, 143, :none),
        (:(=), :i, 1),
        (:line, 144, :none),
        (:(=), :ret, 0),
        (:line, 145, :none),
        (:for, (:(=), :f, :fields), (:block,
            (:line, 146, :none),
            (:if, (:call, :isempty, :f), (:block,
                (:line, 147, :none),
                (:call, :throw, (:call, :ArgumentError, "empty field in IPv4 address"))
              )),
            (:line, 149, :none),
            (:if, (:call, :(==), (:ref, :f, 1), '0'), (:block,
                (:line, 150, :none),
                (:if, (:&&, (:call, :(>=), (:call, :length, :f), 2), (:call, :(==), (:ref, :f, 2), 'x')), (:block,
                    (:line, 151, :none),
                    (:if, (:call, :>, (:call, :length, :f), 8), (:block,
                        (:line, 152, :none),
                        (:call, :throw, (:call, :ArgumentError, "IPv4 field too large"))
                      )),
                    (:line, 154, :none),
                    (:(=), :r, (:call, :parse, :Int, (:ref, :f, (:(:), 3, :end)), 16))
                  ), (:block,
                    (:line, 156, :none),
                    (:if, (:call, :>, (:call, :length, :f), 9), (:block,
                        (:line, 157, :none),
                        (:call, :throw, (:call, :ArgumentError, "IPv4 field too large"))
                      )),
                    (:line, 159, :none),
                    (:(=), :r, (:call, :parse, :Int, :f, 8))
                  ))
              ), (:block,
                (:line, 162, :none),
                (:(=), :r, (:call, :parse, :Int, :f, 10))
              )),
            (:line, 164, :none),
            (:if, (:call, :(!=), :i, (:call, :length, :fields)), (:block,
                (:line, 165, :none),
                (:if, (:||, (:call, :<, :r, 0), (:call, :>, :r, 255)), (:block,
                    (:line, 166, :none),
                    (:call, :throw, (:call, :ArgumentError, "IPv4 field out of range (must be 0-255)"))
                  )),
                (:line, 168, :none),
                (:|=, :ret, (:call, :<<, (:call, :UInt32, :r), (:call, :*, (:call, :-, 4, :i), 8)))
              ), (:block,
                (:line, 170, :none),
                (:if, (:call, :>, :r, (:call, :-, (:call, :<<, (:call, :UInt64, 1), (:call, :*, (:call, :-, 5, (:call, :length, :fields)), 8)), 1)), (:block,
                    (:line, 171, :none),
                    (:call, :throw, (:call, :ArgumentError, "IPv4 field too large"))
                  )),
                (:line, 173, :none),
                (:|=, :ret, :r)
              )),
            (:line, 175, :none),
            (:+=, :i, 1)
          )),
        (:line, 177, :none),
        (:call, :IPv4, :ret)
      )),
    (:line, 180, :none),
    (:function, (:call, :parseipv6fields, :fields, :num_fields), (:block,
        (:line, 181, :none),
        (:if, (:call, :>, (:call, :length, :fields), :num_fields), (:block,
            (:line, 182, :none),
            (:call, :throw, (:call, :ArgumentError, "too many fields in IPv6 address"))
          )),
        (:line, 184, :none),
        (:(=), :cf, 7),
        (:line, 185, :none),
        (:(=), :ret, (:call, :UInt128, 0)),
        (:line, 186, :none),
        (:for, (:(=), :f, :fields), (:block,
            (:line, 187, :none),
            (:if, (:call, :(==), :f, ""), (:block,
                (:line, 189, :none),
                (:if, (:&&, (:call, :(!=), :cf, 7), (:call, :(!=), :cf, 0)), (:block,
                    (:line, 190, :none),
                    (:-=, :cf, (:call, :-, :num_fields, (:call, :length, :fields)))
                  )),
                (:line, 192, :none),
                (:-=, :cf, 1),
                (:line, 193, :none),
                (:continue,)
              )),
            (:line, 195, :none),
            (:|=, :ret, (:call, :<<, (:call, :UInt128, (:call, :parse, :Int, :f, 16)), (:call, :*, :cf, 16))),
            (:line, 196, :none),
            (:-=, :cf, 1)
          )),
        (:line, 198, :none),
        :ret
      )),
    (:line, 200, :none),
    (:(=), (:call, :parseipv6fields, :fields), (:block,
        (:line, 200, :none),
        (:call, :parseipv6fields, :fields, 8)
      )),
    (:line, 202, :none),
    (:function, (:call, :parse, (:(::), (:curly, :Type, :IPv6)), (:(::), :str, :AbstractString)), (:block,
        (:line, 203, :none),
        (:(=), :fields, (:call, :split, :str, ':')),
        (:line, 204, :none),
        (:if, (:call, :>, (:call, :length, :fields), 8), (:block,
            (:line, 205, :none),
            (:call, :throw, (:call, :ArgumentError, "too many fields in IPv6 address"))
          ), (:block,
            (:line, 206, :none),
            (:if, (:call, :(==), (:call, :length, :fields), 8), (:block,
                (:line, 207, :none),
                (:return, (:call, :IPv6, (:call, :parseipv6fields, :fields)))
              ), (:block,
                (:line, 208, :none),
                (:if, (:call, :in, '.', (:ref, :fields, :end)), (:block,
                    (:line, 209, :none),
                    (:return, (:call, :IPv6, (:call, :|, (:call, :parseipv6fields, (:ref, :fields, (:(:), 1, (:call, :-, :end, 1))), 6), (:., (:call, :parse, :IPv4, (:ref, :fields, :end)), (:quote, #QuoteNode
                              :host
                            )))))
                  ), (:block,
                    (:line, 212, :none),
                    (:return, (:call, :IPv6, (:call, :parseipv6fields, :fields)))
                  ))
              ))
          ))
      )),
    (:line, 222, :none),
    (:function, (:call, :parse, (:(::), (:curly, :Type, :IPAddr)), (:(::), :str, :AbstractString)), (:block,
        (:line, 223, :none),
        (:if, (:call, :in, ':', :str), (:block,
            (:line, 224, :none),
            (:return, (:call, :parse, :IPv6, :str))
          ), (:block,
            (:line, 226, :none),
            (:return, (:call, :parse, :IPv4, :str))
          ))
      )),
    (:line, 230, :none),
    (:macro, (:call, :ip_str, :str), (:block,
        (:line, 231, :none),
        (:return, (:call, :parse, :IPAddr, :str))
      )),
    (:line, 234, :none),
    (:type, false, (:curly, :InetAddr, (:<:, :T, :IPAddr)), (:block,
        (:line, 235, :none),
        (:(::), :host, :T),
        (:line, 236, :none),
        (:(::), :port, :UInt16)
      )),
    (:line, 239, :none),
    (:(=), (:call, :InetAddr, (:(::), :ip, :IPAddr), :port), (:block,
        (:line, 239, :none),
        (:call, (:curly, :InetAddr, (:call, :typeof, :ip)), :ip, :port)
      )),
    (:line, 243, :none),
    (:type, true, (:<:, :TCPSocket, :LibuvStream), (:block,
        (:line, 244, :none),
        (:(::), :handle, (:curly, :Ptr, :Void)),
        (:line, 245, :none),
        (:(::), :status, :Int),
        (:line, 246, :none),
        (:(::), :line_buffered, :Bool),
        (:line, 247, :none),
        (:(::), :buffer, :IOBuffer),
        (:line, 248, :none),
        (:(::), :readcb, :Callback),
        (:line, 249, :none),
        (:(::), :readnotify, :Condition),
        (:line, 250, :none),
        (:(::), :ccb, :Callback),
        (:line, 251, :none),
        (:(::), :connectnotify, :Condition),
        (:line, 252, :none),
        (:(::), :closecb, :Callback),
        (:line, 253, :none),
        (:(::), :closenotify, :Condition),
        (:line, 254, :none),
        (:(::), :sendbuf, (:curly, :Nullable, :IOBuffer)),
        (:line, 255, :none),
        (:(::), :lock, :ReentrantLock),
        (:line, 256, :none),
        (:(::), :throttle, :Int),
        (:line, 258, :none),
        (:function, (:call, :TCPSocket, (:(::), :handle, (:curly, :Ptr, :Void)), :status), (:block,
            (:line, 259, :none),
            (:(=), :tcp, (:call, :new, :handle, :status, true, (:call, :PipeBuffer), false, (:call, :Condition), false, (:call, :Condition), false, (:call, :Condition), :nothing, (:call, :ReentrantLock), :DEFAULT_READ_BUFFER_SZ)),
            (:line, 270, :none),
            (:call, :associate_julia_struct, (:., :tcp, (:quote, #QuoteNode
                  :handle
                )), :tcp),
            (:line, 271, :none),
            (:call, :finalizer, :tcp, :uvfinalize),
            (:line, 272, :none),
            (:return, :tcp)
          ))
      )),
    (:line, 275, :none),
    (:function, (:call, :TCPSocket), (:block,
        (:line, 276, :none),
        (:(=), :tcp, (:call, :TCPSocket, (:call, (:., :Libc, (:quote, #QuoteNode
                  :malloc
                )), :_sizeof_uv_tcp), :StatusUninit)),
        (:line, 277, :none),
        (:(=), :err, (:ccall, (:quote, #QuoteNode
              :uv_tcp_init
            ), :Cint, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:call, :eventloop), (:., :tcp, (:quote, #QuoteNode
                :handle
              )))),
        (:line, 279, :none),
        (:call, :uv_error, "failed to create tcp socket", :err),
        (:line, 280, :none),
        (:(=), (:., :tcp, (:quote, #QuoteNode
              :status
            )), :StatusInit),
        (:line, 281, :none),
        (:return, :tcp)
      )),
    (:line, 284, :none),
    (:type, true, (:<:, :TCPServer, :LibuvServer), (:block,
        (:line, 285, :none),
        (:(::), :handle, (:curly, :Ptr, :Void)),
        (:line, 286, :none),
        (:(::), :status, :Int),
        (:line, 287, :none),
        (:(::), :ccb, :Callback),
        (:line, 288, :none),
        (:(::), :connectnotify, :Condition),
        (:line, 289, :none),
        (:(::), :closecb, :Callback),
        (:line, 290, :none),
        (:(::), :closenotify, :Condition),
        (:line, 292, :none),
        (:function, (:call, :TCPServer, (:(::), :handle, (:curly, :Ptr, :Void)), :status), (:block,
            (:line, 293, :none),
            (:(=), :tcp, (:call, :new, :handle, :status, false, (:call, :Condition), false, (:call, :Condition))),
            (:line, 298, :none),
            (:call, :associate_julia_struct, (:., :tcp, (:quote, #QuoteNode
                  :handle
                )), :tcp),
            (:line, 299, :none),
            (:call, :finalizer, :tcp, :uvfinalize),
            (:line, 300, :none),
            (:return, :tcp)
          ))
      )),
    (:line, 303, :none),
    (:function, (:call, :TCPServer), (:block,
        (:line, 304, :none),
        (:(=), :tcp, (:call, :TCPServer, (:call, (:., :Libc, (:quote, #QuoteNode
                  :malloc
                )), :_sizeof_uv_tcp), :StatusUninit)),
        (:line, 305, :none),
        (:(=), :err, (:ccall, (:quote, #QuoteNode
              :uv_tcp_init
            ), :Cint, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:call, :eventloop), (:., :tcp, (:quote, #QuoteNode
                :handle
              )))),
        (:line, 307, :none),
        (:call, :uv_error, "failed to create tcp server", :err),
        (:line, 308, :none),
        (:(=), (:., :tcp, (:quote, #QuoteNode
              :status
            )), :StatusInit),
        (:line, 309, :none),
        (:return, :tcp)
      )),
    (:line, 312, :none),
    (:(=), (:call, :isreadable, (:(::), :io, :TCPSocket)), (:block,
        (:line, 312, :none),
        (:||, (:call, :isopen, :io), (:call, :>, (:call, :nb_available, :io), 0))
      )),
    (:line, 313, :none),
    (:(=), (:call, :iswritable, (:(::), :io, :TCPSocket)), (:block,
        (:line, 313, :none),
        (:&&, (:call, :isopen, :io), (:call, :(!=), (:., :io, (:quote, #QuoteNode
                :status
              )), :StatusClosing))
      )),
    (:line, 317, :none),
    (:(=), (:call, :_jl_connect_raw, (:(::), :sock, :TCPSocket), (:(::), :sockaddr, (:curly, :Ptr, :Void))), (:block,
        (:line, 317, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_connect_raw
          ), :Int32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
              :handle
            )), :sockaddr, (:(::), :uv_jl_connectcb, (:curly, :Ptr, :Void)))
      )),
    (:line, 319, :none),
    (:(=), (:call, :_jl_sockaddr_from_addrinfo, (:(::), :addrinfo, (:curly, :Ptr, :Void))), (:block,
        (:line, 319, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_sockaddr_from_addrinfo
          ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :addrinfo)
      )),
    (:line, 321, :none),
    (:(=), (:call, :_jl_sockaddr_set_port, (:(::), :ptr, (:curly, :Ptr, :Void)), (:(::), :port, :UInt16)), (:block,
        (:line, 321, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_sockaddr_set_port
          ), :Void, (:tuple, (:curly, :Ptr, :Void), :UInt16), :ptr, :port)
      )),
    (:line, 324, :none),
    (:(=), (:call, :accept, (:(::), :server, :TCPServer)), (:block,
        (:line, 324, :none),
        (:call, :accept, :server, (:call, :TCPSocket))
      )),
    (:line, 329, :none),
    (:(=), (:call, :accept, (:(::), :server, :PipeServer)), (:block,
        (:line, 329, :none),
        (:call, :accept, :server, (:call, :init_pipe!, (:parameters, (:kw, :readable, false), (:kw, :writable, false), (:kw, :julia_only, true)), (:call, :PipeEndpoint)))
      )),
    (:line, 334, :none),
    (:type, true, (:<:, :UDPSocket, :LibuvStream), (:block,
        (:line, 335, :none),
        (:(::), :handle, (:curly, :Ptr, :Void)),
        (:line, 336, :none),
        (:(::), :status, :Int),
        (:line, 337, :none),
        (:(::), :recvnotify, :Condition),
        (:line, 338, :none),
        (:(::), :sendnotify, :Condition),
        (:line, 339, :none),
        (:(::), :closenotify, :Condition),
        (:line, 341, :none),
        (:function, (:call, :UDPSocket, (:(::), :handle, (:curly, :Ptr, :Void)), :status), (:block,
            (:line, 342, :none),
            (:(=), :udp, (:call, :new, :handle, :status, (:call, :Condition), (:call, :Condition), (:call, :Condition))),
            (:line, 348, :none),
            (:call, :associate_julia_struct, (:., :udp, (:quote, #QuoteNode
                  :handle
                )), :udp),
            (:line, 349, :none),
            (:call, :finalizer, :udp, :uvfinalize),
            (:line, 350, :none),
            (:return, :udp)
          ))
      )),
    (:line, 353, :none),
    (:function, (:call, :UDPSocket), (:block,
        (:line, 354, :none),
        (:(=), :this, (:call, :UDPSocket, (:call, (:., :Libc, (:quote, #QuoteNode
                  :malloc
                )), :_sizeof_uv_udp), :StatusUninit)),
        (:line, 355, :none),
        (:(=), :err, (:ccall, (:quote, #QuoteNode
              :uv_udp_init
            ), :Cint, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:call, :eventloop), (:., :this, (:quote, #QuoteNode
                :handle
              )))),
        (:line, 357, :none),
        (:call, :uv_error, "failed to create udp socket", :err),
        (:line, 358, :none),
        (:(=), (:., :this, (:quote, #QuoteNode
              :status
            )), :StatusInit),
        (:line, 359, :none),
        (:return, :this)
      )),
    (:line, 362, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :stream, :UDPSocket)), (:block,
        (:line, 362, :none),
        (:call, :print, :io, (:call, :typeof, :stream), "(", (:call, :uv_status_string, :stream), ")")
      )),
    (:line, 364, :none),
    (:function, (:call, :_uv_hook_close, (:(::), :sock, :UDPSocket)), (:block,
        (:line, 365, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :handle
            )), :C_NULL),
        (:line, 366, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusClosed),
        (:line, 367, :none),
        (:call, :notify, (:., :sock, (:quote, #QuoteNode
              :closenotify
            ))),
        (:line, 368, :none),
        (:call, :notify, (:., :sock, (:quote, #QuoteNode
              :sendnotify
            ))),
        (:line, 369, :none),
        (:call, :notify_error, (:., :sock, (:quote, #QuoteNode
              :recvnotify
            )), (:call, :EOFError))
      )),
    (:line, 373, :none),
    (:const, (:(=), :UV_TCP_IPV6ONLY, 1)),
    (:line, 376, :none),
    (:const, (:(=), :UV_UDP_IPV6ONLY, 1)),
    (:line, 380, :none),
    (:const, (:(=), :UV_UDP_PARTIAL, 2)),
    (:line, 387, :none),
    (:const, (:(=), :UV_UDP_REUSEADDR, 4)),
    (:line, 391, :none),
    (:(=), (:call, :_bind, (:(::), :sock, :TCPServer), (:(::), :host, :IPv4), (:(::), :port, :UInt16), (:kw, (:(::), :flags, :UInt32), (:call, :UInt32, 0))), (:block,
        (:line, 391, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_tcp_bind
          ), :Int32, (:tuple, (:curly, :Ptr, :Void), :UInt16, :UInt32, :Cuint), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:call, :hton, (:., :host, (:quote, #QuoteNode
                :host
              ))), :flags)
      )),
    (:line, 394, :none),
    (:(=), (:call, :_bind, (:(::), :sock, :TCPServer), (:(::), :host, :IPv6), (:(::), :port, :UInt16), (:kw, (:(::), :flags, :UInt32), (:call, :UInt32, 0))), (:block,
        (:line, 394, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_tcp_bind6
          ), :Int32, (:tuple, (:curly, :Ptr, :Void), :UInt16, (:curly, :Ptr, :UInt128), :Cuint), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:call, :Ref, (:call, :hton, (:., :host, (:quote, #QuoteNode
                  :host
                )))), :flags)
      )),
    (:line, 397, :none),
    (:(=), (:call, :_bind, (:(::), :sock, :UDPSocket), (:(::), :host, :IPv4), (:(::), :port, :UInt16), (:kw, (:(::), :flags, :UInt32), (:call, :UInt32, 0))), (:block,
        (:line, 397, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_udp_bind
          ), :Int32, (:tuple, (:curly, :Ptr, :Void), :UInt16, :UInt32, :UInt32), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:call, :hton, (:., :host, (:quote, #QuoteNode
                :host
              ))), :flags)
      )),
    (:line, 400, :none),
    (:(=), (:call, :_bind, (:(::), :sock, :UDPSocket), (:(::), :host, :IPv6), (:(::), :port, :UInt16), (:kw, (:(::), :flags, :UInt32), (:call, :UInt32, 0))), (:block,
        (:line, 400, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_udp_bind6
          ), :Int32, (:tuple, (:curly, :Ptr, :Void), :UInt16, (:curly, :Ptr, :UInt128), :UInt32), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:call, :Ref, (:call, :hton, (:., :host, (:quote, #QuoteNode
                  :host
                )))), :flags)
      )),
    (:line, 403, :none),
    (:function, (:call, :bind, (:parameters, (:kw, :ipv6only, false), (:kw, :reuseaddr, false), (:..., :kws)), (:(::), :sock, (:curly, :Union, :TCPServer, :UDPSocket)), (:(::), :host, :IPAddr), (:(::), :port, :Integer)), (:block,
        (:line, 404, :none),
        (:if, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                :status
              )), :StatusInit), (:block,
            (:line, 405, :none),
            (:call, :error, (:string, (:call, :typeof, :sock), " is not initialized"))
          )),
        (:line, 407, :none),
        (:(=), :flags, 0),
        (:line, 408, :none),
        (:if, (:&&, (:call, :isa, :host, :IPv6), :ipv6only), (:block,
            (:line, 409, :none),
            (:|=, :flags, (:if, (:call, :isa, :sock, :UDPSocket), :UV_UDP_IPV6ONLY, :UV_TCP_IPV6ONLY))
          )),
        (:line, 411, :none),
        (:if, (:&&, (:call, :isa, :sock, :UDPSocket), :reuseaddr), (:block,
            (:line, 412, :none),
            (:|=, :flags, :UV_UDP_REUSEADDR)
          )),
        (:line, 414, :none),
        (:(=), :err, (:call, :_bind, :sock, :host, (:call, :UInt16, :port), (:call, :UInt32, :flags))),
        (:line, 415, :none),
        (:if, (:call, :<, :err, 0), (:block,
            (:line, 416, :none),
            (:if, (:&&, (:call, :(!=), :err, :UV_EADDRINUSE), (:&&, (:call, :(!=), :err, :UV_EACCES), (:call, :(!=), :err, :UV_EADDRNOTAVAIL))), (:block,
                (:line, 418, :none),
                (:call, :throw, (:call, :UVError, "bind", :err))
              ), (:block,
                (:line, 420, :none),
                (:return, false)
              ))
          )),
        (:line, 423, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusOpen),
        (:line, 424, :none),
        (:&&, (:call, :isa, :sock, :UDPSocket), (:call, :setopt, (:parameters, (:..., :kws)), :sock)),
        (:line, 425, :none),
        true
      )),
    (:line, 428, :none),
    (:(=), (:call, :bind, (:(::), :sock, :TCPServer), (:(::), :addr, :InetAddr)), (:block,
        (:line, 428, :none),
        (:call, :bind, :sock, (:., :addr, (:quote, #QuoteNode
              :host
            )), (:., :addr, (:quote, #QuoteNode
              :port
            )))
      )),
    (:line, 430, :none),
    (:function, (:call, :setopt, (:parameters, (:kw, :multicast_loop, :nothing), (:kw, :multicast_ttl, :nothing), (:kw, :enable_broadcast, :nothing), (:kw, :ttl, :nothing)), (:(::), :sock, :UDPSocket)), (:block,
        (:line, 431, :none),
        (:if, (:call, :(==), (:., :sock, (:quote, #QuoteNode
                :status
              )), :StatusUninit), (:block,
            (:line, 432, :none),
            (:call, :error, "Cannot set options on uninitialized socket")
          )),
        (:line, 434, :none),
        (:if, (:call, :(!==), :multicast_loop, :nothing), (:block,
            (:line, 435, :none),
            (:call, :uv_error, "multicast_loop", (:call, :<, (:ccall, (:quote, #QuoteNode
                    :uv_udp_set_multicast_loop
                  ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
                      :handle
                    )), :multicast_loop), 0))
          )),
        (:line, 437, :none),
        (:if, (:call, :(!==), :multicast_ttl, :nothing), (:block,
            (:line, 438, :none),
            (:call, :uv_error, "multicast_ttl", (:ccall, (:quote, #QuoteNode
                  :uv_udp_set_multicast_ttl
                ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), :multicast_ttl))
          )),
        (:line, 440, :none),
        (:if, (:call, :(!==), :enable_broadcast, :nothing), (:block,
            (:line, 441, :none),
            (:call, :uv_error, "enable_broadcast", (:ccall, (:quote, #QuoteNode
                  :uv_udp_set_broadcast
                ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), :enable_broadcast))
          )),
        (:line, 443, :none),
        (:if, (:call, :(!==), :ttl, :nothing), (:block,
            (:line, 444, :none),
            (:call, :uv_error, "ttl", (:ccall, (:quote, #QuoteNode
                  :uv_udp_set_ttl
                ), :Cint, (:tuple, (:curly, :Ptr, :Void), :Cint), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), :ttl))
          ))
      )),
    (:line, 448, :none),
    (:(=), (:call, :alloc_buf_hook, (:(::), :sock, :UDPSocket), (:(::), :size, :UInt)), (:block,
        (:line, 448, :none),
        (:tuple, (:call, (:., :Libc, (:quote, #QuoteNode
                :malloc
              )), :size), :size)
      )),
    (:line, 450, :none),
    (:function, (:call, :_recv_start, (:(::), :sock, :UDPSocket)), (:block,
        (:line, 451, :none),
        (:if, (:call, :(==), (:ccall, (:quote, #QuoteNode
                :uv_is_active
              ), :Cint, (:tuple, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
                  :handle
                ))), 0), (:block,
            (:line, 452, :none),
            (:call, :uv_error, "recv_start", (:ccall, (:quote, #QuoteNode
                  :uv_udp_recv_start
                ), :Cint, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), (:(::), :uv_jl_alloc_buf, (:curly, :Ptr, :Void)), (:(::), :uv_jl_recvcb, (:curly, :Ptr, :Void))))
          ))
      )),
    (:line, 457, :none),
    (:(=), (:call, :_recv_stop, (:(::), :sock, :UDPSocket)), (:block,
        (:line, 457, :none),
        (:call, :uv_error, "recv_stop", (:ccall, (:quote, #QuoteNode
              :uv_udp_recv_stop
            ), :Cint, (:tuple, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
                :handle
              ))))
      )),
    (:line, 459, :none),
    (:function, (:call, :recv, (:(::), :sock, :UDPSocket)), (:block,
        (:line, 460, :none),
        (:(=), (:tuple, :addr, :data), (:call, :recvfrom, :sock)),
        (:line, 461, :none),
        :data
      )),
    (:line, 464, :none),
    (:function, (:call, :recvfrom, (:(::), :sock, :UDPSocket)), (:block,
        (:line, 466, :none),
        (:if, (:&&, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                  :status
                )), :StatusInit), (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                  :status
                )), :StatusOpen)), (:block,
            (:line, 467, :none),
            (:call, :error, "UDPSocket is not initialized and open")
          )),
        (:line, 469, :none),
        (:call, :_recv_start, :sock),
        (:line, 470, :none),
        (:(::), (:call, :stream_wait, :sock, (:., :sock, (:quote, #QuoteNode
                :recvnotify
              ))), (:curly, :Tuple, (:curly, :Union, :IPv4, :IPv6), (:curly, :Vector, :UInt8)))
      )),
    (:line, 474, :none),
    (:function, (:call, :uv_recvcb, (:(::), :handle, (:curly, :Ptr, :Void)), (:(::), :nread, :Cssize_t), (:(::), :buf, (:curly, :Ptr, :Void)), (:(::), :addr, (:curly, :Ptr, :Void)), (:(::), :flags, :Cuint)), (:block,
        (:line, 475, :none),
        (:(=), :sock, (:macrocall, Symbol("@handle_as"), :handle, :UDPSocket)),
        (:line, 476, :none),
        (:(=), :buf_addr, (:ccall, (:quote, #QuoteNode
              :jl_uv_buf_base
            ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :buf)),
        (:line, 477, :none),
        (:(=), :buf_size, (:ccall, (:quote, #QuoteNode
              :jl_uv_buf_len
            ), :Csize_t, (:tuple, (:curly, :Ptr, :Void)), :buf)),
        (:line, 479, :none),
        (:if, (:call, :>, (:call, :&, :flags, :UV_UDP_PARTIAL), 0), (:block,
            (:line, 480, :none),
            (:call, (:., :Libc, (:quote, #QuoteNode
                  :free
                )), :buf_addr),
            (:line, 481, :none),
            (:call, :notify_error, (:., :sock, (:quote, #QuoteNode
                  :recvnotify
                )), "Partial message received")
          )),
        (:line, 485, :none),
        (:(=), :addrout, (:if, (:call, :(==), :addr, :C_NULL), (:block,
              (:line, 486, :none),
              (:call, :IPv4, 0)
            ), (:block,
              (:line, 487, :none),
              (:if, (:call, :(==), (:ccall, (:quote, #QuoteNode
                      :jl_sockaddr_in_is_ip4
                    ), :Cint, (:tuple, (:curly, :Ptr, :Void)), :addr), 1), (:block,
                  (:line, 488, :none),
                  (:call, :IPv4, (:call, :ntoh, (:ccall, (:quote, #QuoteNode
                          :jl_sockaddr_host4
                        ), :UInt32, (:tuple, (:curly, :Ptr, :Void)), :addr)))
                ), (:block,
                  (:line, 490, :none),
                  (:(=), :tmp, (:vect, (:call, :UInt128, 0))),
                  (:line, 491, :none),
                  (:ccall, (:quote, #QuoteNode
                      :jl_sockaddr_host6
                    ), :UInt32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :UInt8)), :addr, (:call, :pointer, :tmp)),
                  (:line, 492, :none),
                  (:call, :IPv6, (:call, :ntoh, (:ref, :tmp, 1)))
                ))
            ))),
        (:line, 494, :none),
        (:(=), :buf, (:call, :unsafe_wrap, :Array, (:call, :convert, (:curly, :Ptr, :UInt8), :buf_addr), (:call, :Int, :buf_size), true)),
        (:line, 495, :none),
        (:call, :notify, (:., :sock, (:quote, #QuoteNode
              :recvnotify
            )), (:tuple, :addrout, (:ref, :buf, (:(:), 1, :nread)))),
        (:line, 496, :none),
        :nothing
      )),
    (:line, 499, :none),
    (:function, (:call, :_send, (:(::), :sock, :UDPSocket), (:(::), :ipaddr, :IPv4), (:(::), :port, :UInt16), :buf), (:block,
        (:line, 500, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_udp_send
          ), :Cint, (:tuple, (:curly, :Ptr, :Void), :UInt16, :UInt32, (:curly, :Ptr, :UInt8), :Csize_t, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:call, :hton, (:., :ipaddr, (:quote, #QuoteNode
                :host
              ))), :buf, (:call, :sizeof, :buf), (:(::), :uv_jl_sendcb, (:curly, :Ptr, :Void)))
      )),
    (:line, 504, :none),
    (:function, (:call, :_send, (:(::), :sock, :UDPSocket), (:(::), :ipaddr, :IPv6), (:(::), :port, :UInt16), :buf), (:block,
        (:line, 505, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_udp_send6
          ), :Cint, (:tuple, (:curly, :Ptr, :Void), :UInt16, (:curly, :Ptr, :UInt128), (:curly, :Ptr, :UInt8), :Csize_t, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
              :handle
            )), (:call, :hton, :port), (:&, (:call, :hton, (:., :ipaddr, (:quote, #QuoteNode
                  :host
                )))), :buf, (:call, :sizeof, :buf), (:(::), :uv_jl_sendcb, (:curly, :Ptr, :Void)))
      )),
    (:line, 509, :none),
    (:function, (:call, :send, (:(::), :sock, :UDPSocket), :ipaddr, :port, :msg), (:block,
        (:line, 511, :none),
        (:if, (:&&, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                  :status
                )), :StatusInit), (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                  :status
                )), :StatusOpen)), (:block,
            (:line, 512, :none),
            (:call, :error, "UDPSocket is not initialized and open")
          )),
        (:line, 514, :none),
        (:call, :uv_error, "send", (:call, :_send, :sock, :ipaddr, (:call, :UInt16, :port), :msg)),
        (:line, 515, :none),
        (:call, :stream_wait, :sock, (:., :sock, (:quote, #QuoteNode
              :sendnotify
            ))),
        (:line, 516, :none),
        :nothing
      )),
    (:line, 519, :none),
    (:function, (:call, :uv_sendcb, (:(::), :handle, (:curly, :Ptr, :Void)), (:(::), :status, :Cint)), (:block,
        (:line, 520, :none),
        (:(=), :sock, (:macrocall, Symbol("@handle_as"), :handle, :UDPSocket)),
        (:line, 521, :none),
        (:if, (:call, :<, :status, 0), (:block,
            (:line, 522, :none),
            (:call, :notify_error, (:., :sock, (:quote, #QuoteNode
                  :sendnotify
                )), (:call, :UVError, "UDP send failed", :status))
          )),
        (:line, 524, :none),
        (:call, :notify, (:., :sock, (:quote, #QuoteNode
              :sendnotify
            ))),
        (:line, 525, :none),
        (:call, (:., :Libc, (:quote, #QuoteNode
              :free
            )), :handle),
        (:line, 526, :none),
        :nothing
      )),
    (:line, 531, :none),
    (:type, true, (:<:, :DNSError, :Exception), (:block,
        (:line, 532, :none),
        (:(::), :host, :AbstractString),
        (:line, 533, :none),
        (:(::), :code, :Int32)
      )),
    (:line, 536, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :err, :DNSError)), (:block,
        (:line, 537, :none),
        (:call, :print, :io, "DNSError: ", (:., :err, (:quote, #QuoteNode
              :host
            )), ", ", (:call, :struverror, (:., :err, (:quote, #QuoteNode
                :code
              ))), " (", (:call, :uverrorname, (:., :err, (:quote, #QuoteNode
                :code
              ))), ")")
      )),
    (:line, 541, :none),
    (:(=), :callback_dict, (:call, :ObjectIdDict)),
    (:line, 543, :none),
    (:function, (:call, :uv_getaddrinfocb, (:(::), :req, (:curly, :Ptr, :Void)), (:(::), :status, :Cint), (:(::), :addrinfo, (:curly, :Ptr, :Void))), (:block,
        (:line, 544, :none),
        (:(=), :data, (:ccall, (:quote, #QuoteNode
              :jl_uv_getaddrinfo_data
            ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :req)),
        (:line, 545, :none),
        (:&&, (:call, :(==), :data, :C_NULL), (:return, nothing)),
        (:line, 546, :none),
        (:(=), :cb, (:(::), (:call, :unsafe_pointer_to_objref, :data), :Function)),
        (:line, 547, :none),
        (:call, :pop!, :callback_dict, :cb),
        (:line, 548, :none),
        (:if, (:||, (:call, :(!=), :status, 0), (:call, :(==), :addrinfo, :C_NULL)), (:block,
            (:line, 549, :none),
            (:call, :cb, (:call, :UVError, "uv_getaddrinfocb received an unexpected status code", :status))
          ), (:block,
            (:line, 551, :none),
            (:(=), :freeaddrinfo, :addrinfo),
            (:line, 552, :none),
            (:while, (:call, :(!=), :addrinfo, :C_NULL), (:block,
                (:line, 553, :none),
                (:(=), :sockaddr, (:ccall, (:quote, #QuoteNode
                      :jl_sockaddr_from_addrinfo
                    ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :addrinfo)),
                (:line, 554, :none),
                (:if, (:call, :(==), (:ccall, (:quote, #QuoteNode
                        :jl_sockaddr_is_ip4
                      ), :Int32, (:tuple, (:curly, :Ptr, :Void)), :sockaddr), 1), (:block,
                    (:line, 555, :none),
                    (:call, :cb, (:call, :IPv4, (:call, :ntoh, (:ccall, (:quote, #QuoteNode
                              :jl_sockaddr_host4
                            ), :UInt32, (:tuple, (:curly, :Ptr, :Void)), :sockaddr)))),
                    (:line, 556, :none),
                    (:break,)
                  )),
                (:line, 563, :none),
                (:(=), :addrinfo, (:ccall, (:quote, #QuoteNode
                      :jl_next_from_addrinfo
                    ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :Void)), :addrinfo))
              )),
            (:line, 565, :none),
            (:ccall, (:quote, #QuoteNode
                :uv_freeaddrinfo
              ), :Void, (:tuple, (:curly, :Ptr, :Void)), :freeaddrinfo)
          )),
        (:line, 567, :none),
        (:call, (:., :Libc, (:quote, #QuoteNode
              :free
            )), :req),
        (:line, 568, :none),
        :nothing
      )),
    (:line, 571, :none),
    (:function, (:call, :getaddrinfo, (:(::), :cb, :Function), (:(::), :host, :String)), (:block,
        (:line, 572, :none),
        (:||, (:call, :isascii, :host), (:call, :error, (:string, "non-ASCII hostname: ", :host))),
        (:line, 573, :none),
        (:(=), (:ref, :callback_dict, :cb), :cb),
        (:line, 574, :none),
        (:(=), :status, (:ccall, (:quote, #QuoteNode
              :jl_getaddrinfo
            ), :Int32, (:tuple, (:curly, :Ptr, :Void), :Cstring, (:curly, :Ptr, :UInt8), :Any, (:curly, :Ptr, :Void)), (:call, :eventloop), :host, :C_NULL, :cb, (:(::), :uv_jl_getaddrinfocb, (:curly, :Ptr, :Void)))),
        (:line, 576, :none),
        (:if, (:call, :(==), :status, :UV_EINVAL), (:block,
            (:line, 577, :none),
            (:call, :throw, (:call, :ArgumentError, "Invalid uv_getaddrinfo() agument"))
          ), (:block,
            (:line, 578, :none),
            (:if, (:call, :in, :status, (:vect, :UV_ENOMEM, :UV_ENOBUFS)), (:block,
                (:line, 579, :none),
                (:call, :throw, (:call, :OutOfMemoryError))
              ), (:block,
                (:line, 580, :none),
                (:if, (:call, :<, :status, 0), (:block,
                    (:line, 581, :none),
                    (:call, :throw, (:call, :UVError, "uv_getaddrinfo returned an unexpected error code", :status))
                  ))
              ))
          )),
        (:line, 583, :none),
        (:return, :nothing)
      )),
    (:line, 585, :none),
    (:(=), (:call, :getaddrinfo, (:(::), :cb, :Function), (:(::), :host, :AbstractString)), (:block,
        (:line, 585, :none),
        (:call, :getaddrinfo, :cb, (:call, :String, :host))
      )),
    (:line, 587, :none),
    (:function, (:call, :getaddrinfo, (:(::), :host, :String)), (:block,
        (:line, 588, :none),
        (:(=), :c, (:call, :Condition)),
        (:line, 589, :none),
        (:call, :getaddrinfo, (:->, (:tuple, :IP), (:block,
              (:line, 590, :none),
              (:call, :notify, :c, :IP)
            )), :host),
        (:line, 592, :none),
        (:(=), :r, (:call, :wait, :c)),
        (:line, 593, :none),
        (:if, (:call, :isa, :r, :UVError), (:block,
            (:line, 594, :none),
            (:if, (:call, :in, (:., :r, (:quote, #QuoteNode
                    :code
                  )), (:vect, :UV_EAI_NONAME, :UV_EAI_AGAIN, :UV_EAI_FAIL, :UV_EAI_NODATA)), (:block,
                (:line, 595, :none),
                (:call, :throw, (:call, :DNSError, :host, (:., :r, (:quote, #QuoteNode
                        :code
                      ))))
              ), (:block,
                (:line, 596, :none),
                (:if, (:call, :(==), (:., :r, (:quote, #QuoteNode
                        :code
                      )), :UV_EAI_SYSTEM), (:block,
                    (:line, 597, :none),
                    (:call, :throw, (:call, :SystemError, "uv_getaddrinfocb"))
                  ), (:block,
                    (:line, 598, :none),
                    (:if, (:call, :(==), (:., :r, (:quote, #QuoteNode
                            :code
                          )), :UV_EAI_MEMORY), (:block,
                        (:line, 599, :none),
                        (:call, :throw, (:call, :OutOfMemoryError))
                      ), (:block,
                        (:line, 601, :none),
                        (:call, :throw, :r)
                      ))
                  ))
              ))
          )),
        (:line, 604, :none),
        (:return, (:(::), :r, :IPAddr))
      )),
    (:line, 606, :none),
    (:(=), (:call, :getaddrinfo, (:(::), :host, :AbstractString)), (:block,
        (:line, 606, :none),
        (:call, :getaddrinfo, (:call, :String, :host))
      )),
    (:line, 608, :none),
    (:const, (:(=), :_sizeof_uv_interface_address, (:ccall, (:quote, #QuoteNode
            :jl_uv_sizeof_interface_address
          ), :Int32, (:tuple,)))),
    (:line, 610, :none),
    (:function, (:call, :getipaddr), (:block,
        (:line, 611, :none),
        (:(=), :addr, (:call, (:curly, :Array, (:curly, :Ptr, :UInt8)), 1)),
        (:line, 612, :none),
        (:(=), (:ref, :addr, 1), :C_NULL),
        (:line, 613, :none),
        (:(=), :count, (:call, :zeros, :Int32, 1)),
        (:line, 614, :none),
        (:(=), :lo_present, false),
        (:line, 615, :none),
        (:(=), :err, (:ccall, (:quote, #QuoteNode
              :jl_uv_interface_addresses
            ), :Int32, (:tuple, (:curly, :Ptr, (:curly, :Ptr, :UInt8)), (:curly, :Ptr, :Int32)), :addr, :count)),
        (:line, 616, :none),
        (:(=), (:tuple, :addr, :count), (:tuple, (:ref, :addr, 1), (:ref, :count, 1))),
        (:line, 617, :none),
        (:if, (:call, :(!=), :err, 0), (:block,
            (:line, 618, :none),
            (:ccall, (:quote, #QuoteNode
                :uv_free_interface_addresses
              ), :Void, (:tuple, (:curly, :Ptr, :UInt8), :Int32), :addr, :count),
            (:line, 619, :none),
            (:call, :throw, (:call, :UVError, "getlocalip", :err))
          )),
        (:line, 621, :none),
        (:for, (:(=), :i, (:(:), 0, (:call, :-, :count, 1))), (:block,
            (:line, 622, :none),
            (:(=), :current_addr, (:call, :+, :addr, (:call, :*, :i, :_sizeof_uv_interface_address))),
            (:line, 623, :none),
            (:if, (:call, :(==), 1, (:ccall, (:quote, #QuoteNode
                    :jl_uv_interface_address_is_internal
                  ), :Int32, (:tuple, (:curly, :Ptr, :UInt8)), :current_addr)), (:block,
                (:line, 624, :none),
                (:(=), :lo_present, true),
                (:line, 625, :none),
                (:continue,)
              )),
            (:line, 627, :none),
            (:(=), :sockaddr, (:ccall, (:quote, #QuoteNode
                  :jl_uv_interface_address_sockaddr
                ), (:curly, :Ptr, :Void), (:tuple, (:curly, :Ptr, :UInt8)), :current_addr)),
            (:line, 628, :none),
            (:if, (:call, :(==), (:ccall, (:quote, #QuoteNode
                    :jl_sockaddr_in_is_ip4
                  ), :Int32, (:tuple, (:curly, :Ptr, :Void)), :sockaddr), 1), (:block,
                (:line, 629, :none),
                (:(=), :rv, (:call, :IPv4, (:call, :ntoh, (:ccall, (:quote, #QuoteNode
                          :jl_sockaddr_host4
                        ), :UInt32, (:tuple, (:curly, :Ptr, :Void)), :sockaddr)))),
                (:line, 630, :none),
                (:ccall, (:quote, #QuoteNode
                    :uv_free_interface_addresses
                  ), :Void, (:tuple, (:curly, :Ptr, :UInt8), :Int32), :addr, :count),
                (:line, 631, :none),
                (:return, :rv)
              ))
          )),
        (:line, 639, :none),
        (:ccall, (:quote, #QuoteNode
            :uv_free_interface_addresses
          ), :Void, (:tuple, (:curly, :Ptr, :UInt8), :Int32), :addr, :count),
        (:line, 640, :none),
        (:if, :lo_present, (:macrocall, Symbol("@ip_str"), "127.0.0.1"), (:call, :error, "No networking interface available"))
      )),
    (:line, 645, :none),
    (:function, (:call, :connect!, (:(::), :sock, :TCPSocket), (:(::), :host, :IPv4), (:(::), :port, :Integer)), (:block,
        (:line, 646, :none),
        (:if, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                :status
              )), :StatusInit), (:block,
            (:line, 647, :none),
            (:call, :error, "TCPSocket is not initialized")
          )),
        (:line, 649, :none),
        (:if, (:call, :!, (:comparison, 0, :(<=), :port, :(<=), (:call, :typemax, :UInt16))), (:block,
            (:line, 650, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "port out of range, must be 0 ≤ port ≤ 65535, got ", :port)))
          )),
        (:line, 652, :none),
        (:call, :uv_error, "connect", (:ccall, (:quote, #QuoteNode
              :jl_tcp4_connect
            ), :Int32, (:tuple, (:curly, :Ptr, :Void), :UInt32, :UInt16, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
                :handle
              )), (:call, :hton, (:., :host, (:quote, #QuoteNode
                  :host
                ))), (:call, :hton, (:call, :UInt16, :port)), (:(::), :uv_jl_connectcb, (:curly, :Ptr, :Void)))),
        (:line, 654, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusConnecting)
      )),
    (:line, 657, :none),
    (:function, (:call, :connect!, (:(::), :sock, :TCPSocket), (:(::), :host, :IPv6), (:(::), :port, :Integer)), (:block,
        (:line, 658, :none),
        (:if, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                :status
              )), :StatusInit), (:block,
            (:line, 659, :none),
            (:call, :error, "TCPSocket is not initialized")
          )),
        (:line, 661, :none),
        (:if, (:call, :!, (:comparison, 0, :(<=), :port, :(<=), (:call, :typemax, :UInt16))), (:block,
            (:line, 662, :none),
            (:call, :throw, (:call, :ArgumentError, (:string, "port out of range, must be 0 ≤ port ≤ 65535, got ", :port)))
          )),
        (:line, 664, :none),
        (:call, :uv_error, "connect", (:ccall, (:quote, #QuoteNode
              :jl_tcp6_connect
            ), :Int32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :UInt128), :UInt16, (:curly, :Ptr, :Void)), (:., :sock, (:quote, #QuoteNode
                :handle
              )), (:&, (:call, :hton, (:., :host, (:quote, #QuoteNode
                    :host
                  )))), (:call, :hton, (:call, :UInt16, :port)), (:(::), :uv_jl_connectcb, (:curly, :Ptr, :Void)))),
        (:line, 666, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusConnecting)
      )),
    (:line, 669, :none),
    (:(=), (:call, :connect!, (:(::), :sock, :TCPSocket), (:(::), :addr, :InetAddr)), (:block,
        (:line, 669, :none),
        (:call, :connect!, :sock, (:., :addr, (:quote, #QuoteNode
              :host
            )), (:., :addr, (:quote, #QuoteNode
              :port
            )))
      )),
    (:line, 672, :none),
    (:(=), (:call, :connect, (:(::), :sock, :TCPSocket), (:(::), :port, :Integer)), (:block,
        (:line, 672, :none),
        (:call, :connect, :sock, (:call, :IPv4, 127, 0, 0, 1), :port)
      )),
    (:line, 673, :none),
    (:(=), (:call, :connect, (:(::), :port, :Integer)), (:block,
        (:line, 673, :none),
        (:call, :connect, (:call, :IPv4, 127, 0, 0, 1), :port)
      )),
    (:line, 676, :none),
    (:(=), (:call, :connect, (:(::), :host, :AbstractString), (:(::), :port, :Integer)), (:block,
        (:line, 676, :none),
        (:call, :connect, (:call, :TCPSocket), :host, :port)
      )),
    (:line, 677, :none),
    (:(=), (:call, :connect, (:(::), :addr, :IPAddr), (:(::), :port, :Integer)), (:block,
        (:line, 677, :none),
        (:call, :connect, (:call, :TCPSocket), :addr, :port)
      )),
    (:line, 678, :none),
    (:(=), (:call, :connect, (:(::), :addr, :InetAddr)), (:block,
        (:line, 678, :none),
        (:call, :connect, (:call, :TCPSocket), :addr)
      )),
    (:line, 680, :none),
    (:(=), (:call, :default_connectcb, :sock, :status), (:block,
        (:line, 680, :none),
        :nothing
      )),
    (:line, 682, :none),
    (:function, (:call, :connect!, (:(::), :sock, :TCPSocket), (:(::), :host, :AbstractString), (:(::), :port, :Integer)), (:block,
        (:line, 683, :none),
        (:if, (:call, :(!=), (:., :sock, (:quote, #QuoteNode
                :status
              )), :StatusInit), (:block,
            (:line, 684, :none),
            (:call, :error, "TCPSocket is not initialized")
          )),
        (:line, 686, :none),
        (:(=), :ipaddr, (:call, :getaddrinfo, :host)),
        (:line, 687, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusInit),
        (:line, 688, :none),
        (:call, :connect!, :sock, :ipaddr, :port),
        (:line, 689, :none),
        (:(=), (:., :sock, (:quote, #QuoteNode
              :status
            )), :StatusConnecting),
        (:line, 690, :none),
        :sock
      )),
    (:line, 695, :none),
    (:(=), (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), (:(::), :sock, :LibuvServer)), (:block,
        (:line, 695, :none),
        (:block,
          (:call, :uv_error, "listen", (:call, :_listen, (:parameters, (:kw, :backlog, :backlog)), :sock)),
          :sock
        )
      )),
    (:line, 697, :none),
    (:function, (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), :addr), (:block,
        (:line, 698, :none),
        (:(=), :sock, (:call, :TCPServer)),
        (:line, 699, :none),
        (:&&, (:call, :!, (:call, :bind, :sock, :addr)), (:call, :error, "cannot bind to port; may already be in use or access denied")),
        (:line, 700, :none),
        (:call, :uv_error, "listen", (:call, :_listen, (:parameters, (:kw, :backlog, :backlog)), :sock)),
        (:line, 701, :none),
        :sock
      )),
    (:line, 703, :none),
    (:(=), (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), (:(::), :port, :Integer)), (:block,
        (:line, 703, :none),
        (:call, :listen, (:parameters, (:kw, :backlog, :backlog)), (:call, :IPv4, (:call, :UInt32, 0)), :port)
      )),
    (:line, 704, :none),
    (:(=), (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), (:(::), :host, :IPAddr), (:(::), :port, :Integer)), (:block,
        (:line, 704, :none),
        (:call, :listen, (:parameters, (:kw, :backlog, :backlog)), (:call, :InetAddr, :host, :port))
      )),
    (:line, 706, :none),
    (:(=), (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), (:(::), :cb, :Callback), (:..., :args)), (:block,
        (:line, 706, :none),
        (:block,
          (:(=), :sock, (:call, :listen, (:parameters, (:kw, :backlog, :backlog)), (:..., :args))),
          (:(=), (:., :sock, (:quote, #QuoteNode
                :ccb
              )), :cb),
          :sock
        )
      )),
    (:line, 707, :none),
    (:(=), (:call, :listen, (:parameters, (:kw, (:(::), :backlog, :Integer), :BACKLOG_DEFAULT)), (:(::), :cb, :Callback), (:(::), :sock, (:curly, :Union, :TCPSocket, :UDPSocket))), (:block,
        (:line, 707, :none),
        (:block,
          (:(=), (:., :sock, (:quote, #QuoteNode
                :ccb
              )), :cb),
          (:call, :listen, (:parameters, (:kw, :backlog, :backlog)), :sock)
        )
      )),
    (:line, 711, :none),
    (:function, (:call, :accept_nonblock, (:(::), :server, :TCPServer), (:(::), :client, :TCPSocket)), (:block,
        (:line, 712, :none),
        (:if, (:call, :(!=), (:., :client, (:quote, #QuoteNode
                :status
              )), :StatusInit), (:block,
            (:line, 713, :none),
            (:call, :error, "client TCPSocket is not initialized")
          )),
        (:line, 715, :none),
        (:(=), :err, (:ccall, (:quote, #QuoteNode
              :uv_accept
            ), :Int32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void)), (:., :server, (:quote, #QuoteNode
                :handle
              )), (:., :client, (:quote, #QuoteNode
                :handle
              )))),
        (:line, 716, :none),
        (:if, (:call, :(==), :err, 0), (:block,
            (:line, 717, :none),
            (:(=), (:., :client, (:quote, #QuoteNode
                  :status
                )), :StatusOpen)
          )),
        (:line, 719, :none),
        :err
      )),
    (:line, 721, :none),
    (:function, (:call, :accept_nonblock, (:(::), :server, :TCPServer)), (:block,
        (:line, 722, :none),
        (:(=), :client, (:call, :TCPSocket)),
        (:line, 723, :none),
        (:call, :uv_error, "accept", (:call, :accept_nonblock, :server, :client)),
        (:line, 724, :none),
        :client
      )),
    (:line, 729, :none),
    (:function, (:call, :listenany, (:(::), :host, :IPAddr), :default_port), (:block,
        (:line, 730, :none),
        (:(=), :addr, (:call, :InetAddr, :host, :default_port)),
        (:line, 731, :none),
        (:while, true, (:block,
            (:line, 732, :none),
            (:(=), :sock, (:call, :TCPServer)),
            (:line, 733, :none),
            (:if, (:&&, (:call, :bind, :sock, :addr), (:call, :(==), (:call, :_listen, :sock), 0)), (:block,
                (:line, 734, :none),
                (:return, (:tuple, (:., :addr, (:quote, #QuoteNode
                        :port
                      )), :sock))
              )),
            (:line, 736, :none),
            (:call, :close, :sock),
            (:line, 737, :none),
            (:(=), :addr, (:call, :InetAddr, (:., :addr, (:quote, #QuoteNode
                    :host
                  )), (:call, :+, (:., :addr, (:quote, #QuoteNode
                      :port
                    )), 1))),
            (:line, 738, :none),
            (:if, (:call, :(==), (:., :addr, (:quote, #QuoteNode
                    :port
                  )), :default_port), (:block,
                (:line, 739, :none),
                (:call, :error, "no ports available")
              ))
          ))
      )),
    (:line, 743, :none),
    (:(=), (:call, :listenany, :default_port), (:block,
        (:line, 743, :none),
        (:call, :listenany, (:call, :IPv4, (:call, :UInt32, 0)), :default_port)
      )),
    (:line, 745, :none),
    (:function, (:call, :getsockname, (:(::), :sock, (:curly, :Union, :TCPServer, :TCPSocket))), (:block,
        (:line, 746, :none),
        (:(=), :rport, (:call, (:curly, :Ref, :Cushort), 0)),
        (:line, 747, :none),
        (:(=), :raddress, (:call, :zeros, :UInt8, 16)),
        (:line, 748, :none),
        (:(=), :rfamily, (:call, (:curly, :Ref, :Cuint), 0)),
        (:line, 749, :none),
        (:(=), :r, (:if, (:call, :isa, :sock, :TCPServer), (:block,
              (:line, 750, :none),
              (:ccall, (:quote, #QuoteNode
                  :jl_tcp_getsockname
                ), :Int32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ref, :Cushort), (:curly, :Ptr, :Void), (:curly, :Ref, :Cuint)), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), :rport, :raddress, :rfamily)
            ), (:block,
              (:line, 754, :none),
              (:ccall, (:quote, #QuoteNode
                  :jl_tcp_getpeername
                ), :Int32, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ref, :Cushort), (:curly, :Ptr, :Void), (:curly, :Ref, :Cuint)), (:., :sock, (:quote, #QuoteNode
                    :handle
                  )), :rport, :raddress, :rfamily)
            ))),
        (:line, 758, :none),
        (:call, :uv_error, "cannot obtain socket name", :r),
        (:line, 759, :none),
        (:if, (:call, :(==), :r, 0), (:block,
            (:line, 760, :none),
            (:(=), :port, (:call, :ntoh, (:ref, :rport))),
            (:line, 761, :none),
            (:if, (:call, :(==), (:ref, :rfamily), 2), (:block,
                (:line, 762, :none),
                (:(=), :addrv4, (:ref, :raddress, (:(:), 1, 4))),
                (:line, 763, :none),
                (:(=), :naddr, (:call, :ntoh, (:call, :unsafe_load, (:call, (:curly, :Ptr, :Cuint), (:call, :pointer, :addrv4)), 1))),
                (:line, 764, :none),
                (:(=), :addr, (:call, :IPv4, :naddr))
              ), (:block,
                (:line, 765, :none),
                (:if, (:call, :(==), (:ref, :rfamily), (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), 23, (:macrocall, Symbol("@static"), (:if, (:call, :is_apple), 30, 10))))), (:block,
                    (:line, 766, :none),
                    (:(=), :naddr, (:call, :ntoh, (:call, :unsafe_load, (:call, (:curly, :Ptr, :UInt128), (:call, :pointer, :raddress)), 1))),
                    (:line, 767, :none),
                    (:(=), :addr, (:call, :IPv6, :naddr))
                  ), (:block,
                    (:line, 769, :none),
                    (:call, :error, (:string, "unsupported address family: ", (:call, :getindex, :rfamily)))
                  ))
              ))
          ), (:block,
            (:line, 772, :none),
            (:call, :error, "cannot obtain socket name")
          )),
        (:line, 774, :none),
        (:return, (:tuple, :addr, :port))
      ))
  ))