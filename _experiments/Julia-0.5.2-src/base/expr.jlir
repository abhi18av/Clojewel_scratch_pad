(:quote, (:block,
    (:line, 5, :none),
    (:(=), (:call, :gensym), (:block,
        (:line, 5, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_gensym
          ), (:curly, :Ref, :Symbol), (:tuple,))
      )),
    (:line, 7, :none),
    (:(=), (:call, :gensym, (:(::), :s, :String)), (:block,
        (:line, 7, :none),
        (:call, :gensym, (:., :s, (:quote, #QuoteNode
              :data
            )))
      )),
    (:line, 8, :none),
    (:(=), (:call, :gensym, (:(::), :a, (:curly, :Array, :UInt8, 1))), (:block,
        (:line, 8, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_tagged_gensym
          ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int32), :a, (:call, :length, :a))
      )),
    (:line, 10, :none),
    (:(=), (:call, :gensym, (:..., (:(::), :ss, :String))), (:block,
        (:line, 10, :none),
        (:call, :map, :gensym, :ss)
      )),
    (:line, 11, :none),
    (:(=), (:call, :gensym, (:(::), :s, :Symbol)), (:block,
        (:line, 11, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_tagged_gensym
          ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int32), :s, (:ccall, (:quote, #QuoteNode
              :strlen
            ), :Csize_t, (:tuple, (:curly, :Ptr, :UInt8)), :s))
      )),
    (:line, 14, :none),
    (:macro, (:call, :gensym, (:..., :names)), (:block,
        (:line, 15, :none),
        (:(=), :blk, (:call, :Expr, (:quote, #QuoteNode
              :block
            ))),
        (:line, 16, :none),
        (:for, (:(=), :name, :names), (:block,
            (:line, 17, :none),
            (:call, :push!, (:., :blk, (:quote, #QuoteNode
                  :args
                )), (:quote, (:(=), (:$, (:call, :esc, :name)), (:call, :gensym, (:$, (:call, :string, :name))))))
          )),
        (:line, 19, :none),
        (:call, :push!, (:., :blk, (:quote, #QuoteNode
              :args
            )), (:quote, #QuoteNode
            :nothing
          )),
        (:line, 20, :none),
        (:return, :blk)
      )),
    (:line, 25, :none),
    (:(=), (:call, :copy, (:(::), :e, :Expr)), (:block,
        (:line, 25, :none),
        (:block,
          (:(=), :n, (:call, :Expr, (:., :e, (:quote, #QuoteNode
                  :head
                )))),
          (:(=), (:., :n, (:quote, #QuoteNode
                :args
              )), (:call, :copy_exprargs, (:., :e, (:quote, #QuoteNode
                  :args
                )))),
          (:(=), (:., :n, (:quote, #QuoteNode
                :typ
              )), (:., :e, (:quote, #QuoteNode
                :typ
              ))),
          :n
        )
      )),
    (:line, 31, :none),
    (:(=), (:call, :copy_exprs, (:(::), :x, :Expr)), (:block,
        (:line, 31, :none),
        (:call, :copy, :x)
      )),
    (:line, 32, :none),
    (:(=), (:call, :copy_exprs, (:(::), :x, :ANY)), (:block,
        (:line, 32, :none),
        :x
      )),
    (:line, 33, :none),
    (:(=), (:call, :copy_exprargs, (:(::), :x, (:curly, :Array, :Any, 1))), (:block,
        (:line, 33, :none),
        (:typed_comprehension, :Any, (:generator, (:call, :copy_exprs, :a), (:(=), :a, :x)))
      )),
    (:line, 35, :none),
    (:(=), (:call, :(==), (:(::), :x, :Expr), (:(::), :y, :Expr)), (:block,
        (:line, 35, :none),
        (:&&, (:call, :(===), (:., :x, (:quote, #QuoteNode
                :head
              )), (:., :y, (:quote, #QuoteNode
                :head
              ))), (:call, :isequal, (:., :x, (:quote, #QuoteNode
                :args
              )), (:., :y, (:quote, #QuoteNode
                :args
              ))))
      )),
    (:line, 36, :none),
    (:(=), (:call, :(==), (:(::), :x, :QuoteNode), (:(::), :y, :QuoteNode)), (:block,
        (:line, 36, :none),
        (:call, :isequal, (:., :x, (:quote, #QuoteNode
              :value
            )), (:., :y, (:quote, #QuoteNode
              :value
            )))
      )),
    (:line, 38, :none),
    (:(=), (:call, :expand, (:(::), :x, :ANY)), (:block,
        (:line, 38, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_expand
          ), :Any, (:tuple, :Any), :x)
      )),
    (:line, 39, :none),
    (:(=), (:call, :macroexpand, (:(::), :x, :ANY)), (:block,
        (:line, 39, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_macroexpand
          ), :Any, (:tuple, :Any), :x)
      )),
    (:line, 43, :none),
    (:macro, (:call, :eval, :x), (:block,
        (:line, 44, :none),
        (:quote, (:call, (:$, (:call, :esc, (:quote, #QuoteNode
                  :eval
                ))), (:$, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :x))))
      )),
    (:line, 47, :none),
    (:macro, (:call, :inline, :ex), (:block,
        (:line, 48, :none),
        (:call, :esc, (:if, (:call, :isa, :ex, :Expr), (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :inline
              )), :ex))
      )),
    (:line, 51, :none),
    (:macro, (:call, :noinline, :ex), (:block,
        (:line, 52, :none),
        (:call, :esc, (:if, (:call, :isa, :ex, :Expr), (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :noinline
              )), :ex))
      )),
    (:line, 55, :none),
    (:macro, (:call, :pure, :ex), (:block,
        (:line, 56, :none),
        (:call, :esc, (:if, (:call, :isa, :ex, :Expr), (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :pure
              )), :ex))
      )),
    (:line, 59, :none),
    "    @propagate_inbounds(ex)\n\nTells the compiler to inline a function while retaining the caller's inbounds context.\n",
    (:line, 64, :none),
    (:macro, (:call, :propagate_inbounds, :ex), (:block,
        (:line, 65, :none),
        (:if, (:call, :isa, :ex, :Expr), (:block,
            (:line, 66, :none),
            (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :inline
              )),
            (:line, 67, :none),
            (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :propagate_inbounds
              )),
            (:line, 68, :none),
            (:call, :esc, :ex)
          ), (:block,
            (:line, 70, :none),
            (:call, :esc, :ex)
          ))
      )),
    (:line, 74, :none),
    "Tells the compiler to apply the polyhedral optimizer Polly to a function.\n",
    (:line, 77, :none),
    (:macro, (:call, :polly, :ex), (:block,
        (:line, 78, :none),
        (:call, :esc, (:if, (:call, :isa, :ex, :Expr), (:call, :pushmeta!, :ex, (:quote, #QuoteNode
                :polly
              )), :ex))
      )),
    (:line, 83, :none),
    (:(=), (:call, :find_vars, :e), (:block,
        (:line, 83, :none),
        (:call, :find_vars, :e, (:vect,))
      )),
    (:line, 84, :none),
    (:function, (:call, :find_vars, :e, :lst), (:block,
        (:line, 85, :none),
        (:if, (:call, :isa, :e, :Symbol), (:block,
            (:line, 86, :none),
            (:if, (:&&, (:call, :(===), (:call, :current_module), :Main), (:call, :isdefined, :e)), (:block,
                (:line, 89, :none),
                (:if, (:||, (:call, :!, (:call, :isdefined, :Base, :e)), (:call, :(!==), (:call, :eval, :Base, :e), (:call, :eval, (:call, :current_module), :e))), (:block,
                    (:line, 90, :none),
                    (:call, :push!, :lst, :e)
                  ))
              ))
          ), (:block,
            (:line, 93, :none),
            (:if, (:&&, (:call, :isa, :e, :Expr), (:&&, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :quote
                    )), (:&&, (:call, :(!==), (:., :e, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :top
                      )), (:call, :(!==), (:., :e, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :core
                      ))))), (:block,
                (:line, 94, :none),
                (:for, (:(=), :x, (:., :e, (:quote, #QuoteNode
                        :args
                      ))), (:block,
                    (:line, 95, :none),
                    (:call, :find_vars, :x, :lst)
                  ))
              ))
          )),
        (:line, 98, :none),
        :lst
      )),
    (:line, 102, :none),
    (:(=), (:call, :localize_vars, :expr), (:block,
        (:line, 102, :none),
        (:call, :localize_vars, :expr, true)
      )),
    (:line, 103, :none),
    (:function, (:call, :localize_vars, :expr, :esca), (:block,
        (:line, 104, :none),
        (:(=), :v, (:call, :find_vars, :expr)),
        (:line, 108, :none),
        (:if, :esca, (:block,
            (:line, 109, :none),
            (:(=), :v, (:call, :map, :esc, :v))
          )),
        (:line, 111, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :localize
          ), :expr, (:..., :v))
      )),
    (:line, 114, :none),
    (:function, (:call, :pushmeta!, (:(::), :ex, :Expr), (:(::), :sym, :Symbol), (:..., (:(::), :args, :Any))), (:block,
        (:line, 115, :none),
        (:if, (:call, :isempty, :args), (:block,
            (:line, 116, :none),
            (:(=), :tag, :sym)
          ), (:block,
            (:line, 118, :none),
            (:(=), :tag, (:call, :Expr, :sym, (:..., :args)))
          )),
        (:line, 121, :none),
        (:(=), :inner, :ex),
        (:line, 122, :none),
        (:while, (:call, :(==), (:., :inner, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :macrocall
            )), (:block,
            (:line, 123, :none),
            (:(=), :inner, (:(::), (:ref, (:., :inner, (:quote, #QuoteNode
                      :args
                    )), :end), :Expr))
          )),
        (:line, 126, :none),
        (:(=), (:tuple, :idx, :exargs), (:call, :findmeta, :inner)),
        (:line, 127, :none),
        (:if, (:call, :(!=), :idx, 0), (:block,
            (:line, 128, :none),
            (:call, :push!, (:., (:ref, :exargs, :idx), (:quote, #QuoteNode
                  :args
                )), :tag)
          ), (:block,
            (:line, 130, :none),
            (:(=), (:(::), :body, :Expr), (:ref, (:., :inner, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 131, :none),
            (:call, :unshift!, (:., :body, (:quote, #QuoteNode
                  :args
                )), (:call, :Expr, (:quote, #QuoteNode
                  :meta
                ), :tag))
          )),
        (:line, 133, :none),
        :ex
      )),
    (:line, 136, :none),
    (:function, (:call, :popmeta!, (:(::), :body, :Expr), (:(::), :sym, :Symbol)), (:block,
        (:line, 137, :none),
        (:||, (:call, :(==), (:., :body, (:quote, #QuoteNode
                :head
              )), (:quote, #QuoteNode
              :block
            )), (:return, (:tuple, false, (:vect,)))),
        (:line, 138, :none),
        (:call, :popmeta!, (:., :body, (:quote, #QuoteNode
              :args
            )), :sym)
      )),
    (:line, 140, :none),
    (:(=), (:call, :popmeta!, :arg, :sym), (:block,
        (:line, 140, :none),
        (:tuple, false, (:vect,))
      )),
    (:line, 141, :none),
    (:function, (:call, :popmeta!, (:(::), :body, (:curly, :Array, :Any, 1)), (:(::), :sym, :Symbol)), (:block,
        (:line, 142, :none),
        (:(=), (:tuple, :idx, :blockargs), (:call, :findmeta_block, :body, (:->, :args, (:block,
                (:line, 142, :none),
                (:call, :(!=), (:call, :findmetaarg, :args, :sym), 0)
              )))),
        (:line, 143, :none),
        (:if, (:call, :(==), :idx, 0), (:block,
            (:line, 144, :none),
            (:return, (:tuple, false, (:vect,)))
          )),
        (:line, 146, :none),
        (:(=), :metaargs, (:., (:ref, :blockargs, :idx), (:quote, #QuoteNode
              :args
            ))),
        (:line, 147, :none),
        (:(=), :i, (:call, :findmetaarg, (:., (:ref, :blockargs, :idx), (:quote, #QuoteNode
                :args
              )), :sym)),
        (:line, 148, :none),
        (:if, (:call, :(==), :i, 0), (:block,
            (:line, 149, :none),
            (:return, (:tuple, false, (:vect,)))
          )),
        (:line, 151, :none),
        (:(=), :ret, (:if, (:call, :isa, (:ref, :metaargs, :i), :Expr), (:., (:(::), (:ref, :metaargs, :i), :Expr), (:quote, #QuoteNode
                :args
              )), (:vect,))),
        (:line, 152, :none),
        (:call, :deleteat!, :metaargs, :i),
        (:line, 153, :none),
        (:&&, (:call, :isempty, :metaargs), (:call, :deleteat!, :blockargs, :idx)),
        (:line, 154, :none),
        (:tuple, true, :ret)
      )),
    (:line, 158, :none),
    (:function, (:call, :findmetaarg, :metaargs, :sym), (:block,
        (:line, 159, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :metaargs))), (:block,
            (:line, 160, :none),
            (:(=), :arg, (:ref, :metaargs, :i)),
            (:line, 161, :none),
            (:if, (:||, (:&&, (:call, :isa, :arg, :Symbol), (:call, :(==), (:(::), :arg, :Symbol), :sym)), (:&&, (:call, :isa, :arg, :Expr), (:call, :(==), (:., (:(::), :arg, :Expr), (:quote, #QuoteNode
                        :head
                      )), :sym))), (:block,
                (:line, 163, :none),
                (:return, :i)
              ))
          )),
        (:line, 166, :none),
        (:return, 0)
      )),
    (:line, 169, :none),
    (:function, (:call, :findmeta, (:(::), :ex, :Expr)), (:block,
        (:line, 170, :none),
        (:if, (:||, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :function
              )), (:&&, (:call, :(==), (:., :ex, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :(=)
                )), (:&&, (:call, :(==), (:call, :typeof, (:ref, (:., :ex, (:quote, #QuoteNode
                          :args
                        )), 1)), :Expr), (:call, :(==), (:., (:ref, (:., :ex, (:quote, #QuoteNode
                          :args
                        )), 1), (:quote, #QuoteNode
                      :head
                    )), (:quote, #QuoteNode
                    :call
                  ))))), (:block,
            (:line, 171, :none),
            (:(=), (:(::), :body, :Expr), (:ref, (:., :ex, (:quote, #QuoteNode
                    :args
                  )), 2)),
            (:line, 172, :none),
            (:||, (:call, :(==), (:., :body, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :block
                )), (:call, :error, :body, " is not a block expression")),
            (:line, 173, :none),
            (:return, (:call, :findmeta_block, (:., :ex, (:quote, #QuoteNode
                    :args
                  ))))
          )),
        (:line, 175, :none),
        (:call, :error, :ex, " is not a function expression")
      )),
    (:line, 178, :none),
    (:(=), (:call, :findmeta, (:(::), :ex, (:curly, :Array, :Any, 1))), (:block,
        (:line, 178, :none),
        (:call, :findmeta_block, :ex)
      )),
    (:line, 180, :none),
    (:function, (:call, :findmeta_block, :exargs, (:kw, :argsmatch, (:->, :args, (:block,
              (:line, 180, :none),
              true
            )))), (:block,
        (:line, 181, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :exargs))), (:block,
            (:line, 182, :none),
            (:(=), :a, (:ref, :exargs, :i)),
            (:line, 183, :none),
            (:if, (:call, :isa, :a, :Expr), (:block,
                (:line, 184, :none),
                (:if, (:&&, (:call, :(==), (:., (:(::), :a, :Expr), (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :meta
                      )), (:call, :argsmatch, (:., (:(::), :a, :Expr), (:quote, #QuoteNode
                          :args
                        )))), (:block,
                    (:line, 185, :none),
                    (:return, (:tuple, :i, :exargs))
                  ), (:block,
                    (:line, 186, :none),
                    (:if, (:call, :(==), (:., (:(::), :a, :Expr), (:quote, #QuoteNode
                            :head
                          )), (:quote, #QuoteNode
                          :block
                        )), (:block,
                        (:line, 187, :none),
                        (:(=), (:tuple, :idx, :exa), (:call, :findmeta_block, (:., :a, (:quote, #QuoteNode
                                :args
                              )), :argsmatch)),
                        (:line, 188, :none),
                        (:if, (:call, :(!=), :idx, 0), (:block,
                            (:line, 189, :none),
                            (:return, (:tuple, :idx, :exa))
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 194, :none),
        (:return, (:tuple, 0, (:vect,)))
      )),
    (:line, 197, :none),
    (:(=), (:call, :remove_linenums!, :ex), (:block,
        (:line, 197, :none),
        :ex
      )),
    (:line, 198, :none),
    (:function, (:call, :remove_linenums!, (:(::), :ex, :Expr)), (:block,
        (:line, 199, :none),
        (:call, :filter!, (:->, :x, (:block,
              (:line, 199, :none),
              (:call, :!, (:||, (:&&, (:call, :isa, :x, :Expr), (:call, :is, (:., :x, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :line
                      ))), (:call, :isa, :x, :LineNumberNode)))
            )), (:., :ex, (:quote, #QuoteNode
              :args
            ))),
        (:line, 200, :none),
        (:for, (:(=), :subex, (:., :ex, (:quote, #QuoteNode
                :args
              ))), (:block,
            (:line, 201, :none),
            (:call, :remove_linenums!, :subex)
          )),
        (:line, 203, :none),
        :ex
      ))
  ))