(:quote, (:block,
    (:line, 5, :none),
    "    PROGRAM_FILE\n\nA string containing the script name passed to Julia from the command line. Note that the\nscript name remains unchanged from within included files. Alternatively see\n[`@__FILE__`](:data:`@__FILE__`).\n",
    (:line, 12, :none),
    (:(=), :PROGRAM_FILE, ""),
    (:line, 14, :none),
    "    ARGS\n\nAn array of the command line arguments passed to Julia, as strings.\n",
    (:line, 19, :none),
    (:const, (:(=), :ARGS, (:ref, :String))),
    (:line, 21, :none),
    (:(=), (:call, :exit, :n), (:block,
        (:line, 21, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_exit
          ), :Void, (:tuple, :Int32), :n)
      )),
    (:line, 22, :none),
    (:(=), (:call, :exit), (:block,
        (:line, 22, :none),
        (:call, :exit, 0)
      )),
    (:line, 23, :none),
    (:(=), (:call, :quit), (:block,
        (:line, 23, :none),
        (:call, :exit)
      )),
    (:line, 25, :none),
    (:const, (:(=), :roottask, (:call, :current_task))),
    (:line, 27, :none),
    (:(=), :is_interactive, false),
    (:line, 28, :none),
    (:(=), (:call, :isinteractive), (:block,
        (:line, 28, :none),
        (:(::), :is_interactive, :Bool)
      )),
    (:line, 30, :none),
    "    LOAD_PATH\n\nAn array of paths (as strings) where the `require` function looks for code.\n",
    (:line, 35, :none),
    (:const, (:(=), :LOAD_PATH, (:ref, :String))),
    (:line, 37, :none),
    (:const, (:(=), :LOAD_CACHE_PATH, (:ref, :String))),
    (:line, 38, :none),
    (:function, (:call, :init_load_path), (:block,
        (:line, 39, :none),
        (:(=), :vers, (:string, "v", (:., :VERSION, (:quote, #QuoteNode
                :major
              )), ".", (:., :VERSION, (:quote, #QuoteNode
                :minor
              )))),
        (:line, 40, :none),
        (:if, (:call, :haskey, :ENV, "JULIA_LOAD_PATH"), (:block,
            (:line, 41, :none),
            (:call, :prepend!, :LOAD_PATH, (:call, :split, (:ref, :ENV, "JULIA_LOAD_PATH"), (:macrocall, Symbol("@static"), (:if, (:call, :is_windows), ';', ':'))))
          )),
        (:line, 43, :none),
        (:call, :push!, :LOAD_PATH, (:call, :abspath, :JULIA_HOME, "..", "local", "share", "julia", "site", :vers)),
        (:line, 44, :none),
        (:call, :push!, :LOAD_PATH, (:call, :abspath, :JULIA_HOME, "..", "share", "julia", "site", :vers))
      )),
    (:line, 49, :none),
    (:function, (:call, :init_bind_addr), (:block,
        (:line, 50, :none),
        (:(=), :opts, (:call, :JLOptions)),
        (:line, 51, :none),
        (:if, (:call, :(!=), (:., :opts, (:quote, #QuoteNode
                :bindto
              )), :C_NULL), (:block,
            (:line, 52, :none),
            (:(=), :bind_to, (:call, :split, (:call, :unsafe_string, (:., :opts, (:quote, #QuoteNode
                      :bindto
                    ))), ":")),
            (:line, 53, :none),
            (:(=), :bind_addr, (:call, :string, (:call, :parse, :IPAddr, (:ref, :bind_to, 1)))),
            (:line, 54, :none),
            (:if, (:call, :>, (:call, :length, :bind_to), 1), (:block,
                (:line, 55, :none),
                (:(=), :bind_port, (:call, :parse, :Int, (:ref, :bind_to, 2)))
              ), (:block,
                (:line, 57, :none),
                (:(=), :bind_port, 0)
              ))
          ), (:block,
            (:line, 60, :none),
            (:(=), :bind_port, 0),
            (:line, 61, :none),
            (:try, (:block,
                (:line, 62, :none),
                (:(=), :bind_addr, (:call, :string, (:call, :getipaddr)))
              ), false, (:block,
                (:line, 66, :none),
                (:(=), :bind_addr, "127.0.0.1")
              ))
          )),
        (:line, 69, :none),
        (:global, :LPROC),
        (:line, 70, :none),
        (:(=), (:., :LPROC, (:quote, #QuoteNode
              :bind_addr
            )), :bind_addr),
        (:line, 71, :none),
        (:(=), (:., :LPROC, (:quote, #QuoteNode
              :bind_port
            )), (:call, :UInt16, :bind_port))
      )),
    (:line, 74, :none),
    (:function, (:call, :early_init), (:block,
        (:line, 75, :none),
        (:const, (:global, (:(=), :JULIA_HOME, (:ccall, (:quote, #QuoteNode
                  :jl_get_julia_home
                ), :Any, (:tuple,))))),
        (:line, 77, :none),
        (:(=), (:ref, :ENV, "OPENBLAS_MAIN_FREE"), (:call, :get, :ENV, "OPENBLAS_MAIN_FREE", (:call, :get, :ENV, "GOTOBLAS_MAIN_FREE", "1"))),
        (:line, 79, :none),
        (:if, (:&&, (:call, :>, (:., :Sys, (:quote, #QuoteNode
                  :CPU_CORES
                )), 8), (:&&, (:call, :!, (:call, :in, "OPENBLAS_NUM_THREADS", (:call, :keys, :ENV))), (:call, :!, (:call, :in, "OMP_NUM_THREADS", (:call, :keys, :ENV))))), (:block,
            (:line, 81, :none),
            (:(=), (:ref, :ENV, "OPENBLAS_NUM_THREADS"), 8)
          ))
      )),
    (:line, 85, :none),
    "    JULIA_HOME\n\nA string containing the full path to the directory containing the `julia` executable.\n",
    (:line, 90, :none),
    (:quote, #QuoteNode
      :JULIA_HOME
    ),
    (:line, 92, :none),
    (:function, (:call, :init_parallel), (:block,
        (:line, 93, :none),
        (:call, :start_gc_msgs_task),
        (:line, 94, :none),
        (:call, :atexit, :terminate_all_workers),
        (:line, 96, :none),
        (:call, :init_bind_addr),
        (:line, 99, :none),
        (:global, :PGRP),
        (:line, 100, :none),
        (:global, :LPROC),
        (:line, 101, :none),
        (:(=), (:., :LPROC, (:quote, #QuoteNode
              :id
            )), 1),
        (:line, 102, :none),
        (:call, :cluster_cookie, (:call, :randstring, :HDR_COOKIE_LEN)),
        (:line, 103, :none),
        (:call, :assert, (:call, :isempty, (:., :PGRP, (:quote, #QuoteNode
                :workers
              )))),
        (:line, 104, :none),
        (:call, :register_worker, :LPROC)
      )),
    (:line, 107, :none),
    (:const, (:(=), :atexit_hooks, (:vect,))),
    (:line, 109, :none),
    (:(=), (:call, :atexit, (:(::), :f, :Function)), (:block,
        (:line, 109, :none),
        (:block,
          (:call, :unshift!, :atexit_hooks, :f),
          :nothing
        )
      )),
    (:line, 111, :none),
    (:function, (:call, :_atexit), (:block,
        (:line, 112, :none),
        (:for, (:(=), :f, :atexit_hooks), (:block,
            (:line, 113, :none),
            (:try, (:block,
                (:line, 114, :none),
                (:call, :f)
              ), :err, (:block,
                (:line, 116, :none),
                (:call, :show, :STDERR, :err),
                (:line, 117, :none),
                (:call, :println, :STDERR)
              ))
          ))
      ))
  ))