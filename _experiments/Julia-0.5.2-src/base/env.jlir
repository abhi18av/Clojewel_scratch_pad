(:quote, (:block,
    (:line, 3, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 4, :none),
        (:const, (:(=), :ERROR_ENVVAR_NOT_FOUND, (:call, :UInt32, 203))),
        (:line, 6, :none),
        (:(=), (:call, :_getenvlen, (:(::), :var, (:curly, :Vector, :UInt16))), (:block,
            (:line, 6, :none),
            (:ccall, (:quote, #QuoteNode
                :GetEnvironmentVariableW
              ), :UInt32, (:tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16), :UInt32), :var, :C_NULL, 0, (:stdcall,))
          )),
        (:line, 7, :none),
        (:(=), (:call, :_hasenv, (:(::), :s, (:curly, :Vector, :UInt16))), (:block,
            (:line, 7, :none),
            (:||, (:call, :(!=), (:call, :_getenvlen, :s), 0), (:call, :(!=), (:call, (:., :Libc, (:quote, #QuoteNode
                      :GetLastError
                    ))), :ERROR_ENVVAR_NOT_FOUND))
          )),
        (:line, 8, :none),
        (:(=), (:call, :_hasenv, (:(::), :s, :AbstractString)), (:block,
            (:line, 8, :none),
            (:call, :_hasenv, (:call, :cwstring, :s))
          )),
        (:line, 10, :none),
        (:function, (:call, :access_env, (:(::), :onError, :Function), (:(::), :str, :AbstractString)), (:block,
            (:line, 11, :none),
            (:(=), :var, (:call, :cwstring, :str)),
            (:line, 12, :none),
            (:(=), :len, (:call, :_getenvlen, :var)),
            (:line, 13, :none),
            (:if, (:call, :(==), :len, 0), (:block,
                (:line, 14, :none),
                (:return, (:if, (:call, :(!=), (:call, (:., :Libc, (:quote, #QuoteNode
                            :GetLastError
                          ))), :ERROR_ENVVAR_NOT_FOUND), "", (:call, :onError, :str)))
              )),
            (:line, 16, :none),
            (:(=), :val, (:call, :zeros, :UInt16, :len)),
            (:line, 17, :none),
            (:(=), :ret, (:ccall, (:quote, #QuoteNode
                  :GetEnvironmentVariableW
                ), :UInt32, (:tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16), :UInt32), :var, :val, :len, (:stdcall,))),
            (:line, 18, :none),
            (:if, (:||, (:&&, (:call, :(==), :ret, 0), (:call, :(!=), :len, 1)), (:||, (:call, :(!=), :ret, (:call, :-, :len, 1)), (:call, :(!=), (:ref, :val, :end), 0))), (:block,
                (:line, 19, :none),
                (:call, :error, (:call, :string, "getenv: ", :str, ' ', :len, "-1 != ", :ret, ": ", (:call, (:., :Libc, (:quote, #QuoteNode
                          :FormatMessage
                        )))))
              )),
            (:line, 21, :none),
            (:call, :pop!, :val),
            (:line, 22, :none),
            (:return, (:call, :transcode, :String, :val))
          )),
        (:line, 25, :none),
        (:function, (:call, :_setenv, (:(::), :svar, :AbstractString), (:(::), :sval, :AbstractString), (:kw, (:(::), :overwrite, :Bool), true)), (:block,
            (:line, 26, :none),
            (:(=), :var, (:call, :cwstring, :svar)),
            (:line, 27, :none),
            (:(=), :val, (:call, :cwstring, :sval)),
            (:line, 28, :none),
            (:if, (:||, :overwrite, (:call, :!, (:call, :_hasenv, :var))), (:block,
                (:line, 29, :none),
                (:(=), :ret, (:ccall, (:quote, #QuoteNode
                      :SetEnvironmentVariableW
                    ), :Int32, (:tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16)), :var, :val, (:stdcall,))),
                (:line, 30, :none),
                (:call, :systemerror, (:quote, #QuoteNode
                    :setenv
                  ), (:call, :(==), :ret, 0))
              ))
          )),
        (:line, 34, :none),
        (:function, (:call, :_unsetenv, (:(::), :svar, :AbstractString)), (:block,
            (:line, 35, :none),
            (:(=), :var, (:call, :cwstring, :svar)),
            (:line, 36, :none),
            (:(=), :ret, (:ccall, (:quote, #QuoteNode
                  :SetEnvironmentVariableW
                ), :Int32, (:tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16)), :var, :C_NULL, (:stdcall,))),
            (:line, 37, :none),
            (:call, :systemerror, (:quote, #QuoteNode
                :setenv
              ), (:call, :(==), :ret, 0))
          ))
      ), (:block,
        (:line, 40, :none),
        (:(=), (:call, :_getenv, (:(::), :var, :AbstractString)), (:block,
            (:line, 40, :none),
            (:ccall, (:quote, #QuoteNode
                :getenv
              ), :Cstring, (:tuple, :Cstring), :var)
          )),
        (:line, 41, :none),
        (:(=), (:call, :_hasenv, (:(::), :s, :AbstractString)), (:block,
            (:line, 41, :none),
            (:call, :(!=), (:call, :_getenv, :s), :C_NULL)
          )),
        (:line, 43, :none),
        (:function, (:call, :access_env, (:(::), :onError, :Function), (:(::), :var, :AbstractString)), (:block,
            (:line, 44, :none),
            (:(=), :val, (:call, :_getenv, :var)),
            (:line, 45, :none),
            (:if, (:call, :(==), :val, :C_NULL), (:call, :onError, :var), (:call, :unsafe_string, :val))
          )),
        (:line, 48, :none),
        (:function, (:call, :_setenv, (:(::), :var, :AbstractString), (:(::), :val, :AbstractString), (:kw, (:(::), :overwrite, :Bool), true)), (:block,
            (:line, 49, :none),
            (:(=), :ret, (:ccall, (:quote, #QuoteNode
                  :setenv
                ), :Int32, (:tuple, :Cstring, :Cstring, :Int32), :var, :val, :overwrite)),
            (:line, 50, :none),
            (:call, :systemerror, (:quote, #QuoteNode
                :setenv
              ), (:call, :(!=), :ret, 0))
          )),
        (:line, 53, :none),
        (:function, (:call, :_unsetenv, (:(::), :var, :AbstractString)), (:block,
            (:line, 54, :none),
            (:(=), :ret, (:ccall, (:quote, #QuoteNode
                  :unsetenv
                ), :Int32, (:tuple, :Cstring), :var)),
            (:line, 55, :none),
            (:call, :systemerror, (:quote, #QuoteNode
                :unsetenv
              ), (:call, :(!=), :ret, 0))
          ))
      )),
    (:line, 61, :none),
    (:type, true, (:<:, :EnvHash, (:curly, :Associative, :String, :String)), (:block,
        (:line, 61, :none)
      )),
    (:line, 63, :none),
    "    ENV\n\nReference to the singleton `EnvHash`, providing a dictionary interface to system environment\nvariables.\n",
    (:line, 69, :none),
    (:const, (:(=), :ENV, (:call, :EnvHash))),
    (:line, 71, :none),
    (:(=), (:call, :similar, (:(::), :EnvHash)), (:block,
        (:line, 71, :none),
        (:call, (:curly, :Dict, :String, :String))
      )),
    (:line, 73, :none),
    (:(=), (:call, :getindex, (:(::), :EnvHash), (:(::), :k, :AbstractString)), (:block,
        (:line, 73, :none),
        (:call, :access_env, (:->, :k, (:block,
              (:line, 73, :none),
              (:call, :throw, (:call, :KeyError, :k))
            )), :k)
      )),
    (:line, 74, :none),
    (:(=), (:call, :get, (:(::), :EnvHash), (:(::), :k, :AbstractString), :def), (:block,
        (:line, 74, :none),
        (:call, :access_env, (:->, :k, (:block,
              (:line, 74, :none),
              :def
            )), :k)
      )),
    (:line, 75, :none),
    (:(=), (:call, :in, (:(::), :k, :AbstractString), (:(::), (:curly, :KeyIterator, :EnvHash))), (:block,
        (:line, 75, :none),
        (:call, :_hasenv, :k)
      )),
    (:line, 76, :none),
    (:(=), (:call, :pop!, (:(::), :EnvHash), (:(::), :k, :AbstractString)), (:block,
        (:line, 76, :none),
        (:block,
          (:(=), :v, (:ref, :ENV, :k)),
          (:call, :_unsetenv, :k),
          :v
        )
      )),
    (:line, 77, :none),
    (:(=), (:call, :pop!, (:(::), :EnvHash), (:(::), :k, :AbstractString), :def), (:block,
        (:line, 77, :none),
        (:if, (:call, :haskey, :ENV, :k), (:call, :pop!, :ENV, :k), :def)
      )),
    (:line, 78, :none),
    (:(=), (:call, :delete!, (:(::), :EnvHash), (:(::), :k, :AbstractString)), (:block,
        (:line, 78, :none),
        (:block,
          (:call, :_unsetenv, :k),
          :ENV
        )
      )),
    (:line, 79, :none),
    (:(=), (:call, :delete!, (:(::), :EnvHash), (:(::), :k, :AbstractString), :def), (:block,
        (:line, 79, :none),
        (:if, (:call, :haskey, :ENV, :k), (:call, :delete!, :ENV, :k), :def)
      )),
    (:line, 80, :none),
    (:(=), (:call, :setindex!, (:(::), :EnvHash), :v, (:(::), :k, :AbstractString)), (:block,
        (:line, 80, :none),
        (:call, :_setenv, :k, (:call, :string, :v))
      )),
    (:line, 81, :none),
    (:(=), (:call, :push!, (:(::), :EnvHash), (:(::), :k, :AbstractString), :v), (:block,
        (:line, 81, :none),
        (:call, :setindex!, :ENV, :v, :k)
      )),
    (:line, 83, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 84, :none),
        (:(=), (:call, :start, (:(::), :hash, :EnvHash)), (:block,
            (:line, 84, :none),
            (:block,
              (:(=), :pos, (:ccall, (:quote, #QuoteNode
                    :GetEnvironmentStringsW
                  ), (:curly, :Ptr, :UInt16), (:tuple,), (:stdcall,))),
              (:tuple, :pos, :pos)
            )
          )),
        (:line, 85, :none),
        (:function, (:call, :done, (:(::), :hash, :EnvHash), (:(::), :block, (:curly, :Tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16)))), (:block,
            (:line, 86, :none),
            (:if, (:call, :(==), (:call, :unsafe_load, (:ref, :block, 1)), 0), (:block,
                (:line, 87, :none),
                (:ccall, (:quote, #QuoteNode
                    :FreeEnvironmentStringsW
                  ), :Int32, (:tuple, (:curly, :Ptr, :UInt16)), (:ref, :block, 2), (:stdcall,)),
                (:line, 88, :none),
                (:return, true)
              )),
            (:line, 90, :none),
            (:return, false)
          )),
        (:line, 92, :none),
        (:function, (:call, :next, (:(::), :hash, :EnvHash), (:(::), :block, (:curly, :Tuple, (:curly, :Ptr, :UInt16), (:curly, :Ptr, :UInt16)))), (:block,
            (:line, 93, :none),
            (:(=), :pos, (:ref, :block, 1)),
            (:line, 94, :none),
            (:(=), :blk, (:ref, :block, 2)),
            (:line, 95, :none),
            (:(=), :len, (:ccall, (:quote, #QuoteNode
                  :wcslen
                ), :UInt, (:tuple, (:curly, :Ptr, :UInt16)), :pos)),
            (:line, 96, :none),
            (:(=), :buf, (:call, (:curly, :Array, :UInt16), :len)),
            (:line, 97, :none),
            (:call, :unsafe_copy!, (:call, :pointer, :buf), :pos, :len),
            (:line, 98, :none),
            (:(=), :env, (:call, :transcode, :String, :buf)),
            (:line, 99, :none),
            (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(=?[^=]+)=(.*)\$", "s"), :env)),
            (:line, 100, :none),
            (:if, (:call, :(===), :m, :nothing), (:block,
                (:line, 101, :none),
                (:call, :error, (:string, "malformed environment entry: ", :env))
              )),
            (:line, 103, :none),
            (:return, (:tuple, (:call, (:curly, :Pair, :String, :String), (:ref, (:., :m, (:quote, #QuoteNode
                        :captures
                      )), 1), (:ref, (:., :m, (:quote, #QuoteNode
                        :captures
                      )), 2)), (:tuple, (:call, :+, :pos, (:call, :*, (:call, :+, :len, 1), 2)), :blk)))
          ))
      ), (:block,
        (:line, 106, :none),
        (:(=), (:call, :start, (:(::), :EnvHash)), (:block,
            (:line, 106, :none),
            0
          )),
        (:line, 107, :none),
        (:(=), (:call, :done, (:(::), :EnvHash), :i), (:block,
            (:line, 107, :none),
            (:call, :(===), (:ccall, (:quote, #QuoteNode
                  :jl_environ
                ), :Any, (:tuple, :Int32), :i), :nothing)
          )),
        (:line, 109, :none),
        (:function, (:call, :next, (:(::), :EnvHash), :i), (:block,
            (:line, 110, :none),
            (:(=), :env, (:ccall, (:quote, #QuoteNode
                  :jl_environ
                ), :Any, (:tuple, :Int32), :i)),
            (:line, 111, :none),
            (:if, (:call, :(===), :env, :nothing), (:block,
                (:line, 112, :none),
                (:call, :throw, (:call, :BoundsError))
              )),
            (:line, 114, :none),
            (:(=), :env, (:(::), :env, :String)),
            (:line, 115, :none),
            (:(=), :m, (:call, :match, (:macrocall, Symbol("@r_str"), "^(.*?)=(.*)\$", "s"), :env)),
            (:line, 116, :none),
            (:if, (:call, :(===), :m, :nothing), (:block,
                (:line, 117, :none),
                (:call, :error, (:string, "malformed environment entry: ", :env))
              )),
            (:line, 119, :none),
            (:return, (:tuple, (:call, (:curly, :Pair, :String, :String), (:ref, (:., :m, (:quote, #QuoteNode
                        :captures
                      )), 1), (:ref, (:., :m, (:quote, #QuoteNode
                        :captures
                      )), 2)), (:call, :+, :i, 1)))
          ))
      )),
    (:line, 124, :none),
    (:function, (:call, :length, (:(::), :EnvHash)), (:block,
        (:line, 125, :none),
        (:(=), :i, 0),
        (:line, 126, :none),
        (:for, (:(=), (:tuple, :k, :v), :ENV), (:block,
            (:line, 127, :none),
            (:+=, :i, 1)
          )),
        (:line, 129, :none),
        (:return, :i)
      )),
    (:line, 132, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :EnvHash)), (:block,
        (:line, 133, :none),
        (:for, (:(=), (:tuple, :k, :v), :ENV), (:block,
            (:line, 134, :none),
            (:call, :println, :io, (:string, :k, "=", :v))
          ))
      )),
    (:line, 138, :none),
    "    withenv(f::Function, kv::Pair...)\n\nExecute `f()` in an environment that is temporarily modified (not replaced as in `setenv`)\nby zero or more `\"var\"=>val` arguments `kv`. `withenv` is generally used via the\n`withenv(kv...) do ... end` syntax. A value of `nothing` can be used to temporarily unset an\nenvironment variable (if it is set). When `withenv` returns, the original environment has\nbeen restored.\n",
    (:line, 147, :none),
    (:function, (:call, (:curly, :withenv, (:<:, :T, :AbstractString)), (:(::), :f, :Function), (:..., (:(::), :keyvals, (:curly, :Pair, :T)))), (:block,
        (:line, 148, :none),
        (:(=), :old, (:call, (:curly, :Dict, :T, :Any))),
        (:line, 149, :none),
        (:for, (:(=), (:tuple, :key, :val), :keyvals), (:block,
            (:line, 150, :none),
            (:(=), (:ref, :old, :key), (:call, :get, :ENV, :key, :nothing)),
            (:line, 151, :none),
            (:if, (:call, :(!==), :val, :nothing), (:(=), (:ref, :ENV, :key), :val), (:call, :delete!, :ENV, :key))
          )),
        (:line, 153, :none),
        (:try, (:block,
            (:line, 153, :none),
            (:call, :f)
          ), false, false, (:block,
            (:line, 155, :none),
            (:for, (:(=), (:tuple, :key, :val), :old), (:block,
                (:line, 156, :none),
                (:if, (:call, :(!==), :val, :nothing), (:(=), (:ref, :ENV, :key), :val), (:call, :delete!, :ENV, :key))
              ))
          ))
      )),
    (:line, 160, :none),
    (:(=), (:call, :withenv, (:(::), :f, :Function)), (:block,
        (:line, 160, :none),
        (:call, :f)
      ))
  ))