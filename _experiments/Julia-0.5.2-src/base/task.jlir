(:quote, (:block,
    (:line, 6, :none),
    (:type, true, (:<:, :CapturedException, :Exception), (:block,
        (:line, 7, :none),
        (:(::), :ex, :Any),
        (:line, 8, :none),
        (:(::), :processed_bt, (:curly, :Vector, :Any)),
        (:line, 10, :none),
        (:function, (:call, :CapturedException, :ex, :bt_raw), (:block,
            (:line, 15, :none),
            (:(=), :bt_lines, (:ref, :Any)),
            (:line, 16, :none),
            (:(=), (:call, :process_func, (:..., :args)), (:block,
                (:line, 16, :none),
                (:call, :push!, :bt_lines, :args)
              )),
            (:line, 17, :none),
            (:call, :process_backtrace, :process_func, :bt_raw, 100),
            (:line, 19, :none),
            (:call, :new, :ex, :bt_lines)
          ))
      )),
    (:line, 23, :none),
    (:(=), (:call, :showerror, (:(::), :io, :IO), (:(::), :ce, :CapturedException)), (:block,
        (:line, 23, :none),
        (:call, :showerror, :io, (:., :ce, (:quote, #QuoteNode
              :ex
            )), (:., :ce, (:quote, #QuoteNode
              :processed_bt
            )), (:kw, :backtrace, true))
      )),
    (:line, 25, :none),
    (:type, true, (:<:, :CompositeException, :Exception), (:block,
        (:line, 26, :none),
        (:(::), :exceptions, (:curly, :Vector, :Any)),
        (:line, 27, :none),
        (:(=), (:call, :CompositeException), (:block,
            (:line, 27, :none),
            (:call, :new, (:ref, :Any))
          )),
        (:line, 28, :none),
        (:(=), (:call, :CompositeException, :exceptions), (:block,
            (:line, 28, :none),
            (:call, :new, :exceptions)
          ))
      )),
    (:line, 30, :none),
    (:(=), (:call, :length, (:(::), :c, :CompositeException)), (:block,
        (:line, 30, :none),
        (:call, :length, (:., :c, (:quote, #QuoteNode
              :exceptions
            )))
      )),
    (:line, 31, :none),
    (:(=), (:call, :push!, (:(::), :c, :CompositeException), :ex), (:block,
        (:line, 31, :none),
        (:call, :push!, (:., :c, (:quote, #QuoteNode
              :exceptions
            )), :ex)
      )),
    (:line, 32, :none),
    (:(=), (:call, :isempty, (:(::), :c, :CompositeException)), (:block,
        (:line, 32, :none),
        (:call, :isempty, (:., :c, (:quote, #QuoteNode
              :exceptions
            )))
      )),
    (:line, 33, :none),
    (:(=), (:call, :start, (:(::), :c, :CompositeException)), (:block,
        (:line, 33, :none),
        (:call, :start, (:., :c, (:quote, #QuoteNode
              :exceptions
            )))
      )),
    (:line, 34, :none),
    (:(=), (:call, :next, (:(::), :c, :CompositeException), :state), (:block,
        (:line, 34, :none),
        (:call, :next, (:., :c, (:quote, #QuoteNode
              :exceptions
            )), :state)
      )),
    (:line, 35, :none),
    (:(=), (:call, :done, (:(::), :c, :CompositeException), :state), (:block,
        (:line, 35, :none),
        (:call, :done, (:., :c, (:quote, #QuoteNode
              :exceptions
            )), :state)
      )),
    (:line, 37, :none),
    (:function, (:call, :showerror, (:(::), :io, :IO), (:(::), :ex, :CompositeException)), (:block,
        (:line, 38, :none),
        (:if, (:call, :!, (:call, :isempty, :ex)), (:block,
            (:line, 39, :none),
            (:call, :showerror, :io, (:ref, (:., :ex, (:quote, #QuoteNode
                    :exceptions
                  )), 1)),
            (:line, 40, :none),
            (:(=), :remaining, (:call, :-, (:call, :length, :ex), 1)),
            (:line, 41, :none),
            (:if, (:call, :>, :remaining, 0), (:block,
                (:line, 42, :none),
                (:call, :print, :io, (:string, "\n\n...and ", :remaining, " other exceptions.\n"))
              ))
          ), (:block,
            (:line, 45, :none),
            (:call, :print, :io, "CompositeException()\n")
          ))
      )),
    (:line, 49, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :t, :Task)), (:block,
        (:line, 50, :none),
        (:call, :print, :io, (:string, "Task (", (:., :t, (:quote, #QuoteNode
                :state
              )), ") @0x", (:call, :hex, (:call, :convert, :UInt, (:call, :pointer_from_objref, :t)), (:call, :>>, (:., :Sys, (:quote, #QuoteNode
                    :WORD_SIZE
                  )), 2))))
      )),
    (:line, 53, :none),
    "    @task\n\nWrap an expression in a [`Task`](:class:`Task`) without executing it, and return the [`Task`](:class:`Task`). This only\ncreates a task, and does not run it.\n",
    (:line, 59, :none),
    (:macro, (:call, :task, :ex), (:block,
        (:line, 60, :none),
        (:quote, (:call, :Task, (:->, (:tuple,), (:block,
                (:line, 60, :none),
                (:$, (:call, :esc, :ex))
              ))))
      )),
    (:line, 63, :none),
    "    current_task()\n\nGet the currently running [`Task`](:class:`Task`).\n",
    (:line, 68, :none),
    (:(=), (:call, :current_task), (:block,
        (:line, 68, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_get_current_task
          ), (:curly, :Ref, :Task), (:tuple,))
      )),
    (:line, 70, :none),
    "    istaskdone(task) -> Bool\n\nDetermine whether a task has exited.\n",
    (:line, 75, :none),
    (:(=), (:call, :istaskdone, (:(::), :t, :Task)), (:block,
        (:line, 75, :none),
        (:call, :|, (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :done
            )), (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :failed
            )))
      )),
    (:line, 77, :none),
    "    istaskstarted(task) -> Bool\n\nDetermine whether a task has started executing.\n",
    (:line, 82, :none),
    (:(=), (:call, :istaskstarted, (:(::), :t, :Task)), (:block,
        (:line, 82, :none),
        (:call, :(!=), (:ccall, (:quote, #QuoteNode
              :jl_is_task_started
            ), :Cint, (:tuple, :Any), :t), 0)
      )),
    (:line, 84, :none),
    (:(=), (:call, :task_local_storage), (:block,
        (:line, 84, :none),
        (:call, :get_task_tls, (:call, :current_task))
      )),
    (:line, 85, :none),
    (:function, (:call, :get_task_tls, (:(::), :t, :Task)), (:block,
        (:line, 86, :none),
        (:if, (:call, :is, (:., :t, (:quote, #QuoteNode
                :storage
              )), :nothing), (:block,
            (:line, 87, :none),
            (:(=), (:., :t, (:quote, #QuoteNode
                  :storage
                )), (:call, :ObjectIdDict))
          )),
        (:line, 89, :none),
        (:(::), (:., :t, (:quote, #QuoteNode
              :storage
            )), :ObjectIdDict)
      )),
    (:line, 92, :none),
    "    task_local_storage(key)\n\nLook up the value of a key in the current task's task-local storage.\n",
    (:line, 97, :none),
    (:(=), (:call, :task_local_storage, :key), (:block,
        (:line, 97, :none),
        (:ref, (:call, :task_local_storage), :key)
      )),
    (:line, 99, :none),
    "    task_local_storage(key, value)\n\nAssign a value to a key in the current task's task-local storage.\n",
    (:line, 104, :none),
    (:(=), (:call, :task_local_storage, :key, :val), (:block,
        (:line, 104, :none),
        (:(=), (:ref, (:call, :task_local_storage), :key), :val)
      )),
    (:line, 106, :none),
    "    task_local_storage(body, key, value)\n\nCall the function `body` with a modified task-local storage, in which `value` is assigned to\n`key`; the previous value of `key`, or lack thereof, is restored afterwards. Useful\nfor emulating dynamic scoping.\n",
    (:line, 113, :none),
    (:function, (:call, :task_local_storage, (:(::), :body, :Function), :key, :val), (:block,
        (:line, 114, :none),
        (:(=), :tls, (:call, :task_local_storage)),
        (:line, 115, :none),
        (:(=), :hadkey, (:call, :haskey, :tls, :key)),
        (:line, 116, :none),
        (:(=), :old, (:call, :get, :tls, :key, :nothing)),
        (:line, 117, :none),
        (:(=), (:ref, :tls, :key), :val),
        (:line, 118, :none),
        (:try, (:block,
            (:line, 118, :none),
            (:call, :body)
          ), false, false, (:block,
            (:line, 120, :none),
            (:if, :hadkey, (:(=), (:ref, :tls, :key), :old), (:call, :delete!, :tls, :key))
          ))
      )),
    (:line, 125, :none),
    (:function, (:call, :wait, (:(::), :t, :Task)), (:block,
        (:line, 126, :none),
        (:if, (:call, :!, (:call, :istaskdone, :t)), (:block,
            (:line, 127, :none),
            (:if, (:call, :is, (:., :t, (:quote, #QuoteNode
                    :donenotify
                  )), :nothing), (:block,
                (:line, 128, :none),
                (:(=), (:., :t, (:quote, #QuoteNode
                      :donenotify
                    )), (:call, :Condition))
              ))
          )),
        (:line, 131, :none),
        (:while, (:call, :!, (:call, :istaskdone, :t)), (:block,
            (:line, 132, :none),
            (:call, :wait, (:., :t, (:quote, #QuoteNode
                  :donenotify
                )))
          )),
        (:line, 134, :none),
        (:if, (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :failed
            )), (:block,
            (:line, 135, :none),
            (:call, :throw, (:., :t, (:quote, #QuoteNode
                  :exception
                )))
          )),
        (:line, 137, :none),
        (:return, (:., :t, (:quote, #QuoteNode
              :result
            )))
      )),
    (:line, 140, :none),
    (:(=), (:call, :suppress_excp_printing, (:(::), :t, :Task)), (:block,
        (:line, 140, :none),
        (:if, (:call, :isa, (:., :t, (:quote, #QuoteNode
                :storage
              )), :ObjectIdDict), (:call, :get, (:call, :get_task_tls, :t), (:quote, #QuoteNode
              :SUPPRESS_EXCEPTION_PRINTING
            ), false), false)
      )),
    (:line, 143, :none),
    (:function, (:call, :task_done_hook, (:(::), :t, :Task)), (:block,
        (:line, 144, :none),
        (:(=), :err, (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :failed
            ))),
        (:line, 145, :none),
        (:(=), :result, (:., :t, (:quote, #QuoteNode
              :result
            ))),
        (:line, 146, :none),
        (:(=), :handled, false),
        (:line, 147, :none),
        (:if, :err, (:block,
            (:line, 148, :none),
            (:(=), (:., :t, (:quote, #QuoteNode
                  :backtrace
                )), (:call, :catch_backtrace))
          )),
        (:line, 151, :none),
        (:(=), :q, (:., :t, (:quote, #QuoteNode
              :consumers
            ))),
        (:line, 152, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :consumers
            )), :nothing),
        (:line, 154, :none),
        (:if, (:&&, (:call, :isa, (:., :t, (:quote, #QuoteNode
                  :donenotify
                )), :Condition), (:call, :!, (:call, :isempty, (:., (:., :t, (:quote, #QuoteNode
                      :donenotify
                    )), (:quote, #QuoteNode
                    :waitq
                  ))))), (:block,
            (:line, 155, :none),
            (:(=), :handled, true),
            (:line, 156, :none),
            (:call, :notify, (:., :t, (:quote, #QuoteNode
                  :donenotify
                )), :result, (:kw, :error, :err))
          )),
        (:line, 161, :none),
        (:if, (:call, :isa, :q, :Task), (:block,
            (:line, 162, :none),
            (:(=), :handled, true),
            (:line, 163, :none),
            (:(=), :nexttask, :q),
            (:line, 164, :none),
            (:(=), (:., :nexttask, (:quote, #QuoteNode
                  :state
                )), (:quote, #QuoteNode
                :runnable
              )),
            (:line, 165, :none),
            (:if, :err, (:block,
                (:line, 166, :none),
                (:(=), (:., :nexttask, (:quote, #QuoteNode
                      :exception
                    )), :result)
              )),
            (:line, 168, :none),
            (:call, :yieldto, :nexttask, :result)
          ), (:block,
            (:line, 169, :none),
            (:if, (:&&, (:call, :isa, :q, :Condition), (:call, :!, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                        :waitq
                      ))))), (:block,
                (:line, 170, :none),
                (:(=), :handled, true),
                (:line, 171, :none),
                (:call, :notify, :q, :result, (:kw, :error, :err))
              ))
          )),
        (:line, 174, :none),
        (:if, (:&&, :err, (:call, :!, :handled)), (:block,
            (:line, 175, :none),
            (:if, (:&&, (:call, :isa, :result, :InterruptException), (:&&, (:call, :isdefined, :Base, (:quote, #QuoteNode
                      :active_repl_backend
                    )), (:&&, (:call, :(==), (:., (:., :active_repl_backend, (:quote, #QuoteNode
                            :backend_task
                          )), (:quote, #QuoteNode
                          :state
                        )), (:quote, #QuoteNode
                        :runnable
                      )), (:&&, (:call, :isempty, :Workqueue), (:., :active_repl_backend, (:quote, #QuoteNode
                          :in_eval
                        )))))), (:block,
                (:line, 178, :none),
                (:call, :throwto, (:., :active_repl_backend, (:quote, #QuoteNode
                      :backend_task
                    )), :result)
              )),
            (:line, 180, :none),
            (:if, (:call, :!, (:call, :suppress_excp_printing, :t)), (:block,
                (:line, 181, :none),
                (:let, (:block,
                    (:line, 183, :none),
                    (:macrocall, Symbol("@schedule"), (:call, :with_output_color, (:->, (:tuple, :io), (:block,
                            (:line, 184, :none),
                            (:call, :print, :io, "ERROR (unhandled task failure): "),
                            (:line, 185, :none),
                            (:call, :showerror, :io, :result, :bt),
                            (:line, 186, :none),
                            (:call, :println, :io)
                          )), (:quote, #QuoteNode
                          :red
                        ), :STDERR))
                  ), (:(=), :bt, (:., :t, (:quote, #QuoteNode
                        :backtrace
                      ))))
              ))
          )),
        (:line, 191, :none),
        (:call, :wait)
      )),
    (:line, 197, :none),
    (:function, (:call, :produce, :v), (:block,
        (:line, 202, :none),
        (:(=), :ct, (:call, :current_task)),
        (:line, 203, :none),
        (:local, :empty, :t, :q),
        (:line, 204, :none),
        (:while, true, (:block,
            (:line, 205, :none),
            (:(=), :q, (:., :ct, (:quote, #QuoteNode
                  :consumers
                ))),
            (:line, 206, :none),
            (:if, (:call, :isa, :q, :Task), (:block,
                (:line, 207, :none),
                (:(=), :t, :q),
                (:line, 208, :none),
                (:(=), (:., :ct, (:quote, #QuoteNode
                      :consumers
                    )), :nothing),
                (:line, 209, :none),
                (:(=), :empty, true),
                (:line, 210, :none),
                (:break,)
              ), (:block,
                (:line, 211, :none),
                (:if, (:&&, (:call, :isa, :q, :Condition), (:call, :!, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                            :waitq
                          ))))), (:block,
                    (:line, 212, :none),
                    (:(=), :t, (:call, :shift!, (:., :q, (:quote, #QuoteNode
                            :waitq
                          )))),
                    (:line, 213, :none),
                    (:(=), :empty, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                            :waitq
                          )))),
                    (:line, 214, :none),
                    (:break,)
                  ))
              )),
            (:line, 216, :none),
            (:call, :wait)
          )),
        (:line, 219, :none),
        (:||, (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :runnable
            )), (:call, :throw, (:call, :AssertionError, "producer.consumer.state == :runnable"))),
        (:line, 220, :none),
        (:if, :empty, (:block,
            (:line, 221, :none),
            (:call, :schedule_and_wait, :t, :v),
            (:line, 222, :none),
            (:while, true, (:block,
                (:line, 224, :none),
                (:(=), :q, (:., :ct, (:quote, #QuoteNode
                      :consumers
                    ))),
                (:line, 225, :none),
                (:if, (:call, :isa, :q, :Task), (:block,
                    (:line, 226, :none),
                    (:return, (:., :q, (:quote, #QuoteNode
                          :result
                        )))
                  ), (:block,
                    (:line, 227, :none),
                    (:if, (:&&, (:call, :isa, :q, :Condition), (:call, :!, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                                :waitq
                              ))))), (:block,
                        (:line, 228, :none),
                        (:return, (:., (:ref, (:., :q, (:quote, #QuoteNode
                                  :waitq
                                )), 1), (:quote, #QuoteNode
                              :result
                            )))
                      ))
                  )),
                (:line, 230, :none),
                (:call, :wait)
              ))
          ), (:block,
            (:line, 233, :none),
            (:call, :schedule, :t, :v),
            (:line, 238, :none),
            (:call, :yield),
            (:line, 239, :none),
            (:return, (:., (:ref, (:., :q, (:quote, #QuoteNode
                      :waitq
                    )), 1), (:quote, #QuoteNode
                  :result
                )))
          ))
      )),
    (:line, 242, :none),
    (:(=), (:call, :produce, (:..., :v)), (:block,
        (:line, 242, :none),
        (:call, :produce, :v)
      )),
    (:line, 244, :none),
    (:function, (:call, :consume, (:(::), :P, :Task), (:..., :values)), (:block,
        (:line, 245, :none),
        (:if, (:call, :istaskdone, :P), (:block,
            (:line, 246, :none),
            (:return, (:call, :wait, :P))
          )),
        (:line, 249, :none),
        (:(=), :ct, (:call, :current_task)),
        (:line, 250, :none),
        (:(=), (:., :ct, (:quote, #QuoteNode
              :result
            )), (:if, (:call, :(==), (:call, :length, :values), 1), (:ref, :values, 1), :values)),
        (:line, 258, :none),
        (:if, (:||, (:call, :(===), (:., :P, (:quote, #QuoteNode
                  :consumers
                )), :nothing), (:&&, (:call, :isa, (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), :Condition), (:call, :isempty, (:., (:., :P, (:quote, #QuoteNode
                      :consumers
                    )), (:quote, #QuoteNode
                    :waitq
                  ))))), (:block,
            (:line, 259, :none),
            (:(=), (:., :P, (:quote, #QuoteNode
                  :consumers
                )), :ct)
          ), (:block,
            (:line, 261, :none),
            (:if, (:call, :isa, (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), :Task), (:block,
                (:line, 262, :none),
                (:(=), :t, (:., :P, (:quote, #QuoteNode
                      :consumers
                    ))),
                (:line, 263, :none),
                (:(=), (:., :P, (:quote, #QuoteNode
                      :consumers
                    )), (:call, :Condition)),
                (:line, 264, :none),
                (:call, :push!, (:., (:., :P, (:quote, #QuoteNode
                        :consumers
                      )), (:quote, #QuoteNode
                      :waitq
                    )), :t)
              )),
            (:line, 266, :none),
            (:call, :push!, (:., (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), (:quote, #QuoteNode
                  :waitq
                )), :ct)
          )),
        (:line, 269, :none),
        (:if, (:call, :(==), (:., :P, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :runnable
            )), (:call, :schedule_and_wait, :P), (:call, :wait))
      )),
    (:line, 272, :none),
    (:(=), (:call, :start, (:(::), :t, :Task)), (:block,
        (:line, 272, :none),
        :nothing
      )),
    (:line, 273, :none),
    (:function, (:call, :done, (:(::), :t, :Task), :val), (:block,
        (:line, 274, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :result
            )), (:call, :consume, :t)),
        (:line, 275, :none),
        (:call, :istaskdone, :t)
      )),
    (:line, 277, :none),
    (:(=), (:call, :next, (:(::), :t, :Task), :val), (:block,
        (:line, 277, :none),
        (:tuple, (:., :t, (:quote, #QuoteNode
              :result
            )), :nothing)
      )),
    (:line, 278, :none),
    (:(=), (:call, :iteratorsize, (:(::), (:curly, :Type, :Task))), (:block,
        (:line, 278, :none),
        (:call, :SizeUnknown)
      )),
    (:line, 279, :none),
    (:(=), (:call, :iteratoreltype, (:(::), (:curly, :Type, :Task))), (:block,
        (:line, 279, :none),
        (:call, :EltypeUnknown)
      )),
    (:line, 281, :none),
    (:(=), (:call, :isempty, (:(::), :Task)), (:block,
        (:line, 281, :none),
        (:call, :error, "isempty not defined for Tasks")
      )),
    (:line, 285, :none),
    (:(=), (:call, :sync_begin), (:block,
        (:line, 285, :none),
        (:call, :task_local_storage, (:quote, #QuoteNode
            :SPAWNS
          ), (:tuple, (:vect,), (:call, :get, (:call, :task_local_storage), (:quote, #QuoteNode
                :SPAWNS
              ), (:tuple,))))
      )),
    (:line, 287, :none),
    (:function, (:call, :sync_end), (:block,
        (:line, 288, :none),
        (:(=), :spawns, (:call, :get, (:call, :task_local_storage), (:quote, #QuoteNode
              :SPAWNS
            ), (:tuple,))),
        (:line, 289, :none),
        (:if, (:call, :is, :spawns, (:tuple,)), (:block,
            (:line, 290, :none),
            (:call, :error, "sync_end() without sync_begin()")
          )),
        (:line, 292, :none),
        (:(=), :refs, (:ref, :spawns, 1)),
        (:line, 293, :none),
        (:call, :task_local_storage, (:quote, #QuoteNode
            :SPAWNS
          ), (:ref, :spawns, 2)),
        (:line, 295, :none),
        (:(=), :c_ex, (:call, :CompositeException)),
        (:line, 296, :none),
        (:for, (:(=), :r, :refs), (:block,
            (:line, 297, :none),
            (:try, (:block,
                (:line, 298, :none),
                (:call, :wait, :r)
              ), :ex, (:block,
                (:line, 300, :none),
                (:if, (:||, (:call, :!, (:call, :isa, :r, :Task)), (:&&, (:call, :isa, :r, :Task), (:call, :!, (:call, :(==), (:., :r, (:quote, #QuoteNode
                              :state
                            )), (:quote, #QuoteNode
                            :failed
                          ))))), (:block,
                    (:line, 301, :none),
                    (:call, :rethrow, :ex)
                  ))
              ), (:block,
                (:line, 304, :none),
                (:if, (:&&, (:call, :isa, :r, :Task), (:call, :(==), (:., :r, (:quote, #QuoteNode
                          :state
                        )), (:quote, #QuoteNode
                        :failed
                      ))), (:block,
                    (:line, 305, :none),
                    (:call, :push!, :c_ex, (:call, :CapturedException, (:., :r, (:quote, #QuoteNode
                            :result
                          )), (:., :r, (:quote, #QuoteNode
                            :backtrace
                          ))))
                  ))
              ))
          )),
        (:line, 310, :none),
        (:if, (:call, :!, (:call, :isempty, :c_ex)), (:block,
            (:line, 311, :none),
            (:call, :throw, :c_ex)
          )),
        (:line, 313, :none),
        :nothing
      )),
    (:line, 316, :none),
    "    @sync\n\nWait until all dynamically-enclosed uses of `@async`, `@spawn`, `@spawnat` and `@parallel`\nare complete. All exceptions thrown by enclosed async operations are collected and thrown as\na `CompositeException`.\n",
    (:line, 323, :none),
    (:macro, (:call, :sync, :block), (:block,
        (:line, 324, :none),
        (:quote, (:block,
            (:line, 325, :none),
            (:call, :sync_begin),
            (:line, 326, :none),
            (:(=), :v, (:$, (:call, :esc, :block))),
            (:line, 327, :none),
            (:call, :sync_end),
            (:line, 328, :none),
            :v
          ))
      )),
    (:line, 332, :none),
    (:function, (:call, :sync_add, :r), (:block,
        (:line, 333, :none),
        (:(=), :spawns, (:call, :get, (:call, :task_local_storage), (:quote, #QuoteNode
              :SPAWNS
            ), (:tuple,))),
        (:line, 334, :none),
        (:if, (:call, :!, (:call, :is, :spawns, (:tuple,))), (:block,
            (:line, 335, :none),
            (:call, :push!, (:ref, :spawns, 1), :r),
            (:line, 336, :none),
            (:if, (:call, :isa, :r, :Task), (:block,
                (:line, 337, :none),
                (:(=), :tls_r, (:call, :get_task_tls, :r)),
                (:line, 338, :none),
                (:(=), (:ref, :tls_r, (:quote, #QuoteNode
                      :SUPPRESS_EXCEPTION_PRINTING
                    )), true)
              ))
          )),
        (:line, 341, :none),
        :r
      )),
    (:line, 344, :none),
    (:function, (:call, :async_run_thunk, :thunk), (:block,
        (:line, 345, :none),
        (:(=), :t, (:call, :Task, :thunk)),
        (:line, 346, :none),
        (:call, :sync_add, :t),
        (:line, 347, :none),
        (:call, :enq_work, :t),
        (:line, 348, :none),
        :t
      )),
    (:line, 351, :none),
    "    @async\n\nLike `@schedule`, `@async` wraps an expression in a `Task` and adds it to the local\nmachine's scheduler queue. Additionally it adds the task to the set of items that the\nnearest enclosing `@sync` waits for. `@async` also wraps the expression in a `let x=x, y=y, ...`\nblock to create a new scope with copies of all variables referenced in the expression.\n",
    (:line, 359, :none),
    (:macro, (:call, :async, :expr), (:block,
        (:line, 360, :none),
        (:(=), :expr, (:call, :localize_vars, (:call, :esc, (:quote, (:->, (:tuple,), (:block,
                    (:line, 360, :none),
                    (:$, :expr)
                  )))), false)),
        (:line, 361, :none),
        (:quote, (:call, :async_run_thunk, (:$, :expr)))
      ))
  ))