(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :MultiplicativeInverses, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:toplevel, (:import, :Base, :div), (:import, :Base, :divrem), (:import, :Base, :rem), (:import, :Base, :unsigned)),
        (:line, 6, :none),
        (:toplevel, (:using, :Base, :LinearFast), (:using, :Base, :LinearSlow), (:using, :Base, :tail)),
        (:line, 7, :none),
        (:export, :multiplicativeinverse),
        (:line, 9, :none),
        (:(=), (:call, :unsigned, (:(::), (:curly, :Type, :Int8))), (:block,
            (:line, 9, :none),
            :UInt8
          )),
        (:line, 10, :none),
        (:(=), (:call, :unsigned, (:(::), (:curly, :Type, :Int16))), (:block,
            (:line, 10, :none),
            :UInt16
          )),
        (:line, 11, :none),
        (:(=), (:call, :unsigned, (:(::), (:curly, :Type, :Int32))), (:block,
            (:line, 11, :none),
            :UInt32
          )),
        (:line, 12, :none),
        (:(=), (:call, :unsigned, (:(::), (:curly, :Type, :Int64))), (:block,
            (:line, 12, :none),
            :UInt64
          )),
        (:line, 13, :none),
        (:(=), (:call, :unsigned, (:(::), (:curly, :Type, :Int128))), (:block,
            (:line, 13, :none),
            :UInt128
          )),
        (:line, 14, :none),
        (:(=), (:call, (:curly, :unsigned, (:<:, :T, :Unsigned)), (:(::), (:curly, :Type, :T))), (:block,
            (:line, 14, :none),
            :T
          )),
        (:line, 16, :none),
        (:abstract, (:curly, :MultiplicativeInverse, :T)),
        (:line, 46, :none),
        (:type, false, (:<:, (:curly, :SignedMultiplicativeInverse, (:<:, :T, :Signed)), (:curly, :MultiplicativeInverse, :T)), (:block,
            (:line, 47, :none),
            (:(::), :divisor, :T),
            (:line, 48, :none),
            (:(::), :multiplier, :T),
            (:line, 49, :none),
            (:(::), :addmul, :Int8),
            (:line, 50, :none),
            (:(::), :shift, :UInt8),
            (:line, 52, :none),
            (:function, (:call, :SignedMultiplicativeInverse, (:(::), :d, :T)), (:block,
                (:line, 53, :none),
                (:&&, (:call, :(==), :d, 0), (:call, :throw, (:call, :ArgumentError, (:string, "cannot compute magic for d == ", :d)))),
                (:line, 54, :none),
                (:(=), :signedmin, (:call, :unsigned, (:call, :typemin, :T))),
                (:line, 55, :none),
                (:(=), :UT, (:call, :unsigned, :T)),
                (:line, 58, :none),
                (:(=), :ad, (:call, :unsigned, (:call, :abs, :d))),
                (:line, 59, :none),
                (:(=), :t, (:call, :+, :signedmin, (:call, :signbit, :d))),
                (:line, 60, :none),
                (:(=), :anc, (:call, :-, (:call, :-, :t, (:call, :one, :UT)), (:call, :rem, :t, :ad))),
                (:line, 61, :none),
                (:(=), :p, (:call, :-, (:call, :*, (:call, :sizeof, :d), 8), 1)),
                (:line, 62, :none),
                (:(=), (:tuple, :q1, :r1), (:call, :divrem, :signedmin, :anc)),
                (:line, 63, :none),
                (:(=), (:tuple, :q2, :r2), (:call, :divrem, :signedmin, :ad)),
                (:line, 64, :none),
                (:while, true, (:block,
                    (:line, 65, :none),
                    (:+=, :p, 1),
                    (:line, 67, :none),
                    (:(=), :q1, (:call, :<<, :q1, 1)),
                    (:line, 68, :none),
                    (:(=), :r1, (:call, :<<, :r1, 1)),
                    (:line, 69, :none),
                    (:if, (:call, :(>=), :r1, :anc), (:block,
                        (:line, 70, :none),
                        (:+=, :q1, (:call, :one, :UT)),
                        (:line, 71, :none),
                        (:-=, :r1, :anc)
                      )),
                    (:line, 74, :none),
                    (:(=), :q2, (:call, :<<, :q2, 1)),
                    (:line, 75, :none),
                    (:(=), :r2, (:call, :<<, :r2, 1)),
                    (:line, 76, :none),
                    (:if, (:call, :(>=), :r2, :ad), (:block,
                        (:line, 77, :none),
                        (:+=, :q2, (:call, :one, :UT)),
                        (:line, 78, :none),
                        (:-=, :r2, :ad)
                      )),
                    (:line, 80, :none),
                    (:(=), :delta, (:call, :-, :ad, :r2)),
                    (:line, 81, :none),
                    (:||, (:||, (:call, :<, :q1, :delta), (:&&, (:call, :(==), :q1, :delta), (:call, :(==), :r1, 0))), (:break,))
                  )),
                (:line, 84, :none),
                (:(=), :m, (:call, :flipsign, (:call, :%, (:call, :+, :q2, (:call, :one, :UT)), :T), :d)),
                (:line, 85, :none),
                (:(=), :s, (:call, :-, :p, (:call, :*, (:call, :sizeof, :d), 8))),
                (:line, 86, :none),
                (:call, :new, :d, :m, (:if, (:&&, (:call, :>, :d, 0), (:call, :<, :m, 0)), (:call, :Int8, 1), (:if, (:&&, (:call, :<, :d, 0), (:call, :>, :m, 0)), (:call, :Int8, -1), (:call, :Int8, 0))), (:call, :UInt8, :s))
              ))
          )),
        (:line, 89, :none),
        (:(=), (:call, :SignedMultiplicativeInverse, (:(::), :x, :Signed)), (:block,
            (:line, 89, :none),
            (:call, (:curly, :SignedMultiplicativeInverse, (:call, :typeof, :x)), :x)
          )),
        (:line, 91, :none),
        (:type, false, (:<:, (:curly, :UnsignedMultiplicativeInverse, (:<:, :T, :Unsigned)), (:curly, :MultiplicativeInverse, :T)), (:block,
            (:line, 92, :none),
            (:(::), :divisor, :T),
            (:line, 93, :none),
            (:(::), :multiplier, :T),
            (:line, 94, :none),
            (:(::), :add, :Bool),
            (:line, 95, :none),
            (:(::), :shift, :UInt8),
            (:line, 97, :none),
            (:function, (:call, :UnsignedMultiplicativeInverse, (:(::), :d, :T)), (:block,
                (:line, 98, :none),
                (:&&, (:call, :(==), :d, 0), (:call, :throw, (:call, :ArgumentError, (:string, "cannot compute magic for d == ", :d)))),
                (:line, 99, :none),
                (:(=), :u2, (:call, :convert, :T, 2)),
                (:line, 100, :none),
                (:(=), :add, false),
                (:line, 101, :none),
                (:(=), :signedmin, (:call, :<<, (:call, :one, :d), (:call, :-, (:call, :*, (:call, :sizeof, :d), 8), 1))),
                (:line, 102, :none),
                (:(=), :signedmax, (:call, :-, :signedmin, (:call, :one, :T))),
                (:line, 103, :none),
                (:(=), :allones, (:call, :%, (:call, :-, (:call, :zero, :d), 1), :T)),
                (:line, 105, :none),
                (:(=), :nc, (:call, :-, :allones, (:call, :rem, (:call, :convert, :T, (:call, :-, :allones, :d)), :d))),
                (:line, 106, :none),
                (:(=), :p, (:call, :-, (:call, :*, 8, (:call, :sizeof, :d)), 1)),
                (:line, 107, :none),
                (:(=), (:tuple, :q1, :r1), (:call, :divrem, :signedmin, :nc)),
                (:line, 108, :none),
                (:(=), (:tuple, :q2, :r2), (:call, :divrem, :signedmax, :d)),
                (:line, 109, :none),
                (:while, true, (:block,
                    (:line, 110, :none),
                    (:+=, :p, 1),
                    (:line, 111, :none),
                    (:if, (:call, :(>=), :r1, (:call, :convert, :T, (:call, :-, :nc, :r1))), (:block,
                        (:line, 112, :none),
                        (:(=), :q1, (:call, :+, :q1, :q1, (:call, :one, :T))),
                        (:line, 113, :none),
                        (:(=), :r1, (:call, :-, (:call, :+, :r1, :r1), :nc))
                      ), (:block,
                        (:line, 115, :none),
                        (:(=), :q1, (:call, :+, :q1, :q1)),
                        (:line, 116, :none),
                        (:(=), :r1, (:call, :+, :r1, :r1))
                      )),
                    (:line, 118, :none),
                    (:if, (:call, :(>=), (:call, :convert, :T, (:call, :+, :r2, (:call, :one, :T))), (:call, :convert, :T, (:call, :-, :d, :r2))), (:block,
                        (:line, 119, :none),
                        (:|=, :add, (:call, :(>=), :q2, :signedmax)),
                        (:line, 120, :none),
                        (:(=), :q2, (:call, :+, :q2, :q2, (:call, :one, :T))),
                        (:line, 121, :none),
                        (:(=), :r2, (:call, :-, (:call, :+, :r2, :r2, (:call, :one, :T)), :d))
                      ), (:block,
                        (:line, 123, :none),
                        (:|=, :add, (:call, :(>=), :q2, :signedmin)),
                        (:line, 124, :none),
                        (:(=), :q2, (:call, :+, :q2, :q2)),
                        (:line, 125, :none),
                        (:(=), :r2, (:call, :+, :r2, :r2, (:call, :one, :T)))
                      )),
                    (:line, 127, :none),
                    (:(=), :delta, (:call, :-, (:call, :-, :d, (:call, :one, :T)), :r2)),
                    (:line, 128, :none),
                    (:||, (:&&, (:call, :<, :p, (:call, :*, (:call, :sizeof, :d), 16)), (:||, (:call, :<, :q1, :delta), (:&&, (:call, :(==), :q1, :delta), (:call, :(==), :r1, 0)))), (:break,))
                  )),
                (:line, 130, :none),
                (:(=), :m, (:call, :+, :q2, (:call, :one, :T))),
                (:line, 131, :none),
                (:(=), :s, (:call, :-, (:call, :-, :p, (:call, :*, (:call, :sizeof, :d), 8)), :add)),
                (:line, 132, :none),
                (:call, :new, :d, :m, :add, (:call, :%, :s, :UInt8))
              ))
          )),
        (:line, 135, :none),
        (:(=), (:call, :UnsignedMultiplicativeInverse, (:(::), :x, :Unsigned)), (:block,
            (:line, 135, :none),
            (:call, (:curly, :UnsignedMultiplicativeInverse, (:call, :typeof, :x)), :x)
          )),
        (:line, 137, :none),
        (:function, (:call, (:curly, :div, :T), (:(::), :a, :T), (:(::), :b, (:curly, :SignedMultiplicativeInverse, :T))), (:block,
            (:line, 138, :none),
            (:(=), :x, (:call, :%, (:call, :>>>, (:call, :*, (:call, :widen, :a), (:., :b, (:quote, #QuoteNode
                        :multiplier
                      ))), (:call, :*, (:call, :sizeof, :a), 8)), :T)),
            (:line, 139, :none),
            (:+=, :x, (:call, :%, (:call, :*, :a, (:., :b, (:quote, #QuoteNode
                      :addmul
                    ))), :T)),
            (:line, 140, :none),
            (:call, :ifelse, (:call, :(==), (:call, :abs, (:., :b, (:quote, #QuoteNode
                      :divisor
                    ))), 1), (:call, :*, :a, (:., :b, (:quote, #QuoteNode
                    :divisor
                  ))), (:call, :%, (:call, :+, (:call, :signbit, :x), (:call, :>>, :x, (:., :b, (:quote, #QuoteNode
                        :shift
                      )))), :T))
          )),
        (:line, 142, :none),
        (:function, (:call, (:curly, :div, :T), (:(::), :a, :T), (:(::), :b, (:curly, :UnsignedMultiplicativeInverse, :T))), (:block,
            (:line, 143, :none),
            (:(=), :x, (:call, :%, (:call, :>>>, (:call, :*, (:call, :widen, :a), (:., :b, (:quote, #QuoteNode
                        :multiplier
                      ))), (:call, :*, (:call, :sizeof, :a), 8)), :T)),
            (:line, 144, :none),
            (:(=), :x, (:call, :ifelse, (:., :b, (:quote, #QuoteNode
                    :add
                  )), (:call, :convert, :T, (:call, :+, (:call, :convert, :T, (:call, :>>>, (:call, :convert, :T, (:call, :-, :a, :x)), 1)), :x)), :x)),
            (:line, 145, :none),
            (:call, :ifelse, (:call, :(==), (:., :b, (:quote, #QuoteNode
                    :divisor
                  )), 1), :a, (:call, :>>>, :x, (:., :b, (:quote, #QuoteNode
                    :shift
                  ))))
          )),
        (:line, 148, :none),
        (:(=), (:call, (:curly, :rem, :T), (:(::), :a, :T), (:(::), :b, (:curly, :MultiplicativeInverse, :T))), (:block,
            (:line, 148, :none),
            (:call, :-, :a, (:call, :*, (:call, :div, :a, :b), (:., :b, (:quote, #QuoteNode
                    :divisor
                  ))))
          )),
        (:line, 151, :none),
        (:function, (:call, (:curly, :divrem, :T), (:(::), :a, :T), (:(::), :b, (:curly, :MultiplicativeInverse, :T))), (:block,
            (:line, 152, :none),
            (:(=), :d, (:call, :div, :a, :b)),
            (:line, 153, :none),
            (:tuple, :d, (:call, :-, :a, (:call, :*, :d, (:., :b, (:quote, #QuoteNode
                      :divisor
                    )))))
          )),
        (:line, 156, :none),
        (:(=), (:call, :multiplicativeinverse, (:(::), :x, :Signed)), (:block,
            (:line, 156, :none),
            (:call, :SignedMultiplicativeInverse, :x)
          )),
        (:line, 157, :none),
        (:(=), (:call, :multiplicativeinverse, (:(::), :x, :Unsigned)), (:block,
            (:line, 157, :none),
            (:call, :UnsignedMultiplicativeInverse, :x)
          ))
      ))
  ))