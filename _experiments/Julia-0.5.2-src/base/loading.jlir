(:quote, (:block,
    (:line, 7, :none),
    (:if, (:&&, (:call, :is_unix), (:call, :!, (:call, :is_apple))), (:block,
        (:line, 9, :none),
        (:(=), (:call, :isfile_casesensitive, :path), (:block,
            (:line, 9, :none),
            (:call, :isfile, :path)
          ))
      ), (:block,
        (:line, 10, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 12, :none),
            (:function, (:call, :isfile_casesensitive, :path), (:block,
                (:line, 13, :none),
                (:||, (:call, :isfile, :path), (:return, false)),
                (:line, 14, :none),
                (:call, :(==), (:call, (:., :Filesystem, (:quote, #QuoteNode
                        :longpath
                      )), :path), :path)
              ))
          ), (:block,
            (:line, 16, :none),
            (:if, (:call, :is_apple), (:block,
                (:line, 22, :none),
                (:const, (:(=), :ATRATTR_BIT_MAP_COUNT, 5)),
                (:line, 23, :none),
                (:const, (:(=), :ATTR_CMN_NAME, 1)),
                (:line, 24, :none),
                (:const, (:(=), :BITMAPCOUNT, 1)),
                (:line, 25, :none),
                (:const, (:(=), :COMMONATTR, 5)),
                (:line, 26, :none),
                (:const, (:(=), :FSOPT_NOFOLLOW, 1)),
                (:line, 28, :none),
                (:const, (:(=), :attr_list, (:call, :zeros, :UInt8, 24))),
                (:line, 29, :none),
                (:(=), (:ref, :attr_list, :BITMAPCOUNT), :ATRATTR_BIT_MAP_COUNT),
                (:line, 30, :none),
                (:(=), (:ref, :attr_list, :COMMONATTR), :ATTR_CMN_NAME),
                (:line, 45, :none),
                (:function, (:call, :isfile_casesensitive, :path), (:block,
                    (:line, 46, :none),
                    (:||, (:call, :isfile, :path), (:return, false)),
                    (:line, 47, :none),
                    (:(=), :path_basename, (:call, :String, (:call, :basename, :path))),
                    (:line, 48, :none),
                    (:local, :casepreserved_basename),
                    (:line, 49, :none),
                    (:const, (:(=), :header_size, 12)),
                    (:line, 50, :none),
                    (:(=), :buf, (:call, (:curly, :Array, :UInt8), (:call, :+, (:call, :length, :path_basename), :header_size, 1))),
                    (:line, 51, :none),
                    (:while, true, (:block,
                        (:line, 52, :none),
                        (:(=), :ret, (:ccall, (:quote, #QuoteNode
                              :getattrlist
                            ), :Cint, (:tuple, :Cstring, (:curly, :Ptr, :Void), (:curly, :Ptr, :Void), :Csize_t, :Culong), :path, :attr_list, :buf, (:call, :sizeof, :buf), :FSOPT_NOFOLLOW)),
                        (:line, 55, :none),
                        (:call, :systemerror, (:quote, #QuoteNode
                            :getattrlist
                          ), (:call, :â‰ , :ret, 0)),
                        (:line, 56, :none),
                        (:(=), :filename_length, (:call, :unsafe_load, (:call, :convert, (:curly, :Ptr, :UInt32), (:call, :+, (:call, :pointer, :buf), 8)))),
                        (:line, 58, :none),
                        (:if, (:call, :>, (:call, :+, :filename_length, :header_size), (:call, :length, :buf)), (:block,
                            (:line, 59, :none),
                            (:call, :resize!, :buf, (:call, :+, :filename_length, :header_size)),
                            (:line, 60, :none),
                            (:continue,)
                          )),
                        (:line, 62, :none),
                        (:(=), :casepreserved_basename, (:call, :view, :buf, (:(:), (:call, :+, :header_size, 1), (:call, :-, (:call, :+, :header_size, :filename_length), 1)))),
                        (:line, 64, :none),
                        (:break,)
                      )),
                    (:line, 67, :none),
                    (:&&, (:call, :(==), (:., :path_basename, (:quote, #QuoteNode
                            :data
                          )), :casepreserved_basename), (:return, true)),
                    (:line, 71, :none),
                    (:&&, (:call, :isascii, :path_basename), (:return, false)),
                    (:line, 72, :none),
                    (:call, :(==), (:., (:call, :normalize_string, :path_basename, (:quote, #QuoteNode
                            :NFD
                          )), (:quote, #QuoteNode
                          :data
                        )), :casepreserved_basename)
                  ))
              ), (:block,
                (:line, 76, :none),
                (:function, (:call, :isfile_casesensitive, :path), (:block,
                    (:line, 77, :none),
                    (:||, (:call, :isfile, :path), (:return, false)),
                    (:line, 78, :none),
                    (:(=), (:tuple, :dir, :filename), (:call, :splitdir, :path)),
                    (:line, 79, :none),
                    (:call, :any, (:call, :.==, (:call, :readdir, :dir), :filename))
                  ))
              ))
          ))
      )),
    (:line, 83, :none),
    (:function, (:call, :try_path, (:(::), :prefix, :String), (:(::), :base, :String), (:(::), :name, :String)), (:block,
        (:line, 84, :none),
        (:(=), :path, (:call, :joinpath, :prefix, :name)),
        (:line, 85, :none),
        (:&&, (:call, :isfile_casesensitive, :path), (:return, (:call, :abspath, :path))),
        (:line, 86, :none),
        (:(=), :path, (:call, :joinpath, :prefix, :base, "src", :name)),
        (:line, 87, :none),
        (:&&, (:call, :isfile_casesensitive, :path), (:return, (:call, :abspath, :path))),
        (:line, 88, :none),
        (:(=), :path, (:call, :joinpath, :prefix, :name, "src", :name)),
        (:line, 89, :none),
        (:&&, (:call, :isfile_casesensitive, :path), (:return, (:call, :abspath, :path))),
        (:line, 90, :none),
        (:return, :nothing)
      )),
    (:line, 95, :none),
    (:function, (:call, :find_in_path, (:(::), :name, :String), :wd), (:block,
        (:line, 96, :none),
        (:&&, (:call, :isabspath, :name), (:return, :name)),
        (:line, 97, :none),
        (:(=), :base, :name),
        (:line, 98, :none),
        (:if, (:call, :endswith, :name, ".jl"), (:block,
            (:line, 99, :none),
            (:(=), :base, (:ref, :name, (:(:), 1, (:call, :-, :end, 3))))
          ), (:block,
            (:line, 101, :none),
            (:(=), :name, (:call, :string, :base, ".jl"))
          )),
        (:line, 103, :none),
        (:if, (:call, :(!==), :wd, :nothing), (:block,
            (:line, 104, :none),
            (:&&, (:call, :isfile_casesensitive, (:call, :joinpath, :wd, :name)), (:return, (:call, :joinpath, :wd, :name)))
          )),
        (:line, 106, :none),
        (:(=), :p, (:call, :try_path, (:call, (:., :Pkg, (:quote, #QuoteNode
                  :dir
                ))), :base, :name)),
        (:line, 107, :none),
        (:&&, (:call, :(!==), :p, :nothing), (:return, :p)),
        (:line, 108, :none),
        (:for, (:(=), :prefix, :LOAD_PATH), (:block,
            (:line, 109, :none),
            (:(=), :p, (:call, :try_path, :prefix, :base, :name)),
            (:line, 110, :none),
            (:&&, (:call, :(!==), :p, :nothing), (:return, :p))
          )),
        (:line, 112, :none),
        (:return, :nothing)
      )),
    (:line, 114, :none),
    (:(=), (:call, :find_in_path, (:(::), :name, :AbstractString), (:kw, :wd, (:call, :pwd))), (:block,
        (:line, 114, :none),
        (:call, :find_in_path, (:call, :String, :name), :wd)
      )),
    (:line, 116, :none),
    (:function, (:call, :find_in_node_path, (:(::), :name, :String), :srcpath, (:kw, (:(::), :node, :Int), 1)), (:block,
        (:line, 117, :none),
        (:if, (:call, :(==), (:call, :myid), :node), (:block,
            (:line, 118, :none),
            (:return, (:call, :find_in_path, :name, :srcpath))
          ), (:block,
            (:line, 120, :none),
            (:return, (:call, :remotecall_fetch, :find_in_path, :node, :name, :srcpath))
          ))
      )),
    (:line, 124, :none),
    (:function, (:call, :find_source_file, (:(::), :file, :String)), (:block,
        (:line, 125, :none),
        (:&&, (:||, (:call, :isabspath, :file), (:call, :isfile, :file)), (:return, :file)),
        (:line, 126, :none),
        (:(=), :file2, (:call, :find_in_path, :file)),
        (:line, 127, :none),
        (:&&, (:call, :(!==), :file2, :nothing), (:return, :file2)),
        (:line, 128, :none),
        (:(=), :file2, (:call, :joinpath, :JULIA_HOME, :DATAROOTDIR, "julia", "base", :file)),
        (:line, 129, :none),
        (:return, (:if, (:call, :isfile, :file2), :file2, :nothing))
      )),
    (:line, 132, :none),
    (:function, (:call, :find_all_in_cache_path, (:(::), :mod, :Symbol)), (:block,
        (:line, 133, :none),
        (:(=), :name, (:call, :string, :mod)),
        (:line, 134, :none),
        (:(=), :paths, (:ref, :String)),
        (:line, 135, :none),
        (:for, (:(=), :prefix, :LOAD_CACHE_PATH), (:block,
            (:line, 136, :none),
            (:(=), :path, (:call, :joinpath, :prefix, (:call, :*, :name, ".ji"))),
            (:line, 137, :none),
            (:if, (:call, :isfile_casesensitive, :path), (:block,
                (:line, 138, :none),
                (:call, :push!, :paths, :path)
              ))
          )),
        (:line, 141, :none),
        (:return, :paths)
      )),
    (:line, 146, :none),
    (:function, (:call, :_include_from_serialized, (:(::), :content, (:curly, :Vector, :UInt8))), (:block,
        (:line, 147, :none),
        (:return, (:ccall, (:quote, #QuoteNode
              :jl_restore_incremental_from_buf
            ), :Any, (:tuple, (:curly, :Ptr, :UInt8), :Int), :content, (:call, :sizeof, :content)))
      )),
    (:line, 149, :none),
    (:function, (:call, :_include_from_serialized, (:(::), :path, :String)), (:block,
        (:line, 150, :none),
        (:return, (:ccall, (:quote, #QuoteNode
              :jl_restore_incremental
            ), :Any, (:tuple, :Cstring), :path))
      )),
    (:line, 156, :none),
    (:function, (:call, :_require_from_serialized, (:(::), :node, :Int), (:(::), :mod, :Symbol), (:(::), :path_to_try, :String), (:(::), :toplevel_load, :Bool)), (:block,
        (:line, 157, :none),
        (:local, (:(=), :restored, :nothing)),
        (:line, 158, :none),
        (:local, (:(::), :content, (:curly, :Vector, :UInt8))),
        (:line, 159, :none),
        (:if, (:&&, :toplevel_load, (:&&, (:call, :(==), (:call, :myid), 1), (:call, :>, (:call, :nprocs), 1))), (:block,
            (:line, 161, :none),
            (:if, (:call, :(==), :node, (:call, :myid)), (:block,
                (:line, 162, :none),
                (:(=), :content, (:call, :open, :read, :path_to_try))
              ), (:block,
                (:line, 164, :none),
                (:(=), :content, (:call, :remotecall_fetch, :open, :node, :read, :path_to_try))
              )),
            (:line, 166, :none),
            (:(=), :restored, (:call, :_include_from_serialized, :content)),
            (:line, 167, :none),
            (:&&, (:call, :isa, :restored, :Exception), (:return, :restored)),
            (:line, 168, :none),
            (:(=), :others, (:call, :filter, (:->, :x, (:block,
                    (:line, 168, :none),
                    (:call, :(!=), :x, (:call, :myid))
                  )), (:call, :procs))),
            (:line, 169, :none),
            (:(=), :refs, (:typed_comprehension, :Any, (:generator, (:tuple, :p, (:macrocall, Symbol("@spawnat"), :p, (:let, (:block,
                          (:line, 176, :none),
                          (:if, (:call, :isa, :m, :Exception), :m, :nothing)
                        ), (:(=), :m, (:try, (:block,
                              (:line, 172, :none),
                              (:call, :_include_from_serialized, :content)
                            ), :ex, (:block,
                              (:line, 174, :none),
                              (:if, (:call, :isa, :ex, :Exception), :ex, (:call, :ErrorException, (:call, :string, :ex)))
                            )))))), (:(=), :p, :others)))),
            (:line, 179, :none),
            (:for, (:(=), (:tuple, :id, :ref), :refs), (:block,
                (:line, 180, :none),
                (:(=), :m, (:call, :fetch, :ref)),
                (:line, 181, :none),
                (:if, (:call, :(!==), :m, :nothing), (:block,
                    (:line, 182, :none),
                    (:call, :warn, (:string, "Node state is inconsistent: node ", :id, " failed to load cache from ", :path_to_try, ". Got:")),
                    (:line, 183, :none),
                    (:call, :warn, :m, (:kw, :prefix, "WARNING: "))
                  ))
              ))
          ), (:block,
            (:line, 186, :none),
            (:if, (:call, :(==), :node, (:call, :myid)), (:block,
                (:line, 187, :none),
                (:(=), :restored, (:call, :_include_from_serialized, :path_to_try))
              ), (:block,
                (:line, 189, :none),
                (:(=), :content, (:call, :remotecall_fetch, :open, :node, :read, :path_to_try)),
                (:line, 190, :none),
                (:(=), :restored, (:call, :_include_from_serialized, :content))
              ))
          )),
        (:line, 193, :none),
        (:if, (:call, :!, (:call, :isa, :restored, :Exception)), (:block,
            (:line, 194, :none),
            (:for, (:(=), :M, (:(::), :restored, (:curly, :Vector, :Any))), (:block,
                (:line, 195, :none),
                (:if, (:call, :isdefined, :M, (:., (:., :Base, (:quote, #QuoteNode
                          :Docs
                        )), (:quote, #QuoteNode
                        :META
                      ))), (:block,
                    (:line, 196, :none),
                    (:call, :push!, (:., (:., :Base, (:quote, #QuoteNode
                            :Docs
                          )), (:quote, #QuoteNode
                          :modules
                        )), :M)
                  ))
              ))
          )),
        (:line, 200, :none),
        (:return, :restored)
      )),
    (:line, 206, :none),
    (:function, (:call, :_require_search_from_serialized, (:(::), :node, :Int), (:(::), :mod, :Symbol), (:(::), :sourcepath, :String), (:(::), :toplevel_load, :Bool)), (:block,
        (:line, 207, :none),
        (:if, (:call, :(==), :node, (:call, :myid)), (:block,
            (:line, 208, :none),
            (:(=), :paths, (:call, :find_all_in_cache_path, :mod))
          ), (:block,
            (:line, 210, :none),
            (:(=), :paths, (:macrocall, Symbol("@fetchfrom"), :node, (:call, :find_all_in_cache_path, :mod)))
          )),
        (:line, 213, :none),
        (:for, (:(=), :path_to_try, (:(::), :paths, (:curly, :Vector, :String))), (:block,
            (:line, 214, :none),
            (:if, (:call, :stale_cachefile, :sourcepath, :path_to_try), (:block,
                (:line, 215, :none),
                (:continue,)
              )),
            (:line, 217, :none),
            (:(=), :restored, (:call, :_require_from_serialized, :node, :mod, :path_to_try, :toplevel_load)),
            (:line, 218, :none),
            (:if, (:call, :isa, :restored, :Exception), (:block,
                (:line, 219, :none),
                (:if, (:&&, (:call, :isa, :restored, :ErrorException), (:call, :endswith, (:., :restored, (:quote, #QuoteNode
                          :msg
                        )), " uuid did not match cache file.")), (:block,
                    (:line, 222, :none),
                    (:&&, (:ref, :DEBUG_LOADING), (:call, :info, (:string, "JL_DEBUG_LOADING: Failed to load ", :path_to_try, " because ", (:., :restored, (:quote, #QuoteNode
                              :msg
                            ))))),
                    (:line, 223, :none),
                    (:continue,)
                  )),
                (:line, 225, :none),
                (:call, :warn, (:string, "Deserialization checks failed while attempting to load cache from ", :path_to_try, ".")),
                (:line, 226, :none),
                (:call, :throw, :restored)
              ), (:block,
                (:line, 228, :none),
                (:return, :restored)
              ))
          )),
        (:line, 231, :none),
        (:return, (:call, :!, (:call, :isempty, :paths)))
      )),
    (:line, 237, :none),
    (:const, (:(=), :DEBUG_LOADING, (:call, :Ref, false))),
    (:line, 240, :none),
    (:const, (:(=), :package_locks, (:call, (:curly, :Dict, :Symbol, :Condition)))),
    (:line, 243, :none),
    (:const, (:(=), :_concrete_dependencies, (:ref, :Any))),
    (:line, 244, :none),
    (:const, (:(=), :_require_dependencies, (:ref, :Any))),
    (:line, 245, :none),
    (:const, (:(=), :_track_dependencies, (:call, :Ref, false))),
    (:line, 246, :none),
    (:function, (:call, :_include_dependency, (:(::), :_path, :AbstractString)), (:block,
        (:line, 247, :none),
        (:(=), :prev, (:call, :source_path, :nothing)),
        (:line, 248, :none),
        (:(=), :path, (:if, (:call, :(===), :prev, :nothing), (:call, :abspath, :_path), (:call, :joinpath, (:call, :dirname, :prev), :_path))),
        (:line, 249, :none),
        (:if, (:&&, (:call, :(==), (:call, :myid), 1), (:ref, :_track_dependencies)), (:block,
            (:line, 250, :none),
            (:(=), :apath, (:call, :abspath, :path)),
            (:line, 251, :none),
            (:call, :push!, :_require_dependencies, (:tuple, :apath, (:call, :mtime, :apath)))
          )),
        (:line, 253, :none),
        (:return, (:tuple, :path, :prev))
      )),
    (:line, 255, :none),
    (:function, (:call, :include_dependency, (:(::), :path, :AbstractString)), (:block,
        (:line, 256, :none),
        (:call, :_include_dependency, :path),
        (:line, 257, :none),
        (:return, :nothing)
      )),
    (:line, 262, :none),
    (:type, false, (:<:, :PrecompilableError, :Exception), (:block,
        (:line, 263, :none),
        (:(::), :isprecompilable, :Bool)
      )),
    (:line, 265, :none),
    (:function, (:call, :show, (:(::), :io, :IO), (:(::), :ex, :PrecompilableError)), (:block,
        (:line, 266, :none),
        (:if, (:., :ex, (:quote, #QuoteNode
              :isprecompilable
            )), (:block,
            (:line, 267, :none),
            (:call, :print, :io, "Declaring __precompile__(true) is only allowed in module files being imported.")
          ), (:block,
            (:line, 269, :none),
            (:call, :print, :io, "Declaring __precompile__(false) is not allowed in files that are being precompiled.")
          ))
      )),
    (:line, 272, :none),
    (:(=), (:call, :precompilableerror, (:(::), :ex, :PrecompilableError), :c), (:block,
        (:line, 272, :none),
        (:call, :(==), (:., :ex, (:quote, #QuoteNode
              :isprecompilable
            )), :c)
      )),
    (:line, 273, :none),
    (:(=), (:call, :precompilableerror, (:(::), :ex, :WrappedException), :c), (:block,
        (:line, 273, :none),
        (:call, :precompilableerror, (:., :ex, (:quote, #QuoteNode
              :error
            )), :c)
      )),
    (:line, 274, :none),
    (:(=), (:call, :precompilableerror, :ex, :c), (:block,
        (:line, 274, :none),
        false
      )),
    (:line, 279, :none),
    "    __precompile__(isprecompilable::Bool=true)\n\nSpecify whether the file calling this function is precompilable. If `isprecompilable` is\n`true`, then `__precompile__` throws an exception when the file is loaded by\n`using`/`import`/`require` *unless* the file is being precompiled, and in a module file it\ncauses the module to be automatically precompiled when it is imported. Typically,\n`__precompile__()` should occur before the `module` declaration in the file, or better yet\n`VERSION >= v\"0.4\" && __precompile__()` in order to be backward-compatible with Julia 0.3.\n\nIf a module or file is *not* safely precompilable, it should call `__precompile__(false)` in\norder to throw an error if Julia attempts to precompile it.\n\n`__precompile__()` should *not* be used in a module unless all of its dependencies are also\nusing `__precompile__()`. Failure to do so can result in a runtime error when loading the module.\n",
    (:line, 295, :none),
    (:function, (:call, :__precompile__, (:kw, (:(::), :isprecompilable, :Bool), true)), (:block,
        (:line, 296, :none),
        (:if, (:&&, (:call, :(==), (:call, :myid), 1), (:&&, (:call, :(!=), (:., (:call, :JLOptions), (:quote, #QuoteNode
                    :use_compilecache
                  )), 0), (:&&, (:call, :(!=), :isprecompilable, (:call, :(!=), 0, (:ccall, (:quote, #QuoteNode
                        :jl_generating_output
                      ), :Cint, (:tuple,)))), (:call, :!, (:&&, :isprecompilable, (:(::), :toplevel_load, :Bool)))))), (:block,
            (:line, 300, :none),
            (:call, :throw, (:call, :PrecompilableError, :isprecompilable))
          ))
      )),
    (:line, 304, :none),
    (:function, (:call, :require_modname, (:(::), :name, :AbstractString)), (:block,
        (:line, 310, :none),
        (:if, (:call, :Bool, (:., (:call, :JLOptions), (:quote, #QuoteNode
                :use_compilecache
              ))), (:block,
            (:line, 311, :none),
            (:if, (:call, :endswith, :name, ".jl"), (:block,
                (:line, 312, :none),
                (:(=), :tmp, (:ref, :name, (:(:), 1, (:call, :-, :end, 3)))),
                (:line, 313, :none),
                (:for, (:(=), :prefix, :LOAD_CACHE_PATH), (:block,
                    (:line, 314, :none),
                    (:(=), :path, (:call, :joinpath, :prefix, (:call, :*, :tmp, ".ji"))),
                    (:line, 315, :none),
                    (:if, (:call, :isfile, :path), (:block,
                        (:line, 316, :none),
                        (:return, :tmp)
                      ))
                  ))
              ))
          )),
        (:line, 321, :none),
        (:return, :name)
      )),
    (:line, 324, :none),
    "    reload(name::AbstractString)\n\nForce reloading of a package, even if it has been loaded before. This is intended for use\nduring package development as code is modified.\n",
    (:line, 330, :none),
    (:function, (:call, :reload, (:(::), :name, :AbstractString)), (:block,
        (:line, 331, :none),
        (:if, (:||, (:call, :isfile, :name), (:call, :contains, :name, (:., :Filesystem, (:quote, #QuoteNode
                  :path_separator
                )))), (:block,
            (:line, 333, :none),
            (:call, :error, "use `include` instead of `reload` to load source files")
          ), (:block,
            (:line, 336, :none),
            (:call, :require, (:call, :Symbol, (:call, :require_modname, :name)))
          ))
      )),
    (:line, 341, :none),
    (:(=), :toplevel_load, true),
    (:line, 342, :none),
    (:function, (:call, :require, (:(::), :mod, :Symbol)), (:block,
        (:line, 345, :none),
        (:(=), :old_track_dependencies, (:ref, :_track_dependencies)),
        (:line, 346, :none),
        (:(=), (:ref, :_track_dependencies), false),
        (:line, 347, :none),
        (:(=), (:ref, :DEBUG_LOADING), (:call, :haskey, :ENV, "JULIA_DEBUG_LOADING")),
        (:line, 349, :none),
        (:global, :toplevel_load),
        (:line, 350, :none),
        (:(=), :loading, (:call, :get, :package_locks, :mod, false)),
        (:line, 351, :none),
        (:if, (:call, :(!==), :loading, false), (:block,
            (:line, 353, :none),
            (:call, :wait, :loading),
            (:line, 354, :none),
            (:return, nothing)
          )),
        (:line, 356, :none),
        (:(=), (:ref, :package_locks, :mod), (:call, :Condition)),
        (:line, 358, :none),
        (:(=), :last, (:(::), :toplevel_load, :Bool)),
        (:line, 359, :none),
        (:try, (:block,
            (:line, 360, :none),
            (:(=), :toplevel_load, false),
            (:line, 362, :none),
            (:(=), :name, (:call, :string, :mod)),
            (:line, 363, :none),
            (:(=), :path, (:call, :find_in_node_path, :name, :nothing, 1)),
            (:line, 364, :none),
            (:if, (:call, :(===), :path, :nothing), (:block,
                (:line, 365, :none),
                (:call, :throw, (:call, :ArgumentError, (:string, "Module ", :name, " not found in current path.\nRun `Pkg.add(\"", :name, "\")` to install the ", :name, " package.")))
              )),
            (:line, 369, :none),
            (:(=), :doneprecompile, false),
            (:line, 370, :none),
            (:if, (:call, :(!=), (:., (:call, :JLOptions), (:quote, #QuoteNode
                    :use_compilecache
                  )), 0), (:block,
                (:line, 371, :none),
                (:(=), :doneprecompile, (:call, :_require_search_from_serialized, 1, :mod, :path, :last)),
                (:line, 372, :none),
                (:if, (:call, :!, (:call, :isa, :doneprecompile, :Bool)), (:block,
                    (:line, 373, :none),
                    (:return, nothing)
                  ))
              )),
            (:line, 379, :none),
            (:for, (:(=), (:tuple, :concrete_mod, :concrete_uuid), :_concrete_dependencies), (:block,
                (:line, 380, :none),
                (:if, (:call, :(===), :mod, :concrete_mod), (:block,
                    (:line, 381, :none),
                    (:call, :warn, (:string, "Module ", :mod, " with uuid ", :concrete_uuid, " is missing from the cache.\nThis may mean module ", :mod, " does not support precompilation but is imported by a module that does.")),
                    (:line, 383, :none),
                    (:if, (:call, :(!=), (:., (:call, :JLOptions), (:quote, #QuoteNode
                            :incremental
                          )), 0), (:block,
                        (:line, 385, :none),
                        (:call, :throw, (:call, :PrecompilableError, false))
                      ))
                  ))
              )),
            (:line, 390, :none),
            (:if, (:||, (:call, :(===), :doneprecompile, true), (:call, :(!=), (:., (:call, :JLOptions), (:quote, #QuoteNode
                      :incremental
                    )), 0)), (:block,
                (:line, 393, :none),
                (:(=), :cachefile, (:call, :compilecache, :mod)),
                (:line, 394, :none),
                (:(=), :m, (:call, :_require_from_serialized, 1, :mod, :cachefile, :last)),
                (:line, 395, :none),
                (:if, (:call, :isa, :m, :Exception), (:block,
                    (:line, 396, :none),
                    (:call, :warn, (:string, "The call to compilecache failed to create a usable precompiled cache file for module ", :name, ". Got:")),
                    (:line, 397, :none),
                    (:call, :warn, :m, (:kw, :prefix, "WARNING: "))
                  ), (:block,
                    (:line, 400, :none),
                    (:return, nothing)
                  ))
              )),
            (:line, 406, :none),
            (:try, (:block,
                (:line, 407, :none),
                (:if, (:&&, :last, (:&&, (:call, :(==), (:call, :myid), 1), (:call, :>, (:call, :nprocs), 1))), (:block,
                    (:line, 409, :none),
                    (:call, :eval, :Main, (:quote, (:call, (:., :Base, (:quote, #QuoteNode
                              :include_from_node1
                            )), (:$, :path)))),
                    (:line, 412, :none),
                    (:(=), :refs, (:typed_comprehension, :Any, (:generator, (:macrocall, Symbol("@spawnat"), :p, (:call, :eval, :Main, (:quote, (:call, (:., :Base, (:quote, #QuoteNode
                                      :include_from_node1
                                    )), (:$, :path))))), (:(=), :p, (:call, :filter, (:->, :x, (:block,
                                  (:line, 412, :none),
                                  (:call, :(!=), :x, 1)
                                )), (:call, :procs)))))),
                    (:line, 413, :none),
                    (:for, (:(=), :r, :refs), (:block,
                        (:line, 413, :none),
                        (:call, :wait, :r)
                      ))
                  ), (:block,
                    (:line, 415, :none),
                    (:call, :eval, :Main, (:quote, (:call, (:., :Base, (:quote, #QuoteNode
                              :include_from_node1
                            )), (:$, :path))))
                  ))
              ), :ex, (:block,
                (:line, 418, :none),
                (:if, (:||, (:call, :(===), :doneprecompile, true), (:||, (:call, :(==), (:., (:call, :JLOptions), (:quote, #QuoteNode
                            :use_compilecache
                          )), 0), (:call, :!, (:call, :precompilableerror, :ex, true)))), (:block,
                    (:line, 419, :none),
                    (:call, :rethrow)
                  )),
                (:line, 422, :none),
                (:(=), :cachefile, (:call, :compilecache, :mod)),
                (:line, 423, :none),
                (:(=), :m, (:call, :_require_from_serialized, 1, :mod, :cachefile, :last)),
                (:line, 424, :none),
                (:if, (:call, :isa, :m, :Exception), (:block,
                    (:line, 425, :none),
                    (:call, :warn, :m, (:kw, :prefix, "WARNING: ")),
                    (:line, 427, :none),
                    (:call, :error, (:string, "Module ", :mod, " declares __precompile__(true) but require failed to create a usable precompiled cache file."))
                  ))
              ))
          ), false, false, (:block,
            (:line, 431, :none),
            (:(=), :toplevel_load, :last),
            (:line, 432, :none),
            (:(=), :loading, (:call, :pop!, :package_locks, :mod)),
            (:line, 433, :none),
            (:call, :notify, :loading, (:kw, :all, true)),
            (:line, 434, :none),
            (:(=), (:ref, :_track_dependencies), :old_track_dependencies)
          )),
        (:line, 436, :none),
        :nothing
      )),
    (:line, 441, :none),
    (:(=), (:call, :include_string, (:(::), :txt, :String), (:(::), :fname, :String)), (:block,
        (:line, 441, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_load_file_string
          ), :Any, (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Cstring), :txt, (:call, :sizeof, :txt), :fname)
      )),
    (:line, 445, :none),
    (:(=), (:call, :include_string, (:(::), :txt, :AbstractString), (:kw, (:(::), :fname, :AbstractString), "string")), (:block,
        (:line, 445, :none),
        (:call, :include_string, (:call, :String, :txt), (:call, :String, :fname))
      )),
    (:line, 448, :none),
    (:function, (:call, :source_path, (:kw, (:(::), :default, (:curly, :Union, :AbstractString, :Void)), "")), (:block,
        (:line, 449, :none),
        (:(=), :t, (:call, :current_task)),
        (:line, 450, :none),
        (:while, true, (:block,
            (:line, 451, :none),
            (:(=), :s, (:., :t, (:quote, #QuoteNode
                  :storage
                ))),
            (:line, 452, :none),
            (:if, (:&&, (:call, :!, (:call, :is, :s, :nothing)), (:call, :haskey, :s, (:quote, #QuoteNode
                    :SOURCE_PATH
                  ))), (:block,
                (:line, 453, :none),
                (:return, (:ref, :s, (:quote, #QuoteNode
                      :SOURCE_PATH
                    )))
              )),
            (:line, 455, :none),
            (:if, (:call, :is, :t, (:., :t, (:quote, #QuoteNode
                    :parent
                  ))), (:block,
                (:line, 456, :none),
                (:return, :default)
              )),
            (:line, 458, :none),
            (:(=), :t, (:., :t, (:quote, #QuoteNode
                  :parent
                )))
          ))
      )),
    (:line, 462, :none),
    (:function, (:call, :source_dir), (:block,
        (:line, 463, :none),
        (:(=), :p, (:call, :source_path, :nothing)),
        (:line, 464, :none),
        (:if, (:call, :(===), :p, :nothing), :p, (:call, :dirname, :p))
      )),
    (:line, 467, :none),
    (:macro, (:call, :__FILE__), (:block,
        (:line, 467, :none),
        (:call, :source_path)
      )),
    (:line, 469, :none),
    "    include(path::AbstractString)\n\nEvaluate the contents of a source file in the current context. During including, a\ntask-local include path is set to the directory containing the file. Nested calls to\n`include` will search relative to that path. All paths refer to files on node 1 when running\nin parallel, and files will be fetched from node 1. This function is typically used to load\nsource interactively, or to combine files in packages that are broken into multiple source files.\n",
    (:line, 478, :none),
    (:(=), (:call, :include_from_node1, (:(::), :path, :AbstractString)), (:block,
        (:line, 478, :none),
        (:call, :include_from_node1, (:call, :String, :path))
      )),
    (:line, 479, :none),
    (:function, (:call, :include_from_node1, (:(::), :_path, :String)), (:block,
        (:line, 480, :none),
        (:(=), (:tuple, :path, :prev), (:call, :_include_dependency, :_path)),
        (:line, 481, :none),
        (:(=), :tls, (:call, :task_local_storage)),
        (:line, 482, :none),
        (:(=), (:ref, :tls, (:quote, #QuoteNode
              :SOURCE_PATH
            )), :path),
        (:line, 483, :none),
        (:local, :result),
        (:line, 484, :none),
        (:try, (:block,
            (:line, 485, :none),
            (:if, (:call, :(==), (:call, :myid), 1), (:block,
                (:line, 487, :none),
                (:&&, (:call, :>, (:call, :nprocs), 1), (:call, :sleep, 0.005)),
                (:line, 488, :none),
                (:(=), :result, (:call, (:., :Core, (:quote, #QuoteNode
                        :include
                      )), :path)),
                (:line, 489, :none),
                (:&&, (:call, :>, (:call, :nprocs), 1), (:call, :sleep, 0.005))
              ), (:block,
                (:line, 491, :none),
                (:(=), :result, (:call, :include_string, (:call, :remotecall_fetch, :readstring, 1, :path), :path))
              ))
          ), false, false, (:block,
            (:line, 494, :none),
            (:if, (:call, :(===), :prev, :nothing), (:block,
                (:line, 495, :none),
                (:call, :delete!, :tls, (:quote, #QuoteNode
                    :SOURCE_PATH
                  ))
              ), (:block,
                (:line, 497, :none),
                (:(=), (:ref, :tls, (:quote, #QuoteNode
                      :SOURCE_PATH
                    )), :prev)
              ))
          )),
        (:line, 500, :none),
        :result
      )),
    (:line, 503, :none),
    (:function, (:call, :evalfile, (:(::), :path, :AbstractString), (:kw, (:(::), :args, (:curly, :Vector, :String)), (:ref, :String))), (:block,
        (:line, 504, :none),
        (:return, (:call, :eval, (:call, :Module, (:quote, #QuoteNode
                :__anon__
              )), (:call, :Expr, (:quote, #QuoteNode
                :toplevel
              ), (:quote, (:const, (:(=), :ARGS, (:$, :args)))), (:quote, (:(=), (:call, :eval, :x), (:block,
                    (:line, 507, :none),
                    (:call, (:., (:., :Main, (:quote, #QuoteNode
                            :Core
                          )), (:quote, #QuoteNode
                          :eval
                        )), :__anon__, :x)
                  ))), (:quote, (:(=), (:call, :eval, :m, :x), (:block,
                    (:line, 508, :none),
                    (:call, (:., (:., :Main, (:quote, #QuoteNode
                            :Core
                          )), (:quote, #QuoteNode
                          :eval
                        )), :m, :x)
                  ))), (:quote, (:call, (:., (:., :Main, (:quote, #QuoteNode
                        :Base
                      )), (:quote, #QuoteNode
                      :include
                    )), (:$, :path))))))
      )),
    (:line, 511, :none),
    (:(=), (:call, :evalfile, (:(::), :path, :AbstractString), (:(::), :args, :Vector)), (:block,
        (:line, 511, :none),
        (:call, :evalfile, :path, (:ref, :String, (:..., :args)))
      )),
    (:line, 513, :none),
    (:function, (:call, :create_expr_cache, (:(::), :input, :String), (:(::), :output, :String), (:(::), :concrete_deps, (:curly, :Vector, :Any))), (:block,
        (:line, 514, :none),
        (:call, :rm, :output, (:kw, :force, true)),
        (:line, 515, :none),
        (:(=), :code_object, "while !eof(STDIN)\n    eval(Main, deserialize(STDIN))\nend\n"),
        (:line, 520, :none),
        (:(=), (:tuple, :io, :pobj), (:call, :open, (:call, :pipeline, (:call, :detach, (:macrocall, Symbol("@cmd"), "\$(julia_cmd()) -O0\n                                    --output-ji \$output --output-incremental=yes\n                                    --startup-file=no --history-file=no\n                                    --color=\$(have_color ? \"yes\" : \"no\")\n                                    --eval \$code_object")), (:kw, :stderr, :STDERR)), "w", :STDOUT)),
        (:line, 526, :none),
        (:try, (:block,
            (:line, 527, :none),
            (:call, :serialize, :io, (:quote, (:block,
                  (:line, 528, :none),
                  (:call, :empty!, (:., :Base, (:quote, #QuoteNode
                        :LOAD_PATH
                      ))),
                  (:line, 529, :none),
                  (:call, :append!, (:., :Base, (:quote, #QuoteNode
                        :LOAD_PATH
                      )), (:$, :LOAD_PATH)),
                  (:line, 530, :none),
                  (:call, :empty!, (:., :Base, (:quote, #QuoteNode
                        :LOAD_CACHE_PATH
                      ))),
                  (:line, 531, :none),
                  (:call, :append!, (:., :Base, (:quote, #QuoteNode
                        :LOAD_CACHE_PATH
                      )), (:$, :LOAD_CACHE_PATH)),
                  (:line, 532, :none),
                  (:call, :empty!, (:., :Base, (:quote, #QuoteNode
                        :DL_LOAD_PATH
                      ))),
                  (:line, 533, :none),
                  (:call, :append!, (:., :Base, (:quote, #QuoteNode
                        :DL_LOAD_PATH
                      )), (:$, :DL_LOAD_PATH)),
                  (:line, 534, :none),
                  (:call, :empty!, (:., :Base, (:quote, #QuoteNode
                        :_concrete_dependencies
                      ))),
                  (:line, 535, :none),
                  (:call, :append!, (:., :Base, (:quote, #QuoteNode
                        :_concrete_dependencies
                      )), (:$, :concrete_deps)),
                  (:line, 536, :none),
                  (:(=), (:ref, (:., :Base, (:quote, #QuoteNode
                          :_track_dependencies
                        ))), true)
                ))),
            (:line, 538, :none),
            (:(=), :source, (:call, :source_path, :nothing)),
            (:line, 539, :none),
            (:if, (:call, :(!==), :source, :nothing), (:block,
                (:line, 540, :none),
                (:call, :serialize, :io, (:quote, (:block,
                      (:line, 541, :none),
                      (:(=), (:ref, (:call, :task_local_storage), (:quote, #QuoteNode
                            :SOURCE_PATH
                          )), (:$, :source))
                    )))
              )),
            (:line, 544, :none),
            (:call, :serialize, :io, (:quote, (:call, (:., :Base, (:quote, #QuoteNode
                      :include
                    )), (:$, (:call, :abspath, :input))))),
            (:line, 545, :none),
            (:if, (:call, :(!==), :source, :nothing), (:block,
                (:line, 546, :none),
                (:call, :serialize, :io, (:quote, (:call, :delete!, (:call, :task_local_storage), (:quote, #QuoteNode
                        :SOURCE_PATH
                      ))))
              )),
            (:line, 548, :none),
            (:call, :close, :io),
            (:line, 549, :none),
            (:call, :wait, :pobj),
            (:line, 550, :none),
            (:return, :pobj)
          ), false, (:block,
            (:line, 552, :none),
            (:call, :kill, :pobj),
            (:line, 553, :none),
            (:call, :close, :io),
            (:line, 554, :none),
            (:call, :rethrow)
          ))
      )),
    (:line, 558, :none),
    (:(=), (:call, :compilecache, (:(::), :mod, :Symbol)), (:block,
        (:line, 558, :none),
        (:call, :compilecache, (:call, :string, :mod))
      )),
    (:line, 559, :none),
    (:function, (:call, :compilecache, (:(::), :name, :String)), (:block,
        (:line, 560, :none),
        (:||, (:call, :(==), (:call, :myid), 1), (:call, :error, "can only precompile from node 1")),
        (:line, 562, :none),
        (:(=), :path, (:call, :find_in_path, :name, :nothing)),
        (:line, 563, :none),
        (:&&, (:call, :(===), :path, :nothing), (:call, :throw, (:call, :ArgumentError, (:string, :name, " not found in path")))),
        (:line, 564, :none),
        (:(=), :path, (:call, :String, :path)),
        (:line, 566, :none),
        (:(=), :cachepath, (:ref, :LOAD_CACHE_PATH, 1)),
        (:line, 567, :none),
        (:if, (:call, :!, (:call, :isdir, :cachepath)), (:block,
            (:line, 568, :none),
            (:call, :mkpath, :cachepath)
          )),
        (:line, 570, :none),
        (:(=), (:(::), :cachefile, :String), (:call, :abspath, :cachepath, (:call, :*, :name, ".ji"))),
        (:line, 572, :none),
        (:(=), :concrete_deps, (:call, :copy, :_concrete_dependencies)),
        (:line, 573, :none),
        (:for, (:(=), :existing, (:call, :names, :Main)), (:block,
            (:line, 574, :none),
            (:if, (:call, :isdefined, :Main, :existing), (:block,
                (:line, 575, :none),
                (:(=), :mod, (:call, :getfield, :Main, :existing)),
                (:line, 576, :none),
                (:if, (:&&, (:call, :isa, :mod, :Module), (:call, :!, (:||, (:call, :(===), :mod, :Main), (:||, (:call, :(===), :mod, :Core), (:call, :(===), :mod, :Base))))), (:block,
                    (:line, 577, :none),
                    (:(=), :mod, (:(::), :mod, :Module)),
                    (:line, 578, :none),
                    (:if, (:&&, (:call, :(===), (:call, :module_parent, :mod), :Main), (:call, :(===), (:call, :module_name, :mod), :existing)), (:block,
                        (:line, 579, :none),
                        (:call, :push!, :concrete_deps, (:tuple, :existing, (:call, :module_uuid, :mod)))
                      ))
                  ))
              ))
          )),
        (:line, 585, :none),
        (:if, (:||, (:call, :isinteractive), (:ref, :DEBUG_LOADING)), (:block,
            (:line, 586, :none),
            (:if, (:call, :isfile, :cachefile), (:block,
                (:line, 587, :none),
                (:call, :info, (:string, "Recompiling stale cache file ", :cachefile, " for module ", :name, "."))
              ), (:block,
                (:line, 589, :none),
                (:call, :info, (:string, "Precompiling module ", :name, "."))
              ))
          )),
        (:line, 592, :none),
        (:if, (:call, :!, (:call, :success, (:call, :create_expr_cache, :path, :cachefile, :concrete_deps))), (:block,
            (:line, 593, :none),
            (:call, :error, (:string, "Failed to precompile ", :name, " to ", :cachefile, "."))
          )),
        (:line, 595, :none),
        (:return, :cachefile)
      )),
    (:line, 598, :none),
    (:(=), (:call, :module_uuid, (:(::), :m, :Module)), (:block,
        (:line, 598, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_module_uuid
          ), :UInt64, (:tuple, :Any), :m)
      )),
    (:line, 600, :none),
    (:(=), (:call, :isvalid_cache_header, (:(::), :f, :IOStream)), (:block,
        (:line, 600, :none),
        (:call, :(!=), 0, (:ccall, (:quote, #QuoteNode
              :jl_read_verify_header
            ), :Cint, (:tuple, (:curly, :Ptr, :Void)), (:., :f, (:quote, #QuoteNode
                :ios
              ))))
      )),
    (:line, 602, :none),
    (:function, (:call, :parse_cache_header, (:(::), :f, :IO)), (:block,
        (:line, 603, :none),
        (:(=), :modules, (:call, (:curly, :Dict, :Symbol, :UInt64))),
        (:line, 604, :none),
        (:while, true, (:block,
            (:line, 605, :none),
            (:(=), :n, (:call, :ntoh, (:call, :read, :f, :Int32))),
            (:line, 606, :none),
            (:&&, (:call, :(==), :n, 0), (:break,)),
            (:line, 607, :none),
            (:(=), :sym, (:call, :Symbol, (:call, :read, :f, :n))),
            (:line, 608, :none),
            (:(=), :uuid, (:call, :ntoh, (:call, :read, :f, :UInt64))),
            (:line, 609, :none),
            (:(=), (:ref, :modules, :sym), :uuid)
          )),
        (:line, 611, :none),
        (:(=), :totbytes, (:call, :ntoh, (:call, :read, :f, :Int64))),
        (:line, 613, :none),
        (:(=), :files, (:ref, (:curly, :Tuple, :String, :Float64))),
        (:line, 614, :none),
        (:while, true, (:block,
            (:line, 615, :none),
            (:(=), :n, (:call, :ntoh, (:call, :read, :f, :Int32))),
            (:line, 616, :none),
            (:&&, (:call, :(==), :n, 0), (:break,)),
            (:line, 617, :none),
            (:-=, :totbytes, (:call, :+, 4, :n, 8)),
            (:line, 618, :none),
            (:macrocall, Symbol("@assert"), (:call, :(>=), :n, 0), "EOF while reading cache header"),
            (:line, 619, :none),
            (:call, :push!, :files, (:tuple, (:call, :String, (:call, :read, :f, :n)), (:call, :ntoh, (:call, :read, :f, :Float64))))
          )),
        (:line, 621, :none),
        (:macrocall, Symbol("@assert"), (:call, :(==), :totbytes, 4), "header of cache file appears to be corrupt"),
        (:line, 623, :none),
        (:(=), :required_modules, (:call, (:curly, :Dict, :Symbol, :UInt64))),
        (:line, 624, :none),
        (:while, true, (:block,
            (:line, 625, :none),
            (:(=), :n, (:call, :ntoh, (:call, :read, :f, :Int32))),
            (:line, 626, :none),
            (:&&, (:call, :(==), :n, 0), (:break,)),
            (:line, 627, :none),
            (:(=), :sym, (:call, :Symbol, (:call, :read, :f, :n))),
            (:line, 628, :none),
            (:(=), :uuid, (:call, :ntoh, (:call, :read, :f, :UInt64))),
            (:line, 629, :none),
            (:(=), (:ref, :required_modules, :sym), :uuid)
          )),
        (:line, 631, :none),
        (:return, (:tuple, :modules, :files, :required_modules))
      )),
    (:line, 634, :none),
    (:function, (:call, :parse_cache_header, (:(::), :cachefile, :String)), (:block,
        (:line, 635, :none),
        (:(=), :io, (:call, :open, :cachefile, "r")),
        (:line, 636, :none),
        (:try, (:block,
            (:line, 637, :none),
            (:&&, (:call, :!, (:call, :isvalid_cache_header, :io)), (:call, :throw, (:call, :ArgumentError, (:string, "Invalid header in cache file ", :cachefile, ".")))),
            (:line, 638, :none),
            (:return, (:call, :parse_cache_header, :io))
          ), false, false, (:block,
            (:line, 640, :none),
            (:call, :close, :io)
          ))
      )),
    (:line, 644, :none),
    (:function, (:call, :cache_dependencies, (:(::), :f, :IO)), (:block,
        (:line, 645, :none),
        (:(=), (:tuple, :defs, :files, :modules), (:call, :parse_cache_header, :f)),
        (:line, 646, :none),
        (:return, (:tuple, :modules, :files))
      )),
    (:line, 649, :none),
    (:function, (:call, :cache_dependencies, (:(::), :cachefile, :String)), (:block,
        (:line, 650, :none),
        (:(=), :io, (:call, :open, :cachefile, "r")),
        (:line, 651, :none),
        (:try, (:block,
            (:line, 652, :none),
            (:&&, (:call, :!, (:call, :isvalid_cache_header, :io)), (:call, :throw, (:call, :ArgumentError, (:string, "Invalid header in cache file ", :cachefile, ".")))),
            (:line, 653, :none),
            (:return, (:call, :cache_dependencies, :io))
          ), false, false, (:block,
            (:line, 655, :none),
            (:call, :close, :io)
          ))
      )),
    (:line, 659, :none),
    (:function, (:call, :stale_cachefile, (:(::), :modpath, :String), (:(::), :cachefile, :String)), (:block,
        (:line, 660, :none),
        (:(=), :io, (:call, :open, :cachefile, "r")),
        (:line, 661, :none),
        (:try, (:block,
            (:line, 662, :none),
            (:if, (:call, :!, (:call, :isvalid_cache_header, :io)), (:block,
                (:line, 663, :none),
                (:&&, (:ref, :DEBUG_LOADING), (:call, :info, (:string, "JL_DEBUG_LOADING: Rejecting cache file ", :cachefile, " due to it containing an invalid cache header."))),
                (:line, 664, :none),
                (:return, true)
              )),
            (:line, 666, :none),
            (:(=), (:tuple, :modules, :files, :required_modules), (:call, :parse_cache_header, :io)),
            (:line, 669, :none),
            (:for, (:(=), :mod, (:call, :keys, :required_modules)), (:block,
                (:line, 670, :none),
                (:if, (:||, (:call, :(==), :mod, (:quote, #QuoteNode
                        :Main
                      )), (:||, (:call, :(==), :mod, (:quote, #QuoteNode
                          :Core
                        )), (:call, :(==), :mod, (:quote, #QuoteNode
                          :Base
                        )))), (:block,
                    (:line, 671, :none),
                    (:continue,)
                  ), (:block,
                    (:line, 673, :none),
                    (:if, (:call, :isbindingresolved, :Main, :mod), (:block,
                        (:line, 674, :none),
                        (:continue,)
                      ))
                  )),
                (:line, 676, :none),
                (:(=), :name, (:call, :string, :mod)),
                (:line, 677, :none),
                (:(=), :path, (:call, :find_in_node_path, :name, :nothing, 1)),
                (:line, 678, :none),
                (:if, (:call, :(===), :path, :nothing), (:block,
                    (:line, 679, :none),
                    (:return, true)
                  ))
              )),
            (:line, 686, :none),
            (:for, (:(=), (:tuple, :mod, :uuid_req), :_concrete_dependencies), (:block,
                (:line, 687, :none),
                (:(=), :uuid, (:call, :get, :modules, :mod, (:call, :UInt64, 0))),
                (:line, 688, :none),
                (:if, (:call, :(!==), :uuid, (:call, :UInt64, 0)), (:block,
                    (:line, 689, :none),
                    (:if, (:call, :(===), :uuid, :uuid_req), (:block,
                        (:line, 690, :none),
                        (:return, false)
                      )),
                    (:line, 692, :none),
                    (:&&, (:ref, :DEBUG_LOADING), (:call, :info, (:string, "JL_DEBUG_LOADING: Rejecting cache file ", :cachefile, " because it provides the wrong uuid (got ", :uuid, ") for ", :mod, " (want ", :uuid_req, ")."))),
                    (:line, 693, :none),
                    (:return, true)
                  ))
              )),
            (:line, 698, :none),
            (:if, (:call, :!, (:call, :samefile, (:ref, (:ref, :files, 1), 1), :modpath)), (:block,
                (:line, 699, :none),
                (:&&, (:ref, :DEBUG_LOADING), (:call, :info, (:string, "JL_DEBUG_LOADING: Rejecting cache file ", :cachefile, " because it is for file ", (:ref, (:ref, :files, 1), 1), ") not file ", :modpath, "."))),
                (:line, 700, :none),
                (:return, true)
              )),
            (:line, 702, :none),
            (:for, (:(=), (:tuple, :f, :ftime_req), :files), (:block,
                (:line, 704, :none),
                (:(=), :ftime, (:call, :mtime, :f)),
                (:line, 705, :none),
                (:if, (:&&, (:call, :(!=), :ftime, :ftime_req), (:call, :(!=), :ftime, (:call, :floor, :ftime_req))), (:block,
                    (:line, 706, :none),
                    (:&&, (:ref, :DEBUG_LOADING), (:call, :info, (:string, "JL_DEBUG_LOADING: Rejecting stale cache file ", :cachefile, " (mtime ", :ftime_req, ") because file ", :f, " (mtime ", :ftime, ") has changed."))),
                    (:line, 707, :none),
                    (:return, true)
                  ))
              )),
            (:line, 710, :none),
            (:return, false)
          ), false, false, (:block,
            (:line, 712, :none),
            (:call, :close, :io)
          ))
      ))
  ))