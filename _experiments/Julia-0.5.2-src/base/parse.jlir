(:quote, (:block,
    (:line, 5, :none),
    (:function, (:call, (:curly, :parse, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :c, :Char), (:kw, (:(::), :base, :Integer), 36)), (:block,
        (:line, 6, :none),
        (:(=), (:(::), :a, :Int), (:if, (:call, :(<=), :base, 36), 10, 36)),
        (:line, 7, :none),
        (:||, (:comparison, 2, :(<=), :base, :(<=), 62), (:call, :throw, (:call, :ArgumentError, (:string, "invalid base: base must be 2 ≤ base ≤ 62, got ", :base)))),
        (:line, 8, :none),
        (:(=), :d, (:if, (:comparison, '0', :(<=), :c, :(<=), '9'), (:call, :-, :c, '0'), (:if, (:comparison, 'A', :(<=), :c, :(<=), 'Z'), (:call, :+, (:call, :-, :c, 'A'), 10), (:if, (:comparison, 'a', :(<=), :c, :(<=), 'z'), (:call, :+, (:call, :-, :c, 'a'), :a), (:call, :throw, (:call, :ArgumentError, (:string, "invalid digit: ", (:call, :repr, :c)))))))),
        (:line, 11, :none),
        (:||, (:call, :<, :d, :base), (:call, :throw, (:call, :ArgumentError, (:string, "invalid base ", :base, " digit ", (:call, :repr, :c))))),
        (:line, 12, :none),
        (:call, :convert, :T, :d)
      )),
    (:line, 15, :none),
    (:function, (:call, :parseint_next, (:(::), :s, :AbstractString), (:(::), :startpos, :Int), (:(::), :endpos, :Int)), (:block,
        (:line, 16, :none),
        (:||, (:comparison, 0, :<, :startpos, :(<=), :endpos), (:return, (:tuple, (:call, :Char, 0), 0, 0))),
        (:line, 17, :none),
        (:(=), :j, :startpos),
        (:line, 18, :none),
        (:(=), (:tuple, :c, :startpos), (:call, :next, :s, :startpos)),
        (:line, 19, :none),
        (:tuple, :c, :startpos, :j)
      )),
    (:line, 22, :none),
    (:function, (:call, :parseint_preamble, (:(::), :signed, :Bool), (:(::), :base, :Int), (:(::), :s, :AbstractString), (:(::), :startpos, :Int), (:(::), :endpos, :Int)), (:block,
        (:line, 23, :none),
        (:(=), (:tuple, :c, :i, :j), (:call, :parseint_next, :s, :startpos, :endpos)),
        (:line, 25, :none),
        (:while, (:call, :isspace, :c), (:block,
            (:line, 26, :none),
            (:(=), (:tuple, :c, :i, :j), (:call, :parseint_next, :s, :i, :endpos))
          )),
        (:line, 28, :none),
        (:&&, (:call, :(==), :j, 0), (:return, (:tuple, 0, 0, 0))),
        (:line, 30, :none),
        (:(=), :sgn, 1),
        (:line, 31, :none),
        (:if, :signed, (:block,
            (:line, 32, :none),
            (:if, (:||, (:call, :(==), :c, '-'), (:call, :(==), :c, '+')), (:block,
                (:line, 33, :none),
                (:&&, (:call, :(==), :c, '-'), (:(=), :sgn, -1)),
                (:line, 34, :none),
                (:(=), (:tuple, :c, :i, :j), (:call, :parseint_next, :s, :i, :endpos))
              ))
          )),
        (:line, 38, :none),
        (:while, (:call, :isspace, :c), (:block,
            (:line, 39, :none),
            (:(=), (:tuple, :c, :i, :j), (:call, :parseint_next, :s, :i, :endpos))
          )),
        (:line, 41, :none),
        (:&&, (:call, :(==), :j, 0), (:return, (:tuple, 0, 0, 0))),
        (:line, 43, :none),
        (:if, (:call, :(==), :base, 0), (:block,
            (:line, 44, :none),
            (:if, (:&&, (:call, :(==), :c, '0'), (:call, :!, (:call, :done, :s, :i))), (:block,
                (:line, 45, :none),
                (:(=), (:tuple, :c, :i), (:call, :next, :s, :i)),
                (:line, 46, :none),
                (:(=), :base, (:if, (:call, :(==), :c, 'b'), 2, (:if, (:call, :(==), :c, 'o'), 8, (:if, (:call, :(==), :c, 'x'), 16, 10)))),
                (:line, 47, :none),
                (:if, (:call, :(!=), :base, 10), (:block,
                    (:line, 48, :none),
                    (:(=), (:tuple, :c, :i, :j), (:call, :parseint_next, :s, :i, :endpos))
                  ))
              ), (:block,
                (:line, 51, :none),
                (:(=), :base, 10)
              ))
          )),
        (:line, 54, :none),
        (:return, (:tuple, :sgn, :base, :j))
      )),
    (:line, 57, :none),
    (:(=), (:call, (:curly, :safe_add, (:<:, :T, :Integer)), (:(::), :n1, :T), (:(::), :n2, :T)), (:block,
        (:line, 57, :none),
        (:if, (:if, (:call, :>, :n2, 0), (:call, :>, :n1, (:call, :-, (:call, :typemax, :T), :n2)), (:call, :<, :n1, (:call, :-, (:call, :typemin, :T), :n2))), (:call, (:curly, :Nullable, :T)), (:call, (:curly, :Nullable, :T), (:call, :+, :n1, :n2)))
      )),
    (:line, 58, :none),
    (:(=), (:call, (:curly, :safe_mul, (:<:, :T, :Integer)), (:(::), :n1, :T), (:(::), :n2, :T)), (:block,
        (:line, 58, :none),
        (:if, (:if, (:call, :>, :n2, 0), (:||, (:call, :>, :n1, (:call, :div, (:call, :typemax, :T), :n2)), (:call, :<, :n1, (:call, :div, (:call, :typemin, :T), :n2))), (:if, (:call, :<, :n2, -1), (:||, (:call, :>, :n1, (:call, :div, (:call, :typemin, :T), :n2)), (:call, :<, :n1, (:call, :div, (:call, :typemax, :T), :n2))), (:&&, (:call, :(==), :n2, -1), (:call, :(==), :n1, (:call, :typemin, :T))))), (:call, (:curly, :Nullable, :T)), (:call, (:curly, :Nullable, :T), (:call, :*, :n1, :n2)))
      )),
    (:line, 62, :none),
    (:function, (:call, (:curly, :tryparse_internal, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString), (:(::), :startpos, :Int), (:(::), :endpos, :Int), (:(::), :base_, :Integer), (:(::), :raise, :Bool)), (:block,
        (:line, 63, :none),
        (:(=), :_n, (:call, (:curly, :Nullable, :T))),
        (:line, 64, :none),
        (:(=), (:tuple, :sgn, :base, :i), (:call, :parseint_preamble, (:<:, :T, :Signed), (:call, :Int, :base_), :s, :startpos, :endpos)),
        (:line, 65, :none),
        (:if, (:call, :!, (:comparison, 2, :(<=), :base, :(<=), 62)), (:block,
            (:line, 66, :none),
            (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "invalid base: base must be 2 ≤ base ≤ 62, got ", :base)))),
            (:line, 67, :none),
            (:return, :_n)
          )),
        (:line, 69, :none),
        (:if, (:call, :(==), :i, 0), (:block,
            (:line, 70, :none),
            (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "premature end of integer: ", (:call, :repr, (:call, :SubString, :s, :startpos, :endpos)))))),
            (:line, 71, :none),
            (:return, :_n)
          )),
        (:line, 73, :none),
        (:(=), (:tuple, :c, :i), (:call, :parseint_next, :s, :i, :endpos)),
        (:line, 74, :none),
        (:if, (:call, :(==), :i, 0), (:block,
            (:line, 75, :none),
            (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "premature end of integer: ", (:call, :repr, (:call, :SubString, :s, :startpos, :endpos)))))),
            (:line, 76, :none),
            (:return, :_n)
          )),
        (:line, 79, :none),
        (:(=), :base, (:call, :convert, :T, :base)),
        (:line, 80, :none),
        (:(=), (:(::), :m, :T), (:call, :div, (:call, :+, (:call, :-, (:call, :typemax, :T), :base), 1), :base)),
        (:line, 81, :none),
        (:(=), (:(::), :n, :T), 0),
        (:line, 82, :none),
        (:(=), (:(::), :a, :Int), (:if, (:call, :(<=), :base, 36), 10, 36)),
        (:line, 83, :none),
        (:while, (:call, :(<=), :n, :m), (:block,
            (:line, 84, :none),
            (:(=), (:(::), :d, :T), (:if, (:comparison, '0', :(<=), :c, :(<=), '9'), (:call, :-, :c, '0'), (:if, (:comparison, 'A', :(<=), :c, :(<=), 'Z'), (:call, :+, (:call, :-, :c, 'A'), 10), (:if, (:comparison, 'a', :(<=), :c, :(<=), 'z'), (:call, :+, (:call, :-, :c, 'a'), :a), :base)))),
            (:line, 87, :none),
            (:if, (:call, :(>=), :d, :base), (:block,
                (:line, 88, :none),
                (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "invalid base ", :base, " digit ", (:call, :repr, :c), " in ", (:call, :repr, (:call, :SubString, :s, :startpos, :endpos)))))),
                (:line, 89, :none),
                (:return, :_n)
              )),
            (:line, 91, :none),
            (:*=, :n, :base),
            (:line, 92, :none),
            (:+=, :n, :d),
            (:line, 93, :none),
            (:if, (:call, :>, :i, :endpos), (:block,
                (:line, 94, :none),
                (:*=, :n, :sgn),
                (:line, 95, :none),
                (:return, (:call, (:curly, :Nullable, :T), :n))
              )),
            (:line, 97, :none),
            (:(=), (:tuple, :c, :i), (:call, :next, :s, :i)),
            (:line, 98, :none),
            (:&&, (:call, :isspace, :c), (:break,))
          )),
        (:line, 100, :none),
        (:&&, (:<:, :T, :Signed), (:*=, :n, :sgn)),
        (:line, 101, :none),
        (:while, (:call, :!, (:call, :isspace, :c)), (:block,
            (:line, 102, :none),
            (:(=), (:(::), :d, :T), (:if, (:comparison, '0', :(<=), :c, :(<=), '9'), (:call, :-, :c, '0'), (:if, (:comparison, 'A', :(<=), :c, :(<=), 'Z'), (:call, :+, (:call, :-, :c, 'A'), 10), (:if, (:comparison, 'a', :(<=), :c, :(<=), 'z'), (:call, :+, (:call, :-, :c, 'a'), :a), :base)))),
            (:line, 105, :none),
            (:if, (:call, :(>=), :d, :base), (:block,
                (:line, 106, :none),
                (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "invalid base ", :base, " digit ", (:call, :repr, :c), " in ", (:call, :repr, (:call, :SubString, :s, :startpos, :endpos)))))),
                (:line, 107, :none),
                (:return, :_n)
              )),
            (:line, 109, :none),
            (:&&, (:<:, :T, :Signed), (:*=, :d, :sgn)),
            (:line, 111, :none),
            (:(=), :safe_n, (:call, :safe_mul, :n, :base)),
            (:line, 112, :none),
            (:||, (:call, :isnull, :safe_n), (:(=), :safe_n, (:call, :safe_add, (:call, :get, :safe_n), :d))),
            (:line, 113, :none),
            (:if, (:call, :isnull, :safe_n), (:block,
                (:line, 114, :none),
                (:&&, :raise, (:call, :throw, (:call, :OverflowError))),
                (:line, 115, :none),
                (:return, :_n)
              )),
            (:line, 117, :none),
            (:(=), :n, (:call, :get, :safe_n)),
            (:line, 118, :none),
            (:&&, (:call, :>, :i, :endpos), (:return, (:call, (:curly, :Nullable, :T), :n))),
            (:line, 119, :none),
            (:(=), (:tuple, :c, :i), (:call, :next, :s, :i))
          )),
        (:line, 121, :none),
        (:while, (:call, :(<=), :i, :endpos), (:block,
            (:line, 122, :none),
            (:(=), (:tuple, :c, :i), (:call, :next, :s, :i)),
            (:line, 123, :none),
            (:if, (:call, :!, (:call, :isspace, :c)), (:block,
                (:line, 124, :none),
                (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:string, "extra characters after whitespace in ", (:call, :repr, (:call, :SubString, :s, :startpos, :endpos)))))),
                (:line, 125, :none),
                (:return, :_n)
              ))
          )),
        (:line, 128, :none),
        (:return, (:call, (:curly, :Nullable, :T), :n))
      )),
    (:line, 131, :none),
    (:function, (:call, :tryparse_internal, (:(::), (:curly, :Type, :Bool)), (:(::), :sbuff, (:curly, :Union, :String, :SubString)), (:(::), :startpos, :Int), (:(::), :endpos, :Int), (:(::), :base, :Integer), (:(::), :raise, :Bool)), (:block,
        (:line, 133, :none),
        (:(=), :len, (:call, :+, (:call, :-, :endpos, :startpos), 1)),
        (:line, 134, :none),
        (:(=), :p, (:call, :-, (:call, :+, (:call, :pointer, :sbuff), :startpos), 1)),
        (:line, 135, :none),
        (:&&, (:call, :(==), :len, 4), (:&&, (:call, :(==), 0, (:ccall, (:quote, #QuoteNode
                  :memcmp
                ), :Int32, (:tuple, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :UInt8), :UInt), :p, "true", 4)), (:return, (:call, :Nullable, true)))),
        (:line, 137, :none),
        (:&&, (:call, :(==), :len, 5), (:&&, (:call, :(==), 0, (:ccall, (:quote, #QuoteNode
                  :memcmp
                ), :Int32, (:tuple, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :UInt8), :UInt), :p, "false", 5)), (:return, (:call, :Nullable, false)))),
        (:line, 139, :none),
        (:&&, :raise, (:call, :throw, (:call, :ArgumentError, (:call, :*, "invalid Bool representation: ", (:call, :repr, (:call, :SubString, :sbuff, :startpos, :endpos)))))),
        (:line, 141, :none),
        (:call, (:curly, :Nullable, :Bool))
      )),
    (:line, 144, :none),
    (:(=), (:call, :check_valid_base, :base), (:block,
        (:line, 144, :none),
        (:if, (:comparison, 2, :(<=), :base, :(<=), 62), :base, (:call, :throw, (:call, :ArgumentError, (:string, "invalid base: base must be 2 ≤ base ≤ 62, got ", :base))))
      )),
    (:line, 146, :none),
    (:(=), (:call, (:curly, :tryparse, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString), (:(::), :base, :Integer)), (:block,
        (:line, 146, :none),
        (:call, :tryparse_internal, :T, :s, (:call, :start, :s), (:call, :endof, :s), (:call, :check_valid_base, :base), false)
      )),
    (:line, 148, :none),
    (:(=), (:call, (:curly, :tryparse, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString)), (:block,
        (:line, 148, :none),
        (:call, :tryparse_internal, :T, :s, (:call, :start, :s), (:call, :endof, :s), 0, false)
      )),
    (:line, 150, :none),
    (:(=), (:call, (:curly, :parse, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString), (:(::), :base, :Integer)), (:block,
        (:line, 150, :none),
        (:call, :get, (:call, :tryparse_internal, :T, :s, (:call, :start, :s), (:call, :endof, :s), (:call, :check_valid_base, :base), true))
      )),
    (:line, 152, :none),
    (:(=), (:call, (:curly, :parse, (:<:, :T, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString)), (:block,
        (:line, 152, :none),
        (:call, :get, (:call, :tryparse_internal, :T, :s, (:call, :start, :s), (:call, :endof, :s), 0, true))
      )),
    (:line, 157, :none),
    (:(=), (:call, :tryparse, (:(::), (:curly, :Type, :Float64)), (:(::), :s, :String)), (:block,
        (:line, 157, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_try_substrtod
          ), (:curly, :Nullable, :Float64), (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Csize_t), :s, 0, (:call, :sizeof, :s))
      )),
    (:line, 158, :none),
    (:(=), (:call, :tryparse, (:(::), (:curly, :Type, :Float64)), (:(::), :s, (:curly, :SubString, :String))), (:block,
        (:line, 158, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_try_substrtod
          ), (:curly, :Nullable, :Float64), (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Csize_t), (:., :s, (:quote, #QuoteNode
              :string
            )), (:., :s, (:quote, #QuoteNode
              :offset
            )), (:., :s, (:quote, #QuoteNode
              :endof
            )))
      )),
    (:line, 160, :none),
    (:(=), (:call, :tryparse, (:(::), (:curly, :Type, :Float32)), (:(::), :s, :String)), (:block,
        (:line, 160, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_try_substrtof
          ), (:curly, :Nullable, :Float32), (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Csize_t), :s, 0, (:call, :sizeof, :s))
      )),
    (:line, 161, :none),
    (:(=), (:call, :tryparse, (:(::), (:curly, :Type, :Float32)), (:(::), :s, (:curly, :SubString, :String))), (:block,
        (:line, 161, :none),
        (:ccall, (:quote, #QuoteNode
            :jl_try_substrtof
          ), (:curly, :Nullable, :Float32), (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Csize_t), (:., :s, (:quote, #QuoteNode
              :string
            )), (:., :s, (:quote, #QuoteNode
              :offset
            )), (:., :s, (:quote, #QuoteNode
              :endof
            )))
      )),
    (:line, 163, :none),
    (:(=), (:call, (:curly, :tryparse, (:<:, :T, (:curly, :Union, :Float32, :Float64))), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString)), (:block,
        (:line, 163, :none),
        (:call, :tryparse, :T, (:call, :String, :s))
      )),
    (:line, 165, :none),
    (:function, (:call, (:curly, :parse, (:<:, :T, :AbstractFloat)), (:(::), (:curly, :Type, :T)), (:(::), :s, :AbstractString)), (:block,
        (:line, 166, :none),
        (:(=), :nf, (:call, :tryparse, :T, :s)),
        (:line, 167, :none),
        (:if, (:call, :isnull, :nf), (:call, :throw, (:call, :ArgumentError, (:string, "invalid number format ", (:call, :repr, :s), " for ", :T))), (:call, :get, :nf))
      )),
    (:line, 170, :none),
    (:(=), (:call, :float, (:(::), :x, :AbstractString)), (:block,
        (:line, 170, :none),
        (:call, :parse, :Float64, :x)
      )),
    (:line, 172, :none),
    (:(=), (:call, (:curly, :float, (:<:, :S, :AbstractString)), (:(::), :a, (:curly, :AbstractArray, :S))), (:block,
        (:line, 172, :none),
        (:call, :map!, :float, (:call, :similar, :a, (:call, :typeof, (:call, :float, 0))), :a)
      )),
    (:line, 176, :none),
    (:function, (:call, :parse, (:parameters, (:kw, (:(::), :greedy, :Bool), true), (:kw, (:(::), :raise, :Bool), true)), (:(::), :str, :AbstractString), (:(::), :pos, :Int)), (:block,
        (:line, 179, :none),
        (:(=), :bstr, (:call, :String, :str)),
        (:line, 180, :none),
        (:(=), (:tuple, :ex, :pos), (:ccall, (:quote, #QuoteNode
              :jl_parse_string
            ), :Any, (:tuple, (:curly, :Ptr, :UInt8), :Csize_t, :Int32, :Int32), :bstr, (:call, :sizeof, :bstr), (:call, :-, :pos, 1), (:if, :greedy, 1, 0))),
        (:line, 183, :none),
        (:if, (:&&, :raise, (:&&, (:call, :isa, :ex, :Expr), (:call, :is, (:., :ex, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :error
                )))), (:block,
            (:line, 184, :none),
            (:call, :throw, (:call, :ParseError, (:ref, (:., :ex, (:quote, #QuoteNode
                      :args
                    )), 1)))
          )),
        (:line, 186, :none),
        (:if, (:call, :(===), :ex, (:tuple,)), (:block,
            (:line, 187, :none),
            (:&&, :raise, (:call, :throw, (:call, :ParseError, "end of input"))),
            (:line, 188, :none),
            (:(=), :ex, (:call, :Expr, (:quote, #QuoteNode
                  :error
                ), "end of input"))
          )),
        (:line, 190, :none),
        (:return, (:tuple, :ex, (:call, :+, :pos, 1)))
      )),
    (:line, 193, :none),
    (:function, (:call, :parse, (:parameters, (:kw, (:(::), :raise, :Bool), true)), (:(::), :str, :AbstractString)), (:block,
        (:line, 194, :none),
        (:(=), (:tuple, :ex, :pos), (:call, :parse, :str, 1, (:kw, :greedy, true), (:kw, :raise, :raise))),
        (:line, 195, :none),
        (:if, (:&&, (:call, :isa, :ex, :Expr), (:call, :(===), (:., :ex, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :error
              ))), (:block,
            (:line, 196, :none),
            (:return, :ex)
          )),
        (:line, 198, :none),
        (:if, (:call, :!, (:call, :done, :str, :pos)), (:block,
            (:line, 199, :none),
            (:&&, :raise, (:call, :throw, (:call, :ParseError, "extra token after end of expression"))),
            (:line, 200, :none),
            (:return, (:call, :Expr, (:quote, #QuoteNode
                  :error
                ), "extra token after end of expression"))
          )),
        (:line, 202, :none),
        (:return, :ex)
      ))
  ))