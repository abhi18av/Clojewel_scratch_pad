(:quote, (:block,
    (:line, 1, :none),
    (:module, true, :core, (:block,
        (:line, 1, :none),
        (:line, 3, :none),
        (:import, :types),
        (:line, 4, :none),
        (:import, :reader),
        (:line, 5, :none),
        (:using, :printer),
        (:line, 6, :none),
        (:import, :readline_mod),
        (:line, 8, :none),
        (:export, :ns),
        (:line, 10, :none),
        (:function, (:call, :string_Q, :obj), (:block,
            (:line, 11, :none),
            (:&&, (:call, :isa, :obj, :AbstractString), (:||, (:call, :(==), (:call, :length, :obj), 0), (:call, :(!=), (:ref, :obj, 1), 'ʞ')))
          )),
        (:line, 14, :none),
        (:function, (:call, :keyword_Q, :obj), (:block,
            (:line, 15, :none),
            (:&&, (:call, :isa, :obj, :AbstractString), (:&&, (:call, :>, (:call, :length, :obj), 0), (:call, :(==), (:ref, :obj, 1), 'ʞ')))
          )),
        (:line, 18, :none),
        (:function, (:call, :concat, (:..., :args)), (:block,
            (:line, 19, :none),
            (:(=), :res, (:vect,)),
            (:line, 20, :none),
            (:for, (:(=), :a, :args), (:block,
                (:line, 21, :none),
                (:(=), :res, (:vcat, :res, (:ref, :Any, (:..., :a))))
              )),
            (:line, 23, :none),
            :res
          )),
        (:line, 26, :none),
        (:function, (:call, :do_apply, :f, (:..., :all_args)), (:block,
            (:line, 27, :none),
            (:(=), :fn, (:if, (:call, :isa, :f, (:., :types, (:quote, #QuoteNode
                      :MalFunc
                    ))), (:., :f, (:quote, #QuoteNode
                    :fn
                  )), :f)),
            (:line, 28, :none),
            (:(=), :args, (:call, :concat, (:ref, :all_args, (:(:), 1, (:call, :-, :end, 1))), (:ref, :all_args, :end))),
            (:line, 29, :none),
            (:call, :fn, (:..., :args))
          )),
        (:line, 32, :none),
        (:function, (:call, :do_map, :a, :b), (:block,
            (:line, 34, :none),
            (:if, (:call, :isa, :a, (:., :types, (:quote, #QuoteNode
                    :MalFunc
                  ))), (:block,
                (:line, 35, :none),
                (:call, :collect, (:call, :map, (:., :a, (:quote, #QuoteNode
                        :fn
                      )), :b))
              ), (:block,
                (:line, 37, :none),
                (:call, :collect, (:call, :map, :a, :b))
              ))
          )),
        (:line, 41, :none),
        (:function, (:call, :conj, :seq, (:..., :args)), (:block,
            (:line, 42, :none),
            (:if, (:call, :isa, :seq, :Array), (:block,
                (:line, 43, :none),
                (:call, :concat, (:call, :reverse, :args), :seq)
              ), (:block,
                (:line, 45, :none),
                (:call, :tuple, (:..., (:call, :concat, :seq, :args)))
              ))
          )),
        (:line, 49, :none),
        (:function, (:call, :do_seq, :obj), (:block,
            (:line, 50, :none),
            (:if, (:call, :isa, :obj, :Array), (:block,
                (:line, 51, :none),
                (:if, (:call, :>, (:call, :length, :obj), 0), :obj, :nothing)
              ), (:block,
                (:line, 52, :none),
                (:if, (:call, :isa, :obj, :Tuple), (:block,
                    (:line, 53, :none),
                    (:if, (:call, :>, (:call, :length, :obj), 0), (:ref, :Any, (:..., :obj)), :nothing)
                  ), (:block,
                    (:line, 54, :none),
                    (:if, (:call, :isa, :obj, :AbstractString), (:block,
                        (:line, 55, :none),
                        (:if, (:call, :>, (:call, :length, :obj), 0), (:comprehension, (:generator, (:call, :string, :c), (:(=), :c, :obj))), :nothing)
                      ), (:block,
                        (:line, 56, :none),
                        (:if, (:call, :(==), :obj, :nothing), (:block,
                            (:line, 57, :none),
                            :nothing
                          ), (:block,
                            (:line, 59, :none),
                            (:call, :error, "seq: called on non-sequence")
                          ))
                      ))
                  ))
              ))
          )),
        (:line, 64, :none),
        (:function, (:call, :with_meta, :obj, :meta), (:block,
            (:line, 65, :none),
            (:(=), :new_obj, (:call, (:., :types, (:quote, #QuoteNode
                    :copy
                  )), :obj)),
            (:line, 66, :none),
            (:(=), (:., :new_obj, (:quote, #QuoteNode
                  :meta
                )), :meta),
            (:line, 67, :none),
            :new_obj
          )),
        (:line, 70, :none),
        (:(=), :ns, (:call, (:curly, :Dict, :Any, :Any), (:(=>), (:call, :symbol, "="), (:->, (:tuple, :a, :b), (:block,
                  (:line, 71, :none),
                  (:call, (:., :types, (:quote, #QuoteNode
                        :equal_Q
                      )), :a, :b)
                ))), (:(=>), (:quote, #QuoteNode
                :throw
              ), (:->, :a, (:block,
                  (:line, 72, :none),
                  (:call, :throw, (:call, (:., :types, (:quote, #QuoteNode
                          :MalException
                        )), :a))
                ))), (:(=>), (:call, :symbol, "nil?"), (:->, :a, (:block,
                  (:line, 74, :none),
                  (:call, :(===), :a, :nothing)
                ))), (:(=>), (:call, :symbol, "true?"), (:->, :a, (:block,
                  (:line, 75, :none),
                  (:call, :(===), :a, true)
                ))), (:(=>), (:call, :symbol, "false?"), (:->, :a, (:block,
                  (:line, 76, :none),
                  (:call, :(===), :a, false)
                ))), (:(=>), (:call, :symbol, "string?"), :string_Q), (:(=>), (:call, :symbol, "symbol"), (:->, :a, (:block,
                  (:line, 78, :none),
                  (:call, :symbol, :a)
                ))), (:(=>), (:call, :symbol, "symbol?"), (:->, :a, (:block,
                  (:line, 79, :none),
                  (:call, :(===), (:call, :typeof, :a), :Symbol)
                ))), (:(=>), (:call, :symbol, "keyword"), (:->, :a, (:block,
                  (:line, 80, :none),
                  (:if, (:call, :(==), (:ref, :a, 1), 'ʞ'), :a, (:string, "ʞ", :a))
                ))), (:(=>), (:call, :symbol, "keyword?"), :keyword_Q), (:(=>), (:call, :symbol, "pr-str"), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 83, :none),
                  (:call, :join, (:call, :map, (:->, :e, (:block,
                          (:line, 83, :none),
                          (:call, :pr_str, :e, true)
                        )), :a), " ")
                ))), (:(=>), (:quote, #QuoteNode
                :str
              ), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 84, :none),
                  (:call, :join, (:call, :map, (:->, :e, (:block,
                          (:line, 84, :none),
                          (:call, :pr_str, :e, false)
                        )), :a), "")
                ))), (:(=>), (:quote, #QuoteNode
                :prn
              ), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 85, :none),
                  (:call, :println, (:call, :join, (:call, :map, (:->, :e, (:block,
                            (:line, 85, :none),
                            (:call, :pr_str, :e, true)
                          )), :a), " "))
                ))), (:(=>), (:quote, #QuoteNode
                :println
              ), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 86, :none),
                  (:call, :println, (:call, :join, (:call, :map, (:->, :e, (:block,
                            (:line, 86, :none),
                            (:call, :pr_str, :e, false)
                          )), :a), " "))
                ))), (:(=>), (:call, :symbol, "read-string"), (:->, :a, (:block,
                  (:line, 87, :none),
                  (:call, (:., :reader, (:quote, #QuoteNode
                        :read_str
                      )), :a)
                ))), (:(=>), (:quote, #QuoteNode
                :readline
              ), (:., :readline_mod, (:quote, #QuoteNode
                  :do_readline
                ))), (:(=>), (:quote, #QuoteNode
                :slurp
              ), (:->, :a, (:block,
                  (:line, 89, :none),
                  (:call, :readall, (:call, :open, :a))
                ))), (:(=>), (:quote, #QuoteNode
                :<
              ), :<), (:(=>), (:quote, #QuoteNode
                :(<=)
              ), :(<=)), (:(=>), (:quote, #QuoteNode
                :>
              ), :>), (:(=>), (:quote, #QuoteNode
                :(>=)
              ), :(>=)), (:(=>), (:quote, #QuoteNode
                :+
              ), :+), (:(=>), (:quote, #QuoteNode
                :-
              ), :-), (:(=>), (:call, :symbol, "*"), :*), (:(=>), (:quote, #QuoteNode
                :/
              ), :div), (:(=>), (:call, :symbol, "time-ms"), (:->, (:tuple,), (:block,
                  (:line, 99, :none),
                  (:call, :round, :Int, (:call, :*, (:call, :time), 1000))
                ))), (:(=>), (:quote, #QuoteNode
                :list
              ), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 101, :none),
                  (:ref, :Any, (:..., :a))
                ))), (:(=>), (:call, :symbol, "list?"), (:->, :a, (:block,
                  (:line, 102, :none),
                  (:call, :isa, :a, :Array)
                ))), (:(=>), (:quote, #QuoteNode
                :vector
              ), (:->, (:tuple, (:..., :a)), (:block,
                  (:line, 103, :none),
                  (:call, :tuple, (:..., :a))
                ))), (:(=>), (:call, :symbol, "vector?"), (:->, :a, (:block,
                  (:line, 104, :none),
                  (:call, :isa, :a, :Tuple)
                ))), (:(=>), (:call, :symbol, "hash-map"), (:., :types, (:quote, #QuoteNode
                  :hash_map
                ))), (:(=>), (:call, :symbol, "map?"), (:->, :a, (:block,
                  (:line, 106, :none),
                  (:call, :isa, :a, :Dict)
                ))), (:(=>), (:quote, #QuoteNode
                :assoc
              ), (:->, (:tuple, :a, (:..., :b)), (:block,
                  (:line, 107, :none),
                  (:call, :merge, :a, (:call, (:., :types, (:quote, #QuoteNode
                          :hash_map
                        )), (:..., :b)))
                ))), (:(=>), (:quote, #QuoteNode
                :dissoc
              ), (:->, (:tuple, :a, (:..., :b)), (:block,
                  (:line, 108, :none),
                  (:call, :foldl, (:->, (:tuple, :x, :y), (:block,
                        (:line, 108, :none),
                        (:call, :delete!, :x, :y)
                      )), (:call, :copy, :a), :b)
                ))), (:(=>), (:quote, #QuoteNode
                :get
              ), (:->, (:tuple, :a, :b), (:block,
                  (:line, 109, :none),
                  (:if, (:call, :(===), :a, :nothing), :nothing, (:call, :get, :a, :b, :nothing))
                ))), (:(=>), (:call, :symbol, "contains?"), :haskey), (:(=>), (:quote, #QuoteNode
                :keys
              ), (:->, :a, (:block,
                  (:line, 111, :none),
                  (:vect, (:..., (:call, :keys, :a)))
                ))), (:(=>), (:quote, #QuoteNode
                :vals
              ), (:->, :a, (:block,
                  (:line, 112, :none),
                  (:vect, (:..., (:call, :values, :a)))
                ))), (:(=>), (:call, :symbol, "sequential?"), (:., :types, (:quote, #QuoteNode
                  :sequential_Q
                ))), (:(=>), (:quote, #QuoteNode
                :cons
              ), (:->, (:tuple, :a, :b), (:block,
                  (:line, 115, :none),
                  (:vcat, (:ref, :Any, :a), (:ref, :Any, (:..., :b)))
                ))), (:(=>), (:quote, #QuoteNode
                :concat
              ), :concat), (:(=>), (:quote, #QuoteNode
                :nth
              ), (:->, (:tuple, :a, :b), (:block,
                  (:line, 117, :none),
                  (:if, (:call, :>, (:call, :+, :b, 1), (:call, :length, :a)), (:call, :error, "nth: index out of range"), (:ref, :a, (:call, :+, :b, 1)))
                ))), (:(=>), (:quote, #QuoteNode
                :first
              ), (:->, :a, (:block,
                  (:line, 118, :none),
                  (:if, (:||, (:call, :(===), :a, :nothing), (:call, :isempty, :a)), :nothing, (:call, :first, :a))
                ))), (:(=>), (:quote, #QuoteNode
                :rest
              ), (:->, :a, (:block,
                  (:line, 119, :none),
                  (:if, (:call, :(===), :a, :nothing), (:ref, :Any), (:ref, :Any, (:..., (:ref, :a, (:(:), 2, :end)))))
                ))), (:(=>), (:call, :symbol, "empty?"), :isempty), (:(=>), (:quote, #QuoteNode
                :count
              ), (:->, :a, (:block,
                  (:line, 121, :none),
                  (:if, (:call, :(==), :a, :nothing), 0, (:call, :length, :a))
                ))), (:(=>), (:quote, #QuoteNode
                :apply
              ), :do_apply), (:(=>), (:quote, #QuoteNode
                :map
              ), :do_map), (:(=>), (:quote, #QuoteNode
                :conj
              ), :conj), (:(=>), (:quote, #QuoteNode
                :seq
              ), :do_seq), (:(=>), (:quote, #QuoteNode
                :meta
              ), (:->, :a, (:block,
                  (:line, 128, :none),
                  (:if, (:call, :isa, :a, (:., :types, (:quote, #QuoteNode
                          :MalFunc
                        ))), (:., :a, (:quote, #QuoteNode
                        :meta
                      )), :nothing)
                ))), (:(=>), (:call, :symbol, "with-meta"), :with_meta), (:(=>), (:quote, #QuoteNode
                :atom
              ), (:->, :a, (:block,
                  (:line, 130, :none),
                  (:call, (:., :types, (:quote, #QuoteNode
                        :Atom
                      )), :a)
                ))), (:(=>), (:call, :symbol, "atom?"), (:->, :a, (:block,
                  (:line, 131, :none),
                  (:call, :isa, :a, (:., :types, (:quote, #QuoteNode
                        :Atom
                      )))
                ))), (:(=>), (:quote, #QuoteNode
                :deref
              ), (:->, :a, (:block,
                  (:line, 132, :none),
                  (:., :a, (:quote, #QuoteNode
                      :val
                    ))
                ))), (:(=>), (:quote, #QuoteNode
                :reset!
              ), (:->, (:tuple, :a, :b), (:block,
                  (:line, 133, :none),
                  (:(=), (:., :a, (:quote, #QuoteNode
                        :val
                      )), :b)
                ))), (:(=>), (:quote, #QuoteNode
                :swap!
              ), (:->, (:tuple, :a, :b, (:..., :c)), (:block,
                  (:line, 134, :none),
                  (:(=), (:., :a, (:quote, #QuoteNode
                        :val
                      )), (:call, :do_apply, :b, (:., :a, (:quote, #QuoteNode
                          :val
                        )), :c))
                )))))
      ))
  ))