(:quote, (:block,
    (:line, 21, :none),
    (:macro, (:call, :deprecate, :old, :new, (:kw, :ex, true)), (:block,
        (:line, 22, :none),
        (:(=), :meta, (:call, :Expr, (:quote, #QuoteNode
              :meta
            ), (:quote, #QuoteNode
              :noinline
            ))),
        (:line, 23, :none),
        (:macrocall, Symbol("@gensym"), :oldmtname),
        (:line, 24, :none),
        (:if, (:call, :isa, :old, :Symbol), (:block,
            (:line, 25, :none),
            (:(=), :oldname, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :old)),
            (:line, 26, :none),
            (:(=), :newname, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :new)),
            (:line, 27, :none),
            (:call, :Expr, (:quote, #QuoteNode
                :toplevel
              ), (:if, :ex, (:call, :Expr, (:quote, #QuoteNode
                    :export
                  ), (:call, :esc, :old)), :nothing), (:quote, (:function, (:call, (:$, (:call, :esc, :old)), (:..., :args)), (:block,
                    (:line, 30, :none),
                    (:$, :meta),
                    (:line, 31, :none),
                    (:call, :depwarn, (:call, :string, (:$, :oldname), " is deprecated, use ", (:$, :newname), " instead."), (:$, :oldmtname)),
                    (:line, 33, :none),
                    (:call, (:$, (:call, :esc, :new)), (:..., :args))
                  ))), (:quote, (:const, (:(=), (:$, :oldmtname), (:., (:., (:., (:call, (:., :Core, (:quote, #QuoteNode
                                :Typeof
                              )), (:$, (:call, :esc, :old))), (:quote, #QuoteNode
                            :name
                          )), (:quote, #QuoteNode
                          :mt
                        )), (:quote, #QuoteNode
                        :name
                      ))))))
          ), (:block,
            (:line, 36, :none),
            (:if, (:&&, (:call, :isa, :old, :Expr), (:||, (:call, :(==), (:., :old, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :call
                    )), (:call, :(==), (:., :old, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :where
                    )))), (:block,
                (:line, 37, :none),
                (:call, :remove_linenums!, :new),
                (:line, 38, :none),
                (:(=), :oldcall, (:call, :sprint, :show_unquoted, :old)),
                (:line, 39, :none),
                (:(=), :newcall, (:call, :sprint, :show_unquoted, :new)),
                (:line, 41, :none),
                (:(=), :callexpr, (:if, (:call, :(==), (:., :old, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :call
                      )), :old, (:ref, (:., :old, (:quote, #QuoteNode
                          :args
                        )), 1))),
                (:line, 42, :none),
                (:if, (:call, :(==), (:., :callexpr, (:quote, #QuoteNode
                        :head
                      )), (:quote, #QuoteNode
                      :call
                    )), (:block,
                    (:line, 43, :none),
                    (:if, (:call, :isa, (:ref, (:., :callexpr, (:quote, #QuoteNode
                              :args
                            )), 1), :Symbol), (:block,
                        (:line, 44, :none),
                        (:(=), :oldsym, (:(::), (:ref, (:., :callexpr, (:quote, #QuoteNode
                                  :args
                                )), 1), :Symbol))
                      ), (:block,
                        (:line, 45, :none),
                        (:if, (:&&, (:call, :isa, (:ref, (:., :callexpr, (:quote, #QuoteNode
                                    :args
                                  )), 1), :Expr), (:call, :(==), (:., (:ref, (:., :callexpr, (:quote, #QuoteNode
                                      :args
                                    )), 1), (:quote, #QuoteNode
                                  :head
                                )), (:quote, #QuoteNode
                                :curly
                              ))), (:block,
                            (:line, 46, :none),
                            (:(=), :oldsym, (:(::), (:ref, (:., (:ref, (:., :callexpr, (:quote, #QuoteNode
                                          :args
                                        )), 1), (:quote, #QuoteNode
                                      :args
                                    )), 1), :Symbol))
                          ), (:block,
                            (:line, 48, :none),
                            (:call, :error, "invalid usage of @deprecate")
                          ))
                      ))
                  ), (:block,
                    (:line, 51, :none),
                    (:call, :error, "invalid usage of @deprecate")
                  )),
                (:line, 53, :none),
                (:call, :Expr, (:quote, #QuoteNode
                    :toplevel
                  ), (:if, :ex, (:call, :Expr, (:quote, #QuoteNode
                        :export
                      ), (:call, :esc, :oldsym)), :nothing), (:quote, (:(=), (:$, (:call, :esc, :old)), (:block,
                        (:line, 56, :none),
                        (:$, :meta),
                        (:line, 57, :none),
                        (:call, :depwarn, (:call, :string, (:$, :oldcall), " is deprecated, use ", (:$, :newcall), " instead."), (:$, :oldmtname)),
                        (:line, 59, :none),
                        (:$, (:call, :esc, :new))
                      ))), (:quote, (:const, (:(=), (:$, :oldmtname), (:., (:., (:., (:call, (:., :Core, (:quote, #QuoteNode
                                    :Typeof
                                  )), (:$, (:call, :esc, :oldsym))), (:quote, #QuoteNode
                                :name
                              )), (:quote, #QuoteNode
                              :mt
                            )), (:quote, #QuoteNode
                            :name
                          ))))))
              ), (:block,
                (:line, 63, :none),
                (:call, :error, "invalid usage of @deprecate")
              ))
          ))
      )),
    (:line, 67, :none),
    (:function, (:call, :depwarn, :msg, :funcsym), (:block,
        (:line, 68, :none),
        (:(=), :opts, (:call, :JLOptions)),
        (:line, 69, :none),
        (:if, (:call, :>, (:., :opts, (:quote, #QuoteNode
                :depwarn
              )), 0), (:block,
            (:line, 70, :none),
            (:(=), :bt, (:call, :backtrace)),
            (:line, 71, :none),
            (:call, :_depwarn, :msg, :opts, :bt, (:call, :firstcaller, :bt, :funcsym))
          )),
        (:line, 73, :none),
        :nothing
      )),
    (:line, 75, :none),
    (:function, (:call, :_depwarn, :msg, :opts, :bt, :caller), (:block,
        (:line, 76, :none),
        (:(=), :ln, (:call, :Int, (:call, :unsafe_load, (:call, :cglobal, (:quote, #QuoteNode
                  :jl_lineno
                ), :Cint)))),
        (:line, 77, :none),
        (:(=), :fn, (:call, :unsafe_string, (:call, :unsafe_load, (:call, :cglobal, (:quote, #QuoteNode
                  :jl_filename
                ), (:curly, :Ptr, :Cchar))))),
        (:line, 78, :none),
        (:if, (:call, :(==), (:., :opts, (:quote, #QuoteNode
                :depwarn
              )), 1), (:block,
            (:line, 79, :none),
            (:call, :warn, :msg, (:kw, :once, (:call, :(!=), :caller, (:., :StackTraces, (:quote, #QuoteNode
                      :UNKNOWN
                    )))), (:kw, :key, (:tuple, :caller, :fn, :ln)), (:kw, :bt, :bt), (:kw, :filename, :fn), (:kw, :lineno, :ln))
          ), (:block,
            (:line, 81, :none),
            (:if, (:call, :(==), (:., :opts, (:quote, #QuoteNode
                    :depwarn
                  )), 2), (:block,
                (:line, 82, :none),
                (:call, :throw, (:call, :ErrorException, :msg))
              ))
          ))
      )),
    (:line, 86, :none),
    (:(=), (:call, :firstcaller, (:(::), :bt, (:curly, :Array, (:curly, :Ptr, :Void), 1)), (:(::), :funcsym, :Symbol)), (:block,
        (:line, 86, :none),
        (:call, :firstcaller, :bt, (:tuple, :funcsym))
      )),
    (:line, 87, :none),
    (:function, (:call, :firstcaller, (:(::), :bt, (:curly, :Array, (:curly, :Ptr, :Void), 1)), :funcsyms), (:block,
        (:line, 89, :none),
        (:(=), :found, false),
        (:line, 90, :none),
        (:(=), :lkup, (:., :StackTraces, (:quote, #QuoteNode
              :UNKNOWN
            ))),
        (:line, 91, :none),
        (:for, (:(=), :frame, :bt), (:block,
            (:line, 92, :none),
            (:(=), :lkups, (:call, (:., :StackTraces, (:quote, #QuoteNode
                    :lookup
                  )), :frame)),
            (:line, 93, :none),
            (:for, (:(=), :lkup, :lkups), (:block,
                (:line, 94, :none),
                (:if, (:call, :(==), :lkup, (:., :StackTraces, (:quote, #QuoteNode
                        :UNKNOWN
                      ))), (:block,
                    (:line, 95, :none),
                    (:continue,)
                  )),
                (:line, 97, :none),
                (:&&, :found, (:macrocall, Symbol("@goto"), :found)),
                (:line, 98, :none),
                (:(=), :found, (:call, :in, (:., :lkup, (:quote, #QuoteNode
                        :func
                      )), :funcsyms))
              ))
          )),
        (:line, 101, :none),
        (:return, (:., :StackTraces, (:quote, #QuoteNode
              :UNKNOWN
            ))),
        (:line, 102, :none),
        (:macrocall, Symbol("@label"), :found),
        (:line, 103, :none),
        (:return, :lkup)
      )),
    (:line, 106, :none),
    (:(=), (:call, :deprecate, (:(::), :s, :Symbol)), (:block,
        (:line, 106, :none),
        (:call, :deprecate, (:call, :current_module), :s)
      )),
    (:line, 107, :none),
    (:(=), (:call, :deprecate, (:(::), :m, :Module), (:(::), :s, :Symbol)), (:block,
        (:line, 107, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_deprecate_binding
          ), :Void, (:tuple, :Any, :Any), :m, :s)
      )),
    (:line, 109, :none),
    (:macro, (:call, :deprecate_binding, :old, :new, (:kw, :export_old, true)), (:block,
        (:line, 110, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :toplevel
          ), (:if, :export_old, (:call, :Expr, (:quote, #QuoteNode
                :export
              ), (:call, :esc, :old)), :nothing), (:call, :Expr, (:quote, #QuoteNode
              :const
            ), (:call, :Expr, (:quote, #QuoteNode
                :(=)
              ), (:call, :esc, :old), (:call, :esc, :new))), (:call, :Expr, (:quote, #QuoteNode
              :call
            ), (:quote, #QuoteNode
              :deprecate
            ), (:call, :Expr, (:quote, #QuoteNode
                :quote
              ), :old)))
      )),
    (:line, 118, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isambiguous, (:(::), :m1, :Method), (:(::), :m2, :Method), (:(::), :b, :Bool)), (:call, :isambiguous, :m1, :m2, (:kw, :ambiguous_bottom, :b)), false),
    (:line, 125, :none),
    (:const, (:(=), :_oldstyle_array_vcat_, false)),
    (:line, 127, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :write, :x), (:call, :write, (:(::), :STDOUT, :IO), :x)),
    (:line, 129, :none),
    (:function, (:call, :delete!, (:(::), :EnvHash), (:(::), :k, :AbstractString), :def), (:block,
        (:line, 130, :none),
        (:call, :depwarn, "`delete!(ENV, k, def)` should be replaced with `pop!(ENV, k, def)`. Be aware that `pop!` returns `k` or `def`, while `delete!` returns `ENV` or `def`.", (:quote, #QuoteNode
            :delete!
          )),
        (:line, 131, :none),
        (:if, (:call, :haskey, :ENV, :k), (:call, :delete!, :ENV, :k), :def)
      )),
    (:line, 134, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :+, (:(::), :J, :UniformScaling), (:(::), :x, :Number)), (:call, :+, (:., :J, (:quote, #QuoteNode
            :λ
          )), :x)),
    (:line, 135, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :+, (:(::), :x, :Number), (:(::), :J, :UniformScaling)), (:call, :+, :x, (:., :J, (:quote, #QuoteNode
            :λ
          )))),
    (:line, 136, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :-, (:(::), :J, :UniformScaling), (:(::), :x, :Number)), (:call, :-, (:., :J, (:quote, #QuoteNode
            :λ
          )), :x)),
    (:line, 137, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :-, (:(::), :x, :Number), (:(::), :J, :UniformScaling)), (:call, :-, :x, (:., :J, (:quote, #QuoteNode
            :λ
          )))),
    (:line, 140, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :UpperTriangular)), (:(::), :A, :Diagonal)), (:block,
        (:line, 141, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{UpperTriangular}, A::Diagonal)` and other methods ", "that convert `Diagonal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `UpperTriangular` constructor directly ", "(`UpperTriangular(A)`) instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 145, :none),
        (:call, :UpperTriangular, :A)
      )),
    (:line, 147, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :LowerTriangular)), (:(::), :A, :Diagonal)), (:block,
        (:line, 148, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{LowerTriangular}, A::Diagonal)` and other methods ", "that convert `Diagonal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `LowerTriangular` constructor directly ", "(`LowerTriangular(A)`) instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 152, :none),
        (:call, :LowerTriangular, :A)
      )),
    (:line, 154, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, (:., (:., :Base, (:quote, #QuoteNode
                  :LinAlg
                )), (:quote, #QuoteNode
                :UnitUpperTriangular
              )))), (:(::), :A, :Diagonal)), (:block,
        (:line, 155, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{UnitUpperTriangular}, A::Diagonal)` and other methods ", "that convert `Diagonal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `UnitUpperTriangular` constructor directly ", "(`Base.LinAlg.UnitUpperTriangular(A)`) instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 159, :none),
        (:if, (:call, :!, (:call, :all, (:->, :x, (:block,
                  (:line, 159, :none),
                  (:call, :(==), :x, (:call, :oneunit, :x))
                )), (:., :A, (:quote, #QuoteNode
                  :diag
                )))), (:block,
            (:line, 160, :none),
            (:call, :throw, (:call, :ArgumentError, "matrix cannot be represented as UnitUpperTriangular"))
          )),
        (:line, 162, :none),
        (:call, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :UnitUpperTriangular
            )), (:call, :Array, :A))
      )),
    (:line, 164, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, (:., (:., :Base, (:quote, #QuoteNode
                  :LinAlg
                )), (:quote, #QuoteNode
                :UnitLowerTriangular
              )))), (:(::), :A, :Diagonal)), (:block,
        (:line, 165, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{UnitLowerTriangular}, A::Diagonal)` and other methods ", "that convert `Diagonal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `UnitLowerTriangular` constructor directly ", "(`Base.LinAlg.UnitLowerTriangular(A)`) instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 169, :none),
        (:if, (:call, :!, (:call, :all, (:->, :x, (:block,
                  (:line, 169, :none),
                  (:call, :(==), :x, (:call, :oneunit, :x))
                )), (:., :A, (:quote, #QuoteNode
                  :diag
                )))), (:block,
            (:line, 170, :none),
            (:call, :throw, (:call, :ArgumentError, "matrix cannot be represented as UnitLowerTriangular"))
          )),
        (:line, 172, :none),
        (:call, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :UnitLowerTriangular
            )), (:call, :Array, :A))
      )),
    (:line, 174, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :LowerTriangular)), (:(::), :A, :Bidiagonal)), (:block,
        (:line, 175, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{LowerTriangular}, A::Bidiagonal)` and other methods ", "that convert `Diagonal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `LowerTriangular` constructor directly (`LowerTriangular(A)`) ", "instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 179, :none),
        (:if, (:call, :!, (:., :A, (:quote, #QuoteNode
                :isupper
              ))), (:block,
            (:line, 180, :none),
            (:call, :LowerTriangular, (:call, :Array, :A))
          ), (:block,
            (:line, 182, :none),
            (:call, :throw, (:call, :ArgumentError, "Bidiagonal matrix must have lower off diagonal to be converted to LowerTriangular"))
          ))
      )),
    (:line, 185, :none),
    (:function, (:call, :convert, (:(::), (:curly, :Type, :UpperTriangular)), (:(::), :A, :Bidiagonal)), (:block,
        (:line, 186, :none),
        (:call, :depwarn, (:call, :string, "`convert(::Type{UpperTriangular}, A::Bidiagonal)` and other methods ", "that convert `Diagoinal`/`Bidiagonal` to `<:AbstractTriangular` are deprecated. ", "Consider calling the `UpperTriangular` constructor directly (`UpperTriangular(A)`) ", "instead."), (:quote, #QuoteNode
            :convert
          )),
        (:line, 190, :none),
        (:if, (:., :A, (:quote, #QuoteNode
              :isupper
            )), (:block,
            (:line, 191, :none),
            (:call, :UpperTriangular, (:call, :Array, :A))
          ), (:block,
            (:line, 193, :none),
            (:call, :throw, (:call, :ArgumentError, "Bidiagonal matrix must have upper off diagonal to be converted to UpperTriangular"))
          ))
      )),
    (:line, 198, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :SubArray, (:(::), :parent, :AbstractArray), (:(::), :indexes, :Tuple), (:(::), :dims, :Tuple)), (:call, :SubArray, :parent, :indexes)),
    (:line, 201, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :sin
          ), (:quote, #QuoteNode
            :sinh
          ), (:quote, #QuoteNode
            :sind
          ), (:quote, #QuoteNode
            :asin
          ), (:quote, #QuoteNode
            :asinh
          ), (:quote, #QuoteNode
            :asind
          ), (:quote, #QuoteNode
            :tan
          ), (:quote, #QuoteNode
            :tanh
          ), (:quote, #QuoteNode
            :tand
          ), (:quote, #QuoteNode
            :atan
          ), (:quote, #QuoteNode
            :atanh
          ), (:quote, #QuoteNode
            :atand
          ), (:quote, #QuoteNode
            :sinpi
          ), (:quote, #QuoteNode
            :cosc
          ), (:quote, #QuoteNode
            :ceil
          ), (:quote, #QuoteNode
            :floor
          ), (:quote, #QuoteNode
            :trunc
          ), (:quote, #QuoteNode
            :round
          ), (:quote, #QuoteNode
            :log1p
          ), (:quote, #QuoteNode
            :expm1
          ), (:quote, #QuoteNode
            :abs
          ), (:quote, #QuoteNode
            :abs2
          ), (:quote, #QuoteNode
            :log
          ), (:quote, #QuoteNode
            :log2
          ), (:quote, #QuoteNode
            :log10
          ), (:quote, #QuoteNode
            :exp
          ), (:quote, #QuoteNode
            :exp2
          ), (:quote, #QuoteNode
            :exp10
          ), (:quote, #QuoteNode
            :sinc
          ), (:quote, #QuoteNode
            :cospi
          ), (:quote, #QuoteNode
            :cos
          ), (:quote, #QuoteNode
            :cosh
          ), (:quote, #QuoteNode
            :cosd
          ), (:quote, #QuoteNode
            :acos
          ), (:quote, #QuoteNode
            :acosd
          ), (:quote, #QuoteNode
            :cot
          ), (:quote, #QuoteNode
            :coth
          ), (:quote, #QuoteNode
            :cotd
          ), (:quote, #QuoteNode
            :acot
          ), (:quote, #QuoteNode
            :acotd
          ), (:quote, #QuoteNode
            :sec
          ), (:quote, #QuoteNode
            :sech
          ), (:quote, #QuoteNode
            :secd
          ), (:quote, #QuoteNode
            :asech
          ), (:quote, #QuoteNode
            :csc
          ), (:quote, #QuoteNode
            :csch
          ), (:quote, #QuoteNode
            :cscd
          ), (:quote, #QuoteNode
            :acsch
          ))), (:block,
        (:line, 210, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :A, :SparseMatrixCSC)), (:., (:$, :f), (:tuple, :A))))
      )),
    (:line, 214, :none),
    (:macro, (:call, :dep_vectorize_1arg, :S, :f), (:block,
        (:line, 215, :none),
        (:(=), :S, (:call, :esc, :S)),
        (:line, 216, :none),
        (:(=), :f, (:call, :esc, :f)),
        (:line, 217, :none),
        (:(=), :T, (:call, :esc, (:quote, #QuoteNode
              :T
            ))),
        (:line, 218, :none),
        (:(=), :x, (:call, :esc, (:quote, #QuoteNode
              :x
            ))),
        (:line, 219, :none),
        (:(=), :AbsArr, (:call, :esc, (:quote, #QuoteNode
              :AbstractArray
            ))),
        (:line, 220, :none),
        (:quote, (:macrocall, Symbol("@deprecate"), (:call, (:curly, (:$, :f), (:<:, (:$, :T), (:$, :S))), (:(::), (:$, :x), (:curly, (:$, :AbsArr), (:$, :T)))), (:., (:$, :f), (:tuple, (:$, :x)))))
      )),
    (:line, 222, :none),
    (:macro, (:call, :dep_vectorize_2arg, :S, :f), (:block,
        (:line, 223, :none),
        (:(=), :S, (:call, :esc, :S)),
        (:line, 224, :none),
        (:(=), :f, (:call, :esc, :f)),
        (:line, 225, :none),
        (:(=), :T1, (:call, :esc, (:quote, #QuoteNode
              :T1
            ))),
        (:line, 226, :none),
        (:(=), :T2, (:call, :esc, (:quote, #QuoteNode
              :T2
            ))),
        (:line, 227, :none),
        (:(=), :x, (:call, :esc, (:quote, #QuoteNode
              :x
            ))),
        (:line, 228, :none),
        (:(=), :y, (:call, :esc, (:quote, #QuoteNode
              :y
            ))),
        (:line, 229, :none),
        (:(=), :AbsArr, (:call, :esc, (:quote, #QuoteNode
              :AbstractArray
            ))),
        (:line, 230, :none),
        (:quote, (:block,
            (:line, 231, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S))), (:(::), (:$, :x), (:$, :S)), (:(::), (:$, :y), (:curly, (:$, :AbsArr), (:$, :T1)))), (:., (:$, :f), (:tuple, (:$, :x), (:$, :y)))),
            (:line, 232, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S))), (:(::), (:$, :x), (:curly, (:$, :AbsArr), (:$, :T1))), (:(::), (:$, :y), (:$, :S))), (:., (:$, :f), (:tuple, (:$, :x), (:$, :y)))),
            (:line, 233, :none),
            (:macrocall, Symbol("@deprecate"), (:call, (:curly, (:$, :f), (:<:, (:$, :T1), (:$, :S)), (:<:, (:$, :T2), (:$, :S))), (:(::), (:$, :x), (:curly, (:$, :AbsArr), (:$, :T1))), (:(::), (:$, :y), (:curly, (:$, :AbsArr), (:$, :T2)))), (:., (:$, :f), (:tuple, (:$, :x), (:$, :y))))
          ))
      )),
    (:line, 238, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :sinpi
          ), (:quote, #QuoteNode
            :cospi
          ), (:quote, #QuoteNode
            :sinc
          ), (:quote, #QuoteNode
            :cosc
          ), (:quote, #QuoteNode
            :log
          ), (:quote, #QuoteNode
            :log1p
          ), (:quote, #QuoteNode
            :gamma
          ), (:quote, #QuoteNode
            :lfact
          ), (:quote, #QuoteNode
            :cbrt
          ), (:quote, #QuoteNode
            :sinh
          ), (:quote, #QuoteNode
            :cosh
          ), (:quote, #QuoteNode
            :tanh
          ), (:quote, #QuoteNode
            :atan
          ), (:quote, #QuoteNode
            :asinh
          ), (:quote, #QuoteNode
            :exp
          ), (:quote, #QuoteNode
            :exp2
          ), (:quote, #QuoteNode
            :expm1
          ), (:quote, #QuoteNode
            :exp10
          ), (:quote, #QuoteNode
            :sin
          ), (:quote, #QuoteNode
            :cos
          ), (:quote, #QuoteNode
            :tan
          ), (:quote, #QuoteNode
            :asin
          ), (:quote, #QuoteNode
            :acos
          ), (:quote, #QuoteNode
            :acosh
          ), (:quote, #QuoteNode
            :atanh
          ), (:quote, #QuoteNode
            :log2
          ), (:quote, #QuoteNode
            :log10
          ), (:quote, #QuoteNode
            :lgamma
          ), (:quote, #QuoteNode
            :sqrt
          ), (:quote, #QuoteNode
            :abs
          ), (:quote, #QuoteNode
            :abs2
          ), (:quote, #QuoteNode
            :angle
          ), (:quote, #QuoteNode
            :isnan
          ), (:quote, #QuoteNode
            :isinf
          ), (:quote, #QuoteNode
            :isfinite
          ), (:quote, #QuoteNode
            :cis
          ))), (:block,
        (:line, 254, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@dep_vectorize_1arg"), :Number, (:$, :f)))
      )),
    (:line, 257, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :acos_fast
          ), (:quote, #QuoteNode
            :acosh_fast
          ), (:quote, #QuoteNode
            :angle_fast
          ), (:quote, #QuoteNode
            :asin_fast
          ), (:quote, #QuoteNode
            :asinh_fast
          ), (:quote, #QuoteNode
            :atan_fast
          ), (:quote, #QuoteNode
            :atanh_fast
          ), (:quote, #QuoteNode
            :cbrt_fast
          ), (:quote, #QuoteNode
            :cis_fast
          ), (:quote, #QuoteNode
            :cos_fast
          ), (:quote, #QuoteNode
            :cosh_fast
          ), (:quote, #QuoteNode
            :exp10_fast
          ), (:quote, #QuoteNode
            :exp2_fast
          ), (:quote, #QuoteNode
            :exp_fast
          ), (:quote, #QuoteNode
            :expm1_fast
          ), (:quote, #QuoteNode
            :lgamma_fast
          ), (:quote, #QuoteNode
            :log10_fast
          ), (:quote, #QuoteNode
            :log1p_fast
          ), (:quote, #QuoteNode
            :log2_fast
          ), (:quote, #QuoteNode
            :log_fast
          ), (:quote, #QuoteNode
            :sin_fast
          ), (:quote, #QuoteNode
            :sinh_fast
          ), (:quote, #QuoteNode
            :sqrt_fast
          ), (:quote, #QuoteNode
            :tan_fast
          ), (:quote, #QuoteNode
            :tanh_fast
          ))), (:block,
        (:line, 262, :none),
        (:macrocall, Symbol("@eval"), :FastMath, (:macrocall, (:., :Base, (:quote, #QuoteNode
                Symbol("@dep_vectorize_1arg")
              )), :Number, (:$, :f)))
      )),
    (:line, 264, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :trunc
          ), (:quote, #QuoteNode
            :floor
          ), (:quote, #QuoteNode
            :ceil
          ), (:quote, #QuoteNode
            :round
          ), (:quote, #QuoteNode
            :rad2deg
          ), (:quote, #QuoteNode
            :deg2rad
          ), (:quote, #QuoteNode
            :exponent
          ), (:quote, #QuoteNode
            :significand
          ), (:quote, #QuoteNode
            :sind
          ), (:quote, #QuoteNode
            :cosd
          ), (:quote, #QuoteNode
            :tand
          ), (:quote, #QuoteNode
            :asind
          ), (:quote, #QuoteNode
            :acosd
          ), (:quote, #QuoteNode
            :atand
          ), (:quote, #QuoteNode
            :asecd
          ), (:quote, #QuoteNode
            :acscd
          ), (:quote, #QuoteNode
            :acotd
          ))), (:block,
        (:line, 269, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@dep_vectorize_1arg"), :Real, (:$, :f)))
      )),
    (:line, 272, :none),
    (:macrocall, Symbol("@dep_vectorize_1arg"), :Complex, :round),
    (:line, 273, :none),
    (:macrocall, Symbol("@dep_vectorize_1arg"), :Complex, :float),
    (:line, 275, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :unix2datetime
          ), (:quote, #QuoteNode
            :rata2datetime
          ), (:quote, #QuoteNode
            :julian2datetime
          ))), (:block,
        (:line, 276, :none),
        (:macrocall, Symbol("@eval"), :Dates, (:macrocall, (:., :Base, (:quote, #QuoteNode
                Symbol("@dep_vectorize_1arg")
              )), :Real, (:$, :f)))
      )),
    (:line, 278, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :year
          ), (:quote, #QuoteNode
            :month
          ), (:quote, #QuoteNode
            :day
          ), (:quote, #QuoteNode
            :week
          ), (:quote, #QuoteNode
            :dayofmonth
          ), (:quote, #QuoteNode
            :yearmonth
          ), (:quote, #QuoteNode
            :monthday
          ), (:quote, #QuoteNode
            :yearmonthday
          ), (:quote, #QuoteNode
            :firstdayofweek
          ), (:quote, #QuoteNode
            :lastdayofweek
          ), (:quote, #QuoteNode
            :firstdayofmonth
          ), (:quote, #QuoteNode
            :lastdayofmonth
          ), (:quote, #QuoteNode
            :firstdayofyear
          ), (:quote, #QuoteNode
            :lastdayofyear
          ), (:quote, #QuoteNode
            :firstdayofquarter
          ), (:quote, #QuoteNode
            :lastdayofquarter
          ), (:quote, #QuoteNode
            :dayname
          ), (:quote, #QuoteNode
            :dayabbr
          ), (:quote, #QuoteNode
            :dayofweek
          ), (:quote, #QuoteNode
            :dayofweekofmonth
          ), (:quote, #QuoteNode
            :daysofweekinmonth
          ), (:quote, #QuoteNode
            :monthname
          ), (:quote, #QuoteNode
            :monthabbr
          ), (:quote, #QuoteNode
            :daysinmonth
          ), (:quote, #QuoteNode
            :isleapyear
          ), (:quote, #QuoteNode
            :dayofyear
          ), (:quote, #QuoteNode
            :daysinyear
          ), (:quote, #QuoteNode
            :quarterofyear
          ), (:quote, #QuoteNode
            :dayofquarter
          ))), (:block,
        (:line, 290, :none),
        (:macrocall, Symbol("@eval"), :Dates, (:macrocall, (:., :Base, (:quote, #QuoteNode
                Symbol("@dep_vectorize_1arg")
              )), (:., :Dates, (:quote, #QuoteNode
                :TimeType
              )), (:$, :f)))
      )),
    (:line, 292, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :hour
          ), (:quote, #QuoteNode
            :minute
          ), (:quote, #QuoteNode
            :second
          ), (:quote, #QuoteNode
            :millisecond
          ), (:quote, #QuoteNode
            :Date
          ), (:quote, #QuoteNode
            :datetime2unix
          ), (:quote, #QuoteNode
            :datetime2rata
          ), (:quote, #QuoteNode
            :datetime2julian
          ))), (:block,
        (:line, 296, :none),
        (:macrocall, Symbol("@eval"), :Dates, (:macrocall, (:., :Base, (:quote, #QuoteNode
                Symbol("@dep_vectorize_1arg")
              )), (:., :Dates, (:quote, #QuoteNode
                :DateTime
              )), (:$, :f)))
      )),
    (:line, 298, :none),
    (:macrocall, Symbol("@eval"), :Dates, (:macrocall, (:., :Base, (:quote, #QuoteNode
            Symbol("@dep_vectorize_1arg")
          )), (:., :Dates, (:quote, #QuoteNode
            :Date
          )), :Datetime)),
    (:line, 301, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :beta
          ), (:quote, #QuoteNode
            :lbeta
          ), (:quote, #QuoteNode
            :log
          ), (:quote, #QuoteNode
            :hypot
          ), (:quote, #QuoteNode
            :atan2
          ))), (:block,
        (:line, 307, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@dep_vectorize_2arg"), :Number, (:$, :f)))
      )),
    (:line, 310, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :pow_fast
          ), (:quote, #QuoteNode
            :atan2_fast
          ), (:quote, #QuoteNode
            :hypot_fast
          ), (:quote, #QuoteNode
            :max_fast
          ), (:quote, #QuoteNode
            :min_fast
          ), (:quote, #QuoteNode
            :minmax_fast
          ))), (:block,
        (:line, 311, :none),
        (:macrocall, Symbol("@eval"), :FastMath, (:macrocall, (:., :Base, (:quote, #QuoteNode
                Symbol("@dep_vectorize_2arg")
              )), :Number, (:$, :f)))
      )),
    (:line, 313, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :max
          ), (:quote, #QuoteNode
            :min
          ), (:quote, #QuoteNode
            :copysign
          ), (:quote, #QuoteNode
            :flipsign
          ))), (:block,
        (:line, 317, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@dep_vectorize_2arg"), :Real, (:$, :f)))
      )),
    (:line, 321, :none),
    (:macro, (:call, :vectorize_1arg, :S, :f), (:block,
        (:line, 322, :none),
        (:call, :depwarn, (:call, :string, "`@vectorize_1arg` is deprecated in favor of compact broadcast syntax. ", "Instead of `@vectorize_1arg`'ing function `f` and calling `f(arg)`, call `f.(arg)`."), (:quote, #QuoteNode
            :vectorize_1arg
          )),
        (:line, 325, :none),
        (:quote, (:block,
            (:line, 326, :none),
            (:macrocall, Symbol("@dep_vectorize_1arg"), (:$, (:call, :esc, :S)), (:$, (:call, :esc, :f)))
          ))
      )),
    (:line, 329, :none),
    (:macro, (:call, :vectorize_2arg, :S, :f), (:block,
        (:line, 330, :none),
        (:call, :depwarn, (:call, :string, "`@vectorize_2arg` is deprecated in favor of compact broadcast syntax. ", "Instead of `@vectorize_2arg`'ing function `f` and calling `f(arg1, arg2)`, call ", "`f.(arg1,arg2)`. "), (:quote, #QuoteNode
            :vectorize_2arg
          )),
        (:line, 333, :none),
        (:quote, (:block,
            (:line, 334, :none),
            (:macrocall, Symbol("@dep_vectorize_2arg"), (:$, (:call, :esc, :S)), (:$, (:call, :esc, :f)))
          ))
      )),
    (:line, 337, :none),
    (:export, Symbol("@vectorize_1arg"), Symbol("@vectorize_2arg")),
    (:line, 341, :none),
    (:for, (:(=), :op, (:tuple, (:quote, #QuoteNode
            :(!=)
          ), (:quote, #QuoteNode
            :≠
          ), (:quote, #QuoteNode
            :+
          ), (:quote, #QuoteNode
            :-
          ), (:quote, #QuoteNode
            :*
          ), (:quote, #QuoteNode
            :/
          ), (:quote, #QuoteNode
            :÷
          ), (:quote, #QuoteNode
            :%
          ), (:quote, #QuoteNode
            :<
          ), (:quote, #QuoteNode
            :(<=)
          ), (:quote, #QuoteNode
            :≤
          ), (:quote, #QuoteNode
            :(==)
          ), (:quote, #QuoteNode
            :>
          ), (:quote, #QuoteNode
            :(>=)
          ), (:quote, #QuoteNode
            :≥
          ), (:quote, #QuoteNode
            :\
          ), (:quote, #QuoteNode
            :^
          ), (:quote, #QuoteNode
            ://
          ), (:quote, #QuoteNode
            :>>
          ), (:quote, #QuoteNode
            :<<
          ))), (:block,
        (:line, 342, :none),
        (:(=), :dotop, (:call, :Symbol, '.', :op)),
        (:line, 345, :none),
        (:macrocall, Symbol("@eval"), (:const, (:(=), (:$, :dotop), (:->, (:tuple, :a, :b), (:block,
                  (:line, 345, :none),
                  (:block,
                    (:line, 346, :none),
                    (:call, :depwarn, (:call, :string, (:$, (:call, :string, :dotop)), " is no longer a function object; use broadcast(", (:$, :op), ", ...) instead"), (:$, (:call, :QuoteNode, :dotop))),
                    (:line, 348, :none),
                    (:call, :broadcast, (:$, :op), :a, :b)
                  )
                ))))),
        (:line, 350, :none),
        (:macrocall, Symbol("@eval"), (:export, (:$, :dotop)))
      )),
    (:line, 354, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :f, (:., (:., (:., (:., :Base, (:quote, #QuoteNode
                    :Pkg
                  )), (:quote, #QuoteNode
                  :Resolve
                )), (:quote, #QuoteNode
                :MaxSum
              )), (:quote, #QuoteNode
              :Field
            )))), (:., :abs, (:tuple, :f))),
    (:line, 355, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :B, :BitArray)), (:., :abs, (:tuple, :B))),
    (:line, 356, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :M, :Bidiagonal)), (:., :abs, (:tuple, :M))),
    (:line, 357, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :D, :Diagonal)), (:., :abs, (:tuple, :D))),
    (:line, 358, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :M, :Tridiagonal)), (:., :abs, (:tuple, :M))),
    (:line, 359, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :M, :SymTridiagonal)), (:., :abs, (:tuple, :M))),
    (:line, 360, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs, (:(::), :x, :AbstractSparseVector)), (:., :abs, (:tuple, :x))),
    (:line, 363, :none),
    (:macrocall, Symbol("@eval"), :Multimedia, (:macro, (:call, :textmime, :mime), (:block,
          (:line, 364, :none),
          (:call, (:., :Base, (:quote, #QuoteNode
                :depwarn
              )), (:call, :string, "`@textmime \"mime\"` is deprecated; use ", "`Base.Multimedia.istextmime(::MIME\"mime\") = true` instead"), (:quote, #QuoteNode
              :textmime
            )),
          (:line, 367, :none),
          (:quote, (:block,
              (:line, 368, :none),
              (:(=), (:call, (:., (:., :Base, (:quote, #QuoteNode
                        :Multimedia
                      )), (:quote, #QuoteNode
                      :istextmime
                    )), (:(::), (:curly, :MIME, (:$, (:call, (:., :Meta, (:quote, #QuoteNode
                              :quot
                            )), (:call, :Symbol, :mime)))))), (:block,
                  (:line, 368, :none),
                  true
                ))
            ))
        ))),
    (:line, 372, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ipermutedims, (:(::), :A, :AbstractArray), :p), (:call, :permutedims, :A, (:call, :invperm, :p))),
    (:line, 375, :none),
    (:function, (:call, :$, :x, :y), (:block,
        (:line, 376, :none),
        (:call, :depwarn, "`x \$ y` is deprecated.  use `xor(x, y)` or `x ⊻ y` instead.", (:quote, #QuoteNode
            :$
          )),
        (:line, 377, :none),
        (:call, :xor, :x, :y)
      )),
    (:line, 379, :none),
    (:export, :$),
    (:line, 381, :none),
    (:macrocall, Symbol("@deprecate"), :is, :(===)),
    (:line, 384, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :midpoints, (:(::), :r, :Range)), (:call, :+, (:ref, :r, (:(:), 1, (:call, :-, (:call, :length, :r), 1))), (:call, :*, 0.5, (:call, :step, :r)))),
    (:line, 385, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :midpoints, (:(::), :v, :AbstractVector)), (:comprehension, (:generator, (:call, :*, 0.5, (:call, :+, (:ref, :v, :i), (:ref, :v, (:call, :+, :i, 1)))), (:(=), :i, (:(:), 1, (:call, :-, (:call, :length, :v), 1)))))),
    (:line, 387, :none),
    (:macrocall, Symbol("@deprecate_binding"), :Filter, (:., :Iterators, (:quote, #QuoteNode
          :Filter
        ))),
    (:line, 388, :none),
    (:macrocall, Symbol("@deprecate_binding"), :Zip, (:., :Iterators, (:quote, #QuoteNode
          :Zip
        ))),
    (:line, 389, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :filter, :flt, :itr), (:call, (:., :Iterators, (:quote, #QuoteNode
            :filter
          )), :flt, :itr)),
    (:line, 390, :none),
    (:macrocall, Symbol("@deprecate_binding"), :rest, (:., :Iterators, (:quote, #QuoteNode
          :rest
        ))),
    (:line, 391, :none),
    (:macrocall, Symbol("@deprecate_binding"), :countfrom, (:., :Iterators, (:quote, #QuoteNode
          :countfrom
        ))),
    (:line, 392, :none),
    (:macrocall, Symbol("@deprecate_binding"), :take, (:., :Iterators, (:quote, #QuoteNode
          :take
        ))),
    (:line, 393, :none),
    (:macrocall, Symbol("@deprecate_binding"), :drop, (:., :Iterators, (:quote, #QuoteNode
          :drop
        ))),
    (:line, 394, :none),
    (:macrocall, Symbol("@deprecate_binding"), :cycle, (:., :Iterators, (:quote, #QuoteNode
          :cycle
        ))),
    (:line, 395, :none),
    (:macrocall, Symbol("@deprecate_binding"), :repeated, (:., :Iterators, (:quote, #QuoteNode
          :repeated
        ))),
    (:line, 398, :none),
    (:function, (:call, :promote_op, (:(::), :op, :Type), (:..., (:(::), :Ts, :Type))), (:block,
        (:line, 399, :none),
        (:call, :depwarn, (:call, :*, "promote_op(op::Type, ::Type...) is deprecated as it is no ", "longer needed in Base. If you need its functionality, consider ", "defining it locally."), (:quote, #QuoteNode
            :promote_op
          )),
        (:line, 402, :none),
        (:if, (:call, :isdefined, :Core, (:quote, #QuoteNode
              :Inference
            )), (:block,
            (:line, 403, :none),
            (:return, (:call, (:., (:., :Core, (:quote, #QuoteNode
                      :Inference
                    )), (:quote, #QuoteNode
                    :return_type
                  )), :op, (:curly, :Tuple, (:..., :Ts))))
          )),
        (:line, 405, :none),
        (:return, :op)
      )),
    (:line, 416, :none),
    (:function, (:call, :reduced_dims, (:(::), (:curly, :Tuple)), (:(::), :d, :Int)), (:block,
        (:line, 417, :none),
        (:&&, (:call, :<, :d, 1), (:call, :throw, (:call, :ArgumentError, (:string, "dimension must be ≥ 1, got ", :d)))),
        (:line, 418, :none),
        (:tuple,)
      )),
    (:line, 420, :none),
    (:(=), (:call, :reduced_dims, (:(::), (:curly, :Tuple)), :region), (:block,
        (:line, 420, :none),
        (:tuple,)
      )),
    (:line, 421, :none),
    (:function, (:call, :reduced_dims, (:(::), :dims, :Dims), :region), (:block,
        (:line, 422, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), "`reduced_dims` is deprecated for Dims-tuples; pass `indices` to `reduced_indices` instead", (:quote, #QuoteNode
            :reduced_dims
          )),
        (:line, 423, :none),
        (:call, :map, :last, (:call, :reduced_indices, (:call, :map, :OneTo, :dims), :region))
      )),
    (:line, 426, :none),
    (:function, (:call, :reduced_dims0, (:(::), (:curly, :Tuple)), (:(::), :d, :Int)), (:block,
        (:line, 427, :none),
        (:&&, (:call, :<, :d, 1), (:call, :throw, (:call, :ArgumentError, (:string, "dimension must be ≥ 1, got ", :d)))),
        (:line, 428, :none),
        (:tuple,)
      )),
    (:line, 430, :none),
    (:(=), (:call, :reduced_dims0, (:(::), (:curly, :Tuple)), :region), (:block,
        (:line, 430, :none),
        (:tuple,)
      )),
    (:line, 431, :none),
    (:function, (:call, :reduced_dims0, (:(::), :dims, :Dims), :region), (:block,
        (:line, 432, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), "`reduced_dims0` is deprecated for Dims-tuples; pass `indices` to `reduced_indices0` instead", (:quote, #QuoteNode
            :reduced_dims0
          )),
        (:line, 433, :none),
        (:call, :map, :last, (:call, :reduced_indices0, (:call, :map, :OneTo, :dims), :region))
      )),
    (:line, 436, :none),
    (:function, (:call, :reduced_dims, (:(::), :a, :AbstractArray), :region), (:block,
        (:line, 437, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), "`reduced_dims` is deprecated in favor of `reduced_indices`", (:quote, #QuoteNode
            :reduced_dims
          )),
        (:line, 438, :none),
        (:call, :to_shape, (:call, :reduced_indices, :a, :region))
      )),
    (:line, 441, :none),
    (:function, (:call, :reduced_dims0, (:(::), :a, :AbstractArray), :region), (:block,
        (:line, 442, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), "`reduced_dims0` is deprecated in favor of `reduced_indices0`", (:quote, #QuoteNode
            :reduced_dims
          )),
        (:line, 443, :none),
        (:call, :to_shape, (:call, :reduced_indices0, :a, :region))
      )),
    (:line, 447, :none),
    (:macrocall, Symbol("@eval"), (:., :Base, (:quote, #QuoteNode
          :LinAlg
        )), (:block,
        (:line, 448, :none),
        (:function, (:call, :arithtype, :T), (:block,
            (:line, 449, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :depwarn
                )), (:call, :string, "arithtype is now deprecated. If you were using it inside a ", "promote_op call, use promote_op(LinAlg.matprod, Ts...) instead. Otherwise, ", "if you need its functionality, consider defining it locally."), (:quote, #QuoteNode
                :arithtype
              )),
            (:line, 453, :none),
            :T
          )),
        (:line, 455, :none),
        (:function, (:call, :arithtype, (:(::), (:curly, :Type, :Bool))), (:block,
            (:line, 456, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :depwarn
                )), (:call, :string, "arithtype is now deprecated. If you were using it inside a ", "promote_op call, use promote_op(LinAlg.matprod, Ts...) instead. Otherwise, ", "if you need its functionality, consider defining it locally."), (:quote, #QuoteNode
                :arithtype
              )),
            (:line, 460, :none),
            :Int
          ))
      )),
    (:line, 465, :none),
    (:macrocall, Symbol("@deprecate"), :den, :denominator),
    (:line, 466, :none),
    (:macrocall, Symbol("@deprecate"), :num, :numerator),
    (:line, 468, :none),
    (:(=), (:call, (:., :Filesystem, (:quote, #QuoteNode
            :stop_watching
          )), (:(::), :stream, (:., :Filesystem, (:quote, #QuoteNode
              :_FDWatcher
            )))), (:block,
        (:line, 468, :none),
        (:call, :depwarn, "stop_watching(::_FDWatcher) should not be used", (:quote, #QuoteNode
            :stop_watching
          ))
      )),
    (:line, 471, :none),
    (:macrocall, Symbol("@deprecate"), :takebuf_array, :take!),
    (:line, 472, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :takebuf_string, :b), (:call, :String, (:call, :take!, :b))),
    (:line, 475, :none),
    (:macrocall, Symbol("@eval"), (:., :Base, (:quote, #QuoteNode
          :Dates
        )), (:block,
        (:line, 476, :none),
        (:function, (:call, :recur, (:parameters, (:kw, (:(::), :negate, :Bool), false), (:kw, (:(::), :limit, :Int), 10000)), (:(::), :fun, :Function), (:(::), :dr, (:curly, :StepRange, (:<:, :TimeType)))), (:block,
            (:line, 477, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :depwarn
                )), "Dates.recur is deprecated, use filter instead.", (:quote, #QuoteNode
                :recur
              )),
            (:line, 478, :none),
            (:if, :negate, (:block,
                (:line, 479, :none),
                (:call, :filter, (:->, :x, (:block,
                      (:line, 479, :none),
                      (:call, :!, (:call, :fun, :x))
                    )), :dr)
              ), (:block,
                (:line, 481, :none),
                (:call, :filter, :fun, :dr)
              ))
          )),
        (:line, 484, :none),
        (:(=), (:call, (:curly, :recur, (:<:, :T, :TimeType)), (:parameters, (:kw, (:(::), :step, :Period), (:call, :Day, 1)), (:kw, (:(::), :negate, :Bool), false), (:kw, (:(::), :limit, :Int), 10000)), (:(::), :fun, :Function), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
            (:line, 484, :none),
            (:call, :recur, (:parameters, (:kw, :negate, :negate)), :fun, (:(:), :start, :step, :stop))
          ))
      )),
    (:line, 488, :none),
    (:function, (:call, :getindex, (:(::), :A, :LogicalIndex), (:(::), :i, :Int)), (:block,
        (:line, 489, :none),
        (:call, :depwarn, "getindex(A::LogicalIndex, i) is deprecated; use iteration or index into the result of `collect(A)` instead.", (:quote, #QuoteNode
            :getindex
          )),
        (:line, 490, :none),
        (:call, :checkbounds, :A, :i),
        (:line, 491, :none),
        (:call, :first, (:call, (:., :Iterators, (:quote, #QuoteNode
                :drop
              )), :A, (:call, :-, :i, 1)))
      )),
    (:line, 493, :none),
    (:function, (:call, :to_indexes, (:..., :I)), (:block,
        (:line, 494, :none),
        (:(=), :Istr, (:call, :join, :I, ", ")),
        (:line, 495, :none),
        (:call, :depwarn, (:string, "to_indexes is deprecated; pass both the source array `A` and indices as `to_indices(A, ", :Istr, ")` instead."), (:quote, #QuoteNode
            :to_indexes
          )),
        (:line, 496, :none),
        (:call, :map, :_to_index, :I)
      )),
    (:line, 498, :none),
    (:(=), (:call, :_to_index, :i), (:block,
        (:line, 498, :none),
        (:call, :to_index, :I)
      )),
    (:line, 499, :none),
    (:(=), (:call, :_to_index, (:(::), :c, :Colon)), (:block,
        (:line, 499, :none),
        :c
      )),
    (:line, 500, :none),
    (:const, (:(=), :_colon_usage_msg, "convert Colons to a set of indices for indexing into array `A` by passing them in a complete tuple of indices `I` to `to_indices(A, I)`")),
    (:line, 501, :none),
    (:function, (:call, :getindex, (:(::), :Colon), :i), (:block,
        (:line, 502, :none),
        (:call, :depwarn, (:string, "getindex(::Colon, i) is deprecated; ", :_colon_usage_msg), (:quote, #QuoteNode
            :getindex
          )),
        (:line, 503, :none),
        (:call, :to_index, :i)
      )),
    (:line, 505, :none),
    (:function, (:call, :unsafe_getindex, (:(::), :Colon), (:(::), :i, :Integer)), (:block,
        (:line, 506, :none),
        (:call, :depwarn, (:string, "getindex(::Colon, i) is deprecated; ", :_colon_usage_msg), (:quote, #QuoteNode
            :unsafe_getindex
          )),
        (:line, 507, :none),
        (:call, :to_index, :i)
      )),
    (:line, 509, :none),
    (:function, (:call, :step, (:(::), :Colon)), (:block,
        (:line, 510, :none),
        (:call, :depwarn, (:string, "step(::Colon) is deprecated; ", :_colon_usage_msg), (:quote, #QuoteNode
            :step
          )),
        (:line, 511, :none),
        1
      )),
    (:line, 513, :none),
    (:function, (:call, :isempty, (:(::), :Colon)), (:block,
        (:line, 514, :none),
        (:call, :depwarn, (:string, "isempty(::Colon) is deprecated; ", :_colon_usage_msg), (:quote, #QuoteNode
            :isempty
          )),
        (:line, 515, :none),
        false
      )),
    (:line, 517, :none),
    (:function, (:call, :in, (:(::), :Integer), (:(::), :Colon)), (:block,
        (:line, 518, :none),
        (:call, :depwarn, (:string, "in(::Integer, ::Colon) is deprecated; ", :_colon_usage_msg), (:quote, #QuoteNode
            :in
          )),
        (:line, 519, :none),
        true
      )),
    (:line, 523, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cummin, :A, (:kw, :dim, 1)), (:call, :accumulate, :min, :A, :dim)),
    (:line, 524, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :cummax, :A, (:kw, :dim, 1)), (:call, :accumulate, :max, :A, :dim)),
    (:line, 527, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sumabs, :x), (:call, :sum, :abs, :x)),
    (:line, 528, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sumabs, :A, :region), (:call, :sum, :abs, :A, :region)),
    (:line, 529, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sumabs2, :x), (:call, :sum, :abs2, :x)),
    (:line, 530, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sumabs2, :A, :region), (:call, :sum, :abs2, :A, :region)),
    (:line, 531, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :minabs, :x), (:call, :minimum, :abs, :x)),
    (:line, 532, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :minabs, :A, :region), (:call, :minimum, :abs, :A, :region)),
    (:line, 533, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :maxabs, :x), (:call, :maximum, :abs, :x)),
    (:line, 534, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :maxabs, :A, :region), (:call, :maximum, :abs, :A, :region)),
    (:line, 536, :none),
    (:for, (:(=), (:tuple, :dep, :f, :op), (:vect, (:tuple, (:quote, #QuoteNode
              :sumabs!
            ), (:quote, #QuoteNode
              :sum!
            ), (:quote, #QuoteNode
              :abs
            )), (:tuple, (:quote, #QuoteNode
              :sumabs2!
            ), (:quote, #QuoteNode
              :sum!
            ), (:quote, #QuoteNode
              :abs2
            )), (:tuple, (:quote, #QuoteNode
              :minabs!
            ), (:quote, #QuoteNode
              :minimum!
            ), (:quote, #QuoteNode
              :abs
            )), (:tuple, (:quote, #QuoteNode
              :maxabs!
            ), (:quote, #QuoteNode
              :maximum!
            ), (:quote, #QuoteNode
              :abs
            )))), (:block,
        (:line, 540, :none),
        (:macrocall, Symbol("@eval"), (:function, (:call, (:$, :dep), (:parameters, (:kw, :init, true)), :r, :A), (:block,
              (:line, 541, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :depwarn
                  )), (:string, :dep, "(r, A; init=", :init, ") is deprecated, use ", :f, "(", :op, ", r, A; init=", :init, ") instead."), (:call, :Symbol, (:$, :dep))),
              (:line, 542, :none),
              (:call, (:$, :f), (:parameters, (:kw, :init, :init)), (:$, :op), :r, :A)
            )))
      )),
    (:line, 547, :none),
    (:function, (:call, :gen_broadcast_function_sparse, (:(::), :genbody, :Function), (:(::), :f, :Function), (:(::), :is_first_sparse, :Bool)), (:block,
        (:line, 548, :none),
        (:(=), :body, (:call, :genbody, :f, :is_first_sparse)),
        (:line, 549, :none),
        (:macrocall, Symbol("@eval"), (:let, (:block,
              (:line, 550, :none),
              (:local, :_F_),
              (:line, 551, :none),
              (:function, (:call, (:curly, :_F_, :Tv, :Ti), (:(::), :B, (:curly, :SparseMatrixCSC, :Tv, :Ti)), :A_1, :A_2), (:block,
                  (:line, 552, :none),
                  (:$, :body)
                )),
              (:line, 554, :none),
              :_F_
            )))
      )),
    (:line, 557, :none),
    (:function, (:call, :gen_broadcast_body_zpreserving, (:(::), :f, :Function), (:(::), :is_first_sparse, :Bool)), (:block,
        (:line, 558, :none),
        (:(=), :F, (:call, :Expr, (:quote, #QuoteNode
              :quote
            ), :f)),
        (:line, 559, :none),
        (:if, :is_first_sparse, (:block,
            (:line, 560, :none),
            (:(=), :A1, (:quote, #QuoteNode
                :A_1
              )),
            (:line, 561, :none),
            (:(=), :A2, (:quote, #QuoteNode
                :A_2
              )),
            (:line, 562, :none),
            (:(=), :op1, (:quote, #QuoteNode
                :val1
              )),
            (:line, 563, :none),
            (:(=), :op2, (:quote, #QuoteNode
                :val2
              ))
          ), (:block,
            (:line, 565, :none),
            (:(=), :A1, (:quote, #QuoteNode
                :A_2
              )),
            (:line, 566, :none),
            (:(=), :A2, (:quote, #QuoteNode
                :A_1
              )),
            (:line, 567, :none),
            (:(=), :op1, (:quote, #QuoteNode
                :val2
              )),
            (:line, 568, :none),
            (:(=), :op2, (:quote, #QuoteNode
                :val1
              ))
          )),
        (:line, 570, :none),
        (:quote, (:block,
            (:line, 571, :none),
            (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Broadcast
                  )), (:quote, #QuoteNode
                  :check_broadcast_indices
                )), (:call, :indices, :B), (:$, :A1)),
            (:line, 572, :none),
            (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Broadcast
                  )), (:quote, #QuoteNode
                  :check_broadcast_indices
                )), (:call, :indices, :B), (:$, :A2)),
            (:line, 574, :none),
            (:(=), :nnzB, (:if, (:call, :isempty, :B), 0, (:call, :*, (:call, :nnz, (:$, :A1)), (:call, :div, (:., :B, (:quote, #QuoteNode
                        :n
                      )), (:., (:$, :A1), (:quote, #QuoteNode
                        :n
                      ))), (:call, :div, (:., :B, (:quote, #QuoteNode
                        :m
                      )), (:., (:$, :A1), (:quote, #QuoteNode
                        :m
                      )))))),
            (:line, 576, :none),
            (:if, (:call, :<, (:call, :length, (:., :B, (:quote, #QuoteNode
                      :rowval
                    ))), :nnzB), (:block,
                (:line, 577, :none),
                (:call, :resize!, (:., :B, (:quote, #QuoteNode
                      :rowval
                    )), :nnzB)
              )),
            (:line, 579, :none),
            (:if, (:call, :<, (:call, :length, (:., :B, (:quote, #QuoteNode
                      :nzval
                    ))), :nnzB), (:block,
                (:line, 580, :none),
                (:call, :resize!, (:., :B, (:quote, #QuoteNode
                      :nzval
                    )), :nnzB)
              )),
            (:line, 582, :none),
            (:(=), :z, (:call, :zero, :Tv)),
            (:line, 584, :none),
            (:(=), :ptrB, 1),
            (:line, 585, :none),
            (:(=), (:ref, (:., :B, (:quote, #QuoteNode
                    :colptr
                  )), 1), 1),
            (:line, 587, :none),
            (:macrocall, Symbol("@inbounds"), (:for, (:(=), :col, (:(:), 1, (:., :B, (:quote, #QuoteNode
                        :n
                      )))), (:block,
                  (:line, 588, :none),
                  (:(=), (:(::), :ptr1, :Int), (:if, (:call, :(==), (:., (:$, :A1), (:quote, #QuoteNode
                            :n
                          )), 1), (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                            :colptr
                          )), 1), (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                            :colptr
                          )), :col))),
                  (:line, 589, :none),
                  (:(=), (:(::), :stop1, :Int), (:if, (:call, :(==), (:., (:$, :A1), (:quote, #QuoteNode
                            :n
                          )), 1), (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                            :colptr
                          )), 2), (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                            :colptr
                          )), (:call, :+, :col, 1)))),
                  (:line, 590, :none),
                  (:(=), :col2, (:if, (:call, :(==), (:call, :size, (:$, :A2), 2), 1), 1, :col)),
                  (:line, 591, :none),
                  (:(=), :row, 1),
                  (:line, 592, :none),
                  (:while, (:&&, (:call, :<, :ptr1, :stop1), (:call, :(<=), :row, (:., :B, (:quote, #QuoteNode
                            :m
                          )))), (:block,
                      (:line, 593, :none),
                      (:if, (:call, :(!=), (:., (:$, :A1), (:quote, #QuoteNode
                              :m
                            )), 1), (:block,
                          (:line, 594, :none),
                          (:(=), :row, (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                                  :rowval
                                )), :ptr1))
                        )),
                      (:line, 596, :none),
                      (:(=), :row2, (:if, (:call, :(==), (:call, :size, (:$, :A2), 1), 1), 1, :row)),
                      (:line, 597, :none),
                      (:(=), :val1, (:ref, (:., (:$, :A1), (:quote, #QuoteNode
                              :nzval
                            )), :ptr1)),
                      (:line, 598, :none),
                      (:(=), :val2, (:ref, (:$, :A2), :row2, :col2)),
                      (:line, 599, :none),
                      (:(=), :res, (:call, (:$, :F), (:$, :op1), (:$, :op2))),
                      (:line, 600, :none),
                      (:if, (:call, :(!=), :res, :z), (:block,
                          (:line, 601, :none),
                          (:(=), (:ref, (:., :B, (:quote, #QuoteNode
                                  :rowval
                                )), :ptrB), :row),
                          (:line, 602, :none),
                          (:(=), (:ref, (:., :B, (:quote, #QuoteNode
                                  :nzval
                                )), :ptrB), :res),
                          (:line, 603, :none),
                          (:+=, :ptrB, 1)
                        )),
                      (:line, 605, :none),
                      (:if, (:call, :(!=), (:., (:$, :A1), (:quote, #QuoteNode
                              :m
                            )), 1), (:block,
                          (:line, 606, :none),
                          (:+=, :ptr1, 1)
                        ), (:block,
                          (:line, 608, :none),
                          (:+=, :row, 1)
                        ))
                    )),
                  (:line, 611, :none),
                  (:(=), (:ref, (:., :B, (:quote, #QuoteNode
                          :colptr
                        )), (:call, :+, :col, 1)), :ptrB)
                ))),
            (:line, 613, :none),
            (:call, :deleteat!, (:., :B, (:quote, #QuoteNode
                  :rowval
                )), (:(:), (:ref, (:., :B, (:quote, #QuoteNode
                      :colptr
                    )), :end), (:call, :length, (:., :B, (:quote, #QuoteNode
                      :rowval
                    ))))),
            (:line, 614, :none),
            (:call, :deleteat!, (:., :B, (:quote, #QuoteNode
                  :nzval
                )), (:(:), (:ref, (:., :B, (:quote, #QuoteNode
                      :colptr
                    )), :end), (:call, :length, (:., :B, (:quote, #QuoteNode
                      :nzval
                    ))))),
            (:line, 615, :none),
            :nothing
          ))
      )),
    (:line, 618, :none),
    (:for, (:(=), (:tuple, :Bsig, :A1sig, :A2sig, :gbb, :funcname), (:tuple, (:tuple, :SparseMatrixCSC, :SparseMatrixCSC, :Array, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )), (:tuple, :SparseMatrixCSC, :Array, :SparseMatrixCSC, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )), (:tuple, :SparseMatrixCSC, :Number, :SparseMatrixCSC, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )), (:tuple, :SparseMatrixCSC, :SparseMatrixCSC, :Number, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )), (:tuple, :SparseMatrixCSC, :BitArray, :SparseMatrixCSC, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )), (:tuple, :SparseMatrixCSC, :SparseMatrixCSC, :BitArray, (:quote, #QuoteNode
              :gen_broadcast_body_zpreserving
            ), (:quote, #QuoteNode
              :_broadcast_zpreserving!
            )))), (:block,
        (:line, 627, :none),
        (:macrocall, Symbol("@eval"), (:let, (:block,
              (:line, 628, :none),
              (:global, (:$, :funcname)),
              (:line, 629, :none),
              (:function, (:call, (:$, :funcname), (:(::), :f, :Function), (:(::), :B, (:$, :Bsig)), (:(::), :A1, (:$, :A1sig)), (:(::), :A2, (:$, :A2sig))), (:block,
                  (:line, 630, :none),
                  (:(=), :func, (:macrocall, Symbol("@get!"), :cache, :f, (:call, :gen_broadcast_function_sparse, (:$, :gbb), :f, (:<:, (:$, :A1sig), :SparseMatrixCSC)))),
                  (:line, 633, :none),
                  (:call, :eval, (:call, :current_module), (:call, :Expr, (:quote, #QuoteNode
                        :body
                      ), (:call, :Expr, (:quote, #QuoteNode
                          :return
                        ), (:call, :Expr, (:quote, #QuoteNode
                            :call
                          ), (:call, :QuoteNode, :func), (:call, :QuoteNode, :B), (:call, :QuoteNode, :A1), (:call, :QuoteNode, :A2))))),
                  (:line, 634, :none),
                  (:return, :B)
                ))
            ), (:(=), :cache, (:call, (:curly, :Dict, :Function, :Function)))))
      )),
    (:line, 638, :none),
    (:(=), (:call, :_broadcast_zpreserving!, (:..., :args)), (:block,
        (:line, 638, :none),
        (:call, :broadcast!, (:..., :args))
      )),
    (:line, 640, :none),
    (:(=), (:call, :_broadcast_zpreserving, :f, (:..., :As)), (:block,
        (:line, 640, :none),
        (:call, :broadcast!, :f, (:call, :similar, (:curly, :Array, (:call, :_promote_eltype_op, :f, (:..., :As))), (:call, (:., (:., :Base, (:quote, #QuoteNode
                    :Broadcast
                  )), (:quote, #QuoteNode
                  :broadcast_indices
                )), (:..., :As))), (:..., :As))
      )),
    (:line, 642, :none),
    (:(=), (:where, (:call, :_broadcast_zpreserving, (:(::), :f, :Function), (:(::), :A_1, (:curly, :SparseMatrixCSC, :Tv1, :Ti1)), (:(::), :A_2, (:curly, :SparseMatrixCSC, :Tv2, :Ti2))), :Tv1, :Ti1, :Tv2, :Ti2), (:block,
        (:line, 642, :none),
        (:call, :_broadcast_zpreserving!, :f, (:call, :spzeros, (:call, :promote_type, :Tv1, :Tv2), (:call, :promote_type, :Ti1, :Ti2), (:call, (:., :Base, (:quote, #QuoteNode
                  :to_shape
                )), (:call, (:., (:., :Base, (:quote, #QuoteNode
                      :Broadcast
                    )), (:quote, #QuoteNode
                    :broadcast_indices
                  )), :A_1, :A_2))), :A_1, :A_2)
      )),
    (:line, 644, :none),
    (:(=), (:where, (:call, :_broadcast_zpreserving, (:(::), :f, :Function), (:(::), :A_1, (:curly, :SparseMatrixCSC, (:<:, :Any), :Ti)), (:(::), :A_2, (:curly, :Union, :Array, :BitArray, :Number))), :Ti), (:block,
        (:line, 644, :none),
        (:call, :_broadcast_zpreserving!, :f, (:call, :spzeros, (:call, :promote_eltype, :A_1, :A_2), :Ti, (:call, (:., :Base, (:quote, #QuoteNode
                  :to_shape
                )), (:call, (:., (:., :Base, (:quote, #QuoteNode
                      :Broadcast
                    )), (:quote, #QuoteNode
                    :broadcast_indices
                  )), :A_1, :A_2))), :A_1, :A_2)
      )),
    (:line, 646, :none),
    (:(=), (:where, (:call, :_broadcast_zpreserving, (:(::), :f, :Function), (:(::), :A_1, (:curly, :Union, :Array, :BitArray, :Number)), (:(::), :A_2, (:curly, :SparseMatrixCSC, (:<:, :Any), :Ti))), :Ti), (:block,
        (:line, 646, :none),
        (:call, :_broadcast_zpreserving!, :f, (:call, :spzeros, (:call, :promote_eltype, :A_1, :A_2), :Ti, (:call, (:., :Base, (:quote, #QuoteNode
                  :to_shape
                )), (:call, (:., (:., :Base, (:quote, #QuoteNode
                      :Broadcast
                    )), (:quote, #QuoteNode
                    :broadcast_indices
                  )), :A_1, :A_2))), :A_1, :A_2)
      )),
    (:line, 649, :none),
    (:function, (:call, :_depstring_bczpres), (:block,
        (:line, 650, :none),
        (:return, (:call, :string, "broadcast_zpreserving[!] is deprecated. Generic sparse broadcast[!] ", "provides most of broadcast_zpreserving[!]'s functionality. If you have a use case ", "that generic sparse broadcast[!] does not cover, please describe your use case in ", " issue #19533 (https://github.com/JuliaLang/julia/issues/19533)."))
      )),
    (:line, 655, :none),
    (:function, (:call, :_depwarn_bczpres, :f, (:..., :args)), (:block,
        (:line, 656, :none),
        (:call, :depwarn, (:call, :_depstring_bczpres), (:quote, #QuoteNode
            :broadcast_zpreserving
          )),
        (:line, 657, :none),
        (:return, (:call, :_broadcast_zpreserving, :f, (:..., :args)))
      )),
    (:line, 659, :none),
    (:function, (:call, :_depwarn_bczpres!, :f, (:..., :args)), (:block,
        (:line, 660, :none),
        (:call, :depwarn, (:call, :_depstring_bczpres), (:quote, #QuoteNode
            :broadcast_zpreserving!
          )),
        (:line, 661, :none),
        (:return, (:call, :_broadcast_zpreserving!, :f, (:..., :args)))
      )),
    (:line, 663, :none),
    (:macrocall, Symbol("@eval"), :SparseArrays, (:block,
        (:line, 664, :none),
        (:(=), (:call, :broadcast_zpreserving, :f, (:..., :args)), (:block,
            (:line, 664, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres
                )), :f, (:..., :args))
          )),
        (:line, 665, :none),
        (:(=), (:call, :broadcast_zpreserving, :f, (:(::), :A, :SparseMatrixCSC), (:(::), :B, :SparseMatrixCSC)), (:block,
            (:line, 665, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres
                )), :f, :A, :B)
          )),
        (:line, 666, :none),
        (:(=), (:call, :broadcast_zpreserving, :f, (:(::), :A, :SparseMatrixCSC), (:(::), :B, (:curly, :Union, :Array, :BitArray, :Number))), (:block,
            (:line, 666, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres
                )), :f, :A, :B)
          )),
        (:line, 667, :none),
        (:(=), (:call, :broadcast_zpreserving, :f, (:(::), :A, (:curly, :Union, :Array, :BitArray, :Number)), (:(::), :B, :SparseMatrixCSC)), (:block,
            (:line, 667, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres
                )), :f, :A, :B)
          )),
        (:line, 668, :none),
        (:(=), (:call, :broadcast_zpreserving!, :f, (:..., :args)), (:block,
            (:line, 668, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres!
                )), :f, (:..., :args))
          )),
        (:line, 669, :none),
        (:(=), (:call, :broadcast_zpreserving!, :f, (:(::), :C, :SparseMatrixCSC), (:(::), :A, :SparseMatrixCSC), (:(::), :B, (:curly, :Union, :Array, :BitArray, :Number))), (:block,
            (:line, 669, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres!
                )), :f, :C, :A, :B)
          )),
        (:line, 670, :none),
        (:(=), (:call, :broadcast_zpreserving!, :f, (:(::), :C, :SparseMatrixCSC), (:(::), :A, (:curly, :Union, :Array, :BitArray, :Number)), (:(::), :B, :SparseMatrixCSC)), (:block,
            (:line, 670, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :_depwarn_bczpres!
                )), :f, :C, :A, :B)
          ))
      )),
    (:line, 674, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :getindex, (:(::), :t, :Tuple), (:(::), :r, :AbstractArray)), (:call, :getindex, :t, (:call, :vec, :r))),
    (:line, 675, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :getindex, (:(::), :t, :Tuple), (:(::), :b, (:curly, :AbstractArray, :Bool))), (:call, :getindex, :t, (:call, :vec, :b))),
    (:line, 678, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isimag, (:(::), :z, :Number)), (:call, :iszero, (:call, :real, :z))),
    (:line, 681, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :xor, (:(::), :a, :Bool), (:(::), :B, :BitArray)), (:., :xor, (:tuple, :a, :B))),
    (:line, 682, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :xor, (:(::), :A, :BitArray), (:(::), :b, :Bool)), (:., :xor, (:tuple, :A, :b))),
    (:line, 683, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :xor, (:(::), :a, :Number), (:(::), :B, :AbstractArray)), (:., :xor, (:tuple, :a, :B))),
    (:line, 684, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :xor, (:(::), :A, :AbstractArray), (:(::), :b, :Number)), (:., :xor, (:tuple, :A, :b))),
    (:line, 685, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :xor, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:., :xor, (:tuple, :A, :B))),
    (:line, 688, :none),
    (:function, (:call, :quadgk, (:parameters, (:..., :kwargs)), (:..., :args)), (:block,
        (:line, 689, :none),
        (:call, :error, (:call, :string, :quadgk, :args, " has been moved to the package QuadGK.jl.\n", "Run Pkg.add(\"QuadGK\") to install QuadGK on Julia v0.6 and later, and then run `using QuadGK`."))
      )),
    (:line, 692, :none),
    (:export, :quadgk),
    (:line, 695, :none),
    (:module, true, :Collections, (:block,
        (:line, 695, :none),
        (:line, 696, :none),
        (:export, :PriorityQueue, :enqueue!, :dequeue!, :heapify!, :heapify, :heappop!, :heappush!, :isheap, :peek),
        (:line, 697, :none),
        (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
                :PriorityQueue
              ), (:quote, #QuoteNode
                :enqueue!
              ), (:quote, #QuoteNode
                :dequeue!
              ), (:quote, #QuoteNode
                :heapify!
              ), (:quote, #QuoteNode
                :heapify
              ), (:quote, #QuoteNode
                :heappop!
              ), (:quote, #QuoteNode
                :heappush!
              ), (:quote, #QuoteNode
                :isheap
              ), (:quote, #QuoteNode
                :peek
              ))), (:block,
            (:line, 698, :none),
            (:macrocall, Symbol("@eval"), (:function, (:call, (:$, :f), (:parameters, (:..., :kwargs)), (:..., :args)), (:block,
                  (:line, 699, :none),
                  (:call, :error, (:call, :string, (:$, :f), :args, " has been moved to the package DataStructures.jl.\n", "Run Pkg.add(\"DataStructures\") to install DataStructures on Julia v0.6 and later, ", "and then run `using DataStructures`."))
                )))
          ))
      )),
    (:line, 705, :none),
    (:export, :Collections),
    (:line, 708, :none),
    (:macrocall, Symbol("@deprecate"), :bitbroadcast, :broadcast),
    (:line, 711, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :map!, :F), (:(::), :f, :F), (:(::), :A, :AbstractArray)), (:call, :map!, :f, :A, :A)),
    (:line, 712, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :asyncmap!, (:parameters, (:kw, :ntasks, 0), (:kw, :batch_size, :nothing)), :f, :c), (:call, :asyncmap!, (:parameters, (:kw, :ntasks, :ntasks), (:kw, :batch_size, :batch_size)), :f, :c, :c)),
    (:line, 715, :none),
    (:(=), (:call, :_promote_array_type, :F, (:(::), :Type), (:(::), :Type), (:(::), :T, :Type)), (:block,
        (:line, 715, :none),
        :T
      )),
    (:line, 716, :none),
    (:(=), (:call, (:curly, :_promote_array_type, (:<:, :A, :AbstractFloat)), :F, (:(::), (:curly, :Type, (:<:, :Real))), (:(::), (:curly, :Type, :A)), (:(::), :Type)), (:block,
        (:line, 716, :none),
        :A
      )),
    (:line, 717, :none),
    (:(=), (:call, (:curly, :_promote_array_type, (:<:, :A, :Integer)), :F, (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, :A)), (:(::), :Type)), (:block,
        (:line, 717, :none),
        :A
      )),
    (:line, 718, :none),
    (:(=), (:call, :_promote_array_type, (:(::), (:call, :typeof, :/)), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), :T, :Type)), (:block,
        (:line, 718, :none),
        :T
      )),
    (:line, 719, :none),
    (:(=), (:call, :_promote_array_type, (:(::), (:call, :typeof, :\)), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), :T, :Type)), (:block,
        (:line, 719, :none),
        :T
      )),
    (:line, 720, :none),
    (:(=), (:call, :_promote_array_type, (:(::), (:call, :typeof, :/)), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, :Bool)), (:(::), :T, :Type)), (:block,
        (:line, 720, :none),
        :T
      )),
    (:line, 721, :none),
    (:(=), (:call, :_promote_array_type, (:(::), (:call, :typeof, :\)), (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, :Bool)), (:(::), :T, :Type)), (:block,
        (:line, 721, :none),
        :T
      )),
    (:line, 722, :none),
    (:(=), (:call, :_promote_array_type, :F, (:(::), (:curly, :Type, (:<:, :Integer))), (:(::), (:curly, :Type, :Bool)), (:(::), :T, :Type)), (:block,
        (:line, 722, :none),
        :T
      )),
    (:line, 723, :none),
    (:(=), (:call, (:curly, :_promote_array_type, (:<:, :T, :AbstractFloat)), :F, (:(::), (:curly, :Type, (:<:, (:curly, :Union, :Complex, :Real)))), (:(::), (:curly, :Type, (:curly, :Complex, :T))), (:(::), :Type)), (:block,
        (:line, 723, :none),
        (:curly, :Complex, :T)
      )),
    (:line, 724, :none),
    (:function, (:call, :promote_array_type, :F, :R, :S, :T), (:block,
        (:line, 725, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), (:call, :*, "`promote_array_type` is deprecated as it is no longer needed ", "in Base. See https://github.com/JuliaLang/julia/issues/19669 ", "for more information."), (:quote, #QuoteNode
            :promote_array_type
          )),
        (:line, 728, :none),
        (:call, :_promote_array_type, :F, :R, :S, :T)
      )),
    (:line, 732, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :abs2, (:(::), :x, :AbstractSparseVector)), (:., :abs2, (:tuple, :x))),
    (:line, 735, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :sign, (:(::), :A, :AbstractArray)), (:., :sign, (:tuple, :A))),
    (:line, 738, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :sec
          ), (:quote, #QuoteNode
            :sech
          ), (:quote, #QuoteNode
            :secd
          ), (:quote, #QuoteNode
            :asec
          ), (:quote, #QuoteNode
            :asech
          ), (:quote, #QuoteNode
            :csc
          ), (:quote, #QuoteNode
            :csch
          ), (:quote, #QuoteNode
            :cscd
          ), (:quote, #QuoteNode
            :acsc
          ), (:quote, #QuoteNode
            :acsch
          ), (:quote, #QuoteNode
            :cot
          ), (:quote, #QuoteNode
            :coth
          ), (:quote, #QuoteNode
            :cotd
          ), (:quote, #QuoteNode
            :acot
          ), (:quote, #QuoteNode
            :acoth
          ))), (:block,
        (:line, 741, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :A, (:curly, :AbstractArray, (:<:, :Number)))), (:., (:$, :f), (:tuple, :A))))
      )),
    (:line, 745, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :complex, (:(::), :A, :AbstractArray), (:(::), :b, :Real)), (:., :complex, (:tuple, :A, :b))),
    (:line, 746, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :complex, (:(::), :a, :Real), (:(::), :B, :AbstractArray)), (:., :complex, (:tuple, :a, :B))),
    (:line, 747, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :complex, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:., :complex, (:tuple, :A, :B))),
    (:line, 750, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :clamp, (:(::), :A, :AbstractArray), :lo, :hi), (:., :clamp, (:tuple, :A, :lo, :hi))),
    (:line, 753, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :round, (:(::), :M, :Bidiagonal)), (:., :round, (:tuple, :M))),
    (:line, 754, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :round, (:(::), :M, :Tridiagonal)), (:., :round, (:tuple, :M))),
    (:line, 755, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :round, (:(::), :M, :SymTridiagonal)), (:., :round, (:tuple, :M))),
    (:line, 756, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractArray)), (:., :round, (:tuple, :T, :x))),
    (:line, 757, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :round, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractArray), (:(::), :r, :RoundingMode)), (:., :round, (:tuple, :T, :x, :r))),
    (:line, 758, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :round, (:(::), :x, :AbstractArray), (:(::), :r, :RoundingMode)), (:., :round, (:tuple, :x, :r))),
    (:line, 759, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :round, (:(::), :x, :AbstractArray), (:(::), :digits, :Integer), (:kw, (:(::), :base, :Integer), 10)), (:., :round, (:tuple, :x, :digits, :base))),
    (:line, 762, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :trunc, (:(::), :M, :Bidiagonal)), (:., :trunc, (:tuple, :M))),
    (:line, 763, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :trunc, (:(::), :M, :Tridiagonal)), (:., :trunc, (:tuple, :M))),
    (:line, 764, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :trunc, (:(::), :M, :SymTridiagonal)), (:., :trunc, (:tuple, :M))),
    (:line, 765, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :trunc, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractArray)), (:., :trunc, (:tuple, :T, :x))),
    (:line, 766, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :trunc, (:(::), :x, :AbstractArray), (:(::), :digits, :Integer), (:kw, (:(::), :base, :Integer), 10)), (:., :trunc, (:tuple, :x, :digits, :base))),
    (:line, 769, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :floor, (:(::), :M, :Bidiagonal)), (:., :floor, (:tuple, :M))),
    (:line, 770, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :floor, (:(::), :M, :Tridiagonal)), (:., :floor, (:tuple, :M))),
    (:line, 771, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :floor, (:(::), :M, :SymTridiagonal)), (:., :floor, (:tuple, :M))),
    (:line, 772, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :floor, :T), (:(::), (:curly, :Type, :T)), (:(::), :A, :AbstractArray)), (:., :floor, (:tuple, :T, :A))),
    (:line, 773, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :floor, (:(::), :A, :AbstractArray), (:(::), :digits, :Integer), (:kw, (:(::), :base, :Integer), 10)), (:., :floor, (:tuple, :A, :digits, :base))),
    (:line, 776, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ceil, (:(::), :M, :Bidiagonal)), (:., :ceil, (:tuple, :M))),
    (:line, 777, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ceil, (:(::), :M, :Tridiagonal)), (:., :ceil, (:tuple, :M))),
    (:line, 778, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ceil, (:(::), :M, :SymTridiagonal)), (:., :ceil, (:tuple, :M))),
    (:line, 779, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :ceil, :T), (:(::), (:curly, :Type, :T)), (:(::), :x, :AbstractArray)), (:., :ceil, (:tuple, :T, :x))),
    (:line, 780, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ceil, (:(::), :x, :AbstractArray), (:(::), :digits, :Integer), (:kw, (:(::), :base, :Integer), 10)), (:., :ceil, (:tuple, :x, :digits, :base))),
    (:line, 783, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :r, :UnitRange)), (:., :big, (:tuple, :r))),
    (:line, 784, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :r, :StepRange)), (:., :big, (:tuple, :r))),
    (:line, 785, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :r, :StepRangeLen)), (:., :big, (:tuple, :r))),
    (:line, 786, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :r, :LinSpace)), (:., :big, (:tuple, :r))),
    (:line, 787, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :x, (:curly, :AbstractArray, (:<:, :Integer)))), (:., :big, (:tuple, :x))),
    (:line, 788, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :x, (:curly, :AbstractArray, (:<:, :AbstractFloat)))), (:., :big, (:tuple, :x))),
    (:line, 789, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, :LowerTriangular)), (:., :big, (:tuple, :A))),
    (:line, 790, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, :UpperTriangular)), (:., :big, (:tuple, :A))),
    (:line, 791, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :UnitLowerTriangular
            )))), (:., :big, (:tuple, :A))),
    (:line, 792, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, (:., (:., :Base, (:quote, #QuoteNode
                :LinAlg
              )), (:quote, #QuoteNode
              :UnitUpperTriangular
            )))), (:., :big, (:tuple, :A))),
    (:line, 793, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :B, :Bidiagonal)), (:., :big, (:tuple, :B))),
    (:line, 794, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, (:curly, :AbstractArray, (:<:, (:curly, :Complex, (:<:, :Integer)))))), (:., :big, (:tuple, :A))),
    (:line, 795, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :A, (:curly, :AbstractArray, (:<:, (:curly, :Complex, (:<:, :AbstractFloat)))))), (:., :big, (:tuple, :A))),
    (:line, 796, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :big, (:(::), :x, (:curly, :AbstractArray, (:<:, (:curly, :Complex, (:<:, (:curly, :Rational, (:<:, :Integer)))))))), (:., :big, (:tuple, :A))),
    (:line, 799, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :div, (:(::), :A, :Number), (:(::), :B, :AbstractArray)), (:., :div, (:tuple, :A, :B))),
    (:line, 800, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :div, (:(::), :A, :AbstractArray), (:(::), :B, :Number)), (:., :div, (:tuple, :A, :B))),
    (:line, 801, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :div, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:., :div, (:tuple, :A, :B))),
    (:line, 804, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :rem, (:(::), :A, :Number), (:(::), :B, :AbstractArray)), (:., :rem, (:tuple, :A, :B))),
    (:line, 805, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :rem, (:(::), :A, :AbstractArray), (:(::), :B, :Number)), (:., :rem, (:tuple, :A, :B))),
    (:line, 808, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :div, (:<:, :P, (:., :Dates, (:quote, #QuoteNode
                :Period
              )))), (:(::), :X, (:curly, :StridedArray, :P)), (:(::), :y, :P)), (:., :div, (:tuple, :X, :y))),
    (:line, 809, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :div, (:(::), :X, (:curly, :StridedArray, (:<:, (:., :Dates, (:quote, #QuoteNode
                  :Period
                ))))), (:(::), :y, :Integer)), (:., :div, (:tuple, :X, :y))),
    (:line, 810, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :%, (:<:, :P, (:., :Dates, (:quote, #QuoteNode
                :Period
              )))), (:(::), :X, (:curly, :StridedArray, :P)), (:(::), :y, :P)), (:call, :.%, :X, :y)),
    (:line, 811, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :mod, (:<:, :P, (:., :Dates, (:quote, #QuoteNode
                :Period
              )))), (:(::), :X, (:curly, :StridedArray, :P)), (:(::), :y, :P)), (:., :mod, (:tuple, :X, :y))),
    (:line, 814, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :mod, (:(::), :B, :BitArray), (:(::), :x, :Bool)), (:., :mod, (:tuple, :B, :x))),
    (:line, 815, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :mod, (:(::), :x, :Bool), (:(::), :B, :BitArray)), (:., :mod, (:tuple, :x, :B))),
    (:line, 816, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :mod, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:., :mod, (:tuple, :A, :B))),
    (:line, 817, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :mod, (:(::), :x, :Number), (:(::), :A, :AbstractArray)), (:., :mod, (:tuple, :x, :A))),
    (:line, 818, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :mod, (:(::), :A, :AbstractArray), (:(::), :x, :Number)), (:., :mod, (:tuple, :A, :x))),
    (:line, 821, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :&, (:(::), :a, :Bool), (:(::), :B, :BitArray)), (:call, :.&, :a, :B)),
    (:line, 822, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :&, (:(::), :A, :BitArray), (:(::), :b, :Bool)), (:call, :.&, :A, :b)),
    (:line, 823, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :&, (:(::), :a, :Number), (:(::), :B, :AbstractArray)), (:call, :.&, :a, :B)),
    (:line, 824, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :&, (:(::), :A, :AbstractArray), (:(::), :b, :Number)), (:call, :.&, :A, :b)),
    (:line, 825, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :&, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:call, :.&, :A, :B)),
    (:line, 828, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :|, (:(::), :a, :Bool), (:(::), :B, :BitArray)), (:call, :.|, :a, :B)),
    (:line, 829, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :|, (:(::), :A, :BitArray), (:(::), :b, :Bool)), (:call, :.|, :A, :b)),
    (:line, 830, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :|, (:(::), :a, :Number), (:(::), :B, :AbstractArray)), (:call, :.|, :a, :B)),
    (:line, 831, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :|, (:(::), :A, :AbstractArray), (:(::), :b, :Number)), (:call, :.|, :A, :b)),
    (:line, 832, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :|, (:(::), :A, :AbstractArray), (:(::), :B, :AbstractArray)), (:call, :.|, :A, :B)),
    (:line, 835, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), :x, :y), (:., :ifelse, (:tuple, :c, :x, :y))),
    (:line, 836, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), :x, (:(::), :y, :AbstractArray)), (:., :ifelse, (:tuple, :c, :x, :y))),
    (:line, 837, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), (:(::), :x, :AbstractArray), :y), (:., :ifelse, (:tuple, :c, :x, :y))),
    (:line, 838, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :ifelse, (:(::), :c, (:curly, :AbstractArray, :Bool)), (:(::), :x, :AbstractArray), (:(::), :y, :AbstractArray)), (:., :ifelse, (:tuple, :c, :x, :y))),
    (:line, 841, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :!, (:(::), :A, (:curly, :AbstractArray, :Bool))), (:call, :.!, :A)),
    (:line, 842, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :!, (:(::), :B, :BitArray)), (:call, :.!, :B)),
    (:line, 843, :none),
    (:(=), (:call, :!, (:(::), (:call, :typeof, (:->, (:tuple,), (:block,
                (:line, 843, :none),
                (:tuple,)
              ))))), (:block,
        (:line, 843, :none),
        (:tuple,)
      )),
    (:line, 846, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :~, (:(::), :A, :AbstractArray)), (:call, :.~, :A)),
    (:line, 847, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :~, (:(::), :B, :BitArray)), (:call, :.~, :B)),
    (:line, 849, :none),
    (:function, (:call, :frexp, (:(::), :A, (:curly, :Array, (:<:, :AbstractFloat)))), (:block,
        (:line, 850, :none),
        (:call, :depwarn, (:call, :string, "`frexp(x::Array)` is discontinued. Though not a direct replacement, ", "consider using dot-syntax to `broadcast` scalar `frexp` over `Array`s ", "instead, for example `frexp.(rand(4))`."), (:quote, #QuoteNode
            :frexp
          )),
        (:line, 853, :none),
        (:(=), :F, (:call, :similar, :A)),
        (:line, 854, :none),
        (:(=), :E, (:call, (:curly, :Array, :Int), (:call, :size, :A))),
        (:line, 855, :none),
        (:for, (:(=), (:tuple, :iF, :iE, :iA), (:call, :zip, (:call, :eachindex, :F), (:call, :eachindex, :E), (:call, :eachindex, :A))), (:block,
            (:line, 856, :none),
            (:(=), (:tuple, (:ref, :F, :iF), (:ref, :E, :iE)), (:call, :frexp, (:ref, :A, :iA)))
          )),
        (:line, 858, :none),
        (:return, (:tuple, :F, :E))
      )),
    (:line, 862, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :isinteger, (:(::), :A, :AbstractArray)), (:call, :all, :isinteger, :A)),
    (:line, 865, :none),
    (:(=), (:call, :_promote_eltype_op, (:(::), :Any)), (:block,
        (:line, 865, :none),
        :Any
      )),
    (:line, 866, :none),
    (:(=), (:call, :_promote_eltype_op, :op, :A), (:block,
        (:line, 866, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :promote_op, :op, (:call, :eltype, :A))
        )
      )),
    (:line, 867, :none),
    (:(=), (:call, :_promote_eltype_op, :op, :A, :B), (:block,
        (:line, 867, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :promote_op, :op, (:call, :eltype, :A), (:call, :eltype, :B))
        )
      )),
    (:line, 868, :none),
    (:(=), (:call, :_promote_eltype_op, :op, :A, :B, :C, (:..., :D)), (:block,
        (:line, 868, :none),
        (:block,
          (:macrocall, Symbol("@_inline_meta")),
          (:call, :_promote_eltype_op, :op, (:call, :eltype, :A), (:call, :_promote_eltype_op, :op, :B, :C, (:..., :D)))
        )
      )),
    (:line, 869, :none),
    (:macrocall, Symbol("@inline"), (:function, (:call, :promote_eltype_op, (:..., :args)), (:block,
          (:line, 870, :none),
          (:call, :depwarn, "`promote_eltype_op` is deprecated and should not be used.\nSee https://github.com/JuliaLang/julia/issues/19669.", (:quote, #QuoteNode
              :promote_eltype_op
            )),
          (:line, 874, :none),
          (:call, :_promote_eltype_op, (:..., :args))
        ))),
    (:line, 878, :none),
    (:function, (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, (:curly, :Union, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :Int8))), (:(::), :len, :Integer), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 879, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :depwarn
            )), "unsafe_wrap(String, ...) is deprecated; use `unsafe_string` instead.", (:quote, #QuoteNode
            :unsafe_wrap
          )),
        (:line, 883, :none),
        (:call, :unsafe_string, :p, :len)
      )),
    (:line, 885, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, (:curly, :Union, (:curly, :Ptr, :UInt8), (:curly, :Ptr, :Int8))), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 885, :none),
        (:call, :unsafe_wrap, :String, :p, (:call, :ccall, (:quote, #QuoteNode
              :strlen
            ), :Csize_t, (:tuple, (:curly, :Ptr, :UInt8)), :p), :own)
      )),
    (:line, 887, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, :Cstring), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 887, :none),
        (:call, :unsafe_wrap, :String, (:call, :convert, (:curly, :Ptr, :UInt8), :p), :own)
      )),
    (:line, 888, :none),
    (:(=), (:call, :unsafe_wrap, (:(::), (:curly, :Type, :String)), (:(::), :p, :Cstring), (:(::), :len, :Integer), (:kw, (:(::), :own, :Bool), false)), (:block,
        (:line, 888, :none),
        (:call, :unsafe_wrap, :String, (:call, :convert, (:curly, :Ptr, :UInt8), :p), :len, :own)
      )),
    (:line, 892, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :finalize, (:(::), :sa, (:., :LibGit2, (:quote, #QuoteNode
              :StrArrayStruct
            )))), (:call, (:., :LibGit2, (:quote, #QuoteNode
            :free
          )), :sa)),
    (:line, 893, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :finalize, (:(::), :sa, (:., :LibGit2, (:quote, #QuoteNode
              :Buffer
            )))), (:call, (:., :LibGit2, (:quote, #QuoteNode
            :free
          )), :sa)),
    (:line, 899, :none),
    (:function, (:call, :produce, :v), (:block,
        (:line, 900, :none),
        (:call, :depwarn, "produce is now deprecated. Use Channels for inter-task communication.", (:quote, #QuoteNode
            :produce
          )),
        (:line, 902, :none),
        (:(=), :ct, (:call, :current_task)),
        (:line, 903, :none),
        (:local, :empty, :t, :q),
        (:line, 904, :none),
        (:while, true, (:block,
            (:line, 905, :none),
            (:(=), :q, (:., :ct, (:quote, #QuoteNode
                  :consumers
                ))),
            (:line, 906, :none),
            (:if, (:call, :isa, :q, :Task), (:block,
                (:line, 907, :none),
                (:(=), :t, :q),
                (:line, 908, :none),
                (:(=), (:., :ct, (:quote, #QuoteNode
                      :consumers
                    )), :nothing),
                (:line, 909, :none),
                (:(=), :empty, true),
                (:line, 910, :none),
                (:break,)
              ), (:block,
                (:line, 911, :none),
                (:if, (:&&, (:call, :isa, :q, :Condition), (:call, :!, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                            :waitq
                          ))))), (:block,
                    (:line, 912, :none),
                    (:(=), :t, (:call, :shift!, (:., :q, (:quote, #QuoteNode
                            :waitq
                          )))),
                    (:line, 913, :none),
                    (:(=), :empty, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                            :waitq
                          )))),
                    (:line, 914, :none),
                    (:break,)
                  ))
              )),
            (:line, 916, :none),
            (:call, :wait)
          )),
        (:line, 919, :none),
        (:||, (:call, :(==), (:., :t, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :runnable
            )), (:call, :throw, (:call, :AssertionError, "producer.consumer.state == :runnable"))),
        (:line, 920, :none),
        (:if, :empty, (:block,
            (:line, 921, :none),
            (:call, :schedule_and_wait, :t, :v),
            (:line, 922, :none),
            (:while, true, (:block,
                (:line, 924, :none),
                (:(=), :q, (:., :ct, (:quote, #QuoteNode
                      :consumers
                    ))),
                (:line, 925, :none),
                (:if, (:call, :isa, :q, :Task), (:block,
                    (:line, 926, :none),
                    (:return, (:., :q, (:quote, #QuoteNode
                          :result
                        )))
                  ), (:block,
                    (:line, 927, :none),
                    (:if, (:&&, (:call, :isa, :q, :Condition), (:call, :!, (:call, :isempty, (:., :q, (:quote, #QuoteNode
                                :waitq
                              ))))), (:block,
                        (:line, 928, :none),
                        (:return, (:., (:ref, (:., :q, (:quote, #QuoteNode
                                  :waitq
                                )), 1), (:quote, #QuoteNode
                              :result
                            )))
                      ))
                  )),
                (:line, 930, :none),
                (:call, :wait)
              ))
          ), (:block,
            (:line, 933, :none),
            (:call, :schedule, :t, :v),
            (:line, 938, :none),
            (:call, :yield),
            (:line, 939, :none),
            (:return, (:., (:ref, (:., :q, (:quote, #QuoteNode
                      :waitq
                    )), 1), (:quote, #QuoteNode
                  :result
                )))
          ))
      )),
    (:line, 942, :none),
    (:(=), (:call, :produce, (:..., :v)), (:block,
        (:line, 942, :none),
        (:call, :produce, :v)
      )),
    (:line, 943, :none),
    (:export, :produce),
    (:line, 945, :none),
    (:function, (:call, :consume, (:(::), :P, :Task), (:..., :values)), (:block,
        (:line, 946, :none),
        (:call, :depwarn, "consume is now deprecated. Use Channels for inter-task communication.", (:quote, #QuoteNode
            :consume
          )),
        (:line, 948, :none),
        (:if, (:call, :istaskdone, :P), (:block,
            (:line, 949, :none),
            (:return, (:call, :wait, :P))
          )),
        (:line, 952, :none),
        (:(=), :ct, (:call, :current_task)),
        (:line, 953, :none),
        (:(=), (:., :ct, (:quote, #QuoteNode
              :result
            )), (:if, (:call, :(==), (:call, :length, :values), 1), (:ref, :values, 1), :values)),
        (:line, 961, :none),
        (:if, (:||, (:call, :(===), (:., :P, (:quote, #QuoteNode
                  :consumers
                )), :nothing), (:&&, (:call, :isa, (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), :Condition), (:call, :isempty, (:., (:., :P, (:quote, #QuoteNode
                      :consumers
                    )), (:quote, #QuoteNode
                    :waitq
                  ))))), (:block,
            (:line, 962, :none),
            (:(=), (:., :P, (:quote, #QuoteNode
                  :consumers
                )), :ct)
          ), (:block,
            (:line, 964, :none),
            (:if, (:call, :isa, (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), :Task), (:block,
                (:line, 965, :none),
                (:(=), :t, (:., :P, (:quote, #QuoteNode
                      :consumers
                    ))),
                (:line, 966, :none),
                (:(=), (:., :P, (:quote, #QuoteNode
                      :consumers
                    )), (:call, :Condition)),
                (:line, 967, :none),
                (:call, :push!, (:., (:., :P, (:quote, #QuoteNode
                        :consumers
                      )), (:quote, #QuoteNode
                      :waitq
                    )), :t)
              )),
            (:line, 969, :none),
            (:call, :push!, (:., (:., :P, (:quote, #QuoteNode
                    :consumers
                  )), (:quote, #QuoteNode
                  :waitq
                )), :ct)
          )),
        (:line, 972, :none),
        (:if, (:call, :(==), (:., :P, (:quote, #QuoteNode
                :state
              )), (:quote, #QuoteNode
              :runnable
            )), (:call, :schedule_and_wait, :P), (:call, :wait))
      )),
    (:line, 974, :none),
    (:export, :consume),
    (:line, 976, :none),
    (:function, (:call, :start, (:(::), :t, :Task)), (:block,
        (:line, 977, :none),
        (:call, :depwarn, (:call, :string, "Task iteration is now deprecated.", " Use Channels for inter-task communication. ", " A for-loop on a Channel object is terminated by calling `close` on the object."), (:quote, #QuoteNode
            :taskfor
          )),
        (:line, 980, :none),
        :nothing
      )),
    (:line, 982, :none),
    (:function, (:call, :done, (:(::), :t, :Task), :val), (:block,
        (:line, 983, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :result
            )), (:call, :consume, :t)),
        (:line, 984, :none),
        (:call, :istaskdone, :t)
      )),
    (:line, 986, :none),
    (:(=), (:call, :next, (:(::), :t, :Task), :val), (:block,
        (:line, 986, :none),
        (:tuple, (:., :t, (:quote, #QuoteNode
              :result
            )), :nothing)
      )),
    (:line, 987, :none),
    (:(=), (:call, :iteratorsize, (:(::), (:curly, :Type, :Task))), (:block,
        (:line, 987, :none),
        (:call, :SizeUnknown)
      )),
    (:line, 988, :none),
    (:(=), (:call, :iteratoreltype, (:(::), (:curly, :Type, :Task))), (:block,
        (:line, 988, :none),
        (:call, :EltypeUnknown)
      )),
    (:line, 990, :none),
    (:(=), (:call, :isempty, (:(::), :Task)), (:block,
        (:line, 990, :none),
        (:call, :error, "isempty not defined for Tasks")
      )),
    (:line, 992, :none),
    (:macrocall, Symbol("@eval"), (:., :Base, (:quote, #QuoteNode
          :Test
        )), (:block,
        (:line, 993, :none),
        (:(=), (:call, :approx_full, (:(::), :x, :AbstractArray)), (:block,
            (:line, 993, :none),
            :x
          )),
        (:line, 994, :none),
        (:(=), (:call, :approx_full, (:(::), :x, :Number)), (:block,
            (:line, 994, :none),
            :x
          )),
        (:line, 995, :none),
        (:(=), (:call, :approx_full, :x), (:block,
            (:line, 995, :none),
            (:call, :full, :x)
          )),
        (:line, 997, :none),
        (:function, (:call, :test_approx_eq, :va, :vb, :Eps, :astr, :bstr), (:block,
            (:line, 998, :none),
            (:(=), :va, (:call, :approx_full, :va)),
            (:line, 999, :none),
            (:(=), :vb, (:call, :approx_full, :vb)),
            (:line, 1000, :none),
            (:(=), (:tuple, :la, :lb), (:tuple, (:call, :length, (:call, :linearindices, :va)), (:call, :length, (:call, :linearindices, :vb)))),
            (:line, 1001, :none),
            (:if, (:call, :(!=), :la, :lb), (:block,
                (:line, 1002, :none),
                (:call, :error, "lengths of ", :astr, " and ", :bstr, " do not match: ", "\n  ", :astr, (:string, " (length ", :la, ") = "), :va, "\n  ", :bstr, (:string, " (length ", :lb, ") = "), :vb)
              )),
            (:line, 1006, :none),
            (:(=), :diff, (:call, :real, (:call, :zero, (:call, :eltype, :va)))),
            (:line, 1007, :none),
            (:for, (:(=), (:tuple, :xa, :xb), (:call, :zip, :va, :vb)), (:block,
                (:line, 1008, :none),
                (:if, (:&&, (:call, :isfinite, :xa), (:call, :isfinite, :xb)), (:block,
                    (:line, 1009, :none),
                    (:(=), :diff, (:call, :max, :diff, (:call, :abs, (:call, :-, :xa, :xb))))
                  ), (:block,
                    (:line, 1010, :none),
                    (:if, (:call, :!, (:call, :isequal, :xa, :xb)), (:block,
                        (:line, 1011, :none),
                        (:call, :error, "mismatch of non-finite elements: ", "\n  ", :astr, " = ", :va, "\n  ", :bstr, " = ", :vb)
                      ))
                  ))
              )),
            (:line, 1017, :none),
            (:if, (:&&, (:call, :!, (:call, :isnan, :Eps)), (:call, :!, (:call, :(<=), :diff, :Eps))), (:block,
                (:line, 1018, :none),
                (:(=), :sdiff, (:call, :string, "|", :astr, " - ", :bstr, "| <= ", :Eps)),
                (:line, 1019, :none),
                (:call, :error, "assertion failed: ", :sdiff, "\n  ", :astr, " = ", :va, "\n  ", :bstr, " = ", :vb, "\n  difference = ", :diff, " > ", :Eps)
              ))
          )),
        (:line, 1026, :none),
        (:(=), (:call, (:curly, :array_eps, :T), (:(::), :a, (:curly, :AbstractArray, (:curly, :Complex, :T)))), (:block,
            (:line, 1026, :none),
            (:call, :eps, (:call, :float, (:call, :maximum, (:->, :x, (:block,
                      (:line, 1026, :none),
                      (:if, (:call, :isfinite, :x), (:call, :abs, :x), (:call, :T, :NaN))
                    )), :a)))
          )),
        (:line, 1027, :none),
        (:(=), (:call, :array_eps, :a), (:block,
            (:line, 1027, :none),
            (:call, :eps, (:call, :float, (:call, :maximum, (:->, :x, (:block,
                      (:line, 1027, :none),
                      (:if, (:call, :isfinite, :x), (:call, :abs, :x), (:call, :oftype, :x, :NaN))
                    )), :a)))
          )),
        (:line, 1029, :none),
        (:(=), (:call, :test_approx_eq, :va, :vb, :astr, :bstr), (:block,
            (:line, 1029, :none),
            (:call, :test_approx_eq, :va, :vb, (:call, :*, 10000.0, (:call, :length, (:call, :linearindices, :va)), (:call, :max, (:call, :array_eps, :va), (:call, :array_eps, :vb))), :astr, :bstr)
          )),
        (:line, 1032, :none),
        (:macrocall, :(Core.@doc), "    @test_approx_eq_eps(a, b, tol)\n\nTest two floating point numbers `a` and `b` for equality taking into account\na margin of tolerance given by `tol`.\n", (:macro, (:call, :test_approx_eq_eps, :a, :b, :c), (:block,
              (:line, 1039, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :depwarn
                  )), (:call, :string, "@test_approx_eq_eps is deprecated, use `@test ", :a, " ≈ ", :b, " atol=", :c, "` instead"), (:call, :Symbol, "@test_approx_eq_eps")),
              (:line, 1041, :none),
              (:quote, (:call, :test_approx_eq, (:$, (:call, :esc, :a)), (:$, (:call, :esc, :b)), (:$, (:call, :esc, :c)), (:$, (:call, :string, :a)), (:$, (:call, :string, :b))))
            ))),
        (:line, 1043, :none),
        (:export, Symbol("@test_approx_eq_eps")),
        (:line, 1045, :none),
        (:macrocall, :(Core.@doc), "    @test_approx_eq(a, b)\n\nDeprecated. Test two floating point numbers `a` and `b` for equality taking into\naccount small numerical errors.\n", (:macro, (:call, :test_approx_eq, :a, :b), (:block,
              (:line, 1052, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :depwarn
                  )), (:call, :string, "@test_approx_eq is deprecated, use `@test ", :a, " ≈ ", :b, "` instead"), (:call, :Symbol, "@test_approx_eq")),
              (:line, 1054, :none),
              (:quote, (:call, :test_approx_eq, (:$, (:call, :esc, :a)), (:$, (:call, :esc, :b)), (:$, (:call, :string, :a)), (:$, (:call, :string, :b))))
            ))),
        (:line, 1056, :none),
        (:export, Symbol("@test_approx_eq"))
      )),
    (:line, 1060, :none),
    (:function, (:call, :partial_linear_indexing_warning_lookup, :nidxs_remaining), (:block,
        (:line, 1062, :none),
        (:(=), :opts, (:call, :JLOptions)),
        (:line, 1063, :none),
        (:if, (:call, :>, (:., :opts, (:quote, #QuoteNode
                :depwarn
              )), 0), (:block,
            (:line, 1065, :none),
            (:(=), :bt, (:call, :backtrace)),
            (:line, 1066, :none),
            (:(=), :found, false),
            (:line, 1067, :none),
            (:(=), :call, (:., :StackTraces, (:quote, #QuoteNode
                  :UNKNOWN
                ))),
            (:line, 1068, :none),
            (:(=), :caller, (:., :StackTraces, (:quote, #QuoteNode
                  :UNKNOWN
                ))),
            (:line, 1069, :none),
            (:for, (:(=), :frame, :bt), (:block,
                (:line, 1070, :none),
                (:(=), :lkups, (:call, (:., :StackTraces, (:quote, #QuoteNode
                        :lookup
                      )), :frame)),
                (:line, 1071, :none),
                (:for, (:(=), :caller, :lkups), (:block,
                    (:line, 1072, :none),
                    (:if, (:call, :(==), :caller, (:., :StackTraces, (:quote, #QuoteNode
                            :UNKNOWN
                          ))), (:block,
                        (:line, 1073, :none),
                        (:continue,)
                      )),
                    (:line, 1075, :none),
                    (:&&, :found, (:macrocall, Symbol("@goto"), :found)),
                    (:line, 1076, :none),
                    (:if, (:call, :in, (:., :caller, (:quote, #QuoteNode
                            :func
                          )), (:tuple, (:quote, #QuoteNode
                            :getindex
                          ), (:quote, #QuoteNode
                            :setindex!
                          ), (:quote, #QuoteNode
                            :view
                          ))), (:block,
                        (:line, 1077, :none),
                        (:(=), :found, true),
                        (:line, 1078, :none),
                        (:(=), :call, :caller)
                      ))
                  ))
              )),
            (:line, 1082, :none),
            (:macrocall, Symbol("@label"), :found),
            (:line, 1083, :none),
            (:(=), :fn, "`reshape`"),
            (:line, 1084, :none),
            (:if, (:&&, (:call, :(!=), :call, (:., :StackTraces, (:quote, #QuoteNode
                      :UNKNOWN
                    ))), (:call, :!, (:call, :isnull, (:., :call, (:quote, #QuoteNode
                        :linfo
                      ))))), (:block,
                (:line, 1086, :none),
                (:(=), :mi, (:call, :get, (:., :call, (:quote, #QuoteNode
                        :linfo
                      )))),
                (:line, 1087, :none),
                (:(=), :args, (:., (:., :mi, (:quote, #QuoteNode
                        :specTypes
                      )), (:quote, #QuoteNode
                      :parameters
                    ))),
                (:line, 1088, :none),
                (:if, (:&&, (:call, :(>=), (:call, :length, :args), 2), (:<:, (:ref, :args, 2), :AbstractArray)), (:block,
                    (:line, 1089, :none),
                    (:(=), :fn, (:string, "`reshape(A, Val{", (:call, :+, (:call, :-, (:call, :ndims, (:ref, :args, 2)), :nidxs_remaining), 1), "})`"))
                  ))
              )),
            (:line, 1092, :none),
            (:call, :_depwarn, (:string, "Partial linear indexing is deprecated. Use ", :fn, " to make the dimensionality of the array match the number of indices."), :opts, :bt, :caller)
          ))
      )),
    (:line, 1095, :none),
    (:function, (:call, :partial_linear_indexing_warning, :n), (:block,
        (:line, 1096, :none),
        (:call, :depwarn, (:string, "Partial linear indexing is deprecated. Use `reshape(A, Val{", :n, "})` to make the dimensionality of the array match the number of indices."), (:tuple, (:quote, #QuoteNode
              :getindex
            ), (:quote, #QuoteNode
              :setindex!
            ), (:quote, #QuoteNode
              :view
            )))
      )),
    (:line, 1100, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T, :N), (:(::), (:curly, :Type, :T)), (:(::), :d, (:curly, :NTuple, :N, :Int))), (:call, (:curly, :Array, :T), :d)),
    (:line, 1101, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:..., (:(::), :d, :Int))), (:call, (:curly, :Array, :T), (:..., :d))),
    (:line, 1102, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Int)), (:call, (:curly, :Array, :T), :m)),
    (:line, 1103, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Int), (:(::), :n, :Int)), (:call, (:curly, :Array, :T), :m, :n)),
    (:line, 1104, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Int), (:(::), :n, :Int), (:(::), :o, :Int)), (:call, (:curly, :Array, :T), :m, :n, :o)),
    (:line, 1105, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:..., (:(::), :d, :Integer))), (:call, (:curly, :Array, :T), (:call, :convert, (:curly, :Tuple, (:curly, :Vararg, :Int)), :d))),
    (:line, 1106, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer)), (:call, (:curly, :Array, :T), (:call, :Int, :m))),
    (:line, 1107, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer), (:(::), :n, :Integer)), (:call, (:curly, :Array, :T), (:call, :Int, :m), (:call, :Int, :n))),
    (:line, 1108, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :Array, :T), (:(::), (:curly, :Type, :T)), (:(::), :m, :Integer), (:(::), :n, :Integer), (:(::), :o, :Integer)), (:call, (:curly, :Array, :T), (:call, :Int, :m), (:call, :Int, :n), (:call, :Int, :o))),
    (:line, 1111, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :SharedArray, :T, :N), (:parameters, (:..., :kwargs)), (:(::), (:curly, :Type, :T)), (:(::), :dims, (:curly, :Dims, :N))), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), :dims)),
    (:line, 1112, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), (:(::), (:curly, :Type, :T)), (:..., (:(::), :dims, :Int))), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), (:..., :dims))),
    (:line, 1113, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :SharedArray, :T, :N), (:parameters, (:..., :kwargs)), (:(::), :filename, :AbstractString), (:(::), (:curly, :Type, :T)), (:(::), :dims, (:curly, :NTuple, :N, :Int)), :offset), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), :filename, :dims, :offset)),
    (:line, 1115, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), (:(::), :filename, :AbstractString), (:(::), (:curly, :Type, :T)), (:(::), :dims, :NTuple), :offset), (:call, (:curly, :SharedArray, :T), (:parameters, (:..., :kwargs)), :filename, :dims, :offset)),
    (:line, 1118, :none),
    (:macrocall, Symbol("@noinline"), (:function, (:call, :is_intrinsic_expr, (:(::), :x, :ANY)), (:block,
          (:line, 1119, :none),
          (:call, (:., :Base, (:quote, #QuoteNode
                :depwarn
              )), "is_intrinsic_expr is deprecated. There are no intrinsic functions anymore.", (:quote, #QuoteNode
              :is_intrinsic_expr
            )),
          (:line, 1120, :none),
          (:return, false)
        ))),
    (:line, 1123, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :EachLine, :stream, :ondone), (:call, :EachLine, :stream, (:kw, :ondone, :ondone))),
    (:line, 1126, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :convert, (:<:, :T, :Number)), (:(::), (:curly, :Type, :T)), (:(::), :x, (:., :Dates, (:quote, #QuoteNode
              :Period
            )))), (:call, :convert, :T, (:call, (:., :Dates, (:quote, #QuoteNode
              :value
            )), :x))),
    (:line, 1127, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :convert, (:<:, :T, (:., :Dates, (:quote, #QuoteNode
                :Period
              )))), (:(::), (:curly, :Type, :T)), (:(::), :x, :Real)), (:call, :T, :x)),
    (:line, 1128, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :convert, (:<:, :R, :Real)), (:(::), (:curly, :Type, :R)), (:(::), :x, (:., :Dates, (:quote, #QuoteNode
              :DateTime
            )))), (:call, :R, (:call, (:., :Dates, (:quote, #QuoteNode
              :value
            )), :x))),
    (:line, 1129, :none),
    (:macrocall, Symbol("@deprecate"), (:call, (:curly, :convert, (:<:, :R, :Real)), (:(::), (:curly, :Type, :R)), (:(::), :x, (:., :Dates, (:quote, #QuoteNode
              :Date
            )))), (:call, :R, (:call, (:., :Dates, (:quote, #QuoteNode
              :value
            )), :x))),
    (:line, 1130, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :convert, (:(::), (:curly, :Type, (:., :Dates, (:quote, #QuoteNode
                :DateTime
              )))), (:(::), :x, :Real)), (:call, (:., :Dates, (:quote, #QuoteNode
            :DateTime
          )), (:call, (:., :Dates, (:quote, #QuoteNode
              :Millisecond
            )), :x))),
    (:line, 1131, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :convert, (:(::), (:curly, :Type, (:., :Dates, (:quote, #QuoteNode
                :Date
              )))), (:(::), :x, :Real)), (:call, (:., :Dates, (:quote, #QuoteNode
            :Date
          )), (:call, (:., :Dates, (:quote, #QuoteNode
              :Day
            )), :x))),
    (:line, 1133, :none),
    (:function, (:call, (:curly, :colon, (:<:, :T, (:., :Dates, (:quote, #QuoteNode
                :Period
              )))), (:(::), :start, :T), (:(::), :stop, :T)), (:block,
        (:line, 1134, :none),
        (:call, :depwarn, (:string, :start, ":", :stop, " is deprecated, use ", :start, ":", :T, "(1):", :stop, " instead."), (:quote, #QuoteNode
            :colon
          )),
        (:line, 1135, :none),
        (:call, :colon, :start, (:call, :T, 1), :stop)
      )),
    (:line, 1139, :none),
    (:macrocall, Symbol("@eval"), (:., :Base, (:quote, #QuoteNode
          :LibGit2
        )), (:block,
        (:line, 1140, :none),
        (:macrocall, (:., :Base, (:quote, #QuoteNode
              Symbol("@deprecate_binding")
            )), :Oid, :GitHash),
        (:line, 1141, :none),
        (:macrocall, (:., :Base, (:quote, #QuoteNode
              Symbol("@deprecate_binding")
            )), :GitAnyObject, :GitUnknownObject),
        (:line, 1143, :none),
        (:macrocall, Symbol("@deprecate"), (:call, :owner, :x), (:call, :repository, :x), false),
        (:line, 1144, :none),
        (:macrocall, Symbol("@deprecate"), (:call, (:curly, :get, (:<:, :T, :GitObject)), (:(::), (:curly, :Type, :T)), (:(::), :repo, :GitRepo), :x), (:call, :T, :repo, :x), false),
        (:line, 1145, :none),
        (:macrocall, Symbol("@deprecate"), (:call, (:curly, :get, (:<:, :T, :GitObject)), (:(::), (:curly, :Type, :T)), (:(::), :repo, :GitRepo), (:(::), :oid, :GitHash), (:(::), :oid_size, :Int)), (:call, :T, :repo, (:call, :GitShortHash, :oid, :oid_size)), false),
        (:line, 1146, :none),
        (:macrocall, Symbol("@deprecate"), (:call, :revparse, (:(::), :repo, :GitRepo), (:(::), :objname, :AbstractString)), (:call, :GitObject, :repo, :objname), false),
        (:line, 1147, :none),
        (:macrocall, Symbol("@deprecate"), (:call, :object, (:(::), :repo, :GitRepo), (:(::), :te, :GitTreeEntry)), (:call, :GitObject, :repo, :te), false),
        (:line, 1148, :none),
        (:macrocall, Symbol("@deprecate"), (:call, :commit, (:(::), :ann, :GitAnnotated)), (:call, :GitHash, :ann), false),
        (:line, 1149, :none),
        (:macrocall, Symbol("@deprecate"), (:call, :lookup, (:(::), :repo, :GitRepo), (:(::), :oid, :GitHash)), (:call, :GitBlob, :repo, :oid), false),
        (:line, 1150, :none),
        (:function, (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :cat
                )), (:<:, :T, :GitObject)), (:(::), :repo, :GitRepo), (:(::), (:curly, :Type, :T)), (:(::), :spec, (:curly, :Union, :AbstractString, :AbstractGitHash))), (:block,
            (:line, 1151, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :depwarn
                )), "cat(repo::GitRepo, T, spec) is deprecated, use content(T(repo, spec))", (:quote, #QuoteNode
                :cat
              )),
            (:line, 1152, :none),
            (:try, (:block,
                (:line, 1153, :none),
                (:return, (:call, :content, (:call, :GitBlob, :repo, :spec)))
              ), :e, (:block,
                (:line, 1155, :none),
                (:&&, (:call, :isa, :e, (:., :LibGit2, (:quote, #QuoteNode
                        :GitError
                      ))), (:return, :nothing)),
                (:line, 1156, :none),
                (:call, :rethrow, :e)
              ))
          )),
        (:line, 1159, :none),
        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                :cat
              )), (:(::), :repo, :GitRepo), (:(::), :spec, (:curly, :Union, :AbstractString, :AbstractGitHash))), (:block,
            (:line, 1159, :none),
            (:call, :cat, :repo, :GitBlob, :spec)
          ))
      )),
    (:line, 1164, :none),
    (:macrocall, Symbol("@eval"), :Dates, (:function, (:call, :deprecate_negate, :f, :func, :sig, :negate), (:block,
          (:line, 1165, :none),
          (:if, (:call, :(===), :negate, :nothing), (:block,
              (:line, 1166, :none),
              (:return, :func)
            ), (:block,
              (:line, 1168, :none),
              (:(=), :msg, (:string, :f, "(", :sig, "; negate=", :negate, ") is deprecated, use ", :f, "(")),
              (:line, 1169, :none),
              (:&&, :negate, (:*=, :msg, "!")),
              (:line, 1170, :none),
              (:*=, :msg, (:string, :sig, ") instead.")),
              (:line, 1171, :none),
              (:call, (:., :Base, (:quote, #QuoteNode
                    :depwarn
                  )), :msg, :f),
              (:line, 1172, :none),
              (:return, (:if, :negate, (:call, :!, :func), :func))
            ))
        ))),
    (:line, 1185, :none),
    (:type, false, (:<:, (:curly, :Use_StepRangeLen_Instead, (:<:, :T, :AbstractFloat)), (:curly, :Range, :T)), (:block,
        (:line, 1186, :none),
        (:(::), :start, :T),
        (:line, 1187, :none),
        (:(::), :step, :T),
        (:line, 1188, :none),
        (:(::), :len, :T),
        (:line, 1189, :none),
        (:(::), :divisor, :T)
      )),
    (:line, 1192, :none),
    (:(=), (:call, :Use_StepRangeLen_Instead, (:(::), :a, :AbstractFloat), (:(::), :s, :AbstractFloat), (:(::), :l, :Real), (:(::), :d, :AbstractFloat)), (:block,
        (:line, 1192, :none),
        (:call, (:curly, :Use_StepRangeLen_Instead, (:call, :promote_type, (:call, :typeof, :a), (:call, :typeof, :s), (:call, :typeof, :d))), :a, :s, :l, :d)
      )),
    (:line, 1195, :none),
    (:(=), (:call, :isempty, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1195, :none),
        (:call, :(==), (:call, :length, :r), 0)
      )),
    (:line, 1197, :none),
    (:(=), (:call, :step, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1197, :none),
        (:call, :/, (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1199, :none),
    (:(=), (:call, :length, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1199, :none),
        (:call, :Integer, (:., :r, (:quote, #QuoteNode
              :len
            )))
      )),
    (:line, 1201, :none),
    (:(=), (:call, (:curly, :first, :T), (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T))), (:block,
        (:line, 1201, :none),
        (:call, :convert, :T, (:call, :/, (:., :r, (:quote, #QuoteNode
                :start
              )), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 1203, :none),
    (:(=), (:call, (:curly, :last, :T), (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T))), (:block,
        (:line, 1203, :none),
        (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                      :len
                    )), 1), (:., :r, (:quote, #QuoteNode
                    :step
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 1205, :none),
    (:(=), (:call, :start, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1205, :none),
        0
      )),
    (:line, 1206, :none),
    (:(=), (:call, :done, (:(::), :r, :Use_StepRangeLen_Instead), (:(::), :i, :Int)), (:block,
        (:line, 1206, :none),
        (:call, :(<=), (:call, :length, :r), :i)
      )),
    (:line, 1207, :none),
    (:(=), (:where, (:call, :next, (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T)), (:(::), :i, :Int)), :T), (:block,
        (:line, 1207, :none),
        (:tuple, (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                    :start
                  )), (:call, :*, :i, (:., :r, (:quote, #QuoteNode
                      :step
                    )))), (:., :r, (:quote, #QuoteNode
                  :divisor
                )))), (:call, :+, :i, 1))
      )),
    (:line, 1210, :none),
    (:function, (:where, (:call, :getindex, (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T)), (:(::), :i, :Integer)), :T), (:block,
        (:line, 1211, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 1212, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :i)),
        (:line, 1213, :none),
        (:call, :convert, :T, (:call, :/, (:call, :+, (:., :r, (:quote, #QuoteNode
                  :start
                )), (:call, :*, (:call, :-, :i, 1), (:., :r, (:quote, #QuoteNode
                    :step
                  )))), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 1216, :none),
    (:function, (:call, :getindex, (:(::), :r, :Use_StepRangeLen_Instead), (:(::), :s, :OrdinalRange)), (:block,
        (:line, 1217, :none),
        (:macrocall, Symbol("@_inline_meta")),
        (:line, 1218, :none),
        (:macrocall, Symbol("@boundscheck"), (:call, :checkbounds, :r, :s)),
        (:line, 1219, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:call, :-, (:call, :first, :s), 1), (:., :r, (:quote, #QuoteNode
                  :step
                )))), (:call, :*, (:call, :step, :s), (:., :r, (:quote, #QuoteNode
                :step
              ))), (:call, :length, :s), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1222, :none),
    (:(=), (:call, :-, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1222, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1223, :none),
    (:(=), (:call, :+, (:(::), :x, :Real), (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1223, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :+, (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x), (:., :r, (:quote, #QuoteNode
                :start
              ))), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1224, :none),
    (:(=), (:call, :-, (:(::), :x, :Real), (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1224, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :-, (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x), (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1225, :none),
    (:(=), (:call, :-, (:(::), :r, :Use_StepRangeLen_Instead), (:(::), :x, :Real)), (:block,
        (:line, 1225, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :-, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:., :r, (:quote, #QuoteNode
                  :divisor
                )), :x)), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1226, :none),
    (:(=), (:call, :*, (:(::), :x, :Real), (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1226, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :start
              ))), (:call, :*, :x, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1227, :none),
    (:(=), (:call, :*, (:(::), :r, :Use_StepRangeLen_Instead), (:(::), :x, :Real)), (:block,
        (:line, 1227, :none),
        (:call, :*, :x, :r)
      )),
    (:line, 1228, :none),
    (:(=), (:call, :/, (:(::), :r, :Use_StepRangeLen_Instead), (:(::), :x, :Real)), (:block,
        (:line, 1228, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :/, (:., :r, (:quote, #QuoteNode
                :start
              )), :x), (:call, :/, (:., :r, (:quote, #QuoteNode
                :step
              )), :x), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1229, :none),
    (:(=), (:where, (:call, :promote_rule, (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :T1))), (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :T2)))), :T1, :T2), (:block,
        (:line, 1229, :none),
        (:curly, :Use_StepRangeLen_Instead, (:call, :promote_type, :T1, :T2))
      )),
    (:line, 1231, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :T))), (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T))), (:<:, :T, :AbstractFloat)), (:block,
        (:line, 1231, :none),
        :r
      )),
    (:line, 1232, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :T))), (:(::), :r, :Use_StepRangeLen_Instead)), (:<:, :T, :AbstractFloat)), (:block,
        (:line, 1232, :none),
        (:call, (:curly, :Use_StepRangeLen_Instead, :T), (:., :r, (:quote, #QuoteNode
              :start
            )), (:., :r, (:quote, #QuoteNode
              :step
            )), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1235, :none),
    (:(=), (:where, (:call, :promote_rule, (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :F))), (:(::), (:curly, :Type, :OR))), :F, (:<:, :OR, :OrdinalRange)), (:block,
        (:line, 1235, :none),
        (:curly, :Use_StepRangeLen_Instead, (:call, :promote_type, :F, (:call, :eltype, :OR)))
      )),
    (:line, 1237, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, (:curly, :Use_StepRangeLen_Instead, :T))), (:(::), :r, :OrdinalRange)), (:<:, :T, :AbstractFloat)), (:block,
        (:line, 1237, :none),
        (:call, (:curly, :Use_StepRangeLen_Instead, :T), (:call, :first, :r), (:call, :step, :r), (:call, :length, :r), (:call, :one, :T))
      )),
    (:line, 1239, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :Use_StepRangeLen_Instead)), (:(::), :r, (:curly, :OrdinalRange, :T))), :T), (:block,
        (:line, 1239, :none),
        (:call, (:curly, :Use_StepRangeLen_Instead, (:call, :typeof, (:call, :float, (:call, :first, :r)))), (:call, :first, :r), (:call, :step, :r), (:call, :length, :r), (:call, :one, :T))
      )),
    (:line, 1242, :none),
    (:(=), (:where, (:call, :promote_rule, (:(::), (:curly, :Type, (:curly, :LinSpace, :F))), (:(::), (:curly, :Type, :OR))), :F, (:<:, :OR, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1242, :none),
        (:curly, :LinSpace, (:call, :promote_type, :F, (:call, :eltype, :OR)))
      )),
    (:line, 1244, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, (:curly, :LinSpace, :T))), (:(::), :r, :Use_StepRangeLen_Instead)), (:<:, :T, :AbstractFloat)), (:block,
        (:line, 1244, :none),
        (:call, :linspace, (:call, :convert, :T, (:call, :first, :r)), (:call, :convert, :T, (:call, :last, :r)), (:call, :convert, :T, (:call, :length, :r)))
      )),
    (:line, 1246, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :LinSpace)), (:(::), :r, (:curly, :Use_StepRangeLen_Instead, :T))), (:<:, :T, :AbstractFloat)), (:block,
        (:line, 1246, :none),
        (:call, :convert, (:curly, :LinSpace, :T), :r)
      )),
    (:line, 1249, :none),
    (:(=), (:call, :reverse, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1249, :none),
        (:call, :Use_StepRangeLen_Instead, (:call, :+, (:., :r, (:quote, #QuoteNode
                :start
              )), (:call, :*, (:call, :-, (:., :r, (:quote, #QuoteNode
                    :len
                  )), 1), (:., :r, (:quote, #QuoteNode
                  :step
                )))), (:call, :-, (:., :r, (:quote, #QuoteNode
                :step
              ))), (:., :r, (:quote, #QuoteNode
              :len
            )), (:., :r, (:quote, #QuoteNode
              :divisor
            )))
      )),
    (:line, 1251, :none),
    (:function, (:call, :sum, (:(::), :r, :Use_StepRangeLen_Instead)), (:block,
        (:line, 1252, :none),
        (:(=), :l, (:call, :length, :r)),
        (:line, 1253, :none),
        (:if, (:call, :iseven, :l), (:block,
            (:line, 1254, :none),
            (:(=), :s, (:call, :*, (:., :r, (:quote, #QuoteNode
                    :step
                  )), (:call, :-, :l, 1), (:call, :>>, :l, 1)))
          ), (:block,
            (:line, 1256, :none),
            (:(=), :s, (:call, :*, (:call, :*, (:., :r, (:quote, #QuoteNode
                      :step
                    )), :l), (:call, :>>, (:call, :-, :l, 1), 1)))
          )),
        (:line, 1258, :none),
        (:return, (:call, :/, (:call, :+, (:call, :*, :l, (:., :r, (:quote, #QuoteNode
                    :start
                  ))), :s), (:., :r, (:quote, #QuoteNode
                :divisor
              ))))
      )),
    (:line, 1261, :none),
    (:macrocall, Symbol("@deprecate_binding"), :FloatRange, :Use_StepRangeLen_Instead),
    (:line, 1265, :none),
    (:macrocall, Symbol("@noinline"), (:(=), (:call, :zero_arg_matrix_constructor, (:(::), :prefix, :String)), (:block,
          (:line, 1265, :none),
          (:call, :depwarn, (:string, :prefix, "() is deprecated, use ", :prefix, "(0, 0) instead."), (:quote, #QuoteNode
              :zero_arg_matrix_constructor
            ))
        ))),
    (:line, 1267, :none),
    (:function, (:call, (:curly, (:(::), (:curly, :Type, (:curly, :Matrix, :T))), :T)), (:block,
        (:line, 1268, :none),
        (:call, :zero_arg_matrix_constructor, "Matrix{T}"),
        (:line, 1269, :none),
        (:return, (:call, (:curly, :Matrix, :T), 0, 0))
      )),
    (:line, 1271, :none),
    (:function, (:call, (:(::), (:curly, :Type, :Matrix))), (:block,
        (:line, 1272, :none),
        (:call, :zero_arg_matrix_constructor, "Matrix"),
        (:line, 1273, :none),
        (:return, (:call, :Matrix, 0, 0))
      )),
    (:line, 1276, :none),
    (:for, (:(=), :name, (:tuple, "alnum", "alpha", "cntrl", "digit", "number", "graph", "lower", "print", "punct", "space", "upper", "xdigit")), (:block,
        (:line, 1278, :none),
        (:(=), :f, (:call, :Symbol, "is", :name)),
        (:line, 1279, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@deprecate"), (:call, (:$, :f), (:(::), :s, :AbstractString)), (:call, :all, (:$, :f), :s)))
      )),
    (:line, 1285, :none),
    (:for, (:(=), :f, (:tuple, (:quote, #QuoteNode
            :airyai
          ), (:quote, #QuoteNode
            :airyaiprime
          ), (:quote, #QuoteNode
            :airybi
          ), (:quote, #QuoteNode
            :airybiprime
          ), (:quote, #QuoteNode
            :airyaix
          ), (:quote, #QuoteNode
            :airyaiprimex
          ), (:quote, #QuoteNode
            :airybix
          ), (:quote, #QuoteNode
            :airybiprimex
          ), (:quote, #QuoteNode
            :besselh
          ), (:quote, #QuoteNode
            :besselhx
          ), (:quote, #QuoteNode
            :besseli
          ), (:quote, #QuoteNode
            :besselix
          ), (:quote, #QuoteNode
            :besselj
          ), (:quote, #QuoteNode
            :besselj0
          ), (:quote, #QuoteNode
            :besselj1
          ), (:quote, #QuoteNode
            :besseljx
          ), (:quote, #QuoteNode
            :besselk
          ), (:quote, #QuoteNode
            :besselkx
          ), (:quote, #QuoteNode
            :bessely
          ), (:quote, #QuoteNode
            :bessely0
          ), (:quote, #QuoteNode
            :bessely1
          ), (:quote, #QuoteNode
            :besselyx
          ), (:quote, #QuoteNode
            :dawson
          ), (:quote, #QuoteNode
            :erf
          ), (:quote, #QuoteNode
            :erfc
          ), (:quote, #QuoteNode
            :erfcinv
          ), (:quote, #QuoteNode
            :erfcx
          ), (:quote, #QuoteNode
            :erfi
          ), (:quote, #QuoteNode
            :erfinv
          ), (:quote, #QuoteNode
            :eta
          ), (:quote, #QuoteNode
            :zeta
          ), (:quote, #QuoteNode
            :digamma
          ), (:quote, #QuoteNode
            :invdigamma
          ), (:quote, #QuoteNode
            :polygamma
          ), (:quote, #QuoteNode
            :trigamma
          ), (:quote, #QuoteNode
            :hankelh1
          ), (:quote, #QuoteNode
            :hankelh1x
          ), (:quote, #QuoteNode
            :hankelh2
          ), (:quote, #QuoteNode
            :hankelh2x
          ), (:quote, #QuoteNode
            :airy
          ), (:quote, #QuoteNode
            :airyx
          ), (:quote, #QuoteNode
            :airyprime
          ))), (:block,
        (:line, 1292, :none),
        (:macrocall, Symbol("@eval"), (:block,
            (:line, 1293, :none),
            (:function, (:call, (:$, :f), (:parameters, (:..., :kwargs)), (:..., :args)), (:block,
                (:line, 1294, :none),
                (:call, :error, (:call, :string, (:$, :f), :args, " has been moved to the package SpecialFunctions.jl.\n", "Run Pkg.add(\"SpecialFunctions\") to install SpecialFunctions on Julia v0.6 and later,\n", "and then run `using SpecialFunctions`."))
              )),
            (:line, 1298, :none),
            (:export, (:$, :f))
          ))
      )),
    (:line, 1302, :none),
    (:macrocall, Symbol("@deprecate_binding"), :LinearIndexing, :IndexStyle, false),
    (:line, 1303, :none),
    (:macrocall, Symbol("@deprecate_binding"), :LinearFast, :IndexLinear, false),
    (:line, 1304, :none),
    (:macrocall, Symbol("@deprecate_binding"), :LinearSlow, :IndexCartesian, false),
    (:line, 1305, :none),
    (:macrocall, Symbol("@deprecate_binding"), :linearindexing, :IndexStyle, false),
    (:line, 1308, :none),
    (:macrocall, Symbol("@eval"), (:., :Base, (:quote, #QuoteNode
          :Dates
        )), (:block,
        (:line, 1309, :none),
        (:function, (:call, (:., (:., :Base, (:quote, #QuoteNode
                  :Dates
                )), (:quote, #QuoteNode
                :parse
              )), (:(::), :x, :AbstractString), (:(::), :df, :DateFormat)), (:block,
            (:line, 1310, :none),
            (:call, (:., :Base, (:quote, #QuoteNode
                  :depwarn
                )), (:call, :string, "`Dates.parse(x::AbstractString, df::DateFormat)` is deprecated, use ", "`sort!(filter!(el -> isa(el, Dates.Period), Dates.parse_components(x, df), rev=true, lt=Dates.periodisless)` ", " instead."), (:quote, #QuoteNode
                :parse
              )),
            (:line, 1314, :none),
            (:call, :sort!, (:call, :filter!, (:->, :el, (:block,
                    (:line, 1314, :none),
                    (:call, :isa, :el, :Period)
                  )), (:call, :parse_components, :x, :df)), (:kw, :rev, true), (:kw, :lt, :periodisless))
          ))
      )),
    (:line, 1319, :none),
    (:macrocall, Symbol("@deprecate"), (:call, :MersenneTwister), (:call, :MersenneTwister, 0)),
    (:line, 1322, :none),
    (:for, (:(=), :fname, (:tuple, (:quote, #QuoteNode
            :ones
          ), (:quote, #QuoteNode
            :zeros
          ))), (:block,
        (:line, 1323, :none),
        (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@deprecate"), (:call, (:$, :fname), (:(::), :T, :Type), :arr), (:call, (:$, :fname), :T, (:call, :size, :arr)))),
        (:line, 1324, :none),
        (:macrocall, Symbol("@eval"), (:(=), (:call, (:$, :fname), (:(::), :T, :Type), (:(::), :i, :Integer)), (:block,
              (:line, 1324, :none),
              (:call, (:$, :fname), :T, (:tuple, :i))
            ))),
        (:line, 1325, :none),
        (:macrocall, Symbol("@eval"), (:function, (:call, (:curly, (:$, :fname), :T), (:(::), (:curly, :Type, :T)), (:(::), :arr, (:curly, :Array, :T))), (:block,
              (:line, 1326, :none),
              (:(=), :msg, (:call, :string, "`", (:$, :fname), "{T}(::Type{T}, arr::Array{T})` is deprecated, use ", "`", (:$, :fname), "(T, size(arr))` instead. ")),
              (:line, 1329, :none),
              (:call, :error, :msg)
            )))
      ))
  ))