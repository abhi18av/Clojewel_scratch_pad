(:quote, (:block,
    (:line, 3, :none),
    (:using, :Core, :CodeInfo),
    (:line, 5, :none),
    (:const, (:(=), :Callable, (:curly, :Union, :Function, :Type))),
    (:line, 7, :none),
    (:const, (:(=), :Bottom, (:curly, :Union))),
    (:line, 9, :none),
    (:abstract, (:curly, :AbstractSet, :T)),
    (:line, 10, :none),
    (:abstract, (:curly, :Associative, :K, :V)),
    (:line, 14, :none),
    (:macro, (:call, :_inline_meta), (:block,
        (:line, 15, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :inline
          ))
      )),
    (:line, 17, :none),
    (:macro, (:call, :_noinline_meta), (:block,
        (:line, 18, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :noinline
          ))
      )),
    (:line, 20, :none),
    (:macro, (:call, :_pure_meta), (:block,
        (:line, 21, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :pure
          ))
      )),
    (:line, 24, :none),
    (:macro, (:call, :_propagate_inbounds_meta), (:block,
        (:line, 25, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :inline
          ), (:quote, #QuoteNode
            :propagate_inbounds
          ))
      )),
    (:line, 28, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Any)), (:(::), :x, :ANY)), (:block,
        (:line, 28, :none),
        :x
      )),
    (:line, 29, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), :T), (:block,
        (:line, 29, :none),
        :x
      )),
    (:line, 31, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, (:curly, :Tuple))), (:(::), (:curly, :Tuple))), (:block,
        (:line, 31, :none),
        (:tuple,)
      )),
    (:line, 32, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Tuple)), (:(::), :x, :Tuple)), (:block,
        (:line, 32, :none),
        :x
      )),
    (:line, 33, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, (:curly, :Tuple, (:curly, :Vararg, :T)))), (:(::), :x, :Tuple)), :T), (:block,
        (:line, 33, :none),
        (:call, :cnvt_all, :T, (:..., :x))
      )),
    (:line, 34, :none),
    (:(=), (:call, :cnvt_all, :T), (:block,
        (:line, 34, :none),
        (:tuple,)
      )),
    (:line, 35, :none),
    (:(=), (:call, :cnvt_all, :T, :x, (:..., :rest)), (:block,
        (:line, 35, :none),
        (:call, :tuple, (:call, :convert, :T, :x), (:..., (:call, :cnvt_all, :T, (:..., :rest))))
      )),
    (:line, 37, :none),
    (:macro, (:call, :generated, :f), (:block,
        (:line, 38, :none),
        (:if, (:&&, (:call, :isa, :f, :Expr), (:||, (:call, :(===), (:., :f, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :function
                )), (:call, :is_short_function_def, :f))), (:block,
            (:line, 39, :none),
            (:(=), (:., :f, (:quote, #QuoteNode
                  :head
                )), (:quote, #QuoteNode
                :stagedfunction
              )),
            (:line, 40, :none),
            (:return, (:call, :Expr, (:quote, #QuoteNode
                  :escape
                ), :f))
          ), (:block,
            (:line, 42, :none),
            (:call, :error, "invalid syntax; @generated must be used with a function definition")
          ))
      )),
    (:line, 46, :none),
    (:macrocall, :(Core.@doc), "    @eval [mod,] ex\n\nEvaluate an expression with values interpolated into it using `eval`.\nIf two arguments are provided, the first is the module to evaluate in.\n", (:macro, (:call, :eval, :ex), (:block,
          (:line, 53, :none),
          (:quote, (:call, :eval, (:$, (:call, :current_module)), (:$, (:call, :Expr, (:quote, #QuoteNode
                    :quote
                  ), :ex))))
        ))),
    (:line, 55, :none),
    (:macro, (:call, :eval, :mod, :ex), (:block,
        (:line, 56, :none),
        (:quote, (:call, :eval, (:$, (:call, :esc, :mod)), (:$, (:call, :Expr, (:quote, #QuoteNode
                  :quote
                ), :ex))))
      )),
    (:line, 59, :none),
    (:(=), (:call, :argtail, :x, (:..., :rest)), (:block,
        (:line, 59, :none),
        :rest
      )),
    (:line, 60, :none),
    (:(=), (:call, :tail, (:(::), :x, :Tuple)), (:block,
        (:line, 60, :none),
        (:call, :argtail, (:..., :x))
      )),
    (:line, 62, :none),
    (:(=), (:call, :tuple_type_head, (:(::), :T, :UnionAll)), (:block,
        (:line, 62, :none),
        (:call, :tuple_type_head, (:., :T, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 63, :none),
    (:function, (:call, :tuple_type_head, (:(::), :T, :DataType)), (:block,
        (:line, 64, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 65, :none),
        (:||, (:call, :(===), (:., :T, (:quote, #QuoteNode
                :name
              )), (:., :Tuple, (:quote, #QuoteNode
                :name
              ))), (:call, :throw, (:call, :MethodError, :tuple_type_head, (:tuple, :T)))),
        (:line, 66, :none),
        (:return, (:call, :unwrapva, (:ref, (:., :T, (:quote, #QuoteNode
                  :parameters
                )), 1)))
      )),
    (:line, 68, :none),
    (:(=), (:call, :tuple_type_tail, (:(::), :T, :UnionAll)), (:block,
        (:line, 68, :none),
        (:call, :tuple_type_tail, (:., :T, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 69, :none),
    (:function, (:call, :tuple_type_tail, (:(::), :T, :DataType)), (:block,
        (:line, 70, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 71, :none),
        (:||, (:call, :(===), (:., :T, (:quote, #QuoteNode
                :name
              )), (:., :Tuple, (:quote, #QuoteNode
                :name
              ))), (:call, :throw, (:call, :MethodError, :tuple_type_tail, (:tuple, :T)))),
        (:line, 72, :none),
        (:if, (:&&, (:call, :isvatuple, :T), (:call, :(==), (:call, :length, (:., :T, (:quote, #QuoteNode
                    :parameters
                  ))), 1)), (:block,
            (:line, 73, :none),
            (:return, :T)
          )),
        (:line, 75, :none),
        (:return, (:curly, :Tuple, (:..., (:call, :argtail, (:..., (:., :T, (:quote, #QuoteNode
                      :parameters
                    )))))))
      )),
    (:line, 78, :none),
    (:(=), (:call, :tuple_type_cons, (:(::), :Type), (:(::), (:curly, :Type, (:curly, :Union)))), (:block,
        (:line, 78, :none),
        (:curly, :Union)
      )),
    (:line, 79, :none),
    (:function, (:call, (:curly, :tuple_type_cons, :S, (:<:, :T, :Tuple)), (:(::), (:curly, :Type, :S)), (:(::), (:curly, :Type, :T))), (:block,
        (:line, 80, :none),
        (:macrocall, Symbol("@_pure_meta")),
        (:line, 81, :none),
        (:curly, :Tuple, :S, (:..., (:., :T, (:quote, #QuoteNode
                :parameters
              ))))
      )),
    (:line, 84, :none),
    (:function, (:call, :unwrap_unionall, (:(::), :a, :ANY)), (:block,
        (:line, 85, :none),
        (:while, (:call, :isa, :a, :UnionAll), (:block,
            (:line, 86, :none),
            (:(=), :a, (:., :a, (:quote, #QuoteNode
                  :body
                )))
          )),
        (:line, 88, :none),
        (:return, :a)
      )),
    (:line, 91, :none),
    (:function, (:call, :rewrap_unionall, (:(::), :t, :ANY), (:(::), :u, :ANY)), (:block,
        (:line, 92, :none),
        (:if, (:call, :!, (:call, :isa, :u, :UnionAll)), (:block,
            (:line, 93, :none),
            (:return, :t)
          )),
        (:line, 95, :none),
        (:return, (:call, :UnionAll, (:., :u, (:quote, #QuoteNode
                :var
              )), (:call, :rewrap_unionall, :t, (:., :u, (:quote, #QuoteNode
                  :body
                )))))
      )),
    (:line, 99, :none),
    (:function, (:call, :rename_unionall, (:(::), :u, :ANY)), (:block,
        (:line, 100, :none),
        (:if, (:call, :!, (:call, :isa, :u, :UnionAll)), (:block,
            (:line, 101, :none),
            (:return, :u)
          )),
        (:line, 103, :none),
        (:(=), :body, (:call, :rename_unionall, (:., :u, (:quote, #QuoteNode
                :body
              )))),
        (:line, 104, :none),
        (:if, (:call, :(===), :body, (:., :u, (:quote, #QuoteNode
                :body
              ))), (:block,
            (:line, 105, :none),
            (:(=), :body, :u)
          ), (:block,
            (:line, 107, :none),
            (:(=), :body, (:call, :UnionAll, (:., :u, (:quote, #QuoteNode
                    :var
                  )), :body))
          )),
        (:line, 109, :none),
        (:(=), :var, (:(::), (:., :u, (:quote, #QuoteNode
                :var
              )), :TypeVar)),
        (:line, 110, :none),
        (:(=), :nv, (:call, :TypeVar, (:., :var, (:quote, #QuoteNode
                :name
              )), (:., :var, (:quote, #QuoteNode
                :lb
              )), (:., :var, (:quote, #QuoteNode
                :ub
              )))),
        (:line, 111, :none),
        (:return, (:call, :UnionAll, :nv, (:curly, :body, :nv)))
      )),
    (:line, 114, :none),
    (:const, (:(=), :_va_typename, (:., (:., (:., :Vararg, (:quote, #QuoteNode
                :body
              )), (:quote, #QuoteNode
              :body
            )), (:quote, #QuoteNode
            :name
          )))),
    (:line, 115, :none),
    (:function, (:call, :isvarargtype, (:(::), :t, :ANY)), (:block,
        (:line, 116, :none),
        (:(=), :t, (:call, :unwrap_unionall, :t)),
        (:line, 117, :none),
        (:&&, (:call, :isa, :t, :DataType), (:call, :(===), (:., (:(::), :t, :DataType), (:quote, #QuoteNode
                :name
              )), :_va_typename))
      )),
    (:line, 120, :none),
    (:(=), (:call, :isvatuple, (:(::), :t, :DataType)), (:block,
        (:line, 120, :none),
        (:block,
          (:(=), :n, (:call, :length, (:., :t, (:quote, #QuoteNode
                  :parameters
                )))),
          (:&&, (:call, :>, :n, 0), (:call, :isvarargtype, (:ref, (:., :t, (:quote, #QuoteNode
                    :parameters
                  )), :n)))
        )
      )),
    (:line, 121, :none),
    (:function, (:call, :unwrapva, (:(::), :t, :ANY)), (:block,
        (:line, 122, :none),
        (:(=), :t2, (:call, :unwrap_unionall, :t)),
        (:line, 123, :none),
        (:if, (:call, :isvarargtype, :t2), (:ref, (:., :t2, (:quote, #QuoteNode
                :parameters
              )), 1), :t)
      )),
    (:line, 126, :none),
    (:(=), (:call, :typename, :a), (:block,
        (:line, 126, :none),
        (:call, :error, "typename does not apply to this type")
      )),
    (:line, 127, :none),
    (:(=), (:call, :typename, (:(::), :a, :DataType)), (:block,
        (:line, 127, :none),
        (:., :a, (:quote, #QuoteNode
            :name
          ))
      )),
    (:line, 128, :none),
    (:function, (:call, :typename, (:(::), :a, :Union)), (:block,
        (:line, 129, :none),
        (:(=), :ta, (:call, :typename, (:., :a, (:quote, #QuoteNode
                :a
              )))),
        (:line, 130, :none),
        (:(=), :tb, (:call, :typename, (:., :a, (:quote, #QuoteNode
                :b
              )))),
        (:line, 131, :none),
        (:if, (:call, :(===), :ta, :tb), :tb, (:call, :error, "typename does not apply to unions whose components have different typenames"))
      )),
    (:line, 133, :none),
    (:(=), (:call, :typename, (:(::), :union, :UnionAll)), (:block,
        (:line, 133, :none),
        (:call, :typename, (:., :union, (:quote, #QuoteNode
              :body
            )))
      )),
    (:line, 135, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:<:, :T, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 135, :none),
        (:call, :tuple, (:call, :convert, (:call, :tuple_type_head, :T), (:ref, :x, 1)), (:..., (:call, :convert, (:call, :tuple_type_tail, :T), (:call, :tail, :x))))
      )),
    (:line, 137, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), (:<:, :T, (:curly, :Tuple, :Any, (:curly, :Vararg, :Any)))), (:block,
        (:line, 137, :none),
        :x
      )),
    (:line, 139, :none),
    (:(=), (:call, :oftype, :x, :c), (:block,
        (:line, 139, :none),
        (:call, :convert, (:call, :typeof, :x), :c)
      )),
    (:line, 141, :none),
    (:(=), (:call, :unsigned, (:(::), :x, :Int)), (:block,
        (:line, 141, :none),
        (:call, :reinterpret, :UInt, :x)
      )),
    (:line, 142, :none),
    (:(=), (:call, :signed, (:(::), :x, :UInt)), (:block,
        (:line, 142, :none),
        (:call, :reinterpret, :Int, :x)
      )),
    (:line, 145, :none),
    (:(=), (:where, (:call, :ptr_arg_cconvert, (:(::), (:curly, :Type, (:curly, :Ptr, :T))), :x), :T), (:block,
        (:line, 145, :none),
        (:call, :cconvert, :T, :x)
      )),
    (:line, 146, :none),
    (:(=), (:where, (:call, :ptr_arg_unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :T))), :x), :T), (:block,
        (:line, 146, :none),
        (:call, :unsafe_convert, :T, :x)
      )),
    (:line, 147, :none),
    (:(=), (:call, :ptr_arg_unsafe_convert, (:(::), (:curly, :Type, (:curly, :Ptr, :Void))), :x), (:block,
        (:line, 147, :none),
        :x
      )),
    (:line, 149, :none),
    (:(=), (:call, :cconvert, (:(::), :T, :Type), :x), (:block,
        (:line, 149, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 150, :none),
    (:(=), (:call, :cconvert, (:(::), (:curly, :Type, (:<:, :Ptr))), :x), (:block,
        (:line, 150, :none),
        :x
      )),
    (:line, 151, :none),
    (:(=), (:where, (:call, :unsafe_convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), :T), (:block,
        (:line, 151, :none),
        :x
      )),
    (:line, 152, :none),
    (:(=), (:where, (:call, :unsafe_convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), (:<:, :T, :Ptr)), (:block,
        (:line, 152, :none),
        :x
      )),
    (:line, 153, :none),
    (:(=), (:where, (:call, :unsafe_convert, (:(::), (:curly, :Type, :P)), (:(::), :x, :Ptr)), (:<:, :P, :Ptr)), (:block,
        (:line, 153, :none),
        (:call, :convert, :P, :x)
      )),
    (:line, 155, :none),
    (:(=), (:where, (:call, :reinterpret, (:(::), (:curly, :Type, :T)), :x), :T), (:block,
        (:line, 155, :none),
        (:call, :bitcast, :T, :x)
      )),
    (:line, 156, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Unsigned)), (:(::), :x, :Float16)), (:block,
        (:line, 156, :none),
        (:call, :reinterpret, :UInt16, :x)
      )),
    (:line, 157, :none),
    (:(=), (:call, :reinterpret, (:(::), (:curly, :Type, :Signed)), (:(::), :x, :Float16)), (:block,
        (:line, 157, :none),
        (:call, :reinterpret, :Int16, :x)
      )),
    (:line, 159, :none),
    (:(=), (:call, :sizeof, :x), (:block,
        (:line, 159, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :sizeof
            )), :x)
      )),
    (:line, 161, :none),
    (:function, (:call, :append_any, (:..., :xs)), (:block,
        (:line, 165, :none),
        (:(=), :out, (:call, (:curly, :Vector, :Any), 4)),
        (:line, 166, :none),
        (:(=), :l, 4),
        (:line, 167, :none),
        (:(=), :i, 1),
        (:line, 168, :none),
        (:for, (:(=), :x, :xs), (:block,
            (:line, 169, :none),
            (:for, (:(=), :y, :x), (:block,
                (:line, 170, :none),
                (:if, (:call, :>, :i, :l), (:block,
                    (:line, 171, :none),
                    (:call, :ccall, (:quote, #QuoteNode
                        :jl_array_grow_end
                      ), :Void, (:tuple, :Any, :UInt), :out, 16),
                    (:line, 172, :none),
                    (:+=, :l, 16)
                  )),
                (:line, 174, :none),
                (:call, (:., :Core, (:quote, #QuoteNode
                      :arrayset
                    )), :out, :y, :i),
                (:line, 175, :none),
                (:+=, :i, 1)
              ))
          )),
        (:line, 178, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_array_del_end
          ), :Void, (:tuple, :Any, :UInt), :out, (:call, :+, (:call, :-, :l, :i), 1)),
        (:line, 179, :none),
        :out
      )),
    (:line, 183, :none),
    (:(=), (:call, :setindex!, (:(::), :A, (:curly, :Array, :Any)), (:(::), :x, :ANY), (:(::), :i, :Int)), (:block,
        (:line, 183, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :arrayset
            )), :A, :x, :i)
      )),
    (:line, 185, :none),
    (:function, (:call, :precompile, (:(::), :f, :ANY), (:(::), :args, :Tuple)), (:block,
        (:line, 186, :none),
        (:call, :(!=), (:call, :ccall, (:quote, #QuoteNode
              :jl_compile_hint
            ), :Int32, (:tuple, :Any), (:curly, :Tuple, (:call, (:., :Core, (:quote, #QuoteNode
                    :Typeof
                  )), :f), (:..., :args))), 0)
      )),
    (:line, 189, :none),
    (:function, (:call, :precompile, (:(::), :argt, :Type)), (:block,
        (:line, 190, :none),
        (:call, :(!=), (:call, :ccall, (:quote, #QuoteNode
              :jl_compile_hint
            ), :Int32, (:tuple, :Any), :argt), 0)
      )),
    (:line, 193, :none),
    (:macrocall, :(Core.@doc), "    esc(e::ANY)\n\nOnly valid in the context of an `Expr` returned from a macro. Prevents the macro hygiene\npass from turning embedded variables into gensym variables. See the [Macros](@ref man-macros)\nsection of the Metaprogramming chapter of the manual for more details and examples.\n", (:(=), (:call, :esc, (:(::), :e, :ANY)), (:block,
          (:line, 200, :none),
          (:call, :Expr, (:quote, #QuoteNode
              :escape
            ), :e)
        ))),
    (:line, 202, :none),
    (:macro, (:call, :boundscheck, :blk), (:block,
        (:line, 204, :none),
        (:quote, (:block,
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :boundscheck
                ), true)),
            (:$, (:call, :esc, :blk)),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :boundscheck
                ), (:quote, #QuoteNode
                  :pop
                )))
          ))
      )),
    (:line, 209, :none),
    (:macrocall, :(Core.@doc), "    @inbounds(blk)\n\nEliminates array bounds checking within expressions.\n\nIn the example below the bound check of array A is skipped to improve performance.\n\n```julia\nfunction sum(A::AbstractArray)\n    r = zero(eltype(A))\n    for i = 1:length(A)\n        @inbounds r += A[i]\n    end\n    return r\nend\n```\n\n!!! warning\n\n    Using `@inbounds` may return incorrect results/crashes/corruption\n    for out-of-bounds indices. The user is responsible for checking it manually.\n", (:macro, (:call, :inbounds, :blk), (:block,
          (:line, 232, :none),
          (:quote, (:block,
              (:$, (:call, :Expr, (:quote, #QuoteNode
                    :inbounds
                  ), true)),
              (:$, (:call, :esc, :blk)),
              (:$, (:call, :Expr, (:quote, #QuoteNode
                    :inbounds
                  ), (:quote, #QuoteNode
                    :pop
                  )))
            ))
        ))),
    (:line, 237, :none),
    (:macro, (:call, :label, (:(::), :name, :Symbol)), (:block,
        (:line, 238, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :symboliclabel
          ), :name)
      )),
    (:line, 241, :none),
    (:macro, (:call, :goto, (:(::), :name, :Symbol)), (:block,
        (:line, 242, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :symbolicgoto
          ), :name)
      )),
    (:line, 247, :none),
    (:function, (:call, :getindex, (:(::), :v, :SimpleVector), (:(::), :i, :Int)), (:block,
        (:line, 248, :none),
        (:if, (:call, :!, (:comparison, 1, :(<=), :i, :(<=), (:call, :length, :v))), (:block,
            (:line, 249, :none),
            (:call, :throw, (:call, :BoundsError, :v, :i))
          )),
        (:line, 251, :none),
        (:(=), :x, (:call, :unsafe_load, (:call, :+, (:call, :convert, (:curly, :Ptr, (:curly, :Ptr, :Void)), (:call, :data_pointer_from_objref, :v)), (:call, :*, :i, (:call, :sizeof, :Ptr))))),
        (:line, 252, :none),
        (:&&, (:call, :(==), :x, :C_NULL), (:call, :throw, (:call, :UndefRefError))),
        (:line, 253, :none),
        (:return, (:call, :unsafe_pointer_to_objref, :x))
      )),
    (:line, 256, :none),
    (:(=), (:call, :length, (:(::), :v, :SimpleVector)), (:block,
        (:line, 256, :none),
        (:., :v, (:quote, #QuoteNode
            :length
          ))
      )),
    (:line, 257, :none),
    (:(=), (:call, :endof, (:(::), :v, :SimpleVector)), (:block,
        (:line, 257, :none),
        (:., :v, (:quote, #QuoteNode
            :length
          ))
      )),
    (:line, 258, :none),
    (:(=), (:call, :start, (:(::), :v, :SimpleVector)), (:block,
        (:line, 258, :none),
        1
      )),
    (:line, 259, :none),
    (:(=), (:call, :next, (:(::), :v, :SimpleVector), :i), (:block,
        (:line, 259, :none),
        (:tuple, (:ref, :v, :i), (:call, :+, :i, 1))
      )),
    (:line, 260, :none),
    (:(=), (:call, :done, (:(::), :v, :SimpleVector), :i), (:block,
        (:line, 260, :none),
        (:call, :>, :i, (:., :v, (:quote, #QuoteNode
              :length
            )))
      )),
    (:line, 261, :none),
    (:(=), (:call, :isempty, (:(::), :v, :SimpleVector)), (:block,
        (:line, 261, :none),
        (:call, :(==), (:., :v, (:quote, #QuoteNode
              :length
            )), 0)
      )),
    (:line, 262, :none),
    (:(=), (:call, :indices, (:(::), :v, :SimpleVector)), (:block,
        (:line, 262, :none),
        (:tuple, (:call, :OneTo, (:call, :length, :v)))
      )),
    (:line, 263, :none),
    (:(=), (:call, :linearindices, (:(::), :v, :SimpleVector)), (:block,
        (:line, 263, :none),
        (:call, :indices, :v, 1)
      )),
    (:line, 264, :none),
    (:(=), (:call, :indices, (:(::), :v, :SimpleVector), :d), (:block,
        (:line, 264, :none),
        (:if, (:call, :(<=), :d, 1), (:ref, (:call, :indices, :v), :d), (:call, :OneTo, 1))
      )),
    (:line, 266, :none),
    (:function, (:call, :(==), (:(::), :v1, :SimpleVector), (:(::), :v2, :SimpleVector)), (:block,
        (:line, 267, :none),
        (:||, (:call, :(==), (:call, :length, :v1), (:call, :length, :v2)), (:return, false)),
        (:line, 268, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :v1))), (:block,
            (:line, 269, :none),
            (:||, (:call, :(==), (:ref, :v1, :i), (:ref, :v2, :i)), (:return, false))
          )),
        (:line, 271, :none),
        (:return, true)
      )),
    (:line, 274, :none),
    (:(=), (:call, :map, :f, (:(::), :v, :SimpleVector)), (:block,
        (:line, 274, :none),
        (:typed_comprehension, :Any, (:generator, (:call, :f, (:ref, :v, :i)), (:(=), :i, (:(:), 1, (:call, :length, :v)))))
      )),
    (:line, 276, :none),
    (:(=), (:call, :getindex, (:(::), :v, :SimpleVector), (:(::), :I, :AbstractArray)), (:block,
        (:line, 276, :none),
        (:call, (:., :Core, (:quote, #QuoteNode
              :svec
            )), (:..., (:typed_comprehension, :Any, (:generator, (:ref, :v, :i), (:(=), :i, :I)))))
      )),
    (:line, 278, :none),
    (:macrocall, :(Core.@doc), "    isassigned(array, i) -> Bool\n\nTests whether the given array has a value associated with index `i`. Returns `false`\nif the index is out of bounds, or has an undefined reference.\n\n```jldoctest\njulia> isassigned(rand(3, 3), 5)\ntrue\n\njulia> isassigned(rand(3, 3), 3 * 3 + 1)\nfalse\n\njulia> mutable struct Foo end\n\njulia> v = similar(rand(3), Foo)\n3-element Array{Foo,1}:\n #undef\n #undef\n #undef\n\njulia> isassigned(v, 1)\nfalse\n```\n", (:function, :isassigned)),
    (:line, 305, :none),
    (:function, (:call, :isassigned, (:(::), :v, :SimpleVector), (:(::), :i, :Int)), (:block,
        (:line, 306, :none),
        (:||, (:comparison, 1, :(<=), :i, :(<=), (:call, :length, :v)), (:return, false)),
        (:line, 307, :none),
        (:(=), :x, (:call, :unsafe_load, (:call, :+, (:call, :convert, (:curly, :Ptr, (:curly, :Ptr, :Void)), (:call, :data_pointer_from_objref, :v)), (:call, :*, :i, (:call, :sizeof, :Ptr))))),
        (:line, 308, :none),
        (:return, (:call, :(!=), :x, :C_NULL))
      )),
    (:line, 311, :none),
    (:macrocall, :(Core.@doc), "    Colon()\n\nColons (:) are used to signify indexing entire objects or dimensions at once.\n\nVery few operations are defined on Colons directly; instead they are converted\nby `to_indices` to an internal vector type (`Base.Slice`) to represent the\ncollection of indices they span before being used.\n", (:type, false, :Colon, (:block,
          (:line, 321, :none)
        ))),
    (:line, 322, :none),
    (:const, (:(=), :(:), (:call, :Colon))),
    (:line, 325, :none),
    (:type, false, (:curly, :Val, :T), (:block,
        (:line, 326, :none)
      )),
    (:line, 329, :none),
    (:function, (:call, :vector_any, (:..., (:(::), :xs, :ANY))), (:block,
        (:line, 330, :none),
        (:(=), :n, (:call, :length, :xs)),
        (:line, 331, :none),
        (:(=), :a, (:call, (:curly, :Vector, :Any), :n)),
        (:line, 332, :none),
        (:macrocall, Symbol("@inbounds"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 333, :none),
              (:call, (:., :Core, (:quote, #QuoteNode
                    :arrayset
                  )), :a, (:ref, :xs, :i), :i)
            ))),
        (:line, 335, :none),
        :a
      )),
    (:line, 338, :none),
    (:function, (:call, :as_kwargs, (:(::), :xs, (:curly, :Union, :AbstractArray, :Associative))), (:block,
        (:line, 339, :none),
        (:(=), :n, (:call, :length, :xs)),
        (:line, 340, :none),
        (:(=), :to, (:call, (:curly, :Vector, :Any), (:call, :*, :n, 2))),
        (:line, 341, :none),
        (:(=), :i, 1),
        (:line, 342, :none),
        (:for, (:(=), (:tuple, :k, :v), :xs), (:block,
            (:line, 343, :none),
            (:(=), (:ref, :to, :i), (:(::), :k, :Symbol)),
            (:line, 344, :none),
            (:(=), (:ref, :to, (:call, :+, :i, 1)), :v),
            (:line, 345, :none),
            (:+=, :i, 2)
          )),
        (:line, 347, :none),
        (:return, :to)
      )),
    (:line, 350, :none),
    (:function, (:call, :as_kwargs, :xs), (:block,
        (:line, 351, :none),
        (:(=), :to, (:call, (:curly, :Vector, :Any), 0)),
        (:line, 352, :none),
        (:for, (:(=), (:tuple, :k, :v), :xs), (:block,
            (:line, 353, :none),
            (:call, :ccall, (:quote, #QuoteNode
                :jl_array_ptr_1d_push2
              ), :Void, (:tuple, :Any, :Any, :Any), :to, (:(::), :k, :Symbol), :v)
          )),
        (:line, 355, :none),
        (:return, :to)
      )),
    (:line, 358, :none),
    (:(=), (:call, :isempty, :itr), (:block,
        (:line, 358, :none),
        (:call, :done, :itr, (:call, :start, :itr))
      )),
    (:line, 360, :none),
    (:macrocall, :(Core.@doc), "    invokelatest(f, args...)\n\nCalls `f(args...)`, but guarantees that the most recent method of `f`\nwill be executed.   This is useful in specialized circumstances,\ne.g. long-running event loops or callback functions that may\ncall obsolete versions of a function `f`.\n(The drawback is that `invokelatest` is somewhat slower than calling\n`f` directly, and the type of the result cannot be inferred by the compiler.)\n", (:(=), (:call, :invokelatest, :f, (:..., :args)), (:block,
          (:line, 370, :none),
          (:call, (:., :Core, (:quote, #QuoteNode
                :_apply_latest
              )), :f, :args)
        )))
  ))