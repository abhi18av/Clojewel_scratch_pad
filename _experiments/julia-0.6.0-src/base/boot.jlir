(:quote, (:block,
    (:line, 118, :none),
    (:export, :Any, :DataType, :Vararg, :ANY, :NTuple, :Tuple, :Type, :UnionAll, :TypeName, :TypeVar, :Union, :Void, :SimpleVector, :AbstractArray, :DenseArray, :Function, :CodeInfo, :Method, :MethodTable, :TypeMapEntry, :TypeMapLevel, :Module, :Symbol, :Task, :Array, :WeakRef, :VecElement, :Number, :Real, :Integer, :Bool, :Ref, :Ptr, :AbstractFloat, :Float16, :Float32, :Float64, :Signed, :Int, :Int8, :Int16, :Int32, :Int64, :Int128, :Unsigned, :UInt, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128, :Char, :DirectIndexString, :AbstractString, :String, :IO, :ErrorException, :BoundsError, :DivideError, :DomainError, :Exception, :InexactError, :InterruptException, :OutOfMemoryError, :ReadOnlyMemoryError, :OverflowError, :StackOverflowError, :SegmentationFault, :UndefRefError, :UndefVarError, :TypeError, :Expr, :GotoNode, :LabelNode, :LineNumberNode, :QuoteNode, :GlobalRef, :NewvarNode, :SSAValue, :Slot, :SlotNumber, :TypedSlot, :fieldtype, :getfield, :setfield!, :nfields, :throw, :tuple, :(===), :isdefined, :eval, :issubtype, :typeof, :isa, :typeassert, :applicable, :invoke, :nothing, :Main),
    (:line, 150, :none),
    (:const, (:(=), :AnyVector, (:curly, :Array, :Any, 1))),
    (:line, 152, :none),
    (:abstract, :Number),
    (:line, 153, :none),
    (:abstract, (:<:, :Real, :Number)),
    (:line, 154, :none),
    (:abstract, (:<:, :AbstractFloat, :Real)),
    (:line, 155, :none),
    (:abstract, (:<:, :Integer, :Real)),
    (:line, 156, :none),
    (:abstract, (:<:, :Signed, :Integer)),
    (:line, 157, :none),
    (:abstract, (:<:, :Unsigned, :Integer)),
    (:line, 159, :none),
    (:bitstype, 16, (:<:, :Float16, :AbstractFloat)),
    (:line, 160, :none),
    (:bitstype, 32, (:<:, :Float32, :AbstractFloat)),
    (:line, 161, :none),
    (:bitstype, 64, (:<:, :Float64, :AbstractFloat)),
    (:line, 163, :none),
    (:bitstype, 8, (:<:, :Bool, :Integer)),
    (:line, 164, :none),
    (:bitstype, 32, :Char),
    (:line, 166, :none),
    (:bitstype, 8, (:<:, :Int8, :Signed)),
    (:line, 167, :none),
    (:bitstype, 8, (:<:, :UInt8, :Unsigned)),
    (:line, 168, :none),
    (:bitstype, 16, (:<:, :Int16, :Signed)),
    (:line, 169, :none),
    (:bitstype, 16, (:<:, :UInt16, :Unsigned)),
    (:line, 170, :none),
    (:bitstype, 32, (:<:, :Int32, :Signed)),
    (:line, 171, :none),
    (:bitstype, 32, (:<:, :UInt32, :Unsigned)),
    (:line, 172, :none),
    (:bitstype, 64, (:<:, :Int64, :Signed)),
    (:line, 173, :none),
    (:bitstype, 64, (:<:, :UInt64, :Unsigned)),
    (:line, 174, :none),
    (:bitstype, 128, (:<:, :Int128, :Signed)),
    (:line, 175, :none),
    (:bitstype, 128, (:<:, :UInt128, :Unsigned)),
    (:line, 177, :none),
    (:if, (:call, :(===), :Int, :Int64), (:block,
        (:line, 178, :none),
        (:const, (:(=), :UInt, :UInt64))
      ), (:block,
        (:line, 180, :none),
        (:const, (:(=), :UInt, :UInt32))
      )),
    (:line, 183, :none),
    (:function, :Typeof),
    (:line, 184, :none),
    (:(=), (:call, (:(::), :f, (:call, :typeof, :Typeof)), (:(::), :x, :ANY)), (:block,
        (:line, 184, :none),
        (:if, (:call, :isa, :x, :Type), (:curly, :Type, :x), (:call, :typeof, :x))
      )),
    (:line, 186, :none),
    (:abstract, :Exception),
    (:line, 187, :none),
    (:type, true, (:<:, :ErrorException, :Exception), (:block,
        (:line, 188, :none),
        (:(::), :msg, :AbstractString),
        (:line, 189, :none),
        (:(=), (:call, :ErrorException, (:(::), :msg, :AbstractString)), (:block,
            (:line, 189, :none),
            (:call, :new, :msg)
          ))
      )),
    (:line, 192, :none),
    (:(=), (:call, :Expr, (:..., (:(::), :args, :ANY))), (:block,
        (:line, 192, :none),
        (:call, :_expr, (:..., :args))
      )),
    (:line, 194, :none),
    (:macro, (:call, :_noinline_meta), (:block,
        (:line, 195, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :meta
          ), (:quote, #QuoteNode
            :noinline
          ))
      )),
    (:line, 198, :none),
    (:type, false, (:<:, :BoundsError, :Exception), (:block,
        (:line, 199, :none),
        (:(::), :a, :Any),
        (:line, 200, :none),
        (:(::), :i, :Any),
        (:line, 201, :none),
        (:(=), (:call, :BoundsError), (:block,
            (:line, 201, :none),
            (:call, :new)
          )),
        (:line, 202, :none),
        (:(=), (:call, :BoundsError, (:(::), :a, :ANY)), (:block,
            (:line, 202, :none),
            (:block,
              (:macrocall, Symbol("@_noinline_meta")),
              (:call, :new, :a)
            )
          )),
        (:line, 203, :none),
        (:(=), (:call, :BoundsError, (:(::), :a, :ANY), :i), (:block,
            (:line, 203, :none),
            (:block,
              (:macrocall, Symbol("@_noinline_meta")),
              (:call, :new, :a, :i)
            )
          ))
      )),
    (:line, 205, :none),
    (:type, false, (:<:, :DivideError, :Exception), (:block,
        (:line, 205, :none)
      )),
    (:line, 206, :none),
    (:type, false, (:<:, :DomainError, :Exception), (:block,
        (:line, 206, :none)
      )),
    (:line, 207, :none),
    (:type, false, (:<:, :OverflowError, :Exception), (:block,
        (:line, 207, :none)
      )),
    (:line, 208, :none),
    (:type, false, (:<:, :InexactError, :Exception), (:block,
        (:line, 208, :none)
      )),
    (:line, 209, :none),
    (:type, false, (:<:, :OutOfMemoryError, :Exception), (:block,
        (:line, 209, :none)
      )),
    (:line, 210, :none),
    (:type, false, (:<:, :ReadOnlyMemoryError, :Exception), (:block,
        (:line, 210, :none)
      )),
    (:line, 211, :none),
    (:type, false, (:<:, :SegmentationFault, :Exception), (:block,
        (:line, 211, :none)
      )),
    (:line, 212, :none),
    (:type, false, (:<:, :StackOverflowError, :Exception), (:block,
        (:line, 212, :none)
      )),
    (:line, 213, :none),
    (:type, false, (:<:, :UndefRefError, :Exception), (:block,
        (:line, 213, :none)
      )),
    (:line, 214, :none),
    (:type, false, (:<:, :UndefVarError, :Exception), (:block,
        (:line, 215, :none),
        (:(::), :var, :Symbol)
      )),
    (:line, 217, :none),
    (:type, false, (:<:, :InterruptException, :Exception), (:block,
        (:line, 217, :none)
      )),
    (:line, 218, :none),
    (:type, true, (:<:, :TypeError, :Exception), (:block,
        (:line, 219, :none),
        (:(::), :func, :Symbol),
        (:line, 220, :none),
        (:(::), :context, :AbstractString),
        (:line, 221, :none),
        (:(::), :expected, :Type),
        (:line, 222, :none),
        :got
      )),
    (:line, 225, :none),
    (:abstract, (:<:, :DirectIndexString, :AbstractString)),
    (:line, 227, :none),
    (:(=), (:call, :String, (:(::), :s, :String)), (:block,
        (:line, 227, :none),
        :s
      )),
    (:line, 230, :none),
    (:(=), (:call, :getptls), (:block,
        (:line, 230, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_get_ptls_states
          ), (:curly, :Ptr, :Void), (:tuple,))
      )),
    (:line, 232, :none),
    (:(=), (:call, :include, (:(::), :fname, :String)), (:block,
        (:line, 232, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_load_
          ), :Any, (:tuple, :Any), :fname)
      )),
    (:line, 234, :none),
    (:(=), (:call, :eval, (:(::), :e, :ANY)), (:block,
        (:line, 234, :none),
        (:call, :eval, :Main, :e)
      )),
    (:line, 235, :none),
    (:(=), (:call, :eval, (:(::), :m, :Module), (:(::), :e, :ANY)), (:block,
        (:line, 235, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_toplevel_eval_in
          ), :Any, (:tuple, :Any, :Any), :m, :e)
      )),
    (:line, 237, :none),
    (:(=), (:call, :kwfunc, (:(::), :f, :ANY)), (:block,
        (:line, 237, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_get_keyword_sorter
          ), :Any, (:tuple, :Any), :f)
      )),
    (:line, 239, :none),
    (:(=), (:call, :kwftype, (:(::), :t, :ANY)), (:block,
        (:line, 239, :none),
        (:call, :typeof, (:call, :ccall, (:quote, #QuoteNode
              :jl_get_kwsorter
            ), :Any, (:tuple, :Any), :t))
      )),
    (:line, 241, :none),
    (:type, true, :Box, (:block,
        (:line, 242, :none),
        (:(::), :contents, :Any),
        (:line, 243, :none),
        (:(=), (:call, :Box, (:(::), :x, :ANY)), (:block,
            (:line, 243, :none),
            (:call, :new, :x)
          )),
        (:line, 244, :none),
        (:(=), (:call, :Box), (:block,
            (:line, 244, :none),
            (:call, :new)
          ))
      )),
    (:line, 249, :none),
    (:type, true, :WeakRef, (:block,
        (:line, 250, :none),
        :value,
        (:line, 251, :none),
        (:(=), (:call, :WeakRef), (:block,
            (:line, 251, :none),
            (:call, :WeakRef, :nothing)
          )),
        (:line, 252, :none),
        (:(=), (:call, :WeakRef, (:(::), :v, :ANY)), (:block,
            (:line, 252, :none),
            (:call, :ccall, (:quote, #QuoteNode
                :jl_gc_new_weakref_th
              ), (:curly, :Ref, :WeakRef), (:tuple, (:curly, :Ptr, :Void), :Any), (:call, :getptls), :v)
          ))
      )),
    (:line, 256, :none),
    (:(=), (:call, :TypeVar, (:(::), :n, :Symbol)), (:block,
        (:line, 256, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_typevar
          ), (:curly, :Ref, :TypeVar), (:tuple, :Any, :Any, :Any), :n, (:curly, :Union), :Any)
      )),
    (:line, 258, :none),
    (:(=), (:call, :TypeVar, (:(::), :n, :Symbol), (:(::), :ub, :ANY)), (:block,
        (:line, 258, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_typevar
          ), (:curly, :Ref, :TypeVar), (:tuple, :Any, :Any, :Any), :n, (:curly, :Union), :ub)
      )),
    (:line, 260, :none),
    (:(=), (:call, :TypeVar, (:(::), :n, :Symbol), (:(::), :lb, :ANY), (:(::), :ub, :ANY)), (:block,
        (:line, 260, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_typevar
          ), (:curly, :Ref, :TypeVar), (:tuple, :Any, :Any, :Any), :n, :lb, :ub)
      )),
    (:line, 263, :none),
    (:(=), (:call, :UnionAll, (:(::), :v, :TypeVar), (:(::), :t, :ANY)), (:block,
        (:line, 263, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_type_unionall
          ), :Any, (:tuple, :Any, :Any), :v, :t)
      )),
    (:line, 265, :none),
    (:(=), (:call, :Void), (:block,
        (:line, 265, :none),
        :nothing
      )),
    (:line, 267, :none),
    (:(=), (:call, (:(::), (:curly, :Type, (:curly, :Tuple)))), (:block,
        (:line, 267, :none),
        (:tuple,)
      )),
    (:line, 269, :none),
    (:type, false, (:curly, :VecElement, :T), (:block,
        (:line, 270, :none),
        (:(::), :value, :T),
        (:line, 271, :none),
        (:(=), (:where, (:call, (:curly, :VecElement, :T), (:(::), :value, :T)), :T), (:block,
            (:line, 271, :none),
            (:call, :new, :value)
          ))
      )),
    (:line, 273, :none),
    (:(=), (:where, (:call, :VecElement, (:(::), :arg, :T)), :T), (:block,
        (:line, 273, :none),
        (:call, (:curly, :VecElement, :T), :arg)
      )),
    (:line, 276, :none),
    (:(=), (:call, :splicedexpr, (:(::), :hd, :Symbol), (:(::), :args, (:curly, :Array, :Any, 1))), (:block,
        (:line, 276, :none),
        (:block,
          (:(=), :e, (:call, :Expr, :hd)),
          (:(=), (:., :e, (:quote, #QuoteNode
                :args
              )), :args),
          :e
        )
      )),
    (:line, 278, :none),
    (:(=), (:call, :_new, (:(::), :typ, :Symbol), (:(::), :argty, :Symbol)), (:block,
        (:line, 278, :none),
        (:call, :eval, (:quote, (:(=), (:call, (:(::), (:curly, :Type, (:$, :typ))), (:(::), :n, (:$, :argty))), (:block,
                (:line, 278, :none),
                (:$, (:call, :Expr, (:quote, #QuoteNode
                      :new
                    ), :typ, (:quote, #QuoteNode
                      :n
                    )))
              ))))
      )),
    (:line, 279, :none),
    (:call, :_new, (:quote, #QuoteNode
        :LabelNode
      ), (:quote, #QuoteNode
        :Int
      )),
    (:line, 280, :none),
    (:call, :_new, (:quote, #QuoteNode
        :GotoNode
      ), (:quote, #QuoteNode
        :Int
      )),
    (:line, 281, :none),
    (:call, :_new, (:quote, #QuoteNode
        :NewvarNode
      ), (:quote, #QuoteNode
        :SlotNumber
      )),
    (:line, 282, :none),
    (:call, :_new, (:quote, #QuoteNode
        :QuoteNode
      ), (:quote, #QuoteNode
        :ANY
      )),
    (:line, 283, :none),
    (:call, :_new, (:quote, #QuoteNode
        :SSAValue
      ), (:quote, #QuoteNode
        :Int
      )),
    (:line, 284, :none),
    (:call, :eval, (:quote, (:(=), (:call, (:(::), (:curly, :Type, :LineNumberNode)), (:(::), :l, :Int)), (:block,
            (:line, 284, :none),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :new
                ), (:quote, #QuoteNode
                  :LineNumberNode
                ), (:quote, #QuoteNode
                  :l
                )))
          )))),
    (:line, 285, :none),
    (:call, :eval, (:quote, (:(=), (:call, (:(::), (:curly, :Type, :GlobalRef)), (:(::), :m, :Module), (:(::), :s, :Symbol)), (:block,
            (:line, 285, :none),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :new
                ), (:quote, #QuoteNode
                  :GlobalRef
                ), (:quote, #QuoteNode
                  :m
                ), (:quote, #QuoteNode
                  :s
                )))
          )))),
    (:line, 286, :none),
    (:call, :eval, (:quote, (:(=), (:call, (:(::), (:curly, :Type, :SlotNumber)), (:(::), :n, :Int)), (:block,
            (:line, 286, :none),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :new
                ), (:quote, #QuoteNode
                  :SlotNumber
                ), (:quote, #QuoteNode
                  :n
                )))
          )))),
    (:line, 287, :none),
    (:call, :eval, (:quote, (:(=), (:call, (:(::), (:curly, :Type, :TypedSlot)), (:(::), :n, :Int), (:(::), :t, :ANY)), (:block,
            (:line, 287, :none),
            (:$, (:call, :Expr, (:quote, #QuoteNode
                  :new
                ), (:quote, #QuoteNode
                  :TypedSlot
                ), (:quote, #QuoteNode
                  :n
                ), (:quote, #QuoteNode
                  :t
                )))
          )))),
    (:line, 289, :none),
    (:(=), (:call, :Module, (:kw, (:(::), :name, :Symbol), (:quote, #QuoteNode
            :anonymous
          )), (:kw, (:(::), :std_imports, :Bool), true)), (:block,
        (:line, 289, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_f_new_module
          ), (:curly, :Ref, :Module), (:tuple, :Any, :Bool), :name, :std_imports)
      )),
    (:line, 291, :none),
    (:(=), (:call, :Task, (:(::), :f, :ANY)), (:block,
        (:line, 291, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_task
          ), (:curly, :Ref, :Task), (:tuple, :Any, :Int), :f, 0)
      )),
    (:line, 296, :none),
    (:(=), (:call, :convert, (:(::), (:curly, :Type, :Any)), (:(::), :x, :ANY)), (:block,
        (:line, 296, :none),
        :x
      )),
    (:line, 297, :none),
    (:(=), (:where, (:call, :convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), :T), (:block,
        (:line, 297, :none),
        :x
      )),
    (:line, 298, :none),
    (:(=), (:where, (:call, :cconvert, (:(::), (:curly, :Type, :T)), :x), :T), (:block,
        (:line, 298, :none),
        (:call, :convert, :T, :x)
      )),
    (:line, 299, :none),
    (:(=), (:where, (:call, :unsafe_convert, (:(::), (:curly, :Type, :T)), (:(::), :x, :T)), :T), (:block,
        (:line, 299, :none),
        :x
      )),
    (:line, 301, :none),
    (:const, (:(=), (:curly, :NTuple, :N, :T), (:curly, :Tuple, (:curly, :Vararg, :T, :N)))),
    (:line, 305, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, :N), (:(::), :d, (:curly, :NTuple, :N, :Int))), :T, :N), (:block,
        (:line, 305, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_array
          ), (:curly, :Array, :T, :N), (:tuple, :Any, :Any), (:curly, :Array, :T, :N), :d)
      )),
    (:line, 307, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 1), (:(::), :d, (:curly, :NTuple, 1, :Int))), :T), (:block,
        (:line, 307, :none),
        (:call, (:curly, :Array, :T, 1), (:call, :getfield, :d, 1))
      )),
    (:line, 308, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 2), (:(::), :d, (:curly, :NTuple, 2, :Int))), :T), (:block,
        (:line, 308, :none),
        (:call, (:curly, :Array, :T, 2), (:call, :getfield, :d, 1), (:call, :getfield, :d, 2))
      )),
    (:line, 309, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 3), (:(::), :d, (:curly, :NTuple, 3, :Int))), :T), (:block,
        (:line, 309, :none),
        (:call, (:curly, :Array, :T, 3), (:call, :getfield, :d, 1), (:call, :getfield, :d, 2), (:call, :getfield, :d, 3))
      )),
    (:line, 310, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, :N), (:(::), :d, (:curly, :Vararg, :Int, :N))), :T, :N), (:block,
        (:line, 310, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_new_array
          ), (:curly, :Array, :T, :N), (:tuple, :Any, :Any), (:curly, :Array, :T, :N), :d)
      )),
    (:line, 311, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 1), (:(::), :m, :Int)), :T), (:block,
        (:line, 311, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_alloc_array_1d
          ), (:curly, :Array, :T, 1), (:tuple, :Any, :Int), (:curly, :Array, :T, 1), :m)
      )),
    (:line, 312, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 2), (:(::), :m, :Int), (:(::), :n, :Int)), :T), (:block,
        (:line, 312, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_alloc_array_2d
          ), (:curly, :Array, :T, 2), (:tuple, :Any, :Int, :Int), (:curly, :Array, :T, 2), :m, :n)
      )),
    (:line, 314, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 3), (:(::), :m, :Int), (:(::), :n, :Int), (:(::), :o, :Int)), :T), (:block,
        (:line, 314, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_alloc_array_3d
          ), (:curly, :Array, :T, 3), (:tuple, :Any, :Int, :Int, :Int), (:curly, :Array, :T, 3), :m, :n, :o)
      )),
    (:line, 317, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T), (:(::), :d, (:curly, :NTuple, :N, :Int))), :T, :N), (:block,
        (:line, 317, :none),
        (:call, (:curly, :Array, :T, :N), :d)
      )),
    (:line, 318, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T), (:(::), :m, :Int)), :T), (:block,
        (:line, 318, :none),
        (:call, (:curly, :Array, :T, 1), :m)
      )),
    (:line, 319, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T), (:(::), :m, :Int), (:(::), :n, :Int)), :T), (:block,
        (:line, 319, :none),
        (:call, (:curly, :Array, :T, 2), :m, :n)
      )),
    (:line, 320, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T), (:(::), :m, :Int), (:(::), :n, :Int), (:(::), :o, :Int)), :T), (:block,
        (:line, 320, :none),
        (:call, (:curly, :Array, :T, 3), :m, :n, :o)
      )),
    (:line, 322, :none),
    (:(=), (:where, (:call, (:curly, :Array, :T, 1)), :T), (:block,
        (:line, 322, :none),
        (:call, (:curly, :Array, :T, 1), 0)
      )),
    (:line, 325, :none),
    (:function, (:call, :Symbol, (:(::), :s, :String)), (:block,
        (:line, 326, :none),
        (:return, (:call, :ccall, (:quote, #QuoteNode
              :jl_symbol_n
            ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int), (:call, :ccall, (:quote, #QuoteNode
                :jl_string_ptr
              ), (:curly, :Ptr, :UInt8), (:tuple, :Any), :s), (:call, :sizeof, :s)))
      )),
    (:line, 330, :none),
    (:function, (:call, :Symbol, (:(::), :a, (:curly, :Array, :UInt8, 1))), (:block,
        (:line, 331, :none),
        (:return, (:call, :ccall, (:quote, #QuoteNode
              :jl_symbol_n
            ), (:curly, :Ref, :Symbol), (:tuple, (:curly, :Ptr, :UInt8), :Int), (:call, :ccall, (:quote, #QuoteNode
                :jl_array_ptr
              ), (:curly, :Ptr, :UInt8), (:tuple, :Any), :a), (:call, (:., :Intrinsics, (:quote, #QuoteNode
                  :arraylen
                )), :a)))
      )),
    (:line, 337, :none),
    (:macro, (:call, :doc, (:..., :x)), (:block,
        (:line, 338, :none),
        (:call, :atdoc, (:..., :x))
      )),
    (:line, 340, :none),
    (:macro, (:call, :__doc__, :x), (:block,
        (:line, 341, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :escape
          ), (:call, :Expr, (:quote, #QuoteNode
              :block
            ), (:call, :Expr, (:quote, #QuoteNode
                :meta
              ), (:quote, #QuoteNode
                :doc
              )), :x))
      )),
    (:line, 343, :none),
    (:macro, (:call, :doc_str, :s), (:block,
        (:line, 344, :none),
        (:call, :Expr, (:quote, #QuoteNode
            :escape
          ), :s)
      )),
    (:line, 346, :none),
    (:(=), :atdoc, (:->, (:tuple, :str, :expr), (:block,
          (:line, 346, :none),
          (:call, :Expr, (:quote, #QuoteNode
              :escape
            ), :expr)
        ))),
    (:line, 347, :none),
    (:(=), (:call, :atdoc!, :λ), (:block,
        (:line, 347, :none),
        (:global, (:(=), :atdoc, :λ))
      )),
    (:line, 351, :none),
    (:abstract, :IO),
    (:line, 352, :none),
    (:type, true, (:<:, :CoreSTDOUT, :IO), (:block,
        (:line, 352, :none)
      )),
    (:line, 353, :none),
    (:type, true, (:<:, :CoreSTDERR, :IO), (:block,
        (:line, 353, :none)
      )),
    (:line, 354, :none),
    (:const, (:(=), :STDOUT, (:call, :CoreSTDOUT))),
    (:line, 355, :none),
    (:const, (:(=), :STDERR, (:call, :CoreSTDERR))),
    (:line, 356, :none),
    (:(=), (:call, :io_pointer, (:(::), :CoreSTDOUT)), (:block,
        (:line, 356, :none),
        (:call, (:., :Intrinsics, (:quote, #QuoteNode
              :pointerref
            )), (:call, (:., :Intrinsics, (:quote, #QuoteNode
                :cglobal
              )), (:quote, #QuoteNode
              :jl_uv_stdout
            ), (:curly, :Ptr, :Void)), 1, 1)
      )),
    (:line, 357, :none),
    (:(=), (:call, :io_pointer, (:(::), :CoreSTDERR)), (:block,
        (:line, 357, :none),
        (:call, (:., :Intrinsics, (:quote, #QuoteNode
              :pointerref
            )), (:call, (:., :Intrinsics, (:quote, #QuoteNode
                :cglobal
              )), (:quote, #QuoteNode
              :jl_uv_stderr
            ), (:curly, :Ptr, :Void)), 1, 1)
      )),
    (:line, 359, :none),
    (:(=), (:call, :unsafe_write, (:(::), :io, :IO), (:(::), :x, (:curly, :Ptr, :UInt8)), (:(::), :nb, :UInt)), (:block,
        (:line, 359, :none),
        (:block,
          (:call, :ccall, (:quote, #QuoteNode
              :jl_uv_puts
            ), :Void, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :UInt8), :UInt), (:call, :io_pointer, :io), :x, :nb),
          :nb
        )
      )),
    (:line, 361, :none),
    (:(=), (:call, :unsafe_write, (:(::), :io, :IO), (:(::), :x, (:curly, :Ptr, :UInt8)), (:(::), :nb, :Int)), (:block,
        (:line, 361, :none),
        (:block,
          (:call, :ccall, (:quote, #QuoteNode
              :jl_uv_puts
            ), :Void, (:tuple, (:curly, :Ptr, :Void), (:curly, :Ptr, :UInt8), :Int), (:call, :io_pointer, :io), :x, :nb),
          :nb
        )
      )),
    (:line, 363, :none),
    (:(=), (:call, :write, (:(::), :io, :IO), (:(::), :x, :UInt8)), (:block,
        (:line, 363, :none),
        (:block,
          (:call, :ccall, (:quote, #QuoteNode
              :jl_uv_putb
            ), :Void, (:tuple, (:curly, :Ptr, :Void), :UInt8), (:call, :io_pointer, :io), :x),
          1
        )
      )),
    (:line, 365, :none),
    (:function, (:call, :write, (:(::), :io, :IO), (:(::), :x, :String)), (:block,
        (:line, 366, :none),
        (:(=), :nb, (:call, :sizeof, :x)),
        (:line, 367, :none),
        (:call, :unsafe_write, :io, (:call, :ccall, (:quote, #QuoteNode
              :jl_string_ptr
            ), (:curly, :Ptr, :UInt8), (:tuple, :Any), :x), :nb),
        (:line, 368, :none),
        (:return, :nb)
      )),
    (:line, 371, :none),
    (:(=), (:call, :show, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
        (:line, 371, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_static_show
          ), :Void, (:tuple, (:curly, :Ptr, :Void), :Any), (:call, :io_pointer, :io), :x)
      )),
    (:line, 372, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :x, :Char)), (:block,
        (:line, 372, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_uv_putc
          ), :Void, (:tuple, (:curly, :Ptr, :Void), :Char), (:call, :io_pointer, :io), :x)
      )),
    (:line, 373, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :x, :String)), (:block,
        (:line, 373, :none),
        (:call, :write, :io, :x)
      )),
    (:line, 374, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :x, :ANY)), (:block,
        (:line, 374, :none),
        (:call, :show, :io, :x)
      )),
    (:line, 375, :none),
    (:(=), (:call, :print, (:(::), :io, :IO), (:(::), :x, :ANY), (:..., (:(::), :a, :ANY))), (:block,
        (:line, 375, :none),
        (:block,
          (:call, :print, :io, :x),
          (:call, :print, :io, (:..., :a))
        )
      )),
    (:line, 376, :none),
    (:(=), (:call, :println, (:(::), :io, :IO)), (:block,
        (:line, 376, :none),
        (:call, :write, :io, 0x0a)
      )),
    (:line, 377, :none),
    (:(=), (:call, :println, (:(::), :io, :IO), (:..., (:(::), :x, :ANY))), (:block,
        (:line, 377, :none),
        (:block,
          (:call, :print, :io, (:..., :x)),
          (:call, :println, :io)
        )
      )),
    (:line, 379, :none),
    (:(=), (:call, :show, (:(::), :a, :ANY)), (:block,
        (:line, 379, :none),
        (:call, :show, :STDOUT, :a)
      )),
    (:line, 380, :none),
    (:(=), (:call, :print, (:..., (:(::), :a, :ANY))), (:block,
        (:line, 380, :none),
        (:call, :print, :STDOUT, (:..., :a))
      )),
    (:line, 381, :none),
    (:(=), (:call, :println, (:..., (:(::), :a, :ANY))), (:block,
        (:line, 381, :none),
        (:call, :println, :STDOUT, (:..., :a))
      )),
    (:line, 383, :none),
    (:call, :ccall, (:quote, #QuoteNode
        :jl_set_istopmod
      ), :Void, (:tuple, :Bool), true)
  ))