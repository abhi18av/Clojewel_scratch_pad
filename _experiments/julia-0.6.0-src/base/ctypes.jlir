(:quote, (:block,
    (:line, 6, :none),
    (:macrocall, :(Core.@doc), "    Cuchar\n\nEquivalent to the native `unsigned char` c-type ([`UInt8`](@ref)).\n", (:const, (:(=), :Cuchar, :UInt8))),
    (:line, 14, :none),
    (:macrocall, :(Core.@doc), "    Cshort\n\nEquivalent to the native `signed short` c-type ([`Int16`](@ref)).\n", (:const, (:(=), :Cshort, :Int16))),
    (:line, 22, :none),
    (:macrocall, :(Core.@doc), "    Cushort\n\nEquivalent to the native `unsigned short` c-type ([`UInt16`](@ref)).\n", (:const, (:(=), :Cushort, :UInt16))),
    (:line, 30, :none),
    (:macrocall, :(Core.@doc), "    Cint\n\nEquivalent to the native `signed int` c-type ([`Int32`](@ref)).\n", (:const, (:(=), :Cint, :Int32))),
    (:line, 38, :none),
    (:macrocall, :(Core.@doc), "    Cuint\n\nEquivalent to the native `unsigned int` c-type ([`UInt32`](@ref)).\n", (:const, (:(=), :Cuint, :UInt32))),
    (:line, 46, :none),
    (:macrocall, :(Core.@doc), "    Cptrdiff_t\n\nEquivalent to the native `ptrdiff_t` c-type (`Int`).\n", (:const, (:(=), :Cptrdiff_t, :Int))),
    (:line, 54, :none),
    (:macrocall, :(Core.@doc), "    Csize_t\n\nEquivalent to the native `size_t` c-type (`UInt`).\n", (:const, (:(=), :Csize_t, :UInt))),
    (:line, 62, :none),
    (:macrocall, :(Core.@doc), "    Cssize_t\n\nEquivalent to the native `ssize_t` c-type.\n", (:const, (:(=), :Cssize_t, :Int))),
    (:line, 70, :none),
    (:macrocall, :(Core.@doc), "    Cintmax_t\n\nEquivalent to the native `intmax_t` c-type ([`Int64`](@ref)).\n", (:const, (:(=), :Cintmax_t, :Int64))),
    (:line, 78, :none),
    (:macrocall, :(Core.@doc), "    Cuintmax_t\n\nEquivalent to the native `uintmax_t` c-type ([`UInt64`](@ref)).\n", (:const, (:(=), :Cuintmax_t, :UInt64))),
    (:line, 86, :none),
    (:macrocall, :(Core.@doc), "    Clonglong\n\nEquivalent to the native `signed long long` c-type ([`Int64`](@ref)).\n", (:const, (:(=), :Clonglong, :Int64))),
    (:line, 94, :none),
    (:macrocall, :(Core.@doc), "    Culonglong\n\nEquivalent to the native `unsigned long long` c-type ([`UInt64`](@ref)).\n", (:const, (:(=), :Culonglong, :UInt64))),
    (:line, 102, :none),
    (:macrocall, :(Core.@doc), "    Cfloat\n\nEquivalent to the native `float` c-type ([`Float32`](@ref)).\n", (:const, (:(=), :Cfloat, :Float32))),
    (:line, 110, :none),
    (:macrocall, :(Core.@doc), "    Cdouble\n\nEquivalent to the native `double` c-type ([`Float64`](@ref)).\n", (:const, (:(=), :Cdouble, :Float64)))
  ))