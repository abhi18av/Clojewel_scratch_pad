(:quote, (:block,
    (:line, 3, :none),
    (:module, true, :Enums, (:block,
        (:line, 3, :none),
        (:line, 5, :none),
        (:import, :Core, :Intrinsics, :bitcast),
        (:line, 6, :none),
        (:export, :Enum, Symbol("@enum")),
        (:line, 8, :none),
        (:function, :basetype),
        (:line, 10, :none),
        (:abstract, (:curly, :Enum, (:<:, :T, :Integer))),
        (:line, 12, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :convert
                )), (:<:, :T, :Integer)), (:(::), (:curly, :Type, :Integer)), (:(::), :x, (:curly, :Enum, :T))), (:block,
            (:line, 12, :none),
            (:call, :bitcast, :T, :x)
          )),
        (:line, 13, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :convert
                )), (:<:, :T, :Integer), (:<:, :T2, :Integer)), (:(::), (:curly, :Type, :T)), (:(::), :x, (:curly, :Enum, :T2))), (:block,
            (:line, 13, :none),
            (:call, :convert, :T, (:call, :bitcast, :T2, :x))
          )),
        (:line, 14, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :write
                )), (:<:, :T, :Integer)), (:(::), :io, :IO), (:(::), :x, (:curly, :Enum, :T))), (:block,
            (:line, 14, :none),
            (:call, :write, :io, (:call, :T, :x))
          )),
        (:line, 15, :none),
        (:(=), (:call, (:curly, (:., :Base, (:quote, #QuoteNode
                  :read
                )), (:<:, :T, :Enum)), (:(::), :io, :IO), (:(::), (:curly, :Type, :T))), (:block,
            (:line, 15, :none),
            (:call, :T, (:call, :read, :io, (:call, (:., :Enums, (:quote, #QuoteNode
                      :basetype
                    )), :T)))
          )),
        (:line, 18, :none),
        (:function, (:call, :membershiptest, :expr, :values), (:block,
            (:line, 19, :none),
            (:(=), (:tuple, :lo, :hi), (:call, :extrema, :values)),
            (:line, 20, :none),
            (:if, (:call, :(==), (:call, :length, :values), (:call, :+, (:call, :-, :hi, :lo), 1)), (:block,
                (:line, 21, :none),
                (:quote, (:comparison, (:$, :lo), :(<=), (:$, :expr), :(<=), (:$, :hi)))
              ), (:block,
                (:line, 22, :none),
                (:if, (:call, :<, (:call, :length, :values), 20), (:block,
                    (:line, 23, :none),
                    (:call, :foldl, (:->, (:tuple, :x1, :x2), (:block,
                          (:line, 23, :none),
                          (:quote, (:||, (:$, :x1), (:call, :(==), (:$, :expr), (:$, :x2))))
                        )), (:quote, (:call, :(==), (:$, :expr), (:$, (:ref, :values, 1)))), (:ref, :values, (:(:), 2, :end)))
                  ), (:block,
                    (:line, 25, :none),
                    (:quote, (:call, :in, (:$, :expr), (:$, (:call, :Set, :values))))
                  ))
              ))
          )),
        (:line, 29, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :enum_argument_error, :typename, :x), (:block,
              (:line, 29, :none),
              (:call, :throw, (:call, :ArgumentError, (:call, :string, (:string, "invalid value for Enum ", :typename, ": ", :x))))
            ))),
        (:line, 31, :none),
        (:macrocall, :(Core.@doc), "    @enum EnumName[::BaseType] EnumValue1[=x] EnumValue2[=y]\n\nCreate an `Enum{BaseType}` subtype with name `EnumName` and enum member values of\n`EnumValue1` and `EnumValue2` with optional assigned values of `x` and `y`, respectively.\n`EnumName` can be used just like other types and enum member values as regular values, such as\n\n```jldoctest\njulia> @enum Fruit apple=1 orange=2 kiwi=3\n\njulia> f(x::Fruit) = \"I'm a Fruit with value: \$(Int(x))\"\nf (generic function with 1 method)\n\njulia> f(apple)\n\"I'm a Fruit with value: 1\"\n```\n\n`BaseType`, which defaults to [`Int32`](@ref), must be a primitive subtype of `Integer`.\nMember values can be converted between the enum type and `BaseType`. `read` and `write`\nperform these conversions automatically.\n", (:macro, (:call, :enum, :T, (:..., :syms)), (:block,
              (:line, 53, :none),
              (:if, (:call, :isempty, :syms), (:block,
                  (:line, 54, :none),
                  (:call, :throw, (:call, :ArgumentError, (:string, "no arguments given for Enum ", :T)))
                )),
              (:line, 56, :none),
              (:(=), :basetype, :Int32),
              (:line, 57, :none),
              (:(=), :typename, :T),
              (:line, 58, :none),
              (:if, (:&&, (:call, :isa, :T, :Expr), (:&&, (:call, :(==), (:., :T, (:quote, #QuoteNode
                          :head
                        )), (:quote, #QuoteNode
                        :(::)
                      )), (:&&, (:call, :(==), (:call, :length, (:., :T, (:quote, #QuoteNode
                              :args
                            ))), 2), (:call, :isa, (:ref, (:., :T, (:quote, #QuoteNode
                              :args
                            )), 1), :Symbol)))), (:block,
                  (:line, 59, :none),
                  (:(=), :typename, (:ref, (:., :T, (:quote, #QuoteNode
                          :args
                        )), 1)),
                  (:line, 60, :none),
                  (:(=), :basetype, (:call, :eval, (:call, :current_module), (:ref, (:., :T, (:quote, #QuoteNode
                            :args
                          )), 2))),
                  (:line, 61, :none),
                  (:if, (:||, (:call, :!, (:call, :isa, :basetype, :DataType)), (:||, (:call, :!, (:<:, :basetype, :Integer)), (:call, :!, (:call, :isbits, :basetype)))), (:block,
                      (:line, 62, :none),
                      (:call, :throw, (:call, :ArgumentError, (:string, "invalid base type for Enum ", :typename, ", ", :T, "=::", :basetype, "; base type must be an integer primitive type")))
                    ))
                ), (:block,
                  (:line, 64, :none),
                  (:if, (:call, :!, (:call, :isa, :T, :Symbol)), (:block,
                      (:line, 65, :none),
                      (:call, :throw, (:call, :ArgumentError, (:string, "invalid type expression for enum ", :T)))
                    ))
                )),
              (:line, 67, :none),
              (:(=), :vals, (:call, (:curly, :Vector, (:curly, :Tuple, :Symbol, :Integer)), 0)),
              (:line, 68, :none),
              (:(=), :lo, (:(=), :hi, 0)),
              (:line, 69, :none),
              (:(=), :i, (:call, :zero, :basetype)),
              (:line, 70, :none),
              (:(=), :hasexpr, false),
              (:line, 71, :none),
              (:for, (:(=), :s, :syms), (:block,
                  (:line, 72, :none),
                  (:if, (:call, :isa, :s, :Symbol), (:block,
                      (:line, 73, :none),
                      (:if, (:&&, (:call, :(==), :i, (:call, :typemin, :basetype)), (:call, :!, (:call, :isempty, :vals))), (:block,
                          (:line, 74, :none),
                          (:call, :throw, (:call, :ArgumentError, (:string, "overflow in value \"", :s, "\" of Enum ", :typename)))
                        ))
                    ), (:block,
                      (:line, 76, :none),
                      (:if, (:&&, (:call, :isa, :s, :Expr), (:&&, (:||, (:call, :(==), (:., :s, (:quote, #QuoteNode
                                    :head
                                  )), (:quote, #QuoteNode
                                  :(=)
                                )), (:call, :(==), (:., :s, (:quote, #QuoteNode
                                    :head
                                  )), (:quote, #QuoteNode
                                  :kw
                                ))), (:&&, (:call, :(==), (:call, :length, (:., :s, (:quote, #QuoteNode
                                      :args
                                    ))), 2), (:call, :isa, (:ref, (:., :s, (:quote, #QuoteNode
                                      :args
                                    )), 1), :Symbol)))), (:block,
                          (:line, 79, :none),
                          (:(=), :i, (:call, :eval, (:call, :current_module), (:ref, (:., :s, (:quote, #QuoteNode
                                    :args
                                  )), 2))),
                          (:line, 80, :none),
                          (:if, (:call, :!, (:call, :isa, :i, :Integer)), (:block,
                              (:line, 81, :none),
                              (:call, :throw, (:call, :ArgumentError, (:string, "invalid value for Enum ", :typename, ", ", :s, "=", :i, "; values must be integers")))
                            )),
                          (:line, 83, :none),
                          (:(=), :i, (:call, :convert, :basetype, :i)),
                          (:line, 84, :none),
                          (:(=), :s, (:ref, (:., :s, (:quote, #QuoteNode
                                  :args
                                )), 1)),
                          (:line, 85, :none),
                          (:(=), :hasexpr, true)
                        ), (:block,
                          (:line, 87, :none),
                          (:call, :throw, (:call, :ArgumentError, (:call, :string, "invalid argument for Enum ", :typename, ": ", :s)))
                        ))
                    )),
                  (:line, 89, :none),
                  (:if, (:call, :!, (:call, (:., :Base, (:quote, #QuoteNode
                            :isidentifier
                          )), :s)), (:block,
                      (:line, 90, :none),
                      (:call, :throw, (:call, :ArgumentError, (:string, "invalid name for Enum ", :typename, "; \"", :s, "\" is not a valid identifier.")))
                    )),
                  (:line, 92, :none),
                  (:call, :push!, :vals, (:tuple, :s, :i)),
                  (:line, 93, :none),
                  (:if, (:call, :(==), (:call, :length, :vals), 1), (:block,
                      (:line, 94, :none),
                      (:(=), :lo, (:(=), :hi, :i))
                    ), (:block,
                      (:line, 96, :none),
                      (:(=), :lo, (:call, :min, :lo, :i)),
                      (:line, 97, :none),
                      (:(=), :hi, (:call, :max, :hi, :i))
                    )),
                  (:line, 99, :none),
                  (:+=, :i, (:call, :oneunit, :i))
                )),
              (:line, 101, :none),
              (:(=), :values, (:typed_comprehension, :basetype, (:generator, (:ref, :i, 2), (:(=), :i, :vals)))),
              (:line, 102, :none),
              (:if, (:&&, :hasexpr, (:call, :(!=), :values, (:call, :unique, :values))), (:block,
                  (:line, 103, :none),
                  (:call, :throw, (:call, :ArgumentError, (:string, "values for Enum ", :typename, " are not unique")))
                )),
              (:line, 105, :none),
              (:(=), :blk, (:quote, (:block,
                    (:line, 107, :none),
                    (:macrocall, (:., :Base, (:quote, #QuoteNode
                          Symbol("@__doc__")
                        )), (:bitstype, (:$, (:call, :*, (:call, :sizeof, :basetype), 8)), (:<:, (:$, (:call, :esc, :typename)), (:curly, :Enum, (:$, :basetype))))),
                    (:line, 108, :none),
                    (:function, (:call, (:., :Base, (:quote, #QuoteNode
                            :convert
                          )), (:(::), (:curly, :Type, (:$, (:call, :esc, :typename)))), (:(::), :x, :Integer)), (:block,
                        (:line, 109, :none),
                        (:||, (:$, (:call, :membershiptest, (:quote, #QuoteNode
                                :x
                              ), :values)), (:call, :enum_argument_error, (:$, (:call, :Expr, (:quote, #QuoteNode
                                  :quote
                                ), :typename)), :x)),
                        (:line, 110, :none),
                        (:return, (:call, :bitcast, (:$, (:call, :esc, :typename)), (:call, :convert, (:$, :basetype), :x)))
                      )),
                    (:line, 112, :none),
                    (:(=), (:call, (:., :Enums, (:quote, #QuoteNode
                            :basetype
                          )), (:(::), (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                        (:line, 112, :none),
                        (:$, (:call, :esc, :basetype))
                      )),
                    (:line, 113, :none),
                    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                            :typemin
                          )), (:(::), :x, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                        (:line, 113, :none),
                        (:call, (:$, (:call, :esc, :typename)), (:$, :lo))
                      )),
                    (:line, 114, :none),
                    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                            :typemax
                          )), (:(::), :x, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                        (:line, 114, :none),
                        (:call, (:$, (:call, :esc, :typename)), (:$, :hi))
                      )),
                    (:line, 115, :none),
                    (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                            :isless
                          )), (:(::), :x, (:$, (:call, :esc, :typename))), (:(::), :y, (:$, (:call, :esc, :typename)))), (:block,
                        (:line, 115, :none),
                        (:call, :isless, (:call, (:$, :basetype), :x), (:call, (:$, :basetype), :y))
                      )),
                    (:line, 116, :none),
                    (:let, (:block,
                        (:line, 117, :none),
                        (:(=), (:call, (:., :Base, (:quote, #QuoteNode
                                :instances
                              )), (:(::), (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                            (:line, 117, :none),
                            :insts
                          ))
                      ), (:(=), :insts, (:call, :ntuple, (:->, :i, (:block,
                              (:line, 116, :none),
                              (:call, (:$, (:call, :esc, :typename)), (:ref, (:$, :values), :i))
                            )), (:$, (:call, :length, :vals))))),
                    (:line, 119, :none),
                    (:function, (:call, (:., :Base, (:quote, #QuoteNode
                            :print
                          )), (:(::), :io, :IO), (:(::), :x, (:$, (:call, :esc, :typename)))), (:block,
                        (:line, 120, :none),
                        (:for, (:(=), (:tuple, :sym, :i), (:$, :vals)), (:block,
                            (:line, 121, :none),
                            (:if, (:call, :(==), :i, (:call, (:$, :basetype), :x)), (:block,
                                (:line, 122, :none),
                                (:call, :print, :io, :sym),
                                (:line, 122, :none),
                                (:break,)
                              ))
                          ))
                      )),
                    (:line, 126, :none),
                    (:function, (:call, (:., :Base, (:quote, #QuoteNode
                            :show
                          )), (:(::), :io, :IO), (:(::), :x, (:$, (:call, :esc, :typename)))), (:block,
                        (:line, 127, :none),
                        (:if, (:call, :get, :io, (:quote, #QuoteNode
                              :compact
                            ), false), (:block,
                            (:line, 128, :none),
                            (:call, :print, :io, :x)
                          ), (:block,
                            (:line, 130, :none),
                            (:call, :print, :io, :x, "::"),
                            (:line, 131, :none),
                            (:call, :showcompact, :io, (:call, :typeof, :x)),
                            (:line, 132, :none),
                            (:call, :print, :io, " = ", (:call, (:$, :basetype), :x))
                          ))
                      )),
                    (:line, 135, :none),
                    (:function, (:call, (:., :Base, (:quote, #QuoteNode
                            :show
                          )), (:(::), :io, :IO), (:(::), :t, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                        (:line, 136, :none),
                        (:call, (:., :Base, (:quote, #QuoteNode
                              :show_datatype
                            )), :io, :t)
                      )),
                    (:line, 138, :none),
                    (:function, (:call, (:., :Base, (:quote, #QuoteNode
                            :show
                          )), (:(::), :io, :IO), (:(::), (:macrocall, Symbol("@MIME_str"), "text/plain")), (:(::), :t, (:curly, :Type, (:$, (:call, :esc, :typename))))), (:block,
                        (:line, 139, :none),
                        (:call, :print, :io, "Enum "),
                        (:line, 140, :none),
                        (:call, (:., :Base, (:quote, #QuoteNode
                              :show_datatype
                            )), :io, :t),
                        (:line, 141, :none),
                        (:call, :print, :io, ":"),
                        (:line, 142, :none),
                        (:for, (:(=), (:tuple, :sym, :i), (:$, :vals)), (:block,
                            (:line, 143, :none),
                            (:call, :print, :io, "\n", :sym, " = ", :i)
                          ))
                      ))
                  ))),
              (:line, 147, :none),
              (:if, (:call, :isa, :typename, :Symbol), (:block,
                  (:line, 148, :none),
                  (:for, (:(=), (:tuple, :sym, :i), :vals), (:block,
                      (:line, 149, :none),
                      (:call, :push!, (:., :blk, (:quote, #QuoteNode
                            :args
                          )), (:quote, (:const, (:(=), (:$, (:call, :esc, :sym)), (:call, (:$, (:call, :esc, :typename)), (:$, :i))))))
                    ))
                )),
              (:line, 152, :none),
              (:call, :push!, (:., :blk, (:quote, #QuoteNode
                    :args
                  )), (:quote, #QuoteNode
                  :nothing
                )),
              (:line, 153, :none),
              (:(=), (:., :blk, (:quote, #QuoteNode
                    :head
                  )), (:quote, #QuoteNode
                  :toplevel
                )),
              (:line, 154, :none),
              (:return, :blk)
            )))
      ))
  ))