(:quote, (:block,
    (:line, 5, :none),
    (:module, true, :Checked, (:block,
        (:line, 5, :none),
        (:line, 7, :none),
        (:export, :checked_neg, :checked_abs, :checked_add, :checked_sub, :checked_mul, :checked_div, :checked_rem, :checked_fld, :checked_mod, :checked_cld, :add_with_overflow, :sub_with_overflow, :mul_with_overflow),
        (:line, 11, :none),
        (:toplevel, (:import, :Core, :Intrinsics, :checked_sadd_int), (:import, :Core, :Intrinsics, :checked_ssub_int), (:import, :Core, :Intrinsics, :checked_smul_int), (:import, :Core, :Intrinsics, :checked_sdiv_int), (:import, :Core, :Intrinsics, :checked_srem_int), (:import, :Core, :Intrinsics, :checked_uadd_int), (:import, :Core, :Intrinsics, :checked_usub_int), (:import, :Core, :Intrinsics, :checked_umul_int), (:import, :Core, :Intrinsics, :checked_udiv_int), (:import, :Core, :Intrinsics, :checked_urem_int)),
        (:line, 16, :none),
        (:toplevel, (:import, :Base, :no_op_err), (:import, :Base, Symbol("@_inline_meta"))),
        (:line, 19, :none),
        (:(=), (:call, :checked_add, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 19, :none),
            (:call, :checked_add, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 20, :none),
        (:(=), (:call, :checked_sub, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 20, :none),
            (:call, :checked_sub, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 21, :none),
        (:(=), (:call, :checked_mul, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 21, :none),
            (:call, :checked_mul, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 22, :none),
        (:(=), (:call, :checked_div, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 22, :none),
            (:call, :checked_div, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 23, :none),
        (:(=), (:call, :checked_rem, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 23, :none),
            (:call, :checked_rem, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 24, :none),
        (:(=), (:call, :checked_fld, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 24, :none),
            (:call, :checked_fld, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 25, :none),
        (:(=), (:call, :checked_mod, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 25, :none),
            (:call, :checked_mod, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 26, :none),
        (:(=), (:call, :checked_cld, (:(::), :x, :Integer), (:(::), :y, :Integer)), (:block,
            (:line, 26, :none),
            (:call, :checked_cld, (:..., (:call, :promote, :x, :y)))
          )),
        (:line, 30, :none),
        (:(=), (:where, (:call, :checked_abs, (:(::), :x, :T)), (:<:, :T, :Integer)), (:block,
            (:line, 30, :none),
            (:call, :no_op_err, "checked_abs", :T)
          )),
        (:line, 32, :none),
        (:const, (:(=), :SignedInt, (:curly, :Union, :Int8, :Int16, :Int32, :Int64, :Int128))),
        (:line, 33, :none),
        (:const, (:(=), :UnsignedInt, (:curly, :Union, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128))),
        (:line, 57, :none),
        (:const, (:(=), :llvm_version, (:call, :Int, (:call, :ccall, (:quote, #QuoteNode
                  :jl_get_LLVM_VERSION
                ), :UInt32, (:tuple,))))),
        (:line, 59, :none),
        (:(=), :brokenSignedInt, (:curly, :Union)),
        (:line, 60, :none),
        (:(=), :brokenUnsignedInt, (:curly, :Union)),
        (:line, 61, :none),
        (:(=), :brokenSignedIntMul, :Int128),
        (:line, 62, :none),
        (:(=), :brokenUnsignedIntMul, :UInt128),
        (:line, 63, :none),
        (:if, (:call, :(==), (:call, (:., :Core, (:quote, #QuoteNode
                  :sizeof
                )), (:curly, :Ptr, :Void)), 4), (:block,
            (:line, 64, :none),
            (:(=), :brokenSignedIntMul, (:curly, :Union, :brokenSignedIntMul, :Int64)),
            (:line, 65, :none),
            (:(=), :brokenUnsignedIntMul, (:curly, :Union, :brokenUnsignedIntMul, :UInt64))
          )),
        (:line, 67, :none),
        (:if, (:call, :<, :llvm_version, 30500), (:block,
            (:line, 68, :none),
            (:(=), :brokenSignedIntMul, (:curly, :Union, :brokenSignedIntMul, :Int8)),
            (:line, 69, :none),
            (:(=), :brokenUnsignedIntMul, (:curly, :Union, :brokenUnsignedIntMul, :UInt8))
          )),
        (:line, 71, :none),
        (:const, (:(=), :BrokenSignedInt, :brokenSignedInt)),
        (:line, 72, :none),
        (:const, (:(=), :BrokenUnsignedInt, :brokenUnsignedInt)),
        (:line, 73, :none),
        (:const, (:(=), :BrokenSignedIntMul, :brokenSignedIntMul)),
        (:line, 74, :none),
        (:const, (:(=), :BrokenUnsignedIntMul, :brokenUnsignedIntMul)),
        (:line, 81, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_neg(x)\n\nCalculates `-x`, checking for overflow errors where applicable. For\nexample, standard two's complement signed integers (e.g. `Int`) cannot\nrepresent `-typemin(Int)`, thus leading to an overflow.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:function, (:where, (:call, :checked_neg, (:(::), :x, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 91, :none),
              (:call, :checked_sub, (:call, :T, 0), :x)
            ))),
        (:line, 93, :none),
        (:if, (:call, :(!=), :BrokenSignedInt, (:curly, :Union)), (:block,
            (:line, 94, :none),
            (:function, (:call, :checked_neg, (:(::), :x, :BrokenSignedInt)), (:block,
                (:line, 95, :none),
                (:(=), :r, (:call, :-, :x)),
                (:line, 96, :none),
                (:&&, (:call, :&, (:call, :<, :x, 0), (:call, :<, :r, 0)), (:call, :throw, (:call, :OverflowError))),
                (:line, 97, :none),
                :r
              ))
          )),
        (:line, 100, :none),
        (:if, (:call, :(!=), :BrokenUnsignedInt, (:curly, :Union)), (:block,
            (:line, 101, :none),
            (:function, (:where, (:call, :checked_neg, (:(::), :x, :T)), (:<:, :T, :BrokenUnsignedInt)), (:block,
                (:line, 102, :none),
                (:&&, (:call, :(!=), :x, 0), (:call, :throw, (:call, :OverflowError))),
                (:line, 103, :none),
                (:call, :T, 0)
              ))
          )),
        (:line, 107, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_abs(x)\n\nCalculates `abs(x)`, checking for overflow errors where applicable.\nFor example, standard two's complement signed integers (e.g. `Int`)\ncannot represent `abs(typemin(Int))`, thus leading to an overflow.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:function, :checked_abs)),
        (:line, 118, :none),
        (:function, (:call, :checked_abs, (:(::), :x, :SignedInt)), (:block,
            (:line, 119, :none),
            (:(=), :r, (:call, :ifelse, (:call, :<, :x, 0), (:call, :-, :x), :x)),
            (:line, 120, :none),
            (:&&, (:call, :<, :r, 0), (:call, :throw, (:call, :OverflowError))),
            (:line, 121, :none),
            :r
          )),
        (:line, 123, :none),
        (:(=), (:call, :checked_abs, (:(::), :x, :UnsignedInt)), (:block,
            (:line, 123, :none),
            :x
          )),
        (:line, 124, :none),
        (:(=), (:call, :checked_abs, (:(::), :x, :Bool)), (:block,
            (:line, 124, :none),
            :x
          )),
        (:line, 128, :none),
        (:macrocall, :(Core.@doc), "    Base.add_with_overflow(x, y) -> (r, f)\n\nCalculates `r = x+y`, with the flag `f` indicating whether overflow has occurred.\n", (:function, :add_with_overflow)),
        (:line, 134, :none),
        (:(=), (:where, (:call, :add_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :SignedInt)), (:block,
            (:line, 134, :none),
            (:call, :checked_sadd_int, :x, :y)
          )),
        (:line, 135, :none),
        (:(=), (:where, (:call, :add_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :UnsignedInt)), (:block,
            (:line, 135, :none),
            (:call, :checked_uadd_int, :x, :y)
          )),
        (:line, 136, :none),
        (:(=), (:call, :add_with_overflow, (:(::), :x, :Bool), (:(::), :y, :Bool)), (:block,
            (:line, 136, :none),
            (:tuple, (:call, :+, :x, :y), false)
          )),
        (:line, 138, :none),
        (:if, (:call, :(!=), :BrokenSignedInt, (:curly, :Union)), (:block,
            (:line, 139, :none),
            (:function, (:where, (:call, :add_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenSignedInt)), (:block,
                (:line, 140, :none),
                (:(=), :r, (:call, :+, :x, :y)),
                (:line, 142, :none),
                (:(=), :f, (:comparison, (:call, :<, :x, 0), :(==), (:call, :<, :y, 0), :(!=), (:call, :<, :r, 0))),
                (:line, 143, :none),
                (:tuple, :r, :f)
              ))
          )),
        (:line, 146, :none),
        (:if, (:call, :(!=), :BrokenUnsignedInt, (:curly, :Union)), (:block,
            (:line, 147, :none),
            (:function, (:where, (:call, :add_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenUnsignedInt)), (:block,
                (:line, 150, :none),
                (:tuple, (:call, :+, :x, :y), (:call, :>, :x, (:call, :~, :y)))
              ))
          )),
        (:line, 155, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_add(x, y)\n\nCalculates `x+y`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:function, (:where, (:call, :checked_add, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 163, :none),
              (:macrocall, Symbol("@_inline_meta")),
              (:line, 164, :none),
              (:(=), (:tuple, :z, :b), (:call, :add_with_overflow, :x, :y)),
              (:line, 165, :none),
              (:&&, :b, (:call, :throw, (:call, :OverflowError))),
              (:line, 166, :none),
              :z
            ))),
        (:line, 170, :none),
        (:(=), (:call, :checked_add, :x), (:block,
            (:line, 170, :none),
            :x
          )),
        (:line, 171, :none),
        (:(=), (:call, :checked_add, (:(::), :x, :Bool)), (:block,
            (:line, 171, :none),
            (:call, :+, :x)
          )),
        (:line, 173, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T)), :T), (:block,
            (:line, 173, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3)
          )),
        (:line, 175, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T)), :T), (:block,
            (:line, 175, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3, :x4)
          )),
        (:line, 177, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T)), :T), (:block,
            (:line, 177, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3, :x4, :x5)
          )),
        (:line, 179, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T)), :T), (:block,
            (:line, 179, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3, :x4, :x5, :x6)
          )),
        (:line, 181, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T), (:(::), :x7, :T)), :T), (:block,
            (:line, 181, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3, :x4, :x5, :x6, :x7)
          )),
        (:line, 183, :none),
        (:(=), (:where, (:call, :checked_add, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T), (:(::), :x7, :T), (:(::), :x8, :T)), :T), (:block,
            (:line, 183, :none),
            (:call, :checked_add, (:call, :checked_add, :x1, :x2), :x3, :x4, :x5, :x6, :x7, :x8)
          )),
        (:line, 187, :none),
        (:macrocall, :(Core.@doc), "    Base.sub_with_overflow(x, y) -> (r, f)\n\nCalculates `r = x-y`, with the flag `f` indicating whether overflow has occurred.\n", (:function, :sub_with_overflow)),
        (:line, 193, :none),
        (:(=), (:where, (:call, :sub_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :SignedInt)), (:block,
            (:line, 193, :none),
            (:call, :checked_ssub_int, :x, :y)
          )),
        (:line, 194, :none),
        (:(=), (:where, (:call, :sub_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :UnsignedInt)), (:block,
            (:line, 194, :none),
            (:call, :checked_usub_int, :x, :y)
          )),
        (:line, 195, :none),
        (:(=), (:call, :sub_with_overflow, (:(::), :x, :Bool), (:(::), :y, :Bool)), (:block,
            (:line, 195, :none),
            (:tuple, (:call, :-, :x, :y), false)
          )),
        (:line, 197, :none),
        (:if, (:call, :(!=), :BrokenSignedInt, (:curly, :Union)), (:block,
            (:line, 198, :none),
            (:function, (:where, (:call, :sub_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenSignedInt)), (:block,
                (:line, 199, :none),
                (:(=), :r, (:call, :-, :x, :y)),
                (:line, 201, :none),
                (:(=), :f, (:comparison, (:call, :<, :x, 0), :(!=), (:call, :<, :y, 0), :(==), (:call, :<, :r, 0))),
                (:line, 202, :none),
                (:tuple, :r, :f)
              ))
          )),
        (:line, 205, :none),
        (:if, (:call, :(!=), :BrokenUnsignedInt, (:curly, :Union)), (:block,
            (:line, 206, :none),
            (:function, (:where, (:call, :sub_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenUnsignedInt)), (:block,
                (:line, 208, :none),
                (:tuple, (:call, :-, :x, :y), (:call, :<, :x, :y))
              ))
          )),
        (:line, 212, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_sub(x, y)\n\nCalculates `x-y`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:function, (:where, (:call, :checked_sub, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 220, :none),
              (:macrocall, Symbol("@_inline_meta")),
              (:line, 221, :none),
              (:(=), (:tuple, :z, :b), (:call, :sub_with_overflow, :x, :y)),
              (:line, 222, :none),
              (:&&, :b, (:call, :throw, (:call, :OverflowError))),
              (:line, 223, :none),
              :z
            ))),
        (:line, 227, :none),
        (:macrocall, :(Core.@doc), "    Base.mul_with_overflow(x, y) -> (r, f)\n\nCalculates `r = x*y`, with the flag `f` indicating whether overflow has occurred.\n", (:function, :mul_with_overflow)),
        (:line, 233, :none),
        (:(=), (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :SignedInt)), (:block,
            (:line, 233, :none),
            (:call, :checked_smul_int, :x, :y)
          )),
        (:line, 234, :none),
        (:(=), (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :UnsignedInt)), (:block,
            (:line, 234, :none),
            (:call, :checked_umul_int, :x, :y)
          )),
        (:line, 235, :none),
        (:(=), (:call, :mul_with_overflow, (:(::), :x, :Bool), (:(::), :y, :Bool)), (:block,
            (:line, 235, :none),
            (:tuple, (:call, :*, :x, :y), false)
          )),
        (:line, 237, :none),
        (:if, (:&&, (:call, :(!=), :BrokenSignedIntMul, (:curly, :Union)), (:call, :(!=), :BrokenSignedIntMul, :Int128)), (:block,
            (:line, 238, :none),
            (:function, (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenSignedIntMul)), (:block,
                (:line, 239, :none),
                (:(=), :r, (:call, :widemul, :x, :y)),
                (:line, 240, :none),
                (:(=), :f, (:call, :(!=), (:call, :%, :r, :T), :r)),
                (:line, 241, :none),
                (:tuple, (:call, :%, :r, :T), :f)
              ))
          )),
        (:line, 244, :none),
        (:if, (:&&, (:call, :(!=), :BrokenUnsignedIntMul, (:curly, :Union)), (:call, :(!=), :BrokenUnsignedIntMul, :UInt128)), (:block,
            (:line, 245, :none),
            (:function, (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :BrokenUnsignedIntMul)), (:block,
                (:line, 246, :none),
                (:(=), :r, (:call, :widemul, :x, :y)),
                (:line, 247, :none),
                (:(=), :f, (:call, :(!=), (:call, :%, :r, :T), :r)),
                (:line, 248, :none),
                (:tuple, (:call, :%, :r, :T), :f)
              ))
          )),
        (:line, 251, :none),
        (:if, (:<:, :Int128, :BrokenSignedIntMul), (:block,
            (:line, 253, :none),
            (:function, (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Int128)), (:block,
                (:line, 254, :none),
                (:(=), :f, (:if, (:call, :>, :y, 0), (:block,
                      (:line, 257, :none),
                      (:||, (:call, :>, :x, (:call, :fld, (:call, :typemax, :T), :y)), (:call, :<, :x, (:call, :cld, (:call, :typemin, :T), :y)))
                    ), (:block,
                      (:line, 258, :none),
                      (:if, (:call, :<, :y, 0), (:block,
                          (:line, 262, :none),
                          (:||, (:call, :<, :x, (:call, :cld, (:call, :typemax, :T), :y)), (:&&, (:call, :(!=), :y, -1), (:call, :>, :x, (:call, :fld, (:call, :typemin, :T), :y))))
                        ), (:block,
                          (:line, 264, :none),
                          false
                        ))
                    ))),
                (:line, 266, :none),
                (:tuple, (:call, :*, :x, :y), :f)
              ))
          )),
        (:line, 269, :none),
        (:if, (:<:, :UInt128, :BrokenUnsignedIntMul), (:block,
            (:line, 271, :none),
            (:function, (:where, (:call, :mul_with_overflow, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :UInt128)), (:block,
                (:line, 273, :none),
                (:tuple, (:call, :*, :x, :y), (:&&, (:call, :>, :y, 0), (:call, :>, :x, (:call, :fld, (:call, :typemax, :T), :y))))
              ))
          )),
        (:line, 277, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_mul(x, y)\n\nCalculates `x*y`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:function, (:where, (:call, :checked_mul, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 285, :none),
              (:macrocall, Symbol("@_inline_meta")),
              (:line, 286, :none),
              (:(=), (:tuple, :z, :b), (:call, :mul_with_overflow, :x, :y)),
              (:line, 287, :none),
              (:&&, :b, (:call, :throw, (:call, :OverflowError))),
              (:line, 288, :none),
              :z
            ))),
        (:line, 292, :none),
        (:(=), (:call, :checked_mul, :x), (:block,
            (:line, 292, :none),
            :x
          )),
        (:line, 293, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T)), :T), (:block,
            (:line, 293, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3)
          )),
        (:line, 295, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T)), :T), (:block,
            (:line, 295, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3, :x4)
          )),
        (:line, 297, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T)), :T), (:block,
            (:line, 297, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3, :x4, :x5)
          )),
        (:line, 299, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T)), :T), (:block,
            (:line, 299, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3, :x4, :x5, :x6)
          )),
        (:line, 301, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T), (:(::), :x7, :T)), :T), (:block,
            (:line, 301, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3, :x4, :x5, :x6, :x7)
          )),
        (:line, 303, :none),
        (:(=), (:where, (:call, :checked_mul, (:(::), :x1, :T), (:(::), :x2, :T), (:(::), :x3, :T), (:(::), :x4, :T), (:(::), :x5, :T), (:(::), :x6, :T), (:(::), :x7, :T), (:(::), :x8, :T)), :T), (:block,
            (:line, 303, :none),
            (:call, :checked_mul, (:call, :checked_mul, :x1, :x2), :x3, :x4, :x5, :x6, :x7, :x8)
          )),
        (:line, 306, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_div(x, y)\n\nCalculates `div(x,y)`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:(=), (:where, (:call, :checked_div, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 313, :none),
              (:call, :div, :x, :y)
            ))),
        (:line, 315, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_rem(x, y)\n\nCalculates `x%y`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:(=), (:where, (:call, :checked_rem, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 322, :none),
              (:call, :rem, :x, :y)
            ))),
        (:line, 324, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_fld(x, y)\n\nCalculates `fld(x,y)`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:(=), (:where, (:call, :checked_fld, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 331, :none),
              (:call, :fld, :x, :y)
            ))),
        (:line, 333, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_mod(x, y)\n\nCalculates `mod(x,y)`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:(=), (:where, (:call, :checked_mod, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 340, :none),
              (:call, :mod, :x, :y)
            ))),
        (:line, 342, :none),
        (:macrocall, :(Core.@doc), "    Base.checked_cld(x, y)\n\nCalculates `cld(x,y)`, checking for overflow errors where applicable.\n\nThe overflow protection may impose a perceptible performance penalty.\n", (:(=), (:where, (:call, :checked_cld, (:(::), :x, :T), (:(::), :y, :T)), (:<:, :T, :Integer)), (:block,
              (:line, 349, :none),
              (:call, :cld, :x, :y)
            )))
      ))
  ))