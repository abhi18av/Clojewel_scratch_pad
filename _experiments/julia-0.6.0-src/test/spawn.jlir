(:quote, (:block,
    (:line, 7, :none),
    (:(=), :valgrind_off, (:call, :(==), (:call, :ccall, (:quote, #QuoteNode
            :jl_running_on_valgrind
          ), :Cint, (:tuple,)), 0)),
    (:line, 9, :none),
    (:(=), :yescmd, (:macrocall, Symbol("@cmd"), "yes")),
    (:line, 10, :none),
    (:(=), :echocmd, (:macrocall, Symbol("@cmd"), "echo")),
    (:line, 11, :none),
    (:(=), :sortcmd, (:macrocall, Symbol("@cmd"), "sort")),
    (:line, 12, :none),
    (:(=), :printfcmd, (:macrocall, Symbol("@cmd"), "printf")),
    (:line, 13, :none),
    (:(=), :truecmd, (:macrocall, Symbol("@cmd"), "true")),
    (:line, 14, :none),
    (:(=), :falsecmd, (:macrocall, Symbol("@cmd"), "false")),
    (:line, 15, :none),
    (:(=), :catcmd, (:macrocall, Symbol("@cmd"), "cat")),
    (:line, 16, :none),
    (:(=), :shcmd, (:macrocall, Symbol("@cmd"), "sh")),
    (:line, 17, :none),
    (:(=), :sleepcmd, (:macrocall, Symbol("@cmd"), "sleep")),
    (:line, 18, :none),
    (:(=), :lscmd, (:macrocall, Symbol("@cmd"), "ls")),
    (:line, 19, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 20, :none),
        (:try, (:block,
            (:line, 21, :none),
            (:call, :success, (:macrocall, Symbol("@cmd"), "busybox")),
            (:line, 22, :none),
            (:(=), :yescmd, (:macrocall, Symbol("@cmd"), "busybox yes")),
            (:line, 23, :none),
            (:(=), :echocmd, (:macrocall, Symbol("@cmd"), "busybox echo")),
            (:line, 24, :none),
            (:(=), :sortcmd, (:macrocall, Symbol("@cmd"), "busybox sort")),
            (:line, 25, :none),
            (:(=), :printfcmd, (:macrocall, Symbol("@cmd"), "busybox printf")),
            (:line, 26, :none),
            (:(=), :truecmd, (:macrocall, Symbol("@cmd"), "busybox true")),
            (:line, 27, :none),
            (:(=), :falsecmd, (:macrocall, Symbol("@cmd"), "busybox false")),
            (:line, 28, :none),
            (:(=), :catcmd, (:macrocall, Symbol("@cmd"), "busybox cat")),
            (:line, 29, :none),
            (:(=), :shcmd, (:macrocall, Symbol("@cmd"), "busybox sh")),
            (:line, 30, :none),
            (:(=), :sleepcmd, (:macrocall, Symbol("@cmd"), "busybox sleep")),
            (:line, 31, :none),
            (:(=), :lscmd, (:macrocall, Symbol("@cmd"), "busybox ls"))
          ), false, (:block,))
      )),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$echocmd hello \\| sort")), "hello | sort\n")),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), :sortcmd)), "hello\n")),
    (:line, 39, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:., (:call, :spawn, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), :sortcmd)), (:quote, #QuoteNode
              :processes
            ))), 2)),
    (:line, 41, :none),
    (:(=), :out, (:call, :readstring, (:call, :&, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), (:macrocall, Symbol("@cmd"), "\$echocmd world")))),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :search, :out, "world"), (:(:), 0, -1))),
    (:line, 43, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :search, :out, "hello"), (:(:), 0, -1))),
    (:line, 44, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, (:call, :&, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), (:macrocall, Symbol("@cmd"), "\$echocmd world")), :sortcmd)), "hello\nworld\n")),
    (:line, 46, :none),
    (:macrocall, Symbol("@test"), (:block,
        (:call, :run, (:macrocall, Symbol("@cmd"), "\$printfcmd \"       \\033[34m[stdio passthrough ok]\\033[0m\\n\"")),
        true
      )),
    (:line, 49, :none),
    (:&&, (:call, :is_unix), (:call, :run, (:call, :pipeline, :yescmd, (:macrocall, Symbol("@cmd"), "head"), :DevNull))),
    (:line, 51, :none),
    (:block,
      (:line, 52, :none),
      (:(=), :a, (:call, (:., :Base, (:quote, #QuoteNode
              :Condition
            )))),
      (:line, 53, :none),
      (:macrocall, Symbol("@schedule"), (:block,
          (:line, 54, :none),
          (:(=), :p, (:call, :spawn, (:call, :pipeline, :yescmd, :DevNull))),
          (:line, 55, :none),
          (:call, (:., :Base, (:quote, #QuoteNode
                :notify
              )), :a, :p),
          (:line, 56, :none),
          (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, :p)))
        )),
      (:line, 58, :none),
      (:(=), :p, (:call, :wait, :a)),
      (:line, 59, :none),
      (:call, :kill, :p)
    ),
    (:line, 62, :none),
    (:if, :valgrind_off, (:block,
        (:line, 65, :none),
        (:macrocall, Symbol("@test_throws"), (:., :Base, (:quote, #QuoteNode
              :UVError
            )), (:call, :run, (:macrocall, Symbol("@cmd"), "foo_is_not_a_valid_command")))
      )),
    (:line, 68, :none),
    (:if, (:call, :is_unix), (:block,
        (:line, 69, :none),
        (:(=), (:call, :prefixer, :prefix, :sleep), (:block,
            (:line, 69, :none),
            (:macrocall, Symbol("@cmd"), "sh -c \"while IFS= read REPLY; do echo '\$prefix ' \\\$REPLY; sleep \$sleep; done\"")
          )),
        (:line, 70, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "sh -c \"for i in 1 2 3 4 5 6 7 8 9 10; do echo \\\$i; sleep 0.1; done\""), (:call, :&, (:call, :prefixer, "A", 0.2), (:call, :prefixer, "B", 0.2))))),
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "sh -c \"for i in 1 2 3 4 5 6 7 8 9 10; do echo \\\$i; sleep 0.1; done\""), (:call, :&, (:call, :&, (:call, :prefixer, "X", 0.3), (:call, :prefixer, "Y", 0.3)), (:call, :prefixer, "Z", 0.3)), (:call, :&, (:call, :prefixer, "A", 0.2), (:call, :prefixer, "B", 0.2)))))
      )),
    (:line, 77, :none),
    (:macrocall, Symbol("@test"), (:call, :success, :truecmd)),
    (:line, 78, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, :falsecmd))),
    (:line, 79, :none),
    (:macrocall, Symbol("@test"), (:call, :success, (:call, :pipeline, :truecmd, :truecmd))),
    (:line, 80, :none),
    (:macrocall, Symbol("@test_broken"), (:call, :success, (:call, :ignorestatus, :falsecmd))),
    (:line, 81, :none),
    (:macrocall, Symbol("@test_broken"), (:call, :success, (:call, :pipeline, (:call, :ignorestatus, :falsecmd), :truecmd))),
    (:line, 82, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:call, :pipeline, (:call, :ignorestatus, :falsecmd), :falsecmd)))),
    (:line, 83, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :success, (:call, :&, (:call, :ignorestatus, :falsecmd), :falsecmd)))),
    (:line, 84, :none),
    (:macrocall, Symbol("@test_broken"), (:call, :success, (:call, :ignorestatus, (:call, :pipeline, :falsecmd, :falsecmd)))),
    (:line, 85, :none),
    (:macrocall, Symbol("@test_broken"), (:call, :success, (:call, :ignorestatus, (:call, :&, :falsecmd, :falsecmd)))),
    (:line, 88, :none),
    (:let, (:block,
        (:line, 89, :none),
        (:call, :run, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$echocmd hello world"), :file)),
        (:line, 90, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, :file, :catcmd)), "hello world\n")),
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :open, :readstring, (:call, :pipeline, :file, :catcmd), "r"), "hello world\n")),
        (:line, 92, :none),
        (:call, :rm, :file)
      ), (:(=), :file, (:call, :tempname))),
    (:line, 96, :none),
    (:if, (:call, :!, (:call, :is_windows)), (:block,
        (:line, 97, :none),
        (:local, (:(=), :r, (:call, :Channel, 1))),
        (:line, 98, :none),
        (:local, :port, :server, :sock, :client, :t1, :t2),
        (:line, 99, :none),
        (:(=), :t1, (:macrocall, Symbol("@async"), (:block,
              (:line, 100, :none),
              (:(=), (:tuple, :port, :server), (:call, :listenany, 2326)),
              (:line, 101, :none),
              (:call, :put!, :r, :port),
              (:line, 102, :none),
              (:(=), :client, (:call, :accept, :server)),
              (:line, 103, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, :client, :catcmd)), "hello world\n")),
              (:line, 104, :none),
              (:call, :close, :server),
              (:line, 105, :none),
              (:return, true)
            ))),
        (:line, 107, :none),
        (:(=), :t2, (:macrocall, Symbol("@async"), (:block,
              (:line, 108, :none),
              (:(=), :sock, (:call, :connect, (:call, :fetch, :r))),
              (:line, 109, :none),
              (:call, :run, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$echocmd hello world"), :sock)),
              (:line, 110, :none),
              (:call, :close, :sock),
              (:line, 111, :none),
              (:return, true)
            ))),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :wait, :t1)),
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :wait, :t2))
      )),
    (:line, 117, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$shcmd -c \"echo \\\$TEST\""), (:vect, "TEST=Hello World"))), "Hello World\n")),
    (:line, 118, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$shcmd -c \"echo \\\$TEST\""), (:call, :Dict, (:call, :(=>), "TEST", "Hello World")))), "Hello World\n")),
    (:line, 119, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$shcmd -c \"echo \\\$TEST\""), (:call, :(=>), "TEST", "Hello World"))), "Hello World\n")),
    (:line, 120, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :withenv, (:->, (:tuple,), (:block,
              (:line, 121, :none),
              (:call, :readstring, (:macrocall, Symbol("@cmd"), "\$shcmd -c \"echo \\\$TEST\""))
            )), (:call, :(=>), "TEST", "Hello World")), "Hello World\n")),
    (:line, 122, :none),
    (:let, (:block,
        (:line, 124, :none),
        (:if, (:call, :is_windows), (:block,
            (:line, 126, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :pathA, :pathB))
          ), (:block,
            (:line, 128, :none),
            (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                    :samefile
                  )), :pathA, :pathB))
          ))
      ), (:(=), :pathA, (:call, :readchomp, (:call, :setenv, (:parameters, (:kw, :dir, "..")), (:macrocall, Symbol("@cmd"), "\$shcmd -c \"pwd -P\"")))), (:(=), :pathB, (:call, :readchomp, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$shcmd -c \"cd .. && pwd -P\""))))),
    (:line, 132, :none),
    (:let, (:block,
        (:line, 133, :none),
        (:for, (:(=), :i, (:(:), 1, 1000)), (:block,
            (:line, 134, :none),
            (:(=), :str, (:string, :str, "\n ", (:call, :randstring, 10)))
          )),
        (:line, 138, :none),
        (:(=), (:tuple, :stdout, :stdin, :proc), (:call, :readandwrite, (:macrocall, Symbol("@cmd"), "\$catcmd -"))),
        (:line, 139, :none),
        (:call, :write, :stdin, :str),
        (:line, 140, :none),
        (:call, :close, :stdin),
        (:line, 141, :none),
        (:(=), :str2, (:call, :readstring, :stdout)),
        (:line, 142, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :str2, :str)),
        (:line, 145, :none),
        (:(=), :file, (:call, :tempname)),
        (:line, 146, :none),
        (:call, :open, (:->, (:tuple, :io), (:block,
              (:line, 147, :none),
              (:call, :write, :io, :str)
            )), (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$catcmd -"), :file), "w"),
        (:line, 149, :none),
        (:call, :rm, :file)
      ), (:(=), :str, ""), :stdin, :stdout, :proc, :str2, :file),
    (:line, 154, :none),
    (:let, (:block,
        (:line, 155, :none),
        (:(=), :r, (:call, :Channel, 1)),
        (:line, 156, :none),
        (:(=), :t, (:macrocall, Symbol("@async"), (:block,
              (:line, 157, :none),
              (:try, (:block,
                  (:line, 158, :none),
                  (:call, :wait, :r)
                ), false, (:block,)),
              (:line, 160, :none),
              (:(=), :p, (:call, :spawn, (:macrocall, Symbol("@cmd"), "\$sleepcmd 1"))),
              (:line, 160, :none),
              (:call, :wait, :p),
              (:line, 161, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:., :p, (:quote, #QuoteNode
                      :exitcode
                    )), 0)),
              (:line, 162, :none),
              (:return, true)
            ))),
        (:line, 164, :none),
        (:call, :yield),
        (:line, 165, :none),
        (:call, :schedule, :t, (:call, :InterruptException), (:kw, :error, true)),
        (:line, 166, :none),
        (:call, :yield),
        (:line, 167, :none),
        (:call, :put!, :r, 11),
        (:line, 168, :none),
        (:call, :yield),
        (:line, 169, :none),
        (:macrocall, Symbol("@test"), (:call, :wait, :t))
      ), :r, :t),
    (:line, 173, :none),
    (:let, (:block,
        (:line, 174, :none),
        (:(=), :r, (:call, :Channel, 1)),
        (:line, 175, :none),
        (:(=), :t, (:macrocall, Symbol("@async"), (:block,
              (:line, 176, :none),
              (:(=), (:tuple, :port, :server), (:call, :listenany, 2327)),
              (:line, 177, :none),
              (:call, :put!, :r, :port),
              (:line, 178, :none),
              (:(=), :client, (:call, :accept, :server)),
              (:line, 179, :none),
              (:call, :write, :client, "Hello, world!\n"),
              (:line, 180, :none),
              (:call, :write, :client, "Goodbye, world...\n"),
              (:line, 181, :none),
              (:call, :close, :server),
              (:line, 182, :none),
              (:return, true)
            ))),
        (:line, 184, :none),
        (:(=), :sock, (:call, :connect, (:call, :fetch, :r))),
        (:line, 185, :none),
        (:call, :mark, :sock),
        (:line, 186, :none),
        (:macrocall, Symbol("@test"), (:call, :ismarked, :sock)),
        (:line, 187, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readline, :sock), "Hello, world!")),
        (:line, 188, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readline, :sock), "Goodbye, world...")),
        (:line, 189, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reset, :sock), 0)),
        (:line, 190, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :ismarked, :sock))),
        (:line, 191, :none),
        (:call, :mark, :sock),
        (:line, 192, :none),
        (:macrocall, Symbol("@test"), (:call, :ismarked, :sock)),
        (:line, 193, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readline, :sock), "Hello, world!")),
        (:line, 194, :none),
        (:call, :unmark, :sock),
        (:line, 195, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :ismarked, :sock))),
        (:line, 196, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :reset, :sock)),
        (:line, 197, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :unmark, :sock))),
        (:line, 198, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readline, :sock), "Goodbye, world...")),
        (:line, 200, :none),
        (:call, :close, :sock),
        (:line, 201, :none),
        (:macrocall, Symbol("@test"), (:call, :wait, :t))
      ), :r, :t, :sock),
    (:line, 204, :none),
    (:(=), :exename, (:call, (:., :Base, (:quote, #QuoteNode
            :julia_cmd
          )))),
    (:line, 205, :none),
    (:if, :valgrind_off, (:block,
        (:line, 208, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e 'println(STDERR,\"Hello World\")'"), (:kw, :stderr, :catcmd))), "Hello World\n")),
        (:line, 209, :none),
        (:(=), :out, (:call, :Pipe)),
        (:line, 210, :none),
        (:(=), :proc, (:call, :spawn, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e 'println(STDERR,\"Hello World\")'"), (:kw, :stderr, :out)))),
        (:line, 211, :none),
        (:call, :close, (:., :out, (:quote, #QuoteNode
              :in
            ))),
        (:line, 212, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, :out), "Hello World\n")),
        (:line, 213, :none),
        (:macrocall, Symbol("@test"), (:call, :success, :proc))
      )),
    (:line, 217, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$echocmd \"2+2\""), (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no"))), "4\n")),
    (:line, 220, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :run, (:call, :pipeline, (:call, :ignorestatus, :falsecmd), :truecmd)), :nothing)),
    (:line, 222, :none),
    (:macrocall, Symbol("@testset"), "redirect_*", (:block,
        (:line, 223, :none),
        (:let, (:block,
            (:line, 227, :none),
            (:call, :redirect_stdout, :f),
            (:line, 228, :none),
            (:call, :println, "Hello World"),
            (:line, 229, :none),
            (:call, :redirect_stdout, :OLD_STDOUT),
            (:line, 230, :none),
            (:call, :close, :f),
            (:line, 231, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), "Hello World\n", (:call, :readstring, :fname))),
            (:line, 232, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), :OLD_STDOUT, :STDOUT)),
            (:line, 233, :none),
            (:call, :rm, :fname)
          ), (:(=), :OLD_STDOUT, :STDOUT), (:(=), :fname, (:call, :tempname)), (:(=), :f, (:call, :open, :fname, "w")))
      )),
    (:line, 238, :none),
    (:let, (:block,
        (:line, 239, :none),
        (:(=), :cmd, (:string, "# Overwrite libuv memory before freeing it, to make sure that a use after free\n# triggers an assertion.\nfunction thrash(handle::Ptr{Void})\n    # Kill the memory, but write a nice low value in the libuv type field to\n    # trigger the right code path\n    ccall(:memset,Ptr{Void},(Ptr{Void},Cint,Csize_t),handle,0xee,3*sizeof(Ptr{Void}))\n    unsafe_store!(convert(Ptr{Cint},handle+2*sizeof(Ptr{Void})),15)\n    nothing\nend\nOLD_STDERR = STDERR\nredirect_stderr(open(\"", (:call, :escape_string, :fname), "\",\"w\"))\n# Usually this would be done by GC. Do it manually, to make the failure\n# case more reliable.\noldhandle = OLD_STDERR.handle\nOLD_STDERR.status = Base.StatusClosing\nOLD_STDERR.handle = C_NULL\nccall(:uv_close,Void,(Ptr{Void},Ptr{Void}),oldhandle,cfunction(thrash,Void,(Ptr{Void},)))\nsleep(1)\nimport Base.zzzInvalidIdentifier\n")),
        (:line, 260, :none),
        (:try, (:block,
            (:line, 261, :none),
            (:(=), (:tuple, :in, :p), (:call, :open, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no"), (:kw, :stderr, :STDERR)), "w")),
            (:line, 262, :none),
            (:call, :write, :in, :cmd),
            (:line, 263, :none),
            (:call, :close, :in),
            (:line, 264, :none),
            (:call, :wait, :p)
          ), false, (:block,
            (:line, 266, :none),
            (:call, :error, (:string, "IOStream redirect failed. Child stderr was \n", (:call, :readstring, :fname), "\n"))
          ), (:block,
            (:line, 268, :none),
            (:call, :rm, :fname)
          ))
      ), (:(=), :fname, (:call, :tempname))),
    (:line, 273, :none),
    (:let, (:block,
        (:line, 274, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:macrocall, Symbol("@cmd"), "\$bad"))),
        (:line, 275, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:macrocall, Symbol("@cmd"), "\$echocmd \$bad"))),
        (:line, 276, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), (:call, :(=>), :bad, "good")))),
        (:line, 277, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, :setenv, (:macrocall, Symbol("@cmd"), "\$echocmd hello"), (:call, :(=>), "good", :bad))))
      ), (:(=), :bad, "bad\0name")),
    (:line, 281, :none),
    (:let, (:block,
        (:line, 282, :none),
        (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :write, :out, "not open error")),
        (:line, 283, :none),
        (:(=), :t, (:macrocall, Symbol("@async"), (:block,
              (:line, 284, :none),
              (:call, :open, (:->, (:tuple, :in1), (:block,
                    (:line, 285, :none),
                    (:call, :open, (:->, (:tuple, :in2), (:block,
                          (:line, 286, :none),
                          (:call, :notify, :ready),
                          (:line, 287, :none),
                          (:call, :write, :in1, 'h'),
                          (:line, 288, :none),
                          (:call, :write, :in2, (:ref, :UInt8, 'w')),
                          (:line, 289, :none),
                          (:call, :println, :in1, "ello"),
                          (:line, 290, :none),
                          (:call, :write, :in2, "orld\n")
                        )), :echo, "w", :out)
                  )), :echo, "w", :out),
              (:line, 293, :none),
              (:(=), :infd, (:call, (:., :Base, (:quote, #QuoteNode
                      :_fd
                    )), (:., :out, (:quote, #QuoteNode
                      :in
                    )))),
              (:line, 294, :none),
              (:(=), :outfd, (:call, (:., :Base, (:quote, #QuoteNode
                      :_fd
                    )), (:., :out, (:quote, #QuoteNode
                      :out
                    )))),
              (:line, 295, :none),
              (:call, :show, :out, :out),
              (:line, 296, :none),
              (:call, :notify, :ready),
              (:line, 297, :none),
              (:macrocall, Symbol("@test"), (:call, :isreadable, :out)),
              (:line, 298, :none),
              (:macrocall, Symbol("@test"), (:call, :iswritable, :out)),
              (:line, 299, :none),
              (:call, :close, (:., :out, (:quote, #QuoteNode
                    :in
                  ))),
              (:line, 300, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:., :out, (:quote, #QuoteNode
                        :in
                      ))))),
              (:line, 301, :none),
              (:||, (:call, :is_windows), (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:., :out, (:quote, #QuoteNode
                          :out
                        )))))),
              (:line, 302, :none),
              (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :write, :out, "now closed error")),
              (:line, 303, :none),
              (:macrocall, Symbol("@test"), (:call, :isreadable, :out)),
              (:line, 304, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :iswritable, :out))),
              (:line, 305, :none),
              (:if, (:call, :is_windows), (:block,
                  (:line, 309, :none),
                  (:call, (:., :Base, (:quote, #QuoteNode
                        :wait_close
                      )), :out)
                )),
              (:line, 311, :none),
              (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :out)))
            ))),
        (:line, 313, :none),
        (:call, :wait, :ready),
        (:line, 314, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :nb_available, :out), 0)),
        (:line, 315, :none),
        (:macrocall, Symbol("@test"), (:call, :endswith, (:call, :readuntil, :out, '1'), '1')),
        (:line, 316, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Char, (:call, :read, :out, :UInt8)), '\t')),
        (:line, 317, :none),
        (:(=), :c, (:ref, :UInt8, 0)),
        (:line, 318, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :c, (:call, :read!, :out, :c))),
        (:line, 319, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :wait_readnb
            )), :out, 1),
        (:line, 320, :none),
        (:macrocall, Symbol("@test"), (:call, :>, (:call, :nb_available, :out), 0)),
        (:line, 321, :none),
        (:(=), :ln1, (:call, :readline, :out)),
        (:line, 322, :none),
        (:(=), :ln2, (:call, :readline, :out)),
        (:line, 323, :none),
        (:(=), :desc, (:call, :readstring, :out)),
        (:line, 324, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isreadable, :out))),
        (:line, 325, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :iswritable, :out))),
        (:line, 326, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :out))),
        (:line, 327, :none),
        (:macrocall, Symbol("@test"), (:comparison, :infd, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
                  :_fd
                )), (:., :out, (:quote, #QuoteNode
                  :in
                ))), :(==), (:., :Base, (:quote, #QuoteNode
                :INVALID_OS_HANDLE
              )))),
        (:line, 328, :none),
        (:macrocall, Symbol("@test"), (:comparison, :outfd, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
                  :_fd
                )), (:., :out, (:quote, #QuoteNode
                  :out
                ))), :(==), (:., :Base, (:quote, #QuoteNode
                :INVALID_OS_HANDLE
              )))),
        (:line, 329, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :nb_available, :out), 0)),
        (:line, 330, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :c, (:ref, :UInt8, 'w'))),
        (:line, 331, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :lstrip, :ln2), "1\thello")),
        (:line, 332, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :ln1, "orld")),
        (:line, 333, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :read, :out))),
        (:line, 334, :none),
        (:macrocall, Symbol("@test"), (:call, :eof, :out)),
        (:line, 335, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :desc, (:string, "Pipe(", :infd, " open => ", :outfd, " active, 0 bytes waiting)"))),
        (:line, 336, :none),
        (:call, :wait, :t)
      ), (:(=), :out, (:call, :Pipe)), (:(=), :echo, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e 'print(STDOUT, \" 1\\t\", readstring(STDIN))'")), (:(=), :ready, (:call, :Condition)), :t, :infd, :outfd),
    (:line, 340, :none),
    (:let, (:block,
        (:line, 341, :none),
        (:call, :write, :fname, "test\n"),
        (:line, 342, :none),
        (:(=), :code, "cmd = pipeline(`echo asdf`,`cat`)\nif is_windows()\n    try\n        success(`busybox`)\n        cmd = pipeline(`busybox echo asdf`,`busybox cat`)\n    end\nend\nfor line in eachline(STDIN)\n    run(cmd)\nend\n"),
        (:line, 354, :none),
        (:macrocall, Symbol("@test"), (:call, :success, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$catcmd \$fname"), (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e \$code")))),
        (:line, 355, :none),
        (:call, :rm, :fname)
      ), (:(=), :fname, (:call, :tempname))),
    (:line, 359, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "foo bar baz"), (:vect, "foo", "bar", "baz"))),
    (:line, 360, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "foo\\ bar baz"), (:vect, "foo bar", "baz"))),
    (:line, 361, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "'foo bar' baz"), (:vect, "foo bar", "baz"))),
    (:line, 362, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "\"foo bar\" baz"), (:vect, "foo bar", "baz"))),
    (:line, 365, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "'foo\\ bar' baz"), (:vect, "foo\\ bar", "baz"))),
    (:line, 366, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "\"foo\\ bar\" baz"), (:vect, "foo\\ bar", "baz"))),
    (:line, 369, :none),
    (:let, (:block,
        (:line, 370, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :shell_split
                )), "/Volumes/External\\ HD/program -a"), :cmd)),
        (:line, 371, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :shell_split
                )), "'/Volumes/External HD/program' -a"), :cmd)),
        (:line, 372, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :shell_split
                )), "\"/Volumes/External HD/program\" -a"), :cmd))
      ), (:(=), :cmd, (:vect, "/Volumes/External HD/program", "-a"))),
    (:line, 376, :none),
    (:let, (:block,
        (:line, 377, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, (:macrocall, Symbol("@cmd"), "\$cmd")), "`'foo bar' baz`"))
      ), (:(=), :cmd, (:vect, "foo bar", "baz"))),
    (:line, 380, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :shell_split
            )), "\"\\\\\""), (:vect, "\\"))),
    (:line, 383, :none),
    (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :collect, (:call, :eachline, (:call, :pipeline, (:macrocall, Symbol("@cmd"), "\$catcmd _doesnt_exist__111_"), (:kw, :stderr, :DevNull))))),
    (:line, 386, :none),
    (:if, (:call, :is_windows), (:block,
        (:line, 387, :none),
        (:call, :(==), (:call, :readstring, (:macrocall, Symbol("@cmd"), "cmd.exe /c dir /b spawn.jl")), (:call, :readstring, (:call, :Cmd, (:macrocall, Symbol("@cmd"), "cmd.exe /c dir /b \"\\\"spawn.jl\\\"\""), (:kw, :windows_verbatim, true))))
      )),
    (:line, 391, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, (:call, :Cmd, (:call, :Cmd, (:macrocall, Symbol("@cmd"), "ls"), (:kw, :detach, true)))), "`ls`")),
    (:line, 394, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "")), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 395, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "lsof -i :9090")), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "lsof -i :9090")))),
    (:line, 396, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "\$echocmd test")), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "\$echocmd test")))),
    (:line, 397, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "")), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "\$echocmd test")))),
    (:line, 398, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), ""), (:kw, :ignorestatus, true)), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), ""), (:kw, :ignorestatus, false)))),
    (:line, 399, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), ""), (:kw, :dir, "TESTS")), (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), ""), (:kw, :dir, "TEST")))),
    (:line, 400, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :Set
            )), (:vect, (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), ""))), (:call, (:., :Base, (:quote, #QuoteNode
              :Set
            )), (:vect, (:macrocall, Symbol("@cmd"), ""))))),
    (:line, 401, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :Set, (:vect, (:macrocall, Symbol("@cmd"), ""), :echocmd)), (:call, :Set, (:vect, (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), ""))))),
    (:line, 402, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Set, (:vect, :echocmd, (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), ""), :echocmd)), (:call, :Set, (:vect, :echocmd, (:macrocall, Symbol("@cmd"), ""))))),
    (:line, 405, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd def")), (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd def")))),
    (:line, 406, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd def")), (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd xyz")))),
    (:line, 409, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 410, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 411, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), "\$truecmd")))),
    (:line, 412, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :run, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$truecmd"), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 414, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :spawn, (:call, (:., :Base, (:quote, #QuoteNode
              :Cmd
            )), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 415, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :spawn, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 416, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :spawn, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), ""), (:macrocall, Symbol("@cmd"), "\$echocmd test")))),
    (:line, 417, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :spawn, (:call, (:., :Base, (:quote, #QuoteNode
              :AndCmds
            )), (:macrocall, Symbol("@cmd"), "\$echocmd test"), (:macrocall, Symbol("@cmd"), "")))),
    (:line, 420, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :reduce, :&, (:ref, (:., :Base, (:quote, #QuoteNode
              :AbstractCmd
            ))))),
    (:line, 421, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :reduce, :&, (:ref, (:., :Base, (:quote, #QuoteNode
              :Cmd
            ))))),
    (:line, 422, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reduce, :&, (:vect, (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd def"), (:macrocall, Symbol("@cmd"), "\$echocmd hij"))), (:call, :&, (:call, :&, (:macrocall, Symbol("@cmd"), "\$echocmd abc"), (:macrocall, Symbol("@cmd"), "\$echocmd def")), (:macrocall, Symbol("@cmd"), "\$echocmd hij")))),
    (:line, 425, :none),
    (:if, (:call, :is_unix), (:block,
        (:line, 426, :none),
        (:let, (:block,
            (:line, 427, :none),
            (:(=), :ulimit_n, (:call, :tryparse, :Int, (:call, :readchomp, (:macrocall, Symbol("@cmd"), "sh -c 'ulimit -n'")))),
            (:line, 428, :none),
            (:try, (:block,
                (:line, 429, :none),
                (:for, (:(=), :i, (:(:), 1, (:call, :*, 100, (:call, :get, :ulimit_n, 1000)))), (:block,
                    (:line, 430, :none),
                    (:(=), :p, (:call, :Pipe)),
                    (:line, 431, :none),
                    (:call, (:., :Base, (:quote, #QuoteNode
                          :link_pipe
                        )), :p),
                    (:line, 432, :none),
                    (:call, :push!, :ps, :p)
                  )),
                (:line, 434, :none),
                (:if, (:call, :isnull, :ulimit_n), (:block,
                    (:line, 435, :none),
                    (:call, :warn, "`ulimit -n` is set to unlimited, fd exhaustion cannot be tested"),
                    (:line, 436, :none),
                    (:macrocall, Symbol("@test_broken"), false)
                  ), (:block,
                    (:line, 438, :none),
                    (:macrocall, Symbol("@test"), false)
                  ))
              ), :ex, (:block,
                (:line, 441, :none),
                (:||, (:call, :isa, :ex, (:., :Base, (:quote, #QuoteNode
                        :UVError
                      ))), (:call, :rethrow, :ex)),
                (:line, 442, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:., :ex, (:quote, #QuoteNode
                        :code
                      )), (:., :Base, (:quote, #QuoteNode
                        :UV_EMFILE
                      ))))
              ), (:block,
                (:line, 444, :none),
                (:for, (:(=), :p, :ps), (:block,
                    (:line, 445, :none),
                    (:call, :close, :p)
                  ))
              ))
          ), (:(=), :ps, (:ref, :Pipe)))
      )),
    (:line, 452, :none),
    (:let, (:block,
        (:line, 453, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :link_pipe
            )), (:parameters, (:kw, :julia_only_read, true), (:kw, :julia_only_write, true)), :p),
        (:line, 454, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :jl_static_show
          ), :Void, (:tuple, (:curly, :Ptr, :Void), :Any), (:., :p, (:quote, #QuoteNode
              :in
            )), (:call, :Int128, -1)),
        (:line, 455, :none),
        (:macrocall, Symbol("@async"), (:call, :close, (:., :p, (:quote, #QuoteNode
                :in
              )))),
        (:line, 456, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, (:., :p, (:quote, #QuoteNode
                  :out
                ))), "Int128(0xffffffffffffffffffffffffffffffff)"))
      ), (:(=), :p, (:call, :Pipe))),
    (:line, 460, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sort, (:call, :readlines, (:macrocall, Symbol("@cmd"), "\$lscmd -A"))), (:call, :sort, (:call, :readdir)))),
    (:line, 463, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readchomp, (:call, :pipeline, (:call, :ignorestatus, (:macrocall, Symbol("@cmd"), "\$exename --startup-file=no -e '\n            struct Error19864 <: Exception; end\n            Base.showerror(io::IO, e::Error19864) = print(io, \"correct19864\")\n            throw(Error19864())'")), (:kw, :stderr, :catcmd))), "ERROR: correct19864"))
  ))