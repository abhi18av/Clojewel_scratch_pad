(:quote, (:block,
    (:line, 4, :none),
    (:(=), :c, (:call, :Channel, 1)),
    (:line, 5, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :c), :Any)),
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :put!, :c, 1), 1)),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :c), true)),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, :c), 1)),
    (:line, 9, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :isready, :c), false)),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, (:call, :Channel, 1.0)), :Any)),
    (:line, 13, :none),
    (:(=), :c, (:call, (:curly, :Channel, :Int), 1)),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :c), :Int)),
    (:line, 15, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :put!, :c, "Hello")),
    (:line, 17, :none),
    (:(=), :c, (:call, (:curly, :Channel, :Int), :Inf)),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :eltype, :c), :Int)),
    (:line, 19, :none),
    (:(=), :pvals, (:call, :map, (:->, :i, (:block,
            (:line, 19, :none),
            (:call, :put!, :c, :i)
          )), (:(:), 1, (:call, :^, 10, 6)))),
    (:line, 20, :none),
    (:(=), :tvals, (:typed_comprehension, :Int, (:generator, (:call, :take!, :c), (:(=), :i, (:(:), 1, (:call, :^, 10, 6)))))),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :pvals, :tvals)),
    (:line, 26, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Channel, -1)),
    (:line, 27, :none),
    (:macrocall, Symbol("@test_throws"), :InexactError, (:call, :Channel, 1.5)),
    (:line, 30, :none),
    (:function, (:call, :testcpt, :sz), (:block,
        (:line, 31, :none),
        (:(=), :c, (:call, (:curly, :Channel, :Int), :sz)),
        (:line, 32, :none),
        (:(=), :size, 0),
        (:line, 33, :none),
        (:(=), (:call, :inc), (:block,
            (:line, 33, :none),
            (:+=, :size, 1)
          )),
        (:line, 34, :none),
        (:(=), (:call, :dec), (:block,
            (:line, 34, :none),
            (:-=, :size, 1)
          )),
        (:line, 35, :none),
        (:macrocall, Symbol("@sync"), (:for, (:(=), :i, (:(:), 1, (:call, :^, 10, 4))), (:block,
              (:line, 36, :none),
              (:macrocall, Symbol("@async"), (:block,
                  (:call, :sleep, (:call, :rand)),
                  (:call, :put!, :c, :i),
                  (:call, :inc)
                )),
              (:line, 37, :none),
              (:macrocall, Symbol("@async"), (:block,
                  (:call, :sleep, (:call, :rand)),
                  (:call, :take!, :c),
                  (:call, :dec)
                ))
            ))),
        (:line, 39, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :size, 0))
      )),
    (:line, 41, :none),
    (:call, :testcpt, 0),
    (:line, 42, :none),
    (:call, :testcpt, 1),
    (:line, 43, :none),
    (:call, :testcpt, 32),
    (:line, 44, :none),
    (:call, :testcpt, :Inf),
    (:line, 48, :none),
    (:(=), :c, (:call, :Channel, 32)),
    (:line, 49, :none),
    (:(=), :results, (:vect,)),
    (:line, 50, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 51, :none),
        (:for, (:(=), :i, (:(:), 1, 20)), (:block,
            (:line, 52, :none),
            (:macrocall, Symbol("@async"), (:for, (:(=), :i, :c), (:block,
                  (:line, 53, :none),
                  (:call, :push!, :results, :i)
                )))
          )),
        (:line, 56, :none),
        (:call, :sleep, 1.0),
        (:line, 57, :none),
        (:for, (:(=), :i, (:(:), 1, 5)), (:block,
            (:line, 58, :none),
            (:call, :put!, :c, :i)
          )),
        (:line, 60, :none),
        (:call, :close, :c)
      )),
    (:line, 62, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, :results), 15)),
    (:line, 67, :none),
    (:(=), :c, (:call, :Channel, 32)),
    (:line, 67, :none),
    (:call, :foreach, (:->, :i, (:block,
          (:line, 67, :none),
          (:call, :put!, :c, :i)
        )), (:(:), 1, 10)),
    (:line, 67, :none),
    (:call, :close, :c),
    (:line, 68, :none),
    (:(=), :s, (:call, :start, :c)),
    (:line, 69, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :done, :c, :s), false)),
    (:line, 70, :none),
    (:(=), :res, (:ref, :Int)),
    (:line, 71, :none),
    (:while, (:call, :!, (:call, :done, :c, :s)), (:block,
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :done, :c, :s), false)),
        (:line, 73, :none),
        (:(=), (:tuple, :v, :s), (:call, :next, :c, :s)),
        (:line, 74, :none),
        (:call, :push!, :res, :v)
      )),
    (:line, 76, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), :res, (:ref, :Int, (:..., (:(:), 1, 10))))),
    (:line, 79, :none),
    (:for, (:(=), :N, (:vect, 0, 10)), (:block,
        (:line, 81, :none),
        (:(=), :c, (:call, :Channel, :N)),
        (:line, 82, :none),
        (:call, :bind, :c, (:macrocall, Symbol("@schedule"), (:block,
              (:call, :yield),
              :nothing
            ))),
        (:line, 83, :none),
        (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :take!, :c)),
        (:line, 84, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :c))),
        (:line, 87, :none),
        (:(=), :c, (:call, :Channel, :N)),
        (:line, 88, :none),
        (:call, :bind, :c, (:macrocall, Symbol("@schedule"), (:block,
              (:call, :yield),
              (:call, :error, "foo")
            ))),
        (:line, 89, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :take!, :c)),
        (:line, 90, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :c))),
        (:line, 93, :none),
        (:(=), :cs, (:comprehension, (:generator, (:call, :Channel, :N), (:(=), :i, (:(:), 1, 5))))),
        (:line, 94, :none),
        (:(=), :tf2, (:->, (:tuple,), (:block,
              (:line, 94, :none),
              (:block,
                (:line, 95, :none),
                (:if, (:call, :>, :N, 0), (:block,
                    (:line, 96, :none),
                    (:call, :foreach, (:->, :c, (:block,
                          (:line, 96, :none),
                          (:call, :assert, (:call, :(==), (:call, :take!, :c), 2))
                        )), :cs)
                  )),
                (:line, 98, :none),
                (:call, :yield),
                (:line, 99, :none),
                (:call, :error, "foo")
              )
            ))),
        (:line, 101, :none),
        (:(=), :task, (:call, :Task, :tf2)),
        (:line, 102, :none),
        (:call, :foreach, (:->, :c, (:block,
              (:line, 102, :none),
              (:call, :bind, :c, :task)
            )), :cs),
        (:line, 103, :none),
        (:call, :schedule, :task),
        (:line, 105, :none),
        (:if, (:call, :>, :N, 0), (:block,
            (:line, 106, :none),
            (:for, (:(=), :i, (:(:), 1, 5)), (:block,
                (:line, 107, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:call, :put!, (:ref, :cs, :i), 2), 2))
              ))
          )),
        (:line, 110, :none),
        (:for, (:(=), :i, (:(:), 1, 5)), (:block,
            (:line, 111, :none),
            (:while, (:call, :isopen, (:ref, :cs, :i)), (:block,
                (:line, 111, :none),
                (:call, :yield)
              )),
            (:line, 112, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :wait, (:ref, :cs, :i))),
            (:line, 113, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :take!, (:ref, :cs, :i))),
            (:line, 114, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :put!, (:ref, :cs, :i), 1)),
            (:line, 115, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :fetch, (:ref, :cs, :i)))
          )),
        (:line, 119, :none),
        (:(=), :nth, (:call, :rand, (:(:), 1, 5))),
        (:line, 120, :none),
        (:(=), :ref, (:call, :Ref, 0)),
        (:line, 121, :none),
        (:(=), :cond, (:call, :Condition)),
        (:line, 122, :none),
        (:(=), (:call, :tf3, :i), (:block,
            (:line, 122, :none),
            (:block,
              (:line, 123, :none),
              (:if, (:call, :(==), :i, :nth), (:block,
                  (:line, 124, :none),
                  (:(=), (:ref, :ref), :i)
                ), (:block,
                  (:line, 126, :none),
                  (:call, :sleep, 2.0)
                ))
            )
          )),
        (:line, 130, :none),
        (:(=), :tasks, (:comprehension, (:generator, (:call, :Task, (:->, (:tuple,), (:block,
                    (:line, 130, :none),
                    (:call, :tf3, :i)
                  ))), (:(=), :i, (:(:), 1, 5))))),
        (:line, 131, :none),
        (:(=), :c, (:call, :Channel, :N)),
        (:line, 132, :none),
        (:call, :foreach, (:->, :t, (:block,
              (:line, 132, :none),
              (:call, :bind, :c, :t)
            )), :tasks),
        (:line, 133, :none),
        (:call, :foreach, :schedule, :tasks),
        (:line, 134, :none),
        (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :wait, :c)),
        (:line, 135, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :c))),
        (:line, 136, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :ref), :nth)),
        (:line, 139, :none),
        (:for, (:(=), :T, (:vect, :Any, :Int)), (:block,
            (:line, 140, :none),
            (:(=), (:tuple, :chnls, :tasks), (:call, (:., :Base, (:quote, #QuoteNode
                    :channeled_tasks
                  )), (:parameters, (:kw, :ctypes, (:vect, :T, :T)), (:kw, :csizes, (:vect, :N, :N))), 2, (:->, (:tuple, :c1, :c2), (:block,
                    (:line, 140, :none),
                    (:block,
                      (:call, :assert, (:call, :(==), (:call, :take!, :c1), 1)),
                      (:call, :put!, :c2, 2)
                    )
                  )))),
            (:line, 141, :none),
            (:call, :put!, (:ref, :chnls, 1), 1),
            (:line, 142, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, (:ref, :chnls, 2)), 2)),
            (:line, 143, :none),
            (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :wait, (:ref, :chnls, 1))),
            (:line, 144, :none),
            (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :wait, (:ref, :chnls, 2))),
            (:line, 145, :none),
            (:macrocall, Symbol("@test"), (:call, :istaskdone, (:ref, :tasks, 1))),
            (:line, 146, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:ref, :chnls, 1)))),
            (:line, 147, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:ref, :chnls, 2)))),
            (:line, 149, :none),
            (:(=), :f, (:call, :Future)),
            (:line, 150, :none),
            (:(=), :tf4, (:->, (:tuple, :c1, :c2), (:block,
                  (:line, 150, :none),
                  (:block,
                    (:line, 151, :none),
                    (:call, :assert, (:call, :(==), (:call, :take!, :c1), 1)),
                    (:line, 152, :none),
                    (:call, :wait, :f)
                  )
                ))),
            (:line, 155, :none),
            (:(=), :tf5, (:->, (:tuple, :c1, :c2), (:block,
                  (:line, 155, :none),
                  (:block,
                    (:line, 156, :none),
                    (:call, :put!, :c2, 2),
                    (:line, 157, :none),
                    (:call, :wait, :f)
                  )
                ))),
            (:line, 160, :none),
            (:(=), (:tuple, :chnls, :tasks), (:call, (:., :Base, (:quote, #QuoteNode
                    :channeled_tasks
                  )), (:parameters, (:kw, :ctypes, (:vect, :T, :T)), (:kw, :csizes, (:vect, :N, :N))), 2, :tf4, :tf5)),
            (:line, 161, :none),
            (:call, :put!, (:ref, :chnls, 1), 1),
            (:line, 162, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :take!, (:ref, :chnls, 2)), 2)),
            (:line, 163, :none),
            (:call, :yield),
            (:line, 164, :none),
            (:call, :put!, :f, 1),
            (:line, 166, :none),
            (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :wait, (:ref, :chnls, 1))),
            (:line, 167, :none),
            (:macrocall, Symbol("@test_throws"), :InvalidStateException, (:call, :wait, (:ref, :chnls, 2))),
            (:line, 168, :none),
            (:macrocall, Symbol("@test"), (:call, :istaskdone, (:ref, :tasks, 1))),
            (:line, 169, :none),
            (:macrocall, Symbol("@test"), (:call, :istaskdone, (:ref, :tasks, 2))),
            (:line, 170, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:ref, :chnls, 1)))),
            (:line, 171, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, (:ref, :chnls, 2))))
          )),
        (:line, 175, :none),
        (:(=), :tf6, (:->, :c, (:block,
              (:line, 175, :none),
              (:block,
                (:line, 176, :none),
                (:call, :assert, (:call, :(==), (:call, :take!, :c), 2)),
                (:line, 177, :none),
                (:call, :error, "foo")
              )
            ))),
        (:line, 180, :none),
        (:for, (:(=), :T, (:vect, :Any, :Int)), (:block,
            (:line, 181, :none),
            (:(=), :taskref, (:call, (:curly, :Ref, :Task))),
            (:line, 182, :none),
            (:(=), :chnl, (:call, :Channel, :tf6, (:kw, :ctype, :T), (:kw, :csize, :N), (:kw, :taskref, :taskref))),
            (:line, 183, :none),
            (:call, :put!, :chnl, 2),
            (:line, 184, :none),
            (:call, :yield),
            (:line, 185, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :wait, :chnl)),
            (:line, 186, :none),
            (:macrocall, Symbol("@test"), (:call, :istaskdone, (:ref, :taskref))),
            (:line, 187, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :chnl))),
            (:line, 188, :none),
            (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :take!, :chnl))
          ))
      )),
    (:line, 194, :none),
    (:macrocall, Symbol("@sync"), (:block,
        (:line, 195, :none),
        (:(=), :rr1, (:call, :Channel, 1)),
        (:line, 196, :none),
        (:(=), :rr2, (:call, :Channel, 1)),
        (:line, 197, :none),
        (:(=), :rr3, (:call, :Channel, 1)),
        (:line, 199, :none),
        (:(=), (:call, :callback), (:block,
            (:line, 199, :none),
            (:call, :all, (:call, :map, :isready, (:vect, :rr1, :rr2, :rr3)))
          )),
        (:line, 201, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :callback))),
        (:line, 202, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :timedwait, :callback, 0.0), (:quote, #QuoteNode
              :timed_out
            ))),
        (:line, 204, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 204, :none),
            (:call, :sleep, 0.5),
            (:line, 204, :none),
            (:call, :put!, :rr1, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 205, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 205, :none),
            (:call, :sleep, 1.0),
            (:line, 205, :none),
            (:call, :put!, :rr2, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 206, :none),
        (:macrocall, Symbol("@async"), (:block,
            (:line, 206, :none),
            (:call, :sleep, 2.0),
            (:line, 206, :none),
            (:call, :put!, :rr3, (:quote, #QuoteNode
                :ok
              ))
          )),
        (:line, 208, :none),
        (:call, :tic),
        (:line, 209, :none),
        (:call, :timedwait, :callback, (:call, (:., :Dates, (:quote, #QuoteNode
                :Second
              )), 1)),
        (:line, 210, :none),
        (:(=), :et, (:call, :toq)),
        (:line, 212, :none),
        (:try, (:block,
            (:line, 213, :none),
            (:macrocall, Symbol("@assert"), (:&&, (:call, :(>=), :et, 1.0), (:call, :(<=), :et, 1.5))),
            (:line, 214, :none),
            (:macrocall, Symbol("@assert"), (:call, :!, (:call, :isready, :rr3)))
          ), false, (:block,
            (:line, 216, :none),
            (:call, :warn, (:string, "timedwait tests delayed. et=", :et, ", isready(rr3)=", (:call, :isready, :rr3)))
          )),
        (:line, 218, :none),
        (:macrocall, Symbol("@test"), (:call, :isready, :rr1))
      )),
    (:line, 223, :none),
    (:macrocall, Symbol("@noinline"), (:(=), (:call, :garbage_finalizer, :f), (:block,
          (:line, 223, :none),
          (:call, :finalizer, (:call, :*, "gar", "bage"), :f)
        ))),
    (:line, 224, :none),
    (:let, (:block,
        (:line, 225, :none),
        (:call, :gc_enable, false),
        (:line, 227, :none),
        (:call, :garbage_finalizer, (:->, :x, (:block,
              (:line, 227, :none),
              (:block,
                (:+=, (:ref, :run), 1),
                (:call, :sleep, 1)
              )
            ))),
        (:line, 228, :none),
        (:call, :garbage_finalizer, (:->, :x, (:block,
              (:line, 228, :none),
              (:block,
                (:+=, (:ref, :run), 1),
                (:call, :yield)
              )
            ))),
        (:line, 229, :none),
        (:call, :garbage_finalizer, (:->, :x, (:block,
              (:line, 229, :none),
              (:block,
                (:+=, (:ref, :run), 1),
                (:call, :yieldto, (:macrocall, Symbol("@task"), (:->, (:tuple,), (:block,
                        (:line, 229, :none),
                        (:tuple,)
                      ))))
              )
            ))),
        (:line, 230, :none),
        (:(=), :t, (:macrocall, Symbol("@task"), (:block,
              (:line, 231, :none),
              (:call, :gc_enable, true),
              (:line, 232, :none),
              (:call, :gc)
            ))),
        (:line, 234, :none),
        (:(=), :oldstderr, :STDERR),
        (:line, 235, :none),
        (:local, :newstderr, :errstream),
        (:line, 236, :none),
        (:try, (:block,
            (:line, 237, :none),
            (:(=), :newstderr, (:call, :redirect_stderr)),
            (:line, 238, :none),
            (:(=), :errstream, (:macrocall, Symbol("@async"), (:call, :readstring, (:ref, :newstderr, 1)))),
            (:line, 239, :none),
            (:call, :yield, :t)
          ), false, false, (:block,
            (:line, 241, :none),
            (:call, :redirect_stderr, :oldstderr),
            (:line, 242, :none),
            (:call, :close, (:ref, :newstderr, 2))
          )),
        (:line, 244, :none),
        (:call, :wait, :t),
        (:line, 245, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :run), 3)),
        (:line, 246, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :wait, :errstream), "error in running finalizer: ErrorException(\"task switch not allowed from inside gc finalizer\")\nerror in running finalizer: ErrorException(\"task switch not allowed from inside gc finalizer\")\nerror in running finalizer: ErrorException(\"task switch not allowed from inside gc finalizer\")\n")),
        (:line, 252, :none),
        (:(=), :t, (:macrocall, Symbol("@schedule"), :nothing)),
        (:line, 253, :none),
        (:(=), (:., :t, (:quote, #QuoteNode
              :state
            )), (:quote, #QuoteNode
            :invalid
          )),
        (:line, 254, :none),
        (:try, (:block,
            (:line, 255, :none),
            (:(=), :newstderr, (:call, :redirect_stderr)),
            (:line, 256, :none),
            (:(=), :errstream, (:macrocall, Symbol("@async"), (:call, :readstring, (:ref, :newstderr, 1)))),
            (:line, 257, :none),
            (:call, :yield)
          ), false, false, (:block,
            (:line, 259, :none),
            (:call, :redirect_stderr, :oldstderr),
            (:line, 260, :none),
            (:call, :close, (:ref, :newstderr, 2))
          )),
        (:line, 262, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :wait, :errstream), "\nWARNING: Workqueue inconsistency detected: shift!(Workqueue).state != :queued\n"))
      ), :t, (:(=), :run, (:call, :Ref, 0))),
    (:line, 266, :none),
    (:let, (:block,
        (:line, 269, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:., :Base, (:quote, #QuoteNode
                  :Workqueue
                ))), 1)),
        (:line, 270, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
                  :schedule_and_wait
                )), :ct, 8), 8)),
        (:line, 271, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:., :Base, (:quote, #QuoteNode
                :Workqueue
              )))),
        (:line, 272, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:., :Base, (:quote, #QuoteNode
                  :schedule_and_wait
                )), :ct, :testobject), :testobject))
      ), (:(=), :t, (:macrocall, Symbol("@schedule"), :nothing)), (:(=), :ct, (:call, :current_task)), (:(=), :testobject, "testobject")),
    (:line, 276, :none),
    (:let, (:block,
        (:line, 279, :none),
        (:macrocall, Symbol("@async"), (:call, (:., :Base, (:quote, #QuoteNode
                :throwto
              )), :t, :testerr)),
        (:line, 280, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:try, (:block,
                (:line, 281, :none),
                (:call, :wait, :t),
                (:line, 282, :none),
                false
              ), :ex, (:block,
                (:line, 284, :none),
                :ex
              )), :testerr))
      ), (:(=), :t, (:macrocall, Symbol("@task"), :nothing)), (:(=), :ct, (:call, :current_task)), (:(=), :testerr, (:call, :ErrorException, "expected"))),
    (:line, 289, :none),
    (:let, (:block,
        (:line, 293, :none),
        (:macrocall, Symbol("@test"), (:call, :isopen, :t)),
        (:line, 294, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :process_events
            )), false),
        (:line, 295, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :t))),
        (:line, 296, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 0)),
        (:line, 297, :none),
        (:call, :yield),
        (:line, 298, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1))
      ), (:(=), :tc, (:call, :Ref, 0)), (:(=), :t, (:call, :Timer, (:->, (:tuple, :t), (:block,
              (:line, 291, :none),
              (:+=, (:ref, :tc), 1)
            )), 0))),
    (:line, 300, :none),
    (:let, (:block,
        (:line, 304, :none),
        (:macrocall, Symbol("@test"), (:call, :isopen, :t)),
        (:line, 305, :none),
        (:call, :close, :t),
        (:line, 306, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :t))),
        (:line, 307, :none),
        (:call, :sleep, 0.1),
        (:line, 308, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 0))
      ), (:(=), :tc, (:call, :Ref, 0)), (:(=), :t, (:call, :Timer, (:->, (:tuple, :t), (:block,
              (:line, 302, :none),
              (:+=, (:ref, :tc), 1)
            )), 0))),
    (:line, 310, :none),
    (:let, (:block,
        (:line, 314, :none),
        (:macrocall, Symbol("@test"), (:call, :isopen, :async)),
        (:line, 315, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :uv_async_send
          ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
        (:line, 316, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :process_events
            )), false),
        (:line, 317, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :uv_async_send
          ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
        (:line, 318, :none),
        (:&&, (:call, :is_windows), (:call, (:., :Base, (:quote, #QuoteNode
                :process_events
              )), false)),
        (:line, 319, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 0)),
        (:line, 320, :none),
        (:call, :yield),
        (:line, 321, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1)),
        (:line, 322, :none),
        (:call, :sleep, 0.1),
        (:line, 323, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1)),
        (:line, 324, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :uv_async_send
          ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
        (:line, 325, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :uv_async_send
          ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
        (:line, 326, :none),
        (:call, :close, :async),
        (:line, 327, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :async))),
        (:line, 328, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1)),
        (:line, 329, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :process_events
            )), false),
        (:line, 330, :none),
        (:&&, (:call, :is_windows), (:call, (:., :Base, (:quote, #QuoteNode
                :process_events
              )), false)),
        (:line, 331, :none),
        (:call, :yield),
        (:line, 332, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 2)),
        (:line, 333, :none),
        (:call, :sleep, 0.1),
        (:line, 334, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 2))
      ), (:(=), :tc, (:call, :Ref, 0)), (:(=), :async, (:call, (:., :Base, (:quote, #QuoteNode
              :AsyncCondition
            )), (:->, (:tuple, :async), (:block,
              (:line, 312, :none),
              (:+=, (:ref, :tc), 1)
            ))))),
    (:line, 336, :none),
    (:let, (:block,
        (:line, 340, :none),
        (:macrocall, Symbol("@test"), (:call, :isopen, :async)),
        (:line, 341, :none),
        (:call, :ccall, (:quote, #QuoteNode
            :uv_async_send
          ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
        (:line, 342, :none),
        (:call, :close, :async),
        (:line, 343, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :async))),
        (:line, 344, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :process_events
            )), false),
        (:line, 345, :none),
        (:&&, (:call, :is_windows), (:call, (:., :Base, (:quote, #QuoteNode
                :process_events
              )), false)),
        (:line, 346, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 0)),
        (:line, 347, :none),
        (:call, :yield),
        (:line, 348, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1)),
        (:line, 349, :none),
        (:call, :sleep, 0.1),
        (:line, 350, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :tc), 1))
      ), (:(=), :tc, (:call, :Ref, 0)), (:(=), :async, (:call, (:., :Base, (:quote, #QuoteNode
              :AsyncCondition
            )), (:->, (:tuple, :async), (:block,
              (:line, 338, :none),
              (:+=, (:ref, :tc), 1)
            )))))
  ))