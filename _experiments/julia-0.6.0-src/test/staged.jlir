(:quote, (:block,
    (:line, 3, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :staged_t1, :a, :b), (:block,
          (:line, 4, :none),
          (:if, (:call, :(==), :a, :Int), (:block,
              (:line, 5, :none),
              (:return, (:quote, (:call, :+, :a, :b)))
            ), (:block,
              (:line, 7, :none),
              (:return, (:quote, (:call, :*, :a, :b)))
            ))
        ))),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :staged_t1, 1, 2), 3)),
    (:line, 12, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :staged_t1, 1.0, 0.5), 0.5)),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :staged_t1, 1, 0.5), 1.5)),
    (:line, 15, :none),
    (:(=), (:call, :tinline, :a, :b), (:block,
        (:line, 15, :none),
        (:call, :staged_t1, :a, :b)
      )),
    (:line, 17, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isa, (:call, :tinline, 1, 2), :Expr))),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :tinline, 1, 0.5), 1.5)),
    (:line, 20, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :splat, :a, (:..., :b)), (:block,
          (:line, 21, :none),
          (:quote, (:tuple, (:$, :a), (:$, :b), :a, :b))
        ))),
    (:line, 24, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :splat, 1, 2, 3), (:tuple, :Int, (:tuple, :Int, :Int), 1, (:tuple, 2, 3)))),
    (:line, 26, :none),
    (:(=), :stagediobuf, (:call, :IOBuffer)),
    (:line, 27, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :splat2, (:..., :a)), (:block,
          (:line, 28, :none),
          (:call, :print, :stagediobuf, :a),
          (:line, 29, :none),
          (:quote, #QuoteNode
            :nothing
          )
        ))),
    (:line, 32, :none),
    (:const, (:(=), :intstr, (:macrocall, Symbol("@sprintf"), "%s", :Int))),
    (:line, 33, :none),
    (:call, :splat2, 1),
    (:line, 34, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ",)"))),
    (:line, 35, :none),
    (:call, :splat2, 1, 3),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ", ", :intstr, ")"))),
    (:line, 37, :none),
    (:call, :splat2, 5, 2),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), "")),
    (:line, 39, :none),
    (:call, :splat2, (:(:), 1, 3), 5.2),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, Float64)"))),
    (:line, 41, :none),
    (:call, :splat2, 3, (:(:), 5, 2, 7)),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ", StepRange{", :intstr, ",", :intstr, "})"))),
    (:line, 43, :none),
    (:call, :splat2, 1, 2, 3, 4),
    (:line, 44, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ", ", :intstr, ", ", :intstr, ", ", :intstr, ")"))),
    (:line, 45, :none),
    (:call, :splat2, 1, 2, 3),
    (:line, 46, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ", ", :intstr, ", ", :intstr, ")"))),
    (:line, 47, :none),
    (:call, :splat2, (:(:), 1, 5), 3, (:(:), 3, 3)),
    (:line, 48, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, ", :intstr, ", UnitRange{", :intstr, "})"))),
    (:line, 49, :none),
    (:call, :splat2, (:(:), 1, 5), 3, (:(:), 3, 3)),
    (:line, 50, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), "")),
    (:line, 51, :none),
    (:call, :splat2, (:(:), 1, 5), (:(:), 3, 3), 3),
    (:line, 52, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, UnitRange{", :intstr, "}, ", :intstr, ")"))),
    (:line, 53, :none),
    (:call, :splat2, (:(:), 1, 5), (:(:), 3, 3)),
    (:line, 54, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, UnitRange{", :intstr, "})"))),
    (:line, 55, :none),
    (:call, :splat2, 3, (:(:), 3, 5)),
    (:line, 56, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(", :intstr, ", UnitRange{", :intstr, "})"))),
    (:line, 59, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :splat3, :T, :N), (:(::), :A, (:curly, :AbstractArray, :T, :N)), (:..., (:(::), :indx, :RangeIndex))), (:block,
          (:line, 60, :none),
          (:call, :print, :stagediobuf, :indx),
          (:line, 61, :none),
          (:quote, #QuoteNode
            :nothing
          )
        ))),
    (:line, 63, :none),
    (:(=), :A, (:call, :rand, 5, 5, 3)),
    (:line, 64, :none),
    (:call, :splat3, :A, (:(:), 1, 2), (:(:), 1, 2), 1),
    (:line, 65, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, UnitRange{", :intstr, "}, ", :intstr, ")"))),
    (:line, 66, :none),
    (:call, :splat3, :A, (:(:), 1, 2), 1, (:(:), 1, 2)),
    (:line, 67, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :stagediobuf)), (:string, "(UnitRange{", :intstr, "}, ", :intstr, ", UnitRange{", :intstr, "})"))),
    (:line, 69, :none),
    (:(=), :B, (:call, :view, :A, (:(:), 1, 3), 2, (:(:), 1, 3))),
    (:line, 70, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :mygetindex, (:(::), :S, :SubArray), (:..., (:(::), :indexes, :Real))), (:block,
          (:line, 71, :none),
          (:(=), (:tuple, :T, :N, :A, :I), (:., :S, (:quote, #QuoteNode
                :parameters
              ))),
          (:line, 72, :none),
          (:if, (:call, :(!=), :N, (:call, :length, :indexes)), (:block,
              (:line, 73, :none),
              (:call, :error, "Wrong number of indexes supplied")
            )),
          (:line, 75, :none),
          (:(=), :Ip, (:., :I, (:quote, #QuoteNode
                :parameters
              ))),
          (:line, 76, :none),
          (:(=), :NP, (:call, :length, :Ip)),
          (:line, 77, :none),
          (:(=), :indexexprs, (:call, (:curly, :Array, :Expr), :NP)),
          (:line, 78, :none),
          (:(=), :j, 1),
          (:line, 79, :none),
          (:for, (:(=), :i, (:(:), 1, :NP)), (:block,
              (:line, 80, :none),
              (:if, (:call, :(==), (:ref, :Ip, :i), :Int), (:block,
                  (:line, 81, :none),
                  (:(=), (:ref, :indexexprs, :i), (:quote, (:ref, (:., :S, (:quote, #QuoteNode
                            :indexes
                          )), (:$, :i))))
                ), (:block,
                  (:line, 83, :none),
                  (:(=), (:ref, :indexexprs, :i), (:quote, (:ref, (:ref, (:., :S, (:quote, #QuoteNode
                              :indexes
                            )), (:$, :i)), (:ref, :indexes, (:$, :j))))),
                  (:line, 84, :none),
                  (:+=, :j, 1)
                ))
            )),
          (:line, 87, :none),
          (:(=), :ex, (:quote, (:ref, (:., :S, (:quote, #QuoteNode
                    :parent
                  )), (:$, (:tuple, (:..., :indexexprs)))))),
          (:line, 88, :none),
          :ex
        ))),
    (:line, 90, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :mygetindex, :B, 2, 2), (:ref, :A, 2, 2, 2))),
    (:line, 93, :none),
    (:module, true, :MyTest8497, (:block,
        (:line, 93, :none),
        (:line, 94, :none),
        (:(=), (:call, :internalfunction, :x), (:block,
            (:line, 94, :none),
            (:call, :+, :x, 1)
          )),
        (:line, 95, :none),
        (:macrocall, Symbol("@generated"), (:function, (:call, :h, :x), (:block,
              (:line, 96, :none),
              (:quote, (:block,
                  (:line, 97, :none),
                  (:call, :internalfunction, :x)
                ))
            )))
      )),
    (:line, 101, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :MyTest8497, (:quote, #QuoteNode
              :h
            )), 3), 4)),
    (:line, 104, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :foo1, :N, :T), (:(::), :a, (:curly, :Array, :T, :N))), (:block,
          (:line, 105, :none),
          (:string, "N = ", :N, ", T = ", :T)
        ))),
    (:line, 107, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :foo2, :T, :N), (:(::), :a, (:curly, :Array, :T, :N))), (:block,
          (:line, 108, :none),
          (:string, "N = ", :N, ", T = ", :T)
        ))),
    (:line, 110, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :foo1, (:call, :randn, 3, 3)), "N = 2, T = Float64")),
    (:line, 111, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :foo2, (:call, :randn, 3, 3)), "N = 2, T = Float64")),
    (:line, 114, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :f9088, :x, (:kw, :a, 5)), (:block,
          (:line, 115, :none),
          (:quote, (:call, :+, :x, :a))
        ))),
    (:line, 117, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f9088, 7), 12)),
    (:line, 120, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :f10502, (:..., :x)), (:block,
          (:line, 121, :none),
          (:quote, (:$, :x))
        ))),
    (:line, 123, :none),
    (:(=), (:call, :f10502), (:block,
        (:line, 123, :none),
        (:tuple,)
      )),
    (:line, 124, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f10502, 1), (:tuple, :Int))),
    (:line, 125, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f10502, 1, 2), (:tuple, :Int, :Int))),
    (:line, 126, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f10502, 1, 2, 3), (:tuple, :Int, :Int, :Int))),
    (:line, 129, :none),
    (:macrocall, Symbol("@generated"), (:(=), (:call, :oneliner, :x, :y), (:block,
          (:line, 129, :none),
          (:quote, (:tuple, (:$, :x), :x, (:$, :y), :y))
        ))),
    (:line, 130, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :oneliner, 1, 2.0), (:tuple, :Int, 1, :Float64, 2.0))),
    (:line, 133, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :f11982, :T), (:block,
          (:line, 134, :none),
          (:call, :string, (:ref, (:., :T, (:quote, #QuoteNode
                  :parameters
                )), 1))
        ))),
    (:line, 136, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f11982, :Float32), "Float32")),
    (:line, 137, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f11982, :Int32), "Int32")),
    (:line, 140, :none),
    (:module, true, :TestGeneratedThrow, (:block,
        (:line, 140, :none),
        (:line, 141, :none),
        (:using, :Base, :Test),
        (:line, 143, :none),
        (:macrocall, Symbol("@generated"), (:function, (:call, :bar, :x), (:block,
              (:line, 144, :none),
              (:call, :error, (:string, "I'm not happy with type ", :x))
            ))),
        (:line, 147, :none),
        (:(=), (:call, :foo), (:block,
            (:line, 147, :none),
            (:block,
              (:call, :bar, (:if, (:call, :>, (:call, :rand), 0.5), 1, 1.0)),
              (:call, :error, "foo")
            )
          )),
        (:line, 148, :none),
        (:function, (:call, :__init__), (:block,
            (:line, 149, :none),
            (:call, :code_typed, (:parameters, (:kw, :optimize, false)), :foo, (:tuple,)),
            (:line, 150, :none),
            (:macrocall, Symbol("@test"), (:&&, (:call, (:., (:., :Core, (:quote, #QuoteNode
                        :Inference
                      )), (:quote, #QuoteNode
                      :isempty
                    )), (:., (:., :Core, (:quote, #QuoteNode
                        :Inference
                      )), (:quote, #QuoteNode
                      :active
                    ))), (:call, (:., (:., :Core, (:quote, #QuoteNode
                        :Inference
                      )), (:quote, #QuoteNode
                      :isempty
                    )), (:., (:., :Core, (:quote, #QuoteNode
                        :Inference
                      )), (:quote, #QuoteNode
                      :workq
                    ))))),
            (:line, 151, :none),
            (:call, :cfunction, :foo, :Void, (:tuple,))
          ))
      )),
    (:line, 156, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :_g_f_with_inner, :x), (:block,
          (:line, 157, :none),
          (:return, (:quote, (:->, :y, (:block,
                  (:line, 157, :none),
                  :y
                ))))
        ))),
    (:line, 159, :none),
    (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :_g_f_with_inner, 1)),
    (:line, 161, :none),
    (:macrocall, Symbol("@generated"), (:function, (:call, :_g_f_with_inner2, :x), (:block,
          (:line, 162, :none),
          (:return, (:->, :y, (:block,
                (:line, 162, :none),
                :y
              )))
        ))),
    (:line, 164, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:call, :_g_f_with_inner2, 1), 2), 2)),
    (:line, 167, :none),
    (:global, (:(=), :gf_err_ref, (:call, (:curly, :Ref, :Int)))),
    (:line, 169, :none),
    (:(=), (:ref, :gf_err_ref), 0),
    (:line, 170, :none),
    (:let, (:block,
        (:line, 171, :none),
        (:macrocall, Symbol("@generated"), (:function, (:call, :gf_err), (:block,
              (:line, 172, :none),
              (:+=, (:ref, :gf_err_ref), 1),
              (:line, 173, :none),
              (:call, :yield),
              (:line, 174, :none),
              (:+=, (:ref, :gf_err_ref), 1000)
            ))),
        (:line, 176, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :gf_err)),
        (:line, 177, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :gf_err)),
        (:line, 178, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :gf_err_ref), 4))
      ), :gf_err, (:(=), :tsk, (:macrocall, Symbol("@async"), :nothing))),
    (:line, 181, :none),
    (:(=), (:ref, :gf_err_ref), 0),
    (:line, 182, :none),
    (:let, (:block,
        (:line, 183, :none),
        (:macrocall, Symbol("@generated"), (:function, (:call, (:curly, :gf_err2, :f), (:(::), :f)), (:block,
              (:line, 184, :none),
              (:+=, (:ref, :gf_err_ref), 1),
              (:line, 185, :none),
              (:(=), :reflect, (:., :f, (:quote, #QuoteNode
                    :instance
                  ))),
              (:line, 186, :none),
              (:+=, (:ref, :gf_err_ref), 1),
              (:line, 187, :none),
              (:call, :reflect, :+, (:tuple, :Int, :Int)),
              (:line, 188, :none),
              (:+=, (:ref, :gf_err_ref), 1000),
              (:line, 189, :none),
              (:return, :nothing)
            ))),
        (:line, 191, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :gf_err2, :code_typed)),
        (:line, 192, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :gf_err2, :code_llvm)),
        (:line, 193, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :gf_err2, :code_native)),
        (:line, 194, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :gf_err_ref), 12)),
        (:line, 195, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :gf_err2, :code_lowered), :nothing))
      ), :gf_err2),
    (:line, 199, :none),
    (:(=), :decorated, (:call, (:curly, :Set, :DataType))),
    (:line, 200, :none),
    (:let, (:block,
        (:line, 201, :none),
        (:macrocall, Symbol("@generated"), (:function, (:call, :decorate, :t), (:block,
              (:line, 202, :none),
              (:call, :push!, :decorated, :t)
            ))),
        (:line, 205, :none),
        (:(=), (:call, :foo), (:block,
            (:line, 205, :none),
            (:return, :nothing)
          )),
        (:line, 206, :none),
        (:call, :decorate, :foo),
        (:line, 207, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:call, :typeof, :foo), :decorated)),
        (:line, 209, :none),
        (:(=), (:call, :bar), (:block,
            (:line, 209, :none),
            (:return, 1)
          )),
        (:line, 210, :none),
        (:call, :decorate, :bar),
        (:line, 211, :none),
        (:macrocall, Symbol("@test"), (:call, :in, (:call, :typeof, :bar), :decorated))
      )),
    (:line, 215, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :code_lowered, :staged_t1, (:tuple, :Int, :Int)), :Array)),
    (:line, 218, :none),
    (:macrocall, Symbol("@generated"), (:function, (:where, (:call, :f10178, (:(::), :x, :X)), :X), (:block,
          (:line, 219, :none),
          (:quote, #QuoteNode
            :x
          )
        ))),
    (:line, 221, :none),
    (:(=), (:call, :g10178, :x), (:block,
        (:line, 221, :none),
        (:call, :f10178, :x)
      )),
    (:line, 222, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :g10178, 5), 5)),
    (:line, 223, :none),
    (:macrocall, Symbol("@generated"), (:function, (:where, (:call, :f10178, (:(::), :x, :X)), :X), (:block,
          (:line, 224, :none),
          (:quote, (:call, :*, 2, :x))
        ))),
    (:line, 226, :none),
    (:(=), (:call, :g10178, :x), (:block,
        (:line, 226, :none),
        (:call, :f10178, :x)
      )),
    (:line, 227, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :g10178, 5), 10)),
    (:line, 230, :none),
    (:macrocall, Symbol("@generated"), (:(=), (:where, (:call, :f22135, (:(::), :x, :T)), :T), (:block,
          (:line, 230, :none),
          :x
        ))),
    (:line, 231, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :f22135, 1), :Int))
  ))