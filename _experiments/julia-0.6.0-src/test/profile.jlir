(:quote, (:block,
    (:line, 3, :none),
    (:function, (:call, :busywait, :t, :n_tries), (:block,
        (:line, 4, :none),
        (:(=), :iter, 0),
        (:line, 5, :none),
        (:while, (:&&, (:call, :<, :iter, :n_tries), (:call, :(==), (:call, (:., :Profile, (:quote, #QuoteNode
                    :len_data
                  ))), 0)), (:block,
            (:line, 6, :none),
            (:+=, :iter, 1),
            (:line, 7, :none),
            (:(=), :tend, (:call, :+, (:call, :time), :t)),
            (:line, 8, :none),
            (:while, (:call, :<, (:call, :time), :tend), (:block,
                (:line, 8, :none)
              ))
          ))
      )),
    (:line, 12, :none),
    (:call, (:., :Profile, (:quote, #QuoteNode
          :clear
        ))),
    (:line, 13, :none),
    (:macrocall, Symbol("@profile"), (:call, :busywait, 1, 20)),
    (:line, 15, :none),
    (:let, (:block,
        (:line, 16, :none),
        (:call, :mktemp, (:->, (:tuple, :path, :io), (:block,
              (:line, 17, :none),
              (:call, :serialize, :io, :r),
              (:line, 18, :none),
              (:call, :close, :io),
              (:line, 19, :none),
              (:call, :open, (:->, (:tuple, :io), (:block,
                    (:line, 20, :none),
                    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :deserialize, :io), (:curly, :Tuple, (:curly, :Vector, :UInt), (:curly, :Dict, :UInt64, (:curly, :Vector, :StackFrame)))))
                  )), :path)
            )))
      ), (:(=), :r, (:call, (:., :Profile, (:quote, #QuoteNode
              :retrieve
            ))))),
    (:line, 25, :none),
    (:let, (:block,
        (:line, 26, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :print
            )), :iobuf, (:kw, :format, (:quote, #QuoteNode
              :tree
            )), (:kw, :C, true)),
        (:line, 27, :none),
        (:(=), :str, (:call, :String, (:call, :take!, :iobuf))),
        (:line, 28, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :str))),
        (:line, 29, :none),
        (:call, :truncate, :iobuf, 0),
        (:line, 30, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :print
            )), :iobuf, (:kw, :format, (:quote, #QuoteNode
              :tree
            )), (:kw, :maxdepth, 2)),
        (:line, 31, :none),
        (:(=), :str, (:call, :String, (:call, :take!, :iobuf))),
        (:line, 32, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :str))),
        (:line, 33, :none),
        (:call, :truncate, :iobuf, 0),
        (:line, 34, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :print
            )), :iobuf, (:kw, :format, (:quote, #QuoteNode
              :flat
            )), (:kw, :C, true)),
        (:line, 35, :none),
        (:(=), :str, (:call, :String, (:call, :take!, :iobuf))),
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :str))),
        (:line, 37, :none),
        (:call, :truncate, :iobuf, 0),
        (:line, 38, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :print
            )), :iobuf),
        (:line, 39, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :String, (:call, :take!, :iobuf))))),
        (:line, 40, :none),
        (:call, :truncate, :iobuf, 0),
        (:line, 41, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :print
            )), :iobuf, (:kw, :format, (:quote, #QuoteNode
              :flat
            )), (:kw, :sortedby, (:quote, #QuoteNode
              :count
            ))),
        (:line, 42, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :String, (:call, :take!, :iobuf))))),
        (:line, 43, :none),
        (:call, (:., :Profile, (:quote, #QuoteNode
              :clear
            ))),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, (:., :Profile, (:quote, #QuoteNode
                  :fetch
                )))))
      ), (:(=), :iobuf, (:call, :IOBuffer)))
  ))