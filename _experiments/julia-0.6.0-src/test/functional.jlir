(:quote, (:block,
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, (:->, :x, (:block,
              (:line, 6, :none),
              (:ref, (:string, :x), (:(:), :end, :end))
            )), (:(:), 9, 11)), (:vect, "9", "0", "1"))),
    (:line, 8, :none),
    (:let, (:block,
        (:line, 9, :none),
        (:call, :map!, :sin, :a, :a),
        (:line, 10, :none),
        (:macrocall, Symbol("@test"), (:call, :isequal, :a, (:., :sin, (:tuple, (:vect, 1.0, 2.0)))))
      ), (:(=), :a, (:vect, 1.0, 2.0))),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, :sqrt, (:(:), 1, 5)), (:comprehension, (:generator, (:call, :sqrt, :i), (:(=), :i, (:(:), 1, 5)))))),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :map, :sqrt, (:(:), 2, 6)), (:comprehension, (:generator, (:call, :sqrt, :i), (:(=), :i, (:(:), 2, 6)))))),
    (:line, 17, :none),
    (:let, (:block,
        (:line, 18, :none),
        (:call, :map, (:->, :x, (:block,
              (:line, 18, :none),
              (:call, :print, :io, :x)
            )), (:(:), 1, 2)),
        (:line, 19, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io)), "12"))
      ), (:(=), :io, (:call, :IOBuffer, 3))),
    (:line, 24, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :typeof, (:call, :map, (:->, :x, (:block,
                (:line, 24, :none),
                :x
              )), (:call, (:curly, :Array, (:curly, :Union)), 0))), (:curly, :Array, (:curly, :Union), 1))),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, (:tuple, :x, :y), (:block,
              (:line, 27, :none),
              (:call, :+, :x, :y)
            )), (:tuple, 1, 2, 3), (:tuple, 4, 5, 6)), (:tuple, 5, 7, 9))),
    (:line, 28, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, (:tuple, :x, :y), (:block,
              (:line, 28, :none),
              (:call, :+, :x, :y)
            )), (:tuple, 100001, 100002, 100003), (:tuple, 100004, 100005, 100006)), (:tuple, 200005, 200007, 200009))),
    (:line, 33, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :map, (:->, :c, (:block,
              (:line, 33, :none),
              (:call, :Char, (:call, :+, :c, 1))
            )), "abcDEF"), "bcdEFG")),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :map, :Integer, (:ref, :Any, 1, 2)), (:curly, :Vector, :Int))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :map, :Integer, (:ref, :Any)), (:curly, :Vector, :Integer))),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :x, (:block,
              (:line, 40, :none),
              (:call, :>, :x, 1)
            )), (:hcat, 0, 1, 2, 3, 2, 1, 0)), (:vect, 2, 3, 2))),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :x, (:block,
              (:line, 42, :none),
              (:call, :>, :x, 10)
            )), (:hcat, 0, 1, 2, 3, 2, 1, 0)), (:vect,))),
    (:line, 43, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, (:->, :ss, (:block,
              (:line, 43, :none),
              (:call, :(==), (:call, :length, :ss), 3)
            )), (:vect, "abcd", "efg", "hij", "klmn", "opq")), (:vect, "efg", "hij", "opq"))),
    (:line, 46, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :collect, 1)), (:call, :size, 1))),
    (:line, 48, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :collect, :Any, (:vect, 1, 2)), (:curly, :Vector, :Any))),
    (:line, 51, :none),
    (:let, (:block,
        (:line, 52, :none),
        (:call, :foreach, (:->, (:tuple,), (:block,
              (:line, 52, :none),
              (:call, :push!, :a, 0)
            ))),
        (:line, 53, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, 0))),
        (:line, 54, :none),
        (:(=), :a, (:vect,)),
        (:line, 55, :none),
        (:call, :foreach, (:->, :x, (:block,
              (:line, 55, :none),
              (:call, :push!, :a, :x)
            )), (:vect, 1, 5, 10)),
        (:line, 56, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, 1, 5, 10))),
        (:line, 57, :none),
        (:(=), :a, (:vect,)),
        (:line, 58, :none),
        (:call, :foreach, (:->, (:tuple, (:..., :args)), (:block,
              (:line, 58, :none),
              (:call, :push!, :a, :args)
            )), (:vect, 2, 4, 6), (:vect, 10, 20, 30)),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :a, (:vect, (:tuple, 2, 10), (:tuple, 4, 20), (:tuple, 6, 30))))
      ), (:(=), :a, (:vect,))),
    (:line, 63, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sum, (:generator, (:call, :/, :i, 2), (:(=), :i, (:(:), 1, 2)))), 1.5)),
    (:line, 64, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :*, 2, :i), (:(=), :i, (:(:), 2, 5)))), (:vect, 4, 6, 8, 10))),
    (:line, 65, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :+, :i, (:call, :*, 10, :j)), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)))), (:vcat, (:row, 31, 41), (:row, 32, 42)))),
    (:line, 66, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:generator, (:call, :+, :i, (:call, :*, 10, :j)), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 4)), (:(=), :k, (:(:), 1, 1)))), (:call, :reshape, (:vcat, (:row, 31, 41), (:row, 32, 42)), (:tuple, 2, 2, 1)))),
    (:line, 68, :none),
    (:let, (:block,
        (:line, 69, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :A, (:vect, 3, 5))),
        (:line, 70, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :A, (:curly, :Vector, :Float64)))
      ), (:(=), :A, (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :Generator
              )), (:->, :x, (:block,
                (:line, 68, :none),
                (:call, :*, 2, :x)
              )), (:ref, :Real, 1.5, 2.5))))),
    (:line, 73, :none),
    (:let, (:block,
        (:line, 74, :none),
        (:call, :f, (:generator, (:call, :+, :i, :j), (:(=), :i, (:(:), 1, 2)), (:(=), :j, (:(:), 3, 5))))
      ), (:(=), (:call, :f, :g), (:block,
          (:line, 73, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:., :g, (:quote, #QuoteNode
                    :iter
                  ))), (:tuple, 2, 3)))
        ))),
    (:line, 77, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, (:call, (:., :Base, (:quote, #QuoteNode
                :Generator
              )), :+, (:vect, 1, 2), (:vect, 10, 20))), (:vect, 11, 22))),
    (:line, 80, :none),
    (:let, (:block,
        (:line, 87, :none),
        (:for, (:(=), (:tuple, :gen, :dim), :gens_dims), (:block,
            (:line, 88, :none),
            (:macrocall, Symbol("@test"), (:comparison, (:call, :ndims, :gen), :(==), (:call, :ndims, (:call, :collect, :gen)), :(==), :dim))
          ))
      ), (:(=), :gens_dims, (:vect, (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5))), 1), (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5)), (:(=), :j, (:(:), 1, 5))), 2), (:tuple, (:generator, :i, (:(=), :i, (:(:), 1, 5)), (:(=), :j, (:(:), 1, 5)), (:(=), :k, (:(:), 1, 5))), 3), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int)))), 0), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1))), 1), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1, 2))), 2), (:tuple, (:generator, :i, (:(=), :i, (:call, (:curly, :Array, :Int), 1, 2, 3))), 3)))),
    (:line, 93, :none),
    (:let, (:block,
        (:line, 94, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Dict, (:generator, (:call, :(=>), :v, (:tuple, :k)), (:(=), (:tuple, :k, :v), :d))), (:call, :Dict, (:call, :(=>), 2, (:tuple, (:quote, #QuoteNode
                    :b
                  ))), (:call, :(=>), 1, (:tuple, (:quote, #QuoteNode
                    :a
                  )))))),
        (:line, 95, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Dict, (:generator, (:call, :(=>), (:tuple, :x, :b), (:tuple, :c, :y)), (:(=), (:tuple, :x, :c), :d), (:(=), (:tuple, :b, :y), :a))), (:call, :Dict, (:call, :(=>), (:tuple, (:quote, #QuoteNode
                    :a
                  ), 5), (:tuple, 1, 6)), (:call, :(=>), (:tuple, (:quote, #QuoteNode
                    :b
                  ), 5), (:tuple, 2, 6)), (:call, :(=>), (:tuple, (:quote, #QuoteNode
                    :a
                  ), 3), (:tuple, 1, 4)), (:call, :(=>), (:tuple, (:quote, #QuoteNode
                    :b
                  ), 3), (:tuple, 2, 4)))))
      ), (:(=), :d, (:call, :Dict, (:call, :(=>), (:quote, #QuoteNode
              :a
            ), 1), (:call, :(=>), (:quote, #QuoteNode
              :b
            ), 2))), (:(=), :a, (:call, :Dict, (:call, :(=>), 3, 4), (:call, :(=>), 5, 6)))),
    (:line, 98, :none),
    (:let, (:block,
        (:line, 99, :none),
        (:local, (:(=), :g, (:generator, (:call, :+, :i, :j), (:(=), :i, (:(:), 2, 2)), (:(=), :j, (:(:), 3, 3))))),
        (:line, 100, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :g), 5)),
        (:line, 101, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i, 1))
      ), (:(=), :i, 1)),
    (:line, 105, :none),
    (:let, (:block,
        (:line, 106, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :gen, (:quote, #QuoteNode
                :iter
              )), (:(:), 1, 10))),
        (:line, 107, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :gen, (:quote, #QuoteNode
                  :f
                )), (:call, :first, (:(:), 1, 10))), (:ref, (:call, :next, :gen, (:call, :start, :gen)), 1))),
        (:line, 108, :none),
        (:for, (:(=), (:tuple, :a, :b), (:call, :zip, (:(:), 1, 10), :gen)), (:block,
            (:line, 109, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), :a, :b))
          ))
      ), (:(=), :gen, (:generator, :x, (:(=), :x, (:(:), 1, 10))))),
    (:line, 113, :none),
    (:let, (:block,
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :.*, (:call, :collect, (:(:), 1, 10)), (:', (:call, :collect, (:(:), 1, 10)))))),
        (:line, 115, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :gen), 1)),
        (:line, 116, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :collect, :gen), (:(:), 1, 10)), (:call, :collect, (:(:), 1, 10))))
      ), (:(=), :gen, (:generator, (:call, :*, :x, :y), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10))))),
    (:line, 119, :none),
    (:let, (:block,
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, :gen), 3)),
        (:line, 121, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, (:(:), 3, 3, 30))))
      ), (:(=), :gen, (:call, (:., :Base, (:quote, #QuoteNode
              :Generator
            )), :+, (:(:), 1, 10), (:(:), 1, 10), (:(:), 1, 10)))),
    (:line, 124, :none),
    (:let, (:block,
        (:line, 125, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, :gen2))),
        (:line, 126, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, (:(:), 2, 2, 10))))
      ), (:(=), :gen, (:generator, :x, (:filter, (:call, :(==), (:call, :%, :x, 2), 0), (:(=), :x, (:(:), 1, 10))))), (:(=), :gen2, (:call, (:., :Iterators, (:quote, #QuoteNode
              :filter
            )), (:->, :x, (:block,
              (:line, 124, :none),
              (:call, :(==), (:call, :%, :x, 2), 0)
            )), (:generator, :x, (:(=), :x, (:(:), 1, 10)))))),
    (:line, 129, :none),
    (:let, (:block,
        (:line, 131, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :collect, :gen), (:call, :collect, :gen2)))
      ), (:(=), :gen, (:generator, (:tuple, :x, :y), (:filter, (:&&, (:call, :(==), (:call, :%, :x, 2), 0), (:call, :(==), (:call, :%, :y, 2), 0)), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10))))), (:(=), :gen2, (:call, (:., :Iterators, (:quote, #QuoteNode
              :filter
            )), (:->, :x, (:block,
              (:line, 130, :none),
              (:&&, (:call, :(==), (:call, :%, (:ref, :x, 1), 2), 0), (:call, :(==), (:call, :%, (:ref, :x, 2), 2), 0))
            )), (:generator, (:tuple, :x, :y), (:(=), :x, (:(:), 1, 10)), (:(=), :y, (:(:), 1, 10)))))),
    (:line, 135, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:generator, (:tuple, :i, :j), (:(=), :j, (:(:), 1, :i))), (:(=), :i, (:(:), 1, 3))))), (:vect, (:tuple, 1, 1), (:tuple, 2, 1), (:tuple, 2, 2), (:tuple, 3, 1), (:tuple, 3, 2), (:tuple, 3, 3)))),
    (:line, 137, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:generator, (:tuple, :i, :j), (:filter, (:call, :>, :j, 1), (:(=), :j, (:(:), 1, :i)))), (:(=), :i, (:(:), 1, 3))))), (:vect, (:tuple, 2, 2), (:tuple, 3, 2), (:tuple, 3, 3)))),
    (:line, 140, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:comprehension, (:flatten, (:generator, (:flatten, (:generator, (:flatten, (:generator, (:generator, (:tuple, :q, :d, :n, :p), (:filter, (:comparison, :p, :<, :n, :<, :d, :<, :q), (:(=), :p, (:call, :-, (:call, :-, (:call, :-, 100, :q), :d), :n)))), (:(=), :n, (:(:), 0, 5, (:call, :-, (:call, :-, 100, :q), :d))))), (:(=), :d, (:(:), 0, 10, (:call, :-, 100, :q))))), (:(=), :q, (:(:), 0, 25, 100))))), (:vect, (:tuple, 50, 30, 15, 5), (:tuple, 50, 30, 20, 0), (:tuple, 50, 40, 10, 0), (:tuple, 75, 20, 5, 0))))
  ))