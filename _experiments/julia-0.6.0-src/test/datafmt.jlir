(:quote, (:block,
    (:line, 4, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, (:call, :IOBuffer, "\n")), 1)),
    (:line, 5, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, (:call, :IOBuffer, "\n"), '\r'), 0)),
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, (:call, :IOBuffer, "\n\n\n\n\n\n\n\n\n\n")), 10)),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, (:call, :IOBuffer, "\n \n \n \n \n \n \n \n \n \n")), 10)),
    (:line, 8, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, (:call, :IOBuffer, "\r\n \r\n \r\n \r\n \r\n")), 5)),
    (:line, 9, :none),
    (:(=), :file, (:call, :tempname)),
    (:line, 10, :none),
    (:call, :write, :file, "Spiffy header\nspectacular first row\neven better 2nd row\nalmost done\n"),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, :file), 4)),
    (:line, 12, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, :file, '\r'), 0)),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :countlines, :file, '\n'), 4)),
    (:line, 14, :none),
    (:call, :rm, :file),
    (:line, 16, :none),
    (:(=), (:call, :isequaldlm, :m1, :m2, :t), (:block,
        (:line, 16, :none),
        (:&&, (:call, :isequal, :m1, :m2), (:comparison, (:call, :eltype, :m1), :(==), (:call, :eltype, :m2), :(==), :t))
      )),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1\t2\n3\t4\n5\t6\n")), (:vcat, (:row, 1.0, 2), (:row, 3, 4), (:row, 5, 6)), :Float64)),
    (:line, 19, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1\t2\n3\t4\n5\t6\n"), :Int), (:vcat, (:row, 1, 2), (:row, 3, 4), (:row, 5, 6)), :Int)),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4"))), (:tuple, 1, 4))),
    (:line, 22, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,"))), (:tuple, 1, 4))),
    (:line, 23, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\n"))), (:tuple, 1, 4))),
    (:line, 24, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,\n"))), (:tuple, 1, 4))),
    (:line, 25, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\n1,2,3,4"))), (:tuple, 2, 4))),
    (:line, 26, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\n1,2,3,"))), (:tuple, 2, 4))),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\n1,2,3"))), (:tuple, 2, 4))),
    (:line, 29, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\r\n"))), (:tuple, 1, 4))),
    (:line, 30, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\r\n1,2,3\r\n"))), (:tuple, 2, 4))),
    (:line, 31, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,4\r\n1,2,3,4\r\n"))), (:tuple, 2, 4))),
    (:line, 32, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readcsv, (:call, :IOBuffer, "1,2,3,\"4\"\r\n1,2,3,4\r\n"))), (:tuple, 2, 4))),
    (:line, 34, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readdlm, (:call, :IOBuffer, "1 2 3 4\n1 2 3"))), (:tuple, 2, 4))),
    (:line, 35, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readdlm, (:call, :IOBuffer, "1\t2 3 4\n1 2 3"))), (:tuple, 2, 4))),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readdlm, (:call, :IOBuffer, "1\t 2 3 4\n1 2 3"))), (:tuple, 2, 4))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readdlm, (:call, :IOBuffer, "1\t 2 3 4\n1 2 3\n"))), (:tuple, 2, 4))),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :size, (:call, :readdlm, (:call, :IOBuffer, "1,,2,3,4\n1,2,3\n"), ',')), (:tuple, 2, 5))),
    (:line, 40, :none),
    (:let, (:block,
        (:line, 43, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, ",,,1,,,,2,3,,,4,\n,,,1,,,1\n"), ','), :result1, :Any)),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "   1    2 3   4 \n   1   1\n")), :result2, :Any)),
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "   1    2 3   4 \n   1   1\n"), ' '), :result1, :Any)),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1 2\n3 4 \n")), (:hcat, (:vect, 1.0, 3.0), (:vect, 2.0, 4.0)), :Float64))
      ), (:(=), :result1, (:call, :reshape, (:ref, :Any, "", "", "", "", "", "", 1.0, 1.0, "", "", "", "", "", 1.0, 2.0, "", 3.0, "", "", "", "", "", 4.0, "", "", ""), 2, 13)), (:(=), :result2, (:call, :reshape, (:ref, :Any, 1.0, 1.0, 2.0, 1.0, 3.0, "", 4.0, ""), 2, 4))),
    (:line, 49, :none),
    (:let, (:block,
        (:line, 50, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, ",,,भारत,,,,2,3,,,4,\n,,,1,,,1\n"), ','), :result1, :Any))
      ), (:(=), :result1, (:call, :reshape, (:ref, :Any, "", "", "", "", "", "", "भारत", 1.0, "", "", "", "", "", 1.0, 2.0, "", 3.0, "", "", "", "", "", 4.0, "", "", ""), 2, 13))),
    (:line, 53, :none),
    (:let, (:block,
        (:line, 54, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1\t 2 3 4\n1 2 3")), :result1, :Any)),
        (:line, 55, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1\t 2 3 4\n1 2 3 ")), :result1, :Any)),
        (:line, 56, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1\t 2 3 4\n1 2 3\n")), :result1, :Any)),
        (:line, 57, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1,2,3,4\n1,2,3\n"), ','), :result1, :Any)),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1,2,3,4\n1,2,3"), ','), :result1, :Any)),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1,2,3,4\r\n1,2,3\r\n"), ','), :result1, :Any)),
        (:line, 60, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "1,2,3,\"4\"\r\n1,2,3\r\n"), ','), :result1, :Any))
      ), (:(=), :result1, (:call, :reshape, (:ref, :Any, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, ""), 2, 4))),
    (:line, 63, :none),
    (:let, (:block,
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "abc,\"def,ghi\",\"new\nline\"\n\"hello\",\" \"\"quote\"\" \",world"), ','), :result1, :Any)),
        (:line, 67, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "abc,\"def,ghi\",\"new\nline\"\n\"hello\",\" \"\"quote\"\" \",world"), ',', (:kw, :quotes, false)), :result2, :Any))
      ), (:(=), :result1, (:call, :reshape, (:ref, :Any, "abc", "hello", "def,ghi", " \"quote\" ", "new\nline", "world"), 2, 3)), (:(=), :result2, (:call, :reshape, (:ref, :Any, "abc", "line\"", "\"hello\"", "\"def", "", "\" \"\"quote\"\" \"", "ghi\"", "", "world", "\"new", "", ""), 3, 4))),
    (:line, 70, :none),
    (:let, (:block,
        (:line, 72, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "t  \n\"c\" c")), :result1, :Any)),
        (:line, 73, :none),
        (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "t t \n\"\"\"c\" c")), :result2, :Any))
      ), (:(=), :result1, (:call, :reshape, (:ref, :Any, "t", "c", "", "c"), 2, 2)), (:(=), :result2, (:call, :reshape, (:ref, :Any, "t", "\"c", "t", "c"), 2, 2))),
    (:line, 76, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "\n1,2,3\n4,5,6\n\n\n"), (:kw, :skipblanks, false)), (:call, :reshape, (:ref, :Any, "", 1.0, 4.0, "", "", "", 2.0, 5.0, "", "", "", 3.0, 6.0, "", ""), 5, 3), :Any)),
    (:line, 78, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "\n1,2,3\n4,5,6\n\n\n"), (:kw, :skipblanks, true)), (:call, :reshape, (:vect, 1.0, 4.0, 2.0, 5.0, 3.0, 6.0), 2, 3), :Float64)),
    (:line, 79, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,2\n\n4,5"), (:kw, :skipblanks, false)), (:call, :reshape, (:ref, :Any, 1.0, "", 4.0, 2.0, "", 5.0), 3, 2), :Any)),
    (:line, 80, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,2\n\n4,5"), (:kw, :skipblanks, true)), (:call, :reshape, (:vect, 1.0, 4.0, 2.0, 5.0), 2, 2), :Float64)),
    (:line, 82, :none),
    (:let, (:block,
        (:line, 83, :none),
        (:call, :writedlm, :io, :x),
        (:line, 84, :none),
        (:call, :seek, :io, 0),
        (:line, 85, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readdlm, :io, :Bool), :x))
      ), (:(=), :x, (:call, :bitrand, 5, 10)), (:(=), :io, (:call, :IOBuffer))),
    (:line, 88, :none),
    (:let, (:block,
        (:line, 89, :none),
        (:call, :writedlm, :io, (:call, :zip, :x, :y), ",  "),
        (:line, 90, :none),
        (:call, :seek, :io, 0),
        (:line, 91, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, :io), (:hcat, :x, :y)))
      ), (:(=), :x, (:vect, 1, 2, 3)), (:(=), :y, (:vect, 4, 5, 6)), (:(=), :io, (:call, :IOBuffer))),
    (:line, 94, :none),
    (:let, (:block,
        (:line, 95, :none),
        (:call, :writedlm, :io, :x, ", "),
        (:line, 96, :none),
        (:call, :seek, :io, 0),
        (:line, 97, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readstring, :io), "0.1, 0.3, 0.5\n"))
      ), (:(=), :x, (:hcat, 0.1, 0.3, 0.5)), (:(=), :io, (:call, :IOBuffer))),
    (:line, 100, :none),
    (:let, (:block,
        (:line, 101, :none),
        (:call, :writedlm, :io, :x, ", "),
        (:line, 102, :none),
        (:call, :seek, :io, 0),
        (:line, 103, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, :io), (:hcat, 0.1, 0.3, 0.5)))
      ), (:(=), :x, (:hcat, 0.1, 0.3, 0.5)), (:(=), :io, (:call, :IOBuffer))),
    (:line, 106, :none),
    (:let, (:block,
        (:line, 107, :none),
        (:call, :writedlm, :io, (:call, :zip, :x, :y), ','),
        (:line, 108, :none),
        (:call, :seek, :io, 0),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, :io), (:hcat, :x, :y)))
      ), (:(=), :x, (:vect, "abc", "def\"ghi", "jk\nl")), (:(=), :y, (:vect, 1, ",", "\"quoted\"")), (:(=), :io, (:call, :IOBuffer))),
    (:line, 112, :none),
    (:let, (:block,
        (:line, 113, :none),
        (:call, :writedlm, :io, :x),
        (:line, 114, :none),
        (:call, :seek, :io, 0),
        (:line, 115, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readdlm, :io), :x))
      ), (:(=), :x, (:vcat, (:row, "a", "b"), (:row, "d", ""))), (:(=), :io, (:call, :IOBuffer))),
    (:line, 118, :none),
    (:let, (:block,
        (:line, 119, :none),
        (:call, :writedlm, :io, :x, (:kw, :quotes, false)),
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io)), "\"hello\"\nworld\"\n")),
        (:line, 122, :none),
        (:call, :writedlm, :io, :x),
        (:line, 123, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io)), "\"\"\"hello\"\"\"\n\"world\"\"\"\n"))
      ), (:(=), :x, (:vect, "\"hello\"", "world\"")), (:(=), :io, (:call, :IOBuffer))),
    (:line, 127, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "#this is comment\n1,2,3\n#one more comment\n4,5,6")), (:vcat, (:row, 1.0, 2.0, 3.0), (:row, 4.0, 5.0, 6.0)), :Float64)),
    (:line, 128, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "#this is \n#comment\n1,2,3\n#one more \n#comment\n4,5,6")), (:vcat, (:row, 1.0, 2.0, 3.0), (:row, 4.0, 5.0, 6.0)), :Float64)),
    (:line, 129, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,2,#3\n4,5,6")), (:vcat, (:row, 1.0, 2.0, ""), (:row, 4.0, 5.0, 6.0)), :Any)),
    (:line, 130, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1#,2,3\n4,5,6")), (:vcat, (:row, 1.0, "", ""), (:row, 4.0, 5.0, 6.0)), :Any)),
    (:line, 131, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,2,\"#3\"\n4,5,6")), (:vcat, (:row, 1.0, 2.0, "#3"), (:row, 4.0, 5.0, 6.0)), :Any)),
    (:line, 132, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,2,3\n #with leading whitespace\n4,5,6")), (:vcat, (:row, 1.0, 2.0, 3.0), (:row, " ", "", ""), (:row, 4.0, 5.0, 6.0)), :Any)),
    (:line, 135, :none),
    (:let, (:block,
        (:line, 136, :none),
        (:call, :writedlm, :io, :x, (:kw, :quotes, false)),
        (:line, 137, :none),
        (:call, :seek, :io, 0),
        (:line, 138, :none),
        (:(=), (:tuple, :data, :hdr), (:call, :readdlm, :io, (:kw, :header, true), (:kw, :skipstart, 3))),
        (:line, 139, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :data, (:vcat, (:row, 1, 2, 3), (:row, 4, 5, 6), (:row, 7, 8, 9)))),
        (:line, 140, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :hdr, (:hcat, "A", "B", "C")))
      ), (:(=), :x, (:vcat, (:row, "a", "b", "c"), (:row, "d", "e", "f"), (:row, "g", "h", "i"), (:row, "A", "B", "C"), (:row, 1, 2, 3), (:row, 4, 5, 6), (:row, 7, 8, 9))), (:(=), :io, (:call, :IOBuffer))),
    (:line, 142, :none),
    (:let, (:block,
        (:line, 143, :none),
        (:(=), :io, (:call, :IOBuffer)),
        (:line, 144, :none),
        (:call, :writedlm, :io, :x, (:kw, :quotes, true)),
        (:line, 145, :none),
        (:call, :seek, :io, 0),
        (:line, 146, :none),
        (:(=), (:tuple, :data, :hdr), (:call, :readdlm, :io, (:kw, :header, true), (:kw, :skipstart, 6))),
        (:line, 147, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :data, (:vcat, (:row, 1, 2, 3), (:row, 4, 5, 6), (:row, 7, 8, 9)))),
        (:line, 148, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :hdr, (:hcat, "A", "B", "C"))),
        (:line, 150, :none),
        (:(=), :io, (:call, :IOBuffer)),
        (:line, 151, :none),
        (:call, :writedlm, :io, :x, (:kw, :quotes, false)),
        (:line, 152, :none),
        (:call, :seek, :io, 0),
        (:line, 153, :none),
        (:(=), (:tuple, :data, :hdr), (:call, :readdlm, :io, (:kw, :header, true), (:kw, :skipstart, 6))),
        (:line, 154, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :data, (:vcat, (:row, 1, 2, 3), (:row, 4, 5, 6), (:row, 7, 8, 9)))),
        (:line, 155, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :hdr, (:hcat, "A", "B", "C")))
      ), (:(=), :x, (:vcat, (:row, "a", "b", "\nc"), (:row, "d", "\ne", "f"), (:row, "g", "h", "i\n"), (:row, "A", "B", "C"), (:row, 1, 2, 3), (:row, 4, 5, 6), (:row, 7, 8, 9)))),
    (:line, 159, :none),
    (:let, (:block,
        (:line, 213, :none),
        (:(=), :i18n_arr, (:call, :permutedims, (:call, :reshape, :i18n_data, 4, (:call, :Int, (:call, :floor, (:call, :/, (:call, :length, :i18n_data), 4)))), (:vect, 2, 1))),
        (:line, 214, :none),
        (:(=), :i18n_buff, (:call, :PipeBuffer)),
        (:line, 215, :none),
        (:call, :writedlm, :i18n_buff, :i18n_arr, ','),
        (:line, 216, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :i18n_arr, (:call, :readcsv, :i18n_buff))),
        (:line, 218, :none),
        (:(=), :hdr, (:ref, :i18n_arr, (:(:), 1, 1), :(:))),
        (:line, 219, :none),
        (:(=), :data, (:ref, :i18n_arr, (:(:), 2, :end), :(:))),
        (:line, 220, :none),
        (:call, :writedlm, :i18n_buff, :i18n_arr, ','),
        (:line, 221, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:tuple, :data, :hdr), (:call, :readcsv, :i18n_buff, (:kw, :header, true)))),
        (:line, 223, :none),
        (:call, :writedlm, :i18n_buff, :i18n_arr, '\t'),
        (:line, 224, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:tuple, :data, :hdr), (:call, :readdlm, :i18n_buff, '\t', (:kw, :header, true))))
      ), (:(=), :i18n_data, (:vect, "Origin (English)", "Name (English)", "Origin (Native)", "Name (Native)", "Australia", "Nicole Kidman", "Australia", "Nicole Kidman", "Austria", "Johann Strauss", "Österreich", "Johann Strauß", "Belgium (Flemish)", "Rene Magritte", "België", "René Magritte", "Belgium (French)", "Rene Magritte", "Belgique", "René Magritte", "Belgium (German)", "Rene Magritte", "Belgien", "René Magritte", "Bhutan", "Gonpo Dorji", "འབྲུག་ཡུལ།", "མགོན་པོ་རྡོ་རྗེ།", "Canada", "Celine Dion", "Canada", "Céline Dion", "Canada - Nunavut (Inuktitut)", "Susan Aglukark", "ᓄᓇᕗᒻᒥᐅᑦ", "ᓱᓴᓐ ᐊᒡᓗᒃᑲᖅ", "Democratic People's Rep. of Korea", "LEE Sol-Hee", "조선 민주주의 인민 공화국", "이설희", "Denmark", "Soren Hauch-Fausboll", "Danmark", "Søren Hauch-Fausbøll", "Denmark", "Soren Kierkegaard", "Danmark", "Søren Kierkegård", "Egypt", "Abdel Halim Hafez", "ﻣﺼﺮ", "ﻋﺑﺪﺍﻠﺣﻟﻳﻢ ﺤﺎﻓﻅ", "Egypt", "Om Kolthoum", "ﻣﺼﺮ", "ﺃﻡ ﻛﻟﺛﻭﻡ", "Eritrea", "Berhane Zeray", "ብርሃነ ዘርኣይ", "ኤርትራ", "Ethiopia", "Haile Gebreselassie", "ኃይሌ ገብረሥላሴ", "ኢትዮጵያ", "France", "Gerard Depardieu", "France", "Gérard Depardieu", "France", "Jean Reno", "France", "Jean Réno", "France", "Camille Saint-Saens", "France", "Camille Saint-Saëns", "France", "Mylene Demongeot", "France", "Mylène Demongeot", "France", "Francois Truffaut", "France", "François Truffaut", "France (Braille)", "Louis Braille", "⠋⠗⠁⠝⠉⠑", "⠇⠕⠥⠊⠎⠀<BR>⠃⠗⠁⠊⠇⠇⠑", "Georgia", "Eduard Shevardnadze", "საქართველო", "ედუარდ შევარდნაძე", "Germany", "Rudi Voeller", "Deutschland", "Rudi Völler", "Germany", "Walter Schultheiss", "Deutschland", "Walter Schultheiß", "Greece", "Giorgos Dalaras", "Ελλάς", "Γιώργος Νταλάρας", "Iceland", "Bjork Gudmundsdottir", "Ísland", "Björk Guðmundsdóttir", "India (Hindi)", "Madhuri Dixit", "भारत", "माधुरी दिछित", "Ireland", "Sinead O'Connor", "Éire", "Sinéad O'Connor", "Israel", "Yehoram Gaon", "ישראל", "יהורם גאון", "Italy", "Fabrizio DeAndre", "Italia", "Fabrizio De André", "Japan", "KUBOTA Toshinobu", "日本", "久保田    利伸", "Japan", "HAYASHIBARA Megumi", "日本", "林原 めぐみ", "Japan", "Mori Ogai", "日本", "森鷗外", "Japan", "Tex Texin", "日本", "テクス テクサン", "Norway", "Tor Age Bringsvaerd", "Noreg", "Tor Åge Bringsværd", "Pakistan (Urdu)", "Nusrat Fatah Ali Khan", "پاکستان", "نصرت فتح علی خان", "People's Rep. of China", "ZHANG Ziyi", "中国", "章子怡", "People's Rep. of China", "WONG Faye", "中国", "王菲", "Poland", "Lech Walesa", "Polska", "Lech Wałęsa", "Puerto Rico", "Olga Tanon", "Puerto Rico", "Olga Tañón", "Rep. of China", "Hsu Chi", "臺灣", "舒淇", "Rep. of China", "Ang Lee", "臺灣", "李安", "Rep. of Korea", "AHN Sung-Gi", "한민국", "안성기", "Rep. of Korea", "SHIM Eun-Ha", "한민국", "심은하", "Russia", "Mikhail Gorbachev", "Россия", "Михаил Горбачёв", "Russia", "Boris Grebenshchikov", "Россия", "Борис Гребенщиков", "Slovenia", "\"Frane \"\"Jezek\"\" Milcinski", "Slovenija", "Frane Milčinski - Ježek", "Syracuse (Sicily)", "Archimedes", "Συρακούσα", "Ἀρχιμήδης", "Thailand", "Thongchai McIntai", "ประเทศไทย", "ธงไชย แม็คอินไตย์", "U.S.A.", "Brad Pitt", "U.S.A.", "Brad Pitt", "Yugoslavia (Cyrillic)", "Djordje Balasevic", "Југославија", "Ђорђе Балашевић", "Yugoslavia (Latin)", "Djordje Balasevic", "Jugoslavija", "Đorđe Balašević"))),
    (:line, 227, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "1,22222222222222222222222222222222222222,0x3,10e6\n2000.1,true,false,-10.34"), :Any), (:call, :reshape, (:ref, :Any, 1, 2000.1, (:call, :Float64, (:macrocall, Symbol("@int128_str"), "22222222222222222222222222222222222222")), true, 0x03, false, 1.0e7, -10.34), 2, 4), :Any)),
    (:line, 230, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readcsv, (:call, :IOBuffer, "-9223355253176920979,9223355253176920979"), :Int64), (:typed_hcat, :Int64, -9223355253176920979, 9223355253176920979), :Int64)),
    (:line, 233, :none),
    (:for, (:(=), :data, (:vect, "A B C", "A B C\n")), (:block,
        (:line, 234, :none),
        (:(=), (:tuple, :data, :hdr), (:call, :readdlm, (:call, :IOBuffer, :data), (:kw, :header, true))),
        (:line, 235, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :hdr, (:typed_hcat, :AbstractString, "A", "B", "C"))),
        (:line, 236, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :data, (:call, (:curly, :Array, :Float64), 0, 3)))
      )),
    (:line, 240, :none),
    (:macrocall, Symbol("@test"), (:call, :isequaldlm, (:call, :readdlm, (:call, :IOBuffer, "# Should ignore this π\n1\tα\n2\tβ\n")), (:typed_vcat, :Any, (:row, 1, "α"), (:row, 2, "β")), :Any)),
    (:line, 243, :none),
    (:let, (:block,
        (:line, 244, :none),
        (:call, :(==), (:call, :readdlm, (:call, :IOBuffer, :data), ' ', :BigInt), (:typed_hcat, :BigInt, 1, 2, 3))
      ), (:(=), :data, "1 2 3")),
    (:line, 248, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sprint, :show, "text/csv", (:vcat, (:row, 1, 2), (:row, 3, 4))), "1,2\n3,4\n")),
    (:line, 250, :none),
    (:for, (:(=), :writefunc, (:tuple, (:->, (:tuple, :io, :x), (:block,
              (:line, 250, :none),
              (:call, :show, :io, "text/csv", :x)
            )), (:->, (:tuple, :io, :x), (:block,
              (:line, 251, :none),
              (:call, :invoke, :writedlm, (:curly, :Tuple, :IO, :Any, :Any), :io, :x, ",")
            )))), (:block,
        (:line, 253, :none),
        (:let, (:block,
            (:line, 254, :none),
            (:call, :writefunc, :io, :x),
            (:line, 255, :none),
            (:call, :seek, :io, 0),
            (:line, 256, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, :io), (:vcat, (:row, 1, 2), (:row, 3, 4))))
          ), (:(=), :x, (:vect, (:tuple, 1, 2), (:tuple, 3, 4))), (:(=), :io, (:call, :IOBuffer))),
        (:line, 259, :none),
        (:let, (:block,
            (:line, 260, :none),
            (:call, :writefunc, :io, :x),
            (:line, 261, :none),
            (:call, :seek, :io, 0),
            (:line, 262, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:call, :vec, (:call, :readcsv, :io)), :x))
          ), (:(=), :x, (:vect, "foo", "bar")), (:(=), :io, (:call, :IOBuffer)))
      )),
    (:line, 267, :none),
    (:let, (:block,
        (:line, 268, :none),
        (:call, :open, (:->, (:tuple, :f), (:block,
              (:line, 269, :none),
              (:call, :write, :f, "Julia")
            )), :fn, "w"),
        (:line, 271, :none),
        (:call, :chmod, :fn, 0x0124),
        (:line, 272, :none),
        (:call, :(==), (:ref, (:call, :readdlm, :fn)), "Julia"),
        (:line, 273, :none),
        (:call, :rm, :fn)
      ), (:(=), :fn, (:call, :tempname))),
    (:line, 277, :none),
    (:let, (:block,
        (:line, 278, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, (:call, :IOBuffer, :data)), (:typed_hcat, :Any, 721, 1438, 1439, "…", 1)))
      ), (:(=), :data, "\"721\",\"1438\",\"1439\",\"…\",\"1\"")),
    (:line, 282, :none),
    (:let, (:block,
        (:line, 283, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :readcsv, (:call, :IOBuffer, :data)), (:typed_hcat, :Any, 1, "灣\"灣灣灣灣", 3)))
      ), (:(=), :data, "\"1\",\"灣\"\"灣灣灣灣\",\"3\""))
  ))