(:quote, (:block,
    (:line, 5, :none),
    (:let, (:block,
        (:line, 6, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :child), (:block,
              (:line, 6, :none),
              (:call, :stacktrace)
            ))),
        (:line, 7, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :parent), (:block,
              (:line, 7, :none),
              (:call, :child)
            ))),
        (:line, 8, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :grandparent), (:block,
              (:line, 8, :none),
              (:call, :parent)
            ))),
        (:line, 9, :none),
        (:(=), :line_numbers, (:call, :-, 9, (:vect, 3, 2, 1))),
        (:line, 10, :none),
        (:(=), :stack, (:call, :grandparent)),
        (:line, 13, :none),
        (:macrocall, Symbol("@assert"), (:call, :(>=), (:call, :length, :stack), 3), "Compiler has unexpectedly inlined functions"),
        (:line, 15, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:vect, (:quote, #QuoteNode
                :child
              ), (:quote, #QuoteNode
                :parent
              ), (:quote, #QuoteNode
                :grandparent
              )), (:comprehension, (:generator, (:., :f, (:quote, #QuoteNode
                    :func
                  )), (:(=), :f, (:ref, :stack, (:(:), 1, 3))))))),
        (:line, 16, :none),
        (:for, (:(=), (:tuple, :line, :frame), (:call, :zip, :line_numbers, (:ref, :stack, (:(:), 1, 3)))), (:block,
            (:line, 17, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:vect, (:call, :Symbol, (:macrocall, Symbol("@__FILE__"))), :line), (:vect, (:., :frame, (:quote, #QuoteNode
                      :file
                    )), (:., :frame, (:quote, #QuoteNode
                      :line
                    )))))
          )),
        (:line, 19, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:vect, false, false, false), (:comprehension, (:generator, (:., :f, (:quote, #QuoteNode
                    :from_c
                  )), (:(=), :f, (:ref, :stack, (:(:), 1, 3))))))),
        (:line, 22, :none),
        (:(=), :stack, (:call, (:., :StackTraces, (:quote, #QuoteNode
                :remove_frames!
              )), (:call, :grandparent), (:quote, #QuoteNode
              :parent
            ))),
        (:line, 23, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :stack, 1), (:call, :StackFrame, (:quote, #QuoteNode
                :grandparent
              ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 3)))),
        (:line, 25, :none),
        (:(=), :stack, (:call, (:., :StackTraces, (:quote, #QuoteNode
                :remove_frames!
              )), (:call, :grandparent), (:vect, (:quote, #QuoteNode
                :child
              ), (:quote, #QuoteNode
                :something_nonexistent
              )))),
        (:line, 26, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :stack, (:(:), 1, 2)), (:vect, (:call, :StackFrame, (:quote, #QuoteNode
                  :parent
                ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 2)), (:call, :StackFrame, (:quote, #QuoteNode
                  :grandparent
                ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 3))))),
        (:line, 31, :none),
        (:(=), :b, (:call, :PipeBuffer)),
        (:line, 32, :none),
        (:(=), :frame, (:ref, :stack, 1)),
        (:line, 33, :none),
        (:call, :serialize, :b, :frame),
        (:line, 34, :none),
        (:(=), :frame2, (:call, :deserialize, :b)),
        (:line, 35, :none),
        (:macrocall, Symbol("@test"), (:call, :(!==), :frame, :frame2)),
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :frame, :frame2)),
        (:line, 37, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isnull, (:., :frame, (:quote, #QuoteNode
                  :linfo
                ))))),
        (:line, 38, :none),
        (:macrocall, Symbol("@test"), (:call, :isnull, (:., :frame2, (:quote, #QuoteNode
                :linfo
              ))))
      )),
    (:line, 42, :none),
    (:let, (:block,
        (:line, 43, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :default, :without_c)),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :>, (:call, :length, :with_c), (:call, :length, :without_c))),
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, (:call, :filter, (:->, :frame, (:block,
                    (:line, 45, :none),
                    (:., :frame, (:quote, #QuoteNode
                        :from_c
                      ))
                  )), :with_c)))),
        (:line, 46, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, (:call, :filter, (:->, :frame, (:block,
                  (:line, 46, :none),
                  (:., :frame, (:quote, #QuoteNode
                      :from_c
                    ))
                )), :without_c)))
      ), (:(=), (:tuple, :default, :with_c, :without_c), (:tuple, (:call, :stacktrace), (:call, :stacktrace, true), (:call, :stacktrace, false)))),
    (:line, 49, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :StackTraces, (:quote, #QuoteNode
              :lookup
            )), :C_NULL), (:vect, (:., :StackTraces, (:quote, #QuoteNode
              :UNKNOWN
            ))))),
    (:line, 51, :none),
    (:let, (:block,
        (:line, 53, :none),
        (:call, :yieldto, (:macrocall, Symbol("@task"), (:call, :yieldto, :ct))),
        (:line, 54, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :catch_backtrace), (:ref, :StackFrame))),
        (:line, 56, :none),
        (:macrocall, Symbol("@noinline"), (:(=), (:call, :bad_function), (:block,
              (:line, 56, :none),
              (:call, :throw, (:call, :UndefVarError, (:quote, #QuoteNode
                    :nonexistent
                  )))
            ))),
        (:line, 57, :none),
        (:macrocall, Symbol("@noinline"), (:function, (:call, :try_stacktrace), (:block,
              (:line, 58, :none),
              (:try, (:block,
                  (:line, 59, :none),
                  (:call, :bad_function)
                ), false, (:block,
                  (:line, 61, :none),
                  (:return, (:call, :stacktrace))
                ))
            ))),
        (:line, 64, :none),
        (:macrocall, Symbol("@noinline"), (:function, (:call, :try_catch), (:block,
              (:line, 65, :none),
              (:try, (:block,
                  (:line, 66, :none),
                  (:call, :bad_function)
                ), false, (:block,
                  (:line, 68, :none),
                  (:return, (:call, :catch_stacktrace))
                ))
            ))),
        (:line, 71, :none),
        (:(=), :line_numbers, (:call, :.-, 71, (:vect, 15, 10, 5))),
        (:line, 74, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :try_stacktrace), 1), (:call, :StackFrame, (:quote, #QuoteNode
                :try_stacktrace
              ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 2)))),
        (:line, 77, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:call, :try_catch), (:(:), 1, 2)), (:vect, (:call, :StackFrame, (:quote, #QuoteNode
                  :bad_function
                ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 1)), (:call, :StackFrame, (:quote, #QuoteNode
                  :try_catch
                ), (:macrocall, Symbol("@__FILE__")), (:ref, :line_numbers, 3)))))
      ), (:(=), :ct, (:call, :current_task))),
    (:line, 83, :none),
    (:module, true, :inlined_test, (:block,
        (:line, 83, :none),
        (:line, 84, :none),
        (:using, :Base, :Test),
        (:line, 85, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :g, :x), (:block,
              (:line, 85, :none),
              (:block,
                (:(=), :y, (:call, :throw, "a")),
                :y
              )
            ))),
        (:line, 86, :none),
        (:macrocall, Symbol("@inline"), (:(=), (:call, :h, :x), (:block,
              (:line, 86, :none),
              (:block,
                (:(=), :y, (:call, :g, :x)),
                :y
              )
            ))),
        (:line, 87, :none),
        (:(=), (:call, :f, :x), (:block,
            (:line, 87, :none),
            (:block,
              (:(=), :y, (:call, :h, :x)),
              :y
            )
          )),
        (:line, 88, :none),
        (:(=), :trace, (:ref, (:try, (:block,
                (:line, 88, :none),
                (:call, :f, 3)
              ), false, (:block,
                (:line, 88, :none),
                (:call, :catch_stacktrace)
              )), (:(:), 1, 3))),
        (:line, 89, :none),
        (:(=), :can_inline, (:call, :Bool, (:., (:call, (:., :Base, (:quote, #QuoteNode
                    :JLOptions
                  ))), (:quote, #QuoteNode
                :can_inline
              )))),
        (:line, 90, :none),
        (:for, (:(=), (:tuple, :frame, :func, :inlined), (:call, :zip, :trace, (:vect, :g, :h, :f), (:tuple, :can_inline, :can_inline, false))), (:block,
            (:line, 91, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:., :frame, (:quote, #QuoteNode
                    :func
                  )), (:., (:., (:., (:call, :typeof, :func), (:quote, #QuoteNode
                        :name
                      )), (:quote, #QuoteNode
                      :mt
                    )), (:quote, #QuoteNode
                    :name
                  )))),
            (:line, 95, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:., :frame, (:quote, #QuoteNode
                    :file
                  )), (:call, :Symbol, (:macrocall, Symbol("@__FILE__"))))),
            (:line, 96, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:., :frame, (:quote, #QuoteNode
                    :from_c
                  )))),
            (:line, 97, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:., :frame, (:quote, #QuoteNode
                    :inlined
                  )), :inlined))
          ))
      )),
    (:line, 101, :none),
    (:let, (:block,
        (:line, 105, :none),
        (:(=), (:., :li, (:quote, #QuoteNode
              :inferred
            )), :src),
        (:line, 106, :none),
        (:(=), (:., :li, (:quote, #QuoteNode
              :specTypes
            )), (:curly, :Tuple)),
        (:line, 107, :none),
        (:(=), :sf, (:call, :StackFrame, (:quote, #QuoteNode
              :a
            ), (:quote, #QuoteNode
              :b
            ), 3, :li, false, false, 0)),
        (:line, 108, :none),
        (:(=), :repr, (:call, :string, :sf)),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :repr, "Toplevel MethodInstance thunk at b:3"))
      ), (:(=), :src, (:(::), (:ref, (:., (:call, :expand, (:quote, (:block,
                    (:line, 101, :none),
                    (:let, (:block,), (:(=), :x, 1))
                  ))), (:quote, #QuoteNode
                :args
              )), 1), :CodeInfo)), (:(=), :li, (:call, :ccall, (:quote, #QuoteNode
            :jl_new_method_instance_uninit
          ), (:curly, :Ref, (:., :Core, (:quote, #QuoteNode
                :MethodInstance
              ))), (:tuple,))), :sf),
    (:line, 111, :none),
    (:let, (:block,
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :repr, "getfield(...) at b:3"))
      ), (:(=), :li, (:(::), (:., (:., (:., (:., (:call, :typeof, :getfield), (:quote, #QuoteNode
                    :name
                  )), (:quote, #QuoteNode
                  :mt
                )), (:quote, #QuoteNode
                :cache
              )), (:quote, #QuoteNode
              :func
            )), (:., :Core, (:quote, #QuoteNode
              :MethodInstance
            )))), (:(=), :sf, (:call, :StackFrame, (:quote, #QuoteNode
            :a
          ), (:quote, #QuoteNode
            :b
          ), 3, :li, false, false, 0)), (:(=), :repr, (:call, :string, :sf))),
    (:line, 117, :none),
    (:let, (:block,
        (:line, 120, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :ctest), 1)),
        (:line, 121, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., (:ref, :ctest, 1), (:quote, #QuoteNode
                :func
              )), (:quote, #QuoteNode
              :ctest
            ))),
        (:line, 122, :none),
        (:macrocall, Symbol("@test"), (:call, :isnull, (:., (:ref, :ctest, 1), (:quote, #QuoteNode
                :linfo
              )))),
        (:line, 123, :none),
        (:macrocall, Symbol("@test"), (:., (:ref, :ctest, 1), (:quote, #QuoteNode
              :from_c
            ))),
        (:line, 124, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., (:ref, :ctest, 1), (:quote, #QuoteNode
                :pointer
              )), (:call, :UInt64, :ctestptr)))
      ), (:(=), :ctestptr, (:call, :cglobal, (:tuple, (:quote, #QuoteNode
              :ctest
            ), "libccalltest"))), (:(=), :ctest, (:call, (:., :StackTraces, (:quote, #QuoteNode
              :lookup
            )), (:call, :+, :ctestptr, 1)))),
    (:line, 128, :none),
    (:let, (:block,
        (:line, 130, :none),
        (:macrocall, Symbol("@test"), (:call, :isempty, :st)),
        (:line, 131, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, :st, :StackTrace))
      ), (:(=), :st, (:call, :stacktrace, (:call, :empty!, (:call, :backtrace))))),
    (:line, 134, :none),
    (:module, true, :StackTracesTestMod, (:block,
        (:line, 134, :none),
        (:line, 135, :none),
        (:(=), (:call, :unfiltered_stacktrace), (:block,
            (:line, 135, :none),
            (:call, :stacktrace)
          )),
        (:line, 136, :none),
        (:(=), (:call, :filtered_stacktrace), (:block,
            (:line, 136, :none),
            (:call, (:., :StackTraces, (:quote, #QuoteNode
                  :remove_frames!
                )), (:call, :stacktrace), :StackTracesTestMod)
          ))
      )),
    (:line, 140, :none),
    (:(=), :trace, (:call, (:., :StackTracesTestMod, (:quote, #QuoteNode
            :unfiltered_stacktrace
          )))),
    (:line, 141, :none),
    (:macrocall, Symbol("@test"), (:call, :contains, (:call, :string, :trace), "unfiltered_stacktrace")),
    (:line, 143, :none),
    (:(=), :trace, (:call, (:., :StackTracesTestMod, (:quote, #QuoteNode
            :filtered_stacktrace
          )))),
    (:line, 144, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :contains, (:call, :string, :trace), "filtered_stacktrace")))
  ))