(:quote, (:block,
    (:line, 4, :none),
    (:(=), (:call, :isnull_oftype, (:(::), :x, :Nullable), (:(::), :T, :Type)), (:block,
        (:line, 4, :none),
        (:&&, (:call, :(==), (:call, :eltype, :x), :T), (:call, :isnull, :x))
      )),
    (:line, 5, :none),
    (:(=), (:call, :isnull_oftype, (:(::), :T, :Type)), (:block,
        (:line, 5, :none),
        (:->, :x, (:block,
            (:line, 5, :none),
            (:call, :isnull_oftype, :x, :T)
          ))
      )),
    (:line, 9, :none),
    (:(=), (:call, :istypeequal, (:(::), :x, :Nullable), (:(::), :y, :Nullable)), (:block,
        (:line, 9, :none),
        (:&&, (:call, :(==), (:call, :typeof, :x), (:call, :typeof, :y)), (:call, :isnull, (:call, :filter, :!, (:call, :.==, :x, :y))))
      )),
    (:line, 11, :none),
    (:(=), (:call, :istypeequal, (:(::), :x, :AbstractArray), (:(::), :y, :AbstractArray)), (:block,
        (:line, 11, :none),
        (:&&, (:call, :(==), (:call, :length, :x), (:call, :length, :y)), (:call, :all, (:->, :xy, (:block,
                (:line, 12, :none),
                (:call, :istypeequal, (:..., :xy))
              )), (:call, :zip, :x, :y)))
      )),
    (:line, 14, :none),
    (:(=), :types, (:vect, :Bool, :Float16, :Float32, :Float64, :Int128, :Int16, :Int32, :Int64, :Int8, :UInt16, :UInt32, :UInt64, :UInt8)),
    (:line, 31, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 32, :none),
        (:(=), :x, (:call, (:curly, :Nullable, :T))),
        (:line, 33, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), false)),
        (:line, 34, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 35, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, (:curly, :Nullable, :T)), :T)),
        (:line, 36, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :x), :T))
      )),
    (:line, 40, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 41, :none),
        (:(=), :x, (:call, (:curly, :Nullable, :T), (:call, :zero, :T))),
        (:line, 42, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), true)),
        (:line, 43, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 44, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :value
              )), (:call, :zero, :T))),
        (:line, 45, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :x), :T)),
        (:line, 47, :none),
        (:(=), :x, (:call, (:curly, :Nullable, :T), (:call, :one, :T))),
        (:line, 48, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), true)),
        (:line, 49, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 50, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :value
              )), (:call, :one, :T))),
        (:line, 51, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :x), :T))
      )),
    (:line, 55, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 56, :none),
        (:(=), :x, (:call, (:curly, :Nullable, :T), (:call, :zero, :T), true)),
        (:line, 57, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), true)),
        (:line, 58, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 59, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :value
              )), (:call, :zero, :T))),
        (:line, 60, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :x), :T)),
        (:line, 62, :none),
        (:(=), :x, (:call, (:curly, :Nullable, :T), (:call, :zero, :T), false)),
        (:line, 63, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), false)),
        (:line, 64, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 65, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, (:curly, :Nullable, :T)), :T)),
        (:line, 66, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :x), :T))
      )),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :NullException), :NullException)),
    (:line, 72, :none),
    (:macrocall, Symbol("@test_throws"), :NullException, (:call, :throw, (:call, :NullException))),
    (:line, 75, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 76, :none),
        (:(=), :v, (:call, :zero, :T)),
        (:line, 77, :none),
        (:(=), :x, (:call, :Nullable, :v)),
        (:line, 78, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), true)),
        (:line, 79, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 80, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :value
              )), :v)),
        (:line, 82, :none),
        (:(=), :v, (:call, :one, :T)),
        (:line, 83, :none),
        (:(=), :x, (:call, :Nullable, :v)),
        (:line, 84, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :hasvalue
              )), true)),
        (:line, 85, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:., :x, (:quote, #QuoteNode
                :value
              )), :T)),
        (:line, 86, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:., :x, (:quote, #QuoteNode
                :value
              )), :v))
      )),
    (:line, 90, :none),
    (:(=), :io1, (:call, :IOBuffer)),
    (:line, 91, :none),
    (:(=), :io2, (:call, :IOBuffer)),
    (:line, 92, :none),
    (:for, (:(=), (:tuple, :i, :T), (:call, :enumerate, :types)), (:block,
        (:line, 93, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 94, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 95, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 96, :none),
        (:call, :show, :io1, :x1),
        (:line, 97, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}()", :T))),
        (:line, 98, :none),
        (:call, :show, :io1, :x2),
        (:line, 99, :none),
        (:call, :showcompact, :io2, (:call, :get, :x2)),
        (:line, 100, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}(%s)", :T, (:call, :String, (:call, :take!, :io2))))),
        (:line, 101, :none),
        (:call, :show, :io1, :x3),
        (:line, 102, :none),
        (:call, :showcompact, :io2, (:call, :get, :x3)),
        (:line, 103, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}(%s)", :T, (:call, :String, (:call, :take!, :io2))))),
        (:line, 105, :none),
        (:(=), :a1, (:vect, :x2)),
        (:line, 106, :none),
        (:call, :show, (:call, :IOContext, :io1, (:call, :(=>), (:quote, #QuoteNode
                :compact
              ), false)), :a1),
        (:line, 107, :none),
        (:call, :show, (:call, :IOContext, :io2, (:call, :(=>), (:quote, #QuoteNode
                :compact
              ), false)), :x2),
        (:line, 108, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}[%s]", (:call, :string, :T), (:call, :String, (:call, :take!, :io2))))),
        (:line, 111, :none),
        (:call, :show, :io1, :a1),
        (:line, 112, :none),
        (:call, :show, (:call, :IOContext, :io2, (:call, :(=>), (:quote, #QuoteNode
                :compact
              ), true)), :x2),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}[%s]", (:call, :string, :T), (:call, :String, (:call, :take!, :io2)))))
      )),
    (:line, 117, :none),
    (:module, true, :NullableTestEnum, (:block,
        (:line, 117, :none),
        (:line, 119, :none),
        (:call, :include, "testenv.jl"),
        (:line, 120, :none),
        (:(=), :io, (:call, :IOBuffer)),
        (:line, 121, :none),
        (:macrocall, Symbol("@enum"), :TestEnum, :a, :b),
        (:line, 122, :none),
        (:call, :show, :io, (:call, :Nullable, :a)),
        (:line, 123, :none),
        (:macrocall, (:., (:., :Base, (:quote, #QuoteNode
                :Test
              )), (:quote, #QuoteNode
              Symbol("@test")
            )), (:call, :(==), (:call, :String, (:call, :take!, :io)), (:string, "Nullable{", :curmod_prefix, "TestEnum}(a)")))
      )),
    (:line, 127, :none),
    (:(=), :io1, (:call, :IOBuffer)),
    (:line, 128, :none),
    (:(=), :io2, (:call, :IOBuffer)),
    (:line, 129, :none),
    (:for, (:(=), (:tuple, :i, :T), (:call, :enumerate, :types)), (:block,
        (:line, 130, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 131, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 132, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 133, :none),
        (:call, :showcompact, :io1, :x1),
        (:line, 134, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), "#NULL")),
        (:line, 135, :none),
        (:call, :showcompact, :io1, :x2),
        (:line, 136, :none),
        (:call, :showcompact, :io2, (:call, :get, :x2)),
        (:line, 137, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:call, :String, (:call, :take!, :io2)))),
        (:line, 138, :none),
        (:call, :showcompact, :io1, :x3),
        (:line, 139, :none),
        (:call, :showcompact, :io2, (:call, :get, :x3)),
        (:line, 140, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:call, :String, (:call, :take!, :io2)))),
        (:line, 142, :none),
        (:(=), :a1, (:vect, :x2)),
        (:line, 143, :none),
        (:call, :showcompact, :io1, :a1),
        (:line, 144, :none),
        (:call, :showcompact, :io2, :x2),
        (:line, 145, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :String, (:call, :take!, :io1)), (:macrocall, Symbol("@sprintf"), "Nullable{%s}[%s]", (:call, :string, :T), (:call, :String, (:call, :take!, :io2)))))
      )),
    (:line, 150, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 151, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 152, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 153, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 155, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :get, :x1)),
        (:line, 156, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x2), (:call, :zero, :T))),
        (:line, 157, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x3), (:call, :one, :T)))
      )),
    (:line, 160, :none),
    (:macrocall, Symbol("@test_throws"), :NullException, (:call, :get, (:call, :Nullable))),
    (:line, 163, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 164, :none),
        (:(=), :x0, (:call, :Nullable)),
        (:line, 165, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 166, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 167, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 169, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x0, (:call, :zero, :T)), (:call, :zero, :T))),
        (:line, 170, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x0, (:call, :one, :T)), (:call, :one, :T))),
        (:line, 171, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x1, (:call, :zero, :T)), (:call, :zero, :T))),
        (:line, 172, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x1, (:call, :one, :T)), (:call, :one, :T))),
        (:line, 173, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x2, (:call, :one, :T)), (:call, :zero, :T))),
        (:line, 174, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, :x3, (:call, :zero, :T)), (:call, :one, :T)))
      )),
    (:line, 177, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 179, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 180, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 181, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 182, :none),
        (:(=), :a, (:call, :rand, :T)),
        (:line, 183, :none),
        (:(=), :x4, (:call, :Nullable, :a)),
        (:line, 185, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :unsafe_get, :x1), :T)),
        (:line, 186, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x2), (:call, :zero, :T))),
        (:line, 187, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x3), (:call, :one, :T))),
        (:line, 188, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x4), :a)),
        (:line, 191, :none),
        (:(=), :x2, (:call, :zero, :T)),
        (:line, 192, :none),
        (:(=), :x3, (:call, :one, :T)),
        (:line, 193, :none),
        (:(=), :x4, (:call, :rand, :T)),
        (:line, 195, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x2), (:call, :zero, :T))),
        (:line, 196, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x3), (:call, :one, :T))),
        (:line, 197, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unsafe_get, :x4), :x4))
      )),
    (:line, 200, :none),
    (:macrocall, Symbol("@test_throws"), :UndefRefError, (:call, :unsafe_get, (:call, :Nullable))),
    (:line, 201, :none),
    (:macrocall, Symbol("@test_throws"), :UndefRefError, (:call, :unsafe_get, (:call, (:curly, :Nullable, :String)))),
    (:line, 202, :none),
    (:macrocall, Symbol("@test_throws"), :UndefRefError, (:call, :unsafe_get, (:call, (:curly, :Nullable, :Array)))),
    (:line, 204, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 206, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 207, :none),
        (:(=), :x2, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 208, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :one, :T))),
        (:line, 210, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x1), true)),
        (:line, 211, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x2), false)),
        (:line, 212, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x3), false)),
        (:line, 215, :none),
        (:(=), :x1, (:call, :zero, :T)),
        (:line, 216, :none),
        (:(=), :x2, (:call, :one, :T)),
        (:line, 217, :none),
        (:(=), :x3, (:call, :rand, :T)),
        (:line, 219, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x1), false)),
        (:line, 220, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x2), false)),
        (:line, 221, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isnull, :x3), false))
      )),
    (:line, 224, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:call, :Nullable))),
    (:line, 227, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 228, :none),
        (:(=), :x0, (:call, :Nullable)),
        (:line, 229, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 230, :none),
        (:(=), :x2, (:call, (:curly, :Nullable, :T))),
        (:line, 231, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 232, :none),
        (:(=), :x4, (:call, :Nullable, (:call, :one, :T))),
        (:line, 234, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x0, :x1)),
        (:line, 235, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x0, :x2)),
        (:line, 236, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x0, :x3)),
        (:line, 237, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x0, :x4)),
        (:line, 239, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x1, :x1)),
        (:line, 240, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x1, :x2)),
        (:line, 241, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x1, :x3)),
        (:line, 242, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x1, :x4)),
        (:line, 244, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x2, :x1)),
        (:line, 245, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x2, :x2)),
        (:line, 246, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x2, :x3)),
        (:line, 247, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x2, :x4)),
        (:line, 249, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x3, :x1)),
        (:line, 250, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x3, :x2)),
        (:line, 251, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x3, :x3)),
        (:line, 252, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x3, :x4)),
        (:line, 254, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x4, :x1)),
        (:line, 255, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x4, :x2)),
        (:line, 256, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x4, :x3)),
        (:line, 257, :none),
        (:macrocall, Symbol("@test_throws"), :NullException, (:call, :(==), :x4, :x4))
      )),
    (:line, 261, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 262, :none),
        (:(=), :x0, (:call, :Nullable)),
        (:line, 263, :none),
        (:(=), :x1, (:call, (:curly, :Nullable, :T))),
        (:line, 264, :none),
        (:(=), :x2, (:call, (:curly, :Nullable, :T))),
        (:line, 265, :none),
        (:(=), :x3, (:call, :Nullable, (:call, :zero, :T))),
        (:line, 266, :none),
        (:(=), :x4, (:call, :Nullable, (:call, :one, :T))),
        (:line, 268, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :hash, :x0), :UInt)),
        (:line, 269, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :hash, :x1), :UInt)),
        (:line, 270, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :hash, :x2), :UInt)),
        (:line, 271, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :hash, :x3), :UInt)),
        (:line, 272, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :hash, :x4), :UInt)),
        (:line, 274, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, :x0), (:call, :hash, :x2))),
        (:line, 275, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x0), (:call, :hash, :x3))),
        (:line, 276, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x0), (:call, :hash, :x4))),
        (:line, 277, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, :x1), (:call, :hash, :x2))),
        (:line, 278, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x1), (:call, :hash, :x3))),
        (:line, 279, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x1), (:call, :hash, :x4))),
        (:line, 280, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x2), (:call, :hash, :x3))),
        (:line, 281, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x2), (:call, :hash, :x4))),
        (:line, 282, :none),
        (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :x3), (:call, :hash, :x4)))
      )),
    (:line, 285, :none),
    (:type, true, (:curly, :TestNType, :T), (:block,
        (:line, 286, :none),
        (:(::), :v, (:curly, :Nullable, :T))
      )),
    (:line, 289, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 290, :none),
        (:(=), :x1, (:call, (:curly, :TestNType, :T), (:call, (:curly, :Nullable, :T)))),
        (:line, 291, :none),
        (:macrocall, Symbol("@test"), (:call, :isnull, (:., :x1, (:quote, #QuoteNode
                :v
              )))),
        (:line, 292, :none),
        (:(=), (:., :x1, (:quote, #QuoteNode
              :v
            )), (:call, :one, :T)),
        (:line, 293, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :isnull, (:., :x1, (:quote, #QuoteNode
                  :v
                ))))),
        (:line, 294, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :get, (:., :x1, (:quote, #QuoteNode
                  :v
                )), (:call, :one, :T)), (:call, :one, :T)))
      )),
    (:line, 298, :none),
    (:(=), :TestTypes, (:vcat, (:comprehension, (:generator, (:ref, (:., :T, (:quote, #QuoteNode
                  :parameters
                )), 1), (:(=), :T, (:call, (:., :Base, (:quote, #QuoteNode
                    :uniontypes
                  )), (:., :Base, (:quote, #QuoteNode
                    :NullSafeTypes
                  )))))), (:vect, :BigInt, :BigFloat, (:curly, :Complex, :Int), (:curly, :Complex, :Float64), (:curly, :Complex, :BigFloat), (:curly, :Rational, :Int), (:curly, :Rational, :BigInt)))),
    (:line, 302, :none),
    (:for, (:block,
        (:(=), :S, :TestTypes),
        (:(=), :T, :TestTypes)
      ), (:block,
        (:line, 303, :none),
        (:(=), :u0, (:call, :zero, :S)),
        (:line, 304, :none),
        (:(=), :u1, (:call, :one, :S)),
        (:line, 305, :none),
        (:if, (:<:, :S, :AbstractFloat), (:block,
            (:line, 306, :none),
            (:(=), :u2, (:call, :S, :NaN))
          ), (:block,
            (:line, 307, :none),
            (:if, (:&&, (:<:, :S, :Complex), (:<:, (:ref, (:., :S, (:quote, #QuoteNode
                        :parameters
                      )), 1), :AbstractFloat)), (:block,
                (:line, 308, :none),
                (:(=), :u2, (:call, :S, :NaN, :NaN))
              ), (:block,
                (:line, 310, :none),
                (:(=), :u2, :u1)
              ))
          )),
        (:line, 313, :none),
        (:(=), :v0, (:call, :zero, :T)),
        (:line, 314, :none),
        (:(=), :v1, (:call, :one, :T)),
        (:line, 315, :none),
        (:if, (:<:, :T, :AbstractFloat), (:block,
            (:line, 316, :none),
            (:(=), :v2, (:call, :T, :NaN))
          ), (:block,
            (:line, 317, :none),
            (:if, (:&&, (:<:, :T, :Complex), (:<:, (:ref, (:., :T, (:quote, #QuoteNode
                        :parameters
                      )), 1), :AbstractFloat)), (:block,
                (:line, 318, :none),
                (:(=), :v2, (:call, :T, :NaN, :NaN))
              ), (:block,
                (:line, 320, :none),
                (:(=), :v2, :v1)
              ))
          )),
        (:line, 323, :none),
        (:for, (:block,
            (:(=), :u, (:tuple, :u0, :u1, :u2)),
            (:(=), :v, (:tuple, :v0, :v1, :v2))
          ), (:block,
            (:line, 325, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u), (:call, :Nullable, :v)), (:call, :isequal, :u, :v))),
            (:line, 326, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u), (:call, :Nullable, :u)), true)),
            (:line, 327, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :v), (:call, :Nullable, :v)), true)),
            (:line, 329, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u), (:call, :Nullable, :v, false)), false)),
            (:line, 330, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u, false), (:call, :Nullable, :v)), false)),
            (:line, 331, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u, false), (:call, :Nullable, :v, false)), true)),
            (:line, 333, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u), (:call, (:curly, :Nullable, :T))), false)),
            (:line, 334, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, (:curly, :Nullable, :S)), (:call, :Nullable, :v)), false)),
            (:line, 335, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, (:curly, :Nullable, :S)), (:call, (:curly, :Nullable, :T))), true)),
            (:line, 337, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable, :u), (:call, :Nullable)), false)),
            (:line, 338, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable), (:call, :Nullable, :v)), false)),
            (:line, 339, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, (:curly, :Nullable, :S)), (:call, :Nullable)), true)),
            (:line, 340, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable), (:call, (:curly, :Nullable, :T))), true)),
            (:line, 341, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isequal, (:call, :Nullable), (:call, :Nullable)), true)),
            (:line, 344, :none),
            (:if, (:&&, (:<:, :S, :Real), (:<:, :T, :Real)), (:block,
                (:line, 345, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u), (:call, :Nullable, :v)), (:call, :isless, :u, :v))),
                (:line, 346, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u), (:call, :Nullable, :u)), false)),
                (:line, 347, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :v), (:call, :Nullable, :v)), false)),
                (:line, 349, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u), (:call, :Nullable, :v, false)), true)),
                (:line, 350, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u, false), (:call, :Nullable, :v)), false)),
                (:line, 351, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u, false), (:call, :Nullable, :v, false)), false)),
                (:line, 353, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u), (:call, (:curly, :Nullable, :T))), true)),
                (:line, 354, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, (:curly, :Nullable, :S)), (:call, :Nullable, :v)), false)),
                (:line, 355, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, (:curly, :Nullable, :S)), (:call, (:curly, :Nullable, :T))), false)),
                (:line, 357, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable, :u), (:call, :Nullable)), true)),
                (:line, 358, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable), (:call, :Nullable, :v)), false)),
                (:line, 359, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, (:curly, :Nullable, :S)), (:call, :Nullable)), false)),
                (:line, 360, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable), (:call, (:curly, :Nullable, :T))), false)),
                (:line, 361, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, :isless, (:call, :Nullable), (:call, :Nullable)), false))
              ))
          ))
      )),
    (:line, 367, :none),
    (:for, (:(=), :T, :types), (:block,
        (:line, 368, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :Number), (:call, :Nullable, (:call, :one, :T))), (:curly, :Nullable, :Number))),
        (:line, 369, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :Number), (:call, :one, :T)), (:curly, :Nullable, :Number))),
        (:line, 370, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :T), (:call, :one, :T)), (:curly, :Nullable, :T))),
        (:line, 371, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :Any), (:call, :Nullable, (:call, :one, :T))), (:curly, :Nullable, :Any))),
        (:line, 372, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :Any), (:call, :one, :T)), (:curly, :Nullable, :Any))),
        (:line, 376, :none),
        (:for, (:(=), :S, :types), (:block,
            (:line, 377, :none),
            (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :T), (:call, :one, :S)), (:curly, :Nullable, :T)))
          ))
      )),
    (:line, 381, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:call, :convert, :Nullable, :nothing))),
    (:line, 382, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:call, :convert, (:curly, :Nullable, :Int), :nothing))),
    (:line, 383, :none),
    (:macrocall, Symbol("@test"), (:call, :isa, (:call, :convert, (:curly, :Nullable, :Int), :nothing), (:curly, :Nullable, :Int))),
    (:line, 385, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :Nullable, 1), (:call, :Nullable, 1))),
    (:line, 386, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :Nullable, (:call, :Nullable, 1)), (:call, :Nullable, 1))),
    (:line, 387, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :convert, :Nullable, "a"), (:call, :Nullable, "a"))),
    (:line, 388, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :convert, :Nullable, (:call, :Nullable, "a")), (:call, :Nullable, "a"))),
    (:line, 390, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :promote_type, (:curly, :Nullable, :Int), :Int), (:curly, :Nullable, :Int))),
    (:line, 391, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :promote_type, (:curly, :Nullable, (:curly, :Union)), :Int), (:curly, :Nullable, :Int))),
    (:line, 392, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :promote_type, (:curly, :Nullable, :Float64), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Float64))),
    (:line, 393, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :promote_type, (:curly, :Nullable, (:curly, :Union)), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Int))),
    (:line, 394, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :promote_type, (:curly, :Nullable, :Date), (:curly, :Nullable, :DateTime)), (:curly, :Nullable, :DateTime))),
    (:line, 396, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :promote_op
            )), :+, (:curly, :Nullable, :Int), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Int))),
    (:line, 397, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :promote_op
            )), :-, (:curly, :Nullable, :Int), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Int))),
    (:line, 398, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :promote_op
            )), :+, (:curly, :Nullable, :Float64), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Float64))),
    (:line, 399, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :promote_op
            )), :-, (:curly, :Nullable, :Float64), (:curly, :Nullable, :Int)), (:curly, :Nullable, :Float64))),
    (:line, 400, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, (:., :Base, (:quote, #QuoteNode
              :promote_op
            )), :-, (:curly, :Nullable, :DateTime), (:curly, :Nullable, :DateTime)), (:curly, :Nullable, (:., (:., :Base, (:quote, #QuoteNode
                :Dates
              )), (:quote, #QuoteNode
              :Millisecond
            ))))),
    (:line, 403, :none),
    (:macrocall, Symbol("@test"), (:call, :istypeequal, (:call, :Nullable, 0), (:call, :Nullable, 0))),
    (:line, 404, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:call, :Nullable, 0), (:call, :Nullable, 0.0)))),
    (:line, 405, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:call, :Nullable, 0), (:call, :Nullable, 1)))),
    (:line, 406, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:call, :Nullable, 0), (:call, :Nullable, 1.0)))),
    (:line, 407, :none),
    (:macrocall, Symbol("@test"), (:call, :istypeequal, (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)), (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)))),
    (:line, 408, :none),
    (:macrocall, Symbol("@test"), (:call, :istypeequal, (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)), (:ref, :Any, (:call, :Nullable, 0), (:call, :Nullable, 1)))),
    (:line, 409, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)), (:ref, :Any, (:call, :Nullable, 0.0), (:call, :Nullable, 1))))),
    (:line, 410, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)), (:vect, (:call, :Nullable, 0), (:call, :Nullable, 2))))),
    (:line, 411, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :istypeequal, (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1)), (:vect, (:call, :Nullable, 0), (:call, :Nullable, 1), (:call, :Nullable, 2))))),
    (:line, 415, :none),
    (:for, (:(=), :p, (:tuple, (:->, :_, (:block,
              (:line, 415, :none),
              true
            )), (:->, :_, (:block,
              (:line, 415, :none),
              false
            )))), (:block,
        (:line, 416, :none),
        (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :filter, :p, (:call, :Nullable))), (:call, :isnull_oftype, (:curly, :Union)))),
        (:line, 417, :none),
        (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :filter, :p, (:call, (:curly, :Nullable, :Int)))), (:call, :isnull_oftype, :Int)))
      )),
    (:line, 419, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :_, (:block,
                (:line, 419, :none),
                true
              )), (:call, :Nullable, 85))), (:call, :Nullable, 85))),
    (:line, 420, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :_, (:block,
                (:line, 420, :none),
                false
              )), (:call, :Nullable, 85))), (:call, :isnull_oftype, :Int))),
    (:line, 421, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :x, (:block,
                (:line, 421, :none),
                (:call, :>, :x, 0)
              )), (:call, :Nullable, 85))), (:call, :Nullable, 85))),
    (:line, 422, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :x, (:block,
                (:line, 422, :none),
                (:call, :<, :x, 0)
              )), (:call, :Nullable, 85))), (:call, :isnull_oftype, :Int))),
    (:line, 423, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :get, (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :x, (:block,
                  (:line, 423, :none),
                  (:call, :>, (:call, :length, :x), 2)
                )), (:call, :Nullable, "test")))), "test")),
    (:line, 424, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :filter, (:->, :x, (:block,
                (:line, 424, :none),
                (:call, :>, (:call, :length, :x), 5)
              )), (:call, :Nullable, "test"))), (:call, :isnull_oftype, :String))),
    (:line, 428, :none),
    (:(=), (:call, :sqr, :x), (:block,
        (:line, 428, :none),
        (:call, :^, :x, 2)
      )),
    (:line, 429, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :map, :sqr, (:call, :Nullable))), (:call, :isnull_oftype, (:curly, :Union)))),
    (:line, 430, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :map, :sqr, (:call, (:curly, :Nullable, :Int)))), (:call, :isnull_oftype, :Int))),
    (:line, 431, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :map, :sqr, (:call, :Nullable, 2))), (:call, :Nullable, 4))),
    (:line, 432, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :map, :+, (:call, :Nullable, 0.0))), (:call, :Nullable, 0.0))),
    (:line, 433, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :map, :+, (:call, :Nullable, 3.0, false))), (:call, :Nullable, 3.0, false))),
    (:line, 434, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :map, :-, (:call, :Nullable, 1.0))), (:call, :Nullable, -1.0))),
    (:line, 435, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :map, :-, (:call, (:curly, :Nullable, :Float64)))), (:call, :isnull_oftype, :Float64))),
    (:line, 436, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :map, :sin, (:call, :Nullable, 1))), (:call, :Nullable, (:call, :sin, 1)))),
    (:line, 437, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :map, :sin, (:call, (:curly, :Nullable, :Int)))), (:call, :isnull_oftype, :Float64))),
    (:line, 440, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :map, (:->, :x, (:block,
              (:line, 440, :none),
              (:if, :x, 0, 0.0)
            )), (:call, :Nullable)), (:call, :isnull_oftype, (:curly, :Union)))),
    (:line, 441, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :map, (:->, :x, (:block,
              (:line, 441, :none),
              (:if, :x, 0, 0.0)
            )), (:call, :Nullable, true)), (:call, :Nullable, 0))),
    (:line, 442, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :map, (:->, :x, (:block,
              (:line, 442, :none),
              (:if, :x, 0, 0.0)
            )), (:call, :Nullable, false)), (:call, :Nullable, 0.0))),
    (:line, 443, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :map, (:->, :x, (:block,
              (:line, 443, :none),
              (:if, :x, 0, 0.0)
            )), (:call, (:curly, :Nullable, :Bool))), (:call, :isnull_oftype, (:curly, :Union)))),
    (:line, 446, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:., :sin, (:tuple, (:call, :Nullable, 0.0))), (:call, :Nullable, 0.0))),
    (:line, 447, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:., :sin, (:tuple, (:call, (:curly, :Nullable, :Float64)))), (:call, :isnull_oftype, :Float64))),
    (:line, 448, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :sin, (:call, :Nullable, 0.0))), (:call, :Nullable, 0.0))),
    (:line, 449, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :sin, (:call, (:curly, :Nullable, :Float64)))), (:call, :isnull_oftype, :Float64))),
    (:line, 451, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :.+, (:call, :Nullable, 8), (:call, :Nullable, 10)), (:call, :Nullable, 18))),
    (:line, 452, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :.-, (:call, :Nullable, 8), (:call, :Nullable, 10)), (:call, :Nullable, -2))),
    (:line, 453, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :.+, (:call, :Nullable, 8), (:call, (:curly, :Nullable, :Int))), (:call, :isnull_oftype, :Int))),
    (:line, 454, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :.-, (:call, (:curly, :Nullable, :Int)), (:call, :Nullable, 10)), (:call, :isnull_oftype, :Int))),
    (:line, 456, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :log, 10, (:call, :Nullable, 1.0))), (:call, :Nullable, 0.0))),
    (:line, 458, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :log, 10, (:call, (:curly, :Nullable, :Float64)))), (:call, :isnull_oftype, :Float64))),
    (:line, 460, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :log, (:call, :Nullable, 10), (:call, :Nullable, 1.0))), (:call, :Nullable, 0.0))),
    (:line, 462, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :log, (:call, :Nullable, 10), (:call, (:curly, :Nullable, :Float64)))), (:call, :isnull_oftype, :Float64))),
    (:line, 465, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :.^, (:call, :Nullable, 2), (:call, :Nullable, 4)), (:call, :Nullable, 16))),
    (:line, 466, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :.^, (:call, :Nullable, 2), (:call, (:curly, :Nullable, :Int))), (:call, :isnull_oftype, :Int))),
    (:line, 469, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :.+, (:call, :.+, (:call, :.+, (:call, :.+, (:call, :.+, (:call, :Nullable, 1), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, :Nullable, 6))),
    (:line, 471, :none),
    (:macrocall, Symbol("@test"), (:call, :|>, (:call, :.+, (:call, :.+, (:call, :.+, (:call, :.+, (:call, :.+, (:call, :Nullable, 1), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, (:curly, :Nullable, :Int))), (:call, :Nullable, 1)), (:call, :Nullable, 1)), (:call, :isnull_oftype, :Int))),
    (:line, 475, :none),
    (:(=), :us, (:call, :map, :Nullable, (:(:), 1, 20))),
    (:line, 476, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :broadcast, :max, (:..., :us)), (:call, :Nullable, 20))),
    (:line, 477, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:call, :broadcast, :max, (:..., :us), (:call, (:curly, :Nullable, :Int))))),
    (:line, 481, :none),
    (:for, (:(=), :op, (:tuple, :+, :-, :*, :/, :\, ://, :(==), :<, :(!=), :(<=), :÷, :%, :<<, :>>, :^)), (:block,
        (:line, 483, :none),
        (:(=), :res, (:call, :op, 1, 1)),
        (:line, 484, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, :Nullable, 1), (:call, :Nullable, 1))), (:call, :Nullable, :res))),
        (:line, 486, :none),
        (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, (:curly, :Nullable, :Int)), (:call, :Nullable, 1))), (:call, :isnull_oftype, (:call, :typeof, :res)))),
        (:line, 488, :none),
        (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, :Nullable, 1), (:call, (:curly, :Nullable, :Int)))), (:call, :isnull_oftype, (:call, :typeof, :res)))),
        (:line, 490, :none),
        (:macrocall, Symbol("@test"), (:call, :|>, (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, (:curly, :Nullable, :Int)), (:call, (:curly, :Nullable, :Int)))), (:call, :isnull_oftype, (:call, :typeof, :res)))),
        (:line, 492, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, :Nullable, 1), 1)), (:call, :Nullable, :res))),
        (:line, 494, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, 1, (:call, :Nullable, 1))), (:call, :Nullable, :res)))
      )),
    (:line, 501, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:macrocall, Symbol("@inferred"), (:call, :.+, (:call, :Nullable), (:call, :Nullable))))),
    (:line, 502, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:macrocall, Symbol("@inferred"), (:call, :.+, (:call, :Nullable), 1)))),
    (:line, 503, :none),
    (:macrocall, Symbol("@test"), (:call, :isnull, (:macrocall, Symbol("@inferred"), (:call, :.+, (:call, :Nullable), (:call, :Nullable, 1))))),
    (:line, 506, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Nullable, 10.5), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :+, 1, 2, (:call, :Nullable, 3), (:call, :Nullable, 4.0), (:call, :Nullable, (:call, ://, 1, 2)))))),
    (:line, 510, :none),
    (:for, (:(=), :op, (:tuple, :+, :*, :-)), (:block,
        (:line, 511, :none),
        (:for, (:(=), :b1, (:tuple, false, true)), (:block,
            (:line, 512, :none),
            (:for, (:(=), :b2, (:tuple, false, true)), (:block,
                (:line, 513, :none),
                (:macrocall, Symbol("@test"), (:call, :(===), (:call, (:curly, :Nullable, :Int), (:call, :op, 1, 2), (:call, :&, :b1, :b2)), (:macrocall, Symbol("@inferred"), (:call, :broadcast, :op, (:call, (:curly, :Nullable, :Int), 1, :b1), (:call, (:curly, :Nullable, :Int), 2, :b2)))))
              ))
          ))
      )),
    (:line, 521, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :repr, (:call, :Nullable)), "Nullable{Union{}}()")),
    (:line, 524, :none),
    (:let, (:block,
        (:line, 525, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f19270, (:call, :Nullable, 0.0f0), (:call, :Nullable, (:call, :BigInt, 0))), (:curly, :Nullable, :Float32)))
      ), (:(=), (:call, (:curly, :f19270, :S, :T), (:(::), :x, :S), (:(::), :y, :T)), (:block,
          (:line, 524, :none),
          (:call, (:., :Base, (:quote, #QuoteNode
                :promote_op
              )), :^, :S, :T)
        ))),
    (:line, 529, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Nullable, :Tuple), (:call, (:curly, :Nullable, :DataType), :Tuple)))
  ))