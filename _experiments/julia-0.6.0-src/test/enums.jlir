(:quote, (:block,
    (:line, 4, :none),
    (:call, :include, "testenv.jl"),
    (:line, 6, :none),
    (:using, :Base, :Test),
    (:line, 8, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :convert, :Enum, 1.0)),
    (:line, 10, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Foo)))),
    (:line, 12, :none),
    (:macrocall, Symbol("@enum"), :Fruit, :apple, :orange, :kiwi),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :Fruit), :DataType)),
    (:line, 14, :none),
    (:macrocall, Symbol("@test"), (:call, :isbits, :Fruit)),
    (:line, 15, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :apple), :<:, :Fruit, :<:, :Enum)),
    (:line, 16, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :apple), 0)),
    (:line, 17, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :orange), 1)),
    (:line, 18, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :kiwi), 2)),
    (:line, 19, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 0), :apple)),
    (:line, 20, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 1), :orange)),
    (:line, 21, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 2), :kiwi)),
    (:line, 22, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Fruit, 3)),
    (:line, 23, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :Fruit, -1)),
    (:line, 24, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, 0x00), :apple)),
    (:line, 25, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Fruit, (:call, :big, 0)), :apple)),
    (:line, 26, :none),
    (:macrocall, Symbol("@test_throws"), :MethodError, (:call, :Fruit, 0.0)),
    (:line, 27, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typemin, :Fruit), :apple)),
    (:line, 28, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typemax, :Fruit), :kiwi)),
    (:line, 29, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 0), :apple)),
    (:line, 30, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 1), :orange)),
    (:line, 31, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Fruit, 2), :kiwi)),
    (:line, 32, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :convert, :Fruit, 3)),
    (:line, 33, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :convert, :Fruit, -1)),
    (:line, 34, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt8, :apple), 0x00)),
    (:line, 35, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt16, :orange), 0x0001)),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt128, :kiwi), (:macrocall, Symbol("@uint128_str"), "0x00000000000000000000000000000002"))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:<:, (:call, :typeof, (:call, :convert, :BigInt, :apple)), :BigInt)),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :BigInt, :apple), 0)),
    (:line, 39, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Bool, :apple), false)),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :convert, :Bool, :orange), true)),
    (:line, 41, :none),
    (:macrocall, Symbol("@test_throws"), :InexactError, (:call, :convert, :Bool, :kiwi)),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :instances, :Fruit), (:tuple, :apple, :orange, :kiwi))),
    (:line, 44, :none),
    (:(=), (:call, :f, (:(::), :x, :Fruit)), (:block,
        (:line, 44, :none),
        "hey, I'm a Fruit"
      )),
    (:line, 45, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :f, :apple), "hey, I'm a Fruit")),
    (:line, 47, :none),
    (:(=), :d, (:call, :Dict, (:call, :(=>), :apple, "apple"), (:call, :(=>), :orange, "orange"), (:call, :(=>), :kiwi, "kiwi"))),
    (:line, 48, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :apple), "apple")),
    (:line, 49, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :orange), "orange")),
    (:line, 50, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :d, :kiwi), "kiwi")),
    (:line, 51, :none),
    (:(=), :vals, (:vect, :apple, :orange, :kiwi)),
    (:line, 52, :none),
    (:for, (:(=), (:tuple, :i, :enum), (:call, :enumerate, (:call, :instances, :Fruit))), (:block,
        (:line, 53, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :enum, (:ref, :vals, :i)))
      )),
    (:line, 56, :none),
    (:macrocall, Symbol("@enum"), :QualityofFrenchFood, :ReallyGood),
    (:line, 57, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :instances, :QualityofFrenchFood)), 1)),
    (:line, 58, :none),
    (:macrocall, Symbol("@test"), (:comparison, (:call, :typeof, :ReallyGood), :<:, :QualityofFrenchFood, :<:, :Enum)),
    (:line, 59, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :ReallyGood), 0)),
    (:line, 61, :none),
    (:macrocall, Symbol("@enum"), :Binary, (:(=), :_zero, 0), (:(=), :_one, 1), (:(=), :_two, 10), (:(=), :_three, 11)),
    (:line, 62, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_zero), 0)),
    (:line, 63, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_one), 1)),
    (:line, 64, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_two), 10)),
    (:line, 65, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_three), 11)),
    (:line, 66, :none),
    (:macrocall, Symbol("@enum"), :Negative, (:(=), :_neg1, -1), (:(=), :_neg2, -2)),
    (:line, 67, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg1), -1)),
    (:line, 68, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg2), -2)),
    (:line, 69, :none),
    (:macrocall, Symbol("@test_throws"), :InexactError, (:call, :convert, :UInt8, :_neg1)),
    (:line, 70, :none),
    (:macrocall, Symbol("@enum"), :Negative2, (:(=), :_neg5, -5), :_neg4, :_neg3),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg5), -5)),
    (:line, 72, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg4), -4)),
    (:line, 73, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :Int, :_neg3), -3)),
    (:line, 75, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test1, (:(=), :_zerofp, 0.0))))),
    (:line, 76, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test11, (:(=), :_zerofp2, 0.5))))),
    (:line, 77, :none),
    (:macrocall, Symbol("@enum"), :Test111, (:(=), :_zerobi, (:call, :BigInt, 1))),
    (:line, 78, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Integer, :_zerobi), 1)),
    (:line, 81, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test2, :?)))),
    (:line, 82, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test22, (:(=), 1, 2))))),
    (:line, 85, :none),
    (:macrocall, Symbol("@enum"), (:(::), :Test3, :UInt8), (:(=), :_one_Test3, 0x01), (:(=), :_two_Test3, 0x02), (:(=), :_three_Test3, 0x03)),
    (:line, 86, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :Test3, (:quote, #QuoteNode
            :size
          )), 1)),
    (:line, 87, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :convert, :UInt8, :_one_Test3), 0x01)),
    (:line, 88, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :instances, :Test3)), 3)),
    (:line, 90, :none),
    (:macrocall, Symbol("@enum"), (:(::), :Test4, :UInt16), (:(=), :_one_Test4, 0x01), (:(=), :_two_Test4, 0x0002), (:(=), :_three_Test4, 0x03)),
    (:line, 91, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :Test4, (:quote, #QuoteNode
            :size
          )), 2)),
    (:line, 93, :none),
    (:macrocall, Symbol("@enum"), (:(::), :Test5, :UInt32), (:(=), :_one_Test5, 0x01), (:(=), :_two_Test5, 0x00000002), (:(=), :_three_Test5, 0x00000003)),
    (:line, 94, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :Test5, (:quote, #QuoteNode
            :size
          )), 4)),
    (:line, 96, :none),
    (:macrocall, Symbol("@enum"), (:(::), :Test6, :UInt128), (:(=), :_one_Test6, (:macrocall, Symbol("@uint128_str"), "0x00000000000000000000000000000001")), (:(=), :_two_Test6, (:macrocall, Symbol("@uint128_str"), "0x00000000000000000000000000000002"))),
    (:line, 97, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:., :Test6, (:quote, #QuoteNode
            :size
          )), 16)),
    (:line, 98, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, (:call, :convert, :Integer, :_one_Test6)), :UInt128)),
    (:line, 101, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test7, (:(=), :_zero, "zero"))))),
    (:line, 102, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test8, (:(=), :_zero, '0'))))),
    (:line, 103, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test9, (:(=), :_zero, 0.5))))),
    (:line, 106, :none),
    (:macrocall, Symbol("@enum"), :Test11, (:(=), :_zero_Test11, 2), :_one_Test11, (:(=), :_two_Test11, 5), :_three_Test11),
    (:line, 111, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_zero_Test11), 2)),
    (:line, 112, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_one_Test11), 3)),
    (:line, 113, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_two_Test11), 5)),
    (:line, 114, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :Int, :_three_Test11), 6)),
    (:line, 117, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:macrocall, Symbol("@eval"), (:macrocall, Symbol("@enum"), :EnumOvf, (:(=), :x, (:call, :typemax, :Int32)), :y))),
    (:line, 120, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :eval, (:quote, (:macrocall, Symbol("@enum"), :Test14, :_zero_Test14, :_one_Test14, (:(=), :_two_Test14, 0))))),
    (:line, 122, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :repr, :apple), (:string, "apple::", (:call, :string, :Fruit), " = 0"))),
    (:line, 123, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :string, :apple), "apple")),
    (:line, 125, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reprmime, "text/plain", :Fruit), (:string, "Enum ", (:call, :string, :Fruit), ":\napple = 0\norange = 1\nkiwi = 2"))),
    (:line, 126, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :reprmime, "text/plain", :orange), (:string, "orange::", :curmod_prefix, "Fruit = 1"))),
    (:line, 128, :none),
    (:macrocall, Symbol("@enum"), :LogLevel, :DEBUG, :INFO, :WARN, :ERROR, :CRITICAL),
    (:line, 129, :none),
    (:macrocall, Symbol("@test"), (:call, :<, :DEBUG, :CRITICAL)),
    (:line, 132, :none),
    (:let, (:block,
        (:line, 133, :none),
        (:call, :serialize, :b, :apple),
        (:line, 134, :none),
        (:call, :seekstart, :b),
        (:line, 135, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :deserialize, :b), :apple))
      ), (:(=), :b, (:call, :IOBuffer)))
  ))