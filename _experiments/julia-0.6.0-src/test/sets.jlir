(:quote, (:block,
    (:line, 6, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :typeof, (:call, :Set, (:vect, 1, 2, 3))), (:curly, :Set, :Int))),
    (:line, 7, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :typeof, (:call, (:curly, :Set, :Int), (:vect, 3))), (:curly, :Set, :Int))),
    (:line, 8, :none),
    (:(=), :data_in, (:tuple, 1, "banana", (:tuple,))),
    (:line, 9, :none),
    (:(=), :s, (:call, :Set, :data_in)),
    (:line, 10, :none),
    (:(=), :data_out, (:call, :collect, :s)),
    (:line, 11, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :typeof, :data_out), (:curly, :Array, :Any, 1))),
    (:line, 12, :none),
    (:macrocall, Symbol("@test"), (:call, :all, (:call, :map, (:->, :d, (:block,
              (:line, 12, :none),
              (:call, :in, :d, :data_out)
            )), :data_in))),
    (:line, 13, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :data_out), (:call, :length, :data_in))),
    (:line, 14, :none),
    (:let, (:block,
        (:line, 15, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :Set, (:generator, :x, (:(=), :x, (:(:), 1, 3)))), (:curly, :Set, :Int))),
        (:line, 16, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :Set, (:generator, (:call, :sin, :x), (:(=), :x, (:(:), 1, 3)))), (:curly, :Set, :Float64))),
        (:line, 17, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :Set, (:generator, (:call, :f17741, :x), (:(=), :x, (:(:), 1, 3)))), (:curly, :Set, :Int))),
        (:line, 18, :none),
        (:macrocall, Symbol("@test"), (:call, :isa, (:call, :Set, (:generator, (:call, :f17741, :x), (:(=), :x, (:(:), -1, 1)))), (:curly, :Set, :Integer)))
      ), (:(=), :f17741, (:->, :x, (:block,
            (:line, 14, :none),
            (:if, (:call, :<, :x, 0), false, 1)
          )))),
    (:line, 22, :none),
    (:(=), :s1, (:call, :Set, (:vect, "bar", "foo"))),
    (:line, 23, :none),
    (:(=), :s2, (:call, :Set, (:vect, "foo", "bar"))),
    (:line, 24, :none),
    (:(=), :s3, (:call, :Set, (:vect, "baz"))),
    (:line, 25, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :hash, :s1), (:call, :hash, :s2))),
    (:line, 26, :none),
    (:macrocall, Symbol("@test"), (:call, :(!=), (:call, :hash, :s1), (:call, :hash, :s3))),
    (:line, 29, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :Set), (:call, :Set))),
    (:line, 30, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, :Set), (:call, :Set, (:vect, 1))))),
    (:line, 31, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, (:curly, :Set, :Any), (:ref, :Any, 1, 2)), (:call, (:curly, :Set, :Int), (:vect, 1, 2)))),
    (:line, 32, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Any), (:ref, :Any, 1, 2)), (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3))))),
    (:line, 34, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, (:curly, :Set, :Int)), (:call, (:curly, :Set, :AbstractString)))),
    (:line, 35, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Int)), (:call, (:curly, :Set, :AbstractString), (:vect, ""))))),
    (:line, 36, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :AbstractString)), (:call, (:curly, :Set, :Int), (:vect, 0))))),
    (:line, 37, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Int), (:vect, 1)), (:call, (:curly, :Set, :AbstractString))))),
    (:line, 38, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3)), (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3)))),
    (:line, 39, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3)), (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3)))),
    (:line, 40, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3)), (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3, 4))))),
    (:line, 41, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3)), (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3, 4))))),
    (:line, 42, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3, 4)), (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3))))),
    (:line, 43, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isequal, (:call, (:curly, :Set, :Int), (:vect, 1, 2, 3, 4)), (:call, (:curly, :Set, :Any), (:vect, 1, 2, 3))))),
    (:line, 46, :none),
    (:(=), :s1, (:call, :similar, (:call, :Set, (:vect, 1, "hello")))),
    (:line, 47, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s1, (:call, :Set))),
    (:line, 48, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :s1), :Any)),
    (:line, 49, :none),
    (:(=), :s2, (:call, :similar, (:call, (:curly, :Set, :Float32), (:vect, 2.0f0, 3.0f0, 4.0f0)))),
    (:line, 50, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s2, (:call, :Set))),
    (:line, 51, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :s2), :Float32)),
    (:line, 52, :none),
    (:(=), :s3, (:call, :similar, (:call, :Set, (:vect, 1, "hello")), :Float32)),
    (:line, 53, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s3, (:call, :Set))),
    (:line, 54, :none),
    (:macrocall, Symbol("@test"), (:call, :(===), (:call, :eltype, :s3), :Float32)),
    (:line, 57, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sprint, :show, (:call, :Set)), "Set{Any}()")),
    (:line, 58, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :sprint, :show, (:call, :Set, (:vect, 'a'))), "Set(['a'])")),
    (:line, 62, :none),
    (:(=), :s, (:call, :Set)),
    (:line, 62, :none),
    (:call, :push!, :s, 1),
    (:line, 62, :none),
    (:call, :push!, :s, 2),
    (:line, 62, :none),
    (:call, :push!, :s, 3),
    (:line, 63, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :isempty, :s))),
    (:line, 64, :none),
    (:macrocall, Symbol("@test"), (:call, :in, 1, :s)),
    (:line, 65, :none),
    (:macrocall, Symbol("@test"), (:call, :in, 2, :s)),
    (:line, 66, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :s), 3)),
    (:line, 67, :none),
    (:call, :push!, :s, 1),
    (:line, 67, :none),
    (:call, :push!, :s, 2),
    (:line, 67, :none),
    (:call, :push!, :s, 3),
    (:line, 68, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :s), 3)),
    (:line, 69, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s, 1), 1)),
    (:line, 70, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 1, :s))),
    (:line, 71, :none),
    (:macrocall, Symbol("@test"), (:call, :in, 2, :s)),
    (:line, 72, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :s), 2)),
    (:line, 73, :none),
    (:macrocall, Symbol("@test_throws"), :KeyError, (:call, :pop!, :s, 1)),
    (:line, 74, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s, 1, (:quote, #QuoteNode
            :foo
          )), (:quote, #QuoteNode
          :foo
        ))),
    (:line, 75, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :delete!, :s, 2)), 1)),
    (:line, 76, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 1, :s))),
    (:line, 77, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 2, :s))),
    (:line, 78, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s), 3)),
    (:line, 79, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :s), 0)),
    (:line, 80, :none),
    (:macrocall, Symbol("@test"), (:call, :isempty, :s)),
    (:line, 83, :none),
    (:(=), :data_in, (:tuple, 1, 2, 9, 8, 4)),
    (:line, 84, :none),
    (:(=), :s, (:call, :Set, :data_in)),
    (:line, 85, :none),
    (:(=), :c, (:call, :copy, :s)),
    (:line, 86, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, :c)),
    (:line, 87, :none),
    (:(=), :v, (:call, :pop!, :s)),
    (:line, 88, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, :v, :s))),
    (:line, 89, :none),
    (:macrocall, Symbol("@test"), (:call, :in, :v, :c)),
    (:line, 90, :none),
    (:call, :push!, :s, 100),
    (:line, 91, :none),
    (:call, :push!, :c, 200),
    (:line, 92, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 100, :c))),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 200, :s))),
    (:line, 96, :none),
    (:(=), :s, (:call, :Set, (:vect, 1))),
    (:line, 97, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :sizehint!, :s, 10), (:call, :Set, (:vect, 1)))),
    (:line, 98, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :empty!, :s), (:call, :Set))),
    (:line, 101, :none),
    (:let, (:block,
        (:line, 104, :none),
        (:(=), :s, (:call, :Set, (:vect, "a", "b", "c"))),
        (:line, 105, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :rehash!
            )), :s),
        (:line, 106, :none),
        (:(=), :k, (:., (:., :s, (:quote, #QuoteNode
                :dict
              )), (:quote, #QuoteNode
              :keys
            ))),
        (:line, 107, :none),
        (:call, (:., :Base, (:quote, #QuoteNode
              :rehash!
            )), :s),
        (:line, 108, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :k), (:call, :length, (:., (:., :s, (:quote, #QuoteNode
                    :dict
                  )), (:quote, #QuoteNode
                  :keys
                ))))),
        (:line, 109, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :k))), (:block,
            (:line, 110, :none),
            (:if, (:call, :isassigned, :k, :i), (:block,
                (:line, 111, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :k, :i), (:ref, (:., (:., :s, (:quote, #QuoteNode
                            :dict
                          )), (:quote, #QuoteNode
                          :keys
                        )), :i)))
              ), (:block,
                (:line, 113, :none),
                (:macrocall, Symbol("@test"), (:call, :!, (:call, :isassigned, (:., (:., :s, (:quote, #QuoteNode
                            :dict
                          )), (:quote, #QuoteNode
                          :keys
                        )), :i)))
              ))
          )),
        (:line, 116, :none),
        (:call, :(==), :s, (:call, :Set, (:vect, "a", "b", "c")))
      )),
    (:line, 120, :none),
    (:for, (:(=), :data_in, (:tuple, (:tuple, 7, 8, 4, 5), (:tuple, "hello", 23, 2.7, (:tuple,), (:vect,), (:tuple, 1, 8)))), (:block,
        (:line, 122, :none),
        (:(=), :s, (:call, :Set, :data_in)),
        (:line, 124, :none),
        (:(=), :s_new, (:call, :Set)),
        (:line, 125, :none),
        (:for, (:(=), :el, :s), (:block,
            (:line, 126, :none),
            (:call, :push!, :s_new, :el)
          )),
        (:line, 128, :none),
        (:macrocall, Symbol("@test"), (:call, :isequal, :s, :s_new)),
        (:line, 130, :none),
        (:(=), :t, (:call, :tuple, (:..., :s))),
        (:line, 131, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :t), (:call, :length, :s))),
        (:line, 132, :none),
        (:for, (:(=), :e, :t), (:block,
            (:line, 133, :none),
            (:macrocall, Symbol("@test"), (:call, :in, :e, :s))
          ))
      )),
    (:line, 138, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :union), (:call, :Set))),
    (:line, 139, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :union, (:call, :Set, (:vect, 1))), (:call, :Set, (:vect, 1)))),
    (:line, 140, :none),
    (:(=), :s, (:call, :∪, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 3, 4)))),
    (:line, 141, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 1, 2, 3, 4)))),
    (:line, 142, :none),
    (:(=), :s, (:call, :union, (:call, :Set, (:vect, 5, 6, 7, 8)), (:call, :Set, (:vect, 7, 8, 9)))),
    (:line, 143, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 5, 6, 7, 8, 9)))),
    (:line, 144, :none),
    (:(=), :s, (:call, :Set, (:vect, 1, 3, 5, 7))),
    (:line, 145, :none),
    (:call, :union!, :s, (:tuple, 2, 3, 4, 5)),
    (:line, 146, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 1, 2, 3, 4, 5, 7)))),
    (:line, 149, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :intersect, (:call, :Set, (:vect, 1))), (:call, :Set, (:vect, 1)))),
    (:line, 150, :none),
    (:(=), :s, (:call, :∩, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 3, 4)))),
    (:line, 151, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set))),
    (:line, 152, :none),
    (:(=), :s, (:call, :intersect, (:call, :Set, (:vect, 5, 6, 7, 8)), (:call, :Set, (:vect, 7, 8, 9)))),
    (:line, 153, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 7, 8)))),
    (:line, 154, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :intersect, (:call, :Set, (:vect, 2, 3, 1)), (:call, :Set, (:vect, 4, 2, 3)), (:call, :Set, (:vect, 5, 4, 3, 2))), (:call, :Set, (:vect, 2, 3)))),
    (:line, 157, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set)), (:call, :Set, (:vect, 1, 2, 3)))),
    (:line, 158, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1))), (:call, :Set, (:vect, 2, 3)))),
    (:line, 159, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2))), (:call, :Set, (:vect, 3)))),
    (:line, 160, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2, 3))), (:call, :Set))),
    (:line, 161, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 4))), (:call, :Set, (:vect, 1, 2, 3)))),
    (:line, 162, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :setdiff, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 4, 1))), (:call, :Set, (:vect, 2, 3)))),
    (:line, 163, :none),
    (:(=), :s, (:call, :Set, (:vect, 1, 3, 5, 7))),
    (:line, 164, :none),
    (:call, :setdiff!, :s, (:tuple, 3, 5)),
    (:line, 165, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 1, 7)))),
    (:line, 166, :none),
    (:(=), :s, (:call, :Set, (:vect, 1, 2, 3, 4))),
    (:line, 167, :none),
    (:call, :setdiff!, :s, (:call, :Set, (:vect, 2, 4, 5, 6))),
    (:line, 168, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 1, 3)))),
    (:line, 171, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:call, :Set), (:call, :Set, (:vect, 1)))),
    (:line, 172, :none),
    (:macrocall, Symbol("@test"), (:call, :<, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 173, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :<, (:call, :Set, (:vect, 3)), (:call, :Set, (:vect, 1, 2))))),
    (:line, 174, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :>, (:call, :Set, (:vect, 3)), (:call, :Set, (:vect, 1, 2))))),
    (:line, 175, :none),
    (:macrocall, Symbol("@test"), (:call, :>, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 176, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :(<=), (:call, :Set, (:vect, 3)), (:call, :Set, (:vect, 1, 2))))),
    (:line, 177, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :(>=), (:call, :Set, (:vect, 3)), (:call, :Set, (:vect, 1, 2))))),
    (:line, 178, :none),
    (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 179, :none),
    (:macrocall, Symbol("@test"), (:call, :(<=), (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 180, :none),
    (:macrocall, Symbol("@test"), (:call, :(>=), (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 181, :none),
    (:macrocall, Symbol("@test"), (:call, :(>=), (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 182, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :(>=), (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2, 4))))),
    (:line, 183, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :(<=), (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2, 4))))),
    (:line, 186, :none),
    (:for, (:(=), (:tuple, :l, :r), (:tuple, (:tuple, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 3, 4))), (:tuple, (:call, :Set, (:vect, 5, 6, 7, 8)), (:call, :Set, (:vect, 7, 8, 9))), (:tuple, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 3, 4))), (:tuple, (:call, :Set, (:vect, 5, 6, 7, 8)), (:call, :Set, (:vect, 7, 8, 9))), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set)), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1))), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2))), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 1, 2, 3))), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 4))), (:tuple, (:call, :Set, (:vect, 1, 2, 3)), (:call, :Set, (:vect, 4, 1))))), (:block,
        (:line, 196, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, (:call, :intersect, :l, :r), :l)),
        (:line, 197, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, (:call, :intersect, :l, :r), :r)),
        (:line, 198, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, :l, (:call, :union, :l, :r))),
        (:line, 199, :none),
        (:macrocall, Symbol("@test"), (:call, :issubset, :r, (:call, :union, :l, :r))),
        (:line, 200, :none),
        (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :union, (:call, :intersect, :l, :r), (:call, :symdiff, :l, :r)), (:call, :union, :l, :r)))
      )),
    (:line, 202, :none),
    (:toplevel, (:using, :Base, :⊇), (:using, :Base, :⊉), (:using, :Base, :⊋)),
    (:line, 203, :none),
    (:macrocall, Symbol("@test"), (:call, :⊆, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 204, :none),
    (:macrocall, Symbol("@test"), (:call, :⊊, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1, 2)))),
    (:line, 205, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :⊊, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1))))),
    (:line, 206, :none),
    (:macrocall, Symbol("@test"), (:call, :⊈, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 2)))),
    (:line, 207, :none),
    (:macrocall, Symbol("@test"), (:call, :⊇, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 1)))),
    (:line, 208, :none),
    (:macrocall, Symbol("@test"), (:call, :⊋, (:call, :Set, (:vect, 1, 2)), (:call, :Set, (:vect, 1)))),
    (:line, 209, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :⊋, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 1))))),
    (:line, 210, :none),
    (:macrocall, Symbol("@test"), (:call, :⊉, (:call, :Set, (:vect, 1)), (:call, :Set, (:vect, 2)))),
    (:line, 211, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :symdiff, (:call, :Set, (:vect, 1, 2, 3, 4)), (:call, :Set, (:vect, 2, 4, 5, 6))), (:call, :Set, (:vect, 1, 3, 5, 6)))),
    (:line, 214, :none),
    (:(=), :u, (:call, :unique, (:vect, 1, 1, 2))),
    (:line, 215, :none),
    (:macrocall, Symbol("@test"), (:call, :in, 1, :u)),
    (:line, 216, :none),
    (:macrocall, Symbol("@test"), (:call, :in, 2, :u)),
    (:line, 217, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, :u), 2)),
    (:line, 218, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :unique, :iseven, (:vect, 5, 1, 8, 9, 3, 4, 10, 7, 2, 6)), (:vect, 5, 8))),
    (:line, 219, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :unique, (:->, :n, (:block,
              (:line, 219, :none),
              (:call, :%, :n, 3)
            )), (:vect, 5, 1, 8, 9, 3, 4, 10, 7, 2, 6)), (:vect, 5, 1, 9))),
    (:line, 221, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:macrocall, Symbol("@inferred"), (:call, :unique, (:generator, :x, (:(=), :x, (:(:), 1, 1))))), (:vect, 1))),
    (:line, 222, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:(::), (:call, :unique, (:generator, :x, (:(=), :x, (:ref, :Any, 1, 1.0)))), (:curly, :Vector, :Real)), (:vect, 1))),
    (:line, 225, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:vect,))),
    (:line, 226, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:call, :Set))),
    (:line, 227, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:vect, 1, 2, 3))),
    (:line, 228, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:vect, (:quote, #QuoteNode
            :a
          ), (:quote, #QuoteNode
            :b
          ), (:quote, #QuoteNode
            :c
          )))),
    (:line, 229, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:call, :Set, (:vect, 1, 2, 3)))),
    (:line, 230, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :allunique, (:vect, 1, 1, 2)))),
    (:line, 231, :none),
    (:macrocall, Symbol("@test"), (:call, :!, (:call, :allunique, (:vect, (:quote, #QuoteNode
              :a
            ), (:quote, #QuoteNode
              :b
            ), (:quote, #QuoteNode
              :c
            ), (:quote, #QuoteNode
              :a
            ))))),
    (:line, 232, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:(:), 4, 7))),
    (:line, 233, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:(:), 1, 1))),
    (:line, 234, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:(:), 4.0, 0.3, 7.0))),
    (:line, 235, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:(:), 4, -1, 5))),
    (:line, 236, :none),
    (:macrocall, Symbol("@test"), (:call, :allunique, (:(:), 7, -1, 1))),
    (:line, 239, :none),
    (:(=), :s, (:call, :Set, (:vect, 1, 2, 3, 4))),
    (:line, 240, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, (:call, :filter, :isodd, :s), (:call, :Set, (:vect, 1, 3)))),
    (:line, 241, :none),
    (:call, :filter!, :isodd, :s),
    (:line, 242, :none),
    (:macrocall, Symbol("@test"), (:call, :isequal, :s, (:call, :Set, (:vect, 1, 3)))),
    (:line, 245, :none),
    (:macrocall, Symbol("@test_throws"), :ArgumentError, (:call, :first, (:call, :Set))),
    (:line, 246, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :first, (:call, :Set, 2)), 2)),
    (:line, 249, :none),
    (:let, (:block,
        (:line, 250, :none),
        (:macrocall, Symbol("@test"), (:call, :in, 2, :s)),
        (:line, 251, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s, 2), 2)),
        (:line, 252, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 2, :s))),
        (:line, 253, :none),
        (:macrocall, Symbol("@test_throws"), :KeyError, (:call, :pop!, :s, 2)),
        (:line, 254, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s, 2, (:tuple,)), (:tuple,))),
        (:line, 255, :none),
        (:macrocall, Symbol("@test"), (:call, :in, 3, :s)),
        (:line, 256, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, :s, 3, (:tuple,)), 3)),
        (:line, 257, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :in, 3, :s)))
      ), (:(=), :s, (:call, :Set, (:(:), 1, 5)))),
    (:line, 260, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :pop!, (:call, :Set, (:(:), 1, 2)), 2, :nothing), 2)),
    (:line, 262, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :length, (:call, :Set, (:vect, 'x', 120))), 2)),
    (:line, 265, :none),
    (:let, (:block,
        (:line, 266, :none),
        (:(=), :iset, (:call, :Set, (:vect, 17, 4711))),
        (:line, 267, :none),
        (:(=), :cfset, (:call, :convert, (:curly, :Set, :Float64), :iset)),
        (:line, 268, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :cfset), (:curly, :Set, :Float64))),
        (:line, 269, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :cfset, :iset)),
        (:line, 270, :none),
        (:(=), :fset, (:call, :Set, (:vect, 17.0, 4711.0))),
        (:line, 271, :none),
        (:(=), :ciset, (:call, :convert, (:curly, :Set, :Int), :fset)),
        (:line, 272, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :ciset), (:curly, :Set, :Int))),
        (:line, 273, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :ciset, :fset)),
        (:line, 274, :none),
        (:(=), :ssset, (:call, :Set, (:call, :split, "foo bar"))),
        (:line, 275, :none),
        (:(=), :cssset, (:call, :convert, (:curly, :Set, :String), :ssset)),
        (:line, 276, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :typeof, :cssset), (:curly, :Set, :String))),
        (:line, 277, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), :cssset, (:call, :Set, (:vect, "foo", "bar"))))
      ))
  ))