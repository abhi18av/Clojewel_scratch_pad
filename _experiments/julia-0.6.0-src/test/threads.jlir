(:quote, (:block,
    (:line, 3, :none),
    (:using, :Base, :Test),
    (:line, 4, :none),
    (:using, :Base, :Threads),
    (:line, 9, :none),
    (:function, (:call, :threaded_loop, :a, :r, :x), (:block,
        (:line, 10, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, :r), (:block,
              (:line, 11, :none),
              (:(=), (:ref, :a, :i), (:call, :+, 1, (:call, :atomic_add!, :x, 1)))
            )))
      )),
    (:line, 15, :none),
    (:function, (:call, :test_threaded_loop_and_atomic_add), (:block,
        (:line, 16, :none),
        (:(=), :x, (:call, :Atomic)),
        (:line, 17, :none),
        (:(=), :a, (:call, :zeros, :Int, 10000)),
        (:line, 18, :none),
        (:call, :threaded_loop, :a, (:(:), 1, 10000), :x),
        (:line, 19, :none),
        (:(=), :found, (:call, :zeros, :Bool, 10000)),
        (:line, 20, :none),
        (:(=), :was_inorder, true),
        (:line, 21, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :length, :a))), (:block,
            (:line, 22, :none),
            (:&=, :was_inorder, (:call, :(==), (:ref, :a, :i), :i)),
            (:line, 23, :none),
            (:(=), (:ref, :found, (:ref, :a, :i)), true)
          )),
        (:line, 25, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :x), 10000)),
        (:line, 28, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :findfirst, :found, false), 0)),
        (:line, 29, :none),
        (:if, :was_inorder, (:block,
            (:line, 30, :none),
            (:call, :println, :STDERR, "Warning: threaded loop executed in order")
          ))
      )),
    (:line, 34, :none),
    (:call, :test_threaded_loop_and_atomic_add),
    (:line, 37, :none),
    (:function, (:call, (:curly, :check_minmax_consistency, :T), (:(::), :old, (:curly, :Array, :T, 1)), (:(::), :m, :T), (:(::), :start, :T), (:(::), :o, (:., :Base, (:quote, #QuoteNode
              :Ordering
            )))), (:block,
        (:line, 38, :none),
        (:for, (:(=), :v, :old), (:block,
            (:line, 39, :none),
            (:if, (:call, :(!=), :v, :start), (:block,
                (:line, 41, :none),
                (:macrocall, Symbol("@test"), (:call, (:., :Base, (:quote, #QuoteNode
                        :lt
                      )), :o, (:ref, :old, (:call, :+, (:call, :-, :v, :m), 1)), :v))
              ))
          ))
      )),
    (:line, 46, :none),
    (:function, (:call, (:curly, :test_threaded_atomic_minmax, :T), (:(::), :m, :T), (:(::), :n, :T)), (:block,
        (:line, 47, :none),
        (:(=), :mid, (:call, :+, :m, (:call, :>>, (:call, :-, :n, :m), 1))),
        (:line, 48, :none),
        (:(=), :x, (:call, (:curly, :Atomic, :T), :mid)),
        (:line, 49, :none),
        (:(=), :y, (:call, (:curly, :Atomic, :T), :mid)),
        (:line, 50, :none),
        (:(=), :oldx, (:call, (:curly, :Array, :T), (:call, :+, (:call, :-, :n, :m), 1))),
        (:line, 51, :none),
        (:(=), :oldy, (:call, (:curly, :Array, :T), (:call, :+, (:call, :-, :n, :m), 1))),
        (:line, 52, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), :m, :n)), (:block,
              (:line, 53, :none),
              (:(=), (:ref, :oldx, (:call, :+, (:call, :-, :i, :m), 1)), (:call, :atomic_min!, :x, (:call, :T, :i))),
              (:line, 54, :none),
              (:(=), (:ref, :oldy, (:call, :+, (:call, :-, :i, :m), 1)), (:call, :atomic_max!, :y, (:call, :T, :i)))
            ))),
        (:line, 56, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :x), :m)),
        (:line, 57, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :y), :n)),
        (:line, 58, :none),
        (:call, :check_minmax_consistency, :oldy, :m, :mid, (:., :Base, (:quote, #QuoteNode
              :Forward
            ))),
        (:line, 59, :none),
        (:call, :check_minmax_consistency, :oldx, :m, :mid, (:., :Base, (:quote, #QuoteNode
              :Reverse
            )))
      )),
    (:line, 63, :none),
    (:call, :test_threaded_atomic_minmax, (:call, :Int16, -5000), (:call, :Int16, 5000)),
    (:line, 64, :none),
    (:call, :test_threaded_atomic_minmax, (:call, :UInt16, 27000), (:call, :UInt16, 37000)),
    (:line, 66, :none),
    (:function, (:call, (:curly, :threaded_add_locked, :LockT), (:(::), (:curly, :Type, :LockT)), :x, :n), (:block,
        (:line, 67, :none),
        (:(=), :critical, (:call, :LockT)),
        (:line, 68, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 69, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, :lock, :critical), :nothing)),
              (:line, 70, :none),
              (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
              (:line, 71, :none),
              (:(=), :x, (:call, :+, :x, 1)),
              (:line, 72, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing))
            ))),
        (:line, 74, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical))),
        (:line, 75, :none),
        (:(=), :nentered, 0),
        (:line, 76, :none),
        (:(=), :nfailed, (:call, :Atomic)),
        (:line, 77, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 78, :none),
              (:if, (:call, :trylock, :critical), (:block,
                  (:line, 79, :none),
                  (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
                  (:line, 80, :none),
                  (:+=, :nentered, 1),
                  (:line, 81, :none),
                  (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing))
                ), (:block,
                  (:line, 83, :none),
                  (:call, :atomic_add!, :nfailed, 1)
                ))
            ))),
        (:line, 86, :none),
        (:macrocall, Symbol("@test"), (:comparison, 0, :<, :nentered, :(<=), :n)),
        (:line, 87, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :+, :nentered, (:ref, :nfailed)), :n)),
        (:line, 88, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical))),
        (:line, 89, :none),
        (:return, :x)
      )),
    (:line, 92, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :threaded_add_locked, :SpinLock, 0, 10000), 10000)),
    (:line, 93, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :threaded_add_locked, :RecursiveSpinLock, 0, 10000), 10000)),
    (:line, 94, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :threaded_add_locked, :Mutex, 0, 10000), 10000)),
    (:line, 97, :none),
    (:let, (:block,
        (:line, 98, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical))),
        (:line, 99, :none),
        (:macrocall, Symbol("@test_throws"), :AssertionError, (:call, :unlock, :critical)),
        (:line, 100, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :lock, :critical), :nothing)),
        (:line, 101, :none),
        (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
        (:line, 102, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :lock, :critical), :nothing)),
        (:line, 103, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :trylock, :critical), true)),
        (:line, 104, :none),
        (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
        (:line, 105, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing)),
        (:line, 106, :none),
        (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
        (:line, 107, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing)),
        (:line, 108, :none),
        (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
        (:line, 109, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing)),
        (:line, 110, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical))),
        (:line, 111, :none),
        (:macrocall, Symbol("@test_throws"), :AssertionError, (:call, :unlock, :critical)),
        (:line, 112, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :trylock, :critical), true)),
        (:line, 113, :none),
        (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
        (:line, 114, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing)),
        (:line, 115, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical))),
        (:line, 116, :none),
        (:macrocall, Symbol("@test_throws"), :AssertionError, (:call, :unlock, :critical)),
        (:line, 117, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical)))
      ), (:(=), :critical, (:call, :RecursiveSpinLock))),
    (:line, 122, :none),
    (:function, (:call, (:curly, :threaded_gc_locked, :LockT), (:(::), (:curly, :Type, :LockT))), (:block,
        (:line, 123, :none),
        (:(=), :critical, (:call, :LockT)),
        (:line, 124, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 20)), (:block,
              (:line, 125, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, :lock, :critical), :nothing)),
              (:line, 126, :none),
              (:macrocall, Symbol("@test"), (:call, :islocked, :critical)),
              (:line, 127, :none),
              (:call, :gc, false),
              (:line, 128, :none),
              (:macrocall, Symbol("@test"), (:call, :(===), (:call, :unlock, :critical), :nothing))
            ))),
        (:line, 130, :none),
        (:macrocall, Symbol("@test"), (:call, :!, (:call, :islocked, :critical)))
      )),
    (:line, 133, :none),
    (:call, :threaded_gc_locked, :SpinLock),
    (:line, 134, :none),
    (:call, :threaded_gc_locked, (:., :Threads, (:quote, #QuoteNode
          :RecursiveSpinLock
        ))),
    (:line, 135, :none),
    (:call, :threaded_gc_locked, :Mutex),
    (:line, 139, :none),
    (:(=), :orig_curmodule14726, (:call, :current_module)),
    (:line, 140, :none),
    (:(=), :main_var14726, 1),
    (:line, 141, :none),
    (:module, true, :M14726, (:block,
        (:line, 141, :none),
        (:line, 142, :none),
        (:(=), :module_var14726, 1)
      )),
    (:line, 145, :none),
    (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 100)), (:block,
          (:line, 146, :none),
          (:for, (:(=), :j, (:(:), 1, 100)), (:block,
              (:line, 147, :none),
              (:macrocall, Symbol("@eval"), :M14726, (:(=), :module_var14726, (:$, :j)))
            ))
        ))),
    (:line, 150, :none),
    (:macrocall, Symbol("@test"), (:call, :isdefined, (:quote, #QuoteNode
          :orig_curmodule14726
        ))),
    (:line, 151, :none),
    (:macrocall, Symbol("@test"), (:call, :isdefined, (:quote, #QuoteNode
          :main_var14726
        ))),
    (:line, 152, :none),
    (:macrocall, Symbol("@test"), (:call, :(==), (:call, :current_module), :orig_curmodule14726)),
    (:line, 154, :none),
    (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 100)), (:block,
          (:line, 158, :none),
          (:macrocall, Symbol("@test"), (:call, :(==), (:call, :current_module), :orig_curmodule14726))
        ))),
    (:line, 161, :none),
    (:module, true, :M14726_2, (:block,
        (:line, 161, :none),
        (:line, 162, :none),
        (:using, :Base, :Test),
        (:line, 163, :none),
        (:using, :Base, :Threads),
        (:line, 164, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 100)), (:block,
              (:line, 169, :none),
              (:macrocall, Symbol("@test"), (:call, :(==), (:call, :current_module), :M14726_2))
            )))
      )),
    (:line, 174, :none),
    (:macrocall, Symbol("@test_throws"), :TypeError, (:curly, :Atomic, :Bool)),
    (:line, 175, :none),
    (:macrocall, Symbol("@test_throws"), :TypeError, (:curly, :Atomic, :BigInt)),
    (:line, 176, :none),
    (:macrocall, Symbol("@test_throws"), :TypeError, (:curly, :Atomic, :Complex128)),
    (:line, 179, :none),
    (:type, true, :CommBuf, (:block,
        (:line, 180, :none),
        (:(::), :var1, (:curly, :Atomic, :Int)),
        (:line, 181, :none),
        (:(::), :var2, (:curly, :Atomic, :Int)),
        (:line, 182, :none),
        (:(::), :correct_write, :Bool),
        (:line, 183, :none),
        (:(::), :correct_read, :Bool),
        (:line, 184, :none),
        (:(=), (:call, :CommBuf), (:block,
            (:line, 184, :none),
            (:call, :new, (:call, (:curly, :Atomic, :Int), 0), (:call, (:curly, :Atomic, :Int), 0), false, false)
          ))
      )),
    (:line, 186, :none),
    (:function, (:call, :test_atomic_write, (:(::), :commbuf, :CommBuf), (:(::), :n, :Int)), (:block,
        (:line, 187, :none),
        (:for, (:(=), :i, (:(:), 1, :n)), (:block,
            (:line, 189, :none),
            (:(=), (:ref, (:., :commbuf, (:quote, #QuoteNode
                    :var1
                  ))), :i),
            (:line, 190, :none),
            (:(=), (:ref, (:., :commbuf, (:quote, #QuoteNode
                    :var2
                  ))), :i)
          )),
        (:line, 192, :none),
        (:(=), (:., :commbuf, (:quote, #QuoteNode
              :correct_write
            )), true)
      )),
    (:line, 194, :none),
    (:function, (:call, :test_atomic_read, (:(::), :commbuf, :CommBuf), (:(::), :n, :Int)), (:block,
        (:line, 195, :none),
        (:(=), :correct, true),
        (:line, 196, :none),
        (:while, true, (:block,
            (:line, 198, :none),
            (:(=), :var2, (:ref, (:., :commbuf, (:quote, #QuoteNode
                    :var2
                  )))),
            (:line, 199, :none),
            (:(=), :var1, (:ref, (:., :commbuf, (:quote, #QuoteNode
                    :var1
                  )))),
            (:line, 200, :none),
            (:&=, :correct, (:call, :(>=), :var1, :var2)),
            (:line, 201, :none),
            (:&&, (:call, :(==), :var1, :n), (:break,)),
            (:line, 203, :none),
            (:call, :ccall, (:quote, #QuoteNode
                :jl_gc_safepoint
              ), :Void, (:tuple,))
          )),
        (:line, 205, :none),
        (:(=), (:., :commbuf, (:quote, #QuoteNode
              :correct_read
            )), :correct)
      )),
    (:line, 207, :none),
    (:function, (:call, :test_atomic), (:block,
        (:line, 208, :none),
        (:(=), :commbuf, (:call, :CommBuf)),
        (:line, 209, :none),
        (:(=), :count, 1000000),
        (:line, 210, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 2)), (:block,
              (:line, 211, :none),
              (:if, (:call, :(==), :i, 1), (:block,
                  (:line, 212, :none),
                  (:call, :test_atomic_write, :commbuf, :count)
                ), (:block,
                  (:line, 214, :none),
                  (:call, :test_atomic_read, :commbuf, :count)
                ))
            ))),
        (:line, 217, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :commbuf, (:quote, #QuoteNode
                :correct_write
              )), true)),
        (:line, 218, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:., :commbuf, (:quote, #QuoteNode
                :correct_read
              )), true))
      )),
    (:line, 220, :none),
    (:call, :test_atomic),
    (:line, 224, :none),
    (:type, true, :Peterson, (:block,
        (:line, 226, :none),
        (:(::), :flag, (:curly, :Vector, (:curly, :Atomic, :Int))),
        (:line, 227, :none),
        (:(::), :turn, (:curly, :Atomic, :Int)),
        (:line, 229, :none),
        (:(::), :critical, (:curly, :Vector, (:curly, :Atomic, :Int))),
        (:line, 230, :none),
        (:(::), :correct, (:curly, :Vector, :Bool)),
        (:line, 231, :none),
        (:(=), (:call, :Peterson), (:block,
            (:line, 231, :none),
            (:call, :new, (:vect, (:call, (:curly, :Atomic, :Int), 0), (:call, (:curly, :Atomic, :Int), 0)), (:call, (:curly, :Atomic, :Int), 0), (:vect, (:call, (:curly, :Atomic, :Int), 0), (:call, (:curly, :Atomic, :Int), 0)), (:vect, false, false))
          ))
      )),
    (:line, 237, :none),
    (:function, (:call, :test_fence, (:(::), :p, :Peterson), (:(::), :id, :Int), (:(::), :n, :Int)), (:block,
        (:line, 238, :none),
        (:macrocall, Symbol("@assert"), (:call, :(==), :id, (:call, :mod1, :id, 2))),
        (:line, 239, :none),
        (:(=), :correct, true),
        (:line, 240, :none),
        (:(=), :otherid, (:call, :mod1, (:call, :+, :id, 1), 2)),
        (:line, 241, :none),
        (:for, (:(=), :i, (:(:), 1, :n)), (:block,
            (:line, 242, :none),
            (:(=), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                      :flag
                    )), :id)), 1),
            (:line, 243, :none),
            (:(=), (:ref, (:., :p, (:quote, #QuoteNode
                    :turn
                  ))), :otherid),
            (:line, 244, :none),
            (:call, :atomic_fence),
            (:line, 245, :none),
            (:while, (:&&, (:call, :(!=), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                          :flag
                        )), :otherid)), 0), (:call, :(==), (:ref, (:., :p, (:quote, #QuoteNode
                        :turn
                      ))), :otherid)), (:block,
                (:line, 248, :none),
                (:call, :ccall, (:quote, #QuoteNode
                    :jl_gc_safepoint
                  ), :Void, (:tuple,))
              )),
            (:line, 251, :none),
            (:(=), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                      :critical
                    )), :id)), 1),
            (:line, 252, :none),
            (:&=, :correct, (:call, :(==), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                        :critical
                      )), :otherid)), 0)),
            (:line, 253, :none),
            (:(=), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                      :critical
                    )), :id)), 0),
            (:line, 255, :none),
            (:(=), (:ref, (:ref, (:., :p, (:quote, #QuoteNode
                      :flag
                    )), :id)), 0)
          )),
        (:line, 257, :none),
        (:(=), (:ref, (:., :p, (:quote, #QuoteNode
                :correct
              )), :id), :correct)
      )),
    (:line, 259, :none),
    (:function, (:call, :test_fence), (:block,
        (:line, 260, :none),
        (:(=), :commbuf, (:call, :Peterson)),
        (:line, 261, :none),
        (:(=), :count, 1000000),
        (:line, 262, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 2)), (:block,
              (:line, 263, :none),
              (:call, :test_fence, :commbuf, :i, :count)
            ))),
        (:line, 265, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:., :commbuf, (:quote, #QuoteNode
                  :correct
                )), 1), true)),
        (:line, 266, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:ref, (:., :commbuf, (:quote, #QuoteNode
                  :correct
                )), 2), true))
      )),
    (:line, 268, :none),
    (:call, :test_fence),
    (:line, 271, :none),
    (:let, (:block,
        (:line, 278, :none),
        (:if, (:||, (:call, :(===), (:., :Sys, (:quote, #QuoteNode
                  :ARCH
                )), (:quote, #QuoteNode
                :i686
              )), (:||, (:call, :startswith, (:call, :string, (:., :Sys, (:quote, #QuoteNode
                      :ARCH
                    ))), "arm"), (:||, (:call, :(===), (:., :Sys, (:quote, #QuoteNode
                      :ARCH
                    )), (:quote, #QuoteNode
                    :powerpc64le
                  )), (:call, :(===), (:., :Sys, (:quote, #QuoteNode
                      :ARCH
                    )), (:quote, #QuoteNode
                    :ppc64le
                  ))))), (:block,
            (:line, 280, :none),
            (:call, :filter!, (:->, :T, (:block,
                  (:line, 280, :none),
                  (:call, :(<=), (:call, :sizeof, :T), 8)
                )), :atomic_types)
          )),
        (:line, 282, :none),
        (:for, (:(=), :T, :atomic_types), (:block,
            (:line, 283, :none),
            (:(=), :var, (:call, (:curly, :Atomic, :T))),
            (:line, 284, :none),
            (:(=), (:ref, :var), 42),
            (:line, 285, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :var), (:call, :T, 42))),
            (:line, 286, :none),
            (:(=), :old, (:call, :atomic_xchg!, :var, (:call, :T, 13))),
            (:line, 287, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), :old, (:call, :T, 42))),
            (:line, 288, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :var), (:call, :T, 13))),
            (:line, 289, :none),
            (:(=), :old, (:call, :atomic_cas!, :var, (:call, :T, 13), (:call, :T, 14))),
            (:line, 290, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), :old, (:call, :T, 13))),
            (:line, 291, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :var), (:call, :T, 14))),
            (:line, 292, :none),
            (:(=), :old, (:call, :atomic_cas!, :var, (:call, :T, 13), (:call, :T, 15))),
            (:line, 293, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), :old, (:call, :T, 14))),
            (:line, 294, :none),
            (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :var), (:call, :T, 14)))
          ))
      ), (:(=), :atomic_types, (:vect, :Int8, :Int16, :Int32, :Int64, :Int128, :UInt8, :UInt16, :UInt32, :UInt64, :UInt128, :Float16, :Float32, :Float64))),
    (:line, 299, :none),
    (:function, (:call, (:curly, :test_atomic_cas!, :T), (:(::), :var, (:curly, :Atomic, :T)), (:(::), :range, (:curly, :StepRange, :Int, :Int))), (:block,
        (:line, 300, :none),
        (:for, (:(=), :i, :range), (:block,
            (:line, 301, :none),
            (:while, true, (:block,
                (:line, 302, :none),
                (:(=), :old, (:call, :atomic_cas!, :var, (:call, :T, (:call, :-, :i, 1)), (:call, :T, :i))),
                (:line, 303, :none),
                (:&&, (:call, :(==), :old, (:call, :T, (:call, :-, :i, 1))), (:break,)),
                (:line, 305, :none),
                (:call, :ccall, (:quote, #QuoteNode
                    :jl_gc_safepoint
                  ), :Void, (:tuple,))
              ))
          ))
      )),
    (:line, 309, :none),
    (:for, (:(=), :T, (:tuple, :Int32, :Int64, :Float32, :Float64)), (:block,
        (:line, 310, :none),
        (:(=), :var, (:call, (:curly, :Atomic, :T))),
        (:line, 311, :none),
        (:(=), :nloops, 1000),
        (:line, 312, :none),
        (:(=), :di, (:call, :nthreads)),
        (:line, 313, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :di)), (:block,
              (:line, 314, :none),
              (:call, :test_atomic_cas!, :var, (:(:), :i, :di, :nloops))
            ))),
        (:line, 316, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :var), (:call, :T, :nloops)))
      )),
    (:line, 319, :none),
    (:function, (:call, (:curly, :test_atomic_xchg!, :T), (:(::), :var, (:curly, :Atomic, :T)), (:(::), :i, :Int), (:(::), :accum, (:curly, :Atomic, :Int))), (:block,
        (:line, 320, :none),
        (:(=), :old, (:call, :atomic_xchg!, :var, (:call, :T, :i))),
        (:line, 321, :none),
        (:call, :atomic_add!, :accum, (:call, :Int, :old))
      )),
    (:line, 323, :none),
    (:for, (:(=), :T, (:tuple, :Int32, :Int64, :Float32, :Float64)), (:block,
        (:line, 324, :none),
        (:(=), :accum, (:call, (:curly, :Atomic, :Int))),
        (:line, 325, :none),
        (:(=), :var, (:call, (:curly, :Atomic, :T))),
        (:line, 326, :none),
        (:(=), :nloops, 1000),
        (:line, 327, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :nloops)), (:block,
              (:line, 328, :none),
              (:call, :test_atomic_xchg!, :var, :i, :accum)
            ))),
        (:line, 330, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:call, :+, (:ref, :accum), (:call, :Int, (:ref, :var))), (:call, :sum, (:(:), 0, :nloops))))
      )),
    (:line, 333, :none),
    (:function, (:call, (:curly, :test_atomic_float, :T), (:(::), :varadd, (:curly, :Atomic, :T)), (:(::), :varmax, (:curly, :Atomic, :T)), (:(::), :varmin, (:curly, :Atomic, :T)), (:(::), :i, :Int)), (:block,
        (:line, 334, :none),
        (:call, :atomic_add!, :varadd, (:call, :T, :i)),
        (:line, 335, :none),
        (:call, :atomic_max!, :varmax, (:call, :T, :i)),
        (:line, 336, :none),
        (:call, :atomic_min!, :varmin, (:call, :T, :i))
      )),
    (:line, 338, :none),
    (:for, (:(=), :T, (:tuple, :Int32, :Int64, :Float32, :Float64)), (:block,
        (:line, 339, :none),
        (:(=), :varadd, (:call, (:curly, :Atomic, :T))),
        (:line, 340, :none),
        (:(=), :varmax, (:call, (:curly, :Atomic, :T))),
        (:line, 341, :none),
        (:(=), :varmin, (:call, (:curly, :Atomic, :T))),
        (:line, 342, :none),
        (:(=), :nloops, 1000),
        (:line, 343, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :nloops)), (:block,
              (:line, 344, :none),
              (:call, :test_atomic_float, :varadd, :varmax, :varmin, :i)
            ))),
        (:line, 346, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :varadd), (:call, :T, (:call, :sum, (:(:), 1, :nloops))))),
        (:line, 347, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :varmax), (:call, :T, (:call, :maximum, (:(:), 1, :nloops))))),
        (:line, 348, :none),
        (:macrocall, Symbol("@test"), (:call, :(===), (:ref, :varmin), (:call, :T, 0)))
      )),
    (:line, 350, :none),
    (:for, (:(=), :period, (:tuple, 0.06, (:call, (:., :Dates, (:quote, #QuoteNode
                :Millisecond
              )), 60))), (:block,
        (:line, 351, :none),
        (:let, (:block,
            (:line, 352, :none),
            (:(=), :c, (:call, :Condition)),
            (:line, 353, :none),
            (:(=), :task, (:call, :schedule, (:call, :Task, (:function, (:tuple,), (:block,
                      (:line, 354, :none),
                      (:call, :notify, :c),
                      (:line, 355, :none),
                      (:call, :wait, :c),
                      (:line, 356, :none),
                      (:(=), :t, (:call, :Timer, :period)),
                      (:line, 357, :none),
                      (:call, :wait, :t),
                      (:line, 358, :none),
                      (:call, :ccall, (:quote, #QuoteNode
                          :uv_async_send
                        ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
                      (:line, 359, :none),
                      (:call, :ccall, (:quote, #QuoteNode
                          :uv_async_send
                        ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
                      (:line, 360, :none),
                      (:call, :wait, :c),
                      (:line, 361, :none),
                      (:call, :sleep, :period),
                      (:line, 362, :none),
                      (:call, :ccall, (:quote, #QuoteNode
                          :uv_async_send
                        ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async),
                      (:line, 363, :none),
                      (:call, :ccall, (:quote, #QuoteNode
                          :uv_async_send
                        ), :Void, (:tuple, (:curly, :Ptr, :Void)), :async)
                    ))))),
            (:line, 365, :none),
            (:call, :wait, :c),
            (:line, 366, :none),
            (:call, :notify, :c),
            (:line, 367, :none),
            (:(=), :delay1, (:macrocall, Symbol("@elapsed"), (:call, :wait, :async))),
            (:line, 368, :none),
            (:call, :notify, :c),
            (:line, 369, :none),
            (:(=), :delay2, (:macrocall, Symbol("@elapsed"), (:call, :wait, :async))),
            (:line, 370, :none),
            (:macrocall, Symbol("@test"), (:call, :istaskdone, :task)),
            (:line, 371, :none),
            (:macrocall, Symbol("@test"), (:call, :>, :delay1, 0.05)),
            (:line, 372, :none),
            (:macrocall, Symbol("@test"), (:call, :>, :delay2, 0.05)),
            (:line, 373, :none),
            (:macrocall, Symbol("@test"), (:call, :isopen, :async)),
            (:line, 374, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :t))),
            (:line, 375, :none),
            (:call, :close, :t),
            (:line, 376, :none),
            (:call, :close, :async),
            (:line, 377, :none),
            (:macrocall, Symbol("@test_throws"), :EOFError, (:call, :wait, :async)),
            (:line, 378, :none),
            (:macrocall, Symbol("@test"), (:call, :!, (:call, :isopen, :async))),
            (:line, 379, :none),
            (:macrocall, Symbol("@test_throws"), :EOFError, (:call, :wait, :t)),
            (:line, 380, :none),
            (:macrocall, Symbol("@test_throws"), :EOFError, (:call, :wait, :async))
          ), (:(=), :async, (:call, (:., :Base, (:quote, #QuoteNode
                  :AsyncCondition
                )))), :t)
      )),
    (:line, 384, :none),
    (:(=), :complex_cfunction, (:function, (:tuple, :a), (:block,
          (:line, 385, :none),
          (:(=), :s, (:call, :zero, (:call, :eltype, :a))),
          (:line, 386, :none),
          (:macrocall, Symbol("@inbounds"), (:macrocall, Symbol("@simd"), (:for, (:(=), :i, :a), (:block,
                  (:line, 387, :none),
                  (:+=, :s, (:call, :muladd, (:ref, :a, :i), (:ref, :a, :i), -2))
                )))),
          (:line, 389, :none),
          (:return, :s)
        ))),
    (:line, 391, :none),
    (:function, (:call, :test_thread_cfunction), (:block,
        (:line, 392, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 1000)), (:block,
              (:line, 395, :none),
              (:call, :ccall, (:quote, #QuoteNode
                  :jl_function_ptr
                ), (:curly, :Ptr, :Void), (:tuple, :Any, :Any, :Any), :complex_cfunction, :Float64, (:curly, :Tuple, (:curly, :Ref, (:curly, :Vector, :Float64))))
            )))
      )),
    (:line, 399, :none),
    (:call, :test_thread_cfunction),
    (:line, 403, :none),
    (:if, (:call, :(==), (:call, :ccall, (:quote, #QuoteNode
            :jl_threading_enabled
          ), :Cint, (:tuple,)), 0), (:block,
        (:line, 404, :none),
        (:macrocall, Symbol("@test"), (:call, :(==), (:call, :nthreads), 1)),
        (:line, 405, :none),
        (:call, :(!=), (:call, :cglobal, (:quote, #QuoteNode
              :jl_tls_states
            )), :C_NULL)
      ), (:block,
        (:line, 407, :none),
        (:macrocall, Symbol("@test_throws"), :ErrorException, (:call, :cglobal, (:quote, #QuoteNode
              :jl_tls_states
            )))
      )),
    (:line, 410, :none),
    (:function, (:call, :test_thread_range), (:block,
        (:line, 411, :none),
        (:(=), :a, (:call, :zeros, :Int, (:call, :nthreads))),
        (:line, 412, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, (:call, :threadid))), (:block,
              (:line, 413, :none),
              (:(=), (:ref, :a, :i), 1)
            ))),
        (:line, 415, :none),
        (:for, (:(=), :i, (:(:), 1, (:call, :threadid))), (:block,
            (:line, 416, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :i), 1))
          )),
        (:line, 418, :none),
        (:for, (:(=), :i, (:(:), (:call, :+, (:call, :threadid), 1), (:call, :nthreads))), (:block,
            (:line, 419, :none),
            (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :i), 0))
          ))
      )),
    (:line, 422, :none),
    (:call, :test_thread_range),
    (:line, 425, :none),
    (:function, (:call, :test_load_and_lookup_18020, :n), (:block,
        (:line, 426, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, :n)), (:block,
              (:line, 427, :none),
              (:try, (:block,
                  (:line, 428, :none),
                  (:call, :ccall, (:quote, #QuoteNode
                      :jl_load_and_lookup
                    ), (:curly, :Ptr, :Void), (:tuple, :Cstring, :Cstring, (:curly, :Ref, (:curly, :Ptr, :Void))), (:string, :i), (:quote, #QuoteNode
                      :f
                    ), :C_NULL)
                ), false, (:block,))
            )))
      )),
    (:line, 434, :none),
    (:call, :test_load_and_lookup_18020, 10000),
    (:line, 438, :none),
    (:function, (:call, :test_nested_loops), (:block,
        (:line, 439, :none),
        (:(=), :a, (:call, :zeros, :Int, 100, 100)),
        (:line, 440, :none),
        (:macrocall, Symbol("@threads"), (:for, (:(=), :i, (:(:), 1, 100)), (:block,
              (:line, 441, :none),
              (:macrocall, Symbol("@threads"), (:for, (:(=), :j, (:(:), 1, 100)), (:block,
                    (:line, 442, :none),
                    (:(=), (:ref, :a, :j, :i), (:call, :+, :i, :j))
                  )))
            ))),
        (:line, 445, :none),
        (:for, (:(=), :i, (:(:), 1, 100)), (:block,
            (:line, 446, :none),
            (:for, (:(=), :j, (:(:), 1, 100)), (:block,
                (:line, 447, :none),
                (:macrocall, Symbol("@test"), (:call, :(==), (:ref, :a, :j, :i), (:call, :+, :i, :j)))
              ))
          ))
      )),
    (:line, 451, :none),
    (:call, :test_nested_loops)
  ))